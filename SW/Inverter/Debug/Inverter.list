
Inverter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f10  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ccmram       000004d4  08006108  08006108  00007108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00008200  080065e0  080065e0  000075e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800e7e0  0800e7e0  000101c4  2**0
                  CONTENTS
  5 .ARM          00000008  0800e7e0  0800e7e0  0000f7e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800e7e8  0800e7e8  000101c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800e7e8  0800e7e8  0000f7e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800e7ec  0800e7ec  0000f7ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000001c4  20000000  0800e7f0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000878  200001c8  0800e9b4  000101c8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000a40  0800e9b4  00010a40  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  000101c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002c1a4  00000000  00000000  000101f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005ad8  00000000  00000000  0003c396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000fcbf  00000000  00000000  00041e6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001440  00000000  00000000  00051b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001f7d  00000000  00000000  00052f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002c668  00000000  00000000  00054eed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002bcff  00000000  00000000  00081555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00105d51  00000000  00000000  000ad254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001b2fa5  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003cc8  00000000  00000000  001b2fe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005a  00000000  00000000  001b6cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200001c8 	.word	0x200001c8
 8000214:	00000000 	.word	0x00000000
 8000218:	080060f0 	.word	0x080060f0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200001cc 	.word	0x200001cc
 8000234:	080060f0 	.word	0x080060f0

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	@ 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_uldivmod>:
 80005b0:	b953      	cbnz	r3, 80005c8 <__aeabi_uldivmod+0x18>
 80005b2:	b94a      	cbnz	r2, 80005c8 <__aeabi_uldivmod+0x18>
 80005b4:	2900      	cmp	r1, #0
 80005b6:	bf08      	it	eq
 80005b8:	2800      	cmpeq	r0, #0
 80005ba:	bf1c      	itt	ne
 80005bc:	f04f 31ff 	movne.w	r1, #4294967295
 80005c0:	f04f 30ff 	movne.w	r0, #4294967295
 80005c4:	f000 b96a 	b.w	800089c <__aeabi_idiv0>
 80005c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005d0:	f000 f806 	bl	80005e0 <__udivmoddi4>
 80005d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005dc:	b004      	add	sp, #16
 80005de:	4770      	bx	lr

080005e0 <__udivmoddi4>:
 80005e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005e4:	9d08      	ldr	r5, [sp, #32]
 80005e6:	460c      	mov	r4, r1
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d14e      	bne.n	800068a <__udivmoddi4+0xaa>
 80005ec:	4694      	mov	ip, r2
 80005ee:	458c      	cmp	ip, r1
 80005f0:	4686      	mov	lr, r0
 80005f2:	fab2 f282 	clz	r2, r2
 80005f6:	d962      	bls.n	80006be <__udivmoddi4+0xde>
 80005f8:	b14a      	cbz	r2, 800060e <__udivmoddi4+0x2e>
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	4091      	lsls	r1, r2
 8000600:	fa20 f303 	lsr.w	r3, r0, r3
 8000604:	fa0c fc02 	lsl.w	ip, ip, r2
 8000608:	4319      	orrs	r1, r3
 800060a:	fa00 fe02 	lsl.w	lr, r0, r2
 800060e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000612:	fa1f f68c 	uxth.w	r6, ip
 8000616:	fbb1 f4f7 	udiv	r4, r1, r7
 800061a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800061e:	fb07 1114 	mls	r1, r7, r4, r1
 8000622:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000626:	fb04 f106 	mul.w	r1, r4, r6
 800062a:	4299      	cmp	r1, r3
 800062c:	d90a      	bls.n	8000644 <__udivmoddi4+0x64>
 800062e:	eb1c 0303 	adds.w	r3, ip, r3
 8000632:	f104 30ff 	add.w	r0, r4, #4294967295
 8000636:	f080 8112 	bcs.w	800085e <__udivmoddi4+0x27e>
 800063a:	4299      	cmp	r1, r3
 800063c:	f240 810f 	bls.w	800085e <__udivmoddi4+0x27e>
 8000640:	3c02      	subs	r4, #2
 8000642:	4463      	add	r3, ip
 8000644:	1a59      	subs	r1, r3, r1
 8000646:	fa1f f38e 	uxth.w	r3, lr
 800064a:	fbb1 f0f7 	udiv	r0, r1, r7
 800064e:	fb07 1110 	mls	r1, r7, r0, r1
 8000652:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000656:	fb00 f606 	mul.w	r6, r0, r6
 800065a:	429e      	cmp	r6, r3
 800065c:	d90a      	bls.n	8000674 <__udivmoddi4+0x94>
 800065e:	eb1c 0303 	adds.w	r3, ip, r3
 8000662:	f100 31ff 	add.w	r1, r0, #4294967295
 8000666:	f080 80fc 	bcs.w	8000862 <__udivmoddi4+0x282>
 800066a:	429e      	cmp	r6, r3
 800066c:	f240 80f9 	bls.w	8000862 <__udivmoddi4+0x282>
 8000670:	4463      	add	r3, ip
 8000672:	3802      	subs	r0, #2
 8000674:	1b9b      	subs	r3, r3, r6
 8000676:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800067a:	2100      	movs	r1, #0
 800067c:	b11d      	cbz	r5, 8000686 <__udivmoddi4+0xa6>
 800067e:	40d3      	lsrs	r3, r2
 8000680:	2200      	movs	r2, #0
 8000682:	e9c5 3200 	strd	r3, r2, [r5]
 8000686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800068a:	428b      	cmp	r3, r1
 800068c:	d905      	bls.n	800069a <__udivmoddi4+0xba>
 800068e:	b10d      	cbz	r5, 8000694 <__udivmoddi4+0xb4>
 8000690:	e9c5 0100 	strd	r0, r1, [r5]
 8000694:	2100      	movs	r1, #0
 8000696:	4608      	mov	r0, r1
 8000698:	e7f5      	b.n	8000686 <__udivmoddi4+0xa6>
 800069a:	fab3 f183 	clz	r1, r3
 800069e:	2900      	cmp	r1, #0
 80006a0:	d146      	bne.n	8000730 <__udivmoddi4+0x150>
 80006a2:	42a3      	cmp	r3, r4
 80006a4:	d302      	bcc.n	80006ac <__udivmoddi4+0xcc>
 80006a6:	4290      	cmp	r0, r2
 80006a8:	f0c0 80f0 	bcc.w	800088c <__udivmoddi4+0x2ac>
 80006ac:	1a86      	subs	r6, r0, r2
 80006ae:	eb64 0303 	sbc.w	r3, r4, r3
 80006b2:	2001      	movs	r0, #1
 80006b4:	2d00      	cmp	r5, #0
 80006b6:	d0e6      	beq.n	8000686 <__udivmoddi4+0xa6>
 80006b8:	e9c5 6300 	strd	r6, r3, [r5]
 80006bc:	e7e3      	b.n	8000686 <__udivmoddi4+0xa6>
 80006be:	2a00      	cmp	r2, #0
 80006c0:	f040 8090 	bne.w	80007e4 <__udivmoddi4+0x204>
 80006c4:	eba1 040c 	sub.w	r4, r1, ip
 80006c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006cc:	fa1f f78c 	uxth.w	r7, ip
 80006d0:	2101      	movs	r1, #1
 80006d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80006d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006da:	fb08 4416 	mls	r4, r8, r6, r4
 80006de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80006e2:	fb07 f006 	mul.w	r0, r7, r6
 80006e6:	4298      	cmp	r0, r3
 80006e8:	d908      	bls.n	80006fc <__udivmoddi4+0x11c>
 80006ea:	eb1c 0303 	adds.w	r3, ip, r3
 80006ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80006f2:	d202      	bcs.n	80006fa <__udivmoddi4+0x11a>
 80006f4:	4298      	cmp	r0, r3
 80006f6:	f200 80cd 	bhi.w	8000894 <__udivmoddi4+0x2b4>
 80006fa:	4626      	mov	r6, r4
 80006fc:	1a1c      	subs	r4, r3, r0
 80006fe:	fa1f f38e 	uxth.w	r3, lr
 8000702:	fbb4 f0f8 	udiv	r0, r4, r8
 8000706:	fb08 4410 	mls	r4, r8, r0, r4
 800070a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800070e:	fb00 f707 	mul.w	r7, r0, r7
 8000712:	429f      	cmp	r7, r3
 8000714:	d908      	bls.n	8000728 <__udivmoddi4+0x148>
 8000716:	eb1c 0303 	adds.w	r3, ip, r3
 800071a:	f100 34ff 	add.w	r4, r0, #4294967295
 800071e:	d202      	bcs.n	8000726 <__udivmoddi4+0x146>
 8000720:	429f      	cmp	r7, r3
 8000722:	f200 80b0 	bhi.w	8000886 <__udivmoddi4+0x2a6>
 8000726:	4620      	mov	r0, r4
 8000728:	1bdb      	subs	r3, r3, r7
 800072a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800072e:	e7a5      	b.n	800067c <__udivmoddi4+0x9c>
 8000730:	f1c1 0620 	rsb	r6, r1, #32
 8000734:	408b      	lsls	r3, r1
 8000736:	fa22 f706 	lsr.w	r7, r2, r6
 800073a:	431f      	orrs	r7, r3
 800073c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000740:	fa04 f301 	lsl.w	r3, r4, r1
 8000744:	ea43 030c 	orr.w	r3, r3, ip
 8000748:	40f4      	lsrs	r4, r6
 800074a:	fa00 f801 	lsl.w	r8, r0, r1
 800074e:	0c38      	lsrs	r0, r7, #16
 8000750:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000754:	fbb4 fef0 	udiv	lr, r4, r0
 8000758:	fa1f fc87 	uxth.w	ip, r7
 800075c:	fb00 441e 	mls	r4, r0, lr, r4
 8000760:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000764:	fb0e f90c 	mul.w	r9, lr, ip
 8000768:	45a1      	cmp	r9, r4
 800076a:	fa02 f201 	lsl.w	r2, r2, r1
 800076e:	d90a      	bls.n	8000786 <__udivmoddi4+0x1a6>
 8000770:	193c      	adds	r4, r7, r4
 8000772:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000776:	f080 8084 	bcs.w	8000882 <__udivmoddi4+0x2a2>
 800077a:	45a1      	cmp	r9, r4
 800077c:	f240 8081 	bls.w	8000882 <__udivmoddi4+0x2a2>
 8000780:	f1ae 0e02 	sub.w	lr, lr, #2
 8000784:	443c      	add	r4, r7
 8000786:	eba4 0409 	sub.w	r4, r4, r9
 800078a:	fa1f f983 	uxth.w	r9, r3
 800078e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000792:	fb00 4413 	mls	r4, r0, r3, r4
 8000796:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800079a:	fb03 fc0c 	mul.w	ip, r3, ip
 800079e:	45a4      	cmp	ip, r4
 80007a0:	d907      	bls.n	80007b2 <__udivmoddi4+0x1d2>
 80007a2:	193c      	adds	r4, r7, r4
 80007a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80007a8:	d267      	bcs.n	800087a <__udivmoddi4+0x29a>
 80007aa:	45a4      	cmp	ip, r4
 80007ac:	d965      	bls.n	800087a <__udivmoddi4+0x29a>
 80007ae:	3b02      	subs	r3, #2
 80007b0:	443c      	add	r4, r7
 80007b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80007b6:	fba0 9302 	umull	r9, r3, r0, r2
 80007ba:	eba4 040c 	sub.w	r4, r4, ip
 80007be:	429c      	cmp	r4, r3
 80007c0:	46ce      	mov	lr, r9
 80007c2:	469c      	mov	ip, r3
 80007c4:	d351      	bcc.n	800086a <__udivmoddi4+0x28a>
 80007c6:	d04e      	beq.n	8000866 <__udivmoddi4+0x286>
 80007c8:	b155      	cbz	r5, 80007e0 <__udivmoddi4+0x200>
 80007ca:	ebb8 030e 	subs.w	r3, r8, lr
 80007ce:	eb64 040c 	sbc.w	r4, r4, ip
 80007d2:	fa04 f606 	lsl.w	r6, r4, r6
 80007d6:	40cb      	lsrs	r3, r1
 80007d8:	431e      	orrs	r6, r3
 80007da:	40cc      	lsrs	r4, r1
 80007dc:	e9c5 6400 	strd	r6, r4, [r5]
 80007e0:	2100      	movs	r1, #0
 80007e2:	e750      	b.n	8000686 <__udivmoddi4+0xa6>
 80007e4:	f1c2 0320 	rsb	r3, r2, #32
 80007e8:	fa20 f103 	lsr.w	r1, r0, r3
 80007ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80007f0:	fa24 f303 	lsr.w	r3, r4, r3
 80007f4:	4094      	lsls	r4, r2
 80007f6:	430c      	orrs	r4, r1
 80007f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000800:	fa1f f78c 	uxth.w	r7, ip
 8000804:	fbb3 f0f8 	udiv	r0, r3, r8
 8000808:	fb08 3110 	mls	r1, r8, r0, r3
 800080c:	0c23      	lsrs	r3, r4, #16
 800080e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000812:	fb00 f107 	mul.w	r1, r0, r7
 8000816:	4299      	cmp	r1, r3
 8000818:	d908      	bls.n	800082c <__udivmoddi4+0x24c>
 800081a:	eb1c 0303 	adds.w	r3, ip, r3
 800081e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000822:	d22c      	bcs.n	800087e <__udivmoddi4+0x29e>
 8000824:	4299      	cmp	r1, r3
 8000826:	d92a      	bls.n	800087e <__udivmoddi4+0x29e>
 8000828:	3802      	subs	r0, #2
 800082a:	4463      	add	r3, ip
 800082c:	1a5b      	subs	r3, r3, r1
 800082e:	b2a4      	uxth	r4, r4
 8000830:	fbb3 f1f8 	udiv	r1, r3, r8
 8000834:	fb08 3311 	mls	r3, r8, r1, r3
 8000838:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800083c:	fb01 f307 	mul.w	r3, r1, r7
 8000840:	42a3      	cmp	r3, r4
 8000842:	d908      	bls.n	8000856 <__udivmoddi4+0x276>
 8000844:	eb1c 0404 	adds.w	r4, ip, r4
 8000848:	f101 36ff 	add.w	r6, r1, #4294967295
 800084c:	d213      	bcs.n	8000876 <__udivmoddi4+0x296>
 800084e:	42a3      	cmp	r3, r4
 8000850:	d911      	bls.n	8000876 <__udivmoddi4+0x296>
 8000852:	3902      	subs	r1, #2
 8000854:	4464      	add	r4, ip
 8000856:	1ae4      	subs	r4, r4, r3
 8000858:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800085c:	e739      	b.n	80006d2 <__udivmoddi4+0xf2>
 800085e:	4604      	mov	r4, r0
 8000860:	e6f0      	b.n	8000644 <__udivmoddi4+0x64>
 8000862:	4608      	mov	r0, r1
 8000864:	e706      	b.n	8000674 <__udivmoddi4+0x94>
 8000866:	45c8      	cmp	r8, r9
 8000868:	d2ae      	bcs.n	80007c8 <__udivmoddi4+0x1e8>
 800086a:	ebb9 0e02 	subs.w	lr, r9, r2
 800086e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000872:	3801      	subs	r0, #1
 8000874:	e7a8      	b.n	80007c8 <__udivmoddi4+0x1e8>
 8000876:	4631      	mov	r1, r6
 8000878:	e7ed      	b.n	8000856 <__udivmoddi4+0x276>
 800087a:	4603      	mov	r3, r0
 800087c:	e799      	b.n	80007b2 <__udivmoddi4+0x1d2>
 800087e:	4630      	mov	r0, r6
 8000880:	e7d4      	b.n	800082c <__udivmoddi4+0x24c>
 8000882:	46d6      	mov	lr, sl
 8000884:	e77f      	b.n	8000786 <__udivmoddi4+0x1a6>
 8000886:	4463      	add	r3, ip
 8000888:	3802      	subs	r0, #2
 800088a:	e74d      	b.n	8000728 <__udivmoddi4+0x148>
 800088c:	4606      	mov	r6, r0
 800088e:	4623      	mov	r3, r4
 8000890:	4608      	mov	r0, r1
 8000892:	e70f      	b.n	80006b4 <__udivmoddi4+0xd4>
 8000894:	3e02      	subs	r6, #2
 8000896:	4463      	add	r3, ip
 8000898:	e730      	b.n	80006fc <__udivmoddi4+0x11c>
 800089a:	bf00      	nop

0800089c <__aeabi_idiv0>:
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop

080008a0 <send_CAN_message>:
  *
  * @param hcan Pointer to the CAN handle structure.
  * @param dbc_msg Pointer to the structure containing CAN message information from CAN1db.h.
  * @param data Pointer to the array of float data to be sent.
  */
void send_CAN_message(CAN_HandleTypeDef *hcan, void *dbc_msg, const float *data) {
 80008a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t ide = ((const uint8_t*)dbc_msg)[4];
    uint8_t dlc = ((const uint8_t*)dbc_msg)[5];
    const struct signal_positioned *signals = (const struct signal_positioned*)((const uint8_t*)dbc_msg + 12);

    // Prepare data array
    uint8_t txData[8] = {0};
 80008a4:	2300      	movs	r3, #0
void send_CAN_message(CAN_HandleTypeDef *hcan, void *dbc_msg, const float *data) {
 80008a6:	b089      	sub	sp, #36	@ 0x24
    uint8_t dlc = ((const uint8_t*)dbc_msg)[5];
 80008a8:	794f      	ldrb	r7, [r1, #5]
    uint32_t id = ((const uint32_t*)dbc_msg)[0];
 80008aa:	f8d1 9000 	ldr.w	r9, [r1]
    uint8_t ide = ((const uint8_t*)dbc_msg)[4];
 80008ae:	f891 8004 	ldrb.w	r8, [r1, #4]
    uint8_t txData[8] = {0};
 80008b2:	e9cd 3300 	strd	r3, r3, [sp]

    // Loop through signals
    for (int i = 0; i < dlc; i++) {
 80008b6:	2f00      	cmp	r7, #0
 80008b8:	d048      	beq.n	800094c <send_CAN_message+0xac>
 80008ba:	468c      	mov	ip, r1
 80008bc:	4614      	mov	r4, r2
 80008be:	eb02 0687 	add.w	r6, r2, r7, lsl #2
        // Extract signal properties
        uint8_t lengthBits = signals[i].attributes->lengthBits;
 80008c2:	f8dc 3010 	ldr.w	r3, [ip, #16]
        float factor = signals[i].attributes->factor;
        float offset = signals[i].attributes->offset;

        // Convert float data to integer
        uint32_t intData = (uint32_t)((data[i] - offset) / factor);
 80008c6:	ecf4 7a01 	vldmia	r4!, {s15}
 80008ca:	ed93 7a04 	vldr	s14, [r3, #16]
 80008ce:	edd3 6a03 	vldr	s13, [r3, #12]
 80008d2:	ee77 7ac7 	vsub.f32	s15, s15, s14

        // Pack the data into bytes
        for (int j = 0; j < lengthBits / 8; j++) {
 80008d6:	7a5a      	ldrb	r2, [r3, #9]
 80008d8:	08d2      	lsrs	r2, r2, #3
        uint32_t intData = (uint32_t)((data[i] - offset) / factor);
 80008da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80008de:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80008e2:	ee17 1a90 	vmov	r1, s15
        for (int j = 0; j < lengthBits / 8; j++) {
 80008e6:	d02d      	beq.n	8000944 <send_CAN_message+0xa4>
            txData[signals[i].position / 8 + j] |= (intData >> (8 * j)) & 0xFF;
 80008e8:	f89c 300c 	ldrb.w	r3, [ip, #12]
 80008ec:	ad08      	add	r5, sp, #32
        for (int j = 0; j < lengthBits / 8; j++) {
 80008ee:	2a01      	cmp	r2, #1
            txData[signals[i].position / 8 + j] |= (intData >> (8 * j)) & 0xFF;
 80008f0:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
 80008f4:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 80008f8:	f815 bc20 	ldrb.w	fp, [r5, #-32]
 80008fc:	f103 0e21 	add.w	lr, r3, #33	@ 0x21
 8000900:	f103 0a22 	add.w	sl, r3, #34	@ 0x22
 8000904:	ea4b 0b01 	orr.w	fp, fp, r1
 8000908:	f103 0323 	add.w	r3, r3, #35	@ 0x23
 800090c:	44ee      	add	lr, sp
 800090e:	44ea      	add	sl, sp
 8000910:	446b      	add	r3, sp
 8000912:	f805 bc20 	strb.w	fp, [r5, #-32]
        for (int j = 0; j < lengthBits / 8; j++) {
 8000916:	d015      	beq.n	8000944 <send_CAN_message+0xa4>
            txData[signals[i].position / 8 + j] |= (intData >> (8 * j)) & 0xFF;
 8000918:	f81e 5c20 	ldrb.w	r5, [lr, #-32]
        for (int j = 0; j < lengthBits / 8; j++) {
 800091c:	2a02      	cmp	r2, #2
            txData[signals[i].position / 8 + j] |= (intData >> (8 * j)) & 0xFF;
 800091e:	ea45 2511 	orr.w	r5, r5, r1, lsr #8
 8000922:	f80e 5c20 	strb.w	r5, [lr, #-32]
        for (int j = 0; j < lengthBits / 8; j++) {
 8000926:	d00d      	beq.n	8000944 <send_CAN_message+0xa4>
            txData[signals[i].position / 8 + j] |= (intData >> (8 * j)) & 0xFF;
 8000928:	f81a 5c20 	ldrb.w	r5, [sl, #-32]
        for (int j = 0; j < lengthBits / 8; j++) {
 800092c:	2a03      	cmp	r2, #3
            txData[signals[i].position / 8 + j] |= (intData >> (8 * j)) & 0xFF;
 800092e:	ea45 4511 	orr.w	r5, r5, r1, lsr #16
 8000932:	f80a 5c20 	strb.w	r5, [sl, #-32]
        for (int j = 0; j < lengthBits / 8; j++) {
 8000936:	d005      	beq.n	8000944 <send_CAN_message+0xa4>
            txData[signals[i].position / 8 + j] |= (intData >> (8 * j)) & 0xFF;
 8000938:	f813 2c20 	ldrb.w	r2, [r3, #-32]
 800093c:	ea42 6211 	orr.w	r2, r2, r1, lsr #24
 8000940:	f803 2c20 	strb.w	r2, [r3, #-32]
    for (int i = 0; i < dlc; i++) {
 8000944:	42a6      	cmp	r6, r4
 8000946:	f10c 0c08 	add.w	ip, ip, #8
 800094a:	d1ba      	bne.n	80008c2 <send_CAN_message+0x22>

    // Prepare CAN header
    CAN_TxHeaderTypeDef txHeader;
    txHeader.StdId = id;
    txHeader.IDE = ide;
    txHeader.RTR = CAN_RTR_DATA;
 800094c:	2300      	movs	r3, #0
    txHeader.DLC = dlc;

    // Send the CAN message
    HAL_CAN_AddTxMessage(hcan, &txHeader, txData, NULL);
 800094e:	466a      	mov	r2, sp
 8000950:	a902      	add	r1, sp, #8
    txHeader.StdId = id;
 8000952:	f8cd 9008 	str.w	r9, [sp, #8]
    txHeader.IDE = ide;
 8000956:	f8cd 8010 	str.w	r8, [sp, #16]
    txHeader.DLC = dlc;
 800095a:	e9cd 3705 	strd	r3, r7, [sp, #20]
    HAL_CAN_AddTxMessage(hcan, &txHeader, txData, NULL);
 800095e:	f002 fbdf 	bl	8003120 <HAL_CAN_AddTxMessage>
}
 8000962:	b009      	add	sp, #36	@ 0x24
 8000964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000968 <handle_CAN>:
void handle_CAN(CAN_HandleTypeDef *hcan) {
 8000968:	b530      	push	{r4, r5, lr}
 800096a:	b08f      	sub	sp, #60	@ 0x3c
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData);
 800096c:	2100      	movs	r1, #0
void handle_CAN(CAN_HandleTypeDef *hcan) {
 800096e:	4604      	mov	r4, r0
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData);
 8000970:	ab01      	add	r3, sp, #4
 8000972:	aa07      	add	r2, sp, #28
 8000974:	f002 fc26 	bl	80031c4 <HAL_CAN_GetRxMessage>
    if (rxHeader.StdId == DBC_CAN1DB_MSG_AP_ETAS_Synchronism.ID) {
 8000978:	9b07      	ldr	r3, [sp, #28]
 800097a:	2b80      	cmp	r3, #128	@ 0x80
 800097c:	d001      	beq.n	8000982 <handle_CAN+0x1a>
}
 800097e:	b00f      	add	sp, #60	@ 0x3c
 8000980:	bd30      	pop	{r4, r5, pc}
    	keepAlive++;
 8000982:	4d0d      	ldr	r5, [pc, #52]	@ (80009b8 <handle_CAN+0x50>)
        send_CAN_message(hcan, &DBC_CAN1DB_MSG_AP_InvRear_Temperatures, temperatures);
 8000984:	4620      	mov	r0, r4
        float temperatures[] = {inverter_left.tempInverter, inverter_right.tempInverter, inverter_left.tempMotor, inverter_right.tempMotor};
 8000986:	490d      	ldr	r1, [pc, #52]	@ (80009bc <handle_CAN+0x54>)
    	keepAlive++;
 8000988:	782b      	ldrb	r3, [r5, #0]
        float temperatures[] = {inverter_left.tempInverter, inverter_right.tempInverter, inverter_left.tempMotor, inverter_right.tempMotor};
 800098a:	4a0d      	ldr	r2, [pc, #52]	@ (80009c0 <handle_CAN+0x58>)
    	keepAlive++;
 800098c:	3301      	adds	r3, #1
        float temperatures[] = {inverter_left.tempInverter, inverter_right.tempInverter, inverter_left.tempMotor, inverter_right.tempMotor};
 800098e:	f8d1 c080 	ldr.w	ip, [r1, #128]	@ 0x80
    	keepAlive++;
 8000992:	702b      	strb	r3, [r5, #0]
        float temperatures[] = {inverter_left.tempInverter, inverter_right.tempInverter, inverter_left.tempMotor, inverter_right.tempMotor};
 8000994:	f8d2 5080 	ldr.w	r5, [r2, #128]	@ 0x80
 8000998:	f8d1 4084 	ldr.w	r4, [r1, #132]	@ 0x84
 800099c:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
        send_CAN_message(hcan, &DBC_CAN1DB_MSG_AP_InvRear_Temperatures, temperatures);
 80009a0:	aa03      	add	r2, sp, #12
 80009a2:	4908      	ldr	r1, [pc, #32]	@ (80009c4 <handle_CAN+0x5c>)
        float temperatures[] = {inverter_left.tempInverter, inverter_right.tempInverter, inverter_left.tempMotor, inverter_right.tempMotor};
 80009a4:	f8cd c00c 	str.w	ip, [sp, #12]
 80009a8:	9504      	str	r5, [sp, #16]
 80009aa:	9405      	str	r4, [sp, #20]
 80009ac:	9306      	str	r3, [sp, #24]
        send_CAN_message(hcan, &DBC_CAN1DB_MSG_AP_InvRear_Temperatures, temperatures);
 80009ae:	f7ff ff77 	bl	80008a0 <send_CAN_message>
}
 80009b2:	b00f      	add	sp, #60	@ 0x3c
 80009b4:	bd30      	pop	{r4, r5, pc}
 80009b6:	bf00      	nop
 80009b8:	200001e4 	.word	0x200001e4
 80009bc:	20000350 	.word	0x20000350
 80009c0:	200001e8 	.word	0x200001e8
 80009c4:	20000000 	.word	0x20000000

080009c8 <calc_current_reference>:
 * 
 * 
 * @param[in] motor         Pointer to the motor parameters structure.
 * @param[in,out] reference Pointer to the reference struct.
 */
void calc_current_reference(MotorParameters * motor, volatile Reference * reference){
 80009c8:	b570      	push	{r4, r5, r6, lr}

	reference->torqueRef = fabs(reference->torqueRef);


    // CTC - please check equations and constant definitions thoroughly!!
    if (gammaRef == M_PI_2 || reference->torqueRef == 0.0F || motor->Ld == motor->Lq) {
 80009ca:	4e5f      	ldr	r6, [pc, #380]	@ (8000b48 <calc_current_reference+0x180>)
 80009cc:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
	if (reference->torqueRef >= 0){
 80009d0:	edd1 4a03 	vldr	s9, [r1, #12]
void calc_current_reference(MotorParameters * motor, volatile Reference * reference){
 80009d4:	460c      	mov	r4, r1
	reference->torqueRef = fabs(reference->torqueRef);
 80009d6:	edd1 7a03 	vldr	s15, [r1, #12]
void calc_current_reference(MotorParameters * motor, volatile Reference * reference){
 80009da:	4605      	mov	r5, r0
 80009dc:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 80009e0:	4b5a      	ldr	r3, [pc, #360]	@ (8000b4c <calc_current_reference+0x184>)
	reference->torqueRef = fabs(reference->torqueRef);
 80009e2:	eef0 7ae7 	vabs.f32	s15, s15
void calc_current_reference(MotorParameters * motor, volatile Reference * reference){
 80009e6:	ed2d 8b04 	vpush	{d8-d9}
    if (gammaRef == M_PI_2 || reference->torqueRef == 0.0F || motor->Ld == motor->Lq) {
 80009ea:	ed96 8a00 	vldr	s16, [r6]
 80009ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009f2:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
	reference->torqueRef = fabs(reference->torqueRef);
 80009f6:	edc1 7a03 	vstr	s15, [r1, #12]
    if (gammaRef == M_PI_2 || reference->torqueRef == 0.0F || motor->Ld == motor->Lq) {
 80009fa:	eeb7 5ac8 	vcvt.f64.f32	d5, s16
 80009fe:	bfac      	ite	ge
 8000a00:	2201      	movge	r2, #1
 8000a02:	f04f 32ff 	movlt.w	r2, #4294967295
 8000a06:	fe29 9a07 	vselge.f32	s18, s18, s14
 8000a0a:	ed9f 6b4d 	vldr	d6, [pc, #308]	@ 8000b40 <calc_current_reference+0x178>
 8000a0e:	701a      	strb	r2, [r3, #0]
 8000a10:	eeb4 5b46 	vcmp.f64	d5, d6
 8000a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a18:	d006      	beq.n	8000a28 <calc_current_reference+0x60>
 8000a1a:	edd1 7a03 	vldr	s15, [r1, #12]
 8000a1e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a26:	d158      	bne.n	8000ada <calc_current_reference+0x112>
        isRefCTC = 2.0F * reference->torqueRef * motor->constants.invThreePpLambda;
 8000a28:	ed95 8a0e 	vldr	s16, [r5, #56]	@ 0x38
 8000a2c:	edd4 7a03 	vldr	s15, [r4, #12]
 8000a30:	ee38 8a08 	vadd.f32	s16, s16, s16
 8000a34:	ee28 8a27 	vmul.f32	s16, s16, s15
        float torqueTerm = motor->constants.fourTimesOneMinusXi * reference->torqueRef * motor->constants.invTorqueBase;
        isRefCTC = motor->constants.isc * (sqrtf(sinGammaRef * sinGammaRef + sin2GammaRef * torqueTerm) - sinGammaRef) / (sin2GammaRef * motor->constants.oneMinusXi);
    }

    // isRef saturation
    isRef = (isRefCTC < reference->isMaxRef) ? isRefCTC : reference->isMaxRef;
 8000a38:	edd4 7a02 	vldr	s15, [r4, #8]
 8000a3c:	eef4 7ac8 	vcmpe.f32	s15, s16
 8000a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a44:	d801      	bhi.n	8000a4a <calc_current_reference+0x82>
 8000a46:	ed94 8a02 	vldr	s16, [r4, #8]

    // MTPA - please check equations and constant definitions thoroughly!!
    if (isRef == 0.0F || motor->Ld == motor->Lq) {
 8000a4a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8000a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a52:	d008      	beq.n	8000a66 <calc_current_reference+0x9e>
 8000a54:	ed95 7a00 	vldr	s14, [r5]
 8000a58:	edd5 7a01 	vldr	s15, [r5, #4]
 8000a5c:	eeb4 7a67 	vcmp.f32	s14, s15
 8000a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a64:	d11a      	bne.n	8000a9c <calc_current_reference+0xd4>
        gammaRefMTPA = M_PI_2;
 8000a66:	eddf 8a3a 	vldr	s17, [pc, #232]	@ 8000b50 <calc_current_reference+0x188>
        gammaRefMTPA = M_PI_2 + asinf((motor->lambda - sqrtf(motor->constants.eightTimesOneMinusXiSquared * isRef * isRef + motor->lambda * motor->lambda)) / (motor->constants.fourTimesOneMinusXi * isRef));
    }


    // Voltage loop calculation could be here, and gammaRef calculation should be updated accordingly.
    gammaRef = gammaRefMTPA*signTorqueRef;
 8000a6a:	ee68 8a89 	vmul.f32	s17, s17, s18

    // Polar to Cartesian
    reference->idRef = isRef * cosf(gammaRef);
 8000a6e:	eeb0 0a68 	vmov.f32	s0, s17
    gammaRef = gammaRefMTPA*signTorqueRef;
 8000a72:	edc6 8a00 	vstr	s17, [r6]
    reference->idRef = isRef * cosf(gammaRef);
 8000a76:	f005 f993 	bl	8005da0 <cosf>
 8000a7a:	eef0 7a40 	vmov.f32	s15, s0
    reference->iqRef = isRef * sinf(gammaRef);
 8000a7e:	eeb0 0a68 	vmov.f32	s0, s17
    reference->idRef = isRef * cosf(gammaRef);
 8000a82:	ee67 7a88 	vmul.f32	s15, s15, s16
 8000a86:	edc4 7a00 	vstr	s15, [r4]
    reference->iqRef = isRef * sinf(gammaRef);
 8000a8a:	f005 f8c5 	bl	8005c18 <sinf>
 8000a8e:	ee20 0a08 	vmul.f32	s0, s0, s16
}
 8000a92:	ecbd 8b04 	vpop	{d8-d9}
    reference->iqRef = isRef * sinf(gammaRef);
 8000a96:	ed84 0a01 	vstr	s0, [r4, #4]
}
 8000a9a:	bd70      	pop	{r4, r5, r6, pc}
        gammaRefMTPA = M_PI_2 + asinf((motor->lambda - sqrtf(motor->constants.eightTimesOneMinusXiSquared * isRef * isRef + motor->lambda * motor->lambda)) / (motor->constants.fourTimesOneMinusXi * isRef));
 8000a9c:	edd5 7a03 	vldr	s15, [r5, #12]
 8000aa0:	ee68 6a08 	vmul.f32	s13, s16, s16
 8000aa4:	ed95 6a17 	vldr	s12, [r5, #92]	@ 0x5c
 8000aa8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000aac:	ed95 0a16 	vldr	s0, [r5, #88]	@ 0x58
 8000ab0:	ee28 0a00 	vmul.f32	s0, s16, s0
 8000ab4:	eea6 7a26 	vfma.f32	s14, s12, s13
 8000ab8:	eef1 6ac7 	vsqrt.f32	s13, s14
 8000abc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000ac0:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8000ac4:	f005 f844 	bl	8005b50 <asinf>
 8000ac8:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8000acc:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 8000b40 <calc_current_reference+0x178>
 8000ad0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ad4:	eef7 8bc7 	vcvt.f32.f64	s17, d7
 8000ad8:	e7c7      	b.n	8000a6a <calc_current_reference+0xa2>
    if (gammaRef == M_PI_2 || reference->torqueRef == 0.0F || motor->Ld == motor->Lq) {
 8000ada:	ed90 7a00 	vldr	s14, [r0]
 8000ade:	edd0 7a01 	vldr	s15, [r0, #4]
 8000ae2:	eeb4 7a67 	vcmp.f32	s14, s15
 8000ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aea:	d09d      	beq.n	8000a28 <calc_current_reference+0x60>
        float sinGammaRef = sinf(gammaRef);
 8000aec:	eeb0 0a48 	vmov.f32	s0, s16
 8000af0:	f005 f892 	bl	8005c18 <sinf>
 8000af4:	eef0 7a40 	vmov.f32	s15, s0
        float sin2GammaRef = sinf(2.0F * gammaRef);
 8000af8:	ee38 0a08 	vadd.f32	s0, s16, s16
        float sinGammaRef = sinf(gammaRef);
 8000afc:	eeb0 8a67 	vmov.f32	s16, s15
        float sin2GammaRef = sinf(2.0F * gammaRef);
 8000b00:	f005 f88a 	bl	8005c18 <sinf>
        float torqueTerm = motor->constants.fourTimesOneMinusXi * reference->torqueRef * motor->constants.invTorqueBase;
 8000b04:	ed95 7a11 	vldr	s14, [r5, #68]	@ 0x44
 8000b08:	edd5 7a16 	vldr	s15, [r5, #88]	@ 0x58
 8000b0c:	ed94 6a03 	vldr	s12, [r4, #12]
 8000b10:	ee67 7a87 	vmul.f32	s15, s15, s14
        isRefCTC = motor->constants.isc * (sqrtf(sinGammaRef * sinGammaRef + sin2GammaRef * torqueTerm) - sinGammaRef) / (sin2GammaRef * motor->constants.oneMinusXi);
 8000b14:	ed95 7a14 	vldr	s14, [r5, #80]	@ 0x50
 8000b18:	edd5 6a0f 	vldr	s13, [r5, #60]	@ 0x3c
 8000b1c:	ee20 7a07 	vmul.f32	s14, s0, s14
        float torqueTerm = motor->constants.fourTimesOneMinusXi * reference->torqueRef * motor->constants.invTorqueBase;
 8000b20:	ee67 7a86 	vmul.f32	s15, s15, s12
        isRefCTC = motor->constants.isc * (sqrtf(sinGammaRef * sinGammaRef + sin2GammaRef * torqueTerm) - sinGammaRef) / (sin2GammaRef * motor->constants.oneMinusXi);
 8000b24:	ee67 7a80 	vmul.f32	s15, s15, s0
 8000b28:	eee8 7a08 	vfma.f32	s15, s16, s16
 8000b2c:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8000b30:	ee30 0a48 	vsub.f32	s0, s0, s16
 8000b34:	ee20 0a26 	vmul.f32	s0, s0, s13
 8000b38:	ee80 8a07 	vdiv.f32	s16, s0, s14
 8000b3c:	e77c      	b.n	8000a38 <calc_current_reference+0x70>
 8000b3e:	bf00      	nop
 8000b40:	54442d18 	.word	0x54442d18
 8000b44:	3ff921fb 	.word	0x3ff921fb
 8000b48:	2000002c 	.word	0x2000002c
 8000b4c:	20000030 	.word	0x20000030
 8000b50:	3fc90fdb 	.word	0x3fc90fdb

08000b54 <calc_current_loop>:
 *
 * @param inv Pointer to the inverter structure.
 */
void calc_current_loop(volatile InverterStruct *inv){

    inv->idLoop.pi_out_max = inv->vsMax;
 8000b54:	f8d0 3114 	ldr.w	r3, [r0, #276]	@ 0x114
void calc_current_loop(volatile InverterStruct *inv){
 8000b58:	b510      	push	{r4, lr}
 8000b5a:	4604      	mov	r4, r0

    // inv->idLoop.pi_ffw[0] = - (inv->feedback.iqMeas * inv->motor->Lq * inv->encoder.we); // Feedforward
    inv->idLoop.pi_consig = inv->reference.idRef;  	   // Setpoint
    inv->idLoop.pi_fdb = inv->feedback.idMeas;         // Feedback

    pi_calc(&(inv->idLoop));                            // Calculate id PI controller output
 8000b5c:	308c      	adds	r0, #140	@ 0x8c
    inv->idLoop.pi_out_max = inv->vsMax;
 8000b5e:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
    inv->idLoop.pi_out_min = -(inv->vsMax);
 8000b62:	edd4 7a45 	vldr	s15, [r4, #276]	@ 0x114
 8000b66:	eef1 7a67 	vneg.f32	s15, s15
 8000b6a:	edc4 7a2e 	vstr	s15, [r4, #184]	@ 0xb8
    inv->idLoop.pi_consig = inv->reference.idRef;  	   // Setpoint
 8000b6e:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8000b70:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
    inv->idLoop.pi_fdb = inv->feedback.idMeas;         // Feedback
 8000b74:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8000b76:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
    pi_calc(&(inv->idLoop));                            // Calculate id PI controller output
 8000b7a:	f005 fb2f 	bl	80061dc <pi_calc>



    inv->iqLoop.pi_out_max = inv->vsMax;
 8000b7e:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114

    // inv->iqLoop.pi_ffw[0] =  (inv->feedback.idMeas * inv->motor->Ld + inv->motor->lambda) * inv->encoder.we; // Feedforward
    inv->iqLoop.pi_consig = inv->reference.iqRef;  	   // Setpoint
    inv->iqLoop.pi_fdb = inv->feedback.iqMeas;         // Feedback

    pi_calc(&(inv->iqLoop));   // Calculate iq PI controller output
 8000b82:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
    inv->iqLoop.pi_out_max = inv->vsMax;
 8000b86:	f8c4 30f8 	str.w	r3, [r4, #248]	@ 0xf8
    inv->iqLoop.pi_out_min = -(inv->vsMax);
 8000b8a:	edd4 7a45 	vldr	s15, [r4, #276]	@ 0x114
 8000b8e:	eef1 7a67 	vneg.f32	s15, s15
 8000b92:	edc4 7a3f 	vstr	s15, [r4, #252]	@ 0xfc
    inv->iqLoop.pi_consig = inv->reference.iqRef;  	   // Setpoint
 8000b96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000b98:	f8c4 30f0 	str.w	r3, [r4, #240]	@ 0xf0
    inv->iqLoop.pi_fdb = inv->feedback.iqMeas;         // Feedback
 8000b9c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000b9e:	f8c4 30f4 	str.w	r3, [r4, #244]	@ 0xf4


}
 8000ba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    pi_calc(&(inv->iqLoop));   // Calculate iq PI controller output
 8000ba6:	f005 bb19 	b.w	80061dc <pi_calc>
 8000baa:	bf00      	nop

08000bac <saturate_voltage>:
 *
 * @param inv Pointer to the inverter structure.
 */
void saturate_voltage(volatile InverterStruct *inv){

	inv->vd = inv->idLoop.pi_out;
 8000bac:	f8d0 30bc 	ldr.w	r3, [r0, #188]	@ 0xbc
 8000bb0:	f8c0 3118 	str.w	r3, [r0, #280]	@ 0x118
	inv->vq = inv->iqLoop.pi_out;
 8000bb4:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8000bb8:	f8c0 311c 	str.w	r3, [r0, #284]	@ 0x11c

	float vsRef = sqrtf(inv->vd*inv->vd + inv->vq*inv->vq);
 8000bbc:	ed90 6a46 	vldr	s12, [r0, #280]	@ 0x118
 8000bc0:	ed90 7a46 	vldr	s14, [r0, #280]	@ 0x118
 8000bc4:	edd0 7a47 	vldr	s15, [r0, #284]	@ 0x11c
 8000bc8:	edd0 5a47 	vldr	s11, [r0, #284]	@ 0x11c
	float invVsRef = 1.0F/vsRef;
	if (vsRef > inv->vsMax){
 8000bcc:	edd0 6a45 	vldr	s13, [r0, #276]	@ 0x114
	float vsRef = sqrtf(inv->vd*inv->vd + inv->vq*inv->vq);
 8000bd0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8000bd4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8000bd8:	eeb1 7ae7 	vsqrt.f32	s14, s15
	if (vsRef > inv->vsMax){
 8000bdc:	eef4 6ac7 	vcmpe.f32	s13, s14
 8000be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000be4:	d517      	bpl.n	8000c16 <saturate_voltage+0x6a>
	float invVsRef = 1.0F/vsRef;
 8000be6:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
		inv->vq = inv->vq*inv->vsMax*invVsRef;
 8000bea:	edd0 7a47 	vldr	s15, [r0, #284]	@ 0x11c
 8000bee:	ed90 6a45 	vldr	s12, [r0, #276]	@ 0x114
	float invVsRef = 1.0F/vsRef;
 8000bf2:	eec5 6a87 	vdiv.f32	s13, s11, s14
		inv->vq = inv->vq*inv->vsMax*invVsRef;
 8000bf6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000bfa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000bfe:	edc0 7a47 	vstr	s15, [r0, #284]	@ 0x11c
		inv->vd = inv->vd*inv->vsMax*invVsRef;
 8000c02:	edd0 7a46 	vldr	s15, [r0, #280]	@ 0x118
 8000c06:	ed90 7a45 	vldr	s14, [r0, #276]	@ 0x114
 8000c0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c0e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000c12:	edc0 7a46 	vstr	s15, [r0, #280]	@ 0x118
	}

}
 8000c16:	4770      	bx	lr

08000c18 <calc_duties>:
 * @param[out] duties Pointer to the duties structure.
 */
void calc_duties(float vd, float vq, float vDC, float sinTheta_e, float cosTheta_e, volatile Duties *duties) {

  // inverse Park transform
  float alpha = (vd/vDC)*cosTheta_e - (vq/vDC)*sinTheta_e;              // Alpha(D) = d*cos(Fi) - q*sin(Fi)
 8000c18:	eec0 7a81 	vdiv.f32	s15, s1, s2
 8000c1c:	eec0 6a01 	vdiv.f32	s13, s0, s2
void calc_duties(float vd, float vq, float vDC, float sinTheta_e, float cosTheta_e, volatile Duties *duties) {
 8000c20:	b510      	push	{r4, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	4604      	mov	r4, r0

  // Assign values to SVPWM structure, works with alpha/beta (not a/b/c)
  // alpha and beta are meant to be in the range +-(1/sqrt3)
  svpwm.alpha = alpha;
  svpwm.beta = beta;
  svpwm_calc(&svpwm);
 8000c26:	4668      	mov	r0, sp
  float alpha = (vd/vDC)*cosTheta_e - (vq/vDC)*sinTheta_e;              // Alpha(D) = d*cos(Fi) - q*sin(Fi)
 8000c28:	ee21 7ae7 	vnmul.f32	s14, s3, s15
  float beta = (vd/vDC)*sinTheta_e + (vq/vDC)*cosTheta_e;              // Beta(Q) = d*sin(Fi) + q*cos(Fi)
 8000c2c:	ee67 7a82 	vmul.f32	s15, s15, s4
  float alpha = (vd/vDC)*cosTheta_e - (vq/vDC)*sinTheta_e;              // Alpha(D) = d*cos(Fi) - q*sin(Fi)
 8000c30:	eea6 7a82 	vfma.f32	s14, s13, s4
  float beta = (vd/vDC)*sinTheta_e + (vq/vDC)*cosTheta_e;              // Beta(Q) = d*sin(Fi) + q*cos(Fi)
 8000c34:	eee6 7aa1 	vfma.f32	s15, s13, s3
  svpwm.alpha = alpha;
 8000c38:	ed8d 7a00 	vstr	s14, [sp]
  svpwm.beta = beta;
 8000c3c:	edcd 7a01 	vstr	s15, [sp, #4]
  svpwm_calc(&svpwm);
 8000c40:	f005 fb7e 	bl	8006340 <svpwm_calc>

  // Assign SVPWM duties (0 to 1, high side)
  duties->Da = svpwm.Da;
 8000c44:	9902      	ldr	r1, [sp, #8]
  duties->Db = svpwm.Db;
 8000c46:	9a03      	ldr	r2, [sp, #12]
  duties->Dc = svpwm.Dc;
 8000c48:	9b04      	ldr	r3, [sp, #16]
  duties->Da = svpwm.Da;
 8000c4a:	6021      	str	r1, [r4, #0]
  duties->Db = svpwm.Db;
 8000c4c:	6062      	str	r2, [r4, #4]
  duties->Dc = svpwm.Dc;
 8000c4e:	60a3      	str	r3, [r4, #8]

}
 8000c50:	b006      	add	sp, #24
 8000c52:	bd10      	pop	{r4, pc}

08000c54 <eval_inv_FSM>:
 *
 * This function executes the finite state machine to control the inverter based on its current state.
 *
 * @param inv Pointer to the inverter structure.
 */
void eval_inv_FSM(volatile InverterStruct *inv) {
 8000c54:	b538      	push	{r3, r4, r5, lr}
    switch (inv->state) {
 8000c56:	7d03      	ldrb	r3, [r0, #20]
void eval_inv_FSM(volatile InverterStruct *inv) {
 8000c58:	4604      	mov	r4, r0
    switch (inv->state) {
 8000c5a:	2b03      	cmp	r3, #3
 8000c5c:	d819      	bhi.n	8000c92 <eval_inv_FSM+0x3e>
 8000c5e:	e8df f003 	tbb	[pc, r3]
 8000c62:	024c      	.short	0x024c
 8000c64:	1935      	.short	0x1935
void handle_startup(volatile InverterStruct *inv) {
    // Perform actions required in startup state
    // Transition conditions to other states:
    // - Transition to running state when startup sequence completes successfully
    // - Transition to fault state based on error conditions during startup
    inv->led->mode = LED_MODE_OFF;
 8000c66:	6803      	ldr	r3, [r0, #0]
 8000c68:	2503      	movs	r5, #3
    DISABLE(inv->enable_port, inv->enable_pin);
 8000c6a:	2200      	movs	r2, #0
    inv->led->mode = LED_MODE_OFF;
 8000c6c:	719d      	strb	r5, [r3, #6]
    DISABLE(inv->enable_port, inv->enable_pin);
 8000c6e:	6840      	ldr	r0, [r0, #4]
 8000c70:	8921      	ldrh	r1, [r4, #8]
 8000c72:	b289      	uxth	r1, r1
 8000c74:	f003 f888 	bl	8003d88 <HAL_GPIO_WritePin>
    enable_PWM(inv->htim);
 8000c78:	68e0      	ldr	r0, [r4, #12]
 8000c7a:	f000 fc01 	bl	8001480 <enable_PWM>
    disable_control_loops(inv);
 8000c7e:	4620      	mov	r0, r4
 8000c80:	f000 f8f2 	bl	8000e68 <disable_control_loops>

    if (inv->errors != NONE) {
 8000c84:	f8b4 3164 	ldrh.w	r3, [r4, #356]	@ 0x164
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d14f      	bne.n	8000d2e <eval_inv_FSM+0xda>
        inv->state = INV_STATE_FAULT;
    }

    // transition to IDLE when everything is done
    inv->state = INV_STATE_IDLE;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	7523      	strb	r3, [r4, #20]
}
 8000c92:	bd38      	pop	{r3, r4, r5, pc}
    // Perform actions required in fault state
    // This could involve shutting down the inverter, logging error messages, etc.
    // Transition conditions to other states:
    // - Retry startup sequence after a delay if fault condition is recoverable
    // - Transition to idle state after fault is resolved
    inv->led->mode = LED_MODE_BLINK_SLOW;
 8000c94:	6803      	ldr	r3, [r0, #0]
 8000c96:	2101      	movs	r1, #1
    DISABLE(inv->enable_port, inv->enable_pin);
 8000c98:	2200      	movs	r2, #0
    inv->led->mode = LED_MODE_BLINK_SLOW;
 8000c9a:	7199      	strb	r1, [r3, #6]
    DISABLE(inv->enable_port, inv->enable_pin);
 8000c9c:	6840      	ldr	r0, [r0, #4]
 8000c9e:	8921      	ldrh	r1, [r4, #8]
 8000ca0:	b289      	uxth	r1, r1
 8000ca2:	f003 f871 	bl	8003d88 <HAL_GPIO_WritePin>
    disable_PWM(inv->htim);
 8000ca6:	68e0      	ldr	r0, [r4, #12]
 8000ca8:	f000 fbf6 	bl	8001498 <disable_PWM>
    disable_control_loops(inv);
 8000cac:	4620      	mov	r0, r4
 8000cae:	f000 f8db 	bl	8000e68 <disable_control_loops>

    if (inv->errors == NONE && inv->enable == 0) {
 8000cb2:	f8b4 3164 	ldrh.w	r3, [r4, #356]	@ 0x164
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d1ea      	bne.n	8000c92 <eval_inv_FSM+0x3e>
 8000cbc:	f894 3166 	ldrb.w	r3, [r4, #358]	@ 0x166
 8000cc0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d1e4      	bne.n	8000c92 <eval_inv_FSM+0x3e>
        inv->state = INV_STATE_IDLE;
 8000cc8:	7522      	strb	r2, [r4, #20]
}
 8000cca:	bd38      	pop	{r3, r4, r5, pc}
    inv->led->mode = LED_MODE_ON;
 8000ccc:	6803      	ldr	r3, [r0, #0]
 8000cce:	2102      	movs	r1, #2
    ENABLE(inv->enable_port, inv->enable_pin);
 8000cd0:	2201      	movs	r2, #1
    inv->led->mode = LED_MODE_ON;
 8000cd2:	7199      	strb	r1, [r3, #6]
    ENABLE(inv->enable_port, inv->enable_pin);
 8000cd4:	6840      	ldr	r0, [r0, #4]
 8000cd6:	8921      	ldrh	r1, [r4, #8]
 8000cd8:	b289      	uxth	r1, r1
 8000cda:	f003 f855 	bl	8003d88 <HAL_GPIO_WritePin>
    enable_PWM(inv->htim);
 8000cde:	68e0      	ldr	r0, [r4, #12]
 8000ce0:	f000 fbce 	bl	8001480 <enable_PWM>
    enable_control_loops(inv);
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f000 f8b7 	bl	8000e58 <enable_control_loops>
    if (inv->errors != NONE) {
 8000cea:	f8b4 3164 	ldrh.w	r3, [r4, #356]	@ 0x164
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d0e3      	beq.n	8000cbc <eval_inv_FSM+0x68>
        inv->state = INV_STATE_FAULT;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	7523      	strb	r3, [r4, #20]
}
 8000cf8:	bd38      	pop	{r3, r4, r5, pc}
	inv->led->mode = LED_MODE_BLINK_FAST;
 8000cfa:	6803      	ldr	r3, [r0, #0]
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	719a      	strb	r2, [r3, #6]
    DISABLE(inv->enable_port, inv->enable_pin);
 8000d00:	6840      	ldr	r0, [r0, #4]
 8000d02:	8921      	ldrh	r1, [r4, #8]
 8000d04:	b289      	uxth	r1, r1
 8000d06:	f003 f83f 	bl	8003d88 <HAL_GPIO_WritePin>
    disable_PWM(inv->htim);
 8000d0a:	68e0      	ldr	r0, [r4, #12]
 8000d0c:	f000 fbc4 	bl	8001498 <disable_PWM>
    disable_control_loops(inv);
 8000d10:	4620      	mov	r0, r4
 8000d12:	f000 f8a9 	bl	8000e68 <disable_control_loops>
    if (inv->errors != NONE) {
 8000d16:	f8b4 3164 	ldrh.w	r3, [r4, #356]	@ 0x164
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d1e9      	bne.n	8000cf4 <eval_inv_FSM+0xa0>
    } else if (inv->enable) {
 8000d20:	f894 3166 	ldrb.w	r3, [r4, #358]	@ 0x166
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d0b4      	beq.n	8000c92 <eval_inv_FSM+0x3e>
        inv->state = INV_STATE_RUNNING;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	7523      	strb	r3, [r4, #20]
}
 8000d2c:	bd38      	pop	{r3, r4, r5, pc}
    inv->state = INV_STATE_IDLE;
 8000d2e:	2300      	movs	r3, #0
        inv->state = INV_STATE_FAULT;
 8000d30:	7525      	strb	r5, [r4, #20]
    inv->state = INV_STATE_IDLE;
 8000d32:	7523      	strb	r3, [r4, #20]
 8000d34:	e7ad      	b.n	8000c92 <eval_inv_FSM+0x3e>
 8000d36:	bf00      	nop

08000d38 <initialize_inverter>:
 * @param[in] enable_pin Pin number for enabling/disabling the inverter.
 * @param[in] htim Timer peripheral for the PWM output.
 * @param[in] hadc ADC peripheral for the current phase current and DC voltage sensing.
 * @param[in] motor MotorParameters struct.
 */
void initialize_inverter(volatile InverterStruct *inv, LED *led, GPIO_TypeDef *enable_port, uint16_t enable_pin, TIM_HandleTypeDef *htim, ADC_HandleTypeDef *hadc, MotorParameters *motor, volatile uint16_t *rawADC){
 8000d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d3a:	4604      	mov	r4, r0
	// Initialize inverter structure
    inv->state = INV_STATE_STARTUP;
 8000d3c:	2701      	movs	r7, #1
    inv->led = led;
    inv->enable_pin = enable_pin;
    inv->enable_port = enable_port;
    inv->htim = htim;
    inv->hadc = hadc;
    inv->duties.Da = 0.5;
 8000d3e:	f04f 5c7c 	mov.w	ip, #1056964608	@ 0x3f000000
void initialize_inverter(volatile InverterStruct *inv, LED *led, GPIO_TypeDef *enable_port, uint16_t enable_pin, TIM_HandleTypeDef *htim, ADC_HandleTypeDef *hadc, MotorParameters *motor, volatile uint16_t *rawADC){
 8000d42:	ed2d 8b04 	vpush	{d8-d9}
 8000d46:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
    inv->state = INV_STATE_STARTUP;
 8000d48:	7527      	strb	r7, [r4, #20]
    inv->led = led;
 8000d4a:	6021      	str	r1, [r4, #0]
    inv->duties.Db = 0.5;
    inv->duties.Dc = 0.5;
    inv->motor = motor;

    HAL_ADC_Start_DMA(hadc, (uint32_t *) rawADC, 4);
 8000d4c:	4631      	mov	r1, r6
    inv->enable_pin = enable_pin;
 8000d4e:	8123      	strh	r3, [r4, #8]
    inv->htim = htim;
 8000d50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    inv->enable_port = enable_port;
 8000d52:	6062      	str	r2, [r4, #4]
    HAL_ADC_Start_DMA(hadc, (uint32_t *) rawADC, 4);
 8000d54:	2204      	movs	r2, #4
    inv->htim = htim;
 8000d56:	60e3      	str	r3, [r4, #12]
    HAL_Delay(1);

    calibrate_offsets(rawADC, inv->analog.currentOffsets, 500000);


    if(check_motor_parameters(motor, TS)){
 8000d58:	ed9f 8a39 	vldr	s16, [pc, #228]	@ 8000e40 <initialize_inverter+0x108>
void initialize_inverter(volatile InverterStruct *inv, LED *led, GPIO_TypeDef *enable_port, uint16_t enable_pin, TIM_HandleTypeDef *htim, ADC_HandleTypeDef *hadc, MotorParameters *motor, volatile uint16_t *rawADC){
 8000d5c:	e9dd 050b 	ldrd	r0, r5, [sp, #44]	@ 0x2c
    inv->hadc = hadc;
 8000d60:	6120      	str	r0, [r4, #16]
    inv->duties.Da = 0.5;
 8000d62:	f8c4 c070 	str.w	ip, [r4, #112]	@ 0x70
    inv->duties.Db = 0.5;
 8000d66:	f8c4 c074 	str.w	ip, [r4, #116]	@ 0x74
    inv->duties.Dc = 0.5;
 8000d6a:	f8c4 c078 	str.w	ip, [r4, #120]	@ 0x78
    inv->motor = motor;
 8000d6e:	f8c4 5088 	str.w	r5, [r4, #136]	@ 0x88
    HAL_ADC_Start_DMA(hadc, (uint32_t *) rawADC, 4);
 8000d72:	f001 ff77 	bl	8002c64 <HAL_ADC_Start_DMA>
    HAL_TIM_Base_Start_IT(inv->htim);
 8000d76:	68e0      	ldr	r0, [r4, #12]
 8000d78:	f003 ff0a 	bl	8004b90 <HAL_TIM_Base_Start_IT>
    HAL_Delay(1);
 8000d7c:	4638      	mov	r0, r7
 8000d7e:	f001 feb1 	bl	8002ae4 <HAL_Delay>
    calibrate_offsets(rawADC, inv->analog.currentOffsets, 500000);
 8000d82:	4630      	mov	r0, r6
 8000d84:	4a2f      	ldr	r2, [pc, #188]	@ (8000e44 <initialize_inverter+0x10c>)
 8000d86:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8000d8a:	f000 f8d5 	bl	8000f38 <calibrate_offsets>
    if(check_motor_parameters(motor, TS)){
 8000d8e:	eeb0 0a48 	vmov.f32	s0, s16
 8000d92:	4628      	mov	r0, r5
 8000d94:	f000 f9a8 	bl	80010e8 <check_motor_parameters>
 8000d98:	b920      	cbnz	r0, 8000da4 <initialize_inverter+0x6c>
        precalculate_motor_constants(motor);
    	init_control_loops(inv, motor);
        inv->state = INV_STATE_IDLE;

    } else{
        inv->state = INV_STATE_FAULT;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	7523      	strb	r3, [r4, #20]
    }
}
 8000d9e:	ecbd 8b04 	vpop	{d8-d9}
 8000da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        precalculate_motor_constants(motor);
 8000da4:	4628      	mov	r0, r5

    // Calculate natural frequency (omega_n)
    float omega_n = 3.0F / (xi * set_time); // set_time in seconds

    // Calculate proportional and integral gains for id controller
    inv->idLoop.Kp = 2.0F * xi * omega_n * motor->Ld - motor->Rs;
 8000da6:	ed9f 9a28 	vldr	s18, [pc, #160]	@ 8000e48 <initialize_inverter+0x110>
        precalculate_motor_constants(motor);
 8000daa:	f000 f919 	bl	8000fe0 <precalculate_motor_constants>
    inv->idLoop.Kp = 2.0F * xi * omega_n * motor->Ld - motor->Rs;
 8000dae:	edd5 7a00 	vldr	s15, [r5]
 8000db2:	ed95 7a02 	vldr	s14, [r5, #8]
    inv->idLoop.Ki = powf(omega_n, 2) * motor->Ld;
    pi_init(&(inv->idLoop)); // Initialize id PI controller (calculate K0, K1)
 8000db6:	f104 008c 	add.w	r0, r4, #140	@ 0x8c
    inv->idLoop.Ki = powf(omega_n, 2) * motor->Ld;
 8000dba:	eddf 8a24 	vldr	s17, [pc, #144]	@ 8000e4c <initialize_inverter+0x114>
    inv->idLoop.Kp = 2.0F * xi * omega_n * motor->Ld - motor->Rs;
 8000dbe:	ee97 7a89 	vfnms.f32	s14, s15, s18
    inv->idLoop.Ts = TS;
 8000dc2:	ed84 8a24 	vstr	s16, [r4, #144]	@ 0x90
    inv->idLoop.Ki = powf(omega_n, 2) * motor->Ld;
 8000dc6:	ee67 7aa8 	vmul.f32	s15, s15, s17
    inv->iqLoop.Ts = TS;
 8000dca:	ed84 8a35 	vstr	s16, [r4, #212]	@ 0xd4
    inv->idLoop.Kp = 2.0F * xi * omega_n * motor->Ld - motor->Rs;
 8000dce:	ed84 7a25 	vstr	s14, [r4, #148]	@ 0x94
    inv->idLoop.Ki = powf(omega_n, 2) * motor->Ld;
 8000dd2:	edc4 7a26 	vstr	s15, [r4, #152]	@ 0x98
    pi_init(&(inv->idLoop)); // Initialize id PI controller (calculate K0, K1)
 8000dd6:	f005 f9e5 	bl	80061a4 <pi_init>

    // Calculate proportional and integral gains for iq controller
    inv->iqLoop.Kp = 2.0F * xi * omega_n * motor->Lq - motor->Rs;
 8000dda:	ed95 7a01 	vldr	s14, [r5, #4]
 8000dde:	edd5 7a02 	vldr	s15, [r5, #8]
    inv->iqLoop.Ki = powf(omega_n, 2) * motor->Lq;
    pi_init(&(inv->iqLoop)); // Initialize iq PI controller (calculate K0, K1)
 8000de2:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
    inv->iqLoop.Ki = powf(omega_n, 2) * motor->Lq;
 8000de6:	ee67 8a28 	vmul.f32	s17, s14, s17
    inv->iqLoop.Kp = 2.0F * xi * omega_n * motor->Lq - motor->Rs;
 8000dea:	eed7 7a09 	vfnms.f32	s15, s14, s18
 8000dee:	edc4 7a36 	vstr	s15, [r4, #216]	@ 0xd8
    inv->iqLoop.Ki = powf(omega_n, 2) * motor->Lq;
 8000df2:	edc4 8a37 	vstr	s17, [r4, #220]	@ 0xdc
    pi_init(&(inv->iqLoop)); // Initialize iq PI controller (calculate K0, K1)
 8000df6:	f005 f9d5 	bl	80061a4 <pi_init>

	float xi_speed = sqrtf(powf(logf(Mp_speed), 2) / (powf(PI, 2) + powf(logf(Mp_speed), 2))); // Mp is unitless
    // Calculate natural frequency (omega_n)
    float omega_n_speed = 3.0F / (xi_speed * set_time_speed); // set_time in seconds

    inv->speedLoop.Kp = 2.0F * xi_speed * omega_n_speed * motor->J - motor->b;
 8000dfa:	edd5 7a05 	vldr	s15, [r5, #20]
 8000dfe:	ed95 7a06 	vldr	s14, [r5, #24]
    inv->speedLoop.Ki = powf(omega_n_speed, 2) * motor->J;

    pi_init(&(inv->speedLoop)); // Initialize iq PI controller (calculate K0, K1)
 8000e02:	f504 7090 	add.w	r0, r4, #288	@ 0x120
    inv->speedLoop.Kp = 2.0F * xi_speed * omega_n_speed * motor->J - motor->b;
 8000e06:	ed9f 6a12 	vldr	s12, [pc, #72]	@ 8000e50 <initialize_inverter+0x118>
    inv->speedLoop.Ki = powf(omega_n_speed, 2) * motor->J;
 8000e0a:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8000e54 <initialize_inverter+0x11c>
    inv->speedLoop.Kp = 2.0F * xi_speed * omega_n_speed * motor->J - motor->b;
 8000e0e:	ee97 7a86 	vfnms.f32	s14, s15, s12
    inv->speedLoop.Ts = TS;
 8000e12:	ed84 8a49 	vstr	s16, [r4, #292]	@ 0x124
    inv->speedLoop.Ki = powf(omega_n_speed, 2) * motor->J;
 8000e16:	ee67 7aa6 	vmul.f32	s15, s15, s13
    inv->speedLoop.Kp = 2.0F * xi_speed * omega_n_speed * motor->J - motor->b;
 8000e1a:	ed84 7a4a 	vstr	s14, [r4, #296]	@ 0x128
    inv->speedLoop.Ki = powf(omega_n_speed, 2) * motor->J;
 8000e1e:	edc4 7a4b 	vstr	s15, [r4, #300]	@ 0x12c
    pi_init(&(inv->speedLoop)); // Initialize iq PI controller (calculate K0, K1)
 8000e22:	f005 f9bf 	bl	80061a4 <pi_init>

    inv->speedLoop.pi_out_max = motor->torqueMax;
 8000e26:	edd5 7a07 	vldr	s15, [r5, #28]
        inv->state = INV_STATE_IDLE;
 8000e2a:	2300      	movs	r3, #0
    inv->speedLoop.pi_out_min = -(motor->torqueMax);
 8000e2c:	eeb1 7a67 	vneg.f32	s14, s15
    inv->speedLoop.pi_out_max = motor->torqueMax;
 8000e30:	edc4 7a52 	vstr	s15, [r4, #328]	@ 0x148
    inv->speedLoop.pi_out_min = -(motor->torqueMax);
 8000e34:	ed84 7a53 	vstr	s14, [r4, #332]	@ 0x14c
        inv->state = INV_STATE_IDLE;
 8000e38:	7523      	strb	r3, [r4, #20]
}
 8000e3a:	ecbd 8b04 	vpop	{d8-d9}
 8000e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e40:	37d1b717 	.word	0x37d1b717
 8000e44:	0007a120 	.word	0x0007a120
 8000e48:	44160000 	.word	0x44160000
 8000e4c:	4800cb10 	.word	0x4800cb10
 8000e50:	40400001 	.word	0x40400001
 8000e54:	40972e97 	.word	0x40972e97

08000e58 <enable_control_loops>:
 * @brief Enables the PI controllers.
 *
 * @param inv Pointer to the inverter structure.
 */
void enable_control_loops(volatile InverterStruct *inv){
	inv->idLoop.enable = 1;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	f8a0 308c 	strh.w	r3, [r0, #140]	@ 0x8c
	inv->iqLoop.enable = 1;
 8000e5e:	f8a0 30d0 	strh.w	r3, [r0, #208]	@ 0xd0
	inv->speedLoop.enable = 1;
 8000e62:	f8a0 3120 	strh.w	r3, [r0, #288]	@ 0x120
}
 8000e66:	4770      	bx	lr

08000e68 <disable_control_loops>:
 * @brief Disables the PI controllers.
 *
 * @param inv Pointer to the inverter structure.
 */
void disable_control_loops(volatile InverterStruct *inv){
	inv->idLoop.enable = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	f8a0 308c 	strh.w	r3, [r0, #140]	@ 0x8c
	inv->iqLoop.enable = 0;
 8000e6e:	f8a0 30d0 	strh.w	r3, [r0, #208]	@ 0xd0
	inv->speedLoop.enable = 0;
 8000e72:	f8a0 3120 	strh.w	r3, [r0, #288]	@ 0x120
}
 8000e76:	4770      	bx	lr

08000e78 <get_currents_voltage>:
  * @param[out] feedback Pointer to the Feedback struct to store id and iq.
  * @param[in] sinTheta_e Electrical angle sine (-1..1)
  * @param[in] cosTheta_e Electrical angle cosine (-1..1)
  * @retval OK 0 if an error occurred, 1 if successful.
  */
uint8_t get_currents_voltage(volatile uint16_t ADC_raw[], volatile Analog* analog, volatile Feedback* feedback, float sinTheta_e, float cosTheta_e){
 8000e78:	b500      	push	{lr}

    // Calculate currents and voltage
    float ia = get_linear(ADC_raw[0], CURRENT_SLOPE, analog->currentOffsets[0]);
 8000e7a:	f8b0 e000 	ldrh.w	lr, [r0]
 */
void get_idiq(float ia, float ib, float ic, float sinTheta_e, float cosTheta_e, float *idMeas, float *iqMeas) {

	// Compute alpha beta using Clarke transformation
    float alpha = ia;
    float beta = (ia - 2.0F*(ia+ic)) * ISQ3;
 8000e7e:	eeb0 3a00 	vmov.f32	s6, #0	@ 0x40000000  2.0
    float ia = get_linear(ADC_raw[0], CURRENT_SLOPE, analog->currentOffsets[0]);
 8000e82:	edd1 7a04 	vldr	s15, [r1, #16]
 8000e86:	fa1f fe8e 	uxth.w	lr, lr
    float ib = get_linear(ADC_raw[1], CURRENT_SLOPE, analog->currentOffsets[1]);
 8000e8a:	f8b0 c002 	ldrh.w	ip, [r0, #2]
 8000e8e:	edd1 6a05 	vldr	s13, [r1, #20]
    float voltage = (float) bits * 0.0008058608f; // Assuming 12-bit ADC and 3.3V reference (bits * (3.3 V / 4095.0 bits))
 8000e92:	ee06 ea10 	vmov	s12, lr
    float ic = get_linear(ADC_raw[2], CURRENT_SLOPE, analog->currentOffsets[2]);
 8000e96:	8883      	ldrh	r3, [r0, #4]
    float ib = get_linear(ADC_raw[1], CURRENT_SLOPE, analog->currentOffsets[1]);
 8000e98:	fa1f fc8c 	uxth.w	ip, ip
    float ic = get_linear(ADC_raw[2], CURRENT_SLOPE, analog->currentOffsets[2]);
 8000e9c:	ed91 7a06 	vldr	s14, [r1, #24]
    float voltage = (float) bits * 0.0008058608f; // Assuming 12-bit ADC and 3.3V reference (bits * (3.3 V / 4095.0 bits))
 8000ea0:	eeb8 5a46 	vcvt.f32.u32	s10, s12
    float ic = get_linear(ADC_raw[2], CURRENT_SLOPE, analog->currentOffsets[2]);
 8000ea4:	b29b      	uxth	r3, r3
    float voltage = (float) bits * 0.0008058608f; // Assuming 12-bit ADC and 3.3V reference (bits * (3.3 V / 4095.0 bits))
 8000ea6:	ee06 ca10 	vmov	s12, ip
    float measurement = (voltage - offset) * slope;
 8000eaa:	ed9f 4a1c 	vldr	s8, [pc, #112]	@ 8000f1c <get_currents_voltage+0xa4>
 8000eae:	eddf 4a1c 	vldr	s9, [pc, #112]	@ 8000f20 <get_currents_voltage+0xa8>
}
 8000eb2:	2001      	movs	r0, #1
    float voltage = (float) bits * 0.0008058608f; // Assuming 12-bit ADC and 3.3V reference (bits * (3.3 V / 4095.0 bits))
 8000eb4:	eef8 5a46 	vcvt.f32.u32	s11, s12
 8000eb8:	ee06 3a10 	vmov	s12, r3
    float measurement = (voltage - offset) * slope;
 8000ebc:	eed5 7a04 	vfnms.f32	s15, s10, s8
    float beta = (ia - 2.0F*(ia+ic)) * ISQ3;
 8000ec0:	eddf 3a18 	vldr	s7, [pc, #96]	@ 8000f24 <get_currents_voltage+0xac>
    float voltage = (float) bits * 0.0008058608f; // Assuming 12-bit ADC and 3.3V reference (bits * (3.3 V / 4095.0 bits))
 8000ec4:	eeb8 6a46 	vcvt.f32.u32	s12, s12
    analog->vDC = 20.0F;
 8000ec8:	4b17      	ldr	r3, [pc, #92]	@ (8000f28 <get_currents_voltage+0xb0>)
    float measurement = (voltage - offset) * slope;
 8000eca:	eed5 6a84 	vfnms.f32	s13, s11, s8
 8000ece:	ee96 7a04 	vfnms.f32	s14, s12, s8
 8000ed2:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8000ed6:	ee66 6aa4 	vmul.f32	s13, s13, s9
    analog->ia = ia;
 8000eda:	edc1 7a00 	vstr	s15, [r1]
    // float beta = (ia + 2.0F*ib) * ISQ3;

    // Park transformation
    *idMeas = alpha * cosTheta_e + beta * sinTheta_e;  // d = alpha * cos(theta_e) + beta * sin(theta_e)
    *iqMeas = beta * cosTheta_e - alpha * sinTheta_e;  // q = beta * cos(theta_e) - alpha * sin(theta_e)
 8000ede:	ee27 6ac0 	vnmul.f32	s12, s15, s0
    float measurement = (voltage - offset) * slope;
 8000ee2:	ee27 7a24 	vmul.f32	s14, s14, s9
    analog->ib = ib;
 8000ee6:	edc1 6a01 	vstr	s13, [r1, #4]
    analog->ic = ic;
 8000eea:	ed81 7a02 	vstr	s14, [r1, #8]
    float beta = (ia - 2.0F*(ia+ic)) * ISQ3;
 8000eee:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000ef2:	eeb0 7a67 	vmov.f32	s14, s15
    analog->vDC = 20.0F;
 8000ef6:	60cb      	str	r3, [r1, #12]
    float beta = (ia - 2.0F*(ia+ic)) * ISQ3;
 8000ef8:	eea6 7ac3 	vfms.f32	s14, s13, s6
    *iqMeas = beta * cosTheta_e - alpha * sinTheta_e;  // q = beta * cos(theta_e) - alpha * sin(theta_e)
 8000efc:	eef0 6a46 	vmov.f32	s13, s12
    float beta = (ia - 2.0F*(ia+ic)) * ISQ3;
 8000f00:	ee27 7a23 	vmul.f32	s14, s14, s7
    *idMeas = alpha * cosTheta_e + beta * sinTheta_e;  // d = alpha * cos(theta_e) + beta * sin(theta_e)
 8000f04:	ee20 0a07 	vmul.f32	s0, s0, s14
    *iqMeas = beta * cosTheta_e - alpha * sinTheta_e;  // q = beta * cos(theta_e) - alpha * sin(theta_e)
 8000f08:	eee0 6a87 	vfma.f32	s13, s1, s14
    *idMeas = alpha * cosTheta_e + beta * sinTheta_e;  // d = alpha * cos(theta_e) + beta * sin(theta_e)
 8000f0c:	eea0 0aa7 	vfma.f32	s0, s1, s15
    feedback->idMeas = idMeas;
 8000f10:	ed82 0a00 	vstr	s0, [r2]
    feedback->iqMeas = iqMeas;
 8000f14:	edc2 6a01 	vstr	s13, [r2, #4]
}
 8000f18:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f1c:	3a534067 	.word	0x3a534067
 8000f20:	42eb2772 	.word	0x42eb2772
 8000f24:	3f13cd3a 	.word	0x3f13cd3a
 8000f28:	41a00000 	.word	0x41a00000

08000f2c <get_temperature>:
 * @param[in] bits ADC reading converted to bits.
 * @param[in] tempLUT Lookup table containing temperature values.
 * @return Temperature corresponding to the provided ADC bits.
 */
float get_temperature(uint32_t bits, const float tempLUT[]){
    return tempLUT[bits];
 8000f2c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
}
 8000f30:	ed91 0a00 	vldr	s0, [r1]
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <calibrate_offsets>:
 *
 * @param[in] rawADC Buffer containing the raw ADC values for the channels.
 * @param[out] currentOffsets Array to store the calculated offsets for each current channel.
 * @param[in] numSamples Number of samples to average for the offset calculation.
 */
void calibrate_offsets(volatile uint16_t rawADC[], volatile float currentOffsets[], uint32_t numSamples) {
 8000f38:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t sumADC[3] = {0}; // Summing ADC values for IA, IB, IC

    // Take multiple samples to calculate the average offset
    for (int i = 0; i < numSamples; ++i) {
 8000f3a:	2a00      	cmp	r2, #0
 8000f3c:	d044      	beq.n	8000fc8 <calibrate_offsets+0x90>
        // ADC_raw is updated by the DMA, so no need to start the ADC conversion here

    	if (i > numSamples / 2.0F){
 8000f3e:	ee07 2a10 	vmov	s14, r2
    uint32_t sumADC[3] = {0}; // Summing ADC values for IA, IB, IC
 8000f42:	f04f 0c00 	mov.w	ip, #0
    	if (i > numSamples / 2.0F){
 8000f46:	eebb 7aef 	vcvt.f32.u32	s14, s14, #1
    for (int i = 0; i < numSamples; ++i) {
 8000f4a:	4663      	mov	r3, ip
    uint32_t sumADC[3] = {0}; // Summing ADC values for IA, IB, IC
 8000f4c:	46e6      	mov	lr, ip
 8000f4e:	4664      	mov	r4, ip
    	if (i > numSamples / 2.0F){
 8000f50:	ee07 3a90 	vmov	s15, r3
 8000f54:	3301      	adds	r3, #1
 8000f56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f62:	dd08      	ble.n	8000f76 <calibrate_offsets+0x3e>
			// Accumulate the ADC readings
			sumADC[0] += rawADC[0];
 8000f64:	8807      	ldrh	r7, [r0, #0]
			sumADC[1] += rawADC[1];
 8000f66:	8846      	ldrh	r6, [r0, #2]
			sumADC[2] += rawADC[2];
 8000f68:	8885      	ldrh	r5, [r0, #4]
			sumADC[0] += rawADC[0];
 8000f6a:	fa14 f487 	uxtah	r4, r4, r7
			sumADC[1] += rawADC[1];
 8000f6e:	fa1e fe86 	uxtah	lr, lr, r6
			sumADC[2] += rawADC[2];
 8000f72:	fa1c fc85 	uxtah	ip, ip, r5
    for (int i = 0; i < numSamples; ++i) {
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d1ea      	bne.n	8000f50 <calibrate_offsets+0x18>
    	}
    }

    // Calculate average offset
    currentOffsets[0] = 2 * (float)sumADC[0] / numSamples * 0.0008058608f; // Assuming 12-bit ADC
 8000f7a:	ee07 4a90 	vmov	s15, r4
 8000f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
    currentOffsets[1] = 2 * (float)sumADC[1] / numSamples * 0.0008058608f;
 8000f82:	ee07 ea90 	vmov	s15, lr
 8000f86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    currentOffsets[2] = 2 * (float)sumADC[2] / numSamples * 0.0008058608f;
 8000f8a:	ee07 ca90 	vmov	s15, ip
    currentOffsets[0] = 2 * (float)sumADC[0] / numSamples * 0.0008058608f; // Assuming 12-bit ADC
 8000f8e:	ee76 6aa6 	vadd.f32	s13, s13, s13
    currentOffsets[2] = 2 * (float)sumADC[2] / numSamples * 0.0008058608f;
 8000f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
    currentOffsets[1] = 2 * (float)sumADC[1] / numSamples * 0.0008058608f;
 8000f96:	ee37 7a07 	vadd.f32	s14, s14, s14
    currentOffsets[2] = 2 * (float)sumADC[2] / numSamples * 0.0008058608f;
 8000f9a:	ee77 7aa7 	vadd.f32	s15, s15, s15
    currentOffsets[0] = 2 * (float)sumADC[0] / numSamples * 0.0008058608f; // Assuming 12-bit ADC
 8000f9e:	ee06 2a10 	vmov	s12, r2
 8000fa2:	ed9f 5a0d 	vldr	s10, [pc, #52]	@ 8000fd8 <calibrate_offsets+0xa0>
 8000fa6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8000faa:	eec5 5a06 	vdiv.f32	s11, s10, s12
 8000fae:	ee65 6aa6 	vmul.f32	s13, s11, s13
    currentOffsets[1] = 2 * (float)sumADC[1] / numSamples * 0.0008058608f;
 8000fb2:	ee25 7a87 	vmul.f32	s14, s11, s14
    currentOffsets[2] = 2 * (float)sumADC[2] / numSamples * 0.0008058608f;
 8000fb6:	ee65 5aa7 	vmul.f32	s11, s11, s15
    currentOffsets[0] = 2 * (float)sumADC[0] / numSamples * 0.0008058608f; // Assuming 12-bit ADC
 8000fba:	edc1 6a00 	vstr	s13, [r1]
    currentOffsets[1] = 2 * (float)sumADC[1] / numSamples * 0.0008058608f;
 8000fbe:	ed81 7a01 	vstr	s14, [r1, #4]
    currentOffsets[2] = 2 * (float)sumADC[2] / numSamples * 0.0008058608f;
 8000fc2:	edc1 5a02 	vstr	s11, [r1, #8]
}
 8000fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (int i = 0; i < numSamples; ++i) {
 8000fc8:	eddf 7a04 	vldr	s15, [pc, #16]	@ 8000fdc <calibrate_offsets+0xa4>
 8000fcc:	eeb0 7a67 	vmov.f32	s14, s15
 8000fd0:	eef0 6a67 	vmov.f32	s13, s15
 8000fd4:	e7e3      	b.n	8000f9e <calibrate_offsets+0x66>
 8000fd6:	bf00      	nop
 8000fd8:	3a534067 	.word	0x3a534067
 8000fdc:	00000000 	.word	0x00000000

08000fe0 <precalculate_motor_constants>:
 * @brief Precomputes the constants for a motor and updates the MotorParameters structure
 * 
 * @param motor  [in, out] Pointer to the motor parameters structure
 */
void precalculate_motor_constants(MotorParameters * motor) {
    motor->constants.threePpLambda = 3.0F * motor->pp * motor->lambda;
 8000fe0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
    motor->constants.threePpLdMinusLq = 3.0F * motor->pp * (motor->Ld - motor->Lq);
 8000fe4:	ed90 4a00 	vldr	s8, [r0]
    motor->constants.threePpLambda = 3.0F * motor->pp * motor->lambda;
 8000fe8:	ed90 6a03 	vldr	s12, [r0, #12]
 8000fec:	eeb0 2a08 	vmov.f32	s4, #8	@ 0x40400000  3.0
 8000ff0:	7c03      	ldrb	r3, [r0, #16]
    motor->constants.torqueBase = 3.0F * motor->pp * (motor->lambda * motor->lambda) / motor->Ld;
    motor->constants.invTorqueBase = 1.0F / motor->constants.torqueBase;
    motor->constants.xi = motor->Lq / motor->Ld;
    motor->constants.xiSquared = motor->constants.xi * motor->constants.xi;
    motor->constants.oneMinusXi = 1.0F - motor->constants.xi;
    motor->constants.twoMinusXi = 2.0F - motor->constants.xi;
 8000ff2:	eeb0 5a00 	vmov.f32	s10, #0	@ 0x40000000  2.0
 8000ff6:	eec7 2a84 	vdiv.f32	s5, s15, s8
    motor->constants.threePpLdMinusLq = 3.0F * motor->pp * (motor->Ld - motor->Lq);
 8000ffa:	ed90 7a01 	vldr	s14, [r0, #4]
    motor->constants.threePpLambda = 3.0F * motor->pp * motor->lambda;
 8000ffe:	ee05 3a90 	vmov	s11, r3
    motor->constants.invThreePpLambda = 1.0F / (3.0F * motor->pp * motor->lambda);
 8001002:	eddf 0a37 	vldr	s1, [pc, #220]	@ 80010e0 <precalculate_motor_constants+0x100>
    motor->constants.torqueBase = 3.0F * motor->pp * (motor->lambda * motor->lambda) / motor->Ld;
 8001006:	ee66 6a06 	vmul.f32	s13, s12, s12
    motor->constants.threePpLambda = 3.0F * motor->pp * motor->lambda;
 800100a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
    motor->constants.threePpLdMinusLq = 3.0F * motor->pp * (motor->Ld - motor->Lq);
 800100e:	ee74 4a47 	vsub.f32	s9, s8, s14
    motor->constants.torqueBase = 3.0F * motor->pp * (motor->lambda * motor->lambda) / motor->Ld;
 8001012:	ee66 6a82 	vmul.f32	s13, s13, s4
    motor->constants.twoMinusXiSquared = motor->constants.twoMinusXi * motor->constants.twoMinusXi;
    motor->constants.twoTimesOneMinusXiOnePlusXiSquared = 2.0F * motor->constants.oneMinusXi * (1.0F + motor->constants.xiSquared);
    motor->constants.twoTimesOneMinusXiXiSquared = 2.0F * motor->constants.oneMinusXi * motor->constants.xiSquared;
    motor->constants.fourTimesOneMinusXiOnePlusXiSquared = 4.0F * motor->constants.oneMinusXi * (1.0F + motor->constants.xiSquared);
    motor->constants.fourTimesOneMinusXiXiSquared = 4.0F * motor->constants.oneMinusXi * motor->constants.xiSquared;
    motor->constants.lambdaDivLqMinusLd = motor->lambda / (motor->Lq - motor->Ld);
 8001016:	ee37 4a44 	vsub.f32	s8, s14, s8
    motor->constants.threePpLambda = 3.0F * motor->pp * motor->lambda;
 800101a:	ee65 3a86 	vmul.f32	s7, s11, s12
    motor->constants.threePpLdMinusLq = 3.0F * motor->pp * (motor->Ld - motor->Lq);
 800101e:	ee64 4aa5 	vmul.f32	s9, s9, s11
    motor->constants.lambdaDivLqMinusLd = motor->lambda / (motor->Lq - motor->Ld);
 8001022:	eec6 1a04 	vdiv.f32	s3, s12, s8
    motor->constants.torqueBase = 3.0F * motor->pp * (motor->lambda * motor->lambda) / motor->Ld;
 8001026:	ee66 6aa2 	vmul.f32	s13, s13, s5
    motor->constants.xi = motor->Lq / motor->Ld;
 800102a:	ee27 7a22 	vmul.f32	s14, s14, s5
    motor->constants.threePpLdMinusLq = 3.0F * motor->pp * (motor->Ld - motor->Lq);
 800102e:	ee64 4a82 	vmul.f32	s9, s9, s4
    motor->constants.torqueBase = 3.0F * motor->pp * (motor->lambda * motor->lambda) / motor->Ld;
 8001032:	ee66 6aa5 	vmul.f32	s13, s13, s11
    motor->constants.xiSquared = motor->constants.xi * motor->constants.xi;
 8001036:	ee27 4a07 	vmul.f32	s8, s14, s14
    motor->constants.xi = motor->Lq / motor->Ld;
 800103a:	ed80 7a12 	vstr	s14, [r0, #72]	@ 0x48
    motor->constants.oneMinusXi = 1.0F - motor->constants.xi;
 800103e:	ee77 5ac7 	vsub.f32	s11, s15, s14
    motor->constants.threePpLdMinusLq = 3.0F * motor->pp * (motor->Ld - motor->Lq);
 8001042:	edc0 4a0d 	vstr	s9, [r0, #52]	@ 0x34
    motor->constants.isc = motor->lambda / motor->Ld;
 8001046:	ee26 6a22 	vmul.f32	s12, s12, s5
    motor->constants.torqueBase = 3.0F * motor->pp * (motor->lambda * motor->lambda) / motor->Ld;
 800104a:	edc0 6a10 	vstr	s13, [r0, #64]	@ 0x40
    motor->constants.fourTimesOneMinusXi = 4.0F * motor->constants.oneMinusXi;
 800104e:	eeb1 3a00 	vmov.f32	s6, #16	@ 0x40800000  4.0
    motor->constants.xiSquared = motor->constants.xi * motor->constants.xi;
 8001052:	ed80 4a13 	vstr	s8, [r0, #76]	@ 0x4c
    motor->constants.twoMinusXi = 2.0F - motor->constants.xi;
 8001056:	ee35 5a47 	vsub.f32	s10, s10, s14
    motor->constants.oneMinusXi = 1.0F - motor->constants.xi;
 800105a:	edc0 5a14 	vstr	s11, [r0, #80]	@ 0x50
    motor->constants.eightTimesOneMinusXiSquared = 8.0F * motor->constants.oneMinusXi * motor->constants.oneMinusXi;
 800105e:	eeb2 1a00 	vmov.f32	s2, #32	@ 0x41000000  8.0
    motor->constants.isc = motor->lambda / motor->Ld;
 8001062:	ed80 6a0f 	vstr	s12, [r0, #60]	@ 0x3c
    motor->constants.eightTimesOneMinusXiSquared = 8.0F * motor->constants.oneMinusXi * motor->constants.oneMinusXi;
 8001066:	ee65 4aa5 	vmul.f32	s9, s11, s11
    motor->constants.betaMinusIsc = motor->constants.lambdaDivLqMinusLd - motor->constants.isc;
 800106a:	ee71 2ac6 	vsub.f32	s5, s3, s12
    motor->constants.twoMinusXi = 2.0F - motor->constants.xi;
 800106e:	ed80 5a15 	vstr	s10, [r0, #84]	@ 0x54
    motor->constants.twoTimesOneMinusXiXiSquared = 2.0F * motor->constants.oneMinusXi * motor->constants.xiSquared;
 8001072:	ee25 6a84 	vmul.f32	s12, s11, s8
    motor->constants.lambdaDivLqMinusLd = motor->lambda / (motor->Lq - motor->Ld);
 8001076:	edc0 1a1d 	vstr	s3, [r0, #116]	@ 0x74
    motor->constants.fourTimesOneMinusXi = 4.0F * motor->constants.oneMinusXi;
 800107a:	ee25 0a83 	vmul.f32	s0, s11, s6
    motor->constants.eightTimesOneMinusXiSquared = 8.0F * motor->constants.oneMinusXi * motor->constants.oneMinusXi;
 800107e:	ee64 4a81 	vmul.f32	s9, s9, s2
    motor->constants.betaMinusIsc = motor->constants.lambdaDivLqMinusLd - motor->constants.isc;
 8001082:	edc0 2a1e 	vstr	s5, [r0, #120]	@ 0x78
void precalculate_motor_constants(MotorParameters * motor) {
 8001086:	ed2d 8b02 	vpush	{d8}
    motor->constants.invThreePpLambda = 1.0F / (3.0F * motor->pp * motor->lambda);
 800108a:	ee80 8aa3 	vdiv.f32	s16, s1, s7
    motor->constants.fourTimesOneMinusXi = 4.0F * motor->constants.oneMinusXi;
 800108e:	ed80 0a16 	vstr	s0, [r0, #88]	@ 0x58
    motor->constants.eightTimesOneMinusXiSquared = 8.0F * motor->constants.oneMinusXi * motor->constants.oneMinusXi;
 8001092:	edc0 4a17 	vstr	s9, [r0, #92]	@ 0x5c
    motor->constants.threePpLambda = 3.0F * motor->pp * motor->lambda;
 8001096:	ee63 3a82 	vmul.f32	s7, s7, s4
    motor->constants.twoMinusXiSquared = motor->constants.twoMinusXi * motor->constants.twoMinusXi;
 800109a:	ee65 0a05 	vmul.f32	s1, s10, s10
    motor->constants.twoTimesOneMinusXiXiSquared = 2.0F * motor->constants.oneMinusXi * motor->constants.xiSquared;
 800109e:	ee36 2a06 	vadd.f32	s4, s12, s12
    motor->constants.threePpLambda = 3.0F * motor->pp * motor->lambda;
 80010a2:	edc0 3a0c 	vstr	s7, [r0, #48]	@ 0x30
    motor->constants.invTorqueBase = 1.0F / motor->constants.torqueBase;
 80010a6:	eec7 3aa6 	vdiv.f32	s7, s15, s13
    motor->constants.twoMinusXiSquared = motor->constants.twoMinusXi * motor->constants.twoMinusXi;
 80010aa:	edc0 0a18 	vstr	s1, [r0, #96]	@ 0x60
    motor->constants.twoTimesOneMinusXiXiSquared = 2.0F * motor->constants.oneMinusXi * motor->constants.xiSquared;
 80010ae:	ed80 2a1a 	vstr	s4, [r0, #104]	@ 0x68
    motor->constants.twoTimesOneMinusXiOnePlusXiSquared = 2.0F * motor->constants.oneMinusXi * (1.0F + motor->constants.xiSquared);
 80010b2:	ee74 7a27 	vadd.f32	s15, s8, s15
    motor->constants.fourTimesOneMinusXiXiSquared = 4.0F * motor->constants.oneMinusXi * motor->constants.xiSquared;
 80010b6:	ee26 6a03 	vmul.f32	s12, s12, s6
    motor->constants.twoTimesOneMinusXiOnePlusXiSquared = 2.0F * motor->constants.oneMinusXi * (1.0F + motor->constants.xiSquared);
 80010ba:	ee67 7aa5 	vmul.f32	s15, s15, s11
    motor->constants.invThreePpLambda = 1.0F / (3.0F * motor->pp * motor->lambda);
 80010be:	ed80 8a0e 	vstr	s16, [r0, #56]	@ 0x38
    motor->constants.fourTimesOneMinusXiXiSquared = 4.0F * motor->constants.oneMinusXi * motor->constants.xiSquared;
 80010c2:	ed80 6a1c 	vstr	s12, [r0, #112]	@ 0x70
    motor->constants.twoTimesOneMinusXiOnePlusXiSquared = 2.0F * motor->constants.oneMinusXi * (1.0F + motor->constants.xiSquared);
 80010c6:	ee77 6aa7 	vadd.f32	s13, s15, s15
    motor->constants.fourTimesOneMinusXiOnePlusXiSquared = 4.0F * motor->constants.oneMinusXi * (1.0F + motor->constants.xiSquared);
 80010ca:	ee67 7a83 	vmul.f32	s15, s15, s6
}
 80010ce:	ecbd 8b02 	vpop	{d8}
    motor->constants.twoTimesOneMinusXiOnePlusXiSquared = 2.0F * motor->constants.oneMinusXi * (1.0F + motor->constants.xiSquared);
 80010d2:	edc0 6a19 	vstr	s13, [r0, #100]	@ 0x64
    motor->constants.fourTimesOneMinusXiOnePlusXiSquared = 4.0F * motor->constants.oneMinusXi * (1.0F + motor->constants.xiSquared);
 80010d6:	edc0 7a1b 	vstr	s15, [r0, #108]	@ 0x6c
    motor->constants.invTorqueBase = 1.0F / motor->constants.torqueBase;
 80010da:	edc0 3a11 	vstr	s7, [r0, #68]	@ 0x44
}
 80010de:	4770      	bx	lr
 80010e0:	3eaaaaab 	.word	0x3eaaaaab
 80010e4:	00000000 	.word	0x00000000

080010e8 <check_motor_parameters>:
	int OK = 1;

	float Ld_over_Lq_tolerance = 1.1F;

    // Error 1 - Evaluate Rs
    if (motor->Rs < 0.002F || motor->Rs > 10.0F) {
 80010e8:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 80010ec:	ed90 6a02 	vldr	s12, [r0, #8]
int check_motor_parameters(MotorParameters *motor, float Ts) {
 80010f0:	4603      	mov	r3, r0
    if (motor->Rs < 0.002F || motor->Rs > 10.0F) {
 80010f2:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80010f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010fa:	dc07      	bgt.n	800110c <check_motor_parameters+0x24>
 80010fc:	eddf 7a9a 	vldr	s15, [pc, #616]	@ 8001368 <check_motor_parameters+0x280>
 8001100:	eeb4 6a67 	vcmp.f32	s12, s15
 8001104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001108:	f140 80d0 	bpl.w	80012ac <check_motor_parameters+0x1c4>
        // Adjust Rs if out of bounds
        if (motor->Rs < 0.002F)
 800110c:	eddf 7a96 	vldr	s15, [pc, #600]	@ 8001368 <check_motor_parameters+0x280>
 8001110:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8001114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001118:	f140 80fd 	bpl.w	8001316 <check_motor_parameters+0x22e>
        	motor->Rs = 0.002F, OK = 0;
 800111c:	eeb0 6a67 	vmov.f32	s12, s15
 8001120:	2000      	movs	r0, #0
 8001122:	edc3 7a02 	vstr	s15, [r3, #8]
        else if (motor->Rs > 10.0F)
        	motor->Rs = 10.0F, OK = 0;
    }

    // Error 2 - Evaluate Ld, Lq
    if (motor->Ld < 0.000001F || motor->Ld > 0.05F ||
 8001126:	edd3 6a00 	vldr	s13, [r3]
 800112a:	ed9f 7a90 	vldr	s14, [pc, #576]	@ 800136c <check_motor_parameters+0x284>
        fabs(motor->Ld / motor->Rs) < Ts / 10.0F ||
 800112e:	eddf 5a90 	vldr	s11, [pc, #576]	@ 8001370 <check_motor_parameters+0x288>
    if (motor->Ld < 0.000001F || motor->Ld > 0.05F ||
 8001132:	eef4 6ac7 	vcmpe.f32	s13, s14
		motor->Lq < 0.000001F || motor->Lq > 0.05F ||
 8001136:	edd3 7a01 	vldr	s15, [r3, #4]
        fabs(motor->Ld / motor->Rs) < Ts / 10.0F ||
 800113a:	ee20 0a25 	vmul.f32	s0, s0, s11
    if (motor->Ld < 0.000001F || motor->Ld > 0.05F ||
 800113e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001142:	d407      	bmi.n	8001154 <check_motor_parameters+0x6c>
 8001144:	eddf 5a8b 	vldr	s11, [pc, #556]	@ 8001374 <check_motor_parameters+0x28c>
 8001148:	eef4 6ae5 	vcmpe.f32	s13, s11
 800114c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001150:	f340 80bd 	ble.w	80012ce <check_motor_parameters+0x1e6>
        fabs(motor->Lq / motor->Rs) < Ts / 10.0F) {
        // Adjust parameters if out of bounds
        if (motor->Ld < 0.000001F)
 8001154:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 800136c <check_motor_parameters+0x284>
 8001158:	eef4 6ac7 	vcmpe.f32	s13, s14
 800115c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001160:	f140 80d6 	bpl.w	8001310 <check_motor_parameters+0x228>
        if (motor->Lq < 0.000001F)
        	motor->Lq = 0.000001F;
        else if (motor->Lq > 0.05F)
        	motor->Lq = 0.05F, OK = 0;

        if (fabs(motor->Lq / motor->Rs) < Ts / 10.0F)
 8001164:	eec7 6a06 	vdiv.f32	s13, s14, s12
        	motor->Ld = 0.05F, OK = 0;
 8001168:	ed83 7a00 	vstr	s14, [r3]
        if (fabs(motor->Lq / motor->Rs) < Ts / 10.0F)
 800116c:	eef0 6ae6 	vabs.f32	s13, s13
        if (fabs(motor->Ld / motor->Rs) < Ts / 10.0F)
 8001170:	eef4 6ac0 	vcmpe.f32	s13, s0
 8001174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001178:	f100 80b2 	bmi.w	80012e0 <check_motor_parameters+0x1f8>
 800117c:	2000      	movs	r0, #0
 800117e:	edd3 6a00 	vldr	s13, [r3]
        if (motor->Lq < 0.000001F)
 8001182:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 800136c <check_motor_parameters+0x284>
 8001186:	eef4 7ac7 	vcmpe.f32	s15, s14
 800118a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118e:	f140 8090 	bpl.w	80012b2 <check_motor_parameters+0x1ca>
        	motor->Lq = 0.000001F;
 8001192:	eef0 7a47 	vmov.f32	s15, s14
 8001196:	ed83 7a01 	vstr	s14, [r3, #4]
        if (fabs(motor->Lq / motor->Rs) < Ts / 10.0F)
 800119a:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800119e:	eeb0 7ac7 	vabs.f32	s14, s14
 80011a2:	eeb4 7ac0 	vcmpe.f32	s14, s0
 80011a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011aa:	d504      	bpl.n	80011b6 <check_motor_parameters+0xce>
        	motor->Lq = Ts / 10 * motor->Rs, OK = 0;
 80011ac:	ee66 7a00 	vmul.f32	s15, s12, s0
 80011b0:	2000      	movs	r0, #0
 80011b2:	edc3 7a01 	vstr	s15, [r3, #4]
    }

    // Error 3 - Evaluate Lq/Ld
    if (motor->Lq < motor->Ld) {
 80011b6:	eef4 7ae6 	vcmpe.f32	s15, s13
 80011ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011be:	d50b      	bpl.n	80011d8 <check_motor_parameters+0xf0>
        if (motor->Ld / motor->Lq > Ld_over_Lq_tolerance)
 80011c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80011c4:	eddf 7a6c 	vldr	s15, [pc, #432]	@ 8001378 <check_motor_parameters+0x290>
 80011c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d0:	dd02      	ble.n	80011d8 <check_motor_parameters+0xf0>
        	motor->Lq = motor->Ld, OK = 0;
 80011d2:	2000      	movs	r0, #0
 80011d4:	edc3 6a01 	vstr	s13, [r3, #4]
    }

    // Error 4 - Evaluate lambda
    if (motor->lambda < 0.0001F || motor->lambda > 1.0F ||
    		motor->iMax < motor->lambda / motor->Ld - motor->vDCMax / sqrt(3) / motor->Ld / (motor->speedMax_RPM * (float)motor->pp * 2.0F * M_PI / 60.0F)) {
 80011d8:	7c1a      	ldrb	r2, [r3, #16]
 80011da:	eeb7 3ae6 	vcvt.f64.f32	d3, s13
 80011de:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80011e2:	ee07 2a90 	vmov	s15, r2
 80011e6:	ed93 4a0b 	vldr	s8, [r3, #44]	@ 0x2c
 80011ea:	ee37 7a07 	vadd.f32	s14, s14, s14
    if (motor->lambda < 0.0001F || motor->lambda > 1.0F ||
 80011ee:	edd3 2a03 	vldr	s5, [r3, #12]
    		motor->iMax < motor->lambda / motor->Ld - motor->vDCMax / sqrt(3) / motor->Ld / (motor->speedMax_RPM * (float)motor->pp * 2.0F * M_PI / 60.0F)) {
 80011f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    if (motor->lambda < 0.0001F || motor->lambda > 1.0F ||
 80011f6:	ed9f 2a61 	vldr	s4, [pc, #388]	@ 800137c <check_motor_parameters+0x294>
    		motor->iMax < motor->lambda / motor->Ld - motor->vDCMax / sqrt(3) / motor->Ld / (motor->speedMax_RPM * (float)motor->pp * 2.0F * M_PI / 60.0F)) {
 80011fa:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
 80011fe:	ed93 5a0a 	vldr	s10, [r3, #40]	@ 0x28
    if (motor->lambda < 0.0001F || motor->lambda > 1.0F ||
 8001202:	eef4 2ac2 	vcmpe.f32	s5, s4
    		motor->iMax < motor->lambda / motor->Ld - motor->vDCMax / sqrt(3) / motor->Ld / (motor->speedMax_RPM * (float)motor->pp * 2.0F * M_PI / 60.0F)) {
 8001206:	ee27 7a27 	vmul.f32	s14, s14, s15
 800120a:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    if (motor->lambda < 0.0001F || motor->lambda > 1.0F ||
 800120e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    		motor->iMax < motor->lambda / motor->Ld - motor->vDCMax / sqrt(3) / motor->Ld / (motor->speedMax_RPM * (float)motor->pp * 2.0F * M_PI / 60.0F)) {
 8001212:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8001216:	ed9f 1b52 	vldr	d1, [pc, #328]	@ 8001360 <check_motor_parameters+0x278>
 800121a:	ee27 7b03 	vmul.f64	d7, d7, d3
 800121e:	ee24 4b01 	vmul.f64	d4, d4, d1
 8001222:	ee84 3b07 	vdiv.f64	d3, d4, d7
    if (motor->lambda < 0.0001F || motor->lambda > 1.0F ||
 8001226:	d406      	bmi.n	8001236 <check_motor_parameters+0x14e>
 8001228:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800122c:	eef4 2ae7 	vcmpe.f32	s5, s15
 8001230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001234:	dd59      	ble.n	80012ea <check_motor_parameters+0x202>
        // Adjust parameters if out of bounds
        if (motor->lambda < 0.0001F)
 8001236:	eddf 7a51 	vldr	s15, [pc, #324]	@ 800137c <check_motor_parameters+0x294>
 800123a:	eef4 2ae7 	vcmpe.f32	s5, s15
 800123e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001242:	d562      	bpl.n	800130a <check_motor_parameters+0x222>
        	motor->lambda = 0.0001F, OK = 0;
        else if (motor->lambda > 1.0F)
        	motor->lambda = 1.0F, OK = 0;

        if (motor->iMax < motor->lambda / motor->Ld - motor->vDCMax / sqrt(3) / motor->Ld / (motor->speedMax_RPM * (float)motor->pp * 2.0F * M_PI / 60.0F))
 8001244:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001248:	eef0 6a67 	vmov.f32	s13, s15
        	motor->lambda = 1.0F, OK = 0;
 800124c:	edc3 6a03 	vstr	s13, [r3, #12]
        if (motor->iMax < motor->lambda / motor->Ld - motor->vDCMax / sqrt(3) / motor->Ld / (motor->speedMax_RPM * (float)motor->pp * 2.0F * M_PI / 60.0F))
 8001250:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8001254:	ee37 7b43 	vsub.f64	d7, d7, d3
 8001258:	eeb4 7bc5 	vcmpe.f64	d7, d5
 800125c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001260:	dc4e      	bgt.n	8001300 <check_motor_parameters+0x218>
 8001262:	2000      	movs	r0, #0
        	motor->iMax = motor->lambda / motor->Ld - motor->vDCMax / sqrt(3) / motor->Ld / (motor->speedMax_RPM * (float)motor->pp * 2.0F * M_PI / 60.0F), OK = 0;
    }

    // Error 5 - Evaluate J, b
    if (motor->J == 0 || motor->b == 0) {
 8001264:	edd3 7a05 	vldr	s15, [r3, #20]
 8001268:	eef5 7a40 	vcmp.f32	s15, #0.0
 800126c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001270:	d011      	beq.n	8001296 <check_motor_parameters+0x1ae>
 8001272:	ed93 7a06 	vldr	s14, [r3, #24]
 8001276:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800127a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127e:	d00a      	beq.n	8001296 <check_motor_parameters+0x1ae>
        // Cannot calculate J/b, no adjustments needed
    } else {
        if (motor->J / motor->b <= motor->Lq / motor->Rs) {
 8001280:	edd3 5a01 	vldr	s11, [r3, #4]
 8001284:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001288:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800128c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8001290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001294:	d947      	bls.n	8001326 <check_motor_parameters+0x23e>
        }
    }

    // Error 6 - Evaluate pp

    if (motor->pp < 1 || motor->pp > 20) {
 8001296:	1e51      	subs	r1, r2, #1
 8001298:	2913      	cmp	r1, #19
 800129a:	d909      	bls.n	80012b0 <check_motor_parameters+0x1c8>
		// Adjust Rs if out of bounds
		if (motor->pp < 1)
 800129c:	2a00      	cmp	r2, #0
			motor->pp = 1, OK = 0;
 800129e:	f04f 0000 	mov.w	r0, #0
		if (motor->pp < 1)
 80012a2:	bf14      	ite	ne
 80012a4:	2214      	movne	r2, #20
 80012a6:	2201      	moveq	r2, #1
		else if (motor->pp > 20)
			motor->pp = 20, OK = 0;
 80012a8:	741a      	strb	r2, [r3, #16]
    }
    return OK;
 80012aa:	4770      	bx	lr
	int OK = 1;
 80012ac:	2001      	movs	r0, #1
 80012ae:	e73a      	b.n	8001126 <check_motor_parameters+0x3e>
}
 80012b0:	4770      	bx	lr
        else if (motor->Lq > 0.05F)
 80012b2:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001374 <check_motor_parameters+0x28c>
 80012b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012be:	f77f af6c 	ble.w	800119a <check_motor_parameters+0xb2>
        	motor->Lq = 0.05F, OK = 0;
 80012c2:	eef0 7a47 	vmov.f32	s15, s14
 80012c6:	2000      	movs	r0, #0
 80012c8:	ed83 7a01 	vstr	s14, [r3, #4]
 80012cc:	e765      	b.n	800119a <check_motor_parameters+0xb2>
        fabs(motor->Ld / motor->Rs) < Ts / 10.0F ||
 80012ce:	ee86 5a86 	vdiv.f32	s10, s13, s12
 80012d2:	eeb0 5ac5 	vabs.f32	s10, s10
    if (motor->Ld < 0.000001F || motor->Ld > 0.05F ||
 80012d6:	eeb4 5ac0 	vcmpe.f32	s10, s0
 80012da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012de:	d527      	bpl.n	8001330 <check_motor_parameters+0x248>
        	motor->Ld = Ts / 10 * motor->Rs, OK = 0;
 80012e0:	ee26 7a00 	vmul.f32	s14, s12, s0
 80012e4:	ed83 7a00 	vstr	s14, [r3]
 80012e8:	e748      	b.n	800117c <check_motor_parameters+0x94>
    		motor->iMax < motor->lambda / motor->Ld - motor->vDCMax / sqrt(3) / motor->Ld / (motor->speedMax_RPM * (float)motor->pp * 2.0F * M_PI / 60.0F)) {
 80012ea:	ee82 7aa6 	vdiv.f32	s14, s5, s13
 80012ee:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80012f2:	ee37 7b43 	vsub.f64	d7, d7, d3
    if (motor->lambda < 0.0001F || motor->lambda > 1.0F ||
 80012f6:	eeb4 7bc5 	vcmpe.f64	d7, d5
 80012fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012fe:	ddb1      	ble.n	8001264 <check_motor_parameters+0x17c>
        	motor->iMax = motor->lambda / motor->Ld - motor->vDCMax / sqrt(3) / motor->Ld / (motor->speedMax_RPM * (float)motor->pp * 2.0F * M_PI / 60.0F), OK = 0;
 8001300:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8001304:	ed83 7a0a 	vstr	s14, [r3, #40]	@ 0x28
 8001308:	e7ab      	b.n	8001262 <check_motor_parameters+0x17a>
        if (motor->iMax < motor->lambda / motor->Ld - motor->vDCMax / sqrt(3) / motor->Ld / (motor->speedMax_RPM * (float)motor->pp * 2.0F * M_PI / 60.0F))
 800130a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800130e:	e799      	b.n	8001244 <check_motor_parameters+0x15c>
        if (fabs(motor->Lq / motor->Rs) < Ts / 10.0F)
 8001310:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001374 <check_motor_parameters+0x28c>
 8001314:	e726      	b.n	8001164 <check_motor_parameters+0x7c>
        	motor->Rs = 10.0F, OK = 0;
 8001316:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
        	motor->Rs = 0.002F, OK = 0;
 800131a:	2000      	movs	r0, #0
        	motor->Rs = 10.0F, OK = 0;
 800131c:	eeb0 6a67 	vmov.f32	s12, s15
 8001320:	edc3 7a02 	vstr	s15, [r3, #8]
 8001324:	e6ff      	b.n	8001126 <check_motor_parameters+0x3e>
            	motor->J = 1;
 8001326:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800132a:	6159      	str	r1, [r3, #20]
            	motor->b = 1;
 800132c:	6199      	str	r1, [r3, #24]
 800132e:	e7b2      	b.n	8001296 <check_motor_parameters+0x1ae>
		motor->Lq < 0.000001F || motor->Lq > 0.05F ||
 8001330:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001338:	f53f af23 	bmi.w	8001182 <check_motor_parameters+0x9a>
 800133c:	eef4 7ae5 	vcmpe.f32	s15, s11
 8001340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001344:	f73f af1d 	bgt.w	8001182 <check_motor_parameters+0x9a>
        fabs(motor->Lq / motor->Rs) < Ts / 10.0F) {
 8001348:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800134c:	eeb0 7ac7 	vabs.f32	s14, s14
		motor->Lq < 0.000001F || motor->Lq > 0.05F ||
 8001350:	eeb4 7ac0 	vcmpe.f32	s14, s0
 8001354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001358:	f53f af13 	bmi.w	8001182 <check_motor_parameters+0x9a>
 800135c:	e72b      	b.n	80011b6 <check_motor_parameters+0xce>
 800135e:	bf00      	nop
 8001360:	9e9f0e5a 	.word	0x9e9f0e5a
 8001364:	40260d9b 	.word	0x40260d9b
 8001368:	3b03126f 	.word	0x3b03126f
 800136c:	358637bd 	.word	0x358637bd
 8001370:	3dcccccd 	.word	0x3dcccccd
 8001374:	3d4ccccd 	.word	0x3d4ccccd
 8001378:	3f8ccccd 	.word	0x3f8ccccd
 800137c:	38d1b717 	.word	0x38d1b717

08001380 <handle_LED>:
 * This function handles the LED blinking modes based on the LED mode and current millisecond counter.
 *
 * @param led Pointer to the LED structure.
 * @param ms_counter Current millisecond counter.
 */
void handle_LED(LED *led, uint32_t ms_counter) {
 8001380:	b500      	push	{lr}
    switch (led->mode) {
 8001382:	7982      	ldrb	r2, [r0, #6]
void handle_LED(LED *led, uint32_t ms_counter) {
 8001384:	4603      	mov	r3, r0
    switch (led->mode) {
 8001386:	2a03      	cmp	r2, #3
 8001388:	d838      	bhi.n	80013fc <handle_LED+0x7c>
 800138a:	e8df f002 	tbb	[pc, r2]
 800138e:	1024      	.short	0x1024
 8001390:	0209      	.short	0x0209
            break;
        case LED_MODE_ON:
            HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_SET);
            break;
        case LED_MODE_OFF:
            HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
 8001392:	2200      	movs	r2, #0
 8001394:	8899      	ldrh	r1, [r3, #4]
 8001396:	6818      	ldr	r0, [r3, #0]
            break;
        default:
            // Invalid LED mode
            break;
    }
}
 8001398:	f85d eb04 	ldr.w	lr, [sp], #4
            HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
 800139c:	f002 bcf4 	b.w	8003d88 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_SET);
 80013a0:	2201      	movs	r2, #1
 80013a2:	8899      	ldrh	r1, [r3, #4]
 80013a4:	6818      	ldr	r0, [r3, #0]
}
 80013a6:	f85d eb04 	ldr.w	lr, [sp], #4
            HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_SET);
 80013aa:	f002 bced 	b.w	8003d88 <HAL_GPIO_WritePin>
            if (ms_counter % 1000 < 500) {
 80013ae:	4a14      	ldr	r2, [pc, #80]	@ (8001400 <handle_LED+0x80>)
 80013b0:	f44f 7e7a 	mov.w	lr, #1000	@ 0x3e8
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_SET);
 80013b4:	6818      	ldr	r0, [r3, #0]
 80013b6:	f8b3 c004 	ldrh.w	ip, [r3, #4]
            if (ms_counter % 1000 < 500) {
 80013ba:	fba2 2301 	umull	r2, r3, r2, r1
 80013be:	099b      	lsrs	r3, r3, #6
 80013c0:	fb0e 1313 	mls	r3, lr, r3, r1
 80013c4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80013c8:	d212      	bcs.n	80013f0 <handle_LED+0x70>
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_SET);
 80013ca:	2201      	movs	r2, #1
 80013cc:	4661      	mov	r1, ip
}
 80013ce:	f85d eb04 	ldr.w	lr, [sp], #4
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_SET);
 80013d2:	f002 bcd9 	b.w	8003d88 <HAL_GPIO_WritePin>
            if (ms_counter % 200 < 100) {
 80013d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001404 <handle_LED+0x84>)
 80013d8:	f04f 0ec8 	mov.w	lr, #200	@ 0xc8
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_SET);
 80013dc:	6818      	ldr	r0, [r3, #0]
 80013de:	f8b3 c004 	ldrh.w	ip, [r3, #4]
            if (ms_counter % 200 < 100) {
 80013e2:	fba2 2301 	umull	r2, r3, r2, r1
 80013e6:	099b      	lsrs	r3, r3, #6
 80013e8:	fb0e 1313 	mls	r3, lr, r3, r1
 80013ec:	2b63      	cmp	r3, #99	@ 0x63
 80013ee:	d9ec      	bls.n	80013ca <handle_LED+0x4a>
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
 80013f0:	2200      	movs	r2, #0
 80013f2:	4661      	mov	r1, ip
}
 80013f4:	f85d eb04 	ldr.w	lr, [sp], #4
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
 80013f8:	f002 bcc6 	b.w	8003d88 <HAL_GPIO_WritePin>
}
 80013fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8001400:	10624dd3 	.word	0x10624dd3
 8001404:	51eb851f 	.word	0x51eb851f

08001408 <handle_direction>:
 * and vice versa.
 *
 * @param dir_left Pointer to the direction parameter in the left inverter structure.
 * @param dir_right Pointer to the direction parameter in the right inverter structure.
 */
void handle_direction(volatile int8_t *dir_left, volatile int8_t *dir_right){
 8001408:	b538      	push	{r3, r4, r5, lr}
 800140a:	4605      	mov	r5, r0
 800140c:	460c      	mov	r4, r1
    // Update the directions of the inverters based on the DIR switch state
    if (DIR_STATE() == GPIO_PIN_SET) {
 800140e:	4807      	ldr	r0, [pc, #28]	@ (800142c <handle_direction+0x24>)
 8001410:	2108      	movs	r1, #8
 8001412:	f002 fcb3 	bl	8003d7c <HAL_GPIO_ReadPin>
 8001416:	2801      	cmp	r0, #1
 8001418:	d004      	beq.n	8001424 <handle_direction+0x1c>
    	*dir_left = 1;  // CW
    	*dir_right = -1;  // CCW
    } else {
    	*dir_left = -1;  // CCW
 800141a:	22ff      	movs	r2, #255	@ 0xff
    	*dir_right = 1;  // CW
 800141c:	2301      	movs	r3, #1
    	*dir_left = -1;  // CCW
 800141e:	702a      	strb	r2, [r5, #0]
    	*dir_right = 1;  // CW
 8001420:	7023      	strb	r3, [r4, #0]
    }
}
 8001422:	bd38      	pop	{r3, r4, r5, pc}
    	*dir_right = -1;  // CCW
 8001424:	23ff      	movs	r3, #255	@ 0xff
    	*dir_left = 1;  // CW
 8001426:	7028      	strb	r0, [r5, #0]
    	*dir_right = -1;  // CCW
 8001428:	7023      	strb	r3, [r4, #0]
}
 800142a:	bd38      	pop	{r3, r4, r5, pc}
 800142c:	40020c00 	.word	0x40020c00

08001430 <enable_inverters>:
 * @param[in] enableSW_left The software enable state for the left inverter.
 * @param[in] enableSW_right The software enable state for the right inverter.
 * @param[out] enable_left Output parameter for the left inverter's enable state.
 * @param[out] enable_right Output parameter for the right inverter's enable state.
 */
void enable_inverters(volatile bool enableSW_left, volatile bool enableSW_right, volatile bool *enable_left, volatile bool *enable_right){
 8001430:	b530      	push	{r4, r5, lr}
 8001432:	b083      	sub	sp, #12
 8001434:	468c      	mov	ip, r1
    *enable_left = (SC_DET_STATE() == GPIO_PIN_SET) && enableSW_left;
 8001436:	2110      	movs	r1, #16
void enable_inverters(volatile bool enableSW_left, volatile bool enableSW_right, volatile bool *enable_left, volatile bool *enable_right){
 8001438:	4615      	mov	r5, r2
 800143a:	f88d 0007 	strb.w	r0, [sp, #7]
 800143e:	461c      	mov	r4, r3
    *enable_left = (SC_DET_STATE() == GPIO_PIN_SET) && enableSW_left;
 8001440:	480e      	ldr	r0, [pc, #56]	@ (800147c <enable_inverters+0x4c>)
void enable_inverters(volatile bool enableSW_left, volatile bool enableSW_right, volatile bool *enable_left, volatile bool *enable_right){
 8001442:	f88d c006 	strb.w	ip, [sp, #6]
    *enable_left = (SC_DET_STATE() == GPIO_PIN_SET) && enableSW_left;
 8001446:	f002 fc99 	bl	8003d7c <HAL_GPIO_ReadPin>
 800144a:	2801      	cmp	r0, #1
 800144c:	d00b      	beq.n	8001466 <enable_inverters+0x36>
 800144e:	2300      	movs	r3, #0
    *enable_right = (SC_DET_STATE() == GPIO_PIN_SET) && enableSW_right;
 8001450:	2110      	movs	r1, #16
 8001452:	480a      	ldr	r0, [pc, #40]	@ (800147c <enable_inverters+0x4c>)
    *enable_left = (SC_DET_STATE() == GPIO_PIN_SET) && enableSW_left;
 8001454:	702b      	strb	r3, [r5, #0]
    *enable_right = (SC_DET_STATE() == GPIO_PIN_SET) && enableSW_right;
 8001456:	f002 fc91 	bl	8003d7c <HAL_GPIO_ReadPin>
 800145a:	2801      	cmp	r0, #1
 800145c:	d007      	beq.n	800146e <enable_inverters+0x3e>
 800145e:	2300      	movs	r3, #0
 8001460:	7023      	strb	r3, [r4, #0]
}
 8001462:	b003      	add	sp, #12
 8001464:	bd30      	pop	{r4, r5, pc}
    *enable_left = (SC_DET_STATE() == GPIO_PIN_SET) && enableSW_left;
 8001466:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800146a:	b2db      	uxtb	r3, r3
 800146c:	e7f0      	b.n	8001450 <enable_inverters+0x20>
    *enable_right = (SC_DET_STATE() == GPIO_PIN_SET) && enableSW_right;
 800146e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001472:	b2db      	uxtb	r3, r3
 8001474:	7023      	strb	r3, [r4, #0]
}
 8001476:	b003      	add	sp, #12
 8001478:	bd30      	pop	{r4, r5, pc}
 800147a:	bf00      	nop
 800147c:	40020800 	.word	0x40020800

08001480 <enable_PWM>:
 *
 * @param htim Pointer to the TIM_HandleTypeDef structure.
 */
void enable_PWM(TIM_HandleTypeDef *htim) {
    // Enable the main output (MOE)
    __HAL_TIM_MOE_ENABLE(htim);
 8001480:	6803      	ldr	r3, [r0, #0]

    // Enable the outputs for all 3 channels
    htim->Instance->CCER |= (TIM_CCER_CC1E | TIM_CCER_CC1NE |
 8001482:	f240 5255 	movw	r2, #1365	@ 0x555
    __HAL_TIM_MOE_ENABLE(htim);
 8001486:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001488:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 800148c:	6459      	str	r1, [r3, #68]	@ 0x44
    htim->Instance->CCER |= (TIM_CCER_CC1E | TIM_CCER_CC1NE |
 800148e:	6a19      	ldr	r1, [r3, #32]
 8001490:	430a      	orrs	r2, r1
 8001492:	621a      	str	r2, [r3, #32]
                             TIM_CCER_CC2E | TIM_CCER_CC2NE |
                             TIM_CCER_CC3E | TIM_CCER_CC3NE);
}
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop

08001498 <disable_PWM>:
 *
 * @param htim Pointer to the TIM_HandleTypeDef structure.
 */
void disable_PWM(TIM_HandleTypeDef *htim) {
    // Disable the outputs for all 3 channels
    htim->Instance->CCER &= ~(TIM_CCER_CC1E | TIM_CCER_CC1NE |
 8001498:	6802      	ldr	r2, [r0, #0]
 800149a:	4b02      	ldr	r3, [pc, #8]	@ (80014a4 <disable_PWM+0xc>)
 800149c:	6a11      	ldr	r1, [r2, #32]
 800149e:	400b      	ands	r3, r1
 80014a0:	6213      	str	r3, [r2, #32]
                              TIM_CCER_CC2E | TIM_CCER_CC2NE |
                              TIM_CCER_CC3E | TIM_CCER_CC3NE);
}
 80014a2:	4770      	bx	lr
 80014a4:	fffffaaa 	.word	0xfffffaaa

080014a8 <update_PWM>:
 * @param duties Duties structure containing duty cycle values.
 */
void update_PWM(TIM_HandleTypeDef *htim, Duties duties) {


	htim->Instance->CCR1 = ((int32_t)(htim->Instance->ARR) * (1.0F-duties.Da));
 80014a8:	6803      	ldr	r3, [r0, #0]
 80014aa:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
void update_PWM(TIM_HandleTypeDef *htim, Duties duties) {
 80014ae:	b084      	sub	sp, #16
	htim->Instance->CCR1 = ((int32_t)(htim->Instance->ARR) * (1.0F-duties.Da));
 80014b0:	ed93 6a0b 	vldr	s12, [r3, #44]	@ 0x2c
 80014b4:	ee77 6ac0 	vsub.f32	s13, s15, s0
void update_PWM(TIM_HandleTypeDef *htim, Duties duties) {
 80014b8:	ed8d 0a01 	vstr	s0, [sp, #4]
	htim->Instance->CCR1 = ((int32_t)(htim->Instance->ARR) * (1.0F-duties.Da));
 80014bc:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
void update_PWM(TIM_HandleTypeDef *htim, Duties duties) {
 80014c0:	edcd 0a02 	vstr	s1, [sp, #8]
	htim->Instance->CCR2 = ((int32_t)(htim->Instance->ARR) * (1.0F-duties.Db));
 80014c4:	ee37 7ae0 	vsub.f32	s14, s15, s1
void update_PWM(TIM_HandleTypeDef *htim, Duties duties) {
 80014c8:	ed8d 1a03 	vstr	s2, [sp, #12]
	htim->Instance->CCR3 = ((int32_t)(htim->Instance->ARR) * (1.0F-duties.Dc));
 80014cc:	ee77 7ac1 	vsub.f32	s15, s15, s2
	htim->Instance->CCR1 = ((int32_t)(htim->Instance->ARR) * (1.0F-duties.Da));
 80014d0:	ee66 6a86 	vmul.f32	s13, s13, s12
 80014d4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80014d8:	edc3 6a0d 	vstr	s13, [r3, #52]	@ 0x34
	htim->Instance->CCR2 = ((int32_t)(htim->Instance->ARR) * (1.0F-duties.Db));
 80014dc:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 80014e0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80014e4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80014e8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80014ec:	ed83 7a0e 	vstr	s14, [r3, #56]	@ 0x38
	htim->Instance->CCR3 = ((int32_t)(htim->Instance->ARR) * (1.0F-duties.Dc));
 80014f0:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80014f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80014f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001500:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

}
 8001504:	b004      	add	sp, #16
 8001506:	4770      	bx	lr

08001508 <handle_torqueRef>:
 * @param speedMeas       Measured speed.
 * @param loopSpeed       Speed control loop parameters.
 *
 * @return The output torque after handling direction, saturation, and rate limiting.
 */
float handle_torqueRef(float torqueRefIn, int8_t direction, float torqueMax, float speedMaxRPM, float speedMeas, volatile pi_struct *loopSpeed){
 8001508:	ee07 0a90 	vmov	s15, r0

	// Handles direction (by multiplying it to the input) and saturation (the function per se)
	float torqueRefSat = saturate_symmetric(torqueRefIn*direction, torqueMax);
 800150c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
float handle_torqueRef(float torqueRefIn, int8_t direction, float torqueMax, float speedMaxRPM, float speedMeas, volatile pi_struct *loopSpeed){
 8001510:	b510      	push	{r4, lr}
	float torqueRefSat = saturate_symmetric(torqueRefIn*direction, torqueMax);
 8001512:	ee27 0a80 	vmul.f32	s0, s15, s0
float handle_torqueRef(float torqueRefIn, int8_t direction, float torqueMax, float speedMaxRPM, float speedMeas, volatile pi_struct *loopSpeed){
 8001516:	460c      	mov	r4, r1
 8001518:	ed2d 8b02 	vpush	{d8}
 * @param[in] ref The reference value to saturate.
 * @param[in] max The maximum allowed value for saturation.
 * @return The saturated reference value.
 */
float saturate_symmetric(float ref, float max) {
    if (ref > max) {
 800151c:	eeb4 0ae0 	vcmpe.f32	s0, s1
float handle_torqueRef(float torqueRefIn, int8_t direction, float torqueMax, float speedMaxRPM, float speedMeas, volatile pi_struct *loopSpeed){
 8001520:	eeb0 8a60 	vmov.f32	s16, s1
    if (ref > max) {
 8001524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001528:	dc03      	bgt.n	8001532 <handle_torqueRef+0x2a>
        return max;
    } else if (ref < -max) {
 800152a:	eeb1 8a60 	vneg.f32	s16, s1
 800152e:	fe88 8a00 	vmaxnm.f32	s16, s16, s0
 */
float limit_torque_to_prevent_overspeed(float speedMaxRPM, float speedMeas, float torqueRefIn, volatile pi_struct *loopSpeed){

	// Set speed reference and feedback
	loopSpeed->pi_consig = speedMaxRPM;
	loopSpeed->pi_fdb = fabsf(speedMeas); // Absolute value of speed
 8001532:	eef0 1ae1 	vabs.f32	s3, s3
	loopSpeed->pi_consig = speedMaxRPM;
 8001536:	ed84 1a08 	vstr	s2, [r4, #32]

    pi_calc(loopSpeed);
 800153a:	4620      	mov	r0, r4
	loopSpeed->pi_fdb = fabsf(speedMeas); // Absolute value of speed
 800153c:	edc4 1a09 	vstr	s3, [r4, #36]	@ 0x24
    pi_calc(loopSpeed);
 8001540:	f004 fe4c 	bl	80061dc <pi_calc>

    // Calculate limited torque reference based on speed controller output
    float max_torque = loopSpeed->pi_out;
 8001544:	ed94 0a0c 	vldr	s0, [r4, #48]	@ 0x30

    // Limit torque reference within bounds
    float torqueRefOut;

    if (torqueRefIn > max_torque) {
 8001548:	eeb4 0ac8 	vcmpe.f32	s0, s16
 800154c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001550:	d403      	bmi.n	800155a <handle_torqueRef+0x52>
    	torqueRefOut = max_torque;
    } else if (torqueRefIn < -max_torque) {
 8001552:	eeb1 0a40 	vneg.f32	s0, s0
 8001556:	fe80 0a08 	vmaxnm.f32	s0, s0, s16
}
 800155a:	ecbd 8b02 	vpop	{d8}
 800155e:	bd10      	pop	{r4, pc}

08001560 <derate_current_reference>:
 * @param[in] iMax The maximum current.
 *
 * @return The derated current.
 */
float calculate_derated_current(float temperature, float tempStart, float tempMax, float iMax) {
    if (temperature <= tempStart) {
 8001560:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 80015d4 <derate_current_reference+0x74>
 8001564:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800156c:	d92a      	bls.n	80015c4 <derate_current_reference+0x64>
        return iMax;
    } else if (temperature >= tempMax) {
 800156e:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80015d8 <derate_current_reference+0x78>
 8001572:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800157a:	da20      	bge.n	80015be <derate_current_reference+0x5e>
        return 0.0F;
    } else {
        // Linear interpolation between tempStart and tempMax
        return iMax * (tempMax - temperature) / (tempMax - tempStart);
 800157c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80015dc <derate_current_reference+0x7c>
 8001580:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8001584:	ee61 7a07 	vmul.f32	s15, s2, s14
 8001588:	ee20 0a27 	vmul.f32	s0, s0, s15
    if (temperature <= tempStart) {
 800158c:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80015e0 <derate_current_reference+0x80>
 8001590:	eef4 0ae7 	vcmpe.f32	s1, s15
 8001594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001598:	d90e      	bls.n	80015b8 <derate_current_reference+0x58>
    } else if (temperature >= tempMax) {
 800159a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80015d4 <derate_current_reference+0x74>
 800159e:	eef4 0ae7 	vcmpe.f32	s1, s15
 80015a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a6:	da10      	bge.n	80015ca <derate_current_reference+0x6a>
        return iMax * (tempMax - temperature) / (tempMax - tempStart);
 80015a8:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80015dc <derate_current_reference+0x7c>
 80015ac:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80015b0:	ee21 1a07 	vmul.f32	s2, s2, s14
 80015b4:	ee27 1a81 	vmul.f32	s2, s15, s2
    // Derate based on inverter temperature
    float deratedCurrentInverter = calculate_derated_current(tempInverter, TEMP_INVERTER_DERATING, TEMP_INVERTER_MAX, iMax);
    
    // Return the lower of the two derated currents
    return (deratedCurrentMotor < deratedCurrentInverter) ? deratedCurrentMotor : deratedCurrentInverter;
}
 80015b8:	fe81 0a40 	vminnm.f32	s0, s2, s0
 80015bc:	4770      	bx	lr
        return 0.0F;
 80015be:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 80015e4 <derate_current_reference+0x84>
 80015c2:	e7e3      	b.n	800158c <derate_current_reference+0x2c>
        return iMax;
 80015c4:	eeb0 0a41 	vmov.f32	s0, s2
 80015c8:	e7e0      	b.n	800158c <derate_current_reference+0x2c>
        return 0.0F;
 80015ca:	ed9f 1a06 	vldr	s2, [pc, #24]	@ 80015e4 <derate_current_reference+0x84>
}
 80015ce:	fe81 0a40 	vminnm.f32	s0, s2, s0
 80015d2:	4770      	bx	lr
 80015d4:	428c0000 	.word	0x428c0000
 80015d8:	42c80000 	.word	0x42c80000
 80015dc:	3d088889 	.word	0x3d088889
 80015e0:	42200000 	.word	0x42200000
 80015e4:	00000000 	.word	0x00000000

080015e8 <tasks_1ms>:
 * @brief Function to be executed every 1ms.
 *
 * This function is called by the TIM6 IRQ handler every millisecond.
 * It increments the millisecond counter and executes all the low priority tasks.
 */
void tasks_1ms(void) {
 80015e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    // Increment millisecond counter
    ms_counter++;
 80015ec:	f8df 8140 	ldr.w	r8, [pc, #320]	@ 8001730 <tasks_1ms+0x148>

    // Call LED handler for left, right, and error LEDs
    handle_LED(&led_left, ms_counter);
 80015f0:	4847      	ldr	r0, [pc, #284]	@ (8001710 <tasks_1ms+0x128>)
    ms_counter++;
 80015f2:	f8d8 1000 	ldr.w	r1, [r8]
    handle_LED(&led_right, ms_counter);
    handle_LED(&ledError, ms_counter);

    // Read direction switch GPIO
    handle_direction(&inverter_left.direction, &inverter_right.direction);
 80015f6:	4e47      	ldr	r6, [pc, #284]	@ (8001714 <tasks_1ms+0x12c>)
    ms_counter++;
 80015f8:	3101      	adds	r1, #1
    handle_direction(&inverter_left.direction, &inverter_right.direction);
 80015fa:	4f47      	ldr	r7, [pc, #284]	@ (8001718 <tasks_1ms+0x130>)

    // Get enableSW via CAN and enableHW from shutdown circuit GPIO reading
    enable_inverters(inverter_left.enableSW, inverter_right.enableSW, &inverter_left.enable, &inverter_right.enable);

    // Acquire temperatures
    inverter_left.tempInverter = get_temperature(rawADC_temp[0], tempInverterLUT);
 80015fc:	f8df 9134 	ldr.w	r9, [pc, #308]	@ 8001734 <tasks_1ms+0x14c>
    enable_inverters(inverter_left.enableSW, inverter_right.enableSW, &inverter_left.enable, &inverter_right.enable);
 8001600:	f1a6 047c 	sub.w	r4, r6, #124	@ 0x7c
    ms_counter++;
 8001604:	f8c8 1000 	str.w	r1, [r8]
    handle_LED(&led_left, ms_counter);
 8001608:	f7ff feba 	bl	8001380 <handle_LED>
    handle_LED(&led_right, ms_counter);
 800160c:	f8d8 1000 	ldr.w	r1, [r8]
    enable_inverters(inverter_left.enableSW, inverter_right.enableSW, &inverter_left.enable, &inverter_right.enable);
 8001610:	f1a7 057c 	sub.w	r5, r7, #124	@ 0x7c
    handle_LED(&led_right, ms_counter);
 8001614:	4841      	ldr	r0, [pc, #260]	@ (800171c <tasks_1ms+0x134>)
 8001616:	f7ff feb3 	bl	8001380 <handle_LED>
    handle_LED(&ledError, ms_counter);
 800161a:	f8d8 1000 	ldr.w	r1, [r8]
 800161e:	4840      	ldr	r0, [pc, #256]	@ (8001720 <tasks_1ms+0x138>)
 8001620:	f7ff feae 	bl	8001380 <handle_LED>
    inverter_left.tempInverter = get_temperature(rawADC_temp[0], tempInverterLUT);
 8001624:	f8df 8110 	ldr.w	r8, [pc, #272]	@ 8001738 <tasks_1ms+0x150>
    handle_direction(&inverter_left.direction, &inverter_right.direction);
 8001628:	4631      	mov	r1, r6
 800162a:	4638      	mov	r0, r7
 800162c:	f7ff feec 	bl	8001408 <handle_direction>
    enable_inverters(inverter_left.enableSW, inverter_right.enableSW, &inverter_left.enable, &inverter_right.enable);
 8001630:	f107 02ea 	add.w	r2, r7, #234	@ 0xea
 8001634:	f106 03ea 	add.w	r3, r6, #234	@ 0xea
 8001638:	f897 00eb 	ldrb.w	r0, [r7, #235]	@ 0xeb
 800163c:	f896 10eb 	ldrb.w	r1, [r6, #235]	@ 0xeb
 8001640:	f7ff fef6 	bl	8001430 <enable_inverters>
    inverter_left.tempInverter = get_temperature(rawADC_temp[0], tempInverterLUT);
 8001644:	f8b8 0000 	ldrh.w	r0, [r8]
 8001648:	4649      	mov	r1, r9
 800164a:	b280      	uxth	r0, r0
 800164c:	f7ff fc6e 	bl	8000f2c <get_temperature>
 8001650:	ed87 0a01 	vstr	s0, [r7, #4]
    inverter_right.tempInverter = get_temperature(rawADC_temp[1], tempInverterLUT);
 8001654:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 8001658:	4649      	mov	r1, r9

    inverter_left.tempMotor = get_temperature(rawADC_temp[2], tempMotorLUT);
 800165a:	f8df 90e0 	ldr.w	r9, [pc, #224]	@ 800173c <tasks_1ms+0x154>
    inverter_right.tempInverter = get_temperature(rawADC_temp[1], tempInverterLUT);
 800165e:	b280      	uxth	r0, r0
 8001660:	f7ff fc64 	bl	8000f2c <get_temperature>
 8001664:	ed86 0a01 	vstr	s0, [r6, #4]
    inverter_left.tempMotor = get_temperature(rawADC_temp[2], tempMotorLUT);
 8001668:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 800166c:	4649      	mov	r1, r9
 800166e:	b280      	uxth	r0, r0
 8001670:	f7ff fc5c 	bl	8000f2c <get_temperature>
 8001674:	ed87 0a02 	vstr	s0, [r7, #8]
    inverter_right.tempMotor = get_temperature(rawADC_temp[3], tempMotorLUT);
 8001678:	f8b8 0006 	ldrh.w	r0, [r8, #6]
 800167c:	4649      	mov	r1, r9
 800167e:	b280      	uxth	r0, r0
 8001680:	f7ff fc54 	bl	8000f2c <get_temperature>
    
    //TODO: Motor did not have temperature sensor while testing, please delete these lines
    inverter_left.tempMotor = 25.0F;
 8001684:	4b27      	ldr	r3, [pc, #156]	@ (8001724 <tasks_1ms+0x13c>)
    inverter_right.tempMotor = get_temperature(rawADC_temp[3], tempMotorLUT);
 8001686:	ed86 0a02 	vstr	s0, [r6, #8]
    inverter_right.tempMotor = 25.0F;



    // Torque reference handling, without ramp
    inverter_left.reference.torqueRef = handle_torqueRef(torqueRefIn_left, inverter_left.direction, inverter_left.motor->torqueMax, inverter_left.motor->speedMax_RPM, inverter_left.feedback.speedMeas, &inverter_left.speedLoop);
 800168a:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
    inverter_left.tempMotor = 25.0F;
 800168e:	60bb      	str	r3, [r7, #8]
    inverter_right.tempMotor = 25.0F;
 8001690:	60b3      	str	r3, [r6, #8]
    inverter_left.reference.torqueRef = handle_torqueRef(torqueRefIn_left, inverter_left.direction, inverter_left.motor->torqueMax, inverter_left.motor->speedMax_RPM, inverter_left.feedback.speedMeas, &inverter_left.speedLoop);
 8001692:	f895 007c 	ldrb.w	r0, [r5, #124]	@ 0x7c
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	b240      	sxtb	r0, r0
 800169a:	edd3 0a07 	vldr	s1, [r3, #28]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	ed57 1a08 	vldr	s3, [r7, #-32]	@ 0xffffffe0
 80016a4:	ed93 1a09 	vldr	s2, [r3, #36]	@ 0x24
 80016a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001728 <tasks_1ms+0x140>)
 80016aa:	ed93 0a00 	vldr	s0, [r3]
 80016ae:	f7ff ff2b 	bl	8001508 <handle_torqueRef>
 80016b2:	ed07 0a04 	vstr	s0, [r7, #-16]
    inverter_right.reference.torqueRef = handle_torqueRef(torqueRefIn_right, inverter_right.direction, inverter_right.motor->torqueMax, inverter_right.motor->speedMax_RPM, inverter_right.feedback.speedMeas, &inverter_right.speedLoop);
 80016b6:	f894 007c 	ldrb.w	r0, [r4, #124]	@ 0x7c
 80016ba:	f106 01a4 	add.w	r1, r6, #164	@ 0xa4
 80016be:	68f3      	ldr	r3, [r6, #12]
 80016c0:	b240      	sxtb	r0, r0
 80016c2:	edd3 0a07 	vldr	s1, [r3, #28]
 80016c6:	68f3      	ldr	r3, [r6, #12]
 80016c8:	ed56 1a08 	vldr	s3, [r6, #-32]	@ 0xffffffe0
 80016cc:	ed93 1a09 	vldr	s2, [r3, #36]	@ 0x24
 80016d0:	4b16      	ldr	r3, [pc, #88]	@ (800172c <tasks_1ms+0x144>)
 80016d2:	ed93 0a00 	vldr	s0, [r3]
 80016d6:	f7ff ff17 	bl	8001508 <handle_torqueRef>
 80016da:	ed06 0a04 	vstr	s0, [r6, #-16]


    // Current reference derating
    inverter_left.reference.isMaxRef = derate_current_reference(inverter_left.tempMotor, inverter_left.tempInverter, inverter_left.motor->iMax);
 80016de:	ed97 0a02 	vldr	s0, [r7, #8]
 80016e2:	edd7 0a01 	vldr	s1, [r7, #4]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	ed93 1a0a 	vldr	s2, [r3, #40]	@ 0x28
 80016ec:	f7ff ff38 	bl	8001560 <derate_current_reference>
 80016f0:	ed07 0a05 	vstr	s0, [r7, #-20]	@ 0xffffffec
    inverter_right.reference.isMaxRef = derate_current_reference(inverter_right.tempMotor, inverter_right.tempInverter, inverter_right.motor->iMax);
 80016f4:	ed96 0a02 	vldr	s0, [r6, #8]
 80016f8:	edd6 0a01 	vldr	s1, [r6, #4]
 80016fc:	68f3      	ldr	r3, [r6, #12]
 80016fe:	ed93 1a0a 	vldr	s2, [r3, #40]	@ 0x28
 8001702:	f7ff ff2d 	bl	8001560 <derate_current_reference>
 8001706:	ed06 0a05 	vstr	s0, [r6, #-20]	@ 0xffffffec
}
 800170a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800170e:	bf00      	nop
 8001710:	2000013c 	.word	0x2000013c
 8001714:	20000264 	.word	0x20000264
 8001718:	200003cc 	.word	0x200003cc
 800171c:	20000134 	.word	0x20000134
 8001720:	2000012c 	.word	0x2000012c
 8001724:	41c80000 	.word	0x41c80000
 8001728:	200004d4 	.word	0x200004d4
 800172c:	200004d0 	.word	0x200004d0
 8001730:	200004d8 	.word	0x200004d8
 8001734:	0800a684 	.word	0x0800a684
 8001738:	200004b8 	.word	0x200004b8
 800173c:	08006684 	.word	0x08006684

08001740 <tasks_critical_left>:
/**
 * @brief Function to be executed every TS.
 *
 * This function is called by the TIM1 trigger handler every TS.
 */
void tasks_critical_left(void){
 8001740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  start_ticks = SysTick->VAL;
 8001742:	f04f 26e0 	mov.w	r6, #3758153728	@ 0xe000e000

  // encoder simulation
  rampa_calc(&freqRamp_left);
 8001746:	4f2f      	ldr	r7, [pc, #188]	@ (8001804 <tasks_critical_left+0xc4>)
  start_ticks = SysTick->VAL;
 8001748:	4d2f      	ldr	r5, [pc, #188]	@ (8001808 <tasks_critical_left+0xc8>)
 800174a:	69b3      	ldr	r3, [r6, #24]
  rampa_calc(&freqRamp_left);
 800174c:	4638      	mov	r0, r7
  angle_left.freq = freqRamp_left.out;
 800174e:	4c2f      	ldr	r4, [pc, #188]	@ (800180c <tasks_critical_left+0xcc>)
  start_ticks = SysTick->VAL;
 8001750:	602b      	str	r3, [r5, #0]
  rampa_calc(&freqRamp_left);
 8001752:	f004 fe2b 	bl	80063ac <rampa_calc>
  angle_left.freq = freqRamp_left.out;
 8001756:	687b      	ldr	r3, [r7, #4]
  angle_calc(&angle_left);
 8001758:	4620      	mov	r0, r4
  angle_left.freq = freqRamp_left.out;
 800175a:	6023      	str	r3, [r4, #0]
  angle_calc(&angle_left);
 800175c:	f004 fdd2 	bl	8006304 <angle_calc>

  // put this in encoder function
  inverter_left.encoder.theta_e = angle_left.angle*PI; // angle simulation
 8001760:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001810 <tasks_critical_left+0xd0>
 8001764:	edd4 7a02 	vldr	s15, [r4, #8]
 8001768:	4c2a      	ldr	r4, [pc, #168]	@ (8001814 <tasks_critical_left+0xd4>)
 800176a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800176e:	edc4 7a10 	vstr	s15, [r4, #64]	@ 0x40
  inverter_left.encoder.sinTheta_e = sinf(inverter_left.encoder.theta_e);
 8001772:	ed94 0a10 	vldr	s0, [r4, #64]	@ 0x40
 8001776:	f004 fa4f 	bl	8005c18 <sinf>
 800177a:	ed84 0a11 	vstr	s0, [r4, #68]	@ 0x44
  inverter_left.encoder.cosTheta_e = cosf(inverter_left.encoder.theta_e);
 800177e:	ed94 0a10 	vldr	s0, [r4, #64]	@ 0x40
 8001782:	f004 fb0d 	bl	8005da0 <cosf>


  // Actual control loop

  // ADC
  get_currents_voltage(rawADC_left, &inverter_left.analog, &inverter_left.feedback, inverter_left.encoder.sinTheta_e, inverter_left.encoder.cosTheta_e);
 8001786:	f104 0250 	add.w	r2, r4, #80	@ 0x50
  inverter_left.encoder.cosTheta_e = cosf(inverter_left.encoder.theta_e);
 800178a:	ed84 0a12 	vstr	s0, [r4, #72]	@ 0x48
  get_currents_voltage(rawADC_left, &inverter_left.analog, &inverter_left.feedback, inverter_left.encoder.sinTheta_e, inverter_left.encoder.cosTheta_e);
 800178e:	f104 0118 	add.w	r1, r4, #24
 8001792:	ed94 0a11 	vldr	s0, [r4, #68]	@ 0x44
 8001796:	4820      	ldr	r0, [pc, #128]	@ (8001818 <tasks_critical_left+0xd8>)
 8001798:	edd4 0a12 	vldr	s1, [r4, #72]	@ 0x48
 800179c:	f7ff fb6c 	bl	8000e78 <get_currents_voltage>
  inverter_left.vsMax = 0.9F * inverter_left.analog.vDC * ISQ3; // Calculate max Vs voltage, 90% of DC/sqrt3
 80017a0:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800181c <tasks_critical_left+0xdc>
 80017a4:	edd4 7a09 	vldr	s15, [r4, #36]	@ 0x24
  
  // FOC
  calc_current_reference(inverter_left.motor, &inverter_left.reference);
 80017a8:	f104 0160 	add.w	r1, r4, #96	@ 0x60
  inverter_left.vsMax = 0.9F * inverter_left.analog.vDC * ISQ3; // Calculate max Vs voltage, 90% of DC/sqrt3
 80017ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017b0:	edc4 7a45 	vstr	s15, [r4, #276]	@ 0x114
  calc_current_reference(inverter_left.motor, &inverter_left.reference);
 80017b4:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 80017b8:	f7ff f906 	bl	80009c8 <calc_current_reference>

  // PIs and duty calc
  calc_current_loop(&inverter_left);
 80017bc:	4620      	mov	r0, r4
 80017be:	f7ff f9c9 	bl	8000b54 <calc_current_loop>
  saturate_voltage(&inverter_left);
 80017c2:	4620      	mov	r0, r4
 80017c4:	f7ff f9f2 	bl	8000bac <saturate_voltage>
  calc_duties(inverter_left.vd, inverter_left.vq, inverter_left.analog.vDC, inverter_left.encoder.sinTheta_e, inverter_left.encoder.cosTheta_e, &inverter_left.duties);
 80017c8:	ed94 0a46 	vldr	s0, [r4, #280]	@ 0x118
 80017cc:	f104 0070 	add.w	r0, r4, #112	@ 0x70
 80017d0:	edd4 0a47 	vldr	s1, [r4, #284]	@ 0x11c
 80017d4:	ed94 1a09 	vldr	s2, [r4, #36]	@ 0x24
 80017d8:	edd4 1a11 	vldr	s3, [r4, #68]	@ 0x44
 80017dc:	ed94 2a12 	vldr	s4, [r4, #72]	@ 0x48
 80017e0:	f7ff fa1a 	bl	8000c18 <calc_duties>

  update_PWM(inverter_left.htim, inverter_left.duties);
 80017e4:	68e0      	ldr	r0, [r4, #12]
 80017e6:	ed94 0a1c 	vldr	s0, [r4, #112]	@ 0x70
 80017ea:	edd4 0a1d 	vldr	s1, [r4, #116]	@ 0x74
 80017ee:	ed94 1a1e 	vldr	s2, [r4, #120]	@ 0x78
 80017f2:	f7ff fe59 	bl	80014a8 <update_PWM>


  elapsed_ticks = start_ticks - SysTick->VAL;
 80017f6:	69b1      	ldr	r1, [r6, #24]
 80017f8:	682b      	ldr	r3, [r5, #0]
 80017fa:	4a09      	ldr	r2, [pc, #36]	@ (8001820 <tasks_critical_left+0xe0>)
 80017fc:	1a5b      	subs	r3, r3, r1
 80017fe:	6013      	str	r3, [r2, #0]

}
 8001800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001802:	bf00      	nop
 8001804:	20000144 	.word	0x20000144
 8001808:	200004e0 	.word	0x200004e0
 800180c:	20000158 	.word	0x20000158
 8001810:	40490fdb 	.word	0x40490fdb
 8001814:	20000350 	.word	0x20000350
 8001818:	200004c8 	.word	0x200004c8
 800181c:	3f050581 	.word	0x3f050581
 8001820:	200004dc 	.word	0x200004dc

08001824 <tasks_critical_right>:
 * @brief Function to be executed every TS.
 *
 * This function is called by the TIM8 trigger handler every TS.
 */
void tasks_critical_right(void){
}
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop

08001828 <MX_ADC1_Init>:

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001828:	482f      	ldr	r0, [pc, #188]	@ (80018e8 <MX_ADC1_Init+0xc0>)
  ADC_ChannelConfTypeDef sConfig = {0};
 800182a:	2300      	movs	r3, #0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800182c:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001830:	2201      	movs	r2, #1
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8001832:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 80018d8 <MX_ADC1_Init+0xb0>
{
 8001836:	b510      	push	{r4, lr}
  hadc1.Instance = ADC1;
 8001838:	4c2c      	ldr	r4, [pc, #176]	@ (80018ec <MX_ADC1_Init+0xc4>)
{
 800183a:	b084      	sub	sp, #16
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800183c:	6102      	str	r2, [r0, #16]
  ADC_ChannelConfTypeDef sConfig = {0};
 800183e:	9300      	str	r3, [sp, #0]
  hadc1.Instance = ADC1;
 8001840:	6004      	str	r4, [r0, #0]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001842:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001846:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 4;
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001848:	f880 2030 	strb.w	r2, [r0, #48]	@ 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 800184c:	9303      	str	r3, [sp, #12]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800184e:	e9c0 1301 	strd	r1, r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 4;
 8001852:	2104      	movs	r1, #4
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8001854:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
  hadc1.Init.NbrOfConversion = 4;
 8001858:	61c1      	str	r1, [r0, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800185a:	e9c0 3305 	strd	r3, r3, [r0, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 800185e:	e9cd 3301 	strd	r3, r3, [sp, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001862:	f001 f951 	bl	8002b08 <HAL_ADC_Init>
 8001866:	bb38      	cbnz	r0, 80018b8 <MX_ADC1_Init+0x90>

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001868:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800186a:	4669      	mov	r1, sp
 800186c:	481e      	ldr	r0, [pc, #120]	@ (80018e8 <MX_ADC1_Init+0xc0>)
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800186e:	9302      	str	r3, [sp, #8]
  sConfig.Channel = ADC_CHANNEL_0;
 8001870:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 80018e0 <MX_ADC1_Init+0xb8>
 8001874:	ed8d 7b00 	vstr	d7, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001878:	f001 fae6 	bl	8002e48 <HAL_ADC_ConfigChannel>
 800187c:	bb48      	cbnz	r0, 80018d2 <MX_ADC1_Init+0xaa>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800187e:	2201      	movs	r2, #1
 8001880:	2302      	movs	r3, #2
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001882:	4669      	mov	r1, sp
 8001884:	4818      	ldr	r0, [pc, #96]	@ (80018e8 <MX_ADC1_Init+0xc0>)
  sConfig.Channel = ADC_CHANNEL_1;
 8001886:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800188a:	f001 fadd 	bl	8002e48 <HAL_ADC_ConfigChannel>
 800188e:	b9e8      	cbnz	r0, 80018cc <MX_ADC1_Init+0xa4>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001890:	2202      	movs	r2, #2
 8001892:	2303      	movs	r3, #3
  sConfig.Rank = ADC_REGULAR_RANK_3;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001894:	4669      	mov	r1, sp
 8001896:	4814      	ldr	r0, [pc, #80]	@ (80018e8 <MX_ADC1_Init+0xc0>)
  sConfig.Channel = ADC_CHANNEL_2;
 8001898:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800189c:	f001 fad4 	bl	8002e48 <HAL_ADC_ConfigChannel>
 80018a0:	b988      	cbnz	r0, 80018c6 <MX_ADC1_Init+0x9e>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80018a2:	2203      	movs	r2, #3
 80018a4:	2304      	movs	r3, #4
  sConfig.Rank = ADC_REGULAR_RANK_4;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018a6:	4669      	mov	r1, sp
 80018a8:	480f      	ldr	r0, [pc, #60]	@ (80018e8 <MX_ADC1_Init+0xc0>)
  sConfig.Channel = ADC_CHANNEL_3;
 80018aa:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018ae:	f001 facb 	bl	8002e48 <HAL_ADC_ConfigChannel>
 80018b2:	b920      	cbnz	r0, 80018be <MX_ADC1_Init+0x96>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018b4:	b004      	add	sp, #16
 80018b6:	bd10      	pop	{r4, pc}
    Error_Handler();
 80018b8:	f000 fcec 	bl	8002294 <Error_Handler>
 80018bc:	e7d4      	b.n	8001868 <MX_ADC1_Init+0x40>
    Error_Handler();
 80018be:	f000 fce9 	bl	8002294 <Error_Handler>
}
 80018c2:	b004      	add	sp, #16
 80018c4:	bd10      	pop	{r4, pc}
    Error_Handler();
 80018c6:	f000 fce5 	bl	8002294 <Error_Handler>
 80018ca:	e7ea      	b.n	80018a2 <MX_ADC1_Init+0x7a>
    Error_Handler();
 80018cc:	f000 fce2 	bl	8002294 <Error_Handler>
 80018d0:	e7de      	b.n	8001890 <MX_ADC1_Init+0x68>
    Error_Handler();
 80018d2:	f000 fcdf 	bl	8002294 <Error_Handler>
 80018d6:	e7d2      	b.n	800187e <MX_ADC1_Init+0x56>
 80018d8:	09000000 	.word	0x09000000
 80018dc:	10000000 	.word	0x10000000
 80018e0:	00000000 	.word	0x00000000
 80018e4:	00000001 	.word	0x00000001
 80018e8:	20000698 	.word	0x20000698
 80018ec:	40012000 	.word	0x40012000

080018f0 <MX_ADC2_Init>:

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80018f0:	482f      	ldr	r0, [pc, #188]	@ (80019b0 <MX_ADC2_Init+0xc0>)
  ADC_ChannelConfTypeDef sConfig = {0};
 80018f2:	2300      	movs	r3, #0
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80018f4:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80018f8:	2201      	movs	r2, #1
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 80018fa:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 80019a0 <MX_ADC2_Init+0xb0>
{
 80018fe:	b510      	push	{r4, lr}
  hadc2.Instance = ADC2;
 8001900:	4c2c      	ldr	r4, [pc, #176]	@ (80019b4 <MX_ADC2_Init+0xc4>)
{
 8001902:	b084      	sub	sp, #16
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001904:	6102      	str	r2, [r0, #16]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001906:	9300      	str	r3, [sp, #0]
  hadc2.Instance = ADC2;
 8001908:	6004      	str	r4, [r0, #0]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800190a:	f880 3020 	strb.w	r3, [r0, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800190e:	60c3      	str	r3, [r0, #12]
  hadc2.Init.NbrOfConversion = 4;
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001910:	f880 2030 	strb.w	r2, [r0, #48]	@ 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 8001914:	9303      	str	r3, [sp, #12]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001916:	e9c0 1301 	strd	r1, r3, [r0, #4]
  hadc2.Init.NbrOfConversion = 4;
 800191a:	2104      	movs	r1, #4
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 800191c:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
  hadc2.Init.NbrOfConversion = 4;
 8001920:	61c1      	str	r1, [r0, #28]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001922:	e9c0 3305 	strd	r3, r3, [r0, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001926:	e9cd 3301 	strd	r3, r3, [sp, #4]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800192a:	f001 f8ed 	bl	8002b08 <HAL_ADC_Init>
 800192e:	bb38      	cbnz	r0, 8001980 <MX_ADC2_Init+0x90>

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001930:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001932:	4669      	mov	r1, sp
 8001934:	481e      	ldr	r0, [pc, #120]	@ (80019b0 <MX_ADC2_Init+0xc0>)
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001936:	9302      	str	r3, [sp, #8]
  sConfig.Channel = ADC_CHANNEL_6;
 8001938:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 80019a8 <MX_ADC2_Init+0xb8>
 800193c:	ed8d 7b00 	vstr	d7, [sp]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001940:	f001 fa82 	bl	8002e48 <HAL_ADC_ConfigChannel>
 8001944:	bb48      	cbnz	r0, 800199a <MX_ADC2_Init+0xaa>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001946:	2207      	movs	r2, #7
 8001948:	2302      	movs	r3, #2
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800194a:	4669      	mov	r1, sp
 800194c:	4818      	ldr	r0, [pc, #96]	@ (80019b0 <MX_ADC2_Init+0xc0>)
  sConfig.Channel = ADC_CHANNEL_7;
 800194e:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001952:	f001 fa79 	bl	8002e48 <HAL_ADC_ConfigChannel>
 8001956:	b9e8      	cbnz	r0, 8001994 <MX_ADC2_Init+0xa4>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001958:	2208      	movs	r2, #8
 800195a:	2303      	movs	r3, #3
  sConfig.Rank = ADC_REGULAR_RANK_3;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800195c:	4669      	mov	r1, sp
 800195e:	4814      	ldr	r0, [pc, #80]	@ (80019b0 <MX_ADC2_Init+0xc0>)
  sConfig.Channel = ADC_CHANNEL_8;
 8001960:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001964:	f001 fa70 	bl	8002e48 <HAL_ADC_ConfigChannel>
 8001968:	b988      	cbnz	r0, 800198e <MX_ADC2_Init+0x9e>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800196a:	2209      	movs	r2, #9
 800196c:	2304      	movs	r3, #4
  sConfig.Rank = ADC_REGULAR_RANK_4;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800196e:	4669      	mov	r1, sp
 8001970:	480f      	ldr	r0, [pc, #60]	@ (80019b0 <MX_ADC2_Init+0xc0>)
  sConfig.Channel = ADC_CHANNEL_9;
 8001972:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001976:	f001 fa67 	bl	8002e48 <HAL_ADC_ConfigChannel>
 800197a:	b920      	cbnz	r0, 8001986 <MX_ADC2_Init+0x96>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800197c:	b004      	add	sp, #16
 800197e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001980:	f000 fc88 	bl	8002294 <Error_Handler>
 8001984:	e7d4      	b.n	8001930 <MX_ADC2_Init+0x40>
    Error_Handler();
 8001986:	f000 fc85 	bl	8002294 <Error_Handler>
}
 800198a:	b004      	add	sp, #16
 800198c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800198e:	f000 fc81 	bl	8002294 <Error_Handler>
 8001992:	e7ea      	b.n	800196a <MX_ADC2_Init+0x7a>
    Error_Handler();
 8001994:	f000 fc7e 	bl	8002294 <Error_Handler>
 8001998:	e7de      	b.n	8001958 <MX_ADC2_Init+0x68>
    Error_Handler();
 800199a:	f000 fc7b 	bl	8002294 <Error_Handler>
 800199e:	e7d2      	b.n	8001946 <MX_ADC2_Init+0x56>
 80019a0:	09000000 	.word	0x09000000
 80019a4:	10000000 	.word	0x10000000
 80019a8:	00000006 	.word	0x00000006
 80019ac:	00000001 	.word	0x00000001
 80019b0:	20000650 	.word	0x20000650
 80019b4:	40012100 	.word	0x40012100

080019b8 <MX_ADC3_Init>:

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80019b8:	482f      	ldr	r0, [pc, #188]	@ (8001a78 <MX_ADC3_Init+0xc0>)
  ADC_ChannelConfTypeDef sConfig = {0};
 80019ba:	2300      	movs	r3, #0
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80019bc:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80019c0:	2201      	movs	r2, #1
  hadc3.Init.ContinuousConvMode = DISABLE;
  hadc3.Init.DiscontinuousConvMode = DISABLE;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 80019c2:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 8001a68 <MX_ADC3_Init+0xb0>
{
 80019c6:	b510      	push	{r4, lr}
  hadc3.Instance = ADC3;
 80019c8:	4c2c      	ldr	r4, [pc, #176]	@ (8001a7c <MX_ADC3_Init+0xc4>)
{
 80019ca:	b084      	sub	sp, #16
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80019cc:	6102      	str	r2, [r0, #16]
  ADC_ChannelConfTypeDef sConfig = {0};
 80019ce:	9300      	str	r3, [sp, #0]
  hadc3.Instance = ADC3;
 80019d0:	6004      	str	r4, [r0, #0]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80019d2:	f880 3020 	strb.w	r3, [r0, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019d6:	60c3      	str	r3, [r0, #12]
  hadc3.Init.NbrOfConversion = 4;
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80019d8:	f880 2030 	strb.w	r2, [r0, #48]	@ 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 80019dc:	9303      	str	r3, [sp, #12]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80019de:	e9c0 1301 	strd	r1, r3, [r0, #4]
  hadc3.Init.NbrOfConversion = 4;
 80019e2:	2104      	movs	r1, #4
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 80019e4:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
  hadc3.Init.NbrOfConversion = 4;
 80019e8:	61c1      	str	r1, [r0, #28]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80019ea:	e9c0 3305 	strd	r3, r3, [r0, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80019ee:	e9cd 3301 	strd	r3, r3, [sp, #4]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80019f2:	f001 f889 	bl	8002b08 <HAL_ADC_Init>
 80019f6:	bb38      	cbnz	r0, 8001a48 <MX_ADC3_Init+0x90>

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80019f8:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80019fa:	4669      	mov	r1, sp
 80019fc:	481e      	ldr	r0, [pc, #120]	@ (8001a78 <MX_ADC3_Init+0xc0>)
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80019fe:	9302      	str	r3, [sp, #8]
  sConfig.Channel = ADC_CHANNEL_10;
 8001a00:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8001a70 <MX_ADC3_Init+0xb8>
 8001a04:	ed8d 7b00 	vstr	d7, [sp]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001a08:	f001 fa1e 	bl	8002e48 <HAL_ADC_ConfigChannel>
 8001a0c:	bb48      	cbnz	r0, 8001a62 <MX_ADC3_Init+0xaa>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001a0e:	220b      	movs	r2, #11
 8001a10:	2302      	movs	r3, #2
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001a12:	4669      	mov	r1, sp
 8001a14:	4818      	ldr	r0, [pc, #96]	@ (8001a78 <MX_ADC3_Init+0xc0>)
  sConfig.Channel = ADC_CHANNEL_11;
 8001a16:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001a1a:	f001 fa15 	bl	8002e48 <HAL_ADC_ConfigChannel>
 8001a1e:	b9e8      	cbnz	r0, 8001a5c <MX_ADC3_Init+0xa4>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001a20:	220c      	movs	r2, #12
 8001a22:	2303      	movs	r3, #3
  sConfig.Rank = ADC_REGULAR_RANK_3;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001a24:	4669      	mov	r1, sp
 8001a26:	4814      	ldr	r0, [pc, #80]	@ (8001a78 <MX_ADC3_Init+0xc0>)
  sConfig.Channel = ADC_CHANNEL_12;
 8001a28:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001a2c:	f001 fa0c 	bl	8002e48 <HAL_ADC_ConfigChannel>
 8001a30:	b988      	cbnz	r0, 8001a56 <MX_ADC3_Init+0x9e>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001a32:	220d      	movs	r2, #13
 8001a34:	2304      	movs	r3, #4
  sConfig.Rank = ADC_REGULAR_RANK_4;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001a36:	4669      	mov	r1, sp
 8001a38:	480f      	ldr	r0, [pc, #60]	@ (8001a78 <MX_ADC3_Init+0xc0>)
  sConfig.Channel = ADC_CHANNEL_13;
 8001a3a:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001a3e:	f001 fa03 	bl	8002e48 <HAL_ADC_ConfigChannel>
 8001a42:	b920      	cbnz	r0, 8001a4e <MX_ADC3_Init+0x96>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001a44:	b004      	add	sp, #16
 8001a46:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001a48:	f000 fc24 	bl	8002294 <Error_Handler>
 8001a4c:	e7d4      	b.n	80019f8 <MX_ADC3_Init+0x40>
    Error_Handler();
 8001a4e:	f000 fc21 	bl	8002294 <Error_Handler>
}
 8001a52:	b004      	add	sp, #16
 8001a54:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001a56:	f000 fc1d 	bl	8002294 <Error_Handler>
 8001a5a:	e7ea      	b.n	8001a32 <MX_ADC3_Init+0x7a>
    Error_Handler();
 8001a5c:	f000 fc1a 	bl	8002294 <Error_Handler>
 8001a60:	e7de      	b.n	8001a20 <MX_ADC3_Init+0x68>
    Error_Handler();
 8001a62:	f000 fc17 	bl	8002294 <Error_Handler>
 8001a66:	e7d2      	b.n	8001a0e <MX_ADC3_Init+0x56>
 8001a68:	0d000000 	.word	0x0d000000
 8001a6c:	10000000 	.word	0x10000000
 8001a70:	0000000a 	.word	0x0000000a
 8001a74:	00000001 	.word	0x00000001
 8001a78:	20000608 	.word	0x20000608
 8001a7c:	40012200 	.word	0x40012200

08001a80 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 8001a80:	4a63      	ldr	r2, [pc, #396]	@ (8001c10 <HAL_ADC_MspInit+0x190>)
 8001a82:	6803      	ldr	r3, [r0, #0]
{
 8001a84:	b570      	push	{r4, r5, r6, lr}
  if(adcHandle->Instance==ADC1)
 8001a86:	4293      	cmp	r3, r2
{
 8001a88:	b08e      	sub	sp, #56	@ 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8a:	f04f 0400 	mov.w	r4, #0
{
 8001a8e:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8001a94:	940a      	str	r4, [sp, #40]	@ 0x28
 8001a96:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  if(adcHandle->Instance==ADC1)
 8001a9a:	d008      	beq.n	8001aae <HAL_ADC_MspInit+0x2e>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 8001a9c:	4a5d      	ldr	r2, [pc, #372]	@ (8001c14 <HAL_ADC_MspInit+0x194>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d03b      	beq.n	8001b1a <HAL_ADC_MspInit+0x9a>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 8001aa2:	4a5d      	ldr	r2, [pc, #372]	@ (8001c18 <HAL_ADC_MspInit+0x198>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	f000 8083 	beq.w	8001bb0 <HAL_ADC_MspInit+0x130>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001aaa:	b00e      	add	sp, #56	@ 0x38
 8001aac:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001aae:	4b5b      	ldr	r3, [pc, #364]	@ (8001c1c <HAL_ADC_MspInit+0x19c>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab0:	a908      	add	r1, sp, #32
    hdma_adc1.Instance = DMA2_Stream0;
 8001ab2:	4e5b      	ldr	r6, [pc, #364]	@ (8001c20 <HAL_ADC_MspInit+0x1a0>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ab4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001ab6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001aba:	645a      	str	r2, [r3, #68]	@ 0x44
 8001abc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001abe:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8001ac2:	9201      	str	r2, [sp, #4]
 8001ac4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ac8:	f042 0201 	orr.w	r2, r2, #1
 8001acc:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Pin = ia_L_Pin|ib_L_Pin|ic_L_Pin|VDC_L_Pin;
 8001ace:	220f      	movs	r2, #15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = ia_L_Pin|ib_L_Pin|ic_L_Pin|VDC_L_Pin;
 8001ad8:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ada:	9802      	ldr	r0, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001adc:	4851      	ldr	r0, [pc, #324]	@ (8001c24 <HAL_ADC_MspInit+0x1a4>)
    GPIO_InitStruct.Pin = ia_L_Pin|ib_L_Pin|ic_L_Pin|VDC_L_Pin;
 8001ade:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae2:	f002 f811 	bl	8003b08 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8001ae6:	4a50      	ldr	r2, [pc, #320]	@ (8001c28 <HAL_ADC_MspInit+0x1a8>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ae8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001aec:	4630      	mov	r0, r6
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001aee:	6274      	str	r4, [r6, #36]	@ 0x24
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001af0:	6133      	str	r3, [r6, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001af2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
    hdma_adc1.Instance = DMA2_Stream0;
 8001af6:	e9c6 2400 	strd	r2, r4, [r6]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001afa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001afe:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b02:	e9c6 4407 	strd	r4, r4, [r6, #28]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b06:	e9c6 2305 	strd	r2, r3, [r6, #20]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b0a:	f001 fe4d 	bl	80037a8 <HAL_DMA_Init>
 8001b0e:	2800      	cmp	r0, #0
 8001b10:	d14b      	bne.n	8001baa <HAL_ADC_MspInit+0x12a>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8001b12:	63ae      	str	r6, [r5, #56]	@ 0x38
 8001b14:	63b5      	str	r5, [r6, #56]	@ 0x38
}
 8001b16:	b00e      	add	sp, #56	@ 0x38
 8001b18:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001b1a:	4b40      	ldr	r3, [pc, #256]	@ (8001c1c <HAL_ADC_MspInit+0x19c>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1c:	4841      	ldr	r0, [pc, #260]	@ (8001c24 <HAL_ADC_MspInit+0x1a4>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001b1e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    hdma_adc2.Instance = DMA2_Stream2;
 8001b20:	4e42      	ldr	r6, [pc, #264]	@ (8001c2c <HAL_ADC_MspInit+0x1ac>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001b22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b26:	645a      	str	r2, [r3, #68]	@ 0x44
 8001b28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001b2a:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8001b2e:	9203      	str	r2, [sp, #12]
 8001b30:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b34:	f042 0201 	orr.w	r2, r2, #1
 8001b38:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b3c:	f002 0201 	and.w	r2, r2, #1
 8001b40:	9204      	str	r2, [sp, #16]
 8001b42:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b46:	f042 0202 	orr.w	r2, r2, #2
 8001b4a:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Pin = ia_R_Pin|ib_R_Pin;
 8001b4c:	22c0      	movs	r2, #192	@ 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = ia_R_Pin|ib_R_Pin;
 8001b56:	2303      	movs	r3, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b58:	9905      	ldr	r1, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5a:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = ia_R_Pin|ib_R_Pin;
 8001b5c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b60:	f001 ffd2 	bl	8003b08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ic_R_Pin|VDC_R_Pin;
 8001b64:	2203      	movs	r2, #3
 8001b66:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b68:	4831      	ldr	r0, [pc, #196]	@ (8001c30 <HAL_ADC_MspInit+0x1b0>)
 8001b6a:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	940a      	str	r4, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pin = ic_R_Pin|VDC_R_Pin;
 8001b6e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b72:	f001 ffc9 	bl	8003b08 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8001b76:	4a2f      	ldr	r2, [pc, #188]	@ (8001c34 <HAL_ADC_MspInit+0x1b4>)
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8001b78:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001b7c:	4630      	mov	r0, r6
    hdma_adc2.Instance = DMA2_Stream2;
 8001b7e:	6032      	str	r2, [r6, #0]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001b80:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8001b84:	6073      	str	r3, [r6, #4]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b86:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001b8a:	6132      	str	r2, [r6, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b90:	60b4      	str	r4, [r6, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b92:	60f4      	str	r4, [r6, #12]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001b94:	6234      	str	r4, [r6, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b96:	6274      	str	r4, [r6, #36]	@ 0x24
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b98:	6173      	str	r3, [r6, #20]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001b9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b9e:	e9c6 2306 	strd	r2, r3, [r6, #24]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001ba2:	f001 fe01 	bl	80037a8 <HAL_DMA_Init>
 8001ba6:	2800      	cmp	r0, #0
 8001ba8:	d0b3      	beq.n	8001b12 <HAL_ADC_MspInit+0x92>
      Error_Handler();
 8001baa:	f000 fb73 	bl	8002294 <Error_Handler>
 8001bae:	e7b0      	b.n	8001b12 <HAL_ADC_MspInit+0x92>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c1c <HAL_ADC_MspInit+0x19c>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb2:	a908      	add	r1, sp, #32
    hdma_adc3.Instance = DMA2_Stream1;
 8001bb4:	4e20      	ldr	r6, [pc, #128]	@ (8001c38 <HAL_ADC_MspInit+0x1b8>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001bb6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001bb8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001bbc:	645a      	str	r2, [r3, #68]	@ 0x44
 8001bbe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001bc0:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 8001bc4:	9206      	str	r2, [sp, #24]
 8001bc6:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001bca:	f042 0204 	orr.w	r2, r2, #4
 8001bce:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Pin = Tinv_L_Pin|Tinv_R_Pin|Tmot_L_Pin|Tmot_R_Pin;
 8001bd0:	220f      	movs	r2, #15
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = Tinv_L_Pin|Tinv_R_Pin|Tmot_L_Pin|Tmot_R_Pin;
 8001bda:	2303      	movs	r3, #3
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bdc:	9807      	ldr	r0, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bde:	4817      	ldr	r0, [pc, #92]	@ (8001c3c <HAL_ADC_MspInit+0x1bc>)
    GPIO_InitStruct.Pin = Tinv_L_Pin|Tinv_R_Pin|Tmot_L_Pin|Tmot_R_Pin;
 8001be0:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001be4:	f001 ff90 	bl	8003b08 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8001be8:	4a15      	ldr	r2, [pc, #84]	@ (8001c40 <HAL_ADC_MspInit+0x1c0>)
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8001bea:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001bee:	4630      	mov	r0, r6
    hdma_adc3.Instance = DMA2_Stream1;
 8001bf0:	6032      	str	r2, [r6, #0]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001bf2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8001bf6:	6073      	str	r3, [r6, #4]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001bf8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001bfc:	6132      	str	r2, [r6, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001bfe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c02:	60b4      	str	r4, [r6, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c04:	60f4      	str	r4, [r6, #12]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001c06:	6234      	str	r4, [r6, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c08:	6274      	str	r4, [r6, #36]	@ 0x24
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c0a:	6173      	str	r3, [r6, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c0c:	e7c5      	b.n	8001b9a <HAL_ADC_MspInit+0x11a>
 8001c0e:	bf00      	nop
 8001c10:	40012000 	.word	0x40012000
 8001c14:	40012100 	.word	0x40012100
 8001c18:	40012200 	.word	0x40012200
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	200005a4 	.word	0x200005a4
 8001c24:	40020000 	.word	0x40020000
 8001c28:	40026410 	.word	0x40026410
 8001c2c:	20000544 	.word	0x20000544
 8001c30:	40020400 	.word	0x40020400
 8001c34:	40026440 	.word	0x40026440
 8001c38:	200004e4 	.word	0x200004e4
 8001c3c:	40020800 	.word	0x40020800
 8001c40:	40026428 	.word	0x40026428

08001c44 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001c44:	b510      	push	{r4, lr}
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001c46:	480b      	ldr	r0, [pc, #44]	@ (8001c74 <MX_CAN1_Init+0x30>)
  hcan1.Init.Prescaler = 27;
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001c48:	2300      	movs	r3, #0
  hcan1.Instance = CAN1;
 8001c4a:	4c0b      	ldr	r4, [pc, #44]	@ (8001c78 <MX_CAN1_Init+0x34>)
  hcan1.Init.Prescaler = 27;
 8001c4c:	211b      	movs	r1, #27
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001c4e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001c52:	6083      	str	r3, [r0, #8]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
  hcan1.Init.TimeTriggeredMode = DISABLE;
  hcan1.Init.AutoBusOff = DISABLE;
  hcan1.Init.AutoWakeUp = DISABLE;
  hcan1.Init.AutoRetransmission = DISABLE;
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001c54:	8383      	strh	r3, [r0, #28]
  hcan1.Init.Prescaler = 27;
 8001c56:	e9c0 4100 	strd	r4, r1, [r0]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001c5a:	e9c0 3203 	strd	r3, r2, [r0, #12]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001c5e:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcan1.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001c62:	f001 f9af 	bl	8002fc4 <HAL_CAN_Init>
 8001c66:	b900      	cbnz	r0, 8001c6a <MX_CAN1_Init+0x26>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001c68:	bd10      	pop	{r4, pc}
 8001c6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001c6e:	f000 bb11 	b.w	8002294 <Error_Handler>
 8001c72:	bf00      	nop
 8001c74:	200006e0 	.word	0x200006e0
 8001c78:	40006400 	.word	0x40006400
 8001c7c:	00000000 	.word	0x00000000

08001c80 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(canHandle->Instance==CAN1)
 8001c80:	4b1f      	ldr	r3, [pc, #124]	@ (8001d00 <HAL_CAN_MspInit+0x80>)
 8001c82:	6802      	ldr	r2, [r0, #0]
{
 8001c84:	b510      	push	{r4, lr}
  if(canHandle->Instance==CAN1)
 8001c86:	429a      	cmp	r2, r3
{
 8001c88:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8a:	f04f 0400 	mov.w	r4, #0
 8001c8e:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001c92:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001c96:	9406      	str	r4, [sp, #24]
  if(canHandle->Instance==CAN1)
 8001c98:	d001      	beq.n	8001c9e <HAL_CAN_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001c9a:	b008      	add	sp, #32
 8001c9c:	bd10      	pop	{r4, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001c9e:	f503 33ea 	add.w	r3, r3, #119808	@ 0x1d400
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ca2:	a902      	add	r1, sp, #8
 8001ca4:	4817      	ldr	r0, [pc, #92]	@ (8001d04 <HAL_CAN_MspInit+0x84>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001ca6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ca8:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8001cac:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cb0:	f002 7200 	and.w	r2, r2, #33554432	@ 0x2000000
 8001cb4:	9200      	str	r2, [sp, #0]
 8001cb6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001cba:	f042 0208 	orr.w	r2, r2, #8
 8001cbe:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc0:	2203      	movs	r2, #3
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc4:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cc8:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8001cf8 <HAL_CAN_MspInit+0x78>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ccc:	9301      	str	r3, [sp, #4]
 8001cce:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd0:	2309      	movs	r3, #9
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cd2:	ed8d 7b02 	vstr	d7, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cda:	f001 ff15 	bl	8003b08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001cde:	4622      	mov	r2, r4
 8001ce0:	4621      	mov	r1, r4
 8001ce2:	2014      	movs	r0, #20
 8001ce4:	f001 fc88 	bl	80035f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001ce8:	2014      	movs	r0, #20
 8001cea:	f001 fcc1 	bl	8003670 <HAL_NVIC_EnableIRQ>
}
 8001cee:	b008      	add	sp, #32
 8001cf0:	bd10      	pop	{r4, pc}
 8001cf2:	bf00      	nop
 8001cf4:	f3af 8000 	nop.w
 8001cf8:	00000003 	.word	0x00000003
 8001cfc:	00000002 	.word	0x00000002
 8001d00:	40006400 	.word	0x40006400
 8001d04:	40020c00 	.word	0x40020c00

08001d08 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001d08:	b500      	push	{lr}

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001d0a:	2300      	movs	r3, #0
{
 8001d0c:	b083      	sub	sp, #12

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001d0e:	4810      	ldr	r0, [pc, #64]	@ (8001d50 <MX_DAC_Init+0x48>)
 8001d10:	4a10      	ldr	r2, [pc, #64]	@ (8001d54 <MX_DAC_Init+0x4c>)
  DAC_ChannelConfTypeDef sConfig = {0};
 8001d12:	9300      	str	r3, [sp, #0]
  hdac.Instance = DAC;
 8001d14:	6002      	str	r2, [r0, #0]
  DAC_ChannelConfTypeDef sConfig = {0};
 8001d16:	9301      	str	r3, [sp, #4]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001d18:	f001 fcce 	bl	80036b8 <HAL_DAC_Init>
 8001d1c:	b960      	cbnz	r0, 8001d38 <MX_DAC_Init+0x30>

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	4669      	mov	r1, sp
 8001d22:	480b      	ldr	r0, [pc, #44]	@ (8001d50 <MX_DAC_Init+0x48>)
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001d24:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8001d48 <MX_DAC_Init+0x40>
 8001d28:	ed8d 7b00 	vstr	d7, [sp]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001d2c:	f001 fd10 	bl	8003750 <HAL_DAC_ConfigChannel>
 8001d30:	b928      	cbnz	r0, 8001d3e <MX_DAC_Init+0x36>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001d32:	b003      	add	sp, #12
 8001d34:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001d38:	f000 faac 	bl	8002294 <Error_Handler>
 8001d3c:	e7ef      	b.n	8001d1e <MX_DAC_Init+0x16>
    Error_Handler();
 8001d3e:	f000 faa9 	bl	8002294 <Error_Handler>
}
 8001d42:	b003      	add	sp, #12
 8001d44:	f85d fb04 	ldr.w	pc, [sp], #4
	...
 8001d50:	20000708 	.word	0x20000708
 8001d54:	40007400 	.word	0x40007400

08001d58 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(dacHandle->Instance==DAC)
 8001d58:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc4 <HAL_DAC_MspInit+0x6c>)
 8001d5a:	6802      	ldr	r2, [r0, #0]
{
 8001d5c:	b530      	push	{r4, r5, lr}
  if(dacHandle->Instance==DAC)
 8001d5e:	429a      	cmp	r2, r3
{
 8001d60:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d62:	f04f 0400 	mov.w	r4, #0
 8001d66:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001d6a:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001d6e:	9406      	str	r4, [sp, #24]
  if(dacHandle->Instance==DAC)
 8001d70:	d001      	beq.n	8001d76 <HAL_DAC_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001d72:	b009      	add	sp, #36	@ 0x24
 8001d74:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_DAC_CLK_ENABLE();
 8001d76:	f503 33e2 	add.w	r3, r3, #115712	@ 0x1c400
    HAL_GPIO_Init(DAC_GPIO_Port, &GPIO_InitStruct);
 8001d7a:	a902      	add	r1, sp, #8
 8001d7c:	4812      	ldr	r0, [pc, #72]	@ (8001dc8 <HAL_DAC_MspInit+0x70>)
    __HAL_RCC_DAC_CLK_ENABLE();
 8001d7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d80:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001d84:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d88:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 8001d8c:	9200      	str	r2, [sp, #0]
 8001d8e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d92:	f042 0201 	orr.w	r2, r2, #1
 8001d96:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Pin = DAC_Pin;
 8001d98:	2210      	movs	r2, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = DAC_Pin;
 8001da2:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da4:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Pin = DAC_Pin;
 8001da6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(DAC_GPIO_Port, &GPIO_InitStruct);
 8001daa:	f001 fead 	bl	8003b08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001dae:	4622      	mov	r2, r4
 8001db0:	4621      	mov	r1, r4
 8001db2:	2036      	movs	r0, #54	@ 0x36
 8001db4:	f001 fc20 	bl	80035f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001db8:	2036      	movs	r0, #54	@ 0x36
 8001dba:	f001 fc59 	bl	8003670 <HAL_NVIC_EnableIRQ>
}
 8001dbe:	b009      	add	sp, #36	@ 0x24
 8001dc0:	bd30      	pop	{r4, r5, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40007400 	.word	0x40007400
 8001dc8:	40020000 	.word	0x40020000

08001dcc <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001dcc:	4b13      	ldr	r3, [pc, #76]	@ (8001e1c <MX_DMA_Init+0x50>)

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2038      	movs	r0, #56	@ 0x38
 8001dd2:	4611      	mov	r1, r2
{
 8001dd4:	b510      	push	{r4, lr}
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001dd6:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
{
 8001dd8:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001dda:	f444 0480 	orr.w	r4, r4, #4194304	@ 0x400000
 8001dde:	631c      	str	r4, [r3, #48]	@ 0x30
 8001de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001de6:	9301      	str	r3, [sp, #4]
 8001de8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001dea:	f001 fc05 	bl	80035f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001dee:	2038      	movs	r0, #56	@ 0x38
 8001df0:	f001 fc3e 	bl	8003670 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001df4:	2200      	movs	r2, #0
 8001df6:	2039      	movs	r0, #57	@ 0x39
 8001df8:	4611      	mov	r1, r2
 8001dfa:	f001 fbfd 	bl	80035f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001dfe:	2039      	movs	r0, #57	@ 0x39
 8001e00:	f001 fc36 	bl	8003670 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001e04:	2200      	movs	r2, #0
 8001e06:	203a      	movs	r0, #58	@ 0x3a
 8001e08:	4611      	mov	r1, r2
 8001e0a:	f001 fbf5 	bl	80035f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001e0e:	203a      	movs	r0, #58	@ 0x3a

}
 8001e10:	b002      	add	sp, #8
 8001e12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001e16:	f001 bc2b 	b.w	8003670 <HAL_NVIC_EnableIRQ>
 8001e1a:	bf00      	nop
 8001e1c:	40023800 	.word	0x40023800

08001e20 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8001e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e24:	4b6d      	ldr	r3, [pc, #436]	@ (8001fdc <MX_GPIO_Init+0x1bc>)
{
 8001e26:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e28:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_R_GPIO_Port, ENABLE_R_Pin, GPIO_PIN_RESET);
 8001e2a:	2104      	movs	r1, #4
 8001e2c:	f8df 81b8 	ldr.w	r8, [pc, #440]	@ 8001fe8 <MX_GPIO_Init+0x1c8>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(SC_det_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e30:	2601      	movs	r6, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e32:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e34:	f04f 0a02 	mov.w	sl, #2
  HAL_GPIO_WritePin(ENABLE_L_GPIO_Port, ENABLE_L_Pin, GPIO_PIN_RESET);
 8001e38:	f8df 91b0 	ldr.w	r9, [pc, #432]	@ 8001fec <MX_GPIO_Init+0x1cc>
  HAL_GPIO_WritePin(ENABLE_R_GPIO_Port, ENABLE_R_Pin, GPIO_PIN_RESET);
 8001e3c:	4640      	mov	r0, r8
  HAL_GPIO_WritePin(GPIOD, LED_LEFT_Pin|LED_RIGHT_Pin|LED_ERR_Pin, GPIO_PIN_RESET);
 8001e3e:	4d68      	ldr	r5, [pc, #416]	@ (8001fe0 <MX_GPIO_Init+0x1c0>)
  HAL_GPIO_Init(SC_det_GPIO_Port, &GPIO_InitStruct);
 8001e40:	f8df b1ac 	ldr.w	fp, [pc, #428]	@ 8001ff0 <MX_GPIO_Init+0x1d0>
  HAL_GPIO_Init(TRIP_L_GPIO_Port, &GPIO_InitStruct);
 8001e44:	4f67      	ldr	r7, [pc, #412]	@ (8001fe4 <MX_GPIO_Init+0x1c4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e46:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8001e4a:	e9cd 4408 	strd	r4, r4, [sp, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e50:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001e54:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e58:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8001e5c:	9200      	str	r2, [sp, #0]
 8001e5e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e62:	430a      	orrs	r2, r1
 8001e64:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e68:	400a      	ands	r2, r1
 8001e6a:	9201      	str	r2, [sp, #4]
 8001e6c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e70:	f042 0201 	orr.w	r2, r2, #1
 8001e74:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e78:	f002 0201 	and.w	r2, r2, #1
 8001e7c:	9202      	str	r2, [sp, #8]
 8001e7e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e82:	f042 0202 	orr.w	r2, r2, #2
 8001e86:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e8a:	f002 0202 	and.w	r2, r2, #2
 8001e8e:	9203      	str	r2, [sp, #12]
 8001e90:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e94:	f042 0210 	orr.w	r2, r2, #16
 8001e98:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e9c:	f002 0210 	and.w	r2, r2, #16
 8001ea0:	9204      	str	r2, [sp, #16]
 8001ea2:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ea4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ea6:	f042 0208 	orr.w	r2, r2, #8
 8001eaa:	631a      	str	r2, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(ENABLE_R_GPIO_Port, ENABLE_R_Pin, GPIO_PIN_RESET);
 8001eac:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb0:	f003 0308 	and.w	r3, r3, #8
 8001eb4:	9305      	str	r3, [sp, #20]
 8001eb6:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(ENABLE_R_GPIO_Port, ENABLE_R_Pin, GPIO_PIN_RESET);
 8001eb8:	f001 ff66 	bl	8003d88 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENABLE_L_GPIO_Port, ENABLE_L_Pin, GPIO_PIN_RESET);
 8001ebc:	4622      	mov	r2, r4
 8001ebe:	4648      	mov	r0, r9
 8001ec0:	2180      	movs	r1, #128	@ 0x80
 8001ec2:	f001 ff61 	bl	8003d88 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LED_LEFT_Pin|LED_RIGHT_Pin|LED_ERR_Pin, GPIO_PIN_RESET);
 8001ec6:	4622      	mov	r2, r4
 8001ec8:	4628      	mov	r0, r5
 8001eca:	2170      	movs	r1, #112	@ 0x70
 8001ecc:	f001 ff5c 	bl	8003d88 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SC_det_Pin;
 8001ed0:	2210      	movs	r2, #16
 8001ed2:	2300      	movs	r3, #0
  HAL_GPIO_Init(SC_det_GPIO_Port, &GPIO_InitStruct);
 8001ed4:	a906      	add	r1, sp, #24
 8001ed6:	4658      	mov	r0, fp
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = SC_det_Pin;
 8001eda:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(SC_det_GPIO_Port, &GPIO_InitStruct);
 8001ede:	f001 fe13 	bl	8003b08 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ENABLE_R_Pin;
 8001ee2:	2304      	movs	r3, #4
  HAL_GPIO_Init(ENABLE_R_GPIO_Port, &GPIO_InitStruct);
 8001ee4:	a906      	add	r1, sp, #24
 8001ee6:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = ENABLE_R_Pin;
 8001ee8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eea:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	e9cd 6407 	strd	r6, r4, [sp, #28]
  HAL_GPIO_Init(ENABLE_R_GPIO_Port, &GPIO_InitStruct);
 8001ef0:	f001 fe0a 	bl	8003b08 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ENABLE_L_Pin;
 8001ef4:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(ENABLE_L_GPIO_Port, &GPIO_InitStruct);
 8001ef6:	a906      	add	r1, sp, #24
 8001ef8:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = ENABLE_L_Pin;
 8001efa:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efc:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	e9cd 6407 	strd	r6, r4, [sp, #28]
  HAL_GPIO_Init(ENABLE_L_GPIO_Port, &GPIO_InitStruct);
 8001f02:	f001 fe01 	bl	8003b08 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = WRN_L_Pin|WRN_R_Pin;
 8001f06:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8001f0a:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f0c:	4648      	mov	r0, r9
 8001f0e:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = WRN_L_Pin|WRN_R_Pin;
 8001f12:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f16:	f001 fdf7 	bl	8003b08 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Z_R_Pin;
 8001f1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f1e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
  HAL_GPIO_Init(Z_R_GPIO_Port, &GPIO_InitStruct);
 8001f22:	4640      	mov	r0, r8
 8001f24:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = Z_R_Pin;
 8001f28:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(Z_R_GPIO_Port, &GPIO_InitStruct);
 8001f2c:	f001 fdec 	bl	8003b08 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Z_L_Pin;
 8001f30:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001f34:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
  HAL_GPIO_Init(Z_L_GPIO_Port, &GPIO_InitStruct);
 8001f38:	a906      	add	r1, sp, #24
 8001f3a:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = Z_L_Pin;
 8001f3e:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(Z_L_GPIO_Port, &GPIO_InitStruct);
 8001f42:	f001 fde1 	bl	8003b08 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TRIP_R_Pin;
 8001f46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f4a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
  HAL_GPIO_Init(TRIP_R_GPIO_Port, &GPIO_InitStruct);
 8001f4e:	4658      	mov	r0, fp
 8001f50:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = TRIP_R_Pin;
 8001f54:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(TRIP_R_GPIO_Port, &GPIO_InitStruct);
 8001f58:	f001 fdd6 	bl	8003b08 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TRIP_L_Pin;
 8001f5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f60:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
  HAL_GPIO_Init(TRIP_L_GPIO_Port, &GPIO_InitStruct);
 8001f64:	a906      	add	r1, sp, #24
 8001f66:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = TRIP_L_Pin;
 8001f6a:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(TRIP_L_GPIO_Port, &GPIO_InitStruct);
 8001f6e:	f001 fdcb 	bl	8003b08 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f76:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f78:	a906      	add	r1, sp, #24
 8001f7a:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f7e:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f82:	f001 fdc1 	bl	8003b08 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001f86:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001f8a:	2103      	movs	r1, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8c:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001f8e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001f90:	230a      	movs	r3, #10
 8001f92:	e9cd 1309 	strd	r1, r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f96:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	e9cd a407 	strd	sl, r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9c:	f001 fdb4 	bl	8003b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIR_Pin;
 8001fa0:	2208      	movs	r2, #8
 8001fa2:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 8001fa4:	a906      	add	r1, sp, #24
 8001fa6:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa8:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = DIR_Pin;
 8001faa:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 8001fae:	f001 fdab 	bl	8003b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LED_LEFT_Pin|LED_RIGHT_Pin;
 8001fb2:	2330      	movs	r3, #48	@ 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fb4:	a906      	add	r1, sp, #24
 8001fb6:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = LED_LEFT_Pin|LED_RIGHT_Pin;
 8001fb8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fba:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbc:	e9cd 6407 	strd	r6, r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fc0:	f001 fda2 	bl	8003b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_ERR_Pin;
 8001fc4:	2340      	movs	r3, #64	@ 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_ERR_GPIO_Port, &GPIO_InitStruct);
 8001fc6:	a906      	add	r1, sp, #24
 8001fc8:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fca:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Pin = LED_ERR_Pin;
 8001fcc:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fce:	e9cd a408 	strd	sl, r4, [sp, #32]
  HAL_GPIO_Init(LED_ERR_GPIO_Port, &GPIO_InitStruct);
 8001fd2:	f001 fd99 	bl	8003b08 <HAL_GPIO_Init>

}
 8001fd6:	b00d      	add	sp, #52	@ 0x34
 8001fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40020c00 	.word	0x40020c00
 8001fe4:	40020000 	.word	0x40020000
 8001fe8:	40020400 	.word	0x40020400
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40020800 	.word	0x40020800

08001ff4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001ff4:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ff6:	4817      	ldr	r0, [pc, #92]	@ (8002054 <MX_I2C1_Init+0x60>)
  hi2c1.Init.Timing = 0x20404768;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	4917      	ldr	r1, [pc, #92]	@ (8002058 <MX_I2C1_Init+0x64>)
 8001ffc:	2401      	movs	r4, #1
 8001ffe:	4a17      	ldr	r2, [pc, #92]	@ (800205c <MX_I2C1_Init+0x68>)
 8002000:	6203      	str	r3, [r0, #32]
 8002002:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}
 8002006:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800200a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800200e:	f001 febf 	bl	8003d90 <HAL_I2C_Init>
 8002012:	b950      	cbnz	r0, 800202a <MX_I2C1_Init+0x36>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002014:	2100      	movs	r1, #0
 8002016:	480f      	ldr	r0, [pc, #60]	@ (8002054 <MX_I2C1_Init+0x60>)
 8002018:	f001 ff10 	bl	8003e3c <HAL_I2CEx_ConfigAnalogFilter>
 800201c:	b968      	cbnz	r0, 800203a <MX_I2C1_Init+0x46>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800201e:	2100      	movs	r1, #0
 8002020:	480c      	ldr	r0, [pc, #48]	@ (8002054 <MX_I2C1_Init+0x60>)
 8002022:	f001 ff35 	bl	8003e90 <HAL_I2CEx_ConfigDigitalFilter>
 8002026:	b980      	cbnz	r0, 800204a <MX_I2C1_Init+0x56>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002028:	bd10      	pop	{r4, pc}
    Error_Handler();
 800202a:	f000 f933 	bl	8002294 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800202e:	2100      	movs	r1, #0
 8002030:	4808      	ldr	r0, [pc, #32]	@ (8002054 <MX_I2C1_Init+0x60>)
 8002032:	f001 ff03 	bl	8003e3c <HAL_I2CEx_ConfigAnalogFilter>
 8002036:	2800      	cmp	r0, #0
 8002038:	d0f1      	beq.n	800201e <MX_I2C1_Init+0x2a>
    Error_Handler();
 800203a:	f000 f92b 	bl	8002294 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800203e:	2100      	movs	r1, #0
 8002040:	4804      	ldr	r0, [pc, #16]	@ (8002054 <MX_I2C1_Init+0x60>)
 8002042:	f001 ff25 	bl	8003e90 <HAL_I2CEx_ConfigDigitalFilter>
 8002046:	2800      	cmp	r0, #0
 8002048:	d0ee      	beq.n	8002028 <MX_I2C1_Init+0x34>
}
 800204a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800204e:	f000 b921 	b.w	8002294 <Error_Handler>
 8002052:	bf00      	nop
 8002054:	20000720 	.word	0x20000720
 8002058:	40005400 	.word	0x40005400
 800205c:	20404768 	.word	0x20404768

08002060 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002060:	b510      	push	{r4, lr}
 8002062:	b0ac      	sub	sp, #176	@ 0xb0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002064:	2100      	movs	r1, #0
{
 8002066:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002068:	2290      	movs	r2, #144	@ 0x90
 800206a:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206c:	9106      	str	r1, [sp, #24]
 800206e:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8002072:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002076:	f003 fd39 	bl	8005aec <memset>
  if(i2cHandle->Instance==I2C1)
 800207a:	4b1b      	ldr	r3, [pc, #108]	@ (80020e8 <HAL_I2C_MspInit+0x88>)
 800207c:	6822      	ldr	r2, [r4, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	d001      	beq.n	8002086 <HAL_I2C_MspInit+0x26>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002082:	b02c      	add	sp, #176	@ 0xb0
 8002084:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002086:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800208a:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800208c:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800208e:	f002 fa2f 	bl	80044f0 <HAL_RCCEx_PeriphCLKConfig>
 8002092:	bb10      	cbnz	r0, 80020da <HAL_I2C_MspInit+0x7a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002094:	4c15      	ldr	r4, [pc, #84]	@ (80020ec <HAL_I2C_MspInit+0x8c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002096:	2204      	movs	r2, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002098:	a902      	add	r1, sp, #8
 800209a:	4815      	ldr	r0, [pc, #84]	@ (80020f0 <HAL_I2C_MspInit+0x90>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800209c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800209e:	f043 0302 	orr.w	r3, r3, #2
 80020a2:	6323      	str	r3, [r4, #48]	@ 0x30
 80020a4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020a6:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020a8:	2200      	movs	r2, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020aa:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020ae:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 80020e0 <HAL_I2C_MspInit+0x80>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020b6:	2303      	movs	r3, #3
 80020b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80020bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c0:	f001 fd22 	bl	8003b08 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80020c6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80020ca:	6423      	str	r3, [r4, #64]	@ 0x40
 80020cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80020ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020d2:	9301      	str	r3, [sp, #4]
 80020d4:	9b01      	ldr	r3, [sp, #4]
}
 80020d6:	b02c      	add	sp, #176	@ 0xb0
 80020d8:	bd10      	pop	{r4, pc}
      Error_Handler();
 80020da:	f000 f8db 	bl	8002294 <Error_Handler>
 80020de:	e7d9      	b.n	8002094 <HAL_I2C_MspInit+0x34>
 80020e0:	000000c0 	.word	0x000000c0
 80020e4:	00000012 	.word	0x00000012
 80020e8:	40005400 	.word	0x40005400
 80020ec:	40023800 	.word	0x40023800
 80020f0:	40020400 	.word	0x40020400

080020f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020f4:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020f6:	2300      	movs	r3, #0
{
 80020f8:	b097      	sub	sp, #92	@ 0x5c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020fa:	4927      	ldr	r1, [pc, #156]	@ (8002198 <SystemClock_Config+0xa4>)
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020fc:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020fe:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLM = 10;
  RCC_OscInitStruct.PLL.PLLN = 216;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 9;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002100:	a808      	add	r0, sp, #32
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002102:	9303      	str	r3, [sp, #12]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002104:	930d      	str	r3, [sp, #52]	@ 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002106:	4a25      	ldr	r2, [pc, #148]	@ (800219c <SystemClock_Config+0xa8>)
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002108:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800210c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002110:	e9cd 3306 	strd	r3, r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002114:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002116:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800211a:	640b      	str	r3, [r1, #64]	@ 0x40
 800211c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800211e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002122:	9301      	str	r3, [sp, #4]
 8002124:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002126:	6813      	ldr	r3, [r2, #0]
 8002128:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800212c:	6013      	str	r3, [r2, #0]
 800212e:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002130:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002132:	940e      	str	r4, [sp, #56]	@ 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002134:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002138:	9414      	str	r4, [sp, #80]	@ 0x50
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800213a:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800213c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002140:	9902      	ldr	r1, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002142:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLM = 10;
 8002146:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800214a:	230a      	movs	r3, #10
 800214c:	e9cd 230f 	strd	r2, r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002150:	23d8      	movs	r3, #216	@ 0xd8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002152:	2202      	movs	r2, #2
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002154:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002156:	2309      	movs	r3, #9
 8002158:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800215c:	f001 fefe 	bl	8003f5c <HAL_RCC_OscConfig>
 8002160:	b108      	cbz	r0, 8002166 <SystemClock_Config+0x72>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002162:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002164:	e7fe      	b.n	8002164 <SystemClock_Config+0x70>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002166:	f001 febf 	bl	8003ee8 <HAL_PWREx_EnableOverDrive>
 800216a:	4603      	mov	r3, r0
 800216c:	b108      	cbz	r0, 8002172 <SystemClock_Config+0x7e>
 800216e:	b672      	cpsid	i
  while (1)
 8002170:	e7fe      	b.n	8002170 <SystemClock_Config+0x7c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002172:	220f      	movs	r2, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002174:	f44f 55a0 	mov.w	r5, #5120	@ 0x1400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002178:	a803      	add	r0, sp, #12
 800217a:	2107      	movs	r1, #7
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800217c:	e9cd 2403 	strd	r2, r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002180:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002184:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002188:	9207      	str	r2, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800218a:	f002 f8dd 	bl	8004348 <HAL_RCC_ClockConfig>
 800218e:	b108      	cbz	r0, 8002194 <SystemClock_Config+0xa0>
 8002190:	b672      	cpsid	i
  while (1)
 8002192:	e7fe      	b.n	8002192 <SystemClock_Config+0x9e>
}
 8002194:	b017      	add	sp, #92	@ 0x5c
 8002196:	bd30      	pop	{r4, r5, pc}
 8002198:	40023800 	.word	0x40023800
 800219c:	40007000 	.word	0x40007000

080021a0 <main>:
{
 80021a0:	b500      	push	{lr}
 80021a2:	b085      	sub	sp, #20
	  eval_inv_FSM(&inverter_left);
 80021a4:	4d29      	ldr	r5, [pc, #164]	@ (800224c <main+0xac>)
  HAL_Init();
 80021a6:	f000 fc7f 	bl	8002aa8 <HAL_Init>
	  eval_inv_FSM(&inverter_right);
 80021aa:	4c29      	ldr	r4, [pc, #164]	@ (8002250 <main+0xb0>)
  SystemClock_Config();
 80021ac:	f7ff ffa2 	bl	80020f4 <SystemClock_Config>
  MX_GPIO_Init();
 80021b0:	f7ff fe36 	bl	8001e20 <MX_GPIO_Init>
  MX_DMA_Init();
 80021b4:	f7ff fe0a 	bl	8001dcc <MX_DMA_Init>
  MX_ADC1_Init();
 80021b8:	f7ff fb36 	bl	8001828 <MX_ADC1_Init>
  MX_CAN1_Init();
 80021bc:	f7ff fd42 	bl	8001c44 <MX_CAN1_Init>
  MX_USB_OTG_FS_USB_Init();
 80021c0:	f000 fc22 	bl	8002a08 <MX_USB_OTG_FS_USB_Init>
  MX_ADC2_Init();
 80021c4:	f7ff fb94 	bl	80018f0 <MX_ADC2_Init>
  MX_ADC3_Init();
 80021c8:	f7ff fbf6 	bl	80019b8 <MX_ADC3_Init>
  MX_DAC_Init();
 80021cc:	f7ff fd9c 	bl	8001d08 <MX_DAC_Init>
  MX_I2C1_Init();
 80021d0:	f7ff ff10 	bl	8001ff4 <MX_I2C1_Init>
  MX_TIM1_Init();
 80021d4:	f000 fac8 	bl	8002768 <MX_TIM1_Init>
  MX_TIM8_Init();
 80021d8:	f000 fb72 	bl	80028c0 <MX_TIM8_Init>
  MX_TIM2_Init();
 80021dc:	f000 f8cc 	bl	8002378 <MX_TIM2_Init>
  MX_TIM4_Init();
 80021e0:	f000 f910 	bl	8002404 <MX_TIM4_Init>
  MX_TIM6_Init();
 80021e4:	f000 f956 	bl	8002494 <MX_TIM6_Init>
  HAL_ADC_Start_DMA(&hadc3, (uint32_t *) rawADC_temp,4); // Starts ADC DMA for temperatures
 80021e8:	2204      	movs	r2, #4
 80021ea:	491a      	ldr	r1, [pc, #104]	@ (8002254 <main+0xb4>)
 80021ec:	481a      	ldr	r0, [pc, #104]	@ (8002258 <main+0xb8>)
 80021ee:	f000 fd39 	bl	8002c64 <HAL_ADC_Start_DMA>
  initialize_inverter(&inverter_left, &led_left, ENABLE_L_GPIO_Port, ENABLE_L_Pin, &htim1, &hadc2, &motor_left, rawADC_left);
 80021f2:	4a1a      	ldr	r2, [pc, #104]	@ (800225c <main+0xbc>)
 80021f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002260 <main+0xc0>)
 80021f6:	481b      	ldr	r0, [pc, #108]	@ (8002264 <main+0xc4>)
 80021f8:	491b      	ldr	r1, [pc, #108]	@ (8002268 <main+0xc8>)
 80021fa:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80021fe:	e9cd 1000 	strd	r1, r0, [sp]
 8002202:	2380      	movs	r3, #128	@ 0x80
 8002204:	4a19      	ldr	r2, [pc, #100]	@ (800226c <main+0xcc>)
 8002206:	491a      	ldr	r1, [pc, #104]	@ (8002270 <main+0xd0>)
 8002208:	4628      	mov	r0, r5
 800220a:	f7fe fd95 	bl	8000d38 <initialize_inverter>
  initialize_inverter(&inverter_right, &led_right, ENABLE_R_GPIO_Port, ENABLE_R_Pin, &htim8, &hadc1, &motor_right, rawADC_right);
 800220e:	4a19      	ldr	r2, [pc, #100]	@ (8002274 <main+0xd4>)
 8002210:	4b19      	ldr	r3, [pc, #100]	@ (8002278 <main+0xd8>)
 8002212:	481a      	ldr	r0, [pc, #104]	@ (800227c <main+0xdc>)
 8002214:	491a      	ldr	r1, [pc, #104]	@ (8002280 <main+0xe0>)
 8002216:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800221a:	e9cd 1000 	strd	r1, r0, [sp]
 800221e:	2304      	movs	r3, #4
 8002220:	4918      	ldr	r1, [pc, #96]	@ (8002284 <main+0xe4>)
 8002222:	4a19      	ldr	r2, [pc, #100]	@ (8002288 <main+0xe8>)
 8002224:	480a      	ldr	r0, [pc, #40]	@ (8002250 <main+0xb0>)
 8002226:	f7fe fd87 	bl	8000d38 <initialize_inverter>
  HAL_TIM_Base_Start_IT(&htim6);
 800222a:	4818      	ldr	r0, [pc, #96]	@ (800228c <main+0xec>)
 800222c:	f002 fcb0 	bl	8004b90 <HAL_TIM_Base_Start_IT>
  HAL_CAN_Start(&hcan1);
 8002230:	4817      	ldr	r0, [pc, #92]	@ (8002290 <main+0xf0>)
 8002232:	f000 ff47 	bl	80030c4 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002236:	2102      	movs	r1, #2
 8002238:	4815      	ldr	r0, [pc, #84]	@ (8002290 <main+0xf0>)
 800223a:	f001 f841 	bl	80032c0 <HAL_CAN_ActivateNotification>
	  eval_inv_FSM(&inverter_left);
 800223e:	4628      	mov	r0, r5
 8002240:	f7fe fd08 	bl	8000c54 <eval_inv_FSM>
	  eval_inv_FSM(&inverter_right);
 8002244:	4620      	mov	r0, r4
 8002246:	f7fe fd05 	bl	8000c54 <eval_inv_FSM>
  while (1)
 800224a:	e7f8      	b.n	800223e <main+0x9e>
 800224c:	20000350 	.word	0x20000350
 8002250:	200001e8 	.word	0x200001e8
 8002254:	200004b8 	.word	0x200004b8
 8002258:	20000608 	.word	0x20000608
 800225c:	200004c8 	.word	0x200004c8
 8002260:	200000b0 	.word	0x200000b0
 8002264:	20000650 	.word	0x20000650
 8002268:	200008b8 	.word	0x200008b8
 800226c:	40021000 	.word	0x40021000
 8002270:	2000013c 	.word	0x2000013c
 8002274:	200004c0 	.word	0x200004c0
 8002278:	20000034 	.word	0x20000034
 800227c:	20000698 	.word	0x20000698
 8002280:	20000778 	.word	0x20000778
 8002284:	20000134 	.word	0x20000134
 8002288:	40020400 	.word	0x40020400
 800228c:	200007c8 	.word	0x200007c8
 8002290:	200006e0 	.word	0x200006e0

08002294 <Error_Handler>:
 8002294:	b672      	cpsid	i
  while (1)
 8002296:	e7fe      	b.n	8002296 <Error_Handler+0x2>

08002298 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002298:	4b0a      	ldr	r3, [pc, #40]	@ (80022c4 <HAL_MspInit+0x2c>)
{
 800229a:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 800229c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800229e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80022a2:	641a      	str	r2, [r3, #64]	@ 0x40
 80022a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022a6:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80022aa:	9200      	str	r2, [sp, #0]
 80022ac:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80022b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80022b4:	645a      	str	r2, [r3, #68]	@ 0x44
 80022b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022bc:	9301      	str	r3, [sp, #4]
 80022be:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022c0:	b002      	add	sp, #8
 80022c2:	4770      	bx	lr
 80022c4:	40023800 	.word	0x40023800

080022c8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022c8:	e7fe      	b.n	80022c8 <NMI_Handler>
 80022ca:	bf00      	nop

080022cc <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022cc:	e7fe      	b.n	80022cc <HardFault_Handler>
 80022ce:	bf00      	nop

080022d0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022d0:	e7fe      	b.n	80022d0 <MemManage_Handler>
 80022d2:	bf00      	nop

080022d4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022d4:	e7fe      	b.n	80022d4 <BusFault_Handler>
 80022d6:	bf00      	nop

080022d8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022d8:	e7fe      	b.n	80022d8 <UsageFault_Handler>
 80022da:	bf00      	nop

080022dc <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop

080022e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop

080022e4 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop

080022e8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022e8:	f000 bbea 	b.w	8002ac0 <HAL_IncTick>

080022ec <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80022ec:	b510      	push	{r4, lr}
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80022ee:	4c04      	ldr	r4, [pc, #16]	@ (8002300 <CAN1_RX0_IRQHandler+0x14>)
 80022f0:	4620      	mov	r0, r4
 80022f2:	f001 f811 	bl	8003318 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  handle_CAN(&hcan1);
 80022f6:	4620      	mov	r0, r4
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80022f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  handle_CAN(&hcan1);
 80022fc:	f7fe bb34 	b.w	8000968 <handle_CAN>
 8002300:	200006e0 	.word	0x200006e0

08002304 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002304:	4801      	ldr	r0, [pc, #4]	@ (800230c <TIM1_UP_TIM10_IRQHandler+0x8>)
 8002306:	f003 ba93 	b.w	8005830 <HAL_TIM_IRQHandler>
 800230a:	bf00      	nop
 800230c:	200008b8 	.word	0x200008b8

08002310 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002310:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8002312:	4805      	ldr	r0, [pc, #20]	@ (8002328 <TIM6_DAC_IRQHandler+0x18>)
 8002314:	f001 f9e8 	bl	80036e8 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8002318:	4804      	ldr	r0, [pc, #16]	@ (800232c <TIM6_DAC_IRQHandler+0x1c>)
 800231a:	f003 fa89 	bl	8005830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  tasks_1ms();
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800231e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  tasks_1ms();
 8002322:	f7ff b961 	b.w	80015e8 <tasks_1ms>
 8002326:	bf00      	nop
 8002328:	20000708 	.word	0x20000708
 800232c:	200007c8 	.word	0x200007c8

08002330 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002330:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002332:	4803      	ldr	r0, [pc, #12]	@ (8002340 <DMA2_Stream0_IRQHandler+0x10>)
 8002334:	f001 fb14 	bl	8003960 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  tasks_critical_right();

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002338:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  tasks_critical_right();
 800233c:	f7ff ba72 	b.w	8001824 <tasks_critical_right>
 8002340:	200005a4 	.word	0x200005a4

08002344 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002344:	4801      	ldr	r0, [pc, #4]	@ (800234c <DMA2_Stream1_IRQHandler+0x8>)
 8002346:	f001 bb0b 	b.w	8003960 <HAL_DMA_IRQHandler>
 800234a:	bf00      	nop
 800234c:	200004e4 	.word	0x200004e4

08002350 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002350:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002352:	4803      	ldr	r0, [pc, #12]	@ (8002360 <DMA2_Stream2_IRQHandler+0x10>)
 8002354:	f001 fb04 	bl	8003960 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */
  tasks_critical_left();

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002358:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  tasks_critical_left();
 800235c:	f7ff b9f0 	b.w	8001740 <tasks_critical_left>
 8002360:	20000544 	.word	0x20000544

08002364 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002364:	4a03      	ldr	r2, [pc, #12]	@ (8002374 <SystemInit+0x10>)
 8002366:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800236a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800236e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002372:	4770      	bx	lr
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <MX_TIM2_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002378:	b500      	push	{lr}

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800237a:	2300      	movs	r3, #0
{
 800237c:	b089      	sub	sp, #36	@ 0x24
  TIM_IC_InitTypeDef sConfigIC = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800237e:	4820      	ldr	r0, [pc, #128]	@ (8002400 <MX_TIM2_Init+0x88>)
 8002380:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
  htim2.Init.Prescaler = 0;
 8002384:	f04f 32ff 	mov.w	r2, #4294967295
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002388:	9301      	str	r3, [sp, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800238a:	9304      	str	r3, [sp, #16]
  htim2.Init.Prescaler = 0;
 800238c:	6103      	str	r3, [r0, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 4294967295;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800238e:	6183      	str	r3, [r0, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002390:	9307      	str	r3, [sp, #28]
  htim2.Init.Prescaler = 0;
 8002392:	e9c0 1300 	strd	r1, r3, [r0]
 8002396:	e9c0 3202 	strd	r3, r2, [r0, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800239a:	e9cd 3302 	strd	r3, r3, [sp, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800239e:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80023a2:	f002 fd77 	bl	8004e94 <HAL_TIM_IC_Init>
 80023a6:	b9e8      	cbnz	r0, 80023e4 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023a8:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023aa:	a901      	add	r1, sp, #4
 80023ac:	4814      	ldr	r0, [pc, #80]	@ (8002400 <MX_TIM2_Init+0x88>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023ae:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023b0:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023b2:	f003 faf5 	bl	80059a0 <HAL_TIMEx_MasterConfigSynchronization>
 80023b6:	bb00      	cbnz	r0, 80023fa <MX_TIM2_Init+0x82>
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80023b8:	2000      	movs	r0, #0
 80023ba:	2101      	movs	r1, #1
 80023bc:	2200      	movs	r2, #0
 80023be:	2300      	movs	r3, #0
 80023c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80023c4:	a904      	add	r1, sp, #16
 80023c6:	480e      	ldr	r0, [pc, #56]	@ (8002400 <MX_TIM2_Init+0x88>)
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80023c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80023cc:	f002 ff28 	bl	8005220 <HAL_TIM_IC_ConfigChannel>
 80023d0:	b980      	cbnz	r0, 80023f4 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80023d2:	2208      	movs	r2, #8
 80023d4:	a904      	add	r1, sp, #16
 80023d6:	480a      	ldr	r0, [pc, #40]	@ (8002400 <MX_TIM2_Init+0x88>)
 80023d8:	f002 ff22 	bl	8005220 <HAL_TIM_IC_ConfigChannel>
 80023dc:	b928      	cbnz	r0, 80023ea <MX_TIM2_Init+0x72>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80023de:	b009      	add	sp, #36	@ 0x24
 80023e0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80023e4:	f7ff ff56 	bl	8002294 <Error_Handler>
 80023e8:	e7de      	b.n	80023a8 <MX_TIM2_Init+0x30>
    Error_Handler();
 80023ea:	f7ff ff53 	bl	8002294 <Error_Handler>
}
 80023ee:	b009      	add	sp, #36	@ 0x24
 80023f0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80023f4:	f7ff ff4e 	bl	8002294 <Error_Handler>
 80023f8:	e7eb      	b.n	80023d2 <MX_TIM2_Init+0x5a>
    Error_Handler();
 80023fa:	f7ff ff4b 	bl	8002294 <Error_Handler>
 80023fe:	e7db      	b.n	80023b8 <MX_TIM2_Init+0x40>
 8002400:	20000868 	.word	0x20000868

08002404 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002404:	b500      	push	{lr}

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002406:	2300      	movs	r3, #0
{
 8002408:	b089      	sub	sp, #36	@ 0x24
  TIM_IC_InitTypeDef sConfigIC = {0};

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800240a:	4820      	ldr	r0, [pc, #128]	@ (800248c <MX_TIM4_Init+0x88>)
  htim4.Init.Prescaler = 0;
 800240c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
  htim4.Instance = TIM4;
 8002410:	491f      	ldr	r1, [pc, #124]	@ (8002490 <MX_TIM4_Init+0x8c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002412:	9301      	str	r3, [sp, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002414:	9304      	str	r3, [sp, #16]
  htim4.Init.Prescaler = 0;
 8002416:	6103      	str	r3, [r0, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 65535;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002418:	6183      	str	r3, [r0, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800241a:	9307      	str	r3, [sp, #28]
  htim4.Init.Prescaler = 0;
 800241c:	e9c0 1300 	strd	r1, r3, [r0]
 8002420:	e9c0 3202 	strd	r3, r2, [r0, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002424:	e9cd 3302 	strd	r3, r3, [sp, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002428:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800242c:	f002 fd32 	bl	8004e94 <HAL_TIM_IC_Init>
 8002430:	b9e8      	cbnz	r0, 800246e <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002432:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002434:	a901      	add	r1, sp, #4
 8002436:	4815      	ldr	r0, [pc, #84]	@ (800248c <MX_TIM4_Init+0x88>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002438:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800243a:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800243c:	f003 fab0 	bl	80059a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002440:	bb00      	cbnz	r0, 8002484 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002442:	2000      	movs	r0, #0
 8002444:	2101      	movs	r1, #1
 8002446:	2200      	movs	r2, #0
 8002448:	2300      	movs	r3, #0
 800244a:	e9cd 0104 	strd	r0, r1, [sp, #16]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800244e:	a904      	add	r1, sp, #16
 8002450:	480e      	ldr	r0, [pc, #56]	@ (800248c <MX_TIM4_Init+0x88>)
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002452:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002456:	f002 fee3 	bl	8005220 <HAL_TIM_IC_ConfigChannel>
 800245a:	b980      	cbnz	r0, 800247e <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800245c:	2208      	movs	r2, #8
 800245e:	a904      	add	r1, sp, #16
 8002460:	480a      	ldr	r0, [pc, #40]	@ (800248c <MX_TIM4_Init+0x88>)
 8002462:	f002 fedd 	bl	8005220 <HAL_TIM_IC_ConfigChannel>
 8002466:	b928      	cbnz	r0, 8002474 <MX_TIM4_Init+0x70>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002468:	b009      	add	sp, #36	@ 0x24
 800246a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800246e:	f7ff ff11 	bl	8002294 <Error_Handler>
 8002472:	e7de      	b.n	8002432 <MX_TIM4_Init+0x2e>
    Error_Handler();
 8002474:	f7ff ff0e 	bl	8002294 <Error_Handler>
}
 8002478:	b009      	add	sp, #36	@ 0x24
 800247a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800247e:	f7ff ff09 	bl	8002294 <Error_Handler>
 8002482:	e7eb      	b.n	800245c <MX_TIM4_Init+0x58>
    Error_Handler();
 8002484:	f7ff ff06 	bl	8002294 <Error_Handler>
 8002488:	e7db      	b.n	8002442 <MX_TIM4_Init+0x3e>
 800248a:	bf00      	nop
 800248c:	20000818 	.word	0x20000818
 8002490:	40000800 	.word	0x40000800

08002494 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002494:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002496:	4812      	ldr	r0, [pc, #72]	@ (80024e0 <MX_TIM6_Init+0x4c>)
  htim6.Init.Prescaler = 1;
 8002498:	2201      	movs	r2, #1
  htim6.Instance = TIM6;
 800249a:	4c12      	ldr	r4, [pc, #72]	@ (80024e4 <MX_TIM6_Init+0x50>)
{
 800249c:	b084      	sub	sp, #16
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800249e:	2300      	movs	r3, #0
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 53999;
 80024a0:	f24d 21ef 	movw	r1, #53999	@ 0xd2ef
  htim6.Init.Prescaler = 1;
 80024a4:	e9c0 4200 	strd	r4, r2, [r0]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80024a8:	2280      	movs	r2, #128	@ 0x80
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024aa:	9301      	str	r3, [sp, #4]
  htim6.Init.Period = 53999;
 80024ac:	e9c0 3102 	strd	r3, r1, [r0, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80024b0:	6182      	str	r2, [r0, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80024b6:	f002 fad5 	bl	8004a64 <HAL_TIM_Base_Init>
 80024ba:	b950      	cbnz	r0, 80024d2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80024bc:	2220      	movs	r2, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024be:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80024c0:	a901      	add	r1, sp, #4
 80024c2:	4807      	ldr	r0, [pc, #28]	@ (80024e0 <MX_TIM6_Init+0x4c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80024c4:	9201      	str	r2, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024c6:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80024c8:	f003 fa6a 	bl	80059a0 <HAL_TIMEx_MasterConfigSynchronization>
 80024cc:	b920      	cbnz	r0, 80024d8 <MX_TIM6_Init+0x44>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80024ce:	b004      	add	sp, #16
 80024d0:	bd10      	pop	{r4, pc}
    Error_Handler();
 80024d2:	f7ff fedf 	bl	8002294 <Error_Handler>
 80024d6:	e7f1      	b.n	80024bc <MX_TIM6_Init+0x28>
    Error_Handler();
 80024d8:	f7ff fedc 	bl	8002294 <Error_Handler>
}
 80024dc:	b004      	add	sp, #16
 80024de:	bd10      	pop	{r4, pc}
 80024e0:	200007c8 	.word	0x200007c8
 80024e4:	40001000 	.word	0x40001000

080024e8 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 80024e8:	4a21      	ldr	r2, [pc, #132]	@ (8002570 <HAL_TIM_Base_MspInit+0x88>)
 80024ea:	6803      	ldr	r3, [r0, #0]
 80024ec:	4293      	cmp	r3, r2
{
 80024ee:	b510      	push	{r4, lr}
 80024f0:	b084      	sub	sp, #16
  if(tim_baseHandle->Instance==TIM1)
 80024f2:	d013      	beq.n	800251c <HAL_TIM_Base_MspInit+0x34>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM6)
 80024f4:	4a1f      	ldr	r2, [pc, #124]	@ (8002574 <HAL_TIM_Base_MspInit+0x8c>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d025      	beq.n	8002546 <HAL_TIM_Base_MspInit+0x5e>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM8)
 80024fa:	4a1f      	ldr	r2, [pc, #124]	@ (8002578 <HAL_TIM_Base_MspInit+0x90>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d001      	beq.n	8002504 <HAL_TIM_Base_MspInit+0x1c>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002500:	b004      	add	sp, #16
 8002502:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002504:	4b1d      	ldr	r3, [pc, #116]	@ (800257c <HAL_TIM_Base_MspInit+0x94>)
 8002506:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002508:	f042 0202 	orr.w	r2, r2, #2
 800250c:	645a      	str	r2, [r3, #68]	@ 0x44
 800250e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	9303      	str	r3, [sp, #12]
 8002516:	9b03      	ldr	r3, [sp, #12]
}
 8002518:	b004      	add	sp, #16
 800251a:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 800251c:	4b17      	ldr	r3, [pc, #92]	@ (800257c <HAL_TIM_Base_MspInit+0x94>)
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800251e:	2200      	movs	r2, #0
 8002520:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002522:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002524:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002526:	f044 0401 	orr.w	r4, r4, #1
 800252a:	645c      	str	r4, [r3, #68]	@ 0x44
 800252c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	9301      	str	r3, [sp, #4]
 8002534:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002536:	f001 f85f 	bl	80035f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800253a:	2019      	movs	r0, #25
}
 800253c:	b004      	add	sp, #16
 800253e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002542:	f001 b895 	b.w	8003670 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002546:	4b0d      	ldr	r3, [pc, #52]	@ (800257c <HAL_TIM_Base_MspInit+0x94>)
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002548:	2200      	movs	r2, #0
 800254a:	2036      	movs	r0, #54	@ 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 800254c:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800254e:	4611      	mov	r1, r2
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002550:	f044 0410 	orr.w	r4, r4, #16
 8002554:	641c      	str	r4, [r3, #64]	@ 0x40
 8002556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002558:	f003 0310 	and.w	r3, r3, #16
 800255c:	9302      	str	r3, [sp, #8]
 800255e:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002560:	f001 f84a 	bl	80035f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002564:	2036      	movs	r0, #54	@ 0x36
}
 8002566:	b004      	add	sp, #16
 8002568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800256c:	f001 b880 	b.w	8003670 <HAL_NVIC_EnableIRQ>
 8002570:	40010000 	.word	0x40010000
 8002574:	40001000 	.word	0x40001000
 8002578:	40010400 	.word	0x40010400
 800257c:	40023800 	.word	0x40023800

08002580 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(tim_icHandle->Instance==TIM2)
 8002580:	6803      	ldr	r3, [r0, #0]
{
 8002582:	b530      	push	{r4, r5, lr}
  if(tim_icHandle->Instance==TIM2)
 8002584:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
{
 8002588:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800258a:	f04f 0400 	mov.w	r4, #0
 800258e:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8002592:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8002596:	940a      	str	r4, [sp, #40]	@ 0x28
  if(tim_icHandle->Instance==TIM2)
 8002598:	d004      	beq.n	80025a4 <HAL_TIM_IC_MspInit+0x24>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_icHandle->Instance==TIM4)
 800259a:	4a2f      	ldr	r2, [pc, #188]	@ (8002658 <HAL_TIM_IC_MspInit+0xd8>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d037      	beq.n	8002610 <HAL_TIM_IC_MspInit+0x90>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80025a0:	b00d      	add	sp, #52	@ 0x34
 80025a2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025a4:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025a8:	2501      	movs	r5, #1
    HAL_GPIO_Init(B_R_GPIO_Port, &GPIO_InitStruct);
 80025aa:	482c      	ldr	r0, [pc, #176]	@ (800265c <HAL_TIM_IC_MspInit+0xdc>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025ae:	f042 0201 	orr.w	r2, r2, #1
 80025b2:	641a      	str	r2, [r3, #64]	@ 0x40
 80025b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025b6:	f002 0201 	and.w	r2, r2, #1
 80025ba:	9201      	str	r2, [sp, #4]
 80025bc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025c0:	f042 0202 	orr.w	r2, r2, #2
 80025c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80025c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025c8:	f002 0202 	and.w	r2, r2, #2
 80025cc:	9202      	str	r2, [sp, #8]
 80025ce:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025d2:	f042 0201 	orr.w	r2, r2, #1
 80025d6:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Pin = B_R_Pin;
 80025d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025de:	950a      	str	r5, [sp, #40]	@ 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = B_R_Pin;
 80025e6:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e8:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(B_R_GPIO_Port, &GPIO_InitStruct);
 80025ea:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = B_R_Pin;
 80025ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(B_R_GPIO_Port, &GPIO_InitStruct);
 80025f0:	f001 fa8a 	bl	8003b08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = A_R_Pin;
 80025f4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f8:	2302      	movs	r3, #2
    HAL_GPIO_Init(A_R_GPIO_Port, &GPIO_InitStruct);
 80025fa:	a906      	add	r1, sp, #24
 80025fc:	4818      	ldr	r0, [pc, #96]	@ (8002660 <HAL_TIM_IC_MspInit+0xe0>)
    GPIO_InitStruct.Pin = A_R_Pin;
 80025fe:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002600:	e9cd 3407 	strd	r3, r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002604:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(A_R_GPIO_Port, &GPIO_InitStruct);
 8002608:	f001 fa7e 	bl	8003b08 <HAL_GPIO_Init>
}
 800260c:	b00d      	add	sp, #52	@ 0x34
 800260e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002610:	4b14      	ldr	r3, [pc, #80]	@ (8002664 <HAL_TIM_IC_MspInit+0xe4>)
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002612:	2402      	movs	r4, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002614:	a906      	add	r1, sp, #24
 8002616:	4814      	ldr	r0, [pc, #80]	@ (8002668 <HAL_TIM_IC_MspInit+0xe8>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002618:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800261a:	f042 0204 	orr.w	r2, r2, #4
 800261e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002620:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002622:	f002 0204 	and.w	r2, r2, #4
 8002626:	9204      	str	r2, [sp, #16]
 8002628:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800262a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800262c:	f042 0208 	orr.w	r2, r2, #8
 8002630:	631a      	str	r2, [r3, #48]	@ 0x30
 8002632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002634:	940a      	str	r4, [sp, #40]	@ 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002636:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = A_L_Pin|B_L_Pin;
 800263a:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 8002650 <HAL_TIM_IC_MspInit+0xd0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800263e:	9305      	str	r3, [sp, #20]
 8002640:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = A_L_Pin|B_L_Pin;
 8002642:	ed8d 7b06 	vstr	d7, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002646:	f001 fa5f 	bl	8003b08 <HAL_GPIO_Init>
}
 800264a:	b00d      	add	sp, #52	@ 0x34
 800264c:	bd30      	pop	{r4, r5, pc}
 800264e:	bf00      	nop
 8002650:	00005000 	.word	0x00005000
 8002654:	00000002 	.word	0x00000002
 8002658:	40000800 	.word	0x40000800
 800265c:	40020400 	.word	0x40020400
 8002660:	40020000 	.word	0x40020000
 8002664:	40023800 	.word	0x40023800
 8002668:	40020c00 	.word	0x40020c00
 800266c:	00000000 	.word	0x00000000

08002670 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM1)
 8002670:	4a35      	ldr	r2, [pc, #212]	@ (8002748 <HAL_TIM_MspPostInit+0xd8>)
 8002672:	6803      	ldr	r3, [r0, #0]
{
 8002674:	b570      	push	{r4, r5, r6, lr}
  if(timHandle->Instance==TIM1)
 8002676:	4293      	cmp	r3, r2
{
 8002678:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267a:	f04f 0400 	mov.w	r4, #0
 800267e:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8002682:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8002686:	9408      	str	r4, [sp, #32]
  if(timHandle->Instance==TIM1)
 8002688:	d004      	beq.n	8002694 <HAL_TIM_MspPostInit+0x24>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM8)
 800268a:	4a30      	ldr	r2, [pc, #192]	@ (800274c <HAL_TIM_MspPostInit+0xdc>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d017      	beq.n	80026c0 <HAL_TIM_MspPostInit+0x50>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002690:	b00a      	add	sp, #40	@ 0x28
 8002692:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002694:	4b2e      	ldr	r3, [pc, #184]	@ (8002750 <HAL_TIM_MspPostInit+0xe0>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002696:	2401      	movs	r4, #1
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002698:	a904      	add	r1, sp, #16
 800269a:	482e      	ldr	r0, [pc, #184]	@ (8002754 <HAL_TIM_MspPostInit+0xe4>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800269c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800269e:	f042 0210 	orr.w	r2, r2, #16
 80026a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80026a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80026a6:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80026a8:	f003 0310 	and.w	r3, r3, #16
    GPIO_InitStruct.Pin = PWM1_L_Pin|PWM2_L_Pin|PWM3_L_Pin|PWM4_L_Pin
 80026ac:	ed9f 7b24 	vldr	d7, [pc, #144]	@ 8002740 <HAL_TIM_MspPostInit+0xd0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = PWM1_L_Pin|PWM2_L_Pin|PWM3_L_Pin|PWM4_L_Pin
 80026b4:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026b8:	f001 fa26 	bl	8003b08 <HAL_GPIO_Init>
}
 80026bc:	b00a      	add	sp, #40	@ 0x28
 80026be:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c0:	4b23      	ldr	r3, [pc, #140]	@ (8002750 <HAL_TIM_MspPostInit+0xe0>)
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80026c2:	2503      	movs	r5, #3
    HAL_GPIO_Init(PWM1_R_GPIO_Port, &GPIO_InitStruct);
 80026c4:	4824      	ldr	r0, [pc, #144]	@ (8002758 <HAL_TIM_MspPostInit+0xe8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c6:	2602      	movs	r6, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026ca:	f042 0201 	orr.w	r2, r2, #1
 80026ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80026d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026d2:	f002 0201 	and.w	r2, r2, #1
 80026d6:	9201      	str	r2, [sp, #4]
 80026d8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026dc:	f042 0202 	orr.w	r2, r2, #2
 80026e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80026e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026e4:	f002 0202 	and.w	r2, r2, #2
 80026e8:	9202      	str	r2, [sp, #8]
 80026ea:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026ee:	f042 0204 	orr.w	r2, r2, #4
 80026f2:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Pin = PWM1_R_Pin;
 80026f4:	2220      	movs	r2, #32
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80026f8:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = PWM1_R_Pin;
 8002700:	2302      	movs	r3, #2
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002702:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(PWM1_R_GPIO_Port, &GPIO_InitStruct);
 8002704:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = PWM1_R_Pin;
 8002706:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(PWM1_R_GPIO_Port, &GPIO_InitStruct);
 800270a:	f001 f9fd 	bl	8003b08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM3_R_Pin|PWM5_R_Pin;
 800270e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002712:	a904      	add	r1, sp, #16
 8002714:	4811      	ldr	r0, [pc, #68]	@ (800275c <HAL_TIM_MspPostInit+0xec>)
    GPIO_InitStruct.Pin = PWM3_R_Pin|PWM5_R_Pin;
 8002716:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002718:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800271a:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271c:	e9cd 6405 	strd	r6, r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002720:	f001 f9f2 	bl	8003b08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM2_R_Pin|PWM4_R_Pin|PWM6_R_Pin;
 8002724:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002728:	a904      	add	r1, sp, #16
 800272a:	480d      	ldr	r0, [pc, #52]	@ (8002760 <HAL_TIM_MspPostInit+0xf0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272c:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Pin = PWM2_R_Pin|PWM4_R_Pin|PWM6_R_Pin;
 800272e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002730:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002732:	e9cd 4406 	strd	r4, r4, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002736:	f001 f9e7 	bl	8003b08 <HAL_GPIO_Init>
}
 800273a:	b00a      	add	sp, #40	@ 0x28
 800273c:	bd70      	pop	{r4, r5, r6, pc}
 800273e:	bf00      	nop
 8002740:	00003f00 	.word	0x00003f00
 8002744:	00000002 	.word	0x00000002
 8002748:	40010000 	.word	0x40010000
 800274c:	40010400 	.word	0x40010400
 8002750:	40023800 	.word	0x40023800
 8002754:	40021000 	.word	0x40021000
 8002758:	40020000 	.word	0x40020000
 800275c:	40020400 	.word	0x40020400
 8002760:	40020800 	.word	0x40020800
 8002764:	00000000 	.word	0x00000000

08002768 <MX_TIM1_Init>:
{
 8002768:	b510      	push	{r4, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800276a:	2400      	movs	r4, #0
{
 800276c:	b09c      	sub	sp, #112	@ 0x70
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800276e:	222c      	movs	r2, #44	@ 0x2c
 8002770:	4621      	mov	r1, r4
 8002772:	a810      	add	r0, sp, #64	@ 0x40
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002774:	9404      	str	r4, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002776:	9400      	str	r4, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002778:	9408      	str	r4, [sp, #32]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800277a:	9407      	str	r4, [sp, #28]
 800277c:	e9cd 4405 	strd	r4, r4, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002780:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002784:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
 8002788:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 800278c:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002790:	f003 f9ac 	bl	8005aec <memset>
  htim1.Instance = TIM1;
 8002794:	4848      	ldr	r0, [pc, #288]	@ (80028b8 <MX_TIM1_Init+0x150>)
  htim1.Init.RepetitionCounter = 1;
 8002796:	2380      	movs	r3, #128	@ 0x80
 8002798:	2201      	movs	r2, #1
  htim1.Init.Prescaler = 0;
 800279a:	6044      	str	r4, [r0, #4]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800279c:	6104      	str	r4, [r0, #16]
  htim1.Init.Period = (216000000*TS)/2;
 800279e:	2420      	movs	r4, #32
  htim1.Init.RepetitionCounter = 1;
 80027a0:	e9c0 2305 	strd	r2, r3, [r0, #20]
  htim1.Instance = TIM1;
 80027a4:	4b45      	ldr	r3, [pc, #276]	@ (80028bc <MX_TIM1_Init+0x154>)
 80027a6:	6003      	str	r3, [r0, #0]
  htim1.Init.Period = (216000000*TS)/2;
 80027a8:	f640 238c 	movw	r3, #2700	@ 0xa8c
 80027ac:	e9c0 4302 	strd	r4, r3, [r0, #8]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80027b0:	f002 f958 	bl	8004a64 <HAL_TIM_Base_Init>
 80027b4:	2800      	cmp	r0, #0
 80027b6:	d15c      	bne.n	8002872 <MX_TIM1_Init+0x10a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80027bc:	a904      	add	r1, sp, #16
 80027be:	483e      	ldr	r0, [pc, #248]	@ (80028b8 <MX_TIM1_Init+0x150>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027c0:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80027c2:	f002 ff81 	bl	80056c8 <HAL_TIM_ConfigClockSource>
 80027c6:	2800      	cmp	r0, #0
 80027c8:	d16c      	bne.n	80028a4 <MX_TIM1_Init+0x13c>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80027ca:	483b      	ldr	r0, [pc, #236]	@ (80028b8 <MX_TIM1_Init+0x150>)
 80027cc:	f002 facc 	bl	8004d68 <HAL_TIM_PWM_Init>
 80027d0:	2800      	cmp	r0, #0
 80027d2:	d164      	bne.n	800289e <MX_TIM1_Init+0x136>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80027d4:	2300      	movs	r3, #0
 80027d6:	2220      	movs	r2, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80027d8:	4669      	mov	r1, sp
 80027da:	4837      	ldr	r0, [pc, #220]	@ (80028b8 <MX_TIM1_Init+0x150>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80027dc:	e9cd 2300 	strd	r2, r3, [sp]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027e0:	2300      	movs	r3, #0
 80027e2:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80027e4:	f003 f8dc 	bl	80059a0 <HAL_TIMEx_MasterConfigSynchronization>
 80027e8:	2800      	cmp	r0, #0
 80027ea:	d155      	bne.n	8002898 <MX_TIM1_Init+0x130>
  sConfigOC.Pulse = 0;
 80027ec:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027ee:	2160      	movs	r1, #96	@ 0x60
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80027f0:	2308      	movs	r3, #8
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027f2:	2000      	movs	r0, #0
  sConfigOC.Pulse = 0;
 80027f4:	e9cd 1208 	strd	r1, r2, [sp, #32]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027f8:	2100      	movs	r1, #0
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80027fa:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 80027fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002802:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002806:	a908      	add	r1, sp, #32
 8002808:	482b      	ldr	r0, [pc, #172]	@ (80028b8 <MX_TIM1_Init+0x150>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 800280a:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800280c:	f002 fddc 	bl	80053c8 <HAL_TIM_PWM_ConfigChannel>
 8002810:	2800      	cmp	r0, #0
 8002812:	d13e      	bne.n	8002892 <MX_TIM1_Init+0x12a>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002814:	2204      	movs	r2, #4
 8002816:	a908      	add	r1, sp, #32
 8002818:	4827      	ldr	r0, [pc, #156]	@ (80028b8 <MX_TIM1_Init+0x150>)
 800281a:	f002 fdd5 	bl	80053c8 <HAL_TIM_PWM_ConfigChannel>
 800281e:	bba8      	cbnz	r0, 800288c <MX_TIM1_Init+0x124>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002820:	2208      	movs	r2, #8
 8002822:	a908      	add	r1, sp, #32
 8002824:	4824      	ldr	r0, [pc, #144]	@ (80028b8 <MX_TIM1_Init+0x150>)
 8002826:	f002 fdcf 	bl	80053c8 <HAL_TIM_PWM_ConfigChannel>
 800282a:	bb60      	cbnz	r0, 8002886 <MX_TIM1_Init+0x11e>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 800282c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8002830:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 8002834:	f44f 7480 	mov.w	r4, #256	@ 0x100
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002838:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800283a:	a910      	add	r1, sp, #64	@ 0x40
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800283c:	931a      	str	r3, [sp, #104]	@ 0x68
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 800283e:	e9cd 0210 	strd	r0, r2, [sp, #64]	@ 0x40
  sBreakDeadTimeConfig.DeadTime = DT*216000000;
 8002842:	2220      	movs	r2, #32
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002844:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002848:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 80028b0 <MX_TIM1_Init+0x148>
  sBreakDeadTimeConfig.DeadTime = DT*216000000;
 800284c:	e9cd 4212 	strd	r4, r2, [sp, #72]	@ 0x48
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8002850:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002854:	e9cd 3014 	strd	r3, r0, [sp, #80]	@ 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002858:	4817      	ldr	r0, [pc, #92]	@ (80028b8 <MX_TIM1_Init+0x150>)
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 800285a:	e9cd 3216 	strd	r3, r2, [sp, #88]	@ 0x58
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800285e:	ed8d 7b18 	vstr	d7, [sp, #96]	@ 0x60
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002862:	f003 f8f7 	bl	8005a54 <HAL_TIMEx_ConfigBreakDeadTime>
 8002866:	b938      	cbnz	r0, 8002878 <MX_TIM1_Init+0x110>
  HAL_TIM_MspPostInit(&htim1);
 8002868:	4813      	ldr	r0, [pc, #76]	@ (80028b8 <MX_TIM1_Init+0x150>)
 800286a:	f7ff ff01 	bl	8002670 <HAL_TIM_MspPostInit>
}
 800286e:	b01c      	add	sp, #112	@ 0x70
 8002870:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002872:	f7ff fd0f 	bl	8002294 <Error_Handler>
 8002876:	e79f      	b.n	80027b8 <MX_TIM1_Init+0x50>
    Error_Handler();
 8002878:	f7ff fd0c 	bl	8002294 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 800287c:	480e      	ldr	r0, [pc, #56]	@ (80028b8 <MX_TIM1_Init+0x150>)
 800287e:	f7ff fef7 	bl	8002670 <HAL_TIM_MspPostInit>
}
 8002882:	b01c      	add	sp, #112	@ 0x70
 8002884:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002886:	f7ff fd05 	bl	8002294 <Error_Handler>
 800288a:	e7cf      	b.n	800282c <MX_TIM1_Init+0xc4>
    Error_Handler();
 800288c:	f7ff fd02 	bl	8002294 <Error_Handler>
 8002890:	e7c6      	b.n	8002820 <MX_TIM1_Init+0xb8>
    Error_Handler();
 8002892:	f7ff fcff 	bl	8002294 <Error_Handler>
 8002896:	e7bd      	b.n	8002814 <MX_TIM1_Init+0xac>
    Error_Handler();
 8002898:	f7ff fcfc 	bl	8002294 <Error_Handler>
 800289c:	e7a6      	b.n	80027ec <MX_TIM1_Init+0x84>
    Error_Handler();
 800289e:	f7ff fcf9 	bl	8002294 <Error_Handler>
 80028a2:	e797      	b.n	80027d4 <MX_TIM1_Init+0x6c>
    Error_Handler();
 80028a4:	f7ff fcf6 	bl	8002294 <Error_Handler>
 80028a8:	e78f      	b.n	80027ca <MX_TIM1_Init+0x62>
 80028aa:	bf00      	nop
 80028ac:	f3af 8000 	nop.w
 80028b0:	02000000 	.word	0x02000000
 80028b4:	00000000 	.word	0x00000000
 80028b8:	200008b8 	.word	0x200008b8
 80028bc:	40010000 	.word	0x40010000

080028c0 <MX_TIM8_Init>:
{
 80028c0:	b510      	push	{r4, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028c2:	2400      	movs	r4, #0
{
 80028c4:	b09c      	sub	sp, #112	@ 0x70
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80028c6:	222c      	movs	r2, #44	@ 0x2c
 80028c8:	4621      	mov	r1, r4
 80028ca:	a810      	add	r0, sp, #64	@ 0x40
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028cc:	9404      	str	r4, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028ce:	9400      	str	r4, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028d0:	9408      	str	r4, [sp, #32]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028d2:	9407      	str	r4, [sp, #28]
 80028d4:	e9cd 4405 	strd	r4, r4, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028d8:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028dc:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
 80028e0:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80028e4:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80028e8:	f003 f900 	bl	8005aec <memset>
  htim8.Instance = TIM8;
 80028ec:	4844      	ldr	r0, [pc, #272]	@ (8002a00 <MX_TIM8_Init+0x140>)
 80028ee:	4b45      	ldr	r3, [pc, #276]	@ (8002a04 <MX_TIM8_Init+0x144>)
  htim8.Init.RepetitionCounter = 0;
 80028f0:	6184      	str	r4, [r0, #24]
  htim8.Instance = TIM8;
 80028f2:	6003      	str	r3, [r0, #0]
  htim8.Init.Period = 65535;
 80028f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
  htim8.Init.RepetitionCounter = 0;
 80028fc:	e9c0 4404 	strd	r4, r4, [r0, #16]
  htim8.Init.Period = 65535;
 8002900:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002902:	f002 f8af 	bl	8004a64 <HAL_TIM_Base_Init>
 8002906:	2800      	cmp	r0, #0
 8002908:	d157      	bne.n	80029ba <MX_TIM8_Init+0xfa>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800290a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800290e:	a904      	add	r1, sp, #16
 8002910:	483b      	ldr	r0, [pc, #236]	@ (8002a00 <MX_TIM8_Init+0x140>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002912:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002914:	f002 fed8 	bl	80056c8 <HAL_TIM_ConfigClockSource>
 8002918:	2800      	cmp	r0, #0
 800291a:	d16a      	bne.n	80029f2 <MX_TIM8_Init+0x132>
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800291c:	4838      	ldr	r0, [pc, #224]	@ (8002a00 <MX_TIM8_Init+0x140>)
 800291e:	f002 fa23 	bl	8004d68 <HAL_TIM_PWM_Init>
 8002922:	2800      	cmp	r0, #0
 8002924:	d162      	bne.n	80029ec <MX_TIM8_Init+0x12c>
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8002926:	4836      	ldr	r0, [pc, #216]	@ (8002a00 <MX_TIM8_Init+0x140>)
 8002928:	f002 f986 	bl	8004c38 <HAL_TIM_OC_Init>
 800292c:	2800      	cmp	r0, #0
 800292e:	d15a      	bne.n	80029e6 <MX_TIM8_Init+0x126>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002930:	2300      	movs	r3, #0
 8002932:	2200      	movs	r2, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002934:	4669      	mov	r1, sp
 8002936:	4832      	ldr	r0, [pc, #200]	@ (8002a00 <MX_TIM8_Init+0x140>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002938:	e9cd 2300 	strd	r2, r3, [sp]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800293c:	2300      	movs	r3, #0
 800293e:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002940:	f003 f82e 	bl	80059a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002944:	2800      	cmp	r0, #0
 8002946:	d14b      	bne.n	80029e0 <MX_TIM8_Init+0x120>
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002948:	2000      	movs	r0, #0
 800294a:	2100      	movs	r1, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800294c:	2200      	movs	r2, #0
 800294e:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002950:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002954:	a908      	add	r1, sp, #32
 8002956:	482a      	ldr	r0, [pc, #168]	@ (8002a00 <MX_TIM8_Init+0x140>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002958:	920e      	str	r2, [sp, #56]	@ 0x38
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800295a:	e9cd 3208 	strd	r3, r2, [sp, #32]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800295e:	e9cd 220a 	strd	r2, r2, [sp, #40]	@ 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002962:	f002 fd31 	bl	80053c8 <HAL_TIM_PWM_ConfigChannel>
 8002966:	2800      	cmp	r0, #0
 8002968:	d137      	bne.n	80029da <MX_TIM8_Init+0x11a>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800296a:	2204      	movs	r2, #4
 800296c:	a908      	add	r1, sp, #32
 800296e:	4824      	ldr	r0, [pc, #144]	@ (8002a00 <MX_TIM8_Init+0x140>)
 8002970:	f002 fd2a 	bl	80053c8 <HAL_TIM_PWM_ConfigChannel>
 8002974:	bb70      	cbnz	r0, 80029d4 <MX_TIM8_Init+0x114>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002976:	2300      	movs	r3, #0
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002978:	2208      	movs	r2, #8
 800297a:	a908      	add	r1, sp, #32
 800297c:	4820      	ldr	r0, [pc, #128]	@ (8002a00 <MX_TIM8_Init+0x140>)
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800297e:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002980:	f002 fb1e 	bl	8004fc0 <HAL_TIM_OC_ConfigChannel>
 8002984:	bb18      	cbnz	r0, 80029ce <MX_TIM8_Init+0x10e>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002986:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002988:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800298c:	a910      	add	r1, sp, #64	@ 0x40
 800298e:	481c      	ldr	r0, [pc, #112]	@ (8002a00 <MX_TIM8_Init+0x140>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002990:	931a      	str	r3, [sp, #104]	@ 0x68
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002992:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 80029f8 <MX_TIM8_Init+0x138>
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002996:	e9cd 3310 	strd	r3, r3, [sp, #64]	@ 0x40
  sBreakDeadTimeConfig.DeadTime = 0;
 800299a:	e9cd 3312 	strd	r3, r3, [sp, #72]	@ 0x48
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800299e:	e9cd 3214 	strd	r3, r2, [sp, #80]	@ 0x50
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80029a2:	e9cd 3316 	strd	r3, r3, [sp, #88]	@ 0x58
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80029a6:	ed8d 7b18 	vstr	d7, [sp, #96]	@ 0x60
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80029aa:	f003 f853 	bl	8005a54 <HAL_TIMEx_ConfigBreakDeadTime>
 80029ae:	b938      	cbnz	r0, 80029c0 <MX_TIM8_Init+0x100>
  HAL_TIM_MspPostInit(&htim8);
 80029b0:	4813      	ldr	r0, [pc, #76]	@ (8002a00 <MX_TIM8_Init+0x140>)
 80029b2:	f7ff fe5d 	bl	8002670 <HAL_TIM_MspPostInit>
}
 80029b6:	b01c      	add	sp, #112	@ 0x70
 80029b8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80029ba:	f7ff fc6b 	bl	8002294 <Error_Handler>
 80029be:	e7a4      	b.n	800290a <MX_TIM8_Init+0x4a>
    Error_Handler();
 80029c0:	f7ff fc68 	bl	8002294 <Error_Handler>
  HAL_TIM_MspPostInit(&htim8);
 80029c4:	480e      	ldr	r0, [pc, #56]	@ (8002a00 <MX_TIM8_Init+0x140>)
 80029c6:	f7ff fe53 	bl	8002670 <HAL_TIM_MspPostInit>
}
 80029ca:	b01c      	add	sp, #112	@ 0x70
 80029cc:	bd10      	pop	{r4, pc}
    Error_Handler();
 80029ce:	f7ff fc61 	bl	8002294 <Error_Handler>
 80029d2:	e7d8      	b.n	8002986 <MX_TIM8_Init+0xc6>
    Error_Handler();
 80029d4:	f7ff fc5e 	bl	8002294 <Error_Handler>
 80029d8:	e7cd      	b.n	8002976 <MX_TIM8_Init+0xb6>
    Error_Handler();
 80029da:	f7ff fc5b 	bl	8002294 <Error_Handler>
 80029de:	e7c4      	b.n	800296a <MX_TIM8_Init+0xaa>
    Error_Handler();
 80029e0:	f7ff fc58 	bl	8002294 <Error_Handler>
 80029e4:	e7b0      	b.n	8002948 <MX_TIM8_Init+0x88>
    Error_Handler();
 80029e6:	f7ff fc55 	bl	8002294 <Error_Handler>
 80029ea:	e7a1      	b.n	8002930 <MX_TIM8_Init+0x70>
    Error_Handler();
 80029ec:	f7ff fc52 	bl	8002294 <Error_Handler>
 80029f0:	e799      	b.n	8002926 <MX_TIM8_Init+0x66>
    Error_Handler();
 80029f2:	f7ff fc4f 	bl	8002294 <Error_Handler>
 80029f6:	e791      	b.n	800291c <MX_TIM8_Init+0x5c>
 80029f8:	02000000 	.word	0x02000000
 80029fc:	00000000 	.word	0x00000000
 8002a00:	20000778 	.word	0x20000778
 8002a04:	40010400 	.word	0x40010400

08002a08 <MX_USB_OTG_FS_USB_Init>:
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop

08002a0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a10:	480d      	ldr	r0, [pc, #52]	@ (8002a48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a12:	490e      	ldr	r1, [pc, #56]	@ (8002a4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a14:	4a0e      	ldr	r2, [pc, #56]	@ (8002a50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a18:	e002      	b.n	8002a20 <LoopCopyDataInit>

08002a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a1e:	3304      	adds	r3, #4

08002a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a24:	d3f9      	bcc.n	8002a1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a26:	4a0b      	ldr	r2, [pc, #44]	@ (8002a54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a28:	4c0b      	ldr	r4, [pc, #44]	@ (8002a58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a2c:	e001      	b.n	8002a32 <LoopFillZerobss>

08002a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a30:	3204      	adds	r2, #4

08002a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a34:	d3fb      	bcc.n	8002a2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a36:	f7ff fc95 	bl	8002364 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a3a:	f003 f865 	bl	8005b08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a3e:	f7ff fbaf 	bl	80021a0 <main>
  bx  lr    
 8002a42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a44:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a4c:	200001c4 	.word	0x200001c4
  ldr r2, =_sidata
 8002a50:	0800e7f0 	.word	0x0800e7f0
  ldr r2, =_sbss
 8002a54:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8002a58:	20000a40 	.word	0x20000a40

08002a5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a5c:	e7fe      	b.n	8002a5c <ADC_IRQHandler>
	...

08002a60 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a60:	490e      	ldr	r1, [pc, #56]	@ (8002a9c <HAL_InitTick+0x3c>)
 8002a62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a66:	4a0e      	ldr	r2, [pc, #56]	@ (8002aa0 <HAL_InitTick+0x40>)
{
 8002a68:	b510      	push	{r4, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a6a:	7809      	ldrb	r1, [r1, #0]
{
 8002a6c:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a6e:	6812      	ldr	r2, [r2, #0]
 8002a70:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a74:	fbb2 f0f3 	udiv	r0, r2, r3
 8002a78:	f000 fe08 	bl	800368c <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a7c:	b908      	cbnz	r0, 8002a82 <HAL_InitTick+0x22>
 8002a7e:	2c0f      	cmp	r4, #15
 8002a80:	d901      	bls.n	8002a86 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8002a82:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002a84:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a86:	2200      	movs	r2, #0
 8002a88:	4621      	mov	r1, r4
 8002a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8002a8e:	f000 fdb3 	bl	80035f8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a92:	4b04      	ldr	r3, [pc, #16]	@ (8002aa4 <HAL_InitTick+0x44>)
 8002a94:	2000      	movs	r0, #0
 8002a96:	601c      	str	r4, [r3, #0]
}
 8002a98:	bd10      	pop	{r4, pc}
 8002a9a:	bf00      	nop
 8002a9c:	2000016c 	.word	0x2000016c
 8002aa0:	20000168 	.word	0x20000168
 8002aa4:	20000170 	.word	0x20000170

08002aa8 <HAL_Init>:
{
 8002aa8:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aaa:	2003      	movs	r0, #3
 8002aac:	f000 fd92 	bl	80035d4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ab0:	200f      	movs	r0, #15
 8002ab2:	f7ff ffd5 	bl	8002a60 <HAL_InitTick>
  HAL_MspInit();
 8002ab6:	f7ff fbef 	bl	8002298 <HAL_MspInit>
}
 8002aba:	2000      	movs	r0, #0
 8002abc:	bd08      	pop	{r3, pc}
 8002abe:	bf00      	nop

08002ac0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002ac0:	4a03      	ldr	r2, [pc, #12]	@ (8002ad0 <HAL_IncTick+0x10>)
 8002ac2:	4b04      	ldr	r3, [pc, #16]	@ (8002ad4 <HAL_IncTick+0x14>)
 8002ac4:	6811      	ldr	r1, [r2, #0]
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	440b      	add	r3, r1
 8002aca:	6013      	str	r3, [r2, #0]
}
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	20000904 	.word	0x20000904
 8002ad4:	2000016c 	.word	0x2000016c

08002ad8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002ad8:	4b01      	ldr	r3, [pc, #4]	@ (8002ae0 <HAL_GetTick+0x8>)
 8002ada:	6818      	ldr	r0, [r3, #0]
}
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	20000904 	.word	0x20000904

08002ae4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ae4:	b538      	push	{r3, r4, r5, lr}
 8002ae6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002ae8:	f7ff fff6 	bl	8002ad8 <HAL_GetTick>
 8002aec:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aee:	1c63      	adds	r3, r4, #1
 8002af0:	d002      	beq.n	8002af8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002af2:	4b04      	ldr	r3, [pc, #16]	@ (8002b04 <HAL_Delay+0x20>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002af8:	f7ff ffee 	bl	8002ad8 <HAL_GetTick>
 8002afc:	1b40      	subs	r0, r0, r5
 8002afe:	42a0      	cmp	r0, r4
 8002b00:	d3fa      	bcc.n	8002af8 <HAL_Delay+0x14>
  {
  }
}
 8002b02:	bd38      	pop	{r3, r4, r5, pc}
 8002b04:	2000016c 	.word	0x2000016c

08002b08 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b08:	2800      	cmp	r0, #0
 8002b0a:	f000 809d 	beq.w	8002c48 <HAL_ADC_Init+0x140>
{
 8002b0e:	b538      	push	{r3, r4, r5, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b10:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8002b12:	4604      	mov	r4, r0
 8002b14:	b13d      	cbz	r5, 8002b26 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b16:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002b18:	06db      	lsls	r3, r3, #27
 8002b1a:	d50c      	bpl.n	8002b36 <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b1c:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 8002b1e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8002b20:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 8002b24:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8002b26:	f7fe ffab 	bl	8001a80 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002b2a:	6465      	str	r5, [r4, #68]	@ 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b2c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    hadc->Lock = HAL_UNLOCKED;
 8002b2e:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b32:	06db      	lsls	r3, r3, #27
 8002b34:	d4f2      	bmi.n	8002b1c <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8002b36:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8002b38:	4b47      	ldr	r3, [pc, #284]	@ (8002c58 <HAL_ADC_Init+0x150>)
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002b3a:	4a48      	ldr	r2, [pc, #288]	@ (8002c5c <HAL_ADC_Init+0x154>)
    ADC_STATE_CLR_SET(hadc->State,
 8002b3c:	400b      	ands	r3, r1
 8002b3e:	f043 0302 	orr.w	r3, r3, #2
 8002b42:	6423      	str	r3, [r4, #64]	@ 0x40
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002b44:	6851      	ldr	r1, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b46:	6823      	ldr	r3, [r4, #0]
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002b48:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8002b4c:	6051      	str	r1, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002b4e:	6850      	ldr	r0, [r2, #4]
 8002b50:	6861      	ldr	r1, [r4, #4]
 8002b52:	4308      	orrs	r0, r1
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b54:	4942      	ldr	r1, [pc, #264]	@ (8002c60 <HAL_ADC_Init+0x158>)
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002b56:	6050      	str	r0, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b58:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b5a:	6920      	ldr	r0, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b68:	68a0      	ldr	r0, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b6a:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002b72:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	4302      	orrs	r2, r0
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b78:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b7a:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b7c:	689a      	ldr	r2, [r3, #8]
 8002b7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b84:	689a      	ldr	r2, [r3, #8]
 8002b86:	4302      	orrs	r2, r0
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b88:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8002b8a:	4288      	cmp	r0, r1
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b8c:	609a      	str	r2, [r3, #8]
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b8e:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b90:	d052      	beq.n	8002c38 <HAL_ADC_Init+0x130>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b92:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b96:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	4310      	orrs	r0, r2
 8002b9e:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002ba6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ba8:	689a      	ldr	r2, [r3, #8]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002bae:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002bb0:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002bb2:	f022 0202 	bic.w	r2, r2, #2
 8002bb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8002bbe:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002bc0:	f894 2020 	ldrb.w	r2, [r4, #32]
 8002bc4:	2a00      	cmp	r2, #0
 8002bc6:	d041      	beq.n	8002c4c <HAL_ADC_Init+0x144>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002bc8:	6858      	ldr	r0, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002bca:	6a62      	ldr	r2, [r4, #36]	@ 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002bcc:	f440 6000 	orr.w	r0, r0, #2048	@ 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002bd0:	1e51      	subs	r1, r2, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002bd2:	6058      	str	r0, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002bda:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8002be2:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002be4:	6add      	ldr	r5, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002be6:	69e2      	ldr	r2, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002be8:	f425 0570 	bic.w	r5, r5, #15728640	@ 0xf00000
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002bec:	6960      	ldr	r0, [r4, #20]
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002bee:	1e51      	subs	r1, r2, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002bf0:	62dd      	str	r5, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002bf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bf4:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8002bf8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002c00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 8002c08:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
    ADC_CLEAR_ERRORCODE(hadc);
 8002c0c:	2100      	movs	r1, #0
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c1e:	4608      	mov	r0, r1
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c20:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8002c22:	6461      	str	r1, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8002c24:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002c26:	f023 0303 	bic.w	r3, r3, #3
 8002c2a:	f043 0301 	orr.w	r3, r3, #1
 8002c2e:	6423      	str	r3, [r4, #64]	@ 0x40
  __HAL_UNLOCK(hadc);
 8002c30:	2300      	movs	r3, #0
 8002c32:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8002c36:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c38:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002c44:	609a      	str	r2, [r3, #8]
 8002c46:	e7b2      	b.n	8002bae <HAL_ADC_Init+0xa6>
    return HAL_ERROR;
 8002c48:	2001      	movs	r0, #1
}
 8002c4a:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c52:	605a      	str	r2, [r3, #4]
 8002c54:	e7c6      	b.n	8002be4 <HAL_ADC_Init+0xdc>
 8002c56:	bf00      	nop
 8002c58:	ffffeefd 	.word	0xffffeefd
 8002c5c:	40012300 	.word	0x40012300
 8002c60:	0f000001 	.word	0x0f000001

08002c64 <HAL_ADC_Start_DMA>:
{
 8002c64:	b570      	push	{r4, r5, r6, lr}
 8002c66:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8002c68:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
{
 8002c6c:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 8002c6e:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 8002c70:	2801      	cmp	r0, #1
  __IO uint32_t counter = 0;
 8002c72:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002c74:	f000 8085 	beq.w	8002d82 <HAL_ADC_Start_DMA+0x11e>
 8002c78:	2301      	movs	r3, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002c7a:	682e      	ldr	r6, [r5, #0]
  __HAL_LOCK(hadc);
 8002c7c:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002c80:	68b3      	ldr	r3, [r6, #8]
 8002c82:	07dc      	lsls	r4, r3, #31
 8002c84:	d414      	bmi.n	8002cb0 <HAL_ADC_Start_DMA+0x4c>
    __HAL_ADC_ENABLE(hadc);
 8002c86:	68b3      	ldr	r3, [r6, #8]
 8002c88:	f043 0301 	orr.w	r3, r3, #1
 8002c8c:	60b3      	str	r3, [r6, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002c8e:	4b3e      	ldr	r3, [pc, #248]	@ (8002d88 <HAL_ADC_Start_DMA+0x124>)
 8002c90:	6818      	ldr	r0, [r3, #0]
 8002c92:	4b3e      	ldr	r3, [pc, #248]	@ (8002d8c <HAL_ADC_Start_DMA+0x128>)
 8002c94:	fba3 3000 	umull	r3, r0, r3, r0
 8002c98:	0c80      	lsrs	r0, r0, #18
 8002c9a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002c9e:	9001      	str	r0, [sp, #4]
    while(counter != 0)
 8002ca0:	9b01      	ldr	r3, [sp, #4]
 8002ca2:	b12b      	cbz	r3, 8002cb0 <HAL_ADC_Start_DMA+0x4c>
      counter--;
 8002ca4:	9c01      	ldr	r4, [sp, #4]
 8002ca6:	3c01      	subs	r4, #1
 8002ca8:	9401      	str	r4, [sp, #4]
    while(counter != 0)
 8002caa:	9801      	ldr	r0, [sp, #4]
 8002cac:	2800      	cmp	r0, #0
 8002cae:	d1f9      	bne.n	8002ca4 <HAL_ADC_Start_DMA+0x40>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002cb0:	68b3      	ldr	r3, [r6, #8]
 8002cb2:	f013 0f01 	tst.w	r3, #1
    ADC_STATE_CLR_SET(hadc->State,
 8002cb6:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002cb8:	d03e      	beq.n	8002d38 <HAL_ADC_Start_DMA+0xd4>
    ADC_STATE_CLR_SET(hadc->State,
 8002cba:	4835      	ldr	r0, [pc, #212]	@ (8002d90 <HAL_ADC_Start_DMA+0x12c>)
 8002cbc:	4018      	ands	r0, r3
 8002cbe:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 8002cc2:	6428      	str	r0, [r5, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002cc4:	6873      	ldr	r3, [r6, #4]
 8002cc6:	0558      	lsls	r0, r3, #21
 8002cc8:	d505      	bpl.n	8002cd6 <HAL_ADC_Start_DMA+0x72>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002cca:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8002ccc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002cd0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002cd4:	642b      	str	r3, [r5, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cd6:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8002cd8:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 8002cdc:	d045      	beq.n	8002d6a <HAL_ADC_Start_DMA+0x106>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002cde:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8002ce0:	f023 0306 	bic.w	r3, r3, #6
 8002ce4:	646b      	str	r3, [r5, #68]	@ 0x44
    __HAL_UNLOCK(hadc);   
 8002ce6:	2000      	movs	r0, #0
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ce8:	4613      	mov	r3, r2
 8002cea:	460a      	mov	r2, r1
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002cec:	4929      	ldr	r1, [pc, #164]	@ (8002d94 <HAL_ADC_Start_DMA+0x130>)
    __HAL_UNLOCK(hadc);   
 8002cee:	f885 003c 	strb.w	r0, [r5, #60]	@ 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002cf2:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8002cf4:	63c1      	str	r1, [r0, #60]	@ 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002cf6:	4928      	ldr	r1, [pc, #160]	@ (8002d98 <HAL_ADC_Start_DMA+0x134>)
 8002cf8:	6401      	str	r1, [r0, #64]	@ 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002cfa:	4928      	ldr	r1, [pc, #160]	@ (8002d9c <HAL_ADC_Start_DMA+0x138>)
 8002cfc:	64c1      	str	r1, [r0, #76]	@ 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002cfe:	f06f 0122 	mvn.w	r1, #34	@ 0x22
 8002d02:	6031      	str	r1, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d04:	6871      	ldr	r1, [r6, #4]
 8002d06:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 8002d0a:	6071      	str	r1, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002d0c:	68b1      	ldr	r1, [r6, #8]
 8002d0e:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8002d12:	60b1      	str	r1, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d14:	f106 014c 	add.w	r1, r6, #76	@ 0x4c
 8002d18:	f000 fde2 	bl	80038e0 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002d1c:	4b20      	ldr	r3, [pc, #128]	@ (8002da0 <HAL_ADC_Start_DMA+0x13c>)
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	06d2      	lsls	r2, r2, #27
 8002d22:	d113      	bne.n	8002d4c <HAL_ADC_Start_DMA+0xe8>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002d24:	682b      	ldr	r3, [r5, #0]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8002d2c:	d10b      	bne.n	8002d46 <HAL_ADC_Start_DMA+0xe2>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002d34:	609a      	str	r2, [r3, #8]
 8002d36:	e006      	b.n	8002d46 <HAL_ADC_Start_DMA+0xe2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d38:	f043 0310 	orr.w	r3, r3, #16
 8002d3c:	642b      	str	r3, [r5, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d3e:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8002d40:	f043 0301 	orr.w	r3, r3, #1
 8002d44:	646b      	str	r3, [r5, #68]	@ 0x44
  return HAL_OK;
 8002d46:	2000      	movs	r0, #0
}
 8002d48:	b002      	add	sp, #8
 8002d4a:	bd70      	pop	{r4, r5, r6, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d4c:	682a      	ldr	r2, [r5, #0]
 8002d4e:	4915      	ldr	r1, [pc, #84]	@ (8002da4 <HAL_ADC_Start_DMA+0x140>)
 8002d50:	428a      	cmp	r2, r1
 8002d52:	d00c      	beq.n	8002d6e <HAL_ADC_Start_DMA+0x10a>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002d54:	685b      	ldr	r3, [r3, #4]
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d56:	06db      	lsls	r3, r3, #27
 8002d58:	d4f5      	bmi.n	8002d46 <HAL_ADC_Start_DMA+0xe2>
 8002d5a:	4b13      	ldr	r3, [pc, #76]	@ (8002da8 <HAL_ADC_Start_DMA+0x144>)
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d1f2      	bne.n	8002d46 <HAL_ADC_Start_DMA+0xe2>
 8002d60:	689a      	ldr	r2, [r3, #8]
 8002d62:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8002d66:	d1ee      	bne.n	8002d46 <HAL_ADC_Start_DMA+0xe2>
 8002d68:	e7e1      	b.n	8002d2e <HAL_ADC_Start_DMA+0xca>
      ADC_CLEAR_ERRORCODE(hadc);
 8002d6a:	646b      	str	r3, [r5, #68]	@ 0x44
 8002d6c:	e7bb      	b.n	8002ce6 <HAL_ADC_Start_DMA+0x82>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d6e:	6891      	ldr	r1, [r2, #8]
 8002d70:	f011 5f40 	tst.w	r1, #805306368	@ 0x30000000
 8002d74:	d103      	bne.n	8002d7e <HAL_ADC_Start_DMA+0x11a>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d76:	6891      	ldr	r1, [r2, #8]
 8002d78:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8002d7c:	6091      	str	r1, [r2, #8]
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	e7e1      	b.n	8002d46 <HAL_ADC_Start_DMA+0xe2>
  __HAL_LOCK(hadc);
 8002d82:	2002      	movs	r0, #2
}
 8002d84:	b002      	add	sp, #8
 8002d86:	bd70      	pop	{r4, r5, r6, pc}
 8002d88:	20000168 	.word	0x20000168
 8002d8c:	431bde83 	.word	0x431bde83
 8002d90:	fffff8fe 	.word	0xfffff8fe
 8002d94:	08002ddd 	.word	0x08002ddd
 8002d98:	08002db5 	.word	0x08002db5
 8002d9c:	08002dc5 	.word	0x08002dc5
 8002da0:	40012300 	.word	0x40012300
 8002da4:	40012000 	.word	0x40012000
 8002da8:	40012200 	.word	0x40012200

08002dac <HAL_ADC_ConvCpltCallback>:
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop

08002db0 <HAL_ADC_ConvHalfCpltCallback>:
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop

08002db4 <ADC_DMAHalfConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002db4:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8002db6:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002db8:	f7ff fffa 	bl	8002db0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002dbc:	bd08      	pop	{r3, pc}
 8002dbe:	bf00      	nop

08002dc0 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop

08002dc4 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002dc4:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8002dc6:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002dc8:	2340      	movs	r3, #64	@ 0x40
 8002dca:	6403      	str	r3, [r0, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002dcc:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8002dce:	f043 0304 	orr.w	r3, r3, #4
 8002dd2:	6443      	str	r3, [r0, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002dd4:	f7ff fff4 	bl	8002dc0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002dd8:	bd08      	pop	{r3, pc}
 8002dda:	bf00      	nop

08002ddc <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ddc:	6b83      	ldr	r3, [r0, #56]	@ 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002dde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002de0:	f012 0f50 	tst.w	r2, #80	@ 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002de4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 8002de6:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002de8:	d123      	bne.n	8002e32 <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002dea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002dee:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002df0:	641a      	str	r2, [r3, #64]	@ 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002df2:	688a      	ldr	r2, [r1, #8]
 8002df4:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8002df8:	d117      	bne.n	8002e2a <ADC_DMAConvCplt+0x4e>
 8002dfa:	699a      	ldr	r2, [r3, #24]
 8002dfc:	b9aa      	cbnz	r2, 8002e2a <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002dfe:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e00:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 8002e04:	d002      	beq.n	8002e0c <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e06:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e08:	0550      	lsls	r0, r2, #21
 8002e0a:	d40e      	bmi.n	8002e2a <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002e0c:	684a      	ldr	r2, [r1, #4]
 8002e0e:	f022 0220 	bic.w	r2, r2, #32
 8002e12:	604a      	str	r2, [r1, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e16:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e1a:	641a      	str	r2, [r3, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e1e:	04d1      	lsls	r1, r2, #19
 8002e20:	d403      	bmi.n	8002e2a <ADC_DMAConvCplt+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e24:	f042 0201 	orr.w	r2, r2, #1
 8002e28:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff ffbe 	bl	8002dac <HAL_ADC_ConvCpltCallback>
}
 8002e30:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e32:	06d2      	lsls	r2, r2, #27
 8002e34:	d404      	bmi.n	8002e40 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 8002e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e3e:	4718      	bx	r3
      HAL_ADC_ErrorCallback(hadc);
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff ffbd 	bl	8002dc0 <HAL_ADC_ErrorCallback>
}
 8002e46:	bd10      	pop	{r4, pc}

08002e48 <HAL_ADC_ConfigChannel>:
{
 8002e48:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t counter = 0;
 8002e4a:	2300      	movs	r3, #0
{
 8002e4c:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 8002e4e:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002e50:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	f000 80a7 	beq.w	8002fa8 <HAL_ADC_ConfigChannel+0x160>
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	4684      	mov	ip, r0
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e5e:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hadc);
 8002e60:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002e64:	6808      	ldr	r0, [r1, #0]
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002e66:	688c      	ldr	r4, [r1, #8]
 8002e68:	b282      	uxth	r2, r0
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002e6a:	2809      	cmp	r0, #9
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e6c:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002e70:	d92d      	bls.n	8002ece <HAL_ADC_ConfigChannel+0x86>
 8002e72:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8002e76:	d02a      	beq.n	8002ece <HAL_ADC_ConfigChannel+0x86>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e78:	f1ae 0e1e 	sub.w	lr, lr, #30
 8002e7c:	2607      	movs	r6, #7
 8002e7e:	68dd      	ldr	r5, [r3, #12]
 8002e80:	fa06 f60e 	lsl.w	r6, r6, lr
 8002e84:	ea25 0506 	bic.w	r5, r5, r6
 8002e88:	60dd      	str	r5, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e8a:	4d49      	ldr	r5, [pc, #292]	@ (8002fb0 <HAL_ADC_ConfigChannel+0x168>)
 8002e8c:	42a8      	cmp	r0, r5
 8002e8e:	f000 8086 	beq.w	8002f9e <HAL_ADC_ConfigChannel+0x156>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e92:	68dd      	ldr	r5, [r3, #12]
 8002e94:	fa04 f40e 	lsl.w	r4, r4, lr
 8002e98:	432c      	orrs	r4, r5
 8002e9a:	60dc      	str	r4, [r3, #12]
  if (sConfig->Rank < 7)
 8002e9c:	684c      	ldr	r4, [r1, #4]
 8002e9e:	2c06      	cmp	r4, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ea0:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  if (sConfig->Rank < 7)
 8002ea4:	d824      	bhi.n	8002ef0 <HAL_ADC_ConfigChannel+0xa8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ea6:	3905      	subs	r1, #5
 8002ea8:	241f      	movs	r4, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002eaa:	408a      	lsls	r2, r1
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002eac:	408c      	lsls	r4, r1
 8002eae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002eb0:	ea21 0104 	bic.w	r1, r1, r4
 8002eb4:	6359      	str	r1, [r3, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002eb6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	635a      	str	r2, [r3, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002ebc:	4a3d      	ldr	r2, [pc, #244]	@ (8002fb4 <HAL_ADC_ConfigChannel+0x16c>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d026      	beq.n	8002f10 <HAL_ADC_ConfigChannel+0xc8>
  __HAL_UNLOCK(hadc);
 8002ec2:	2300      	movs	r3, #0
  return HAL_OK;
 8002ec4:	4618      	mov	r0, r3
  __HAL_UNLOCK(hadc);
 8002ec6:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
}
 8002eca:	b002      	add	sp, #8
 8002ecc:	bd70      	pop	{r4, r5, r6, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ece:	2507      	movs	r5, #7
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ed0:	fa04 f40e 	lsl.w	r4, r4, lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ed4:	fa05 fe0e 	lsl.w	lr, r5, lr
 8002ed8:	691d      	ldr	r5, [r3, #16]
 8002eda:	ea25 050e 	bic.w	r5, r5, lr
 8002ede:	611d      	str	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ee0:	691d      	ldr	r5, [r3, #16]
 8002ee2:	432c      	orrs	r4, r5
 8002ee4:	611c      	str	r4, [r3, #16]
  if (sConfig->Rank < 7)
 8002ee6:	684c      	ldr	r4, [r1, #4]
 8002ee8:	2c06      	cmp	r4, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002eea:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  if (sConfig->Rank < 7)
 8002eee:	d9da      	bls.n	8002ea6 <HAL_ADC_ConfigChannel+0x5e>
  else if (sConfig->Rank < 13)
 8002ef0:	2c0c      	cmp	r4, #12
 8002ef2:	d837      	bhi.n	8002f64 <HAL_ADC_ConfigChannel+0x11c>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ef4:	3923      	subs	r1, #35	@ 0x23
 8002ef6:	241f      	movs	r4, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ef8:	408a      	lsls	r2, r1
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002efa:	408c      	lsls	r4, r1
 8002efc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002efe:	ea21 0104 	bic.w	r1, r1, r4
 8002f02:	6319      	str	r1, [r3, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f04:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f06:	430a      	orrs	r2, r1
 8002f08:	631a      	str	r2, [r3, #48]	@ 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002f0a:	4a2a      	ldr	r2, [pc, #168]	@ (8002fb4 <HAL_ADC_ConfigChannel+0x16c>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d1d8      	bne.n	8002ec2 <HAL_ADC_ConfigChannel+0x7a>
 8002f10:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8002f14:	d03c      	beq.n	8002f90 <HAL_ADC_ConfigChannel+0x148>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f16:	2812      	cmp	r0, #18
 8002f18:	d030      	beq.n	8002f7c <HAL_ADC_ConfigChannel+0x134>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f1a:	4b25      	ldr	r3, [pc, #148]	@ (8002fb0 <HAL_ADC_ConfigChannel+0x168>)
 8002f1c:	4298      	cmp	r0, r3
 8002f1e:	d001      	beq.n	8002f24 <HAL_ADC_ConfigChannel+0xdc>
 8002f20:	2811      	cmp	r0, #17
 8002f22:	d1ce      	bne.n	8002ec2 <HAL_ADC_ConfigChannel+0x7a>
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002f24:	4b24      	ldr	r3, [pc, #144]	@ (8002fb8 <HAL_ADC_ConfigChannel+0x170>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f26:	4922      	ldr	r1, [pc, #136]	@ (8002fb0 <HAL_ADC_ConfigChannel+0x168>)
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002f28:	685a      	ldr	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f2a:	4288      	cmp	r0, r1
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002f2c:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 8002f30:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002f38:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f3a:	d1c2      	bne.n	8002ec2 <HAL_ADC_ConfigChannel+0x7a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002f3c:	4b1f      	ldr	r3, [pc, #124]	@ (8002fbc <HAL_ADC_ConfigChannel+0x174>)
 8002f3e:	4a20      	ldr	r2, [pc, #128]	@ (8002fc0 <HAL_ADC_ConfigChannel+0x178>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	fba2 2303 	umull	r2, r3, r2, r3
 8002f46:	0c9b      	lsrs	r3, r3, #18
 8002f48:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8002f50:	9b01      	ldr	r3, [sp, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0b5      	beq.n	8002ec2 <HAL_ADC_ConfigChannel+0x7a>
        counter--;
 8002f56:	9b01      	ldr	r3, [sp, #4]
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8002f5c:	9b01      	ldr	r3, [sp, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1f9      	bne.n	8002f56 <HAL_ADC_ConfigChannel+0x10e>
 8002f62:	e7ae      	b.n	8002ec2 <HAL_ADC_ConfigChannel+0x7a>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f64:	3941      	subs	r1, #65	@ 0x41
 8002f66:	241f      	movs	r4, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f68:	408a      	lsls	r2, r1
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f6a:	408c      	lsls	r4, r1
 8002f6c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f6e:	ea21 0104 	bic.w	r1, r1, r4
 8002f72:	62d9      	str	r1, [r3, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f74:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f76:	430a      	orrs	r2, r1
 8002f78:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002f7a:	e79f      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x74>
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002f7c:	4b0e      	ldr	r3, [pc, #56]	@ (8002fb8 <HAL_ADC_ConfigChannel+0x170>)
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8002f84:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_VBATE;
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002f8c:	605a      	str	r2, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f8e:	e798      	b.n	8002ec2 <HAL_ADC_ConfigChannel+0x7a>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002f90:	f8d2 3304 	ldr.w	r3, [r2, #772]	@ 0x304
 8002f94:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002f98:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f9c:	e791      	b.n	8002ec2 <HAL_ADC_ConfigChannel+0x7a>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002f9e:	68dd      	ldr	r5, [r3, #12]
 8002fa0:	ea45 6404 	orr.w	r4, r5, r4, lsl #24
 8002fa4:	60dc      	str	r4, [r3, #12]
 8002fa6:	e779      	b.n	8002e9c <HAL_ADC_ConfigChannel+0x54>
  __HAL_LOCK(hadc);
 8002fa8:	2002      	movs	r0, #2
}
 8002faa:	b002      	add	sp, #8
 8002fac:	bd70      	pop	{r4, r5, r6, pc}
 8002fae:	bf00      	nop
 8002fb0:	10000012 	.word	0x10000012
 8002fb4:	40012000 	.word	0x40012000
 8002fb8:	40012300 	.word	0x40012300
 8002fbc:	20000168 	.word	0x20000168
 8002fc0:	431bde83 	.word	0x431bde83

08002fc4 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002fc4:	2800      	cmp	r0, #0
 8002fc6:	d07b      	beq.n	80030c0 <HAL_CAN_Init+0xfc>
{
 8002fc8:	b538      	push	{r3, r4, r5, lr}
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002fca:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002fce:	4604      	mov	r4, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d072      	beq.n	80030ba <HAL_CAN_Init+0xf6>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002fd4:	6822      	ldr	r2, [r4, #0]
 8002fd6:	6813      	ldr	r3, [r2, #0]
 8002fd8:	f043 0301 	orr.w	r3, r3, #1
 8002fdc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fde:	f7ff fd7b 	bl	8002ad8 <HAL_GetTick>
 8002fe2:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002fe4:	e004      	b.n	8002ff0 <HAL_CAN_Init+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002fe6:	f7ff fd77 	bl	8002ad8 <HAL_GetTick>
 8002fea:	1b40      	subs	r0, r0, r5
 8002fec:	280a      	cmp	r0, #10
 8002fee:	d85b      	bhi.n	80030a8 <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ff0:	6823      	ldr	r3, [r4, #0]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	07d1      	lsls	r1, r2, #31
 8002ff6:	d5f6      	bpl.n	8002fe6 <HAL_CAN_Init+0x22>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	f022 0202 	bic.w	r2, r2, #2
 8002ffe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003000:	f7ff fd6a 	bl	8002ad8 <HAL_GetTick>
 8003004:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003006:	e004      	b.n	8003012 <HAL_CAN_Init+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003008:	f7ff fd66 	bl	8002ad8 <HAL_GetTick>
 800300c:	1b40      	subs	r0, r0, r5
 800300e:	280a      	cmp	r0, #10
 8003010:	d84a      	bhi.n	80030a8 <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003012:	6823      	ldr	r3, [r4, #0]
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	0792      	lsls	r2, r2, #30
 8003018:	d4f6      	bmi.n	8003008 <HAL_CAN_Init+0x44>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800301a:	7e22      	ldrb	r2, [r4, #24]
 800301c:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	bf0c      	ite	eq
 8003022:	f042 0280 	orreq.w	r2, r2, #128	@ 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003026:	f022 0280 	bicne.w	r2, r2, #128	@ 0x80
 800302a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800302c:	7e62      	ldrb	r2, [r4, #25]
 800302e:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	bf0c      	ite	eq
 8003034:	f042 0240 	orreq.w	r2, r2, #64	@ 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003038:	f022 0240 	bicne.w	r2, r2, #64	@ 0x40
 800303c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800303e:	7ea2      	ldrb	r2, [r4, #26]
 8003040:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	bf0c      	ite	eq
 8003046:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800304a:	f022 0220 	bicne.w	r2, r2, #32
 800304e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003050:	7ee2      	ldrb	r2, [r4, #27]
 8003052:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	bf0c      	ite	eq
 8003058:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800305c:	f042 0210 	orrne.w	r2, r2, #16
 8003060:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003062:	7f22      	ldrb	r2, [r4, #28]
 8003064:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	bf0c      	ite	eq
 800306a:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800306e:	f022 0208 	bicne.w	r2, r2, #8
 8003072:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003074:	7f62      	ldrb	r2, [r4, #29]
 8003076:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	bf0c      	ite	eq
 800307c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003080:	f022 0204 	bicne.w	r2, r2, #4
 8003084:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003086:	6921      	ldr	r1, [r4, #16]
 8003088:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 800308c:	4302      	orrs	r2, r0
 800308e:	6960      	ldr	r0, [r4, #20]
 8003090:	430a      	orrs	r2, r1
 8003092:	6861      	ldr	r1, [r4, #4]
 8003094:	4302      	orrs	r2, r0
 8003096:	3901      	subs	r1, #1
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003098:	2000      	movs	r0, #0
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800309a:	430a      	orrs	r2, r1

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800309c:	2101      	movs	r1, #1
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800309e:	61da      	str	r2, [r3, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80030a0:	6260      	str	r0, [r4, #36]	@ 0x24
  hcan->State = HAL_CAN_STATE_READY;
 80030a2:	f884 1020 	strb.w	r1, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 80030a6:	bd38      	pop	{r3, r4, r5, pc}
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80030a8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 80030aa:	2205      	movs	r2, #5
    return HAL_ERROR;
 80030ac:	2001      	movs	r0, #1
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80030ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030b2:	6263      	str	r3, [r4, #36]	@ 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 80030b4:	f884 2020 	strb.w	r2, [r4, #32]
}
 80030b8:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 80030ba:	f7fe fde1 	bl	8001c80 <HAL_CAN_MspInit>
 80030be:	e789      	b.n	8002fd4 <HAL_CAN_Init+0x10>
    return HAL_ERROR;
 80030c0:	2001      	movs	r0, #1
}
 80030c2:	4770      	bx	lr

080030c4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80030c4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80030c6:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 80030ca:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d005      	beq.n	80030dc <HAL_CAN_Start+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80030d0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80030d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80030d6:	6243      	str	r3, [r0, #36]	@ 0x24
        return HAL_ERROR;
 80030d8:	2001      	movs	r0, #1

    return HAL_ERROR;
  }
}
 80030da:	bd38      	pop	{r3, r4, r5, pc}
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80030dc:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 80030de:	2302      	movs	r3, #2
 80030e0:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80030e4:	6813      	ldr	r3, [r2, #0]
 80030e6:	f023 0301 	bic.w	r3, r3, #1
 80030ea:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80030ec:	f7ff fcf4 	bl	8002ad8 <HAL_GetTick>
 80030f0:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80030f2:	e004      	b.n	80030fe <HAL_CAN_Start+0x3a>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80030f4:	f7ff fcf0 	bl	8002ad8 <HAL_GetTick>
 80030f8:	1b43      	subs	r3, r0, r5
 80030fa:	2b0a      	cmp	r3, #10
 80030fc:	d807      	bhi.n	800310e <HAL_CAN_Start+0x4a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80030fe:	6823      	ldr	r3, [r4, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f013 0301 	ands.w	r3, r3, #1
 8003106:	d1f5      	bne.n	80030f4 <HAL_CAN_Start+0x30>
    return HAL_OK;
 8003108:	4618      	mov	r0, r3
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800310a:	6263      	str	r3, [r4, #36]	@ 0x24
}
 800310c:	bd38      	pop	{r3, r4, r5, pc}
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800310e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8003110:	2205      	movs	r2, #5
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003112:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003116:	6263      	str	r3, [r4, #36]	@ 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8003118:	f884 2020 	strb.w	r2, [r4, #32]
        return HAL_ERROR;
 800311c:	e7dc      	b.n	80030d8 <HAL_CAN_Start+0x14>
 800311e:	bf00      	nop

08003120 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003120:	b430      	push	{r4, r5}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003122:	f890 c020 	ldrb.w	ip, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003126:	6805      	ldr	r5, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003128:	f10c 3cff 	add.w	ip, ip, #4294967295
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800312c:	68ac      	ldr	r4, [r5, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 800312e:	f1bc 0f01 	cmp.w	ip, #1
 8003132:	d838      	bhi.n	80031a6 <HAL_CAN_AddTxMessage+0x86>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003134:	f014 5fe0 	tst.w	r4, #469762048	@ 0x1c000000
 8003138:	d106      	bne.n	8003148 <HAL_CAN_AddTxMessage+0x28>
      return HAL_OK;
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800313a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800313c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003140:	6243      	str	r3, [r0, #36]	@ 0x24

      return HAL_ERROR;
 8003142:	2001      	movs	r0, #1
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8003144:	bc30      	pop	{r4, r5}
 8003146:	4770      	bx	lr
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003148:	f3c4 6401 	ubfx	r4, r4, #24, #2
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800314c:	2001      	movs	r0, #1
 800314e:	40a0      	lsls	r0, r4
 8003150:	6018      	str	r0, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 8003152:	688b      	ldr	r3, [r1, #8]
 8003154:	b363      	cbz	r3, 80031b0 <HAL_CAN_AddTxMessage+0x90>
                                                           pHeader->IDE |
 8003156:	68c8      	ldr	r0, [r1, #12]
 8003158:	4303      	orrs	r3, r0
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800315a:	6848      	ldr	r0, [r1, #4]
                                                           pHeader->IDE |
 800315c:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003160:	f104 0018 	add.w	r0, r4, #24
 8003164:	0100      	lsls	r0, r0, #4
 8003166:	502b      	str	r3, [r5, r0]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003168:	690b      	ldr	r3, [r1, #16]
 800316a:	eb05 1c04 	add.w	ip, r5, r4, lsl #4
 800316e:	f8cc 3184 	str.w	r3, [ip, #388]	@ 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003172:	7d0b      	ldrb	r3, [r1, #20]
 8003174:	0121      	lsls	r1, r4, #4
 8003176:	2b01      	cmp	r3, #1
 8003178:	d105      	bne.n	8003186 <HAL_CAN_AddTxMessage+0x66>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800317a:	f8dc 3184 	ldr.w	r3, [ip, #388]	@ 0x184
 800317e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003182:	f8cc 3184 	str.w	r3, [ip, #388]	@ 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003186:	6854      	ldr	r4, [r2, #4]
 8003188:	186b      	adds	r3, r5, r1
      return HAL_OK;
 800318a:	2000      	movs	r0, #0
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800318c:	f8c3 418c 	str.w	r4, [r3, #396]	@ 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003190:	6812      	ldr	r2, [r2, #0]
 8003192:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003196:	f8dc 3180 	ldr.w	r3, [ip, #384]	@ 0x180
 800319a:	f043 0301 	orr.w	r3, r3, #1
}
 800319e:	bc30      	pop	{r4, r5}
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80031a0:	f8cc 3180 	str.w	r3, [ip, #384]	@ 0x180
}
 80031a4:	4770      	bx	lr
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80031a6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80031a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031ac:	6243      	str	r3, [r0, #36]	@ 0x24
    return HAL_ERROR;
 80031ae:	e7c8      	b.n	8003142 <HAL_CAN_AddTxMessage+0x22>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80031b0:	68cb      	ldr	r3, [r1, #12]
 80031b2:	6808      	ldr	r0, [r1, #0]
 80031b4:	ea43 5040 	orr.w	r0, r3, r0, lsl #21
 80031b8:	f104 0318 	add.w	r3, r4, #24
 80031bc:	011b      	lsls	r3, r3, #4
 80031be:	50e8      	str	r0, [r5, r3]
 80031c0:	e7d2      	b.n	8003168 <HAL_CAN_AddTxMessage+0x48>
 80031c2:	bf00      	nop

080031c4 <HAL_CAN_GetRxMessage>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
  HAL_CAN_StateTypeDef state = hcan->State;
 80031c4:	f890 c020 	ldrb.w	ip, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80031c8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80031cc:	f1bc 0f01 	cmp.w	ip, #1
 80031d0:	d865      	bhi.n	800329e <HAL_CAN_GetRxMessage+0xda>
{
 80031d2:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80031d4:	6804      	ldr	r4, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80031d6:	b941      	cbnz	r1, 80031ea <HAL_CAN_GetRxMessage+0x26>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80031d8:	68e5      	ldr	r5, [r4, #12]
 80031da:	07ae      	lsls	r6, r5, #30
 80031dc:	d108      	bne.n	80031f0 <HAL_CAN_GetRxMessage+0x2c>
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80031de:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80031e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80031e4:	6243      	str	r3, [r0, #36]	@ 0x24
        return HAL_ERROR;
 80031e6:	2001      	movs	r0, #1
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 80031e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80031ea:	6925      	ldr	r5, [r4, #16]
 80031ec:	07ad      	lsls	r5, r5, #30
 80031ee:	d0f6      	beq.n	80031de <HAL_CAN_GetRxMessage+0x1a>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80031f0:	eb04 1c01 	add.w	ip, r4, r1, lsl #4
 80031f4:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 80031f8:	f8dc 51b0 	ldr.w	r5, [ip, #432]	@ 0x1b0
 80031fc:	f005 0504 	and.w	r5, r5, #4
 8003200:	6095      	str	r5, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003202:	2d00      	cmp	r5, #0
 8003204:	d051      	beq.n	80032aa <HAL_CAN_GetRxMessage+0xe6>
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003206:	f8dc 51b0 	ldr.w	r5, [ip, #432]	@ 0x1b0
 800320a:	08ed      	lsrs	r5, r5, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800320c:	6055      	str	r5, [r2, #4]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800320e:	f8dc 51b0 	ldr.w	r5, [ip, #432]	@ 0x1b0
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003212:	4474      	add	r4, lr
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003214:	f005 0502 	and.w	r5, r5, #2
 8003218:	60d5      	str	r5, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800321a:	f8dc 51b4 	ldr.w	r5, [ip, #436]	@ 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800321e:	f8dc 61b4 	ldr.w	r6, [ip, #436]	@ 0x1b4
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003222:	f005 050f 	and.w	r5, r5, #15
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003226:	f3c6 2607 	ubfx	r6, r6, #8, #8
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800322a:	6115      	str	r5, [r2, #16]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800322c:	f8dc 51b4 	ldr.w	r5, [ip, #436]	@ 0x1b4
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003230:	f8d4 71b8 	ldr.w	r7, [r4, #440]	@ 0x1b8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003234:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003236:	6196      	str	r6, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003238:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800323a:	701f      	strb	r7, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800323c:	6802      	ldr	r2, [r0, #0]
 800323e:	4472      	add	r2, lr
 8003240:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 8003244:	0a12      	lsrs	r2, r2, #8
 8003246:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003248:	6802      	ldr	r2, [r0, #0]
 800324a:	4472      	add	r2, lr
 800324c:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 8003250:	0c12      	lsrs	r2, r2, #16
 8003252:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003254:	6802      	ldr	r2, [r0, #0]
 8003256:	4472      	add	r2, lr
 8003258:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 800325c:	0e12      	lsrs	r2, r2, #24
 800325e:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003260:	6802      	ldr	r2, [r0, #0]
 8003262:	4472      	add	r2, lr
 8003264:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8003268:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800326a:	6802      	ldr	r2, [r0, #0]
 800326c:	4472      	add	r2, lr
 800326e:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8003272:	0a12      	lsrs	r2, r2, #8
 8003274:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003276:	6802      	ldr	r2, [r0, #0]
 8003278:	4472      	add	r2, lr
 800327a:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 800327e:	0c12      	lsrs	r2, r2, #16
 8003280:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003282:	6802      	ldr	r2, [r0, #0]
 8003284:	4472      	add	r2, lr
 8003286:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 800328a:	0e12      	lsrs	r2, r2, #24
 800328c:	71da      	strb	r2, [r3, #7]
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800328e:	6802      	ldr	r2, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003290:	b981      	cbnz	r1, 80032b4 <HAL_CAN_GetRxMessage+0xf0>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003292:	68d3      	ldr	r3, [r2, #12]
 8003294:	f043 0320 	orr.w	r3, r3, #32
 8003298:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 800329a:	2000      	movs	r0, #0
}
 800329c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800329e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80032a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032a4:	6243      	str	r3, [r0, #36]	@ 0x24
        return HAL_ERROR;
 80032a6:	2001      	movs	r0, #1
}
 80032a8:	4770      	bx	lr
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80032aa:	f8dc 51b0 	ldr.w	r5, [ip, #432]	@ 0x1b0
 80032ae:	0d6d      	lsrs	r5, r5, #21
 80032b0:	6015      	str	r5, [r2, #0]
 80032b2:	e7ac      	b.n	800320e <HAL_CAN_GetRxMessage+0x4a>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80032b4:	6913      	ldr	r3, [r2, #16]
 80032b6:	f043 0320 	orr.w	r3, r3, #32
 80032ba:	6113      	str	r3, [r2, #16]
 80032bc:	e7ed      	b.n	800329a <HAL_CAN_GetRxMessage+0xd6>
 80032be:	bf00      	nop

080032c0 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 80032c0:	f890 2020 	ldrb.w	r2, [r0, #32]
{
 80032c4:	4603      	mov	r3, r0

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80032c6:	3a01      	subs	r2, #1
 80032c8:	2a01      	cmp	r2, #1
 80032ca:	d905      	bls.n	80032d8 <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80032cc:	6a42      	ldr	r2, [r0, #36]	@ 0x24

    return HAL_ERROR;
 80032ce:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80032d0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80032d4:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 80032d6:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80032d8:	6802      	ldr	r2, [r0, #0]
    return HAL_OK;
 80032da:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80032dc:	6953      	ldr	r3, [r2, #20]
 80032de:	430b      	orrs	r3, r1
 80032e0:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 80032e2:	4770      	bx	lr

080032e4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @brief  Transmission Mailbox 0 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop

080032e8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @brief  Transmission Mailbox 1 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop

080032ec <HAL_CAN_TxMailbox2CompleteCallback>:
  * @brief  Transmission Mailbox 2 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop

080032f0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @brief  Transmission Mailbox 0 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop

080032f4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @brief  Transmission Mailbox 1 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop

080032f8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @brief  Transmission Mailbox 2 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop

080032fc <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @brief  Rx FIFO 0 message pending callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop

08003300 <HAL_CAN_RxFifo0FullCallback>:
  * @brief  Rx FIFO 0 full callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop

08003304 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @brief  Rx FIFO 1 message pending callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop

08003308 <HAL_CAN_RxFifo1FullCallback>:
  * @brief  Rx FIFO 1 full callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop

0800330c <HAL_CAN_SleepCallback>:
  * @brief  Sleep callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop

08003310 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @brief  WakeUp from Rx message callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop

08003314 <HAL_CAN_ErrorCallback>:
  * @brief  Error CAN callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop

08003318 <HAL_CAN_IRQHandler>:
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003318:	6803      	ldr	r3, [r0, #0]
{
 800331a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800331e:	695c      	ldr	r4, [r3, #20]
{
 8003320:	b083      	sub	sp, #12
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003322:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
 8003326:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003328:	f014 0601 	ands.w	r6, r4, #1
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800332c:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800332e:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003332:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003336:	f8d3 9018 	ldr.w	r9, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800333a:	d025      	beq.n	8003388 <HAL_CAN_IRQHandler+0x70>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800333c:	07fa      	lsls	r2, r7, #31
 800333e:	f100 80a2 	bmi.w	8003486 <HAL_CAN_IRQHandler+0x16e>
{
 8003342:	f44f 5600 	mov.w	r6, #8192	@ 0x2000
 8003346:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800334a:	2100      	movs	r1, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800334c:	05fb      	lsls	r3, r7, #23
 800334e:	f140 80af 	bpl.w	80034b0 <HAL_CAN_IRQHandler+0x198>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003352:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003356:	682b      	ldr	r3, [r5, #0]
 8003358:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800335a:	05ba      	lsls	r2, r7, #22
 800335c:	f100 80a3 	bmi.w	80034a6 <HAL_CAN_IRQHandler+0x18e>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003360:	057b      	lsls	r3, r7, #21
 8003362:	d403      	bmi.n	800336c <HAL_CAN_IRQHandler+0x54>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003364:	053e      	lsls	r6, r7, #20
 8003366:	f140 8121 	bpl.w	80035ac <HAL_CAN_IRQHandler+0x294>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800336a:	4606      	mov	r6, r0
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800336c:	03f9      	lsls	r1, r7, #15
 800336e:	d50b      	bpl.n	8003388 <HAL_CAN_IRQHandler+0x70>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003370:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003374:	682b      	ldr	r3, [r5, #0]
 8003376:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003378:	03ba      	lsls	r2, r7, #14
 800337a:	f100 80f9 	bmi.w	8003570 <HAL_CAN_IRQHandler+0x258>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800337e:	037b      	lsls	r3, r7, #13
 8003380:	f140 80ea 	bpl.w	8003558 <HAL_CAN_IRQHandler+0x240>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003384:	f446 4600 	orr.w	r6, r6, #32768	@ 0x8000
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003388:	0721      	lsls	r1, r4, #28
 800338a:	d502      	bpl.n	8003392 <HAL_CAN_IRQHandler+0x7a>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800338c:	f01b 0f10 	tst.w	fp, #16
 8003390:	d173      	bne.n	800347a <HAL_CAN_IRQHandler+0x162>
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003392:	0762      	lsls	r2, r4, #29
 8003394:	d503      	bpl.n	800339e <HAL_CAN_IRQHandler+0x86>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003396:	f01b 0f08 	tst.w	fp, #8
 800339a:	f040 80a8 	bne.w	80034ee <HAL_CAN_IRQHandler+0x1d6>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800339e:	07a3      	lsls	r3, r4, #30
 80033a0:	d504      	bpl.n	80033ac <HAL_CAN_IRQHandler+0x94>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80033a2:	682b      	ldr	r3, [r5, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	079f      	lsls	r7, r3, #30
 80033a8:	f040 808b 	bne.w	80034c2 <HAL_CAN_IRQHandler+0x1aa>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80033ac:	0660      	lsls	r0, r4, #25
 80033ae:	d502      	bpl.n	80033b6 <HAL_CAN_IRQHandler+0x9e>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80033b0:	f01a 0f10 	tst.w	sl, #16
 80033b4:	d15b      	bne.n	800346e <HAL_CAN_IRQHandler+0x156>
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80033b6:	06a1      	lsls	r1, r4, #26
 80033b8:	d502      	bpl.n	80033c0 <HAL_CAN_IRQHandler+0xa8>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80033ba:	f01a 0f08 	tst.w	sl, #8
 80033be:	d179      	bne.n	80034b4 <HAL_CAN_IRQHandler+0x19c>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80033c0:	06e2      	lsls	r2, r4, #27
 80033c2:	d503      	bpl.n	80033cc <HAL_CAN_IRQHandler+0xb4>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80033c4:	682b      	ldr	r3, [r5, #0]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	079b      	lsls	r3, r3, #30
 80033ca:	d17e      	bne.n	80034ca <HAL_CAN_IRQHandler+0x1b2>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80033cc:	03a7      	lsls	r7, r4, #14
 80033ce:	d502      	bpl.n	80033d6 <HAL_CAN_IRQHandler+0xbe>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80033d0:	f018 0f10 	tst.w	r8, #16
 80033d4:	d17d      	bne.n	80034d2 <HAL_CAN_IRQHandler+0x1ba>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80033d6:	03e0      	lsls	r0, r4, #15
 80033d8:	d502      	bpl.n	80033e0 <HAL_CAN_IRQHandler+0xc8>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80033da:	f018 0f08 	tst.w	r8, #8
 80033de:	d17f      	bne.n	80034e0 <HAL_CAN_IRQHandler+0x1c8>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80033e0:	0421      	lsls	r1, r4, #16
 80033e2:	d53f      	bpl.n	8003464 <HAL_CAN_IRQHandler+0x14c>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80033e4:	f018 0f04 	tst.w	r8, #4
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80033e8:	682b      	ldr	r3, [r5, #0]
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80033ea:	d039      	beq.n	8003460 <HAL_CAN_IRQHandler+0x148>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80033ec:	05e2      	lsls	r2, r4, #23
 80033ee:	d504      	bpl.n	80033fa <HAL_CAN_IRQHandler+0xe2>
 80033f0:	f019 0f01 	tst.w	r9, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 80033f4:	bf18      	it	ne
 80033f6:	f046 0601 	orrne.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80033fa:	05a7      	lsls	r7, r4, #22
 80033fc:	d47e      	bmi.n	80034fc <HAL_CAN_IRQHandler+0x1e4>
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80033fe:	0561      	lsls	r1, r4, #21
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003400:	f404 6200 	and.w	r2, r4, #2048	@ 0x800
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003404:	d528      	bpl.n	8003458 <HAL_CAN_IRQHandler+0x140>
 8003406:	f019 0f04 	tst.w	r9, #4
 800340a:	d025      	beq.n	8003458 <HAL_CAN_IRQHandler+0x140>
        errorcode |= HAL_CAN_ERROR_BOF;
 800340c:	f046 0604 	orr.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003410:	2a00      	cmp	r2, #0
 8003412:	f000 8083 	beq.w	800351c <HAL_CAN_IRQHandler+0x204>
 8003416:	f019 0970 	ands.w	r9, r9, #112	@ 0x70
 800341a:	d07f      	beq.n	800351c <HAL_CAN_IRQHandler+0x204>
        switch (esrflags & CAN_ESR_LEC)
 800341c:	f1b9 0f40 	cmp.w	r9, #64	@ 0x40
 8003420:	f000 80cf 	beq.w	80035c2 <HAL_CAN_IRQHandler+0x2aa>
 8003424:	d87d      	bhi.n	8003522 <HAL_CAN_IRQHandler+0x20a>
 8003426:	f1b9 0f20 	cmp.w	r9, #32
 800342a:	f000 80b3 	beq.w	8003594 <HAL_CAN_IRQHandler+0x27c>
 800342e:	f1b9 0f30 	cmp.w	r9, #48	@ 0x30
 8003432:	f040 8085 	bne.w	8003540 <HAL_CAN_IRQHandler+0x228>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003436:	699a      	ldr	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003438:	2104      	movs	r1, #4
            errorcode |= HAL_CAN_ERROR_ACK;
 800343a:	f046 0620 	orr.w	r6, r6, #32
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800343e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003442:	619a      	str	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003444:	6059      	str	r1, [r3, #4]
    hcan->ErrorCode |= errorcode;
 8003446:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
    HAL_CAN_ErrorCallback(hcan);
 8003448:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 800344a:	4333      	orrs	r3, r6
 800344c:	626b      	str	r3, [r5, #36]	@ 0x24
    HAL_CAN_ErrorCallback(hcan);
 800344e:	f7ff ff61 	bl	8003314 <HAL_CAN_ErrorCallback>
}
 8003452:	b003      	add	sp, #12
 8003454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003458:	b112      	cbz	r2, 8003460 <HAL_CAN_IRQHandler+0x148>
 800345a:	f019 0970 	ands.w	r9, r9, #112	@ 0x70
 800345e:	d1dd      	bne.n	800341c <HAL_CAN_IRQHandler+0x104>
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003460:	2204      	movs	r2, #4
 8003462:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003464:	2e00      	cmp	r6, #0
 8003466:	d1ee      	bne.n	8003446 <HAL_CAN_IRQHandler+0x12e>
}
 8003468:	b003      	add	sp, #12
 800346a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800346e:	682b      	ldr	r3, [r5, #0]
 8003470:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003472:	f446 6680 	orr.w	r6, r6, #1024	@ 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003476:	611a      	str	r2, [r3, #16]
 8003478:	e79d      	b.n	80033b6 <HAL_CAN_IRQHandler+0x9e>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800347a:	682b      	ldr	r3, [r5, #0]
 800347c:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800347e:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003482:	60da      	str	r2, [r3, #12]
 8003484:	e785      	b.n	8003392 <HAL_CAN_IRQHandler+0x7a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003486:	2201      	movs	r2, #1
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003488:	07be      	lsls	r6, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800348a:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800348c:	d443      	bmi.n	8003516 <HAL_CAN_IRQHandler+0x1fe>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800348e:	0779      	lsls	r1, r7, #29
 8003490:	d467      	bmi.n	8003562 <HAL_CAN_IRQHandler+0x24a>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003492:	073a      	lsls	r2, r7, #28
 8003494:	f140 8087 	bpl.w	80035a6 <HAL_CAN_IRQHandler+0x28e>
 8003498:	f44f 5640 	mov.w	r6, #12288	@ 0x3000
 800349c:	f44f 40a0 	mov.w	r0, #20480	@ 0x5000
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80034a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80034a4:	e752      	b.n	800334c <HAL_CAN_IRQHandler+0x34>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80034a6:	4628      	mov	r0, r5
 80034a8:	9101      	str	r1, [sp, #4]
 80034aa:	f7ff ff1d 	bl	80032e8 <HAL_CAN_TxMailbox1CompleteCallback>
 80034ae:	9901      	ldr	r1, [sp, #4]
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80034b0:	460e      	mov	r6, r1
 80034b2:	e75b      	b.n	800336c <HAL_CAN_IRQHandler+0x54>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80034b4:	682b      	ldr	r3, [r5, #0]
 80034b6:	2208      	movs	r2, #8
      HAL_CAN_RxFifo1FullCallback(hcan);
 80034b8:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80034ba:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 80034bc:	f7ff ff24 	bl	8003308 <HAL_CAN_RxFifo1FullCallback>
 80034c0:	e77e      	b.n	80033c0 <HAL_CAN_IRQHandler+0xa8>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80034c2:	4628      	mov	r0, r5
 80034c4:	f7ff ff1a 	bl	80032fc <HAL_CAN_RxFifo0MsgPendingCallback>
 80034c8:	e770      	b.n	80033ac <HAL_CAN_IRQHandler+0x94>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80034ca:	4628      	mov	r0, r5
 80034cc:	f7ff ff1a 	bl	8003304 <HAL_CAN_RxFifo1MsgPendingCallback>
 80034d0:	e77c      	b.n	80033cc <HAL_CAN_IRQHandler+0xb4>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80034d2:	682b      	ldr	r3, [r5, #0]
 80034d4:	2210      	movs	r2, #16
      HAL_CAN_SleepCallback(hcan);
 80034d6:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80034d8:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 80034da:	f7ff ff17 	bl	800330c <HAL_CAN_SleepCallback>
 80034de:	e77a      	b.n	80033d6 <HAL_CAN_IRQHandler+0xbe>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80034e0:	682b      	ldr	r3, [r5, #0]
 80034e2:	2208      	movs	r2, #8
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80034e4:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80034e6:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80034e8:	f7ff ff12 	bl	8003310 <HAL_CAN_WakeUpFromRxMsgCallback>
 80034ec:	e778      	b.n	80033e0 <HAL_CAN_IRQHandler+0xc8>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80034ee:	682b      	ldr	r3, [r5, #0]
 80034f0:	2208      	movs	r2, #8
      HAL_CAN_RxFifo0FullCallback(hcan);
 80034f2:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80034f4:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 80034f6:	f7ff ff03 	bl	8003300 <HAL_CAN_RxFifo0FullCallback>
 80034fa:	e750      	b.n	800339e <HAL_CAN_IRQHandler+0x86>
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80034fc:	f019 0f02 	tst.w	r9, #2
 8003500:	f43f af7d 	beq.w	80033fe <HAL_CAN_IRQHandler+0xe6>
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003504:	0560      	lsls	r0, r4, #21
        errorcode |= HAL_CAN_ERROR_EPV;
 8003506:	f046 0602 	orr.w	r6, r6, #2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800350a:	f404 6200 	and.w	r2, r4, #2048	@ 0x800
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800350e:	f53f af7a 	bmi.w	8003406 <HAL_CAN_IRQHandler+0xee>
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003512:	b11a      	cbz	r2, 800351c <HAL_CAN_IRQHandler+0x204>
 8003514:	e77f      	b.n	8003416 <HAL_CAN_IRQHandler+0xfe>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003516:	f7ff fee5 	bl	80032e4 <HAL_CAN_TxMailbox0CompleteCallback>
 800351a:	e712      	b.n	8003342 <HAL_CAN_IRQHandler+0x2a>
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800351c:	2204      	movs	r2, #4
 800351e:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003520:	e791      	b.n	8003446 <HAL_CAN_IRQHandler+0x12e>
        switch (esrflags & CAN_ESR_LEC)
 8003522:	f1b9 0f50 	cmp.w	r9, #80	@ 0x50
 8003526:	d027      	beq.n	8003578 <HAL_CAN_IRQHandler+0x260>
 8003528:	f1b9 0f60 	cmp.w	r9, #96	@ 0x60
 800352c:	d12d      	bne.n	800358a <HAL_CAN_IRQHandler+0x272>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800352e:	699a      	ldr	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003530:	2104      	movs	r1, #4
            errorcode |= HAL_CAN_ERROR_CRC;
 8003532:	f446 7680 	orr.w	r6, r6, #256	@ 0x100
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003536:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800353a:	619a      	str	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800353c:	6059      	str	r1, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 800353e:	e782      	b.n	8003446 <HAL_CAN_IRQHandler+0x12e>
        switch (esrflags & CAN_ESR_LEC)
 8003540:	f1b9 0f10 	cmp.w	r9, #16
 8003544:	d121      	bne.n	800358a <HAL_CAN_IRQHandler+0x272>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003546:	699a      	ldr	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003548:	2104      	movs	r1, #4
            errorcode |= HAL_CAN_ERROR_STF;
 800354a:	f046 0608 	orr.w	r6, r6, #8
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800354e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003552:	619a      	str	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003554:	6059      	str	r1, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003556:	e776      	b.n	8003446 <HAL_CAN_IRQHandler+0x12e>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003558:	0338      	lsls	r0, r7, #12
 800355a:	d52e      	bpl.n	80035ba <HAL_CAN_IRQHandler+0x2a2>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800355c:	f446 3680 	orr.w	r6, r6, #65536	@ 0x10000
 8003560:	e712      	b.n	8003388 <HAL_CAN_IRQHandler+0x70>
 8003562:	f44f 5620 	mov.w	r6, #10240	@ 0x2800
 8003566:	f44f 4090 	mov.w	r0, #18432	@ 0x4800
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800356a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800356e:	e6ed      	b.n	800334c <HAL_CAN_IRQHandler+0x34>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003570:	4628      	mov	r0, r5
 8003572:	f7ff febb 	bl	80032ec <HAL_CAN_TxMailbox2CompleteCallback>
 8003576:	e707      	b.n	8003388 <HAL_CAN_IRQHandler+0x70>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003578:	699a      	ldr	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800357a:	2104      	movs	r1, #4
            errorcode |= HAL_CAN_ERROR_BD;
 800357c:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003580:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003584:	619a      	str	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003586:	6059      	str	r1, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003588:	e75d      	b.n	8003446 <HAL_CAN_IRQHandler+0x12e>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800358a:	699a      	ldr	r2, [r3, #24]
 800358c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003590:	619a      	str	r2, [r3, #24]
 8003592:	e765      	b.n	8003460 <HAL_CAN_IRQHandler+0x148>
 8003594:	699a      	ldr	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003596:	2104      	movs	r1, #4
            errorcode |= HAL_CAN_ERROR_FOR;
 8003598:	f046 0610 	orr.w	r6, r6, #16
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800359c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80035a0:	619a      	str	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80035a2:	6059      	str	r1, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 80035a4:	e74f      	b.n	8003446 <HAL_CAN_IRQHandler+0x12e>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80035a6:	f7ff fea3 	bl	80032f0 <HAL_CAN_TxMailbox0AbortCallback>
 80035aa:	e6ca      	b.n	8003342 <HAL_CAN_IRQHandler+0x2a>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80035ac:	4628      	mov	r0, r5
 80035ae:	9101      	str	r1, [sp, #4]
 80035b0:	f7ff fea0 	bl	80032f4 <HAL_CAN_TxMailbox1AbortCallback>
 80035b4:	9901      	ldr	r1, [sp, #4]
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80035b6:	460e      	mov	r6, r1
 80035b8:	e6d8      	b.n	800336c <HAL_CAN_IRQHandler+0x54>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80035ba:	4628      	mov	r0, r5
 80035bc:	f7ff fe9c 	bl	80032f8 <HAL_CAN_TxMailbox2AbortCallback>
 80035c0:	e6e2      	b.n	8003388 <HAL_CAN_IRQHandler+0x70>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80035c2:	699a      	ldr	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80035c4:	2104      	movs	r1, #4
            errorcode |= HAL_CAN_ERROR_BR;
 80035c6:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80035ca:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80035ce:	619a      	str	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80035d0:	6059      	str	r1, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 80035d2:	e738      	b.n	8003446 <HAL_CAN_IRQHandler+0x12e>

080035d4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035d4:	4906      	ldr	r1, [pc, #24]	@ (80035f0 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035d6:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035da:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 80035dc:	4b05      	ldr	r3, [pc, #20]	@ (80035f4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035de:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035e0:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035e4:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035e8:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 80035ea:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80035ec:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80035ee:	4770      	bx	lr
 80035f0:	e000ed00 	.word	0xe000ed00
 80035f4:	05fa0000 	.word	0x05fa0000

080035f8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003664 <HAL_NVIC_SetPriority+0x6c>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003600:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003602:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003606:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800360a:	f1be 0f04 	cmp.w	lr, #4
 800360e:	bf28      	it	cs
 8003610:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003614:	f1bc 0f06 	cmp.w	ip, #6
 8003618:	d91a      	bls.n	8003650 <HAL_NVIC_SetPriority+0x58>
 800361a:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800361e:	f04f 33ff 	mov.w	r3, #4294967295
 8003622:	fa03 f30c 	lsl.w	r3, r3, ip
 8003626:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800362a:	f04f 33ff 	mov.w	r3, #4294967295
  if ((int32_t)(IRQn) >= 0)
 800362e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003630:	fa03 f30e 	lsl.w	r3, r3, lr
 8003634:	ea21 0303 	bic.w	r3, r1, r3
 8003638:	fa03 f30c 	lsl.w	r3, r3, ip
 800363c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003640:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003644:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8003646:	db06      	blt.n	8003656 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003648:	4a07      	ldr	r2, [pc, #28]	@ (8003668 <HAL_NVIC_SetPriority+0x70>)
 800364a:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800364c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003650:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003652:	4694      	mov	ip, r2
 8003654:	e7e9      	b.n	800362a <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003656:	f000 000f 	and.w	r0, r0, #15
 800365a:	4a04      	ldr	r2, [pc, #16]	@ (800366c <HAL_NVIC_SetPriority+0x74>)
 800365c:	5413      	strb	r3, [r2, r0]
 800365e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003662:	bf00      	nop
 8003664:	e000ed00 	.word	0xe000ed00
 8003668:	e000e400 	.word	0xe000e400
 800366c:	e000ed14 	.word	0xe000ed14

08003670 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003670:	2800      	cmp	r0, #0
 8003672:	db07      	blt.n	8003684 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003674:	f000 011f 	and.w	r1, r0, #31
 8003678:	2301      	movs	r3, #1
 800367a:	0940      	lsrs	r0, r0, #5
 800367c:	4a02      	ldr	r2, [pc, #8]	@ (8003688 <HAL_NVIC_EnableIRQ+0x18>)
 800367e:	408b      	lsls	r3, r1
 8003680:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	e000e100 	.word	0xe000e100

0800368c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800368c:	1e43      	subs	r3, r0, #1
 800368e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003692:	d301      	bcc.n	8003698 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003694:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003696:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003698:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800369c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800369e:	4905      	ldr	r1, [pc, #20]	@ (80036b4 <HAL_SYSTICK_Config+0x28>)
 80036a0:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036a4:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036a6:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036a8:	f881 c023 	strb.w	ip, [r1, #35]	@ 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036ac:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036ae:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	e000ed00 	.word	0xe000ed00

080036b8 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 80036b8:	b188      	cbz	r0, 80036de <HAL_DAC_Init+0x26>
{
 80036ba:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80036bc:	7903      	ldrb	r3, [r0, #4]
 80036be:	4604      	mov	r4, r0
 80036c0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80036c4:	b13b      	cbz	r3, 80036d6 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80036c6:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 80036c8:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80036ca:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 80036cc:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 80036ce:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80036d0:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80036d2:	7122      	strb	r2, [r4, #4]
}
 80036d4:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 80036d6:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 80036d8:	f7fe fb3e 	bl	8001d58 <HAL_DAC_MspInit>
 80036dc:	e7f3      	b.n	80036c6 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 80036de:	2001      	movs	r0, #1
}
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop

080036e4 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @brief  DMA underrun DAC callback for channel1.
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop

080036e8 <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80036e8:	6803      	ldr	r3, [r0, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	0491      	lsls	r1, r2, #18
{
 80036ee:	b510      	push	{r4, lr}
 80036f0:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80036f2:	d502      	bpl.n	80036fa <HAL_DAC_IRQHandler+0x12>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80036f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036f6:	0492      	lsls	r2, r2, #18
 80036f8:	d418      	bmi.n	800372c <HAL_DAC_IRQHandler+0x44>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	0091      	lsls	r1, r2, #2
 80036fe:	d502      	bpl.n	8003706 <HAL_DAC_IRQHandler+0x1e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003700:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003702:	0092      	lsls	r2, r2, #2
 8003704:	d400      	bmi.n	8003708 <HAL_DAC_IRQHandler+0x20>
}
 8003706:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 8003708:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800370a:	f04f 5100 	mov.w	r1, #536870912	@ 0x20000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800370e:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 8003710:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003712:	6922      	ldr	r2, [r4, #16]
 8003714:	f042 0202 	orr.w	r2, r2, #2
 8003718:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800371a:	6359      	str	r1, [r3, #52]	@ 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
}
 8003722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003726:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003728:	f000 b83c 	b.w	80037a4 <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 800372c:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800372e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
      hdac->State = HAL_DAC_STATE_ERROR;
 8003732:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003734:	6902      	ldr	r2, [r0, #16]
 8003736:	f042 0201 	orr.w	r2, r2, #1
 800373a:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800373c:	6359      	str	r1, [r3, #52]	@ 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003744:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003746:	f7ff ffcd 	bl	80036e4 <HAL_DAC_DMAUnderrunCallbackCh1>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800374a:	6823      	ldr	r3, [r4, #0]
 800374c:	e7d5      	b.n	80036fa <HAL_DAC_IRQHandler+0x12>
 800374e:	bf00      	nop

08003750 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003750:	4603      	mov	r3, r0
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003752:	7940      	ldrb	r0, [r0, #5]
 8003754:	2801      	cmp	r0, #1
 8003756:	d023      	beq.n	80037a0 <HAL_DAC_ConfigChannel+0x50>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003758:	2002      	movs	r0, #2

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800375a:	f002 0210 	and.w	r2, r2, #16
 800375e:	f640 7cfe 	movw	ip, #4094	@ 0xffe
{
 8003762:	b510      	push	{r4, lr}
  hdac->State = HAL_DAC_STATE_BUSY;
 8003764:	7118      	strb	r0, [r3, #4]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003766:	fa0c fc02 	lsl.w	ip, ip, r2
  tmpreg1 = hdac->Instance->CR;
 800376a:	681c      	ldr	r4, [r3, #0]
  hdac->Instance->CR = tmpreg1;
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800376c:	f04f 0e01 	mov.w	lr, #1
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003770:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003774:	4301      	orrs	r1, r0
  tmpreg1 = hdac->Instance->CR;
 8003776:	6820      	ldr	r0, [r4, #0]
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003778:	4091      	lsls	r1, r2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800377a:	ea20 000c 	bic.w	r0, r0, ip

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800377e:	f04f 0c00 	mov.w	ip, #0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003782:	4301      	orrs	r1, r0
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003784:	20c0      	movs	r0, #192	@ 0xc0
  hdac->Instance->CR = tmpreg1;
 8003786:	6021      	str	r1, [r4, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003788:	fa00 f102 	lsl.w	r1, r0, r2
 800378c:	6822      	ldr	r2, [r4, #0]

  /* Return function status */
  return HAL_OK;
 800378e:	4660      	mov	r0, ip
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003790:	ea22 0201 	bic.w	r2, r2, r1
 8003794:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8003796:	f883 e004 	strb.w	lr, [r3, #4]
  __HAL_UNLOCK(hdac);
 800379a:	f883 c005 	strb.w	ip, [r3, #5]
}
 800379e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdac);
 80037a0:	2002      	movs	r0, #2
}
 80037a2:	4770      	bx	lr

080037a4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @brief  DMA underrun DAC callback for Channel2.
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop

080037a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037a8:	b538      	push	{r3, r4, r5, lr}
 80037aa:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 80037ac:	f7ff f994 	bl	8002ad8 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037b0:	2c00      	cmp	r4, #0
 80037b2:	d074      	beq.n	800389e <HAL_DMA_Init+0xf6>
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80037b4:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 80037b6:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 80037b8:	2102      	movs	r1, #2
 80037ba:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 80037bc:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80037c0:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
  __HAL_DMA_DISABLE(hdma);
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	f022 0201 	bic.w	r2, r2, #1
 80037ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037cc:	e005      	b.n	80037da <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037ce:	f7ff f983 	bl	8002ad8 <HAL_GetTick>
 80037d2:	1b43      	subs	r3, r0, r5
 80037d4:	2b05      	cmp	r3, #5
 80037d6:	d83e      	bhi.n	8003856 <HAL_DMA_Init+0xae>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037d8:	6823      	ldr	r3, [r4, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	07d1      	lsls	r1, r2, #31
 80037de:	d4f6      	bmi.n	80037ce <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037e0:	e9d4 2501 	ldrd	r2, r5, [r4, #4]
 80037e4:	68e1      	ldr	r1, [r4, #12]
 80037e6:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037e8:	69a0      	ldr	r0, [r4, #24]
  tmp = hdma->Instance->CR;
 80037ea:	681d      	ldr	r5, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037ec:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037ee:	6921      	ldr	r1, [r4, #16]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	6961      	ldr	r1, [r4, #20]
 80037f4:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037f6:	69e1      	ldr	r1, [r4, #28]
 80037f8:	4302      	orrs	r2, r0
 80037fa:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037fc:	4934      	ldr	r1, [pc, #208]	@ (80038d0 <HAL_DMA_Init+0x128>)
 80037fe:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8003800:	6a25      	ldr	r5, [r4, #32]
 8003802:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003804:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003806:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003808:	2904      	cmp	r1, #4
 800380a:	d02b      	beq.n	8003864 <HAL_DMA_Init+0xbc>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800380c:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800380e:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003810:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003814:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003816:	b2da      	uxtb	r2, r3
  hdma->Instance->FCR = tmp;
 8003818:	6159      	str	r1, [r3, #20]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800381a:	482e      	ldr	r0, [pc, #184]	@ (80038d4 <HAL_DMA_Init+0x12c>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800381c:	f1a2 0110 	sub.w	r1, r2, #16
 8003820:	4a2d      	ldr	r2, [pc, #180]	@ (80038d8 <HAL_DMA_Init+0x130>)
 8003822:	fba2 5201 	umull	r5, r2, r2, r1
  
  if (stream_number > 3U)
 8003826:	295f      	cmp	r1, #95	@ 0x5f
  hdma->State = HAL_DMA_STATE_READY;
 8003828:	f04f 0501 	mov.w	r5, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800382c:	f04f 0100 	mov.w	r1, #0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003830:	ea4f 1212 	mov.w	r2, r2, lsr #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003834:	5c80      	ldrb	r0, [r0, r2]
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003836:	4a29      	ldr	r2, [pc, #164]	@ (80038dc <HAL_DMA_Init+0x134>)
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003838:	65e0      	str	r0, [r4, #92]	@ 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800383a:	ea02 0203 	and.w	r2, r2, r3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800383e:	f04f 033f 	mov.w	r3, #63	@ 0x3f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003842:	bf88      	it	hi
 8003844:	3204      	addhi	r2, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003846:	4083      	lsls	r3, r0
  return HAL_OK;
 8003848:	4608      	mov	r0, r1
 800384a:	65a2      	str	r2, [r4, #88]	@ 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800384c:	6093      	str	r3, [r2, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800384e:	6561      	str	r1, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8003850:	f884 5035 	strb.w	r5, [r4, #53]	@ 0x35
}
 8003854:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003856:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003858:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 800385a:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800385c:	6562      	str	r2, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800385e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
}
 8003862:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003864:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	@ 0x2c
 8003868:	4329      	orrs	r1, r5
 800386a:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 800386c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  hdma->Instance->CR = tmp;  
 800386e:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 8003870:	6959      	ldr	r1, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003872:	f021 0107 	bic.w	r1, r1, #7
 8003876:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 8003878:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800387c:	2d00      	cmp	r5, #0
 800387e:	d0ca      	beq.n	8003816 <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003880:	b178      	cbz	r0, 80038a2 <HAL_DMA_Init+0xfa>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003882:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 8003886:	d016      	beq.n	80038b6 <HAL_DMA_Init+0x10e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003888:	2a02      	cmp	r2, #2
 800388a:	d903      	bls.n	8003894 <HAL_DMA_Init+0xec>
 800388c:	2a03      	cmp	r2, #3
 800388e:	d1c2      	bne.n	8003816 <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003890:	01ea      	lsls	r2, r5, #7
 8003892:	d5c0      	bpl.n	8003816 <HAL_DMA_Init+0x6e>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003894:	2240      	movs	r2, #64	@ 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8003896:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003898:	6562      	str	r2, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800389a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 800389e:	2001      	movs	r0, #1
}
 80038a0:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 80038a2:	2a01      	cmp	r2, #1
 80038a4:	d003      	beq.n	80038ae <HAL_DMA_Init+0x106>
 80038a6:	f032 0202 	bics.w	r2, r2, #2
 80038aa:	d1b4      	bne.n	8003816 <HAL_DMA_Init+0x6e>
 80038ac:	e7f0      	b.n	8003890 <HAL_DMA_Init+0xe8>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038ae:	f1b5 7fc0 	cmp.w	r5, #25165824	@ 0x1800000
 80038b2:	d1b0      	bne.n	8003816 <HAL_DMA_Init+0x6e>
 80038b4:	e7ee      	b.n	8003894 <HAL_DMA_Init+0xec>
    switch (tmp)
 80038b6:	2a03      	cmp	r2, #3
 80038b8:	d8ad      	bhi.n	8003816 <HAL_DMA_Init+0x6e>
 80038ba:	a001      	add	r0, pc, #4	@ (adr r0, 80038c0 <HAL_DMA_Init+0x118>)
 80038bc:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80038c0:	08003895 	.word	0x08003895
 80038c4:	08003891 	.word	0x08003891
 80038c8:	08003895 	.word	0x08003895
 80038cc:	080038af 	.word	0x080038af
 80038d0:	e010803f 	.word	0xe010803f
 80038d4:	0800e694 	.word	0x0800e694
 80038d8:	aaaaaaab 	.word	0xaaaaaaab
 80038dc:	fffffc00 	.word	0xfffffc00

080038e0 <HAL_DMA_Start_IT>:
{
 80038e0:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 80038e2:	f890 c034 	ldrb.w	ip, [r0, #52]	@ 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038e6:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 80038e8:	f1bc 0f01 	cmp.w	ip, #1
 80038ec:	d009      	beq.n	8003902 <HAL_DMA_Start_IT+0x22>
 80038ee:	2401      	movs	r4, #1
 80038f0:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80038f4:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
 80038f8:	2c01      	cmp	r4, #1
 80038fa:	d005      	beq.n	8003908 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 80038fc:	2300      	movs	r3, #0
 80038fe:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
  __HAL_LOCK(hdma);
 8003902:	2002      	movs	r0, #2
}
 8003904:	bc70      	pop	{r4, r5, r6}
 8003906:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8003908:	2502      	movs	r5, #2
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800390a:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 800390c:	f880 5035 	strb.w	r5, [r0, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003910:	2500      	movs	r5, #0
 8003912:	6545      	str	r5, [r0, #84]	@ 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003914:	6825      	ldr	r5, [r4, #0]
 8003916:	f425 2580 	bic.w	r5, r5, #262144	@ 0x40000
 800391a:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 800391c:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800391e:	6883      	ldr	r3, [r0, #8]
 8003920:	2b40      	cmp	r3, #64	@ 0x40
 8003922:	d01a      	beq.n	800395a <HAL_DMA_Start_IT+0x7a>
    hdma->Instance->PAR = SrcAddress;
 8003924:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8003926:	60e2      	str	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003928:	6dc1      	ldr	r1, [r0, #92]	@ 0x5c
 800392a:	233f      	movs	r3, #63	@ 0x3f
    if(hdma->XferHalfCpltCallback != NULL)
 800392c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800392e:	408b      	lsls	r3, r1
 8003930:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003932:	6823      	ldr	r3, [r4, #0]
 8003934:	f043 0316 	orr.w	r3, r3, #22
 8003938:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800393a:	6963      	ldr	r3, [r4, #20]
 800393c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003940:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8003942:	b11a      	cbz	r2, 800394c <HAL_DMA_Start_IT+0x6c>
      hdma->Instance->CR  |= DMA_IT_HT;
 8003944:	6823      	ldr	r3, [r4, #0]
 8003946:	f043 0308 	orr.w	r3, r3, #8
 800394a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800394c:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800394e:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8003950:	f043 0301 	orr.w	r3, r3, #1
 8003954:	6023      	str	r3, [r4, #0]
}
 8003956:	bc70      	pop	{r4, r5, r6}
 8003958:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 800395a:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 800395c:	60e1      	str	r1, [r4, #12]
 800395e:	e7e3      	b.n	8003928 <HAL_DMA_Start_IT+0x48>

08003960 <HAL_DMA_IRQHandler>:
{
 8003960:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8003962:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600;
 8003964:	4b66      	ldr	r3, [pc, #408]	@ (8003b00 <HAL_DMA_IRQHandler+0x1a0>)
{
 8003966:	b083      	sub	sp, #12
 8003968:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600;
 800396a:	681e      	ldr	r6, [r3, #0]
  __IO uint32_t count = 0;
 800396c:	9201      	str	r2, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800396e:	2208      	movs	r2, #8
 8003970:	e9d0 7316 	ldrd	r7, r3, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 8003974:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003976:	409a      	lsls	r2, r3
 8003978:	422a      	tst	r2, r5
 800397a:	d004      	beq.n	8003986 <HAL_DMA_IRQHandler+0x26>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800397c:	6801      	ldr	r1, [r0, #0]
 800397e:	6808      	ldr	r0, [r1, #0]
 8003980:	0740      	lsls	r0, r0, #29
 8003982:	f100 8097 	bmi.w	8003ab4 <HAL_DMA_IRQHandler+0x154>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003986:	2201      	movs	r2, #1
 8003988:	409a      	lsls	r2, r3
 800398a:	422a      	tst	r2, r5
 800398c:	d004      	beq.n	8003998 <HAL_DMA_IRQHandler+0x38>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800398e:	6821      	ldr	r1, [r4, #0]
 8003990:	6949      	ldr	r1, [r1, #20]
 8003992:	0608      	lsls	r0, r1, #24
 8003994:	f100 8088 	bmi.w	8003aa8 <HAL_DMA_IRQHandler+0x148>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003998:	2204      	movs	r2, #4
 800399a:	409a      	lsls	r2, r3
 800399c:	422a      	tst	r2, r5
 800399e:	d003      	beq.n	80039a8 <HAL_DMA_IRQHandler+0x48>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80039a0:	6821      	ldr	r1, [r4, #0]
 80039a2:	6809      	ldr	r1, [r1, #0]
 80039a4:	0789      	lsls	r1, r1, #30
 80039a6:	d479      	bmi.n	8003a9c <HAL_DMA_IRQHandler+0x13c>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80039a8:	2210      	movs	r2, #16
 80039aa:	409a      	lsls	r2, r3
 80039ac:	422a      	tst	r2, r5
 80039ae:	d003      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x58>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80039b0:	6821      	ldr	r1, [r4, #0]
 80039b2:	6808      	ldr	r0, [r1, #0]
 80039b4:	0700      	lsls	r0, r0, #28
 80039b6:	d45e      	bmi.n	8003a76 <HAL_DMA_IRQHandler+0x116>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80039b8:	2220      	movs	r2, #32
 80039ba:	409a      	lsls	r2, r3
 80039bc:	422a      	tst	r2, r5
 80039be:	d014      	beq.n	80039ea <HAL_DMA_IRQHandler+0x8a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80039c0:	6821      	ldr	r1, [r4, #0]
 80039c2:	6808      	ldr	r0, [r1, #0]
 80039c4:	06c0      	lsls	r0, r0, #27
 80039c6:	d510      	bpl.n	80039ea <HAL_DMA_IRQHandler+0x8a>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80039c8:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80039ca:	f894 2035 	ldrb.w	r2, [r4, #53]	@ 0x35
 80039ce:	2a05      	cmp	r2, #5
 80039d0:	d033      	beq.n	8003a3a <HAL_DMA_IRQHandler+0xda>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039d2:	680b      	ldr	r3, [r1, #0]
 80039d4:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039d8:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039da:	d07b      	beq.n	8003ad4 <HAL_DMA_IRQHandler+0x174>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039dc:	0319      	lsls	r1, r3, #12
 80039de:	f140 8086 	bpl.w	8003aee <HAL_DMA_IRQHandler+0x18e>
        if(hdma->XferCpltCallback != NULL)
 80039e2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80039e4:	b10b      	cbz	r3, 80039ea <HAL_DMA_IRQHandler+0x8a>
          hdma->XferCpltCallback(hdma);
 80039e6:	4620      	mov	r0, r4
 80039e8:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039ea:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d040      	beq.n	8003a72 <HAL_DMA_IRQHandler+0x112>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80039f0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80039f2:	07da      	lsls	r2, r3, #31
 80039f4:	d51a      	bpl.n	8003a2c <HAL_DMA_IRQHandler+0xcc>
      __HAL_DMA_DISABLE(hdma);
 80039f6:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 80039f8:	2105      	movs	r1, #5
  uint32_t timeout = SystemCoreClock / 9600;
 80039fa:	4b42      	ldr	r3, [pc, #264]	@ (8003b04 <HAL_DMA_IRQHandler+0x1a4>)
      hdma->State = HAL_DMA_STATE_ABORT;
 80039fc:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
  uint32_t timeout = SystemCoreClock / 9600;
 8003a00:	fba3 3606 	umull	r3, r6, r3, r6
      __HAL_DMA_DISABLE(hdma);
 8003a04:	6813      	ldr	r3, [r2, #0]
 8003a06:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 8003a0a:	0ab6      	lsrs	r6, r6, #10
      __HAL_DMA_DISABLE(hdma);
 8003a0c:	6013      	str	r3, [r2, #0]
 8003a0e:	e002      	b.n	8003a16 <HAL_DMA_IRQHandler+0xb6>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a10:	6813      	ldr	r3, [r2, #0]
 8003a12:	07db      	lsls	r3, r3, #31
 8003a14:	d504      	bpl.n	8003a20 <HAL_DMA_IRQHandler+0xc0>
        if (++count > timeout)
 8003a16:	9b01      	ldr	r3, [sp, #4]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	42b3      	cmp	r3, r6
 8003a1c:	9301      	str	r3, [sp, #4]
 8003a1e:	d9f7      	bls.n	8003a10 <HAL_DMA_IRQHandler+0xb0>
      hdma->State = HAL_DMA_STATE_READY;
 8003a20:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8003a22:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 8003a24:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8003a28:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8003a2c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8003a2e:	b303      	cbz	r3, 8003a72 <HAL_DMA_IRQHandler+0x112>
      hdma->XferErrorCallback(hdma);
 8003a30:	4620      	mov	r0, r4
}
 8003a32:	b003      	add	sp, #12
 8003a34:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8003a38:	4718      	bx	r3
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a3a:	680a      	ldr	r2, [r1, #0]
 8003a3c:	f022 0216 	bic.w	r2, r2, #22
 8003a40:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a42:	694a      	ldr	r2, [r1, #20]
 8003a44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a48:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a4a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003a4c:	2a00      	cmp	r2, #0
 8003a4e:	d053      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x198>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a50:	680a      	ldr	r2, [r1, #0]
 8003a52:	f022 0208 	bic.w	r2, r2, #8
 8003a56:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a58:	223f      	movs	r2, #63	@ 0x3f
        hdma->State = HAL_DMA_STATE_READY;
 8003a5a:	2101      	movs	r1, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 8003a60:	2200      	movs	r2, #0
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a62:	60bb      	str	r3, [r7, #8]
        if(hdma->XferAbortCallback != NULL)
 8003a64:	6d23      	ldr	r3, [r4, #80]	@ 0x50
        hdma->State = HAL_DMA_STATE_READY;
 8003a66:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8003a6a:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1de      	bne.n	8003a30 <HAL_DMA_IRQHandler+0xd0>
}
 8003a72:	b003      	add	sp, #12
 8003a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a76:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a78:	680a      	ldr	r2, [r1, #0]
 8003a7a:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a7e:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a80:	d122      	bne.n	8003ac8 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a82:	05d2      	lsls	r2, r2, #23
 8003a84:	d403      	bmi.n	8003a8e <HAL_DMA_IRQHandler+0x12e>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a86:	680a      	ldr	r2, [r1, #0]
 8003a88:	f022 0208 	bic.w	r2, r2, #8
 8003a8c:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8003a8e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003a90:	2a00      	cmp	r2, #0
 8003a92:	d091      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x58>
          hdma->XferHalfCpltCallback(hdma);
 8003a94:	4620      	mov	r0, r4
 8003a96:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a98:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003a9a:	e78d      	b.n	80039b8 <HAL_DMA_IRQHandler+0x58>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a9c:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a9e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003aa0:	f042 0204 	orr.w	r2, r2, #4
 8003aa4:	6562      	str	r2, [r4, #84]	@ 0x54
 8003aa6:	e77f      	b.n	80039a8 <HAL_DMA_IRQHandler+0x48>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003aa8:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003aaa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003aac:	f042 0202 	orr.w	r2, r2, #2
 8003ab0:	6562      	str	r2, [r4, #84]	@ 0x54
 8003ab2:	e771      	b.n	8003998 <HAL_DMA_IRQHandler+0x38>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003ab4:	6808      	ldr	r0, [r1, #0]
 8003ab6:	f020 0004 	bic.w	r0, r0, #4
 8003aba:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003abc:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003abe:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003ac0:	f042 0201 	orr.w	r2, r2, #1
 8003ac4:	6562      	str	r2, [r4, #84]	@ 0x54
 8003ac6:	e75e      	b.n	8003986 <HAL_DMA_IRQHandler+0x26>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ac8:	0311      	lsls	r1, r2, #12
 8003aca:	d5e0      	bpl.n	8003a8e <HAL_DMA_IRQHandler+0x12e>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003acc:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8003ace:	2a00      	cmp	r2, #0
 8003ad0:	d1e0      	bne.n	8003a94 <HAL_DMA_IRQHandler+0x134>
 8003ad2:	e771      	b.n	80039b8 <HAL_DMA_IRQHandler+0x58>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ad4:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
 8003ad8:	d183      	bne.n	80039e2 <HAL_DMA_IRQHandler+0x82>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ada:	680a      	ldr	r2, [r1, #0]
 8003adc:	f022 0210 	bic.w	r2, r2, #16
 8003ae0:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8003ae2:	2201      	movs	r2, #1
          __HAL_UNLOCK(hdma);
 8003ae4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8003ae8:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8003aec:	e779      	b.n	80039e2 <HAL_DMA_IRQHandler+0x82>
          if(hdma->XferM1CpltCallback != NULL)
 8003aee:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f47f af78 	bne.w	80039e6 <HAL_DMA_IRQHandler+0x86>
 8003af6:	e778      	b.n	80039ea <HAL_DMA_IRQHandler+0x8a>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003af8:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8003afa:	2a00      	cmp	r2, #0
 8003afc:	d1a8      	bne.n	8003a50 <HAL_DMA_IRQHandler+0xf0>
 8003afe:	e7ab      	b.n	8003a58 <HAL_DMA_IRQHandler+0xf8>
 8003b00:	20000168 	.word	0x20000168
 8003b04:	1b4e81b5 	.word	0x1b4e81b5

08003b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b0c:	2300      	movs	r3, #0
{
 8003b0e:	b085      	sub	sp, #20
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003b10:	f04f 0b01 	mov.w	fp, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b14:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b16:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8003d5c <HAL_GPIO_Init+0x254>

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003b1a:	4689      	mov	r9, r1
 8003b1c:	e003      	b.n	8003b26 <HAL_GPIO_Init+0x1e>
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b1e:	3301      	adds	r3, #1
 8003b20:	2b10      	cmp	r3, #16
 8003b22:	f000 809b 	beq.w	8003c5c <HAL_GPIO_Init+0x154>
    ioposition = ((uint32_t)0x01) << position;
 8003b26:	fa0b f203 	lsl.w	r2, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b2a:	ea02 0804 	and.w	r8, r2, r4
    if(iocurrent == ioposition)
 8003b2e:	43a2      	bics	r2, r4
 8003b30:	d1f5      	bne.n	8003b1e <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b32:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8003b36:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003b3a:	2503      	movs	r5, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b3c:	f001 0203 	and.w	r2, r1, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003b40:	fa05 f50c 	lsl.w	r5, r5, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b44:	1e57      	subs	r7, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003b46:	43ed      	mvns	r5, r5
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b48:	2f01      	cmp	r7, #1
 8003b4a:	f240 808a 	bls.w	8003c62 <HAL_GPIO_Init+0x15a>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b4e:	2a03      	cmp	r2, #3
 8003b50:	f040 80c3 	bne.w	8003cda <HAL_GPIO_Init+0x1d2>
      temp = GPIOx->MODER;
 8003b54:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003b56:	fa02 f20c 	lsl.w	r2, r2, ip
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b5a:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003b5e:	ea05 0507 	and.w	r5, r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003b62:	ea42 0205 	orr.w	r2, r2, r5
      GPIOx->MODER = temp;
 8003b66:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b68:	d0d9      	beq.n	8003b1e <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b6a:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8003b6e:	f023 0503 	bic.w	r5, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003b72:	f003 0703 	and.w	r7, r3, #3
 8003b76:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b78:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b7c:	f105 4580 	add.w	r5, r5, #1073741824	@ 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003b80:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b82:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
 8003b86:	f505 359c 	add.w	r5, r5, #79872	@ 0x13800
 8003b8a:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003b8e:	fa06 fc07 	lsl.w	ip, r6, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003b92:	4e6f      	ldr	r6, [pc, #444]	@ (8003d50 <HAL_GPIO_Init+0x248>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b94:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003b98:	42b0      	cmp	r0, r6
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b9a:	9203      	str	r2, [sp, #12]
 8003b9c:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8003b9e:	68aa      	ldr	r2, [r5, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003ba0:	ea22 020c 	bic.w	r2, r2, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003ba4:	d031      	beq.n	8003c0a <HAL_GPIO_Init+0x102>
 8003ba6:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003baa:	42b0      	cmp	r0, r6
 8003bac:	f000 80a0 	beq.w	8003cf0 <HAL_GPIO_Init+0x1e8>
 8003bb0:	4e68      	ldr	r6, [pc, #416]	@ (8003d54 <HAL_GPIO_Init+0x24c>)
 8003bb2:	42b0      	cmp	r0, r6
 8003bb4:	f000 80a2 	beq.w	8003cfc <HAL_GPIO_Init+0x1f4>
 8003bb8:	f8df c1a4 	ldr.w	ip, [pc, #420]	@ 8003d60 <HAL_GPIO_Init+0x258>
 8003bbc:	4560      	cmp	r0, ip
 8003bbe:	f000 80a3 	beq.w	8003d08 <HAL_GPIO_Init+0x200>
 8003bc2:	f8df c1a0 	ldr.w	ip, [pc, #416]	@ 8003d64 <HAL_GPIO_Init+0x25c>
 8003bc6:	4560      	cmp	r0, ip
 8003bc8:	f000 80a4 	beq.w	8003d14 <HAL_GPIO_Init+0x20c>
 8003bcc:	f8df c198 	ldr.w	ip, [pc, #408]	@ 8003d68 <HAL_GPIO_Init+0x260>
 8003bd0:	4560      	cmp	r0, ip
 8003bd2:	f000 80ab 	beq.w	8003d2c <HAL_GPIO_Init+0x224>
 8003bd6:	f8df c194 	ldr.w	ip, [pc, #404]	@ 8003d6c <HAL_GPIO_Init+0x264>
 8003bda:	4560      	cmp	r0, ip
 8003bdc:	f000 80ac 	beq.w	8003d38 <HAL_GPIO_Init+0x230>
 8003be0:	f8df c18c 	ldr.w	ip, [pc, #396]	@ 8003d70 <HAL_GPIO_Init+0x268>
 8003be4:	4560      	cmp	r0, ip
 8003be6:	f000 809b 	beq.w	8003d20 <HAL_GPIO_Init+0x218>
 8003bea:	f8df c188 	ldr.w	ip, [pc, #392]	@ 8003d74 <HAL_GPIO_Init+0x26c>
 8003bee:	4560      	cmp	r0, ip
 8003bf0:	f000 80a8 	beq.w	8003d44 <HAL_GPIO_Init+0x23c>
 8003bf4:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8003d78 <HAL_GPIO_Init+0x270>
 8003bf8:	4560      	cmp	r0, ip
 8003bfa:	bf0c      	ite	eq
 8003bfc:	f04f 0c09 	moveq.w	ip, #9
 8003c00:	f04f 0c0a 	movne.w	ip, #10
 8003c04:	fa0c f707 	lsl.w	r7, ip, r7
 8003c08:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8003c0a:	60aa      	str	r2, [r5, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c0c:	02ce      	lsls	r6, r1, #11
        temp = EXTI->RTSR;
 8003c0e:	4a52      	ldr	r2, [pc, #328]	@ (8003d58 <HAL_GPIO_Init+0x250>)
        temp &= ~((uint32_t)iocurrent);
 8003c10:	ea6f 0508 	mvn.w	r5, r8
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8003c14:	4e50      	ldr	r6, [pc, #320]	@ (8003d58 <HAL_GPIO_Init+0x250>)
  for(position = 0; position < GPIO_NUMBER; position++)
 8003c16:	f103 0301 	add.w	r3, r3, #1
        temp = EXTI->RTSR;
 8003c1a:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8003c1c:	bf54      	ite	pl
 8003c1e:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8003c20:	ea48 0202 	orrmi.w	r2, r8, r2

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c24:	028f      	lsls	r7, r1, #10
        EXTI->RTSR = temp;
 8003c26:	60b2      	str	r2, [r6, #8]
        temp = EXTI->FTSR;
 8003c28:	68f2      	ldr	r2, [r6, #12]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8003c2a:	4e4b      	ldr	r6, [pc, #300]	@ (8003d58 <HAL_GPIO_Init+0x250>)
        temp &= ~((uint32_t)iocurrent);
 8003c2c:	bf54      	ite	pl
 8003c2e:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8003c30:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR = temp;
 8003c34:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 8003c36:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c38:	038e      	lsls	r6, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8003c3a:	4e47      	ldr	r6, [pc, #284]	@ (8003d58 <HAL_GPIO_Init+0x250>)
        temp &= ~((uint32_t)iocurrent);
 8003c3c:	bf54      	ite	pl
 8003c3e:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8003c40:	ea48 0202 	orrmi.w	r2, r8, r2

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c44:	03c9      	lsls	r1, r1, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8003c46:	4944      	ldr	r1, [pc, #272]	@ (8003d58 <HAL_GPIO_Init+0x250>)
        EXTI->EMR = temp;
 8003c48:	6072      	str	r2, [r6, #4]
        temp = EXTI->IMR;
 8003c4a:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 8003c4c:	bf54      	ite	pl
 8003c4e:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8003c50:	ea48 0202 	orrmi.w	r2, r8, r2
  for(position = 0; position < GPIO_NUMBER; position++)
 8003c54:	2b10      	cmp	r3, #16
        EXTI->IMR = temp;
 8003c56:	600a      	str	r2, [r1, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003c58:	f47f af65 	bne.w	8003b26 <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8003c5c:	b005      	add	sp, #20
 8003c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8003c62:	6887      	ldr	r7, [r0, #8]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c64:	2a02      	cmp	r2, #2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003c66:	ea07 0e05 	and.w	lr, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8003c6a:	f8d9 700c 	ldr.w	r7, [r9, #12]
 8003c6e:	fa07 f70c 	lsl.w	r7, r7, ip
 8003c72:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8003c76:	6087      	str	r7, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c78:	f3c1 1700 	ubfx	r7, r1, #4, #1
        temp = GPIOx->OTYPER;
 8003c7c:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c80:	fa07 f703 	lsl.w	r7, r7, r3
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c84:	ea2e 0e08 	bic.w	lr, lr, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c88:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8003c8c:	6047      	str	r7, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003c8e:	f8d9 7008 	ldr.w	r7, [r9, #8]
        temp = GPIOx->PUPDR;
 8003c92:	f8d0 e00c 	ldr.w	lr, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003c96:	fa07 f70c 	lsl.w	r7, r7, ip
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003c9a:	ea0e 0e05 	and.w	lr, lr, r5
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003c9e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8003ca2:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ca4:	f47f af56 	bne.w	8003b54 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3];
 8003ca8:	08df      	lsrs	r7, r3, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003caa:	f003 0e07 	and.w	lr, r3, #7
 8003cae:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8003cb2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8003cb6:	6a3e      	ldr	r6, [r7, #32]
 8003cb8:	9701      	str	r7, [sp, #4]
 8003cba:	9600      	str	r6, [sp, #0]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003cbc:	260f      	movs	r6, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003cbe:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8003cc2:	fa07 f70e 	lsl.w	r7, r7, lr
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003cc6:	fa06 fe0e 	lsl.w	lr, r6, lr
 8003cca:	9e00      	ldr	r6, [sp, #0]
 8003ccc:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3] = temp;
 8003cd0:	9e01      	ldr	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003cd2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 8003cd6:	6237      	str	r7, [r6, #32]
 8003cd8:	e73c      	b.n	8003b54 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->PUPDR;
 8003cda:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003cdc:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003ce0:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8003ce4:	fa07 f70c 	lsl.w	r7, r7, ip
 8003ce8:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8003cec:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cee:	e731      	b.n	8003b54 <HAL_GPIO_Init+0x4c>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003cf0:	f04f 0c01 	mov.w	ip, #1
 8003cf4:	fa0c f707 	lsl.w	r7, ip, r7
 8003cf8:	433a      	orrs	r2, r7
 8003cfa:	e786      	b.n	8003c0a <HAL_GPIO_Init+0x102>
 8003cfc:	f04f 0c02 	mov.w	ip, #2
 8003d00:	fa0c f707 	lsl.w	r7, ip, r7
 8003d04:	433a      	orrs	r2, r7
 8003d06:	e780      	b.n	8003c0a <HAL_GPIO_Init+0x102>
 8003d08:	f04f 0c03 	mov.w	ip, #3
 8003d0c:	fa0c f707 	lsl.w	r7, ip, r7
 8003d10:	433a      	orrs	r2, r7
 8003d12:	e77a      	b.n	8003c0a <HAL_GPIO_Init+0x102>
 8003d14:	f04f 0c04 	mov.w	ip, #4
 8003d18:	fa0c f707 	lsl.w	r7, ip, r7
 8003d1c:	433a      	orrs	r2, r7
 8003d1e:	e774      	b.n	8003c0a <HAL_GPIO_Init+0x102>
 8003d20:	f04f 0c07 	mov.w	ip, #7
 8003d24:	fa0c f707 	lsl.w	r7, ip, r7
 8003d28:	433a      	orrs	r2, r7
 8003d2a:	e76e      	b.n	8003c0a <HAL_GPIO_Init+0x102>
 8003d2c:	f04f 0c05 	mov.w	ip, #5
 8003d30:	fa0c f707 	lsl.w	r7, ip, r7
 8003d34:	433a      	orrs	r2, r7
 8003d36:	e768      	b.n	8003c0a <HAL_GPIO_Init+0x102>
 8003d38:	f04f 0c06 	mov.w	ip, #6
 8003d3c:	fa0c f707 	lsl.w	r7, ip, r7
 8003d40:	433a      	orrs	r2, r7
 8003d42:	e762      	b.n	8003c0a <HAL_GPIO_Init+0x102>
 8003d44:	f04f 0c08 	mov.w	ip, #8
 8003d48:	fa0c f707 	lsl.w	r7, ip, r7
 8003d4c:	433a      	orrs	r2, r7
 8003d4e:	e75c      	b.n	8003c0a <HAL_GPIO_Init+0x102>
 8003d50:	40020000 	.word	0x40020000
 8003d54:	40020800 	.word	0x40020800
 8003d58:	40013c00 	.word	0x40013c00
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	40020c00 	.word	0x40020c00
 8003d64:	40021000 	.word	0x40021000
 8003d68:	40021400 	.word	0x40021400
 8003d6c:	40021800 	.word	0x40021800
 8003d70:	40021c00 	.word	0x40021c00
 8003d74:	40022000 	.word	0x40022000
 8003d78:	40022400 	.word	0x40022400

08003d7c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d7c:	6903      	ldr	r3, [r0, #16]
 8003d7e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003d80:	bf14      	ite	ne
 8003d82:	2001      	movne	r0, #1
 8003d84:	2000      	moveq	r0, #0
 8003d86:	4770      	bx	lr

08003d88 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d88:	b902      	cbnz	r2, 8003d8c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003d8a:	0409      	lsls	r1, r1, #16
 8003d8c:	6181      	str	r1, [r0, #24]
  }
}
 8003d8e:	4770      	bx	lr

08003d90 <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d90:	2800      	cmp	r0, #0
 8003d92:	d04e      	beq.n	8003e32 <HAL_I2C_Init+0xa2>
{
 8003d94:	b510      	push	{r4, lr}
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d96:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8003d9a:	4604      	mov	r4, r0
 8003d9c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d041      	beq.n	8003e28 <HAL_I2C_Init+0x98>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003da4:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003da6:	2124      	movs	r1, #36	@ 0x24

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003da8:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003daa:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003dae:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003db0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003db4:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8003db6:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dba:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 8003dbc:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003dbe:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003dc0:	689a      	ldr	r2, [r3, #8]
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003dc2:	68a1      	ldr	r1, [r4, #8]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003dc4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003dc8:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dca:	d029      	beq.n	8003e20 <HAL_I2C_Init+0x90>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003dcc:	f441 4104 	orr.w	r1, r1, #33792	@ 0x8400
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003dd0:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003dd2:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003dd4:	d102      	bne.n	8003ddc <HAL_I2C_Init+0x4c>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003dd6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003dda:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ddc:	6858      	ldr	r0, [r3, #4]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_READY;
 8003dde:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003de2:	4915      	ldr	r1, [pc, #84]	@ (8003e38 <HAL_I2C_Init+0xa8>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003de4:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003de6:	4301      	orrs	r1, r0
 8003de8:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003dea:	68d9      	ldr	r1, [r3, #12]
 8003dec:	f421 4100 	bic.w	r1, r1, #32768	@ 0x8000
 8003df0:	60d9      	str	r1, [r3, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003df2:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003df6:	4302      	orrs	r2, r0
 8003df8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003dfc:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e00:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e02:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e04:	4301      	orrs	r1, r0
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 8003e06:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e08:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003e0a:	6819      	ldr	r1, [r3, #0]
 8003e0c:	f041 0101 	orr.w	r1, r1, #1
 8003e10:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e12:	6462      	str	r2, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e14:	f884 c041 	strb.w	ip, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e18:	6322      	str	r2, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e1a:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
}
 8003e1e:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e20:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8003e24:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e26:	e7d9      	b.n	8003ddc <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 8003e28:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8003e2c:	f7fe f918 	bl	8002060 <HAL_I2C_MspInit>
 8003e30:	e7b8      	b.n	8003da4 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8003e32:	2001      	movs	r0, #1
}
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	02008000 	.word	0x02008000

08003e3c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e3c:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8003e40:	2a20      	cmp	r2, #32
 8003e42:	d123      	bne.n	8003e8c <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8003e44:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e48:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2a01      	cmp	r2, #1
 8003e50:	d01c      	beq.n	8003e8c <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e52:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e54:	2024      	movs	r0, #36	@ 0x24
{
 8003e56:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e58:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e5c:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_DISABLE(hi2c);
 8003e60:	6810      	ldr	r0, [r2, #0]
 8003e62:	f020 0001 	bic.w	r0, r0, #1
 8003e66:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e68:	6810      	ldr	r0, [r2, #0]
 8003e6a:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8003e6e:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e70:	6810      	ldr	r0, [r2, #0]
 8003e72:	4301      	orrs	r1, r0

    return HAL_OK;
 8003e74:	4670      	mov	r0, lr
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e76:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003e78:	6811      	ldr	r1, [r2, #0]
 8003e7a:	f041 0101 	orr.w	r1, r1, #1
 8003e7e:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003e80:	f883 c041 	strb.w	ip, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8003e84:	f883 e040 	strb.w	lr, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003e88:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 8003e8c:	2002      	movs	r0, #2
}
 8003e8e:	4770      	bx	lr

08003e90 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e90:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8003e94:	2a20      	cmp	r2, #32
 8003e96:	d122      	bne.n	8003ede <HAL_I2CEx_ConfigDigitalFilter+0x4e>
 8003e98:	4603      	mov	r3, r0
{
 8003e9a:	b500      	push	{lr}
 8003e9c:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ea0:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8003ea4:	2a01      	cmp	r2, #1
 8003ea6:	d01c      	beq.n	8003ee2 <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ea8:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003eaa:	2024      	movs	r0, #36	@ 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eac:	f04f 0c00 	mov.w	ip, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003eb0:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 8003eb4:	6810      	ldr	r0, [r2, #0]
 8003eb6:	f020 0001 	bic.w	r0, r0, #1
 8003eba:	6010      	str	r0, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 8003ebc:	6810      	ldr	r0, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8003ebe:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00
    tmpreg |= DigitalFilter << 8U;
 8003ec2:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    return HAL_OK;
 8003ec6:	4660      	mov	r0, ip
    hi2c->Instance->CR1 = tmpreg;
 8003ec8:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003eca:	6811      	ldr	r1, [r2, #0]
 8003ecc:	f041 0101 	orr.w	r1, r1, #1
 8003ed0:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003ed2:	f883 e041 	strb.w	lr, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8003ed6:	f883 c040 	strb.w	ip, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003eda:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 8003ede:	2002      	movs	r0, #2
}
 8003ee0:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8003ee2:	2002      	movs	r0, #2
}
 8003ee4:	f85d fb04 	ldr.w	pc, [sp], #4

08003ee8 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ee8:	4b1a      	ldr	r3, [pc, #104]	@ (8003f54 <HAL_PWREx_EnableOverDrive+0x6c>)
 8003eea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003eec:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
{
 8003ef0:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ef2:	641a      	str	r2, [r3, #64]	@ 0x40
{
 8003ef4:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003ef8:	4c17      	ldr	r4, [pc, #92]	@ (8003f58 <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003efa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003efe:	9301      	str	r3, [sp, #4]
 8003f00:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003f02:	6823      	ldr	r3, [r4, #0]
 8003f04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f08:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f0a:	f7fe fde5 	bl	8002ad8 <HAL_GetTick>
 8003f0e:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f10:	e005      	b.n	8003f1e <HAL_PWREx_EnableOverDrive+0x36>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f12:	f7fe fde1 	bl	8002ad8 <HAL_GetTick>
 8003f16:	1b40      	subs	r0, r0, r5
 8003f18:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8003f1c:	d817      	bhi.n	8003f4e <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f1e:	6863      	ldr	r3, [r4, #4]
 8003f20:	03da      	lsls	r2, r3, #15
 8003f22:	d5f6      	bpl.n	8003f12 <HAL_PWREx_EnableOverDrive+0x2a>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003f24:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f26:	4d0c      	ldr	r5, [pc, #48]	@ (8003f58 <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003f28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f2c:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003f2e:	f7fe fdd3 	bl	8002ad8 <HAL_GetTick>
 8003f32:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f34:	e005      	b.n	8003f42 <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f36:	f7fe fdcf 	bl	8002ad8 <HAL_GetTick>
 8003f3a:	1b00      	subs	r0, r0, r4
 8003f3c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8003f40:	d805      	bhi.n	8003f4e <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f42:	686b      	ldr	r3, [r5, #4]
 8003f44:	039b      	lsls	r3, r3, #14
 8003f46:	d5f6      	bpl.n	8003f36 <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8003f48:	2000      	movs	r0, #0
}
 8003f4a:	b003      	add	sp, #12
 8003f4c:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8003f4e:	2003      	movs	r0, #3
}
 8003f50:	b003      	add	sp, #12
 8003f52:	bd30      	pop	{r4, r5, pc}
 8003f54:	40023800 	.word	0x40023800
 8003f58:	40007000 	.word	0x40007000

08003f5c <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f5c:	2800      	cmp	r0, #0
 8003f5e:	f000 81bd 	beq.w	80042dc <HAL_RCC_OscConfig+0x380>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f62:	6803      	ldr	r3, [r0, #0]
{
 8003f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f68:	07dd      	lsls	r5, r3, #31
{
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f6e:	d535      	bpl.n	8003fdc <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f70:	499a      	ldr	r1, [pc, #616]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 8003f72:	688a      	ldr	r2, [r1, #8]
 8003f74:	f002 020c 	and.w	r2, r2, #12
 8003f78:	2a04      	cmp	r2, #4
 8003f7a:	f000 80e0 	beq.w	800413e <HAL_RCC_OscConfig+0x1e2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f7e:	688a      	ldr	r2, [r1, #8]
 8003f80:	f002 020c 	and.w	r2, r2, #12
 8003f84:	2a08      	cmp	r2, #8
 8003f86:	f000 80d6 	beq.w	8004136 <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f8a:	6863      	ldr	r3, [r4, #4]
 8003f8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f90:	d010      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x58>
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 80fd 	beq.w	8004192 <HAL_RCC_OscConfig+0x236>
 8003f98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f9c:	4b8f      	ldr	r3, [pc, #572]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	f000 818c 	beq.w	80042bc <HAL_RCC_OscConfig+0x360>
 8003fa4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003fb0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fb2:	e004      	b.n	8003fbe <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fb4:	4a89      	ldr	r2, [pc, #548]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 8003fb6:	6813      	ldr	r3, [r2, #0]
 8003fb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fbc:	6013      	str	r3, [r2, #0]
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fbe:	f7fe fd8b 	bl	8002ad8 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fc2:	4e86      	ldr	r6, [pc, #536]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 8003fc4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fc6:	e005      	b.n	8003fd4 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fc8:	f7fe fd86 	bl	8002ad8 <HAL_GetTick>
 8003fcc:	1b40      	subs	r0, r0, r5
 8003fce:	2864      	cmp	r0, #100	@ 0x64
 8003fd0:	f200 80db 	bhi.w	800418a <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fd4:	6833      	ldr	r3, [r6, #0]
 8003fd6:	039b      	lsls	r3, r3, #14
 8003fd8:	d5f6      	bpl.n	8003fc8 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fda:	6823      	ldr	r3, [r4, #0]
 8003fdc:	079d      	lsls	r5, r3, #30
 8003fde:	d527      	bpl.n	8004030 <HAL_RCC_OscConfig+0xd4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fe0:	4a7e      	ldr	r2, [pc, #504]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 8003fe2:	6891      	ldr	r1, [r2, #8]
 8003fe4:	f011 0f0c 	tst.w	r1, #12
 8003fe8:	d07e      	beq.n	80040e8 <HAL_RCC_OscConfig+0x18c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fea:	6891      	ldr	r1, [r2, #8]
 8003fec:	f001 010c 	and.w	r1, r1, #12
 8003ff0:	2908      	cmp	r1, #8
 8003ff2:	d076      	beq.n	80040e2 <HAL_RCC_OscConfig+0x186>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ff4:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ff6:	4d79      	ldr	r5, [pc, #484]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 8104 	beq.w	8004206 <HAL_RCC_OscConfig+0x2aa>
        __HAL_RCC_HSI_ENABLE();
 8003ffe:	682b      	ldr	r3, [r5, #0]
 8004000:	f043 0301 	orr.w	r3, r3, #1
 8004004:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004006:	f7fe fd67 	bl	8002ad8 <HAL_GetTick>
 800400a:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800400c:	e005      	b.n	800401a <HAL_RCC_OscConfig+0xbe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800400e:	f7fe fd63 	bl	8002ad8 <HAL_GetTick>
 8004012:	1b80      	subs	r0, r0, r6
 8004014:	2802      	cmp	r0, #2
 8004016:	f200 80b8 	bhi.w	800418a <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800401a:	682b      	ldr	r3, [r5, #0]
 800401c:	079f      	lsls	r7, r3, #30
 800401e:	d5f6      	bpl.n	800400e <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004020:	682b      	ldr	r3, [r5, #0]
 8004022:	6922      	ldr	r2, [r4, #16]
 8004024:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004028:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800402c:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800402e:	6823      	ldr	r3, [r4, #0]
 8004030:	071a      	lsls	r2, r3, #28
 8004032:	d41f      	bmi.n	8004074 <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004034:	075e      	lsls	r6, r3, #29
 8004036:	d534      	bpl.n	80040a2 <HAL_RCC_OscConfig+0x146>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004038:	4b68      	ldr	r3, [pc, #416]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 800403a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800403c:	00d5      	lsls	r5, r2, #3
 800403e:	d56f      	bpl.n	8004120 <HAL_RCC_OscConfig+0x1c4>
  FlagStatus pwrclkchanged = RESET;
 8004040:	2500      	movs	r5, #0
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004042:	4e67      	ldr	r6, [pc, #412]	@ (80041e0 <HAL_RCC_OscConfig+0x284>)
 8004044:	6833      	ldr	r3, [r6, #0]
 8004046:	05d8      	lsls	r0, r3, #23
 8004048:	f140 808f 	bpl.w	800416a <HAL_RCC_OscConfig+0x20e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800404c:	68a3      	ldr	r3, [r4, #8]
 800404e:	2b01      	cmp	r3, #1
 8004050:	f000 80eb 	beq.w	800422a <HAL_RCC_OscConfig+0x2ce>
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 80b2 	beq.w	80041be <HAL_RCC_OscConfig+0x262>
 800405a:	2b05      	cmp	r3, #5
 800405c:	4b5f      	ldr	r3, [pc, #380]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 800405e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004060:	f000 8134 	beq.w	80042cc <HAL_RCC_OscConfig+0x370>
 8004064:	f022 0201 	bic.w	r2, r2, #1
 8004068:	671a      	str	r2, [r3, #112]	@ 0x70
 800406a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800406c:	f022 0204 	bic.w	r2, r2, #4
 8004070:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004072:	e0df      	b.n	8004234 <HAL_RCC_OscConfig+0x2d8>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004074:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8004076:	4d59      	ldr	r5, [pc, #356]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004078:	2b00      	cmp	r3, #0
 800407a:	d040      	beq.n	80040fe <HAL_RCC_OscConfig+0x1a2>
      __HAL_RCC_LSI_ENABLE();
 800407c:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800407e:	f043 0301 	orr.w	r3, r3, #1
 8004082:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8004084:	f7fe fd28 	bl	8002ad8 <HAL_GetTick>
 8004088:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800408a:	e004      	b.n	8004096 <HAL_RCC_OscConfig+0x13a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800408c:	f7fe fd24 	bl	8002ad8 <HAL_GetTick>
 8004090:	1b80      	subs	r0, r0, r6
 8004092:	2802      	cmp	r0, #2
 8004094:	d879      	bhi.n	800418a <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004096:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8004098:	079b      	lsls	r3, r3, #30
 800409a:	d5f7      	bpl.n	800408c <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800409c:	6823      	ldr	r3, [r4, #0]
 800409e:	075e      	lsls	r6, r3, #29
 80040a0:	d4ca      	bmi.n	8004038 <HAL_RCC_OscConfig+0xdc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040a2:	69a3      	ldr	r3, [r4, #24]
 80040a4:	b1cb      	cbz	r3, 80040da <HAL_RCC_OscConfig+0x17e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040a6:	4d4d      	ldr	r5, [pc, #308]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 80040a8:	68aa      	ldr	r2, [r5, #8]
 80040aa:	f002 020c 	and.w	r2, r2, #12
 80040ae:	2a08      	cmp	r2, #8
 80040b0:	f000 80d3 	beq.w	800425a <HAL_RCC_OscConfig+0x2fe>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040b4:	2b02      	cmp	r3, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040b6:	682b      	ldr	r3, [r5, #0]
 80040b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040bc:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040be:	f000 810f 	beq.w	80042e0 <HAL_RCC_OscConfig+0x384>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c2:	f7fe fd09 	bl	8002ad8 <HAL_GetTick>
 80040c6:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040c8:	e004      	b.n	80040d4 <HAL_RCC_OscConfig+0x178>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ca:	f7fe fd05 	bl	8002ad8 <HAL_GetTick>
 80040ce:	1b00      	subs	r0, r0, r4
 80040d0:	2802      	cmp	r0, #2
 80040d2:	d85a      	bhi.n	800418a <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040d4:	682b      	ldr	r3, [r5, #0]
 80040d6:	019b      	lsls	r3, r3, #6
 80040d8:	d4f7      	bmi.n	80040ca <HAL_RCC_OscConfig+0x16e>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80040da:	2000      	movs	r0, #0
}
 80040dc:	b002      	add	sp, #8
 80040de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040e2:	6852      	ldr	r2, [r2, #4]
 80040e4:	0251      	lsls	r1, r2, #9
 80040e6:	d485      	bmi.n	8003ff4 <HAL_RCC_OscConfig+0x98>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040e8:	4a3c      	ldr	r2, [pc, #240]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 80040ea:	6812      	ldr	r2, [r2, #0]
 80040ec:	0792      	lsls	r2, r2, #30
 80040ee:	d530      	bpl.n	8004152 <HAL_RCC_OscConfig+0x1f6>
 80040f0:	68e2      	ldr	r2, [r4, #12]
 80040f2:	2a01      	cmp	r2, #1
 80040f4:	d02d      	beq.n	8004152 <HAL_RCC_OscConfig+0x1f6>
    return HAL_ERROR;
 80040f6:	2001      	movs	r0, #1
}
 80040f8:	b002      	add	sp, #8
 80040fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80040fe:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8004100:	f023 0301 	bic.w	r3, r3, #1
 8004104:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8004106:	f7fe fce7 	bl	8002ad8 <HAL_GetTick>
 800410a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800410c:	e004      	b.n	8004118 <HAL_RCC_OscConfig+0x1bc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800410e:	f7fe fce3 	bl	8002ad8 <HAL_GetTick>
 8004112:	1b80      	subs	r0, r0, r6
 8004114:	2802      	cmp	r0, #2
 8004116:	d838      	bhi.n	800418a <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004118:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800411a:	079f      	lsls	r7, r3, #30
 800411c:	d4f7      	bmi.n	800410e <HAL_RCC_OscConfig+0x1b2>
 800411e:	e7bd      	b.n	800409c <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004120:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
      pwrclkchanged = SET;
 8004122:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8004124:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004128:	641a      	str	r2, [r3, #64]	@ 0x40
 800412a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004130:	9301      	str	r3, [sp, #4]
 8004132:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004134:	e785      	b.n	8004042 <HAL_RCC_OscConfig+0xe6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004136:	684a      	ldr	r2, [r1, #4]
 8004138:	0251      	lsls	r1, r2, #9
 800413a:	f57f af26 	bpl.w	8003f8a <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800413e:	4a27      	ldr	r2, [pc, #156]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 8004140:	6812      	ldr	r2, [r2, #0]
 8004142:	0392      	lsls	r2, r2, #14
 8004144:	f57f af4a 	bpl.w	8003fdc <HAL_RCC_OscConfig+0x80>
 8004148:	6862      	ldr	r2, [r4, #4]
 800414a:	2a00      	cmp	r2, #0
 800414c:	f47f af46 	bne.w	8003fdc <HAL_RCC_OscConfig+0x80>
 8004150:	e7d1      	b.n	80040f6 <HAL_RCC_OscConfig+0x19a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004152:	4922      	ldr	r1, [pc, #136]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 8004154:	6920      	ldr	r0, [r4, #16]
 8004156:	680a      	ldr	r2, [r1, #0]
 8004158:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 800415c:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8004160:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004162:	071a      	lsls	r2, r3, #28
 8004164:	f57f af66 	bpl.w	8004034 <HAL_RCC_OscConfig+0xd8>
 8004168:	e784      	b.n	8004074 <HAL_RCC_OscConfig+0x118>
      PWR->CR1 |= PWR_CR1_DBP;
 800416a:	6833      	ldr	r3, [r6, #0]
 800416c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004170:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004172:	f7fe fcb1 	bl	8002ad8 <HAL_GetTick>
 8004176:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004178:	6833      	ldr	r3, [r6, #0]
 800417a:	05d9      	lsls	r1, r3, #23
 800417c:	f53f af66 	bmi.w	800404c <HAL_RCC_OscConfig+0xf0>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004180:	f7fe fcaa 	bl	8002ad8 <HAL_GetTick>
 8004184:	1bc0      	subs	r0, r0, r7
 8004186:	2864      	cmp	r0, #100	@ 0x64
 8004188:	d9f6      	bls.n	8004178 <HAL_RCC_OscConfig+0x21c>
            return HAL_TIMEOUT;
 800418a:	2003      	movs	r0, #3
}
 800418c:	b002      	add	sp, #8
 800418e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004192:	4d12      	ldr	r5, [pc, #72]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 8004194:	682b      	ldr	r3, [r5, #0]
 8004196:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800419a:	602b      	str	r3, [r5, #0]
 800419c:	682b      	ldr	r3, [r5, #0]
 800419e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041a2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80041a4:	f7fe fc98 	bl	8002ad8 <HAL_GetTick>
 80041a8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041aa:	e004      	b.n	80041b6 <HAL_RCC_OscConfig+0x25a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041ac:	f7fe fc94 	bl	8002ad8 <HAL_GetTick>
 80041b0:	1b80      	subs	r0, r0, r6
 80041b2:	2864      	cmp	r0, #100	@ 0x64
 80041b4:	d8e9      	bhi.n	800418a <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041b6:	682b      	ldr	r3, [r5, #0]
 80041b8:	039f      	lsls	r7, r3, #14
 80041ba:	d4f7      	bmi.n	80041ac <HAL_RCC_OscConfig+0x250>
 80041bc:	e70d      	b.n	8003fda <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041be:	4e07      	ldr	r6, [pc, #28]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041c0:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041c4:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80041c6:	f023 0301 	bic.w	r3, r3, #1
 80041ca:	6733      	str	r3, [r6, #112]	@ 0x70
 80041cc:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80041ce:	f023 0304 	bic.w	r3, r3, #4
 80041d2:	6733      	str	r3, [r6, #112]	@ 0x70
      tickstart = HAL_GetTick();
 80041d4:	f7fe fc80 	bl	8002ad8 <HAL_GetTick>
 80041d8:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0x292>
 80041dc:	40023800 	.word	0x40023800
 80041e0:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041e4:	f7fe fc78 	bl	8002ad8 <HAL_GetTick>
 80041e8:	1bc0      	subs	r0, r0, r7
 80041ea:	4540      	cmp	r0, r8
 80041ec:	d8cd      	bhi.n	800418a <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041ee:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80041f0:	079b      	lsls	r3, r3, #30
 80041f2:	d4f7      	bmi.n	80041e4 <HAL_RCC_OscConfig+0x288>
    if (pwrclkchanged == SET)
 80041f4:	2d00      	cmp	r5, #0
 80041f6:	f43f af54 	beq.w	80040a2 <HAL_RCC_OscConfig+0x146>
      __HAL_RCC_PWR_CLK_DISABLE();
 80041fa:	4a52      	ldr	r2, [pc, #328]	@ (8004344 <HAL_RCC_OscConfig+0x3e8>)
 80041fc:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80041fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004202:	6413      	str	r3, [r2, #64]	@ 0x40
 8004204:	e74d      	b.n	80040a2 <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_DISABLE();
 8004206:	682b      	ldr	r3, [r5, #0]
 8004208:	f023 0301 	bic.w	r3, r3, #1
 800420c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800420e:	f7fe fc63 	bl	8002ad8 <HAL_GetTick>
 8004212:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004214:	e004      	b.n	8004220 <HAL_RCC_OscConfig+0x2c4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004216:	f7fe fc5f 	bl	8002ad8 <HAL_GetTick>
 800421a:	1b80      	subs	r0, r0, r6
 800421c:	2802      	cmp	r0, #2
 800421e:	d8b4      	bhi.n	800418a <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004220:	682b      	ldr	r3, [r5, #0]
 8004222:	0799      	lsls	r1, r3, #30
 8004224:	d4f7      	bmi.n	8004216 <HAL_RCC_OscConfig+0x2ba>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004226:	6823      	ldr	r3, [r4, #0]
 8004228:	e702      	b.n	8004030 <HAL_RCC_OscConfig+0xd4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800422a:	4a46      	ldr	r2, [pc, #280]	@ (8004344 <HAL_RCC_OscConfig+0x3e8>)
 800422c:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800422e:	f043 0301 	orr.w	r3, r3, #1
 8004232:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8004234:	f7fe fc50 	bl	8002ad8 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004238:	4f42      	ldr	r7, [pc, #264]	@ (8004344 <HAL_RCC_OscConfig+0x3e8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800423a:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800423e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004240:	e004      	b.n	800424c <HAL_RCC_OscConfig+0x2f0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004242:	f7fe fc49 	bl	8002ad8 <HAL_GetTick>
 8004246:	1b80      	subs	r0, r0, r6
 8004248:	4540      	cmp	r0, r8
 800424a:	d89e      	bhi.n	800418a <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800424c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800424e:	079a      	lsls	r2, r3, #30
 8004250:	d5f7      	bpl.n	8004242 <HAL_RCC_OscConfig+0x2e6>
    if (pwrclkchanged == SET)
 8004252:	2d00      	cmp	r5, #0
 8004254:	f43f af25 	beq.w	80040a2 <HAL_RCC_OscConfig+0x146>
 8004258:	e7cf      	b.n	80041fa <HAL_RCC_OscConfig+0x29e>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800425a:	2b01      	cmp	r3, #1
      pll_config = RCC->PLLCFGR;
 800425c:	686a      	ldr	r2, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800425e:	f43f af4a 	beq.w	80040f6 <HAL_RCC_OscConfig+0x19a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004262:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004266:	69e1      	ldr	r1, [r4, #28]
 8004268:	428b      	cmp	r3, r1
 800426a:	f47f af44 	bne.w	80040f6 <HAL_RCC_OscConfig+0x19a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800426e:	f002 033f 	and.w	r3, r2, #63	@ 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004272:	6a21      	ldr	r1, [r4, #32]
 8004274:	428b      	cmp	r3, r1
 8004276:	f47f af3e 	bne.w	80040f6 <HAL_RCC_OscConfig+0x19a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800427a:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800427e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004280:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004282:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8004286:	f47f af36 	bne.w	80040f6 <HAL_RCC_OscConfig+0x19a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800428a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800428c:	f402 3140 	and.w	r1, r2, #196608	@ 0x30000
 8004290:	085b      	lsrs	r3, r3, #1
 8004292:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004294:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8004298:	f47f af2d 	bne.w	80040f6 <HAL_RCC_OscConfig+0x19a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800429c:	f002 6370 	and.w	r3, r2, #251658240	@ 0xf000000
 80042a0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80042a2:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 80042a6:	f47f af26 	bne.w	80040f6 <HAL_RCC_OscConfig+0x19a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80042aa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80042ac:	f002 42e0 	and.w	r2, r2, #1879048192	@ 0x70000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042b0:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
 80042b4:	bf14      	ite	ne
 80042b6:	2001      	movne	r0, #1
 80042b8:	2000      	moveq	r0, #0
 80042ba:	e70f      	b.n	80040dc <HAL_RCC_OscConfig+0x180>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042bc:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80042c8:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042ca:	e678      	b.n	8003fbe <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042cc:	f042 0204 	orr.w	r2, r2, #4
 80042d0:	671a      	str	r2, [r3, #112]	@ 0x70
 80042d2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80042d4:	f042 0201 	orr.w	r2, r2, #1
 80042d8:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042da:	e7ab      	b.n	8004234 <HAL_RCC_OscConfig+0x2d8>
    return HAL_ERROR;
 80042dc:	2001      	movs	r0, #1
}
 80042de:	4770      	bx	lr
        tickstart = HAL_GetTick();
 80042e0:	f7fe fbfa 	bl	8002ad8 <HAL_GetTick>
 80042e4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042e6:	e005      	b.n	80042f4 <HAL_RCC_OscConfig+0x398>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042e8:	f7fe fbf6 	bl	8002ad8 <HAL_GetTick>
 80042ec:	1b80      	subs	r0, r0, r6
 80042ee:	2802      	cmp	r0, #2
 80042f0:	f63f af4b 	bhi.w	800418a <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042f4:	682b      	ldr	r3, [r5, #0]
 80042f6:	0199      	lsls	r1, r3, #6
 80042f8:	d4f6      	bmi.n	80042e8 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042fa:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 80042fe:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004300:	430b      	orrs	r3, r1
 8004302:	6b21      	ldr	r1, [r4, #48]	@ 0x30
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004304:	4e0f      	ldr	r6, [pc, #60]	@ (8004344 <HAL_RCC_OscConfig+0x3e8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004306:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800430a:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	@ 0x28
 800430e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004312:	0852      	lsrs	r2, r2, #1
 8004314:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004318:	3a01      	subs	r2, #1
 800431a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800431e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004320:	682b      	ldr	r3, [r5, #0]
 8004322:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004326:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004328:	f7fe fbd6 	bl	8002ad8 <HAL_GetTick>
 800432c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800432e:	e005      	b.n	800433c <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004330:	f7fe fbd2 	bl	8002ad8 <HAL_GetTick>
 8004334:	1b00      	subs	r0, r0, r4
 8004336:	2802      	cmp	r0, #2
 8004338:	f63f af27 	bhi.w	800418a <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800433c:	6833      	ldr	r3, [r6, #0]
 800433e:	019a      	lsls	r2, r3, #6
 8004340:	d5f6      	bpl.n	8004330 <HAL_RCC_OscConfig+0x3d4>
 8004342:	e6ca      	b.n	80040da <HAL_RCC_OscConfig+0x17e>
 8004344:	40023800 	.word	0x40023800

08004348 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004348:	2800      	cmp	r0, #0
 800434a:	f000 80b3 	beq.w	80044b4 <HAL_RCC_ClockConfig+0x16c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800434e:	4a61      	ldr	r2, [pc, #388]	@ (80044d4 <HAL_RCC_ClockConfig+0x18c>)
 8004350:	6813      	ldr	r3, [r2, #0]
 8004352:	f003 030f 	and.w	r3, r3, #15
 8004356:	428b      	cmp	r3, r1
{
 8004358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800435c:	4604      	mov	r4, r0
 800435e:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004360:	d20c      	bcs.n	800437c <HAL_RCC_ClockConfig+0x34>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004362:	6813      	ldr	r3, [r2, #0]
 8004364:	f023 030f 	bic.w	r3, r3, #15
 8004368:	430b      	orrs	r3, r1
 800436a:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800436c:	6813      	ldr	r3, [r2, #0]
 800436e:	f003 030f 	and.w	r3, r3, #15
 8004372:	428b      	cmp	r3, r1
 8004374:	d002      	beq.n	800437c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8004376:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);

  return HAL_OK;
}
 8004378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800437c:	6823      	ldr	r3, [r4, #0]
 800437e:	0798      	lsls	r0, r3, #30
 8004380:	d514      	bpl.n	80043ac <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004382:	0759      	lsls	r1, r3, #29
 8004384:	d504      	bpl.n	8004390 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004386:	4954      	ldr	r1, [pc, #336]	@ (80044d8 <HAL_RCC_ClockConfig+0x190>)
 8004388:	688a      	ldr	r2, [r1, #8]
 800438a:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 800438e:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004390:	071a      	lsls	r2, r3, #28
 8004392:	d504      	bpl.n	800439e <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004394:	4950      	ldr	r1, [pc, #320]	@ (80044d8 <HAL_RCC_ClockConfig+0x190>)
 8004396:	688a      	ldr	r2, [r1, #8]
 8004398:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 800439c:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800439e:	494e      	ldr	r1, [pc, #312]	@ (80044d8 <HAL_RCC_ClockConfig+0x190>)
 80043a0:	68a0      	ldr	r0, [r4, #8]
 80043a2:	688a      	ldr	r2, [r1, #8]
 80043a4:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80043a8:	4302      	orrs	r2, r0
 80043aa:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ac:	07df      	lsls	r7, r3, #31
 80043ae:	d520      	bpl.n	80043f2 <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043b0:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043b2:	4b49      	ldr	r3, [pc, #292]	@ (80044d8 <HAL_RCC_ClockConfig+0x190>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043b4:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043b6:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043b8:	d07e      	beq.n	80044b8 <HAL_RCC_ClockConfig+0x170>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043ba:	2a02      	cmp	r2, #2
 80043bc:	d077      	beq.n	80044ae <HAL_RCC_ClockConfig+0x166>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043be:	0799      	lsls	r1, r3, #30
 80043c0:	d5d9      	bpl.n	8004376 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043c2:	4e45      	ldr	r6, [pc, #276]	@ (80044d8 <HAL_RCC_ClockConfig+0x190>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043c4:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043c8:	68b3      	ldr	r3, [r6, #8]
 80043ca:	f023 0303 	bic.w	r3, r3, #3
 80043ce:	4313      	orrs	r3, r2
 80043d0:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80043d2:	f7fe fb81 	bl	8002ad8 <HAL_GetTick>
 80043d6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043d8:	e004      	b.n	80043e4 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043da:	f7fe fb7d 	bl	8002ad8 <HAL_GetTick>
 80043de:	1bc0      	subs	r0, r0, r7
 80043e0:	4540      	cmp	r0, r8
 80043e2:	d86c      	bhi.n	80044be <HAL_RCC_ClockConfig+0x176>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043e4:	68b3      	ldr	r3, [r6, #8]
 80043e6:	6862      	ldr	r2, [r4, #4]
 80043e8:	f003 030c 	and.w	r3, r3, #12
 80043ec:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80043f0:	d1f3      	bne.n	80043da <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043f2:	4a38      	ldr	r2, [pc, #224]	@ (80044d4 <HAL_RCC_ClockConfig+0x18c>)
 80043f4:	6813      	ldr	r3, [r2, #0]
 80043f6:	f003 030f 	and.w	r3, r3, #15
 80043fa:	42ab      	cmp	r3, r5
 80043fc:	d909      	bls.n	8004412 <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043fe:	6813      	ldr	r3, [r2, #0]
 8004400:	f023 030f 	bic.w	r3, r3, #15
 8004404:	432b      	orrs	r3, r5
 8004406:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004408:	6813      	ldr	r3, [r2, #0]
 800440a:	f003 030f 	and.w	r3, r3, #15
 800440e:	42ab      	cmp	r3, r5
 8004410:	d1b1      	bne.n	8004376 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004412:	6823      	ldr	r3, [r4, #0]
 8004414:	075a      	lsls	r2, r3, #29
 8004416:	d506      	bpl.n	8004426 <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004418:	492f      	ldr	r1, [pc, #188]	@ (80044d8 <HAL_RCC_ClockConfig+0x190>)
 800441a:	68e0      	ldr	r0, [r4, #12]
 800441c:	688a      	ldr	r2, [r1, #8]
 800441e:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8004422:	4302      	orrs	r2, r0
 8004424:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004426:	071b      	lsls	r3, r3, #28
 8004428:	d431      	bmi.n	800448e <HAL_RCC_ClockConfig+0x146>
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800442a:	492b      	ldr	r1, [pc, #172]	@ (80044d8 <HAL_RCC_ClockConfig+0x190>)
 800442c:	688b      	ldr	r3, [r1, #8]
 800442e:	f003 030c 	and.w	r3, r3, #12
 8004432:	2b04      	cmp	r3, #4
 8004434:	d039      	beq.n	80044aa <HAL_RCC_ClockConfig+0x162>
 8004436:	2b08      	cmp	r3, #8
 8004438:	d118      	bne.n	800446c <HAL_RCC_ClockConfig+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800443a:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800443c:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800443e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004442:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004444:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
 8004448:	d03b      	beq.n	80044c2 <HAL_RCC_ClockConfig+0x17a>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800444a:	4824      	ldr	r0, [pc, #144]	@ (80044dc <HAL_RCC_ClockConfig+0x194>)
 800444c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004450:	2300      	movs	r3, #0
 8004452:	fba1 0100 	umull	r0, r1, r1, r0
 8004456:	f7fc f8ab 	bl	80005b0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800445a:	4b1f      	ldr	r3, [pc, #124]	@ (80044d8 <HAL_RCC_ClockConfig+0x190>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004462:	3301      	adds	r3, #1
 8004464:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8004466:	fbb0 f3f3 	udiv	r3, r0, r3
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 800446a:	e000      	b.n	800446e <HAL_RCC_ClockConfig+0x126>
      sysclockfreq = HSI_VALUE;
 800446c:	4b1c      	ldr	r3, [pc, #112]	@ (80044e0 <HAL_RCC_ClockConfig+0x198>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800446e:	4a1a      	ldr	r2, [pc, #104]	@ (80044d8 <HAL_RCC_ClockConfig+0x190>)
 8004470:	4c1c      	ldr	r4, [pc, #112]	@ (80044e4 <HAL_RCC_ClockConfig+0x19c>)
 8004472:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
 8004474:	481c      	ldr	r0, [pc, #112]	@ (80044e8 <HAL_RCC_ClockConfig+0x1a0>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004476:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800447a:	491c      	ldr	r1, [pc, #112]	@ (80044ec <HAL_RCC_ClockConfig+0x1a4>)
  HAL_InitTick(uwTickPrio);
 800447c:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800447e:	5ca2      	ldrb	r2, [r4, r2]
 8004480:	40d3      	lsrs	r3, r2
 8004482:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 8004484:	f7fe faec 	bl	8002a60 <HAL_InitTick>
  return HAL_OK;
 8004488:	2000      	movs	r0, #0
}
 800448a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800448e:	4a12      	ldr	r2, [pc, #72]	@ (80044d8 <HAL_RCC_ClockConfig+0x190>)
 8004490:	6921      	ldr	r1, [r4, #16]
 8004492:	6893      	ldr	r3, [r2, #8]
 8004494:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8004498:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800449c:	490e      	ldr	r1, [pc, #56]	@ (80044d8 <HAL_RCC_ClockConfig+0x190>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800449e:	6093      	str	r3, [r2, #8]
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044a0:	688b      	ldr	r3, [r1, #8]
 80044a2:	f003 030c 	and.w	r3, r3, #12
 80044a6:	2b04      	cmp	r3, #4
 80044a8:	d1c5      	bne.n	8004436 <HAL_RCC_ClockConfig+0xee>
 80044aa:	4b0c      	ldr	r3, [pc, #48]	@ (80044dc <HAL_RCC_ClockConfig+0x194>)
 80044ac:	e7df      	b.n	800446e <HAL_RCC_ClockConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ae:	0198      	lsls	r0, r3, #6
 80044b0:	d487      	bmi.n	80043c2 <HAL_RCC_ClockConfig+0x7a>
 80044b2:	e760      	b.n	8004376 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80044b4:	2001      	movs	r0, #1
}
 80044b6:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044b8:	039e      	lsls	r6, r3, #14
 80044ba:	d482      	bmi.n	80043c2 <HAL_RCC_ClockConfig+0x7a>
 80044bc:	e75b      	b.n	8004376 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 80044be:	2003      	movs	r0, #3
 80044c0:	e75a      	b.n	8004378 <HAL_RCC_ClockConfig+0x30>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044c2:	4807      	ldr	r0, [pc, #28]	@ (80044e0 <HAL_RCC_ClockConfig+0x198>)
 80044c4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80044c8:	fba1 0100 	umull	r0, r1, r1, r0
 80044cc:	f7fc f870 	bl	80005b0 <__aeabi_uldivmod>
 80044d0:	e7c3      	b.n	800445a <HAL_RCC_ClockConfig+0x112>
 80044d2:	bf00      	nop
 80044d4:	40023c00 	.word	0x40023c00
 80044d8:	40023800 	.word	0x40023800
 80044dc:	01312d00 	.word	0x01312d00
 80044e0:	00f42400 	.word	0x00f42400
 80044e4:	0800e684 	.word	0x0800e684
 80044e8:	20000170 	.word	0x20000170
 80044ec:	20000168 	.word	0x20000168

080044f0 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80044f0:	6803      	ldr	r3, [r0, #0]
{
 80044f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80044f6:	f013 0601 	ands.w	r6, r3, #1
{
 80044fa:	b083      	sub	sp, #12
 80044fc:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80044fe:	d00b      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004500:	4a94      	ldr	r2, [pc, #592]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004502:	6891      	ldr	r1, [r2, #8]
 8004504:	f421 0100 	bic.w	r1, r1, #8388608	@ 0x800000
 8004508:	6091      	str	r1, [r2, #8]
 800450a:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 800450c:	6891      	ldr	r1, [r2, #8]
 800450e:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004510:	fab6 f686 	clz	r6, r6
 8004514:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004516:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004518:	f413 2500 	ands.w	r5, r3, #524288	@ 0x80000
 800451c:	d010      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800451e:	498d      	ldr	r1, [pc, #564]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004520:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8004522:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004526:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800452a:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800452e:	ea42 0205 	orr.w	r2, r2, r5
 8004532:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004536:	f000 8239 	beq.w	80049ac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800453a:	fab5 f585 	clz	r5, r5
 800453e:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004540:	02d9      	lsls	r1, r3, #11
 8004542:	d510      	bpl.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004544:	4883      	ldr	r0, [pc, #524]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004546:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8004548:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800454c:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004550:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8004554:	ea42 0201 	orr.w	r2, r2, r1
 8004558:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800455c:	f000 8229 	beq.w	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8004560:	2900      	cmp	r1, #0
 8004562:	bf08      	it	eq
 8004564:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8004566:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800456a:	bf18      	it	ne
 800456c:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800456e:	069a      	lsls	r2, r3, #26
 8004570:	f100 81d7 	bmi.w	8004922 <HAL_RCCEx_PeriphCLKConfig+0x432>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004574:	06da      	lsls	r2, r3, #27
 8004576:	d50c      	bpl.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004578:	4a76      	ldr	r2, [pc, #472]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800457a:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 800457e:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8004582:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
 8004586:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 800458a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800458c:	4301      	orrs	r1, r0
 800458e:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004592:	045f      	lsls	r7, r3, #17
 8004594:	d508      	bpl.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004596:	496f      	ldr	r1, [pc, #444]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004598:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 800459a:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800459e:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80045a2:	4302      	orrs	r2, r0
 80045a4:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045a8:	0418      	lsls	r0, r3, #16
 80045aa:	d508      	bpl.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045ac:	4969      	ldr	r1, [pc, #420]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80045ae:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 80045b0:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80045b4:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 80045b8:	4302      	orrs	r2, r0
 80045ba:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045be:	03d9      	lsls	r1, r3, #15
 80045c0:	d508      	bpl.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045c2:	4964      	ldr	r1, [pc, #400]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80045c4:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 80045c6:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80045ca:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80045ce:	4302      	orrs	r2, r0
 80045d0:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80045d4:	039a      	lsls	r2, r3, #14
 80045d6:	d508      	bpl.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045d8:	495e      	ldr	r1, [pc, #376]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80045da:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 80045dc:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80045e0:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 80045e4:	4302      	orrs	r2, r0
 80045e6:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045ea:	065f      	lsls	r7, r3, #25
 80045ec:	d508      	bpl.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045ee:	4959      	ldr	r1, [pc, #356]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80045f0:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80045f2:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80045f6:	f022 0203 	bic.w	r2, r2, #3
 80045fa:	4302      	orrs	r2, r0
 80045fc:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004600:	0618      	lsls	r0, r3, #24
 8004602:	d508      	bpl.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004604:	4953      	ldr	r1, [pc, #332]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004606:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8004608:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800460c:	f022 020c 	bic.w	r2, r2, #12
 8004610:	4302      	orrs	r2, r0
 8004612:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004616:	05d9      	lsls	r1, r3, #23
 8004618:	d508      	bpl.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800461a:	494e      	ldr	r1, [pc, #312]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800461c:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800461e:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004622:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8004626:	4302      	orrs	r2, r0
 8004628:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800462c:	059a      	lsls	r2, r3, #22
 800462e:	d508      	bpl.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004630:	4948      	ldr	r1, [pc, #288]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004632:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8004634:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004638:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 800463c:	4302      	orrs	r2, r0
 800463e:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004642:	055f      	lsls	r7, r3, #21
 8004644:	d508      	bpl.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004646:	4943      	ldr	r1, [pc, #268]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004648:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 800464a:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800464e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004652:	4302      	orrs	r2, r0
 8004654:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004658:	0518      	lsls	r0, r3, #20
 800465a:	d508      	bpl.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800465c:	493d      	ldr	r1, [pc, #244]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800465e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004660:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004664:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004668:	4302      	orrs	r2, r0
 800466a:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800466e:	04d9      	lsls	r1, r3, #19
 8004670:	d508      	bpl.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004672:	4938      	ldr	r1, [pc, #224]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004674:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8004676:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800467a:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800467e:	4302      	orrs	r2, r0
 8004680:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004684:	049a      	lsls	r2, r3, #18
 8004686:	d508      	bpl.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004688:	4932      	ldr	r1, [pc, #200]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800468a:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 800468c:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004690:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8004694:	4302      	orrs	r2, r0
 8004696:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800469a:	025f      	lsls	r7, r3, #9
 800469c:	d508      	bpl.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800469e:	492d      	ldr	r1, [pc, #180]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046a0:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 80046a2:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80046a6:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 80046aa:	4302      	orrs	r2, r0
 80046ac:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80046b0:	0298      	lsls	r0, r3, #10
 80046b2:	d50c      	bpl.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80046b4:	4927      	ldr	r1, [pc, #156]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046b6:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 80046b8:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 80046bc:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80046c0:	f022 6200 	bic.w	r2, r2, #134217728	@ 0x8000000
      pllsaiused = 1;
 80046c4:	bf08      	it	eq
 80046c6:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80046c8:	4302      	orrs	r2, r0
 80046ca:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 80046ce:	f013 0f08 	tst.w	r3, #8
 80046d2:	bf18      	it	ne
 80046d4:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80046d6:	0359      	lsls	r1, r3, #13
 80046d8:	d508      	bpl.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046da:	491e      	ldr	r1, [pc, #120]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046dc:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80046de:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80046e2:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80046e6:	4302      	orrs	r2, r0
 80046e8:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80046ec:	021a      	lsls	r2, r3, #8
 80046ee:	d509      	bpl.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046f0:	4918      	ldr	r1, [pc, #96]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046f2:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 80046f6:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80046fa:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80046fe:	4302      	orrs	r2, r0
 8004700:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004704:	015f      	lsls	r7, r3, #5
 8004706:	d509      	bpl.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004708:	4912      	ldr	r1, [pc, #72]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800470a:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 800470e:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004712:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8004716:	4302      	orrs	r2, r0
 8004718:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800471c:	0118      	lsls	r0, r3, #4
 800471e:	d509      	bpl.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004720:	490c      	ldr	r1, [pc, #48]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004722:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8004726:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
 800472a:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 800472e:	4302      	orrs	r2, r0
 8004730:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004734:	00d9      	lsls	r1, r3, #3
 8004736:	d46b      	bmi.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x320>
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004738:	2e01      	cmp	r6, #1
 800473a:	d001      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x250>
 800473c:	019a      	lsls	r2, r3, #6
 800473e:	d561      	bpl.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004740:	4e04      	ldr	r6, [pc, #16]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004742:	6833      	ldr	r3, [r6, #0]
 8004744:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004748:	6033      	str	r3, [r6, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800474a:	f7fe f9c5 	bl	8002ad8 <HAL_GetTick>
 800474e:	4607      	mov	r7, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004750:	e008      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004752:	bf00      	nop
 8004754:	40023800 	.word	0x40023800
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004758:	f7fe f9be 	bl	8002ad8 <HAL_GetTick>
 800475c:	1bc3      	subs	r3, r0, r7
 800475e:	2b64      	cmp	r3, #100	@ 0x64
 8004760:	f200 80db 	bhi.w	800491a <HAL_RCCEx_PeriphCLKConfig+0x42a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004764:	6833      	ldr	r3, [r6, #0]
 8004766:	011b      	lsls	r3, r3, #4
 8004768:	d4f6      	bmi.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x268>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800476a:	6823      	ldr	r3, [r4, #0]
 800476c:	07df      	lsls	r7, r3, #31
 800476e:	d512      	bpl.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004770:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8004772:	b982      	cbnz	r2, 8004796 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004774:	f8d6 2084 	ldr.w	r2, [r6, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004778:	f8d6 1084 	ldr.w	r1, [r6, #132]	@ 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800477c:	f402 3240 	and.w	r2, r2, #196608	@ 0x30000
 8004780:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 8004784:	430a      	orrs	r2, r1
 8004786:	6861      	ldr	r1, [r4, #4]
 8004788:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 800478c:	68a1      	ldr	r1, [r4, #8]
 800478e:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8004792:	f8c6 2084 	str.w	r2, [r6, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004796:	031e      	lsls	r6, r3, #12
 8004798:	d504      	bpl.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800479a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800479c:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 80047a0:	f000 8118 	beq.w	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80047a4:	02d8      	lsls	r0, r3, #11
 80047a6:	d504      	bpl.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80047a8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80047aa:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 80047ae:	f000 8111 	beq.w	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047b2:	01d9      	lsls	r1, r3, #7
 80047b4:	d511      	bpl.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x2ea>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80047b6:	49a8      	ldr	r1, [pc, #672]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80047b8:	f8d1 2084 	ldr.w	r2, [r1, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80047bc:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80047c0:	f002 6270 	and.w	r2, r2, #251658240	@ 0xf000000
 80047c4:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 80047c8:	4302      	orrs	r2, r0
 80047ca:	6860      	ldr	r0, [r4, #4]
 80047cc:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 80047d0:	6920      	ldr	r0, [r4, #16]
 80047d2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80047d6:	f8c1 2084 	str.w	r2, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80047da:	019a      	lsls	r2, r3, #6
 80047dc:	f100 80eb 	bmi.w	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80047e0:	4e9d      	ldr	r6, [pc, #628]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80047e2:	6833      	ldr	r3, [r6, #0]
 80047e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80047e8:	6033      	str	r3, [r6, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047ea:	f7fe f975 	bl	8002ad8 <HAL_GetTick>
 80047ee:	4607      	mov	r7, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047f0:	e005      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x30e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80047f2:	f7fe f971 	bl	8002ad8 <HAL_GetTick>
 80047f6:	1bc0      	subs	r0, r0, r7
 80047f8:	2864      	cmp	r0, #100	@ 0x64
 80047fa:	f200 808e 	bhi.w	800491a <HAL_RCCEx_PeriphCLKConfig+0x42a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047fe:	6833      	ldr	r3, [r6, #0]
 8004800:	011b      	lsls	r3, r3, #4
 8004802:	d5f6      	bpl.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x302>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004804:	2d01      	cmp	r5, #1
 8004806:	d00e      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x336>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8004808:	2000      	movs	r0, #0
}
 800480a:	b003      	add	sp, #12
 800480c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004810:	4991      	ldr	r1, [pc, #580]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004812:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 8004816:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
 800481a:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 800481e:	4302      	orrs	r2, r0
 8004820:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
 8004824:	e788      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x248>
    __HAL_RCC_PLLSAI_DISABLE();
 8004826:	4d8c      	ldr	r5, [pc, #560]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004828:	682b      	ldr	r3, [r5, #0]
 800482a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800482e:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8004830:	f7fe f952 	bl	8002ad8 <HAL_GetTick>
 8004834:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004836:	e004      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x352>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004838:	f7fe f94e 	bl	8002ad8 <HAL_GetTick>
 800483c:	1b80      	subs	r0, r0, r6
 800483e:	2864      	cmp	r0, #100	@ 0x64
 8004840:	d86b      	bhi.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x42a>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004842:	682b      	ldr	r3, [r5, #0]
 8004844:	009f      	lsls	r7, r3, #2
 8004846:	d4f7      	bmi.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x348>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004848:	6823      	ldr	r3, [r4, #0]
 800484a:	031d      	lsls	r5, r3, #12
 800484c:	f140 80fb 	bpl.w	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x556>
 8004850:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8004852:	2a00      	cmp	r2, #0
 8004854:	f040 80f7 	bne.w	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x556>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004858:	497f      	ldr	r1, [pc, #508]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800485a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800485e:	f8d1 0088 	ldr.w	r0, [r1, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004862:	f402 3240 	and.w	r2, r2, #196608	@ 0x30000
 8004866:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 800486a:	4302      	orrs	r2, r0
 800486c:	6960      	ldr	r0, [r4, #20]
 800486e:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8004872:	69a0      	ldr	r0, [r4, #24]
 8004874:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8004878:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800487c:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
 8004880:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8004882:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 8004886:	3801      	subs	r0, #1
 8004888:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800488c:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004890:	0299      	lsls	r1, r3, #10
 8004892:	d515      	bpl.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8004894:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8004896:	f1b2 6f00 	cmp.w	r2, #134217728	@ 0x8000000
 800489a:	d111      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800489c:	496e      	ldr	r1, [pc, #440]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800489e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80048a2:	f8d1 0088 	ldr.w	r0, [r1, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80048a6:	f002 6270 	and.w	r2, r2, #251658240	@ 0xf000000
 80048aa:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 80048ae:	4302      	orrs	r2, r0
 80048b0:	6960      	ldr	r0, [r4, #20]
 80048b2:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 80048b6:	6a20      	ldr	r0, [r4, #32]
 80048b8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80048bc:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80048c0:	071a      	lsls	r2, r3, #28
 80048c2:	d519      	bpl.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x408>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80048c4:	4a64      	ldr	r2, [pc, #400]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x568>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80048c6:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80048c8:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80048cc:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80048d0:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 80048d4:	69e0      	ldr	r0, [r4, #28]
 80048d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80048da:	430b      	orrs	r3, r1
 80048dc:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 80048e0:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 80048e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80048e8:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 80048ec:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80048ee:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80048f2:	430b      	orrs	r3, r1
 80048f4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 80048f8:	4c57      	ldr	r4, [pc, #348]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80048fa:	6823      	ldr	r3, [r4, #0]
 80048fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004900:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8004902:	f7fe f8e9 	bl	8002ad8 <HAL_GetTick>
 8004906:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004908:	6823      	ldr	r3, [r4, #0]
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	f53f af7c 	bmi.w	8004808 <HAL_RCCEx_PeriphCLKConfig+0x318>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004910:	f7fe f8e2 	bl	8002ad8 <HAL_GetTick>
 8004914:	1b40      	subs	r0, r0, r5
 8004916:	2864      	cmp	r0, #100	@ 0x64
 8004918:	d9f6      	bls.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x418>
        return HAL_TIMEOUT;
 800491a:	2003      	movs	r0, #3
}
 800491c:	b003      	add	sp, #12
 800491e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8004922:	4b4d      	ldr	r3, [pc, #308]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x568>)
    PWR->CR1 |= PWR_CR1_DBP;
 8004924:	4f4d      	ldr	r7, [pc, #308]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x56c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8004926:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004928:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800492c:	641a      	str	r2, [r3, #64]	@ 0x40
 800492e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004930:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004934:	9301      	str	r3, [sp, #4]
 8004936:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800493e:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8004940:	f7fe f8ca 	bl	8002ad8 <HAL_GetTick>
 8004944:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004946:	e005      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x464>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004948:	f7fe f8c6 	bl	8002ad8 <HAL_GetTick>
 800494c:	eba0 0008 	sub.w	r0, r0, r8
 8004950:	2864      	cmp	r0, #100	@ 0x64
 8004952:	d8e2      	bhi.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x42a>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	05db      	lsls	r3, r3, #23
 8004958:	d5f6      	bpl.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x458>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800495a:	4f3f      	ldr	r7, [pc, #252]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x568>)
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800495c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800495e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004960:	f403 7140 	and.w	r1, r3, #768	@ 0x300
 8004964:	f412 7240 	ands.w	r2, r2, #768	@ 0x300
 8004968:	d010      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 800496a:	428a      	cmp	r2, r1
 800496c:	d00e      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x49c>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800496e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8004970:	6f38      	ldr	r0, [r7, #112]	@ 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004972:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8004976:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 800497a:	6738      	str	r0, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800497c:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800497e:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 8004982:	6738      	str	r0, [r7, #112]	@ 0x70
      RCC->BDCR = tmpreg0;
 8004984:	673a      	str	r2, [r7, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004986:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004988:	07d0      	lsls	r0, r2, #31
 800498a:	d448      	bmi.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800498c:	f5b1 7f40 	cmp.w	r1, #768	@ 0x300
 8004990:	d03c      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x51c>
 8004992:	4931      	ldr	r1, [pc, #196]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004994:	688a      	ldr	r2, [r1, #8]
 8004996:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 800499a:	608a      	str	r2, [r1, #8]
 800499c:	4a2e      	ldr	r2, [pc, #184]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800499e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049a2:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 80049a4:	430b      	orrs	r3, r1
 80049a6:	6713      	str	r3, [r2, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80049a8:	6823      	ldr	r3, [r4, #0]
 80049aa:	e5e3      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x84>
  uint32_t pllsaiused = 0;
 80049ac:	2500      	movs	r5, #0
      plli2sused = 1;
 80049ae:	2601      	movs	r6, #1
 80049b0:	e5c6      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x50>
      plli2sused = 1;
 80049b2:	2601      	movs	r6, #1
 80049b4:	e5d7      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x76>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80049b6:	6923      	ldr	r3, [r4, #16]
 80049b8:	6861      	ldr	r1, [r4, #4]
 80049ba:	041b      	lsls	r3, r3, #16
 80049bc:	68e2      	ldr	r2, [r4, #12]
 80049be:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80049c2:	68a1      	ldr	r1, [r4, #8]
 80049c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80049c8:	4a23      	ldr	r2, [pc, #140]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80049ca:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80049ce:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
 80049d2:	e705      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80049d4:	4920      	ldr	r1, [pc, #128]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80049d6:	f8d1 2084 	ldr.w	r2, [r1, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049da:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80049de:	f402 3240 	and.w	r2, r2, #196608	@ 0x30000
 80049e2:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 80049e6:	4302      	orrs	r2, r0
 80049e8:	6860      	ldr	r0, [r4, #4]
 80049ea:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 80049ee:	68e0      	ldr	r0, [r4, #12]
 80049f0:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80049f4:	f8c1 2084 	str.w	r2, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80049f8:	f8d1 008c 	ldr.w	r0, [r1, #140]	@ 0x8c
 80049fc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80049fe:	f020 001f 	bic.w	r0, r0, #31
 8004a02:	3a01      	subs	r2, #1
 8004a04:	4302      	orrs	r2, r0
 8004a06:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
 8004a0a:	e6d2      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a0c:	4812      	ldr	r0, [pc, #72]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004a0e:	4914      	ldr	r1, [pc, #80]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8004a10:	6882      	ldr	r2, [r0, #8]
 8004a12:	4019      	ands	r1, r3
 8004a14:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	6082      	str	r2, [r0, #8]
 8004a1c:	e7be      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x4ac>
        tickstart = HAL_GetTick();
 8004a1e:	f7fe f85b 	bl	8002ad8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a22:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8004a26:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a28:	e006      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x548>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a2a:	f7fe f855 	bl	8002ad8 <HAL_GetTick>
 8004a2e:	eba0 0008 	sub.w	r0, r0, r8
 8004a32:	4548      	cmp	r0, r9
 8004a34:	f63f af71 	bhi.w	800491a <HAL_RCCEx_PeriphCLKConfig+0x42a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a38:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a3a:	0799      	lsls	r1, r3, #30
 8004a3c:	d5f5      	bpl.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x53a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a3e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004a40:	f403 7140 	and.w	r1, r3, #768	@ 0x300
 8004a44:	e7a2      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x49c>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a46:	02d8      	lsls	r0, r3, #11
 8004a48:	f57f af22 	bpl.w	8004890 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a4c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004a4e:	2a00      	cmp	r2, #0
 8004a50:	f47f af1e 	bne.w	8004890 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8004a54:	e700      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004a56:	bf00      	nop
 8004a58:	40023800 	.word	0x40023800
 8004a5c:	40007000 	.word	0x40007000
 8004a60:	0ffffcff 	.word	0x0ffffcff

08004a64 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a64:	2800      	cmp	r0, #0
 8004a66:	f000 8089 	beq.w	8004b7c <HAL_TIM_Base_Init+0x118>
{
 8004a6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a6c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004a70:	4604      	mov	r4, r0
 8004a72:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d07b      	beq.n	8004b72 <HAL_TIM_Base_Init+0x10e>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a7a:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004a7c:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a7e:	4940      	ldr	r1, [pc, #256]	@ (8004b80 <HAL_TIM_Base_Init+0x11c>)
 8004a80:	4840      	ldr	r0, [pc, #256]	@ (8004b84 <HAL_TIM_Base_Init+0x120>)
 8004a82:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8004a86:	eba2 0101 	sub.w	r1, r2, r1
  htim->State = HAL_TIM_STATE_BUSY;
 8004a8a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a8e:	eba2 0e00 	sub.w	lr, r2, r0
  tmpcr1 = TIMx->CR1;
 8004a92:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a94:	fab1 f181 	clz	r1, r1
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a98:	69a7      	ldr	r7, [r4, #24]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a9a:	fabe fe8e 	clz	lr, lr

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a9e:	6865      	ldr	r5, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004aa0:	ea4f 1151 	mov.w	r1, r1, lsr #5
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004aa4:	68e6      	ldr	r6, [r4, #12]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004aa6:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8004aaa:	d04d      	beq.n	8004b48 <HAL_TIM_Base_Init+0xe4>
 8004aac:	2900      	cmp	r1, #0
 8004aae:	d14b      	bne.n	8004b48 <HAL_TIM_Base_Init+0xe4>
 8004ab0:	f8df c0d8 	ldr.w	ip, [pc, #216]	@ 8004b8c <HAL_TIM_Base_Init+0x128>
 8004ab4:	4562      	cmp	r2, ip
 8004ab6:	d047      	beq.n	8004b48 <HAL_TIM_Base_Init+0xe4>
 8004ab8:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8004abc:	4562      	cmp	r2, ip
 8004abe:	d043      	beq.n	8004b48 <HAL_TIM_Base_Init+0xe4>
 8004ac0:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8004ac4:	4562      	cmp	r2, ip
 8004ac6:	d03f      	beq.n	8004b48 <HAL_TIM_Base_Init+0xe4>
 8004ac8:	f1be 0f00 	cmp.w	lr, #0
 8004acc:	d13c      	bne.n	8004b48 <HAL_TIM_Base_Init+0xe4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ace:	492e      	ldr	r1, [pc, #184]	@ (8004b88 <HAL_TIM_Base_Init+0x124>)
 8004ad0:	428a      	cmp	r2, r1
 8004ad2:	d013      	beq.n	8004afc <HAL_TIM_Base_Init+0x98>
 8004ad4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004ad8:	428a      	cmp	r2, r1
 8004ada:	d00f      	beq.n	8004afc <HAL_TIM_Base_Init+0x98>
 8004adc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004ae0:	428a      	cmp	r2, r1
 8004ae2:	d00b      	beq.n	8004afc <HAL_TIM_Base_Init+0x98>
 8004ae4:	f5a1 3198 	sub.w	r1, r1, #77824	@ 0x13000
 8004ae8:	428a      	cmp	r2, r1
 8004aea:	d007      	beq.n	8004afc <HAL_TIM_Base_Init+0x98>
 8004aec:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004af0:	428a      	cmp	r2, r1
 8004af2:	d003      	beq.n	8004afc <HAL_TIM_Base_Init+0x98>
 8004af4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004af8:	428a      	cmp	r2, r1
 8004afa:	d103      	bne.n	8004b04 <HAL_TIM_Base_Init+0xa0>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004afc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b00:	6921      	ldr	r1, [r4, #16]
 8004b02:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b08:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 8004b0a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b0c:	62d6      	str	r6, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004b0e:	6295      	str	r5, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b10:	2301      	movs	r3, #1
  return HAL_OK;
 8004b12:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8004b14:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b16:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b1a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8004b1e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8004b22:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8004b26:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8004b2a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004b2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b32:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8004b36:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8004b3a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8004b3e:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004b42:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8004b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 8004b48:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004b4e:	4303      	orrs	r3, r0
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b50:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b56:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b5c:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 8004b5e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b60:	62d6      	str	r6, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004b62:	6295      	str	r5, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b64:	b911      	cbnz	r1, 8004b6c <HAL_TIM_Base_Init+0x108>
 8004b66:	f1be 0f00 	cmp.w	lr, #0
 8004b6a:	d0d1      	beq.n	8004b10 <HAL_TIM_Base_Init+0xac>
    TIMx->RCR = Structure->RepetitionCounter;
 8004b6c:	6963      	ldr	r3, [r4, #20]
 8004b6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b70:	e7ce      	b.n	8004b10 <HAL_TIM_Base_Init+0xac>
    htim->Lock = HAL_UNLOCKED;
 8004b72:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004b76:	f7fd fcb7 	bl	80024e8 <HAL_TIM_Base_MspInit>
 8004b7a:	e77e      	b.n	8004a7a <HAL_TIM_Base_Init+0x16>
    return HAL_ERROR;
 8004b7c:	2001      	movs	r0, #1
}
 8004b7e:	4770      	bx	lr
 8004b80:	40010000 	.word	0x40010000
 8004b84:	40010400 	.word	0x40010400
 8004b88:	40014000 	.word	0x40014000
 8004b8c:	40000400 	.word	0x40000400

08004b90 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004b90:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d13d      	bne.n	8004c14 <HAL_TIM_Base_Start_IT+0x84>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b98:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004b9a:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b9c:	4b1e      	ldr	r3, [pc, #120]	@ (8004c18 <HAL_TIM_Base_Start_IT+0x88>)
 8004b9e:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8004ba2:	bf18      	it	ne
 8004ba4:	429a      	cmpne	r2, r3
{
 8004ba6:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ba8:	bf0c      	ite	eq
 8004baa:	2301      	moveq	r3, #1
 8004bac:	2300      	movne	r3, #0
 8004bae:	4d1b      	ldr	r5, [pc, #108]	@ (8004c1c <HAL_TIM_Base_Start_IT+0x8c>)
 8004bb0:	4c1b      	ldr	r4, [pc, #108]	@ (8004c20 <HAL_TIM_Base_Start_IT+0x90>)
 8004bb2:	42aa      	cmp	r2, r5
 8004bb4:	bf08      	it	eq
 8004bb6:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8004bba:	f880 103d 	strb.w	r1, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bbe:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bc0:	42a2      	cmp	r2, r4
 8004bc2:	bf08      	it	eq
 8004bc4:	f043 0301 	orreq.w	r3, r3, #1
 8004bc8:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bcc:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bd0:	4814      	ldr	r0, [pc, #80]	@ (8004c24 <HAL_TIM_Base_Start_IT+0x94>)
 8004bd2:	42a2      	cmp	r2, r4
 8004bd4:	bf08      	it	eq
 8004bd6:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bda:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bdc:	4282      	cmp	r2, r0
 8004bde:	bf08      	it	eq
 8004be0:	f043 0301 	orreq.w	r3, r3, #1
 8004be4:	4910      	ldr	r1, [pc, #64]	@ (8004c28 <HAL_TIM_Base_Start_IT+0x98>)
 8004be6:	428a      	cmp	r2, r1
 8004be8:	bf08      	it	eq
 8004bea:	f043 0301 	orreq.w	r3, r3, #1
 8004bee:	b913      	cbnz	r3, 8004bf6 <HAL_TIM_Base_Start_IT+0x66>
 8004bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8004c2c <HAL_TIM_Base_Start_IT+0x9c>)
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d107      	bne.n	8004c06 <HAL_TIM_Base_Start_IT+0x76>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bf6:	6891      	ldr	r1, [r2, #8]
 8004bf8:	4b0d      	ldr	r3, [pc, #52]	@ (8004c30 <HAL_TIM_Base_Start_IT+0xa0>)
 8004bfa:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bfc:	2b06      	cmp	r3, #6
 8004bfe:	d006      	beq.n	8004c0e <HAL_TIM_Base_Start_IT+0x7e>
 8004c00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c04:	d003      	beq.n	8004c0e <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 8004c06:	6813      	ldr	r3, [r2, #0]
 8004c08:	f043 0301 	orr.w	r3, r3, #1
 8004c0c:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8004c0e:	2000      	movs	r0, #0
}
 8004c10:	bc30      	pop	{r4, r5}
 8004c12:	4770      	bx	lr
    return HAL_ERROR;
 8004c14:	2001      	movs	r0, #1
}
 8004c16:	4770      	bx	lr
 8004c18:	40010000 	.word	0x40010000
 8004c1c:	40000400 	.word	0x40000400
 8004c20:	40000800 	.word	0x40000800
 8004c24:	40010400 	.word	0x40010400
 8004c28:	40014000 	.word	0x40014000
 8004c2c:	40001800 	.word	0x40001800
 8004c30:	00010007 	.word	0x00010007

08004c34 <HAL_TIM_OC_MspInit>:
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop

08004c38 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8004c38:	2800      	cmp	r0, #0
 8004c3a:	f000 8089 	beq.w	8004d50 <HAL_TIM_OC_Init+0x118>
{
 8004c3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004c40:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004c44:	4604      	mov	r4, r0
 8004c46:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d07b      	beq.n	8004d46 <HAL_TIM_OC_Init+0x10e>
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004c4e:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004c50:	2302      	movs	r3, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c52:	4940      	ldr	r1, [pc, #256]	@ (8004d54 <HAL_TIM_OC_Init+0x11c>)
 8004c54:	4840      	ldr	r0, [pc, #256]	@ (8004d58 <HAL_TIM_OC_Init+0x120>)
 8004c56:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8004c5a:	eba2 0101 	sub.w	r1, r2, r1
  htim->State = HAL_TIM_STATE_BUSY;
 8004c5e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c62:	eba2 0e00 	sub.w	lr, r2, r0
  tmpcr1 = TIMx->CR1;
 8004c66:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c68:	fab1 f181 	clz	r1, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c6c:	69a7      	ldr	r7, [r4, #24]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c6e:	fabe fe8e 	clz	lr, lr
  TIMx->PSC = Structure->Prescaler;
 8004c72:	6865      	ldr	r5, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c74:	ea4f 1151 	mov.w	r1, r1, lsr #5
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c78:	68e6      	ldr	r6, [r4, #12]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c7a:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8004c7e:	d04d      	beq.n	8004d1c <HAL_TIM_OC_Init+0xe4>
 8004c80:	2900      	cmp	r1, #0
 8004c82:	d14b      	bne.n	8004d1c <HAL_TIM_OC_Init+0xe4>
 8004c84:	f8df c0d8 	ldr.w	ip, [pc, #216]	@ 8004d60 <HAL_TIM_OC_Init+0x128>
 8004c88:	4562      	cmp	r2, ip
 8004c8a:	d047      	beq.n	8004d1c <HAL_TIM_OC_Init+0xe4>
 8004c8c:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8004c90:	4562      	cmp	r2, ip
 8004c92:	d043      	beq.n	8004d1c <HAL_TIM_OC_Init+0xe4>
 8004c94:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8004c98:	4562      	cmp	r2, ip
 8004c9a:	d03f      	beq.n	8004d1c <HAL_TIM_OC_Init+0xe4>
 8004c9c:	f1be 0f00 	cmp.w	lr, #0
 8004ca0:	d13c      	bne.n	8004d1c <HAL_TIM_OC_Init+0xe4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ca2:	492e      	ldr	r1, [pc, #184]	@ (8004d5c <HAL_TIM_OC_Init+0x124>)
 8004ca4:	428a      	cmp	r2, r1
 8004ca6:	d013      	beq.n	8004cd0 <HAL_TIM_OC_Init+0x98>
 8004ca8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004cac:	428a      	cmp	r2, r1
 8004cae:	d00f      	beq.n	8004cd0 <HAL_TIM_OC_Init+0x98>
 8004cb0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004cb4:	428a      	cmp	r2, r1
 8004cb6:	d00b      	beq.n	8004cd0 <HAL_TIM_OC_Init+0x98>
 8004cb8:	f5a1 3198 	sub.w	r1, r1, #77824	@ 0x13000
 8004cbc:	428a      	cmp	r2, r1
 8004cbe:	d007      	beq.n	8004cd0 <HAL_TIM_OC_Init+0x98>
 8004cc0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004cc4:	428a      	cmp	r2, r1
 8004cc6:	d003      	beq.n	8004cd0 <HAL_TIM_OC_Init+0x98>
 8004cc8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004ccc:	428a      	cmp	r2, r1
 8004cce:	d103      	bne.n	8004cd8 <HAL_TIM_OC_Init+0xa0>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cd4:	6921      	ldr	r1, [r4, #16]
 8004cd6:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cd8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cdc:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 8004cde:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ce0:	62d6      	str	r6, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004ce2:	6295      	str	r5, [r2, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8004ce4:	2301      	movs	r3, #1
  return HAL_OK;
 8004ce6:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8004ce8:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cea:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cee:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8004cf2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8004cf6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8004cfa:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8004cfe:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004d02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d06:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8004d0a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8004d0e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8004d12:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004d16:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8004d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 8004d1c:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004d22:	4303      	orrs	r3, r0
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d24:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d2a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d30:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 8004d32:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d34:	62d6      	str	r6, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004d36:	6295      	str	r5, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d38:	b911      	cbnz	r1, 8004d40 <HAL_TIM_OC_Init+0x108>
 8004d3a:	f1be 0f00 	cmp.w	lr, #0
 8004d3e:	d0d1      	beq.n	8004ce4 <HAL_TIM_OC_Init+0xac>
    TIMx->RCR = Structure->RepetitionCounter;
 8004d40:	6963      	ldr	r3, [r4, #20]
 8004d42:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d44:	e7ce      	b.n	8004ce4 <HAL_TIM_OC_Init+0xac>
    htim->Lock = HAL_UNLOCKED;
 8004d46:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_OC_MspInit(htim);
 8004d4a:	f7ff ff73 	bl	8004c34 <HAL_TIM_OC_MspInit>
 8004d4e:	e77e      	b.n	8004c4e <HAL_TIM_OC_Init+0x16>
    return HAL_ERROR;
 8004d50:	2001      	movs	r0, #1
}
 8004d52:	4770      	bx	lr
 8004d54:	40010000 	.word	0x40010000
 8004d58:	40010400 	.word	0x40010400
 8004d5c:	40014000 	.word	0x40014000
 8004d60:	40000400 	.word	0x40000400

08004d64 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop

08004d68 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8004d68:	2800      	cmp	r0, #0
 8004d6a:	f000 8089 	beq.w	8004e80 <HAL_TIM_PWM_Init+0x118>
{
 8004d6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004d70:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004d74:	4604      	mov	r4, r0
 8004d76:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d07b      	beq.n	8004e76 <HAL_TIM_PWM_Init+0x10e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d7e:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004d80:	2302      	movs	r3, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d82:	4940      	ldr	r1, [pc, #256]	@ (8004e84 <HAL_TIM_PWM_Init+0x11c>)
 8004d84:	4840      	ldr	r0, [pc, #256]	@ (8004e88 <HAL_TIM_PWM_Init+0x120>)
 8004d86:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8004d8a:	eba2 0101 	sub.w	r1, r2, r1
  htim->State = HAL_TIM_STATE_BUSY;
 8004d8e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d92:	eba2 0e00 	sub.w	lr, r2, r0
  tmpcr1 = TIMx->CR1;
 8004d96:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d98:	fab1 f181 	clz	r1, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d9c:	69a7      	ldr	r7, [r4, #24]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d9e:	fabe fe8e 	clz	lr, lr
  TIMx->PSC = Structure->Prescaler;
 8004da2:	6865      	ldr	r5, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004da4:	ea4f 1151 	mov.w	r1, r1, lsr #5
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004da8:	68e6      	ldr	r6, [r4, #12]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004daa:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8004dae:	d04d      	beq.n	8004e4c <HAL_TIM_PWM_Init+0xe4>
 8004db0:	2900      	cmp	r1, #0
 8004db2:	d14b      	bne.n	8004e4c <HAL_TIM_PWM_Init+0xe4>
 8004db4:	f8df c0d8 	ldr.w	ip, [pc, #216]	@ 8004e90 <HAL_TIM_PWM_Init+0x128>
 8004db8:	4562      	cmp	r2, ip
 8004dba:	d047      	beq.n	8004e4c <HAL_TIM_PWM_Init+0xe4>
 8004dbc:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8004dc0:	4562      	cmp	r2, ip
 8004dc2:	d043      	beq.n	8004e4c <HAL_TIM_PWM_Init+0xe4>
 8004dc4:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8004dc8:	4562      	cmp	r2, ip
 8004dca:	d03f      	beq.n	8004e4c <HAL_TIM_PWM_Init+0xe4>
 8004dcc:	f1be 0f00 	cmp.w	lr, #0
 8004dd0:	d13c      	bne.n	8004e4c <HAL_TIM_PWM_Init+0xe4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dd2:	492e      	ldr	r1, [pc, #184]	@ (8004e8c <HAL_TIM_PWM_Init+0x124>)
 8004dd4:	428a      	cmp	r2, r1
 8004dd6:	d013      	beq.n	8004e00 <HAL_TIM_PWM_Init+0x98>
 8004dd8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004ddc:	428a      	cmp	r2, r1
 8004dde:	d00f      	beq.n	8004e00 <HAL_TIM_PWM_Init+0x98>
 8004de0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004de4:	428a      	cmp	r2, r1
 8004de6:	d00b      	beq.n	8004e00 <HAL_TIM_PWM_Init+0x98>
 8004de8:	f5a1 3198 	sub.w	r1, r1, #77824	@ 0x13000
 8004dec:	428a      	cmp	r2, r1
 8004dee:	d007      	beq.n	8004e00 <HAL_TIM_PWM_Init+0x98>
 8004df0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004df4:	428a      	cmp	r2, r1
 8004df6:	d003      	beq.n	8004e00 <HAL_TIM_PWM_Init+0x98>
 8004df8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004dfc:	428a      	cmp	r2, r1
 8004dfe:	d103      	bne.n	8004e08 <HAL_TIM_PWM_Init+0xa0>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e04:	6921      	ldr	r1, [r4, #16]
 8004e06:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e0c:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 8004e0e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e10:	62d6      	str	r6, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004e12:	6295      	str	r5, [r2, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8004e14:	2301      	movs	r3, #1
  return HAL_OK;
 8004e16:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8004e18:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e1a:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e1e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8004e22:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8004e26:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8004e2a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8004e2e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004e32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e36:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8004e3a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8004e3e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8004e42:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004e46:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8004e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 8004e4c:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004e52:	4303      	orrs	r3, r0
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e54:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e5a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e60:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 8004e62:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e64:	62d6      	str	r6, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004e66:	6295      	str	r5, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e68:	b911      	cbnz	r1, 8004e70 <HAL_TIM_PWM_Init+0x108>
 8004e6a:	f1be 0f00 	cmp.w	lr, #0
 8004e6e:	d0d1      	beq.n	8004e14 <HAL_TIM_PWM_Init+0xac>
    TIMx->RCR = Structure->RepetitionCounter;
 8004e70:	6963      	ldr	r3, [r4, #20]
 8004e72:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e74:	e7ce      	b.n	8004e14 <HAL_TIM_PWM_Init+0xac>
    htim->Lock = HAL_UNLOCKED;
 8004e76:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004e7a:	f7ff ff73 	bl	8004d64 <HAL_TIM_PWM_MspInit>
 8004e7e:	e77e      	b.n	8004d7e <HAL_TIM_PWM_Init+0x16>
    return HAL_ERROR;
 8004e80:	2001      	movs	r0, #1
}
 8004e82:	4770      	bx	lr
 8004e84:	40010000 	.word	0x40010000
 8004e88:	40010400 	.word	0x40010400
 8004e8c:	40014000 	.word	0x40014000
 8004e90:	40000400 	.word	0x40000400

08004e94 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 8004e94:	2800      	cmp	r0, #0
 8004e96:	f000 8089 	beq.w	8004fac <HAL_TIM_IC_Init+0x118>
{
 8004e9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004e9c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004ea0:	4604      	mov	r4, r0
 8004ea2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d07b      	beq.n	8004fa2 <HAL_TIM_IC_Init+0x10e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004eaa:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004eac:	2302      	movs	r3, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004eae:	4940      	ldr	r1, [pc, #256]	@ (8004fb0 <HAL_TIM_IC_Init+0x11c>)
 8004eb0:	4840      	ldr	r0, [pc, #256]	@ (8004fb4 <HAL_TIM_IC_Init+0x120>)
 8004eb2:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8004eb6:	eba2 0101 	sub.w	r1, r2, r1
  htim->State = HAL_TIM_STATE_BUSY;
 8004eba:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ebe:	eba2 0e00 	sub.w	lr, r2, r0
  tmpcr1 = TIMx->CR1;
 8004ec2:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ec4:	fab1 f181 	clz	r1, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ec8:	69a7      	ldr	r7, [r4, #24]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004eca:	fabe fe8e 	clz	lr, lr
  TIMx->PSC = Structure->Prescaler;
 8004ece:	6865      	ldr	r5, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ed0:	ea4f 1151 	mov.w	r1, r1, lsr #5
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ed4:	68e6      	ldr	r6, [r4, #12]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ed6:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8004eda:	d04d      	beq.n	8004f78 <HAL_TIM_IC_Init+0xe4>
 8004edc:	2900      	cmp	r1, #0
 8004ede:	d14b      	bne.n	8004f78 <HAL_TIM_IC_Init+0xe4>
 8004ee0:	f8df c0d8 	ldr.w	ip, [pc, #216]	@ 8004fbc <HAL_TIM_IC_Init+0x128>
 8004ee4:	4562      	cmp	r2, ip
 8004ee6:	d047      	beq.n	8004f78 <HAL_TIM_IC_Init+0xe4>
 8004ee8:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8004eec:	4562      	cmp	r2, ip
 8004eee:	d043      	beq.n	8004f78 <HAL_TIM_IC_Init+0xe4>
 8004ef0:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8004ef4:	4562      	cmp	r2, ip
 8004ef6:	d03f      	beq.n	8004f78 <HAL_TIM_IC_Init+0xe4>
 8004ef8:	f1be 0f00 	cmp.w	lr, #0
 8004efc:	d13c      	bne.n	8004f78 <HAL_TIM_IC_Init+0xe4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004efe:	492e      	ldr	r1, [pc, #184]	@ (8004fb8 <HAL_TIM_IC_Init+0x124>)
 8004f00:	428a      	cmp	r2, r1
 8004f02:	d013      	beq.n	8004f2c <HAL_TIM_IC_Init+0x98>
 8004f04:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004f08:	428a      	cmp	r2, r1
 8004f0a:	d00f      	beq.n	8004f2c <HAL_TIM_IC_Init+0x98>
 8004f0c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004f10:	428a      	cmp	r2, r1
 8004f12:	d00b      	beq.n	8004f2c <HAL_TIM_IC_Init+0x98>
 8004f14:	f5a1 3198 	sub.w	r1, r1, #77824	@ 0x13000
 8004f18:	428a      	cmp	r2, r1
 8004f1a:	d007      	beq.n	8004f2c <HAL_TIM_IC_Init+0x98>
 8004f1c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004f20:	428a      	cmp	r2, r1
 8004f22:	d003      	beq.n	8004f2c <HAL_TIM_IC_Init+0x98>
 8004f24:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004f28:	428a      	cmp	r2, r1
 8004f2a:	d103      	bne.n	8004f34 <HAL_TIM_IC_Init+0xa0>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f30:	6921      	ldr	r1, [r4, #16]
 8004f32:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f38:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 8004f3a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f3c:	62d6      	str	r6, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004f3e:	6295      	str	r5, [r2, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8004f40:	2301      	movs	r3, #1
  return HAL_OK;
 8004f42:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8004f44:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f46:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f4a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8004f4e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8004f52:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8004f56:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8004f5a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f62:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8004f66:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8004f6a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8004f6e:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004f72:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8004f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 8004f78:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004f7e:	4303      	orrs	r3, r0
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f80:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f86:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f8c:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 8004f8e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f90:	62d6      	str	r6, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004f92:	6295      	str	r5, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f94:	b911      	cbnz	r1, 8004f9c <HAL_TIM_IC_Init+0x108>
 8004f96:	f1be 0f00 	cmp.w	lr, #0
 8004f9a:	d0d1      	beq.n	8004f40 <HAL_TIM_IC_Init+0xac>
    TIMx->RCR = Structure->RepetitionCounter;
 8004f9c:	6963      	ldr	r3, [r4, #20]
 8004f9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fa0:	e7ce      	b.n	8004f40 <HAL_TIM_IC_Init+0xac>
    htim->Lock = HAL_UNLOCKED;
 8004fa2:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_IC_MspInit(htim);
 8004fa6:	f7fd faeb 	bl	8002580 <HAL_TIM_IC_MspInit>
 8004faa:	e77e      	b.n	8004eaa <HAL_TIM_IC_Init+0x16>
    return HAL_ERROR;
 8004fac:	2001      	movs	r0, #1
}
 8004fae:	4770      	bx	lr
 8004fb0:	40010000 	.word	0x40010000
 8004fb4:	40010400 	.word	0x40010400
 8004fb8:	40014000 	.word	0x40014000
 8004fbc:	40000400 	.word	0x40000400

08004fc0 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8004fc0:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	f000 80e2 	beq.w	800518e <HAL_TIM_OC_ConfigChannel+0x1ce>
 8004fca:	4684      	mov	ip, r0
{
 8004fcc:	b470      	push	{r4, r5, r6}
  switch (Channel)
 8004fce:	2a14      	cmp	r2, #20
 8004fd0:	d816      	bhi.n	8005000 <HAL_TIM_OC_ConfigChannel+0x40>
 8004fd2:	e8df f012 	tbh	[pc, r2, lsl #1]
 8004fd6:	0041      	.short	0x0041
 8004fd8:	00150015 	.word	0x00150015
 8004fdc:	00600015 	.word	0x00600015
 8004fe0:	00150015 	.word	0x00150015
 8004fe4:	00a00015 	.word	0x00a00015
 8004fe8:	00150015 	.word	0x00150015
 8004fec:	00810015 	.word	0x00810015
 8004ff0:	00150015 	.word	0x00150015
 8004ff4:	00be0015 	.word	0x00be0015
 8004ff8:	00150015 	.word	0x00150015
 8004ffc:	001b0015 	.word	0x001b0015
  __HAL_UNLOCK(htim);
 8005000:	2300      	movs	r3, #0
  switch (Channel)
 8005002:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8005004:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
}
 8005008:	bc70      	pop	{r4, r5, r6}
 800500a:	4770      	bx	lr
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800500c:	6803      	ldr	r3, [r0, #0]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800500e:	487f      	ldr	r0, [pc, #508]	@ (800520c <HAL_TIM_OC_ConfigChannel+0x24c>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005010:	6a1a      	ldr	r2, [r3, #32]
 8005012:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8005016:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005018:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800501a:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 800501c:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800501e:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005022:	4028      	ands	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005024:	680d      	ldr	r5, [r1, #0]
 8005026:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800502a:	688d      	ldr	r5, [r1, #8]
 800502c:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005030:	4d77      	ldr	r5, [pc, #476]	@ (8005210 <HAL_TIM_OC_ConfigChannel+0x250>)
 8005032:	42ab      	cmp	r3, r5
 8005034:	f000 80ad 	beq.w	8005192 <HAL_TIM_OC_ConfigChannel+0x1d2>
 8005038:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800503c:	42ab      	cmp	r3, r5
 800503e:	f000 80a8 	beq.w	8005192 <HAL_TIM_OC_ConfigChannel+0x1d2>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005042:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005044:	605c      	str	r4, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8005046:	6558      	str	r0, [r3, #84]	@ 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8005048:	65d9      	str	r1, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800504a:	621a      	str	r2, [r3, #32]
  __HAL_UNLOCK(htim);
 800504c:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 800504e:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8005050:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
}
 8005054:	bc70      	pop	{r4, r5, r6}
 8005056:	4770      	bx	lr
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005058:	6803      	ldr	r3, [r0, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800505a:	486e      	ldr	r0, [pc, #440]	@ (8005214 <HAL_TIM_OC_ConfigChannel+0x254>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800505c:	6a1a      	ldr	r2, [r3, #32]
 800505e:	f022 0201 	bic.w	r2, r2, #1
 8005062:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005064:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005066:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8005068:	699d      	ldr	r5, [r3, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 800506a:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800506e:	4028      	ands	r0, r5
  tmpccmrx |= OC_Config->OCMode;
 8005070:	680d      	ldr	r5, [r1, #0]
 8005072:	4328      	orrs	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 8005074:	688d      	ldr	r5, [r1, #8]
 8005076:	432a      	orrs	r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005078:	4d65      	ldr	r5, [pc, #404]	@ (8005210 <HAL_TIM_OC_ConfigChannel+0x250>)
 800507a:	42ab      	cmp	r3, r5
 800507c:	f000 8095 	beq.w	80051aa <HAL_TIM_OC_ConfigChannel+0x1ea>
 8005080:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005084:	42ab      	cmp	r3, r5
 8005086:	f000 8090 	beq.w	80051aa <HAL_TIM_OC_ConfigChannel+0x1ea>
  TIMx->CCR1 = OC_Config->Pulse;
 800508a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800508c:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 800508e:	6198      	str	r0, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8005090:	6359      	str	r1, [r3, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 8005092:	621a      	str	r2, [r3, #32]
}
 8005094:	e7da      	b.n	800504c <HAL_TIM_OC_ConfigChannel+0x8c>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005096:	6803      	ldr	r3, [r0, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005098:	485f      	ldr	r0, [pc, #380]	@ (8005218 <HAL_TIM_OC_ConfigChannel+0x258>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800509a:	6a1a      	ldr	r2, [r3, #32]
 800509c:	f022 0210 	bic.w	r2, r2, #16
 80050a0:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80050a2:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80050a4:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80050a6:	699d      	ldr	r5, [r3, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 80050a8:	f022 0220 	bic.w	r2, r2, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050ac:	4028      	ands	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050ae:	680d      	ldr	r5, [r1, #0]
 80050b0:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050b4:	688d      	ldr	r5, [r1, #8]
 80050b6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050ba:	4d55      	ldr	r5, [pc, #340]	@ (8005210 <HAL_TIM_OC_ConfigChannel+0x250>)
 80050bc:	42ab      	cmp	r3, r5
 80050be:	f000 8087 	beq.w	80051d0 <HAL_TIM_OC_ConfigChannel+0x210>
 80050c2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80050c6:	42ab      	cmp	r3, r5
 80050c8:	f000 8082 	beq.w	80051d0 <HAL_TIM_OC_ConfigChannel+0x210>
  TIMx->CCR2 = OC_Config->Pulse;
 80050cc:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80050ce:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80050d0:	6198      	str	r0, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80050d2:	6399      	str	r1, [r3, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 80050d4:	621a      	str	r2, [r3, #32]
}
 80050d6:	e7b9      	b.n	800504c <HAL_TIM_OC_ConfigChannel+0x8c>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050d8:	6803      	ldr	r3, [r0, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050da:	484f      	ldr	r0, [pc, #316]	@ (8005218 <HAL_TIM_OC_ConfigChannel+0x258>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050dc:	6a1a      	ldr	r2, [r3, #32]
 80050de:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80050e2:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80050e4:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80050e6:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80050e8:	69dd      	ldr	r5, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 80050ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050ee:	4028      	ands	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050f0:	680d      	ldr	r5, [r1, #0]
 80050f2:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050f6:	688d      	ldr	r5, [r1, #8]
 80050f8:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050fc:	4d44      	ldr	r5, [pc, #272]	@ (8005210 <HAL_TIM_OC_ConfigChannel+0x250>)
 80050fe:	42ab      	cmp	r3, r5
 8005100:	d060      	beq.n	80051c4 <HAL_TIM_OC_ConfigChannel+0x204>
 8005102:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005106:	42ab      	cmp	r3, r5
 8005108:	d05c      	beq.n	80051c4 <HAL_TIM_OC_ConfigChannel+0x204>
  TIMx->CCR4 = OC_Config->Pulse;
 800510a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800510c:	605c      	str	r4, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800510e:	61d8      	str	r0, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8005110:	6419      	str	r1, [r3, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 8005112:	621a      	str	r2, [r3, #32]
}
 8005114:	e79a      	b.n	800504c <HAL_TIM_OC_ConfigChannel+0x8c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005116:	6803      	ldr	r3, [r0, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005118:	483e      	ldr	r0, [pc, #248]	@ (8005214 <HAL_TIM_OC_ConfigChannel+0x254>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800511a:	6a1a      	ldr	r2, [r3, #32]
 800511c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005120:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005122:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005124:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8005126:	69dd      	ldr	r5, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8005128:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800512c:	4028      	ands	r0, r5
  tmpccmrx |= OC_Config->OCMode;
 800512e:	680d      	ldr	r5, [r1, #0]
 8005130:	4328      	orrs	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005132:	688d      	ldr	r5, [r1, #8]
 8005134:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005138:	4d35      	ldr	r5, [pc, #212]	@ (8005210 <HAL_TIM_OC_ConfigChannel+0x250>)
 800513a:	42ab      	cmp	r3, r5
 800513c:	d057      	beq.n	80051ee <HAL_TIM_OC_ConfigChannel+0x22e>
 800513e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005142:	42ab      	cmp	r3, r5
 8005144:	d053      	beq.n	80051ee <HAL_TIM_OC_ConfigChannel+0x22e>
  TIMx->CCR3 = OC_Config->Pulse;
 8005146:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005148:	605c      	str	r4, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800514a:	61d8      	str	r0, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800514c:	63d9      	str	r1, [r3, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 800514e:	621a      	str	r2, [r3, #32]
}
 8005150:	e77c      	b.n	800504c <HAL_TIM_OC_ConfigChannel+0x8c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005152:	6803      	ldr	r3, [r0, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005154:	4831      	ldr	r0, [pc, #196]	@ (800521c <HAL_TIM_OC_ConfigChannel+0x25c>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005156:	6a1a      	ldr	r2, [r3, #32]
 8005158:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800515c:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800515e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005160:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8005162:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
  tmpccer &= ~TIM_CCER_CC5P;
 8005164:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005168:	4028      	ands	r0, r5
  tmpccmrx |= OC_Config->OCMode;
 800516a:	680d      	ldr	r5, [r1, #0]
 800516c:	4328      	orrs	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800516e:	688d      	ldr	r5, [r1, #8]
 8005170:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005174:	4d26      	ldr	r5, [pc, #152]	@ (8005210 <HAL_TIM_OC_ConfigChannel+0x250>)
 8005176:	42ab      	cmp	r3, r5
 8005178:	d011      	beq.n	800519e <HAL_TIM_OC_ConfigChannel+0x1de>
 800517a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800517e:	42ab      	cmp	r3, r5
 8005180:	d00d      	beq.n	800519e <HAL_TIM_OC_ConfigChannel+0x1de>
  TIMx->CCR5 = OC_Config->Pulse;
 8005182:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005184:	605c      	str	r4, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8005186:	6558      	str	r0, [r3, #84]	@ 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8005188:	6599      	str	r1, [r3, #88]	@ 0x58
  TIMx->CCER = tmpccer;
 800518a:	621a      	str	r2, [r3, #32]
}
 800518c:	e75e      	b.n	800504c <HAL_TIM_OC_ConfigChannel+0x8c>
  __HAL_LOCK(htim);
 800518e:	2002      	movs	r0, #2
}
 8005190:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005192:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005196:	694d      	ldr	r5, [r1, #20]
 8005198:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 800519c:	e751      	b.n	8005042 <HAL_TIM_OC_ConfigChannel+0x82>
    tmpcr2 &= ~TIM_CR2_OIS5;
 800519e:	f424 3480 	bic.w	r4, r4, #65536	@ 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80051a2:	694d      	ldr	r5, [r1, #20]
 80051a4:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 80051a8:	e7eb      	b.n	8005182 <HAL_TIM_OC_ConfigChannel+0x1c2>
    tmpccer |= OC_Config->OCNPolarity;
 80051aa:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80051ac:	f022 0208 	bic.w	r2, r2, #8
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051b0:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpccer |= OC_Config->OCNPolarity;
 80051b4:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 80051b6:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpccer &= ~TIM_CCER_CC1NE;
 80051ba:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80051be:	4335      	orrs	r5, r6
 80051c0:	432c      	orrs	r4, r5
 80051c2:	e762      	b.n	800508a <HAL_TIM_OC_ConfigChannel+0xca>
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051c4:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051c8:	694d      	ldr	r5, [r1, #20]
 80051ca:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80051ce:	e79c      	b.n	800510a <HAL_TIM_OC_ConfigChannel+0x14a>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051d0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80051d2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051d6:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051da:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051de:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpccer &= ~TIM_CCER_CC2NE;
 80051e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051e6:	4335      	orrs	r5, r6
 80051e8:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 80051ec:	e76e      	b.n	80050cc <HAL_TIM_OC_ConfigChannel+0x10c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051ee:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80051f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051f4:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051f8:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051fc:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpccer &= ~TIM_CCER_CC3NE;
 8005200:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005204:	4335      	orrs	r5, r6
 8005206:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 800520a:	e79c      	b.n	8005146 <HAL_TIM_OC_ConfigChannel+0x186>
 800520c:	feff8fff 	.word	0xfeff8fff
 8005210:	40010000 	.word	0x40010000
 8005214:	fffeff8c 	.word	0xfffeff8c
 8005218:	feff8cff 	.word	0xfeff8cff
 800521c:	fffeff8f 	.word	0xfffeff8f

08005220 <HAL_TIM_IC_ConfigChannel>:
{
 8005220:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8005222:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 8005226:	2801      	cmp	r0, #1
 8005228:	f000 80c9 	beq.w	80053be <HAL_TIM_IC_ConfigChannel+0x19e>
 800522c:	2001      	movs	r0, #1
{
 800522e:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8005230:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  if (Channel == TIM_CHANNEL_1)
 8005234:	b15a      	cbz	r2, 800524e <HAL_TIM_IC_ConfigChannel+0x2e>
  else if (Channel == TIM_CHANNEL_2)
 8005236:	2a04      	cmp	r2, #4
 8005238:	d054      	beq.n	80052e4 <HAL_TIM_IC_ConfigChannel+0xc4>
  else if (Channel == TIM_CHANNEL_3)
 800523a:	2a08      	cmp	r2, #8
 800523c:	f000 809c 	beq.w	8005378 <HAL_TIM_IC_ConfigChannel+0x158>
  else if (Channel == TIM_CHANNEL_4)
 8005240:	2a0c      	cmp	r2, #12
 8005242:	d074      	beq.n	800532e <HAL_TIM_IC_ConfigChannel+0x10e>
  __HAL_UNLOCK(htim);
 8005244:	2200      	movs	r2, #0
 8005246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800524a:	bcf0      	pop	{r4, r5, r6, r7}
 800524c:	4770      	bx	lr
    TIM_TI1_SetConfig(htim->Instance,
 800524e:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005250:	f8df c170 	ldr.w	ip, [pc, #368]	@ 80053c4 <HAL_TIM_IC_ConfigChannel+0x1a4>
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005254:	6a16      	ldr	r6, [r2, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005256:	4562      	cmp	r2, ip
                      sConfig->ICFilter);
 8005258:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800525a:	f026 0601 	bic.w	r6, r6, #1
                      sConfig->ICSelection,
 800525e:	e9d1 4500 	ldrd	r4, r5, [r1]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005262:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005264:	6997      	ldr	r7, [r2, #24]
  tmpccer = TIMx->CCER;
 8005266:	6a16      	ldr	r6, [r2, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005268:	d01d      	beq.n	80052a6 <HAL_TIM_IC_ConfigChannel+0x86>
 800526a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800526e:	d01a      	beq.n	80052a6 <HAL_TIM_IC_ConfigChannel+0x86>
 8005270:	f5ac 4c7c 	sub.w	ip, ip, #64512	@ 0xfc00
 8005274:	4562      	cmp	r2, ip
 8005276:	d016      	beq.n	80052a6 <HAL_TIM_IC_ConfigChannel+0x86>
 8005278:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800527c:	4562      	cmp	r2, ip
 800527e:	d012      	beq.n	80052a6 <HAL_TIM_IC_ConfigChannel+0x86>
 8005280:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8005284:	4562      	cmp	r2, ip
 8005286:	d00e      	beq.n	80052a6 <HAL_TIM_IC_ConfigChannel+0x86>
 8005288:	f50c 4c78 	add.w	ip, ip, #63488	@ 0xf800
 800528c:	4562      	cmp	r2, ip
 800528e:	d00a      	beq.n	80052a6 <HAL_TIM_IC_ConfigChannel+0x86>
 8005290:	f50c 5c70 	add.w	ip, ip, #15360	@ 0x3c00
 8005294:	4562      	cmp	r2, ip
 8005296:	d006      	beq.n	80052a6 <HAL_TIM_IC_ConfigChannel+0x86>
 8005298:	f5ac 3c94 	sub.w	ip, ip, #75776	@ 0x12800
 800529c:	4562      	cmp	r2, ip
 800529e:	d002      	beq.n	80052a6 <HAL_TIM_IC_ConfigChannel+0x86>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
    tmpccmr1 |= TIM_ICSelection;
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80052a0:	f047 0c01 	orr.w	ip, r7, #1
 80052a4:	e003      	b.n	80052ae <HAL_TIM_IC_ConfigChannel+0x8e>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80052a6:	f027 0703 	bic.w	r7, r7, #3
    tmpccmr1 |= TIM_ICSelection;
 80052aa:	ea45 0c07 	orr.w	ip, r5, r7
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80052ae:	0100      	lsls	r0, r0, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052b0:	f02c 0cf0 	bic.w	ip, ip, #240	@ 0xf0

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052b4:	f026 050a 	bic.w	r5, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80052b8:	f004 040a 	and.w	r4, r4, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80052bc:	b2c0      	uxtb	r0, r0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80052be:	432c      	orrs	r4, r5
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80052c0:	ea40 000c 	orr.w	r0, r0, ip

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052c4:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 80052c6:	6214      	str	r4, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80052c8:	6990      	ldr	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80052ca:	688c      	ldr	r4, [r1, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80052cc:	f020 000c 	bic.w	r0, r0, #12
 80052d0:	6190      	str	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80052d2:	6991      	ldr	r1, [r2, #24]
 80052d4:	4321      	orrs	r1, r4
 80052d6:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 80052d8:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 80052da:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 80052dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80052e0:	bcf0      	pop	{r4, r5, r6, r7}
 80052e2:	4770      	bx	lr
    TIM_TI2_SetConfig(htim->Instance,
 80052e4:	681a      	ldr	r2, [r3, #0]
                      sConfig->ICFilter);
 80052e6:	68c8      	ldr	r0, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052e8:	6a14      	ldr	r4, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
  tmpccmr1 |= (TIM_ICSelection << 8U);

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80052ea:	0300      	lsls	r0, r0, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052ec:	f024 0410 	bic.w	r4, r4, #16
                      sConfig->ICSelection,
 80052f0:	e9d1 5600 	ldrd	r5, r6, [r1]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052f4:	6214      	str	r4, [r2, #32]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80052f6:	688c      	ldr	r4, [r1, #8]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80052f8:	b281      	uxth	r1, r0
  tmpccmr1 = TIMx->CCMR1;
 80052fa:	6990      	ldr	r0, [r2, #24]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80052fc:	012d      	lsls	r5, r5, #4
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80052fe:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005302:	f005 05a0 	and.w	r5, r5, #160	@ 0xa0
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005306:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800530a:	f420 4070 	bic.w	r0, r0, #61440	@ 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800530e:	4301      	orrs	r1, r0
  tmpccer = TIMx->CCER;
 8005310:	6a10      	ldr	r0, [r2, #32]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005312:	6191      	str	r1, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005314:	f020 01a0 	bic.w	r1, r0, #160	@ 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005318:	4329      	orrs	r1, r5
  TIMx->CCER = tmpccer;
 800531a:	6211      	str	r1, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800531c:	6991      	ldr	r1, [r2, #24]
 800531e:	f421 6140 	bic.w	r1, r1, #3072	@ 0xc00
 8005322:	6191      	str	r1, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005324:	6991      	ldr	r1, [r2, #24]
 8005326:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 800532a:	6191      	str	r1, [r2, #24]
 800532c:	e7d4      	b.n	80052d8 <HAL_TIM_IC_ConfigChannel+0xb8>
    TIM_TI4_SetConfig(htim->Instance,
 800532e:	681a      	ldr	r2, [r3, #0]
                      sConfig->ICFilter);
 8005330:	68c8      	ldr	r0, [r1, #12]
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005332:	6a14      	ldr	r4, [r2, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
  tmpccmr2 |= (TIM_ICSelection << 8U);

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005334:	0300      	lsls	r0, r0, #12
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005336:	f424 5480 	bic.w	r4, r4, #4096	@ 0x1000
                      sConfig->ICSelection,
 800533a:	e9d1 5600 	ldrd	r5, r6, [r1]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800533e:	6214      	str	r4, [r2, #32]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005340:	688c      	ldr	r4, [r1, #8]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005342:	b281      	uxth	r1, r0
  tmpccmr2 = TIMx->CCMR2;
 8005344:	69d0      	ldr	r0, [r2, #28]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005346:	032d      	lsls	r5, r5, #12
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005348:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800534c:	f405 4520 	and.w	r5, r5, #40960	@ 0xa000
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005350:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005354:	f420 4070 	bic.w	r0, r0, #61440	@ 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005358:	4301      	orrs	r1, r0
  tmpccer = TIMx->CCER;
 800535a:	6a10      	ldr	r0, [r2, #32]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800535c:	61d1      	str	r1, [r2, #28]
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800535e:	f420 4120 	bic.w	r1, r0, #40960	@ 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005362:	4329      	orrs	r1, r5
  TIMx->CCER = tmpccer ;
 8005364:	6211      	str	r1, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005366:	69d1      	ldr	r1, [r2, #28]
 8005368:	f421 6140 	bic.w	r1, r1, #3072	@ 0xc00
 800536c:	61d1      	str	r1, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800536e:	69d1      	ldr	r1, [r2, #28]
 8005370:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 8005374:	61d1      	str	r1, [r2, #28]
 8005376:	e7af      	b.n	80052d8 <HAL_TIM_IC_ConfigChannel+0xb8>
    TIM_TI3_SetConfig(htim->Instance,
 8005378:	681a      	ldr	r2, [r3, #0]
                      sConfig->ICFilter);
 800537a:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800537c:	6a16      	ldr	r6, [r2, #32]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800537e:	0100      	lsls	r0, r0, #4
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005380:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
                      sConfig->ICSelection,
 8005384:	e9d1 5400 	ldrd	r5, r4, [r1]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005388:	6216      	str	r6, [r2, #32]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800538a:	688e      	ldr	r6, [r1, #8]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800538c:	b2c1      	uxtb	r1, r0
  tmpccmr2 = TIMx->CCMR2;
 800538e:	69d0      	ldr	r0, [r2, #28]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005390:	022d      	lsls	r5, r5, #8
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005392:	f020 0003 	bic.w	r0, r0, #3
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005396:	f405 6520 	and.w	r5, r5, #2560	@ 0xa00
  tmpccmr2 |= TIM_ICSelection;
 800539a:	4320      	orrs	r0, r4
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800539c:	f020 00f0 	bic.w	r0, r0, #240	@ 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80053a0:	4301      	orrs	r1, r0
  tmpccer = TIMx->CCER;
 80053a2:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCMR2 = tmpccmr2;
 80053a4:	61d1      	str	r1, [r2, #28]
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80053a6:	f420 6120 	bic.w	r1, r0, #2560	@ 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80053aa:	4329      	orrs	r1, r5
  TIMx->CCER = tmpccer;
 80053ac:	6211      	str	r1, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80053ae:	69d1      	ldr	r1, [r2, #28]
 80053b0:	f021 010c 	bic.w	r1, r1, #12
 80053b4:	61d1      	str	r1, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80053b6:	69d1      	ldr	r1, [r2, #28]
 80053b8:	4331      	orrs	r1, r6
 80053ba:	61d1      	str	r1, [r2, #28]
 80053bc:	e78c      	b.n	80052d8 <HAL_TIM_IC_ConfigChannel+0xb8>
  __HAL_LOCK(htim);
 80053be:	2002      	movs	r0, #2
}
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	40010000 	.word	0x40010000

080053c8 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 80053c8:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	f000 8132 	beq.w	8005636 <HAL_TIM_PWM_ConfigChannel+0x26e>
 80053d2:	2301      	movs	r3, #1
 80053d4:	4684      	mov	ip, r0
{
 80053d6:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 80053d8:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 80053dc:	2a14      	cmp	r2, #20
 80053de:	d816      	bhi.n	800540e <HAL_TIM_PWM_ConfigChannel+0x46>
 80053e0:	e8df f012 	tbh	[pc, r2, lsl #1]
 80053e4:	0015004e 	.word	0x0015004e
 80053e8:	00150015 	.word	0x00150015
 80053ec:	00150079 	.word	0x00150079
 80053f0:	00150015 	.word	0x00150015
 80053f4:	001500d5 	.word	0x001500d5
 80053f8:	00150015 	.word	0x00150015
 80053fc:	001500a7 	.word	0x001500a7
 8005400:	00150015 	.word	0x00150015
 8005404:	001500ff 	.word	0x001500ff
 8005408:	00150015 	.word	0x00150015
 800540c:	001b      	.short	0x001b
  __HAL_UNLOCK(htim);
 800540e:	2300      	movs	r3, #0
  switch (Channel)
 8005410:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8005412:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
}
 8005416:	bc70      	pop	{r4, r5, r6}
 8005418:	4770      	bx	lr
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800541a:	6803      	ldr	r3, [r0, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800541c:	48a5      	ldr	r0, [pc, #660]	@ (80056b4 <HAL_TIM_PWM_ConfigChannel+0x2ec>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800541e:	6a1a      	ldr	r2, [r3, #32]
 8005420:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8005424:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005426:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005428:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 800542a:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800542c:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005430:	4028      	ands	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005432:	680d      	ldr	r5, [r1, #0]
 8005434:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005438:	688d      	ldr	r5, [r1, #8]
 800543a:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800543e:	4d9e      	ldr	r5, [pc, #632]	@ (80056b8 <HAL_TIM_PWM_ConfigChannel+0x2f0>)
 8005440:	42ab      	cmp	r3, r5
 8005442:	f000 80fa 	beq.w	800563a <HAL_TIM_PWM_ConfigChannel+0x272>
 8005446:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800544a:	42ab      	cmp	r3, r5
 800544c:	f000 80f5 	beq.w	800563a <HAL_TIM_PWM_ConfigChannel+0x272>
  TIMx->CR2 = tmpcr2;
 8005450:	605c      	str	r4, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8005452:	6558      	str	r0, [r3, #84]	@ 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8005454:	6848      	ldr	r0, [r1, #4]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005456:	6909      	ldr	r1, [r1, #16]
  TIMx->CCR6 = OC_Config->Pulse;
 8005458:	65d8      	str	r0, [r3, #92]	@ 0x5c
  TIMx->CCER = tmpccer;
 800545a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800545c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800545e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005462:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005464:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005466:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800546a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800546c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800546e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005472:	655a      	str	r2, [r3, #84]	@ 0x54
  __HAL_UNLOCK(htim);
 8005474:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005476:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8005478:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
}
 800547c:	bc70      	pop	{r4, r5, r6}
 800547e:	4770      	bx	lr
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005480:	6803      	ldr	r3, [r0, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005482:	488e      	ldr	r0, [pc, #568]	@ (80056bc <HAL_TIM_PWM_ConfigChannel+0x2f4>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005484:	6a1a      	ldr	r2, [r3, #32]
 8005486:	f022 0201 	bic.w	r2, r2, #1
 800548a:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800548c:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800548e:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8005490:	699d      	ldr	r5, [r3, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8005492:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005496:	4028      	ands	r0, r5
  tmpccmrx |= OC_Config->OCMode;
 8005498:	680d      	ldr	r5, [r1, #0]
 800549a:	4328      	orrs	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 800549c:	688d      	ldr	r5, [r1, #8]
 800549e:	432a      	orrs	r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054a0:	4d85      	ldr	r5, [pc, #532]	@ (80056b8 <HAL_TIM_PWM_ConfigChannel+0x2f0>)
 80054a2:	42ab      	cmp	r3, r5
 80054a4:	f000 80d5 	beq.w	8005652 <HAL_TIM_PWM_ConfigChannel+0x28a>
 80054a8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80054ac:	42ab      	cmp	r3, r5
 80054ae:	f000 80d0 	beq.w	8005652 <HAL_TIM_PWM_ConfigChannel+0x28a>
  TIMx->CR2 = tmpcr2;
 80054b2:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80054b4:	6198      	str	r0, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80054b6:	6848      	ldr	r0, [r1, #4]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054b8:	6909      	ldr	r1, [r1, #16]
  TIMx->CCR1 = OC_Config->Pulse;
 80054ba:	6358      	str	r0, [r3, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 80054bc:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054be:	699a      	ldr	r2, [r3, #24]
 80054c0:	f042 0208 	orr.w	r2, r2, #8
 80054c4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054c6:	699a      	ldr	r2, [r3, #24]
 80054c8:	f022 0204 	bic.w	r2, r2, #4
 80054cc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054ce:	699a      	ldr	r2, [r3, #24]
 80054d0:	430a      	orrs	r2, r1
 80054d2:	619a      	str	r2, [r3, #24]
      break;
 80054d4:	e7ce      	b.n	8005474 <HAL_TIM_PWM_ConfigChannel+0xac>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054d6:	6803      	ldr	r3, [r0, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054d8:	4879      	ldr	r0, [pc, #484]	@ (80056c0 <HAL_TIM_PWM_ConfigChannel+0x2f8>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054da:	6a1a      	ldr	r2, [r3, #32]
 80054dc:	f022 0210 	bic.w	r2, r2, #16
 80054e0:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80054e2:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80054e4:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80054e6:	699d      	ldr	r5, [r3, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 80054e8:	f022 0220 	bic.w	r2, r2, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054ec:	4028      	ands	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054ee:	680d      	ldr	r5, [r1, #0]
 80054f0:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054f4:	688d      	ldr	r5, [r1, #8]
 80054f6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054fa:	4d6f      	ldr	r5, [pc, #444]	@ (80056b8 <HAL_TIM_PWM_ConfigChannel+0x2f0>)
 80054fc:	42ab      	cmp	r3, r5
 80054fe:	f000 80bb 	beq.w	8005678 <HAL_TIM_PWM_ConfigChannel+0x2b0>
 8005502:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005506:	42ab      	cmp	r3, r5
 8005508:	f000 80b6 	beq.w	8005678 <HAL_TIM_PWM_ConfigChannel+0x2b0>
  TIMx->CR2 = tmpcr2;
 800550c:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 800550e:	6198      	str	r0, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005510:	6848      	ldr	r0, [r1, #4]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005512:	6909      	ldr	r1, [r1, #16]
  TIMx->CCR2 = OC_Config->Pulse;
 8005514:	6398      	str	r0, [r3, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8005516:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005518:	699a      	ldr	r2, [r3, #24]
 800551a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800551e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005520:	699a      	ldr	r2, [r3, #24]
 8005522:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005526:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005528:	699a      	ldr	r2, [r3, #24]
 800552a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800552e:	619a      	str	r2, [r3, #24]
      break;
 8005530:	e7a0      	b.n	8005474 <HAL_TIM_PWM_ConfigChannel+0xac>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005532:	6803      	ldr	r3, [r0, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005534:	4862      	ldr	r0, [pc, #392]	@ (80056c0 <HAL_TIM_PWM_ConfigChannel+0x2f8>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005536:	6a1a      	ldr	r2, [r3, #32]
 8005538:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800553c:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800553e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005540:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8005542:	69dd      	ldr	r5, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8005544:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005548:	4028      	ands	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800554a:	680d      	ldr	r5, [r1, #0]
 800554c:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005550:	688d      	ldr	r5, [r1, #8]
 8005552:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005556:	4d58      	ldr	r5, [pc, #352]	@ (80056b8 <HAL_TIM_PWM_ConfigChannel+0x2f0>)
 8005558:	42ab      	cmp	r3, r5
 800555a:	f000 8087 	beq.w	800566c <HAL_TIM_PWM_ConfigChannel+0x2a4>
 800555e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005562:	42ab      	cmp	r3, r5
 8005564:	f000 8082 	beq.w	800566c <HAL_TIM_PWM_ConfigChannel+0x2a4>
  TIMx->CR2 = tmpcr2;
 8005568:	605c      	str	r4, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800556a:	61d8      	str	r0, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800556c:	6848      	ldr	r0, [r1, #4]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800556e:	6909      	ldr	r1, [r1, #16]
  TIMx->CCR4 = OC_Config->Pulse;
 8005570:	6418      	str	r0, [r3, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 8005572:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005574:	69da      	ldr	r2, [r3, #28]
 8005576:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800557a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800557c:	69da      	ldr	r2, [r3, #28]
 800557e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005582:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005584:	69da      	ldr	r2, [r3, #28]
 8005586:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800558a:	61da      	str	r2, [r3, #28]
      break;
 800558c:	e772      	b.n	8005474 <HAL_TIM_PWM_ConfigChannel+0xac>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800558e:	6803      	ldr	r3, [r0, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005590:	484a      	ldr	r0, [pc, #296]	@ (80056bc <HAL_TIM_PWM_ConfigChannel+0x2f4>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005592:	6a1a      	ldr	r2, [r3, #32]
 8005594:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005598:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800559a:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800559c:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800559e:	69dd      	ldr	r5, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 80055a0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055a4:	4028      	ands	r0, r5
  tmpccmrx |= OC_Config->OCMode;
 80055a6:	680d      	ldr	r5, [r1, #0]
 80055a8:	4328      	orrs	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055aa:	688d      	ldr	r5, [r1, #8]
 80055ac:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055b0:	4d41      	ldr	r5, [pc, #260]	@ (80056b8 <HAL_TIM_PWM_ConfigChannel+0x2f0>)
 80055b2:	42ab      	cmp	r3, r5
 80055b4:	d06f      	beq.n	8005696 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 80055b6:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80055ba:	42ab      	cmp	r3, r5
 80055bc:	d06b      	beq.n	8005696 <HAL_TIM_PWM_ConfigChannel+0x2ce>
  TIMx->CR2 = tmpcr2;
 80055be:	605c      	str	r4, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80055c0:	61d8      	str	r0, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80055c2:	6848      	ldr	r0, [r1, #4]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055c4:	6909      	ldr	r1, [r1, #16]
  TIMx->CCR3 = OC_Config->Pulse;
 80055c6:	63d8      	str	r0, [r3, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 80055c8:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055ca:	69da      	ldr	r2, [r3, #28]
 80055cc:	f042 0208 	orr.w	r2, r2, #8
 80055d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055d2:	69da      	ldr	r2, [r3, #28]
 80055d4:	f022 0204 	bic.w	r2, r2, #4
 80055d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055da:	69da      	ldr	r2, [r3, #28]
 80055dc:	430a      	orrs	r2, r1
 80055de:	61da      	str	r2, [r3, #28]
      break;
 80055e0:	e748      	b.n	8005474 <HAL_TIM_PWM_ConfigChannel+0xac>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80055e2:	6803      	ldr	r3, [r0, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80055e4:	4837      	ldr	r0, [pc, #220]	@ (80056c4 <HAL_TIM_PWM_ConfigChannel+0x2fc>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80055e6:	6a1a      	ldr	r2, [r3, #32]
 80055e8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80055ec:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80055ee:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80055f0:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80055f2:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
  tmpccer &= ~TIM_CCER_CC5P;
 80055f4:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80055f8:	4028      	ands	r0, r5
  tmpccmrx |= OC_Config->OCMode;
 80055fa:	680d      	ldr	r5, [r1, #0]
 80055fc:	4328      	orrs	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80055fe:	688d      	ldr	r5, [r1, #8]
 8005600:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005604:	4d2c      	ldr	r5, [pc, #176]	@ (80056b8 <HAL_TIM_PWM_ConfigChannel+0x2f0>)
 8005606:	42ab      	cmp	r3, r5
 8005608:	d01d      	beq.n	8005646 <HAL_TIM_PWM_ConfigChannel+0x27e>
 800560a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800560e:	42ab      	cmp	r3, r5
 8005610:	d019      	beq.n	8005646 <HAL_TIM_PWM_ConfigChannel+0x27e>
  TIMx->CR2 = tmpcr2;
 8005612:	605c      	str	r4, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8005614:	6558      	str	r0, [r3, #84]	@ 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8005616:	6848      	ldr	r0, [r1, #4]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005618:	6909      	ldr	r1, [r1, #16]
  TIMx->CCR5 = OC_Config->Pulse;
 800561a:	6598      	str	r0, [r3, #88]	@ 0x58
  TIMx->CCER = tmpccer;
 800561c:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800561e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005620:	f042 0208 	orr.w	r2, r2, #8
 8005624:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005626:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005628:	f022 0204 	bic.w	r2, r2, #4
 800562c:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800562e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005630:	430a      	orrs	r2, r1
 8005632:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005634:	e71e      	b.n	8005474 <HAL_TIM_PWM_ConfigChannel+0xac>
  __HAL_LOCK(htim);
 8005636:	2002      	movs	r0, #2
}
 8005638:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS6;
 800563a:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800563e:	694d      	ldr	r5, [r1, #20]
 8005640:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 8005644:	e704      	b.n	8005450 <HAL_TIM_PWM_ConfigChannel+0x88>
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005646:	f424 3480 	bic.w	r4, r4, #65536	@ 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800564a:	694d      	ldr	r5, [r1, #20]
 800564c:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8005650:	e7df      	b.n	8005612 <HAL_TIM_PWM_ConfigChannel+0x24a>
    tmpccer |= OC_Config->OCNPolarity;
 8005652:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8005654:	f022 0208 	bic.w	r2, r2, #8
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005658:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpccer |= OC_Config->OCNPolarity;
 800565c:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 800565e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpccer &= ~TIM_CCER_CC1NE;
 8005662:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8005666:	4335      	orrs	r5, r6
 8005668:	432c      	orrs	r4, r5
 800566a:	e722      	b.n	80054b2 <HAL_TIM_PWM_ConfigChannel+0xea>
    tmpcr2 &= ~TIM_CR2_OIS4;
 800566c:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005670:	694d      	ldr	r5, [r1, #20]
 8005672:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8005676:	e777      	b.n	8005568 <HAL_TIM_PWM_ConfigChannel+0x1a0>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005678:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800567a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800567e:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005682:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005686:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpccer &= ~TIM_CCER_CC2NE;
 800568a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800568e:	4335      	orrs	r5, r6
 8005690:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8005694:	e73a      	b.n	800550c <HAL_TIM_PWM_ConfigChannel+0x144>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005696:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005698:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800569c:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056a0:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056a4:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpccer &= ~TIM_CCER_CC3NE;
 80056a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056ac:	4335      	orrs	r5, r6
 80056ae:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 80056b2:	e784      	b.n	80055be <HAL_TIM_PWM_ConfigChannel+0x1f6>
 80056b4:	feff8fff 	.word	0xfeff8fff
 80056b8:	40010000 	.word	0x40010000
 80056bc:	fffeff8c 	.word	0xfffeff8c
 80056c0:	feff8cff 	.word	0xfeff8cff
 80056c4:	fffeff8f 	.word	0xfffeff8f

080056c8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80056c8:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d06f      	beq.n	80057b0 <HAL_TIM_ConfigClockSource+0xe8>
 80056d0:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 80056d2:	2302      	movs	r3, #2
{
 80056d4:	b430      	push	{r4, r5}
  tmpsmcr = htim->Instance->SMCR;
 80056d6:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(htim);
 80056d8:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80056da:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_LOCK(htim);
 80056de:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056e2:	4b4d      	ldr	r3, [pc, #308]	@ (8005818 <HAL_TIM_ConfigClockSource+0x150>)
  tmpsmcr = htim->Instance->SMCR;
 80056e4:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056e6:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 80056e8:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 80056ea:	680b      	ldr	r3, [r1, #0]
 80056ec:	2b60      	cmp	r3, #96	@ 0x60
 80056ee:	d061      	beq.n	80057b4 <HAL_TIM_ConfigClockSource+0xec>
 80056f0:	d824      	bhi.n	800573c <HAL_TIM_ConfigClockSource+0x74>
 80056f2:	2b40      	cmp	r3, #64	@ 0x40
 80056f4:	d077      	beq.n	80057e6 <HAL_TIM_ConfigClockSource+0x11e>
 80056f6:	d94a      	bls.n	800578e <HAL_TIM_ConfigClockSource+0xc6>
 80056f8:	2b50      	cmp	r3, #80	@ 0x50
 80056fa:	d117      	bne.n	800572c <HAL_TIM_ConfigClockSource+0x64>
                               sClockSourceConfig->ClockPolarity,
 80056fc:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80056fe:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 8005700:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005702:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8005706:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005708:	6a23      	ldr	r3, [r4, #32]
 800570a:	f023 0301 	bic.w	r3, r3, #1
 800570e:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005710:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005712:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005716:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800571a:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 800571c:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800571e:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005720:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005724:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005728:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800572a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800572c:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800572e:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8005730:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8005734:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 8005738:	bc30      	pop	{r4, r5}
 800573a:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800573c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005740:	d0f3      	beq.n	800572a <HAL_TIM_ConfigClockSource+0x62>
 8005742:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005746:	d110      	bne.n	800576a <HAL_TIM_ConfigClockSource+0xa2>
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005748:	68a0      	ldr	r0, [r4, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800574a:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 800574e:	432b      	orrs	r3, r5
 8005750:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005752:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  HAL_StatusTypeDef status = HAL_OK;
 8005756:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005758:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800575c:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800575e:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005760:	68a3      	ldr	r3, [r4, #8]
 8005762:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005766:	60a3      	str	r3, [r4, #8]
      break;
 8005768:	e7e0      	b.n	800572c <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 800576a:	2b70      	cmp	r3, #112	@ 0x70
 800576c:	d1de      	bne.n	800572c <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 800576e:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005770:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8005774:	432b      	orrs	r3, r5
 8005776:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005778:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800577c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8005780:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8005782:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8005784:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005786:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 800578a:	60a3      	str	r3, [r4, #8]
      break;
 800578c:	e7cd      	b.n	800572a <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 800578e:	2b20      	cmp	r3, #32
 8005790:	d002      	beq.n	8005798 <HAL_TIM_ConfigClockSource+0xd0>
 8005792:	d909      	bls.n	80057a8 <HAL_TIM_ConfigClockSource+0xe0>
 8005794:	2b30      	cmp	r3, #48	@ 0x30
 8005796:	d1c9      	bne.n	800572c <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 8005798:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800579a:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800579e:	430b      	orrs	r3, r1
 80057a0:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 80057a4:	60a3      	str	r3, [r4, #8]
}
 80057a6:	e7c0      	b.n	800572a <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 80057a8:	f033 0110 	bics.w	r1, r3, #16
 80057ac:	d1be      	bne.n	800572c <HAL_TIM_ConfigClockSource+0x64>
 80057ae:	e7f3      	b.n	8005798 <HAL_TIM_ConfigClockSource+0xd0>
  __HAL_LOCK(htim);
 80057b0:	2002      	movs	r0, #2
}
 80057b2:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057b4:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 80057b6:	6848      	ldr	r0, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057b8:	f023 0310 	bic.w	r3, r3, #16
                               sClockSourceConfig->ClockFilter);
 80057bc:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057be:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057c0:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 80057c2:	6a23      	ldr	r3, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057c4:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057c8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057cc:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 80057d0:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80057d4:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 80057d6:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80057d8:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80057da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057de:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 80057e2:	60a3      	str	r3, [r4, #8]
}
 80057e4:	e7a1      	b.n	800572a <HAL_TIM_ConfigClockSource+0x62>
                               sClockSourceConfig->ClockPolarity,
 80057e6:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80057e8:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 80057ea:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057ec:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80057f0:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057f2:	6a23      	ldr	r3, [r4, #32]
 80057f4:	f023 0301 	bic.w	r3, r3, #1
 80057f8:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057fa:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005800:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005804:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8005806:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8005808:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800580a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800580e:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8005812:	60a3      	str	r3, [r4, #8]
}
 8005814:	e789      	b.n	800572a <HAL_TIM_ConfigClockSource+0x62>
 8005816:	bf00      	nop
 8005818:	fffe0088 	.word	0xfffe0088

0800581c <HAL_TIM_PeriodElapsedCallback>:
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop

08005820 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop

08005824 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop

08005828 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop

0800582c <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop

08005830 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005830:	6803      	ldr	r3, [r0, #0]
 8005832:	691a      	ldr	r2, [r3, #16]
 8005834:	0791      	lsls	r1, r2, #30
{
 8005836:	b510      	push	{r4, lr}
 8005838:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800583a:	d502      	bpl.n	8005842 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800583c:	68da      	ldr	r2, [r3, #12]
 800583e:	0792      	lsls	r2, r2, #30
 8005840:	d468      	bmi.n	8005914 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005842:	691a      	ldr	r2, [r3, #16]
 8005844:	0752      	lsls	r2, r2, #29
 8005846:	d502      	bpl.n	800584e <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005848:	68da      	ldr	r2, [r3, #12]
 800584a:	0750      	lsls	r0, r2, #29
 800584c:	d44f      	bmi.n	80058ee <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800584e:	691a      	ldr	r2, [r3, #16]
 8005850:	0711      	lsls	r1, r2, #28
 8005852:	d502      	bpl.n	800585a <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005854:	68da      	ldr	r2, [r3, #12]
 8005856:	0712      	lsls	r2, r2, #28
 8005858:	d437      	bmi.n	80058ca <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800585a:	691a      	ldr	r2, [r3, #16]
 800585c:	06d0      	lsls	r0, r2, #27
 800585e:	d502      	bpl.n	8005866 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005860:	68da      	ldr	r2, [r3, #12]
 8005862:	06d1      	lsls	r1, r2, #27
 8005864:	d41e      	bmi.n	80058a4 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005866:	691a      	ldr	r2, [r3, #16]
 8005868:	07d2      	lsls	r2, r2, #31
 800586a:	d502      	bpl.n	8005872 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800586c:	68da      	ldr	r2, [r3, #12]
 800586e:	07d0      	lsls	r0, r2, #31
 8005870:	d469      	bmi.n	8005946 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005872:	691a      	ldr	r2, [r3, #16]
 8005874:	0611      	lsls	r1, r2, #24
 8005876:	d502      	bpl.n	800587e <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005878:	68da      	ldr	r2, [r3, #12]
 800587a:	0612      	lsls	r2, r2, #24
 800587c:	d46b      	bmi.n	8005956 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800587e:	691a      	ldr	r2, [r3, #16]
 8005880:	05d0      	lsls	r0, r2, #23
 8005882:	d502      	bpl.n	800588a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005884:	68da      	ldr	r2, [r3, #12]
 8005886:	0611      	lsls	r1, r2, #24
 8005888:	d46d      	bmi.n	8005966 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800588a:	691a      	ldr	r2, [r3, #16]
 800588c:	0652      	lsls	r2, r2, #25
 800588e:	d502      	bpl.n	8005896 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005890:	68da      	ldr	r2, [r3, #12]
 8005892:	0650      	lsls	r0, r2, #25
 8005894:	d46f      	bmi.n	8005976 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005896:	691a      	ldr	r2, [r3, #16]
 8005898:	0691      	lsls	r1, r2, #26
 800589a:	d502      	bpl.n	80058a2 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800589c:	68da      	ldr	r2, [r3, #12]
 800589e:	0692      	lsls	r2, r2, #26
 80058a0:	d449      	bmi.n	8005936 <HAL_TIM_IRQHandler+0x106>
}
 80058a2:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058a4:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058a8:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 80058aa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058ac:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058ae:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80058b6:	d16f      	bne.n	8005998 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058b8:	f7ff ffb2 	bl	8005820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058bc:	4620      	mov	r0, r4
 80058be:	f7ff ffb3 	bl	8005828 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058c2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058c4:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058c6:	7722      	strb	r2, [r4, #28]
 80058c8:	e7cd      	b.n	8005866 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058ca:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058ce:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 80058d0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058d2:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058d4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058d6:	69db      	ldr	r3, [r3, #28]
 80058d8:	079b      	lsls	r3, r3, #30
 80058da:	d15a      	bne.n	8005992 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058dc:	f7ff ffa0 	bl	8005820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058e0:	4620      	mov	r0, r4
 80058e2:	f7ff ffa1 	bl	8005828 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058e6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058e8:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ea:	7722      	strb	r2, [r4, #28]
 80058ec:	e7b5      	b.n	800585a <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058ee:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058f2:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80058f4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058f6:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058f8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8005900:	d144      	bne.n	800598c <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005902:	f7ff ff8d 	bl	8005820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005906:	4620      	mov	r0, r4
 8005908:	f7ff ff8e 	bl	8005828 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800590c:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800590e:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005910:	7722      	strb	r2, [r4, #28]
 8005912:	e79c      	b.n	800584e <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005914:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005918:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800591a:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800591c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	0799      	lsls	r1, r3, #30
 8005922:	d130      	bne.n	8005986 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005924:	f7ff ff7c 	bl	8005820 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005928:	4620      	mov	r0, r4
 800592a:	f7ff ff7d 	bl	8005828 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800592e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005930:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005932:	7722      	strb	r2, [r4, #28]
 8005934:	e785      	b.n	8005842 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005936:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800593a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800593c:	611a      	str	r2, [r3, #16]
}
 800593e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8005942:	f000 b8cd 	b.w	8005ae0 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005946:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800594a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800594c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800594e:	f7ff ff65 	bl	800581c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005952:	6823      	ldr	r3, [r4, #0]
 8005954:	e78d      	b.n	8005872 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005956:	f06f 0280 	mvn.w	r2, #128	@ 0x80
      HAL_TIMEx_BreakCallback(htim);
 800595a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800595c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800595e:	f000 f8c1 	bl	8005ae4 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005962:	6823      	ldr	r3, [r4, #0]
 8005964:	e78b      	b.n	800587e <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005966:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 800596a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800596c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800596e:	f000 f8bb 	bl	8005ae8 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005972:	6823      	ldr	r3, [r4, #0]
 8005974:	e789      	b.n	800588a <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005976:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 800597a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800597c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800597e:	f7ff ff55 	bl	800582c <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005982:	6823      	ldr	r3, [r4, #0]
 8005984:	e787      	b.n	8005896 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8005986:	f7ff ff4d 	bl	8005824 <HAL_TIM_IC_CaptureCallback>
 800598a:	e7d0      	b.n	800592e <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800598c:	f7ff ff4a 	bl	8005824 <HAL_TIM_IC_CaptureCallback>
 8005990:	e7bc      	b.n	800590c <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8005992:	f7ff ff47 	bl	8005824 <HAL_TIM_IC_CaptureCallback>
 8005996:	e7a6      	b.n	80058e6 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8005998:	f7ff ff44 	bl	8005824 <HAL_TIM_IC_CaptureCallback>
 800599c:	e791      	b.n	80058c2 <HAL_TIM_IRQHandler+0x92>
 800599e:	bf00      	nop

080059a0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059a0:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d04b      	beq.n	8005a40 <HAL_TIMEx_MasterConfigSynchronization+0xa0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059a8:	6803      	ldr	r3, [r0, #0]
 80059aa:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 80059ac:	2002      	movs	r0, #2
{
 80059ae:	b430      	push	{r4, r5}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80059b0:	4d24      	ldr	r5, [pc, #144]	@ (8005a44 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  htim->State = HAL_TIM_STATE_BUSY;
 80059b2:	f882 003d 	strb.w	r0, [r2, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80059b6:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 80059b8:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80059ba:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80059bc:	d029      	beq.n	8005a12 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80059be:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80059c2:	42ab      	cmp	r3, r5
 80059c4:	d025      	beq.n	8005a12 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059c6:	4d20      	ldr	r5, [pc, #128]	@ (8005a48 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 &= ~TIM_CR2_MMS;
 80059c8:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059cc:	42ab      	cmp	r3, r5
 80059ce:	bf18      	it	ne
 80059d0:	f1b3 4f80 	cmpne.w	r3, #1073741824	@ 0x40000000
 80059d4:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80059d8:	bf0c      	ite	eq
 80059da:	f04f 0c01 	moveq.w	ip, #1
 80059de:	f04f 0c00 	movne.w	ip, #0
 80059e2:	42ab      	cmp	r3, r5
 80059e4:	bf08      	it	eq
 80059e6:	f04c 0c01 	orreq.w	ip, ip, #1
 80059ea:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80059ee:	42ab      	cmp	r3, r5
 80059f0:	bf08      	it	eq
 80059f2:	f04c 0c01 	orreq.w	ip, ip, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059f6:	680d      	ldr	r5, [r1, #0]
 80059f8:	4328      	orrs	r0, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059fa:	4d14      	ldr	r5, [pc, #80]	@ (8005a4c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->Instance->CR2 = tmpcr2;
 80059fc:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059fe:	42ab      	cmp	r3, r5
 8005a00:	bf14      	ite	ne
 8005a02:	4660      	movne	r0, ip
 8005a04:	f04c 0001 	orreq.w	r0, ip, #1
 8005a08:	b960      	cbnz	r0, 8005a24 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8005a0a:	4811      	ldr	r0, [pc, #68]	@ (8005a50 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005a0c:	4283      	cmp	r3, r0
 8005a0e:	d009      	beq.n	8005a24 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8005a10:	e00d      	b.n	8005a2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a12:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a14:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a18:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a1a:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a1c:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a20:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 8005a22:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a24:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a26:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a2a:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a2c:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8005a2e:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8005a30:	2101      	movs	r1, #1

  return HAL_OK;
 8005a32:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 8005a34:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8005a38:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 8005a3c:	bc30      	pop	{r4, r5}
 8005a3e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005a40:	2002      	movs	r0, #2
}
 8005a42:	4770      	bx	lr
 8005a44:	40010000 	.word	0x40010000
 8005a48:	40000400 	.word	0x40000400
 8005a4c:	40014000 	.word	0x40014000
 8005a50:	40001800 	.word	0x40001800

08005a54 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a54:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d03d      	beq.n	8005ad8 <HAL_TIMEx_ConfigBreakDeadTime+0x84>
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	6848      	ldr	r0, [r1, #4]
{
 8005a60:	b410      	push	{r4}
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a62:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8005a66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a6a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a6c:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a6e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a72:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a74:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a76:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a7a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a7c:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a82:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a84:	6a88      	ldr	r0, [r1, #40]	@ 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a86:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a8a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005a8c:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a92:	4303      	orrs	r3, r0

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005a94:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005a96:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8005a9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005a9e:	4c0f      	ldr	r4, [pc, #60]	@ (8005adc <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 8005aa0:	42a0      	cmp	r0, r4
 8005aa2:	d00b      	beq.n	8005abc <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 8005aa4:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8005aa8:	42a0      	cmp	r0, r4
 8005aaa:	d007      	beq.n	8005abc <HAL_TIMEx_ConfigBreakDeadTime+0x68>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8005aac:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8005aae:	6443      	str	r3, [r0, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8005ab0:	f882 103c 	strb.w	r1, [r2, #60]	@ 0x3c

  return HAL_OK;
 8005ab4:	4608      	mov	r0, r1
}
 8005ab6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005aba:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005abc:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 8005abe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005ac2:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005ac6:	e9d1 4107 	ldrd	r4, r1, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005aca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ace:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005ad0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005ad4:	430b      	orrs	r3, r1
 8005ad6:	e7e9      	b.n	8005aac <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 8005ad8:	2002      	movs	r0, #2
}
 8005ada:	4770      	bx	lr
 8005adc:	40010000 	.word	0x40010000

08005ae0 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop

08005ae4 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop

08005ae8 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop

08005aec <memset>:
 8005aec:	4402      	add	r2, r0
 8005aee:	4603      	mov	r3, r0
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d100      	bne.n	8005af6 <memset+0xa>
 8005af4:	4770      	bx	lr
 8005af6:	f803 1b01 	strb.w	r1, [r3], #1
 8005afa:	e7f9      	b.n	8005af0 <memset+0x4>

08005afc <__errno>:
 8005afc:	4b01      	ldr	r3, [pc, #4]	@ (8005b04 <__errno+0x8>)
 8005afe:	6818      	ldr	r0, [r3, #0]
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	20000174 	.word	0x20000174

08005b08 <__libc_init_array>:
 8005b08:	b570      	push	{r4, r5, r6, lr}
 8005b0a:	4d0d      	ldr	r5, [pc, #52]	@ (8005b40 <__libc_init_array+0x38>)
 8005b0c:	4c0d      	ldr	r4, [pc, #52]	@ (8005b44 <__libc_init_array+0x3c>)
 8005b0e:	1b64      	subs	r4, r4, r5
 8005b10:	10a4      	asrs	r4, r4, #2
 8005b12:	2600      	movs	r6, #0
 8005b14:	42a6      	cmp	r6, r4
 8005b16:	d109      	bne.n	8005b2c <__libc_init_array+0x24>
 8005b18:	4d0b      	ldr	r5, [pc, #44]	@ (8005b48 <__libc_init_array+0x40>)
 8005b1a:	4c0c      	ldr	r4, [pc, #48]	@ (8005b4c <__libc_init_array+0x44>)
 8005b1c:	f000 fae8 	bl	80060f0 <_init>
 8005b20:	1b64      	subs	r4, r4, r5
 8005b22:	10a4      	asrs	r4, r4, #2
 8005b24:	2600      	movs	r6, #0
 8005b26:	42a6      	cmp	r6, r4
 8005b28:	d105      	bne.n	8005b36 <__libc_init_array+0x2e>
 8005b2a:	bd70      	pop	{r4, r5, r6, pc}
 8005b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b30:	4798      	blx	r3
 8005b32:	3601      	adds	r6, #1
 8005b34:	e7ee      	b.n	8005b14 <__libc_init_array+0xc>
 8005b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b3a:	4798      	blx	r3
 8005b3c:	3601      	adds	r6, #1
 8005b3e:	e7f2      	b.n	8005b26 <__libc_init_array+0x1e>
 8005b40:	0800e7e8 	.word	0x0800e7e8
 8005b44:	0800e7e8 	.word	0x0800e7e8
 8005b48:	0800e7e8 	.word	0x0800e7e8
 8005b4c:	0800e7ec 	.word	0x0800e7ec

08005b50 <asinf>:
 8005b50:	b508      	push	{r3, lr}
 8005b52:	ed2d 8b02 	vpush	{d8}
 8005b56:	eeb0 8a40 	vmov.f32	s16, s0
 8005b5a:	f000 f9df 	bl	8005f1c <__ieee754_asinf>
 8005b5e:	eeb4 8a48 	vcmp.f32	s16, s16
 8005b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b66:	eef0 8a40 	vmov.f32	s17, s0
 8005b6a:	d615      	bvs.n	8005b98 <asinf+0x48>
 8005b6c:	eeb0 0a48 	vmov.f32	s0, s16
 8005b70:	f000 f81a 	bl	8005ba8 <fabsf>
 8005b74:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005b78:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8005b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b80:	dd0a      	ble.n	8005b98 <asinf+0x48>
 8005b82:	f7ff ffbb 	bl	8005afc <__errno>
 8005b86:	ecbd 8b02 	vpop	{d8}
 8005b8a:	2321      	movs	r3, #33	@ 0x21
 8005b8c:	6003      	str	r3, [r0, #0]
 8005b8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005b92:	4804      	ldr	r0, [pc, #16]	@ (8005ba4 <asinf+0x54>)
 8005b94:	f000 b810 	b.w	8005bb8 <nanf>
 8005b98:	eeb0 0a68 	vmov.f32	s0, s17
 8005b9c:	ecbd 8b02 	vpop	{d8}
 8005ba0:	bd08      	pop	{r3, pc}
 8005ba2:	bf00      	nop
 8005ba4:	0800e69c 	.word	0x0800e69c

08005ba8 <fabsf>:
 8005ba8:	ee10 3a10 	vmov	r3, s0
 8005bac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005bb0:	ee00 3a10 	vmov	s0, r3
 8005bb4:	4770      	bx	lr
	...

08005bb8 <nanf>:
 8005bb8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005bc0 <nanf+0x8>
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	7fc00000 	.word	0x7fc00000

08005bc4 <sinf_poly>:
 8005bc4:	07cb      	lsls	r3, r1, #31
 8005bc6:	d412      	bmi.n	8005bee <sinf_poly+0x2a>
 8005bc8:	ee21 5b00 	vmul.f64	d5, d1, d0
 8005bcc:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8005bd0:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8005bd4:	eea6 7b01 	vfma.f64	d7, d6, d1
 8005bd8:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8005bdc:	ee21 1b05 	vmul.f64	d1, d1, d5
 8005be0:	eea6 0b05 	vfma.f64	d0, d6, d5
 8005be4:	eea7 0b01 	vfma.f64	d0, d7, d1
 8005be8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8005bec:	4770      	bx	lr
 8005bee:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8005bf2:	ee21 5b01 	vmul.f64	d5, d1, d1
 8005bf6:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8005bfa:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8005bfe:	eea1 7b06 	vfma.f64	d7, d1, d6
 8005c02:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8005c06:	eea1 0b06 	vfma.f64	d0, d1, d6
 8005c0a:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8005c0e:	ee21 1b05 	vmul.f64	d1, d1, d5
 8005c12:	eea5 0b06 	vfma.f64	d0, d5, d6
 8005c16:	e7e5      	b.n	8005be4 <sinf_poly+0x20>

08005c18 <sinf>:
 8005c18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c1a:	ee10 4a10 	vmov	r4, s0
 8005c1e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8005c22:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8005c26:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8005c2a:	eef0 7a40 	vmov.f32	s15, s0
 8005c2e:	ea4f 5214 	mov.w	r2, r4, lsr #20
 8005c32:	d218      	bcs.n	8005c66 <sinf+0x4e>
 8005c34:	ee26 1b06 	vmul.f64	d1, d6, d6
 8005c38:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8005c3c:	d20a      	bcs.n	8005c54 <sinf+0x3c>
 8005c3e:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 8005c42:	d103      	bne.n	8005c4c <sinf+0x34>
 8005c44:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8005c48:	ed8d 1a01 	vstr	s2, [sp, #4]
 8005c4c:	eeb0 0a67 	vmov.f32	s0, s15
 8005c50:	b003      	add	sp, #12
 8005c52:	bd30      	pop	{r4, r5, pc}
 8005c54:	483a      	ldr	r0, [pc, #232]	@ (8005d40 <sinf+0x128>)
 8005c56:	eeb0 0b46 	vmov.f64	d0, d6
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	b003      	add	sp, #12
 8005c5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c62:	f7ff bfaf 	b.w	8005bc4 <sinf_poly>
 8005c66:	f240 422e 	movw	r2, #1070	@ 0x42e
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d824      	bhi.n	8005cb8 <sinf+0xa0>
 8005c6e:	4b34      	ldr	r3, [pc, #208]	@ (8005d40 <sinf+0x128>)
 8005c70:	ed93 7b08 	vldr	d7, [r3, #32]
 8005c74:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005c78:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8005c7c:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8005c80:	ee17 1a90 	vmov	r1, s15
 8005c84:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8005c88:	1609      	asrs	r1, r1, #24
 8005c8a:	ee07 1a90 	vmov	s15, r1
 8005c8e:	f001 0203 	and.w	r2, r1, #3
 8005c92:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8005c96:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8005c9a:	ed92 0b00 	vldr	d0, [r2]
 8005c9e:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8005ca2:	f011 0f02 	tst.w	r1, #2
 8005ca6:	eea5 6b47 	vfms.f64	d6, d5, d7
 8005caa:	bf08      	it	eq
 8005cac:	4618      	moveq	r0, r3
 8005cae:	ee26 1b06 	vmul.f64	d1, d6, d6
 8005cb2:	ee20 0b06 	vmul.f64	d0, d0, d6
 8005cb6:	e7d1      	b.n	8005c5c <sinf+0x44>
 8005cb8:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8005cbc:	d237      	bcs.n	8005d2e <sinf+0x116>
 8005cbe:	4921      	ldr	r1, [pc, #132]	@ (8005d44 <sinf+0x12c>)
 8005cc0:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8005cc4:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8005cc8:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8005ccc:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8005cd0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8005cd4:	6a10      	ldr	r0, [r2, #32]
 8005cd6:	6912      	ldr	r2, [r2, #16]
 8005cd8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005cdc:	40ab      	lsls	r3, r5
 8005cde:	fba0 5003 	umull	r5, r0, r0, r3
 8005ce2:	4359      	muls	r1, r3
 8005ce4:	fbe3 0102 	umlal	r0, r1, r3, r2
 8005ce8:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8005cec:	0f9d      	lsrs	r5, r3, #30
 8005cee:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005cf2:	1ac9      	subs	r1, r1, r3
 8005cf4:	f7fa fc2e 	bl	8000554 <__aeabi_l2d>
 8005cf8:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8005cfc:	4b10      	ldr	r3, [pc, #64]	@ (8005d40 <sinf+0x128>)
 8005cfe:	f004 0203 	and.w	r2, r4, #3
 8005d02:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8005d06:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8005d38 <sinf+0x120>
 8005d0a:	ed92 0b00 	vldr	d0, [r2]
 8005d0e:	ec41 0b17 	vmov	d7, r0, r1
 8005d12:	f014 0f02 	tst.w	r4, #2
 8005d16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005d1a:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8005d1e:	4629      	mov	r1, r5
 8005d20:	bf08      	it	eq
 8005d22:	4618      	moveq	r0, r3
 8005d24:	ee27 1b07 	vmul.f64	d1, d7, d7
 8005d28:	ee20 0b07 	vmul.f64	d0, d0, d7
 8005d2c:	e796      	b.n	8005c5c <sinf+0x44>
 8005d2e:	b003      	add	sp, #12
 8005d30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d34:	f000 b8e2 	b.w	8005efc <__math_invalidf>
 8005d38:	54442d18 	.word	0x54442d18
 8005d3c:	3c1921fb 	.word	0x3c1921fb
 8005d40:	0800e700 	.word	0x0800e700
 8005d44:	0800e6a0 	.word	0x0800e6a0

08005d48 <sinf_poly>:
 8005d48:	07cb      	lsls	r3, r1, #31
 8005d4a:	d412      	bmi.n	8005d72 <sinf_poly+0x2a>
 8005d4c:	ee21 5b00 	vmul.f64	d5, d1, d0
 8005d50:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8005d54:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8005d58:	eea6 7b01 	vfma.f64	d7, d6, d1
 8005d5c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8005d60:	ee21 1b05 	vmul.f64	d1, d1, d5
 8005d64:	eea6 0b05 	vfma.f64	d0, d6, d5
 8005d68:	eea7 0b01 	vfma.f64	d0, d7, d1
 8005d6c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8005d70:	4770      	bx	lr
 8005d72:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8005d76:	ee21 5b01 	vmul.f64	d5, d1, d1
 8005d7a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8005d7e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8005d82:	eea1 7b06 	vfma.f64	d7, d1, d6
 8005d86:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8005d8a:	eea1 0b06 	vfma.f64	d0, d1, d6
 8005d8e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8005d92:	ee21 1b05 	vmul.f64	d1, d1, d5
 8005d96:	eea5 0b06 	vfma.f64	d0, d5, d6
 8005d9a:	e7e5      	b.n	8005d68 <sinf_poly+0x20>
 8005d9c:	0000      	movs	r0, r0
	...

08005da0 <cosf>:
 8005da0:	b538      	push	{r3, r4, r5, lr}
 8005da2:	ee10 4a10 	vmov	r4, s0
 8005da6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8005daa:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8005dae:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8005db2:	d21f      	bcs.n	8005df4 <cosf+0x54>
 8005db4:	ee27 7b07 	vmul.f64	d7, d7, d7
 8005db8:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8005dbc:	f0c0 8082 	bcc.w	8005ec4 <cosf+0x124>
 8005dc0:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005dc4:	4b44      	ldr	r3, [pc, #272]	@ (8005ed8 <cosf+0x138>)
 8005dc6:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 8005dca:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8005dce:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 8005dd2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8005dd6:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8005dda:	eea7 0b05 	vfma.f64	d0, d7, d5
 8005dde:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 8005de2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005de6:	eea4 0b05 	vfma.f64	d0, d4, d5
 8005dea:	eea6 0b07 	vfma.f64	d0, d6, d7
 8005dee:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8005df2:	bd38      	pop	{r3, r4, r5, pc}
 8005df4:	f240 422e 	movw	r2, #1070	@ 0x42e
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d829      	bhi.n	8005e50 <cosf+0xb0>
 8005dfc:	4b36      	ldr	r3, [pc, #216]	@ (8005ed8 <cosf+0x138>)
 8005dfe:	ed93 6b08 	vldr	d6, [r3, #32]
 8005e02:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005e06:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 8005e0a:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8005e0e:	ee16 1a90 	vmov	r1, s13
 8005e12:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8005e16:	1609      	asrs	r1, r1, #24
 8005e18:	ee06 1a90 	vmov	s13, r1
 8005e1c:	f001 0203 	and.w	r2, r1, #3
 8005e20:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8005e24:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8005e28:	ed92 0b00 	vldr	d0, [r2]
 8005e2c:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8005e30:	f011 0f02 	tst.w	r1, #2
 8005e34:	f081 0101 	eor.w	r1, r1, #1
 8005e38:	eea5 7b46 	vfms.f64	d7, d5, d6
 8005e3c:	bf08      	it	eq
 8005e3e:	4618      	moveq	r0, r3
 8005e40:	ee27 1b07 	vmul.f64	d1, d7, d7
 8005e44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e48:	ee20 0b07 	vmul.f64	d0, d0, d7
 8005e4c:	f7ff bf7c 	b.w	8005d48 <sinf_poly>
 8005e50:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8005e54:	d232      	bcs.n	8005ebc <cosf+0x11c>
 8005e56:	4921      	ldr	r1, [pc, #132]	@ (8005edc <cosf+0x13c>)
 8005e58:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8005e5c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8005e60:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8005e64:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8005e68:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8005e6c:	6a10      	ldr	r0, [r2, #32]
 8005e6e:	6912      	ldr	r2, [r2, #16]
 8005e70:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005e74:	40ab      	lsls	r3, r5
 8005e76:	fba0 5003 	umull	r5, r0, r0, r3
 8005e7a:	4359      	muls	r1, r3
 8005e7c:	fbe3 0102 	umlal	r0, r1, r3, r2
 8005e80:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8005e84:	0f9d      	lsrs	r5, r3, #30
 8005e86:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005e8a:	1ac9      	subs	r1, r1, r3
 8005e8c:	f7fa fb62 	bl	8000554 <__aeabi_l2d>
 8005e90:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8005e94:	4b10      	ldr	r3, [pc, #64]	@ (8005ed8 <cosf+0x138>)
 8005e96:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8005ed0 <cosf+0x130>
 8005e9a:	ec41 0b17 	vmov	d7, r0, r1
 8005e9e:	f004 0203 	and.w	r2, r4, #3
 8005ea2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8005ea6:	ed92 0b00 	vldr	d0, [r2]
 8005eaa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005eae:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8005eb2:	f014 0f02 	tst.w	r4, #2
 8005eb6:	f085 0101 	eor.w	r1, r5, #1
 8005eba:	e7bf      	b.n	8005e3c <cosf+0x9c>
 8005ebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ec0:	f000 b81c 	b.w	8005efc <__math_invalidf>
 8005ec4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005ec8:	e793      	b.n	8005df2 <cosf+0x52>
 8005eca:	bf00      	nop
 8005ecc:	f3af 8000 	nop.w
 8005ed0:	54442d18 	.word	0x54442d18
 8005ed4:	3c1921fb 	.word	0x3c1921fb
 8005ed8:	0800e700 	.word	0x0800e700
 8005edc:	0800e6a0 	.word	0x0800e6a0

08005ee0 <with_errnof>:
 8005ee0:	b510      	push	{r4, lr}
 8005ee2:	ed2d 8b02 	vpush	{d8}
 8005ee6:	eeb0 8a40 	vmov.f32	s16, s0
 8005eea:	4604      	mov	r4, r0
 8005eec:	f7ff fe06 	bl	8005afc <__errno>
 8005ef0:	eeb0 0a48 	vmov.f32	s0, s16
 8005ef4:	ecbd 8b02 	vpop	{d8}
 8005ef8:	6004      	str	r4, [r0, #0]
 8005efa:	bd10      	pop	{r4, pc}

08005efc <__math_invalidf>:
 8005efc:	eef0 7a40 	vmov.f32	s15, s0
 8005f00:	ee30 7a40 	vsub.f32	s14, s0, s0
 8005f04:	eef4 7a67 	vcmp.f32	s15, s15
 8005f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f0c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8005f10:	d602      	bvs.n	8005f18 <__math_invalidf+0x1c>
 8005f12:	2021      	movs	r0, #33	@ 0x21
 8005f14:	f7ff bfe4 	b.w	8005ee0 <with_errnof>
 8005f18:	4770      	bx	lr
	...

08005f1c <__ieee754_asinf>:
 8005f1c:	b538      	push	{r3, r4, r5, lr}
 8005f1e:	ee10 5a10 	vmov	r5, s0
 8005f22:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8005f26:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 8005f2a:	ed2d 8b04 	vpush	{d8-d9}
 8005f2e:	d10c      	bne.n	8005f4a <__ieee754_asinf+0x2e>
 8005f30:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 80060a8 <__ieee754_asinf+0x18c>
 8005f34:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 80060ac <__ieee754_asinf+0x190>
 8005f38:	ee60 7a27 	vmul.f32	s15, s0, s15
 8005f3c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005f40:	eeb0 0a67 	vmov.f32	s0, s15
 8005f44:	ecbd 8b04 	vpop	{d8-d9}
 8005f48:	bd38      	pop	{r3, r4, r5, pc}
 8005f4a:	d904      	bls.n	8005f56 <__ieee754_asinf+0x3a>
 8005f4c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8005f50:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8005f54:	e7f6      	b.n	8005f44 <__ieee754_asinf+0x28>
 8005f56:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8005f5a:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8005f5e:	d20b      	bcs.n	8005f78 <__ieee754_asinf+0x5c>
 8005f60:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 8005f64:	d252      	bcs.n	800600c <__ieee754_asinf+0xf0>
 8005f66:	eddf 7a52 	vldr	s15, [pc, #328]	@ 80060b0 <__ieee754_asinf+0x194>
 8005f6a:	ee70 7a27 	vadd.f32	s15, s0, s15
 8005f6e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8005f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f76:	dce5      	bgt.n	8005f44 <__ieee754_asinf+0x28>
 8005f78:	f7ff fe16 	bl	8005ba8 <fabsf>
 8005f7c:	ee38 8ac0 	vsub.f32	s16, s17, s0
 8005f80:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005f84:	ee28 8a27 	vmul.f32	s16, s16, s15
 8005f88:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 80060b4 <__ieee754_asinf+0x198>
 8005f8c:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 80060b8 <__ieee754_asinf+0x19c>
 8005f90:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 80060bc <__ieee754_asinf+0x1a0>
 8005f94:	eea8 7a27 	vfma.f32	s14, s16, s15
 8005f98:	eddf 7a49 	vldr	s15, [pc, #292]	@ 80060c0 <__ieee754_asinf+0x1a4>
 8005f9c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8005fa0:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80060c4 <__ieee754_asinf+0x1a8>
 8005fa4:	eea7 7a88 	vfma.f32	s14, s15, s16
 8005fa8:	eddf 7a47 	vldr	s15, [pc, #284]	@ 80060c8 <__ieee754_asinf+0x1ac>
 8005fac:	eee7 7a08 	vfma.f32	s15, s14, s16
 8005fb0:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 80060cc <__ieee754_asinf+0x1b0>
 8005fb4:	eea7 9a88 	vfma.f32	s18, s15, s16
 8005fb8:	eddf 7a45 	vldr	s15, [pc, #276]	@ 80060d0 <__ieee754_asinf+0x1b4>
 8005fbc:	eee8 7a07 	vfma.f32	s15, s16, s14
 8005fc0:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 80060d4 <__ieee754_asinf+0x1b8>
 8005fc4:	eea7 7a88 	vfma.f32	s14, s15, s16
 8005fc8:	eddf 7a43 	vldr	s15, [pc, #268]	@ 80060d8 <__ieee754_asinf+0x1bc>
 8005fcc:	eee7 7a08 	vfma.f32	s15, s14, s16
 8005fd0:	eeb0 0a48 	vmov.f32	s0, s16
 8005fd4:	eee7 8a88 	vfma.f32	s17, s15, s16
 8005fd8:	f000 f886 	bl	80060e8 <__ieee754_sqrtf>
 8005fdc:	4b3f      	ldr	r3, [pc, #252]	@ (80060dc <__ieee754_asinf+0x1c0>)
 8005fde:	ee29 9a08 	vmul.f32	s18, s18, s16
 8005fe2:	429c      	cmp	r4, r3
 8005fe4:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8005fe8:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8005fec:	d93d      	bls.n	800606a <__ieee754_asinf+0x14e>
 8005fee:	eea0 0a06 	vfma.f32	s0, s0, s12
 8005ff2:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 80060e0 <__ieee754_asinf+0x1c4>
 8005ff6:	eee0 7a26 	vfma.f32	s15, s0, s13
 8005ffa:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 80060ac <__ieee754_asinf+0x190>
 8005ffe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006002:	2d00      	cmp	r5, #0
 8006004:	bfd8      	it	le
 8006006:	eeb1 0a40 	vnegle.f32	s0, s0
 800600a:	e79b      	b.n	8005f44 <__ieee754_asinf+0x28>
 800600c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8006010:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80060b8 <__ieee754_asinf+0x19c>
 8006014:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80060b4 <__ieee754_asinf+0x198>
 8006018:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 80060cc <__ieee754_asinf+0x1b0>
 800601c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8006020:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80060c0 <__ieee754_asinf+0x1a4>
 8006024:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006028:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80060c4 <__ieee754_asinf+0x1a8>
 800602c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006030:	eddf 6a25 	vldr	s13, [pc, #148]	@ 80060c8 <__ieee754_asinf+0x1ac>
 8006034:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006038:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80060bc <__ieee754_asinf+0x1a0>
 800603c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006040:	eddf 6a23 	vldr	s13, [pc, #140]	@ 80060d0 <__ieee754_asinf+0x1b4>
 8006044:	eee7 6a86 	vfma.f32	s13, s15, s12
 8006048:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 80060d4 <__ieee754_asinf+0x1b8>
 800604c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8006050:	eddf 6a21 	vldr	s13, [pc, #132]	@ 80060d8 <__ieee754_asinf+0x1bc>
 8006054:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006058:	ee27 7a27 	vmul.f32	s14, s14, s15
 800605c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8006060:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8006064:	eea0 0a27 	vfma.f32	s0, s0, s15
 8006068:	e76c      	b.n	8005f44 <__ieee754_asinf+0x28>
 800606a:	ee10 3a10 	vmov	r3, s0
 800606e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8006072:	f023 030f 	bic.w	r3, r3, #15
 8006076:	ee07 3a10 	vmov	s14, r3
 800607a:	eea7 8a47 	vfms.f32	s16, s14, s14
 800607e:	ee70 5a00 	vadd.f32	s11, s0, s0
 8006082:	ee30 0a07 	vadd.f32	s0, s0, s14
 8006086:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80060a8 <__ieee754_asinf+0x18c>
 800608a:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800608e:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 80060e4 <__ieee754_asinf+0x1c8>
 8006092:	eee5 7a66 	vfms.f32	s15, s10, s13
 8006096:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800609a:	eeb0 6a40 	vmov.f32	s12, s0
 800609e:	eea7 6a66 	vfms.f32	s12, s14, s13
 80060a2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80060a6:	e7aa      	b.n	8005ffe <__ieee754_asinf+0xe2>
 80060a8:	b33bbd2e 	.word	0xb33bbd2e
 80060ac:	3fc90fdb 	.word	0x3fc90fdb
 80060b0:	7149f2ca 	.word	0x7149f2ca
 80060b4:	3a4f7f04 	.word	0x3a4f7f04
 80060b8:	3811ef08 	.word	0x3811ef08
 80060bc:	3e2aaaab 	.word	0x3e2aaaab
 80060c0:	bd241146 	.word	0xbd241146
 80060c4:	3e4e0aa8 	.word	0x3e4e0aa8
 80060c8:	bea6b090 	.word	0xbea6b090
 80060cc:	3d9dc62e 	.word	0x3d9dc62e
 80060d0:	bf303361 	.word	0xbf303361
 80060d4:	4001572d 	.word	0x4001572d
 80060d8:	c019d139 	.word	0xc019d139
 80060dc:	3f799999 	.word	0x3f799999
 80060e0:	333bbd2e 	.word	0x333bbd2e
 80060e4:	3f490fdb 	.word	0x3f490fdb

080060e8 <__ieee754_sqrtf>:
 80060e8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80060ec:	4770      	bx	lr
	...

080060f0 <_init>:
 80060f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f2:	bf00      	nop
 80060f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060f6:	bc08      	pop	{r3}
 80060f8:	469e      	mov	lr, r3
 80060fa:	4770      	bx	lr

080060fc <_fini>:
 80060fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fe:	bf00      	nop
 8006100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006102:	bc08      	pop	{r3}
 8006104:	469e      	mov	lr, r3
 8006106:	4770      	bx	lr

Disassembly of section .ccmram:

08006108 <pi_aw_calc>:
 *
 * @note This function computes the PI control action with anti-windup.
 */
void pi_aw_calc(volatile pi_aw_struct *v)
{
    if(v->enable)
 8006108:	8803      	ldrh	r3, [r0, #0]
 800610a:	b29b      	uxth	r3, r3
 800610c:	2b00      	cmp	r3, #0
 800610e:	d037      	beq.n	8006180 <pi_aw_calc+0x78>
    {
        v->e[0] = v->pi_consig - v->pi_fdb; // Calculate error
 8006110:	edd0 7a07 	vldr	s15, [r0, #28]
 8006114:	ed90 7a08 	vldr	s14, [r0, #32]
 8006118:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800611c:	edc0 7a05 	vstr	s15, [r0, #20]

        // PI trapezoidal with feedforward
        v->pi_int[0] =  v->Ki * v->e[0] * v->Ts + v->pi_int[1] + (v->pi_out_postsat - v->pi_out_presat) * v->Kaw * v->Ts;
 8006120:	ed90 6a03 	vldr	s12, [r0, #12]
 8006124:	ed90 7a05 	vldr	s14, [r0, #20]
 8006128:	ed90 5a01 	vldr	s10, [r0, #4]
 800612c:	ee26 6a07 	vmul.f32	s12, s12, s14
 8006130:	edd0 7a0f 	vldr	s15, [r0, #60]	@ 0x3c
 8006134:	edd0 6a0c 	vldr	s13, [r0, #48]	@ 0x30
 8006138:	edd0 4a0b 	vldr	s9, [r0, #44]	@ 0x2c
 800613c:	eee6 7a05 	vfma.f32	s15, s12, s10
 8006140:	ed90 7a04 	vldr	s14, [r0, #16]
 8006144:	edd0 5a01 	vldr	s11, [r0, #4]
 8006148:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800614c:	ee27 7a25 	vmul.f32	s14, s14, s11
 8006150:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006154:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38

        v->pi_out_presat = v->pi_out;
 8006158:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800615a:	62c3      	str	r3, [r0, #44]	@ 0x2c

        // Output voltage saturation
        if (v->pi_out > v->pi_out_max)
 800615c:	ed90 7a0d 	vldr	s14, [r0, #52]	@ 0x34
 8006160:	edd0 7a09 	vldr	s15, [r0, #36]	@ 0x24
 8006164:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800616c:	dd0e      	ble.n	800618c <pi_aw_calc+0x84>
            v->pi_out = v->pi_out_max;
 800616e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006170:	6343      	str	r3, [r0, #52]	@ 0x34
        else if (v->pi_out < v->pi_out_min)
            v->pi_out = v->pi_out_min;
        else;

        // Copy previous values
        v->e[1] = v->e[0];                      // Copy previous error
 8006172:	6943      	ldr	r3, [r0, #20]
 8006174:	6183      	str	r3, [r0, #24]
        v->pi_ffw[1] = v->pi_ffw[0];            // Copy previous feedforward
 8006176:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8006178:	6443      	str	r3, [r0, #68]	@ 0x44
        v->pi_int[1] = v->pi_int[0];			// Copy previous integrator
 800617a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800617c:	63c3      	str	r3, [r0, #60]	@ 0x3c
 800617e:	4770      	bx	lr
    }
    else
    {
        // Reset previous control variables
        v->e[1] = 0.0F;
 8006180:	2300      	movs	r3, #0
 8006182:	6183      	str	r3, [r0, #24]
        v->pi_ffw[1] = 0.0F;
 8006184:	6443      	str	r3, [r0, #68]	@ 0x44
        v->pi_int[1] = 0.0F;
 8006186:	63c3      	str	r3, [r0, #60]	@ 0x3c
        v->pi_out = 0.0F;
 8006188:	6343      	str	r3, [r0, #52]	@ 0x34
    }
}
 800618a:	4770      	bx	lr
        else if (v->pi_out < v->pi_out_min)
 800618c:	ed90 7a0d 	vldr	s14, [r0, #52]	@ 0x34
 8006190:	edd0 7a0a 	vldr	s15, [r0, #40]	@ 0x28
 8006194:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800619c:	d5e9      	bpl.n	8006172 <pi_aw_calc+0x6a>
            v->pi_out = v->pi_out_min;
 800619e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80061a0:	6343      	str	r3, [r0, #52]	@ 0x34
 80061a2:	e7e6      	b.n	8006172 <pi_aw_calc+0x6a>

080061a4 <pi_init>:
 * @param v Pointer to the PI structure.
 *
 * @note This function initializes the constants used in the PI controller.
 */
void pi_init(volatile pi_struct *v){
    v->K0 = v->Kp + v->Ki * v->Ts * 0.5F;   // K0 = Kp + Ki*Ts/2
 80061a4:	edd0 7a02 	vldr	s15, [r0, #8]
 80061a8:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80061ac:	ed90 7a03 	vldr	s14, [r0, #12]
 80061b0:	ed90 6a01 	vldr	s12, [r0, #4]
 80061b4:	ee27 7a06 	vmul.f32	s14, s14, s12
 80061b8:	eee7 7a26 	vfma.f32	s15, s14, s13
 80061bc:	edc0 7a04 	vstr	s15, [r0, #16]
    v->K1 = -v->Kp + v->Ki * v->Ts * 0.5F;  // K1 = -Kp + Ki*Ts/2
 80061c0:	ed90 7a03 	vldr	s14, [r0, #12]
 80061c4:	ed90 6a01 	vldr	s12, [r0, #4]
 80061c8:	edd0 7a02 	vldr	s15, [r0, #8]
 80061cc:	ee27 7a06 	vmul.f32	s14, s14, s12
 80061d0:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80061d4:	edc0 7a05 	vstr	s15, [r0, #20]
}
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop

080061dc <pi_calc>:
 *
 * @note This function computes the PI control action with feedforward and saturation.
 */
void pi_calc(volatile pi_struct *v)
{
    if(v->enable)
 80061dc:	8803      	ldrh	r3, [r0, #0]
 80061de:	b29b      	uxth	r3, r3
 80061e0:	b37b      	cbz	r3, 8006242 <pi_calc+0x66>
    {
        v->e[0] = v->pi_consig - v->pi_fdb; // Calculate error
 80061e2:	edd0 7a08 	vldr	s15, [r0, #32]
 80061e6:	ed90 7a09 	vldr	s14, [r0, #36]	@ 0x24
 80061ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80061ee:	edc0 7a06 	vstr	s15, [r0, #24]
        v->pi_out += v->K0 * v->e[0] + v->K1 * v->e[1] + v->pi_ffw[0] - v->pi_ffw[1];   // PI trapezoidal with feedforward
 80061f2:	ed90 5a04 	vldr	s10, [r0, #16]
 80061f6:	edd0 5a06 	vldr	s11, [r0, #24]
 80061fa:	ed90 6a05 	vldr	s12, [r0, #20]
 80061fe:	edd0 6a07 	vldr	s13, [r0, #28]
 8006202:	edd0 7a0d 	vldr	s15, [r0, #52]	@ 0x34
 8006206:	ed90 7a0e 	vldr	s14, [r0, #56]	@ 0x38
 800620a:	edd0 4a0c 	vldr	s9, [r0, #48]	@ 0x30
 800620e:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8006212:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006216:	eee6 7a26 	vfma.f32	s15, s12, s13
 800621a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800621e:	edc0 7a0c 	vstr	s15, [r0, #48]	@ 0x30
        // Output voltage saturation
        if (v->pi_out > v->pi_out_max)
 8006222:	ed90 7a0c 	vldr	s14, [r0, #48]	@ 0x30
 8006226:	edd0 7a0a 	vldr	s15, [r0, #40]	@ 0x28
 800622a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800622e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006232:	dd0b      	ble.n	800624c <pi_calc+0x70>
            v->pi_out = v->pi_out_max;
 8006234:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006236:	6303      	str	r3, [r0, #48]	@ 0x30
        else if (v->pi_out < v->pi_out_min)
            v->pi_out = v->pi_out_min;
        else;
        // Copy previous values
        v->e[1] = v->e[0];                      // Copy previous error
 8006238:	6983      	ldr	r3, [r0, #24]
 800623a:	61c3      	str	r3, [r0, #28]
        v->pi_ffw[1] = v->pi_ffw[0];            // Copy previous feedforward
 800623c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800623e:	6383      	str	r3, [r0, #56]	@ 0x38
 8006240:	4770      	bx	lr
    }
    else
    {
        // Reset previous control variables
        v->e[1] = 0.0F;
 8006242:	2300      	movs	r3, #0
 8006244:	61c3      	str	r3, [r0, #28]
        v->pi_ffw[1] = 0.0F;
 8006246:	6383      	str	r3, [r0, #56]	@ 0x38
        v->pi_out = 0.0F;
 8006248:	6303      	str	r3, [r0, #48]	@ 0x30
    }
}
 800624a:	4770      	bx	lr
        else if (v->pi_out < v->pi_out_min)
 800624c:	ed90 7a0c 	vldr	s14, [r0, #48]	@ 0x30
 8006250:	edd0 7a0b 	vldr	s15, [r0, #44]	@ 0x2c
 8006254:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800625c:	d5ec      	bpl.n	8006238 <pi_calc+0x5c>
            v->pi_out = v->pi_out_min;
 800625e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8006260:	6303      	str	r3, [r0, #48]	@ 0x30
 8006262:	e7e9      	b.n	8006238 <pi_calc+0x5c>

08006264 <clarke3F_calc>:
 *
 * @note This function computes the Clarke transformation for three-phase signals.
 */
void clarke3F_calc(volatile clarke3F_struct *v)
{
    v->D = v->a;                                       // Alfa = A
 8006264:	6803      	ldr	r3, [r0, #0]
    v->Q = ISQ3*( v->a + 2.0F * v->b );              // Beta = 1/sqrt(3)*(A + 2*B) = 1/sqrt(3)*(B - C)
 8006266:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800626a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8006288 <clarke3F_calc+0x24>
    v->D = v->a;                                       // Alfa = A
 800626e:	6083      	str	r3, [r0, #8]
    v->Q = ISQ3*( v->a + 2.0F * v->b );              // Beta = 1/sqrt(3)*(A + 2*B) = 1/sqrt(3)*(B - C)
 8006270:	edd0 7a00 	vldr	s15, [r0]
 8006274:	ed90 6a01 	vldr	s12, [r0, #4]
 8006278:	eee6 7a26 	vfma.f32	s15, s12, s13
 800627c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006280:	edc0 7a03 	vstr	s15, [r0, #12]
}
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	3f13cd3a 	.word	0x3f13cd3a

0800628c <rot_calc>:
 *
 * @note This function computes the rotation transformation (clockwise).
 */
void rot_calc(volatile rot_struct *v)
{
    v->d = v->D*v->cosFi + v->Q*v->sinFi;              // d = Alfa(D)*cos(Fi) + Beta(Q)*sin(Fi)
 800628c:	edd0 6a00 	vldr	s13, [r0]
 8006290:	ed90 7a03 	vldr	s14, [r0, #12]
 8006294:	edd0 7a01 	vldr	s15, [r0, #4]
 8006298:	ed90 6a02 	vldr	s12, [r0, #8]
 800629c:	ee67 7a86 	vmul.f32	s15, s15, s12
 80062a0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80062a4:	edc0 7a04 	vstr	s15, [r0, #16]
    v->q = v->Q*v->cosFi - v->D*v->sinFi ;             // q = -Alfa(D)*sin(Fi) + Beta(Q)*cos(Fi)
 80062a8:	edd0 6a01 	vldr	s13, [r0, #4]
 80062ac:	ed90 7a03 	vldr	s14, [r0, #12]
 80062b0:	ed90 6a00 	vldr	s12, [r0]
 80062b4:	edd0 7a02 	vldr	s15, [r0, #8]
 80062b8:	ee67 7ac6 	vnmul.f32	s15, s15, s12
 80062bc:	eee6 7a87 	vfma.f32	s15, s13, s14
 80062c0:	edc0 7a05 	vstr	s15, [r0, #20]
}
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop

080062c8 <irot_calc>:
 *
 * @note This function computes the inverse rotation transformation (counterclockwise).
 */
void irot_calc(volatile irot_struct *v)
{
    v->alpha = v->d*v->cosFi - v->q*v->sinFi;              // Alfa(D) = d*cos(Fi) - q*sin(Fi)
 80062c8:	edd0 6a00 	vldr	s13, [r0]
 80062cc:	ed90 7a03 	vldr	s14, [r0, #12]
 80062d0:	ed90 6a01 	vldr	s12, [r0, #4]
 80062d4:	edd0 7a02 	vldr	s15, [r0, #8]
 80062d8:	ee67 7ac6 	vnmul.f32	s15, s15, s12
 80062dc:	eee6 7a87 	vfma.f32	s15, s13, s14
 80062e0:	edc0 7a04 	vstr	s15, [r0, #16]
    v->beta = v->d*v->sinFi + v->q*v->cosFi;              // Beta(Q) = d*sin(Fi) + q*cos(Fi)
 80062e4:	edd0 6a00 	vldr	s13, [r0]
 80062e8:	ed90 7a02 	vldr	s14, [r0, #8]
 80062ec:	edd0 7a01 	vldr	s15, [r0, #4]
 80062f0:	ed90 6a03 	vldr	s12, [r0, #12]
 80062f4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80062f8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80062fc:	edc0 7a05 	vstr	s15, [r0, #20]
}
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop

08006304 <angle_calc>:
 * @note This function generates the angle.
 */
void angle_calc(volatile angle_struct *v)
{
    // Integrator
    v->angle += v->freq*v->Ts*2;
 8006304:	ed90 7a00 	vldr	s14, [r0]
 8006308:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800630c:	edd0 5a01 	vldr	s11, [r0, #4]
    v->angle = (v->angle > 1) ? (v->angle - 2) : v->angle;
 8006310:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
    v->angle += v->freq*v->Ts*2;
 8006314:	edd0 7a02 	vldr	s15, [r0, #8]
 8006318:	ee27 7a25 	vmul.f32	s14, s14, s11
 800631c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8006320:	edc0 7a02 	vstr	s15, [r0, #8]
    v->angle = (v->angle > 1) ? (v->angle - 2) : v->angle;
 8006324:	edd0 7a02 	vldr	s15, [r0, #8]
 8006328:	eef4 7ac6 	vcmpe.f32	s15, s12
 800632c:	edd0 7a02 	vldr	s15, [r0, #8]
 8006330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006334:	bfc8      	it	gt
 8006336:	ee77 7ae6 	vsubgt.f32	s15, s15, s13
 800633a:	edc0 7a02 	vstr	s15, [r0, #8]
}
 800633e:	4770      	bx	lr

08006340 <svpwm_calc>:

    // Auxiliary variables for SVPWM
    float Va, Vb, Vc, max, min, h;

    // Calculate Va, Vb, and Vc for three-phase system without neutral
    Va = v->alpha;                                      // A = Alfa
 8006340:	edd0 5a00 	vldr	s11, [r0]
    //Vb = (- v->valfa + SQ3*v->vbeta)*0.5;              // B = -1/2*Alfa + sqrt(3)/2*Beta
    Vb = (- v->alpha + SQ3*v->beta)*DIV2;              // B = -1/2*Alfa + sqrt(3)/2*Beta
 8006344:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006348:	ed90 6a01 	vldr	s12, [r0, #4]
 800634c:	eddf 6a16 	vldr	s13, [pc, #88]	@ 80063a8 <svpwm_calc+0x68>
 8006350:	edd0 7a00 	vldr	s15, [r0]
    // Calculate homopolar component
    h = (max + min)*DIV2;

    // Generate duty cycles (range from 0 to 1)
    // Convert sinusoids ranging up to 0.5 to sinusoids ranging from 0 to 1
    v->Da = (Va - h + 0.5F);
 8006354:	ee35 4a87 	vadd.f32	s8, s11, s14
    Vb = (- v->alpha + SQ3*v->beta)*DIV2;              // B = -1/2*Alfa + sqrt(3)/2*Beta
 8006358:	eed6 7a26 	vfnms.f32	s15, s12, s13
 800635c:	ee67 7a87 	vmul.f32	s15, s15, s14
    Vc = - Va - Vb;                                     // C = - A - B
 8006360:	ee35 6aa7 	vadd.f32	s12, s11, s15
    max = (Vb >= max) ? Vb : max;
 8006364:	fec5 6aa7 	vmaxnm.f32	s13, s11, s15
    v->Db = (Vb - h + 0.5F);
 8006368:	ee77 4a87 	vadd.f32	s9, s15, s14
    min = (Vb <= min) ? Vb : min;
 800636c:	fec5 5ae7 	vminnm.f32	s11, s11, s15
    Vc = - Va - Vb;                                     // C = - A - B
 8006370:	eeb1 5a46 	vneg.f32	s10, s12
    v->Dc = (Vc - h + 0.5F);
 8006374:	ee37 6a46 	vsub.f32	s12, s14, s12
    max = (Vc >= max) ? Vc : max;
 8006378:	fec5 7a26 	vmaxnm.f32	s15, s10, s13
    min = (Vc <= min) ? Vc : min;
 800637c:	fe85 5a65 	vminnm.f32	s10, s10, s11
    v->Db = (Vb - h + 0.5F);
 8006380:	eef0 6a64 	vmov.f32	s13, s9
    h = (max + min)*DIV2;
 8006384:	ee77 7a85 	vadd.f32	s15, s15, s10
    v->Da = (Va - h + 0.5F);
 8006388:	eef0 5a44 	vmov.f32	s11, s8
    v->Db = (Vb - h + 0.5F);
 800638c:	eee7 6ac7 	vfms.f32	s13, s15, s14
    v->Da = (Va - h + 0.5F);
 8006390:	eee7 5ac7 	vfms.f32	s11, s15, s14
    v->Dc = (Vc - h + 0.5F);
 8006394:	eea7 6ac7 	vfms.f32	s12, s15, s14
    v->Da = (Va - h + 0.5F);
 8006398:	edc0 5a02 	vstr	s11, [r0, #8]
    v->Db = (Vb - h + 0.5F);
 800639c:	edc0 6a03 	vstr	s13, [r0, #12]
    v->Dc = (Vc - h + 0.5F);
 80063a0:	ed80 6a04 	vstr	s12, [r0, #16]
}
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	3fddb3d7 	.word	0x3fddb3d7

080063ac <rampa_calc>:
 *
 * @note This function calculates the ramp.
 */
void rampa_calc(volatile rampa_struct *v)
{
    if (v->enable)
 80063ac:	7b03      	ldrb	r3, [r0, #12]
 80063ae:	b1e3      	cbz	r3, 80063ea <rampa_calc+0x3e>
    {
        if(v->out < v->in)
 80063b0:	ed90 7a01 	vldr	s14, [r0, #4]
 80063b4:	edd0 7a00 	vldr	s15, [r0]
 80063b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80063bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063c0:	d516      	bpl.n	80063f0 <rampa_calc+0x44>
        {
            v->out += v->Incr;
 80063c2:	ed90 7a02 	vldr	s14, [r0, #8]
 80063c6:	edd0 7a01 	vldr	s15, [r0, #4]
 80063ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80063ce:	edc0 7a01 	vstr	s15, [r0, #4]
            if(v->out > v->in)
 80063d2:	ed90 7a01 	vldr	s14, [r0, #4]
 80063d6:	edd0 7a00 	vldr	s15, [r0]
 80063da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80063de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063e2:	dd04      	ble.n	80063ee <rampa_calc+0x42>
        }
        else if(v->out > v->in)
        {
            v->out -= v->Incr;
            if(v->out < v->in)
                v->out = v->in;
 80063e4:	6803      	ldr	r3, [r0, #0]
 80063e6:	6043      	str	r3, [r0, #4]
 80063e8:	4770      	bx	lr
        }
        else;
    }
    else
    {
        v->out = 0.0F;
 80063ea:	2300      	movs	r3, #0
 80063ec:	6043      	str	r3, [r0, #4]
    }
}
 80063ee:	4770      	bx	lr
        else if(v->out > v->in)
 80063f0:	ed90 7a01 	vldr	s14, [r0, #4]
 80063f4:	edd0 7a00 	vldr	s15, [r0]
 80063f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80063fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006400:	ddf5      	ble.n	80063ee <rampa_calc+0x42>
            v->out -= v->Incr;
 8006402:	ed90 7a02 	vldr	s14, [r0, #8]
 8006406:	edd0 7a01 	vldr	s15, [r0, #4]
 800640a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800640e:	edc0 7a01 	vstr	s15, [r0, #4]
            if(v->out < v->in)
 8006412:	ed90 7a01 	vldr	s14, [r0, #4]
 8006416:	edd0 7a00 	vldr	s15, [r0]
 800641a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800641e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006422:	d5e4      	bpl.n	80063ee <rampa_calc+0x42>
 8006424:	e7de      	b.n	80063e4 <rampa_calc+0x38>
 8006426:	bf00      	nop

08006428 <rampa_dual_calc>:
 *
 * @note This function calculates the dual ramp.
 */
void rampa_dual_calc(volatile rampa_dual_struct *v)
{
    if (v->enable)
 8006428:	7c03      	ldrb	r3, [r0, #16]
 800642a:	b1e3      	cbz	r3, 8006466 <rampa_dual_calc+0x3e>
    {
        if(v->out < v->in)
 800642c:	ed90 7a01 	vldr	s14, [r0, #4]
 8006430:	edd0 7a00 	vldr	s15, [r0]
 8006434:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800643c:	d516      	bpl.n	800646c <rampa_dual_calc+0x44>
        {
            v->out += v->Incr;
 800643e:	ed90 7a02 	vldr	s14, [r0, #8]
 8006442:	edd0 7a01 	vldr	s15, [r0, #4]
 8006446:	ee77 7a87 	vadd.f32	s15, s15, s14
 800644a:	edc0 7a01 	vstr	s15, [r0, #4]
            if(v->out > v->in)
 800644e:	ed90 7a01 	vldr	s14, [r0, #4]
 8006452:	edd0 7a00 	vldr	s15, [r0]
 8006456:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800645a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800645e:	dd04      	ble.n	800646a <rampa_dual_calc+0x42>
        }
        else if(v->out > v->in)
        {
            v->out -= v->Decr;
            if(v->out < v->in)
                v->out = v->in;
 8006460:	6803      	ldr	r3, [r0, #0]
 8006462:	6043      	str	r3, [r0, #4]
 8006464:	4770      	bx	lr
        }
        else;
    }
    else
    {
        v->out = 0;
 8006466:	2300      	movs	r3, #0
 8006468:	6043      	str	r3, [r0, #4]
    }
}
 800646a:	4770      	bx	lr
        else if(v->out > v->in)
 800646c:	ed90 7a01 	vldr	s14, [r0, #4]
 8006470:	edd0 7a00 	vldr	s15, [r0]
 8006474:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800647c:	ddf5      	ble.n	800646a <rampa_dual_calc+0x42>
            v->out -= v->Decr;
 800647e:	ed90 7a03 	vldr	s14, [r0, #12]
 8006482:	edd0 7a01 	vldr	s15, [r0, #4]
 8006486:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800648a:	edc0 7a01 	vstr	s15, [r0, #4]
            if(v->out < v->in)
 800648e:	ed90 7a01 	vldr	s14, [r0, #4]
 8006492:	edd0 7a00 	vldr	s15, [r0]
 8006496:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800649a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800649e:	d5e4      	bpl.n	800646a <rampa_dual_calc+0x42>
 80064a0:	e7de      	b.n	8006460 <rampa_dual_calc+0x38>
 80064a2:	bf00      	nop

080064a4 <RMS_calc>:
 * @note This function calculates the Root Mean Square (RMS).
 */
void RMS_calc(volatile RMS_struct *v){
    // Calculate RMS output current.
    //-----------------------------------------------------------------------------------------
    v->Sq_Sum += (float) (v->Measure * v->Measure)* v->T_exec;
 80064a4:	ed90 7a01 	vldr	s14, [r0, #4]
    // Execute calculation at the zero crossing of the angle
    //
    if (v->Freq > 0.0F) {
 80064a8:	2300      	movs	r3, #0
    v->Sq_Sum += (float) (v->Measure * v->Measure)* v->T_exec;
 80064aa:	ed90 6a01 	vldr	s12, [r0, #4]
 80064ae:	edd0 6a00 	vldr	s13, [r0]
 80064b2:	ee27 7a06 	vmul.f32	s14, s14, s12
 80064b6:	edd0 7a02 	vldr	s15, [r0, #8]
 80064ba:	eee7 7a26 	vfma.f32	s15, s14, s13
 80064be:	edc0 7a02 	vstr	s15, [r0, #8]
    if (v->Freq > 0.0F) {
 80064c2:	edd0 7a04 	vldr	s15, [r0, #16]
 80064c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80064ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064ce:	dd1e      	ble.n	800650e <RMS_calc+0x6a>
        if (v->Angle_ant < 0.0F && v->Angle >= 0.0F) {
 80064d0:	edd0 7a06 	vldr	s15, [r0, #24]
 80064d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80064d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064dc:	d402      	bmi.n	80064e4 <RMS_calc+0x40>
        }
        else;
        //do nothing
    }
    else;
    v->Angle_ant = v->Angle;
 80064de:	6943      	ldr	r3, [r0, #20]
 80064e0:	6183      	str	r3, [r0, #24]
}
 80064e2:	4770      	bx	lr
        if (v->Angle_ant < 0.0F && v->Angle >= 0.0F) {
 80064e4:	edd0 7a05 	vldr	s15, [r0, #20]
 80064e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80064ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064f0:	dbf5      	blt.n	80064de <RMS_calc+0x3a>
            v->Out_RMS = sqrtf((float) v->Sq_Sum * v->Freq);
 80064f2:	edd0 7a02 	vldr	s15, [r0, #8]
 80064f6:	ed90 7a04 	vldr	s14, [r0, #16]
 80064fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80064fe:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8006502:	ed80 7a03 	vstr	s14, [r0, #12]
            v->Sq_Sum = 0;
 8006506:	6083      	str	r3, [r0, #8]
    v->Angle_ant = v->Angle;
 8006508:	6943      	ldr	r3, [r0, #20]
 800650a:	6183      	str	r3, [r0, #24]
}
 800650c:	4770      	bx	lr
    else if (v->Freq < 0.0F){
 800650e:	edd0 7a04 	vldr	s15, [r0, #16]
 8006512:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800651a:	d5e0      	bpl.n	80064de <RMS_calc+0x3a>
        if (v->Angle_ant > 0.0F && v->Angle <= 0.0F) {
 800651c:	edd0 7a06 	vldr	s15, [r0, #24]
 8006520:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006528:	ddd9      	ble.n	80064de <RMS_calc+0x3a>
 800652a:	edd0 7a05 	vldr	s15, [r0, #20]
 800652e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006536:	d8d2      	bhi.n	80064de <RMS_calc+0x3a>
            v->Out_RMS = sqrtf((float) v->Sq_Sum * v->Freq * (-1.0F));
 8006538:	ed90 7a02 	vldr	s14, [r0, #8]
 800653c:	edd0 7a04 	vldr	s15, [r0, #16]
 8006540:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8006544:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8006548:	ed80 7a03 	vstr	s14, [r0, #12]
            v->Sq_Sum = 0;
 800654c:	6083      	str	r3, [r0, #8]
 800654e:	e7c6      	b.n	80064de <RMS_calc+0x3a>

08006550 <filtreLP_calc>:
    if (v->enable)
 8006550:	8a83      	ldrh	r3, [r0, #20]
 8006552:	b29b      	uxth	r3, r3
 8006554:	b173      	cbz	r3, 8006574 <filtreLP_calc+0x24>
        v->out = (v->alfa * (v->in - v->out)) + v->out;    // Filter out(k) = alfa*in(k) + (1-alfa)*out(k-1)
 8006556:	edd0 6a02 	vldr	s13, [r0, #8]
 800655a:	ed90 7a00 	vldr	s14, [r0]
 800655e:	ed90 6a01 	vldr	s12, [r0, #4]
 8006562:	edd0 7a01 	vldr	s15, [r0, #4]
 8006566:	ee37 7a46 	vsub.f32	s14, s14, s12
 800656a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800656e:	edc0 7a01 	vstr	s15, [r0, #4]
 8006572:	4770      	bx	lr
        v->out = v->in;        // Without filter. Out(k) = In(k)
 8006574:	6803      	ldr	r3, [r0, #0]
 8006576:	6043      	str	r3, [r0, #4]
}
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop

0800657c <step_calc>:
 * @note This function calculates the step function.
 */
void step_calc(volatile step_struct *v)
{
    // Calculate step width in pulses to count
    v->Pulses = (uint32_t)((v->fs) * (v->t_step));
 800657c:	edd0 7a00 	vldr	s15, [r0]
 8006580:	ed90 7a04 	vldr	s14, [r0, #16]
 8006584:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006588:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800658c:	edc0 7a05 	vstr	s15, [r0, #20]

    // If enabled, perform the step and start counting
    if (v->enable == 1 && v->Counter < v->Pulses){
 8006590:	8b83      	ldrh	r3, [r0, #28]
 8006592:	b29b      	uxth	r3, r3
 8006594:	2b01      	cmp	r3, #1
 8006596:	d006      	beq.n	80065a6 <step_calc+0x2a>
        v->Out = v->In + v->Step;
        v->Counter++;
    }
    // When reaching the time limit, remove step and reset the counter
    else if (v->enable == 1 && v->Counter >= v->Pulses){
 8006598:	8b83      	ldrh	r3, [r0, #28]
 800659a:	b29b      	uxth	r3, r3
 800659c:	2b01      	cmp	r3, #1
 800659e:	d012      	beq.n	80065c6 <step_calc+0x4a>
        v->Out = v->In;
        v->Counter = 0;
        v->enable = 0;
    }
    // If not enabled
    else v->Out = v->In;
 80065a0:	6843      	ldr	r3, [r0, #4]
 80065a2:	6083      	str	r3, [r0, #8]
}
 80065a4:	4770      	bx	lr
    if (v->enable == 1 && v->Counter < v->Pulses){
 80065a6:	6982      	ldr	r2, [r0, #24]
 80065a8:	6943      	ldr	r3, [r0, #20]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d2f4      	bcs.n	8006598 <step_calc+0x1c>
        v->Out = v->In + v->Step;
 80065ae:	edd0 7a01 	vldr	s15, [r0, #4]
 80065b2:	ed90 7a03 	vldr	s14, [r0, #12]
 80065b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80065ba:	edc0 7a02 	vstr	s15, [r0, #8]
        v->Counter++;
 80065be:	6983      	ldr	r3, [r0, #24]
 80065c0:	3301      	adds	r3, #1
 80065c2:	6183      	str	r3, [r0, #24]
 80065c4:	4770      	bx	lr
    else if (v->enable == 1 && v->Counter >= v->Pulses){
 80065c6:	6982      	ldr	r2, [r0, #24]
 80065c8:	6943      	ldr	r3, [r0, #20]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d3e8      	bcc.n	80065a0 <step_calc+0x24>
        v->Out = v->In;
 80065ce:	6842      	ldr	r2, [r0, #4]
        v->Counter = 0;
 80065d0:	2300      	movs	r3, #0
        v->Out = v->In;
 80065d2:	6082      	str	r2, [r0, #8]
        v->Counter = 0;
 80065d4:	6183      	str	r3, [r0, #24]
        v->enable = 0;
 80065d6:	8383      	strh	r3, [r0, #28]
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
