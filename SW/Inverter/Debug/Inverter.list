
Inverter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007678  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ccmram       00000868  08007870  08007870  00008870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001f0  080080d8  080080d8  000090d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080082c8  080082c8  0000a084  2**0
                  CONTENTS
  5 .ARM          00000008  080082c8  080082c8  000092c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080082d0  080082d0  0000a084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  080082d0  080082d0  000092d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  080082d4  080082d4  000092d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000084  20000000  080082d8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000604  20000084  0800835c  0000a084  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000688  0800835c  0000a688  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0000a084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018ca4  00000000  00000000  0000a0b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004111  00000000  00000000  00022d56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001488  00000000  00000000  00026e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fa3  00000000  00000000  000282f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b94b  00000000  00000000  00029293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dfc9  00000000  00000000  00054bde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00103ca7  00000000  00000000  00072ba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0017684e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000055e8  00000000  00000000  00176894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  0017be7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000084 	.word	0x20000084
 8000214:	00000000 	.word	0x00000000
 8000218:	08007858 	.word	0x08007858

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000088 	.word	0x20000088
 8000234:	08007858 	.word	0x08007858

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <calc_duties>:
 * @param vq Voltage in the q-axis.
 * @param vDC DC voltage.
 * @param freq Frequency.
 * @param duties Pointer to the duties structure.
 */
void calc_duties(float vd, float vq, float vDC, float freq, volatile Duties *duties) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b086      	sub	sp, #24
 800052c:	af00      	add	r7, sp, #0
 800052e:	ed87 0a05 	vstr	s0, [r7, #20]
 8000532:	edc7 0a04 	vstr	s1, [r7, #16]
 8000536:	ed87 1a03 	vstr	s2, [r7, #12]
 800053a:	edc7 1a02 	vstr	s3, [r7, #8]
 800053e:	6078      	str	r0, [r7, #4]
	static angle_struct angle;
	angle.freq = freq;
 8000540:	4a33      	ldr	r2, [pc, #204]	@ (8000610 <calc_duties+0xe8>)
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	6013      	str	r3, [r2, #0]
	angle.Ts = TS;
 8000546:	4b32      	ldr	r3, [pc, #200]	@ (8000610 <calc_duties+0xe8>)
 8000548:	4a32      	ldr	r2, [pc, #200]	@ (8000614 <calc_duties+0xec>)
 800054a:	605a      	str	r2, [r3, #4]
	angle_calc(&angle);
 800054c:	4830      	ldr	r0, [pc, #192]	@ (8000610 <calc_duties+0xe8>)
 800054e:	f007 fb3f 	bl	8007bd0 <angle_calc>

	static irot_struct irot;
	irot.d = vd/vDC;
 8000552:	edd7 6a05 	vldr	s13, [r7, #20]
 8000556:	ed97 7a03 	vldr	s14, [r7, #12]
 800055a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800055e:	4b2e      	ldr	r3, [pc, #184]	@ (8000618 <calc_duties+0xf0>)
 8000560:	edc3 7a00 	vstr	s15, [r3]
	irot.q = vq/vDC;
 8000564:	edd7 6a04 	vldr	s13, [r7, #16]
 8000568:	ed97 7a03 	vldr	s14, [r7, #12]
 800056c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000570:	4b29      	ldr	r3, [pc, #164]	@ (8000618 <calc_duties+0xf0>)
 8000572:	edc3 7a01 	vstr	s15, [r3, #4]
	irot.sinFi = sin(angle.angle*M_TWOPI);
 8000576:	4b26      	ldr	r3, [pc, #152]	@ (8000610 <calc_duties+0xe8>)
 8000578:	edd3 7a02 	vldr	s15, [r3, #8]
 800057c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000580:	ed9f 6b21 	vldr	d6, [pc, #132]	@ 8000608 <calc_duties+0xe0>
 8000584:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000588:	eeb0 0b47 	vmov.f64	d0, d7
 800058c:	f006 fb74 	bl	8006c78 <sin>
 8000590:	eeb0 7b40 	vmov.f64	d7, d0
 8000594:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000598:	4b1f      	ldr	r3, [pc, #124]	@ (8000618 <calc_duties+0xf0>)
 800059a:	edc3 7a02 	vstr	s15, [r3, #8]
	irot.cosFi = cos(angle.angle*M_TWOPI);
 800059e:	4b1c      	ldr	r3, [pc, #112]	@ (8000610 <calc_duties+0xe8>)
 80005a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80005a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80005a8:	ed9f 6b17 	vldr	d6, [pc, #92]	@ 8000608 <calc_duties+0xe0>
 80005ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 80005b0:	eeb0 0b47 	vmov.f64	d0, d7
 80005b4:	f006 fb14 	bl	8006be0 <cos>
 80005b8:	eeb0 7b40 	vmov.f64	d7, d0
 80005bc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80005c0:	4b15      	ldr	r3, [pc, #84]	@ (8000618 <calc_duties+0xf0>)
 80005c2:	edc3 7a03 	vstr	s15, [r3, #12]
    irot_calc(&irot);
 80005c6:	4814      	ldr	r0, [pc, #80]	@ (8000618 <calc_duties+0xf0>)
 80005c8:	f007 face 	bl	8007b68 <irot_calc>

    static svpwm_struct svpwm;
    // Assign values to SVPWM structure
    svpwm.alpha = irot.alpha;
 80005cc:	4b12      	ldr	r3, [pc, #72]	@ (8000618 <calc_duties+0xf0>)
 80005ce:	691b      	ldr	r3, [r3, #16]
 80005d0:	4a12      	ldr	r2, [pc, #72]	@ (800061c <calc_duties+0xf4>)
 80005d2:	6013      	str	r3, [r2, #0]
    svpwm.beta = irot.beta;
 80005d4:	4b10      	ldr	r3, [pc, #64]	@ (8000618 <calc_duties+0xf0>)
 80005d6:	695b      	ldr	r3, [r3, #20]
 80005d8:	4a10      	ldr	r2, [pc, #64]	@ (800061c <calc_duties+0xf4>)
 80005da:	6053      	str	r3, [r2, #4]
    svpwm_calc(&svpwm);
 80005dc:	480f      	ldr	r0, [pc, #60]	@ (800061c <calc_duties+0xf4>)
 80005de:	f007 fb2b 	bl	8007c38 <svpwm_calc>

    // Assign SVPWM duties
    duties->Da = svpwm.Da;
 80005e2:	4b0e      	ldr	r3, [pc, #56]	@ (800061c <calc_duties+0xf4>)
 80005e4:	689a      	ldr	r2, [r3, #8]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	601a      	str	r2, [r3, #0]
    duties->Db = svpwm.Db;
 80005ea:	4b0c      	ldr	r3, [pc, #48]	@ (800061c <calc_duties+0xf4>)
 80005ec:	68da      	ldr	r2, [r3, #12]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	605a      	str	r2, [r3, #4]
    duties->Dc = svpwm.Dc;
 80005f2:	4b0a      	ldr	r3, [pc, #40]	@ (800061c <calc_duties+0xf4>)
 80005f4:	691a      	ldr	r2, [r3, #16]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	609a      	str	r2, [r3, #8]

}
 80005fa:	bf00      	nop
 80005fc:	3718      	adds	r7, #24
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	f3af 8000 	nop.w
 8000608:	54442d18 	.word	0x54442d18
 800060c:	401921fb 	.word	0x401921fb
 8000610:	200000a0 	.word	0x200000a0
 8000614:	37a7c5ac 	.word	0x37a7c5ac
 8000618:	200000b0 	.word	0x200000b0
 800061c:	200000cc 	.word	0x200000cc

08000620 <eval_inv_FSM>:
 *
 * This function executes the finite state machine to control the inverter based on its current state.
 *
 * @param inv Pointer to the inverter structure.
 */
void eval_inv_FSM(volatile inverterStruct *inv) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
    switch (inv->state) {
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	7d1b      	ldrb	r3, [r3, #20]
 800062c:	b2db      	uxtb	r3, r3
 800062e:	2b03      	cmp	r3, #3
 8000630:	d81a      	bhi.n	8000668 <eval_inv_FSM+0x48>
 8000632:	a201      	add	r2, pc, #4	@ (adr r2, 8000638 <eval_inv_FSM+0x18>)
 8000634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000638:	08000649 	.word	0x08000649
 800063c:	08000651 	.word	0x08000651
 8000640:	08000659 	.word	0x08000659
 8000644:	08000661 	.word	0x08000661
        case INV_STATE_IDLE:
        	handle_idle(inv);
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f000 f813 	bl	8000674 <handle_idle>
            break;
 800064e:	e00c      	b.n	800066a <eval_inv_FSM+0x4a>
        case INV_STATE_STARTUP:
        	handle_startup(inv);
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f000 f829 	bl	80006a8 <handle_startup>
            break;
 8000656:	e008      	b.n	800066a <eval_inv_FSM+0x4a>
        case INV_STATE_RUNNING:
        	handle_running(inv);
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f000 f83f 	bl	80006dc <handle_running>
            break;
 800065e:	e004      	b.n	800066a <eval_inv_FSM+0x4a>
        case INV_STATE_FAULT:
        	handle_fault(inv);
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f000 f855 	bl	8000710 <handle_fault>
            break;
 8000666:	e000      	b.n	800066a <eval_inv_FSM+0x4a>
        default:
            // Invalid state, handle error
            break;
 8000668:	bf00      	nop
    }
}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop

08000674 <handle_idle>:
 *
 * This function handles the actions and transitions for the idle state of the inverter.
 *
 * @param inv Pointer to the inverter structure.
 */
void handle_idle(volatile inverterStruct *inv) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
    // Perform actions required in idle state
    // Transition conditions to other states:
    // - Start startup sequence based on input condition
    // - Transition to fault state based on error conditions
    inv->led->mode = LED_MODE_OFF;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2203      	movs	r2, #3
 8000682:	719a      	strb	r2, [r3, #6]
    DISABLE(inv->enable_port, inv->enable_pin);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	6858      	ldr	r0, [r3, #4]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	891b      	ldrh	r3, [r3, #8]
 800068c:	b29b      	uxth	r3, r3
 800068e:	2200      	movs	r2, #0
 8000690:	4619      	mov	r1, r3
 8000692:	f003 fc3d 	bl	8003f10 <HAL_GPIO_WritePin>
    disable_PWM(inv->htim);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	68db      	ldr	r3, [r3, #12]
 800069a:	4618      	mov	r0, r3
 800069c:	f000 f98c 	bl	80009b8 <disable_PWM>

}
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <handle_startup>:
 *
 * This function handles the actions and transitions for the startup state of the inverter.
 *
 * @param inv Pointer to the inverter structure.
 */
void handle_startup(volatile inverterStruct *inv) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
    // Perform actions required in startup state
    // Transition conditions to other states:
    // - Transition to running state when startup sequence completes successfully
    // - Transition to fault state based on error conditions during startup
    inv->led->mode = LED_MODE_BLINK_FAST;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2200      	movs	r2, #0
 80006b6:	719a      	strb	r2, [r3, #6]
    DISABLE(inv->enable_port, inv->enable_pin);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	6858      	ldr	r0, [r3, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	891b      	ldrh	r3, [r3, #8]
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	2200      	movs	r2, #0
 80006c4:	4619      	mov	r1, r3
 80006c6:	f003 fc23 	bl	8003f10 <HAL_GPIO_WritePin>
    enable_PWM(inv->htim);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	68db      	ldr	r3, [r3, #12]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 f94c 	bl	800096c <enable_PWM>

}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <handle_running>:
 *
 * This function handles the actions and transitions for the running state of the inverter.
 *
 * @param inv Pointer to the inverter structure.
 */
void handle_running(volatile inverterStruct *inv) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
    // Perform actions required in running state
    // This is where the main control loop resides
    // Monitor inverter variables, adjust control parameters, etc.
    // Transition conditions to other states:
    // - Transition to fault state based on error conditions during operation
    inv->led->mode = LED_MODE_ON;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2202      	movs	r2, #2
 80006ea:	719a      	strb	r2, [r3, #6]
    ENABLE(inv->enable_port, inv->enable_pin);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	6858      	ldr	r0, [r3, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	891b      	ldrh	r3, [r3, #8]
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	2201      	movs	r2, #1
 80006f8:	4619      	mov	r1, r3
 80006fa:	f003 fc09 	bl	8003f10 <HAL_GPIO_WritePin>
    enable_PWM(inv->htim);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	68db      	ldr	r3, [r3, #12]
 8000702:	4618      	mov	r0, r3
 8000704:	f000 f932 	bl	800096c <enable_PWM>

}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <handle_fault>:
 *
 * This function handles the actions and transitions for the fault state of the inverter.
 *
 * @param inv Pointer to the inverter structure.
 */
void handle_fault(volatile inverterStruct *inv) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
    // Perform actions required in fault state
    // This could involve shutting down the inverter, logging error messages, etc.
    // Transition conditions to other states:
    // - Retry startup sequence after a delay if fault condition is recoverable
    // - Transition to idle state after fault is resolved
    inv->led->mode = LED_MODE_BLINK_SLOW;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2201      	movs	r2, #1
 800071e:	719a      	strb	r2, [r3, #6]
    DISABLE(inv->enable_port, inv->enable_pin);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	6858      	ldr	r0, [r3, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	891b      	ldrh	r3, [r3, #8]
 8000728:	b29b      	uxth	r3, r3
 800072a:	2200      	movs	r2, #0
 800072c:	4619      	mov	r1, r3
 800072e:	f003 fbef 	bl	8003f10 <HAL_GPIO_WritePin>
    disable_PWM(inv->htim);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	68db      	ldr	r3, [r3, #12]
 8000736:	4618      	mov	r0, r3
 8000738:	f000 f93e 	bl	80009b8 <disable_PWM>
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <initialize_inverter>:
 * @param enable_port Pointer to the GPIO port for enabling/disabling the inverter.
 * @param enable_pin Pin number for enabling/disabling the inverter.
 * @param htim Timer peripheral for the PWM output.
 * @param hadc ADC peripheral for the current phase current and DC voltage sensing.
 */
void initialize_inverter(volatile inverterStruct *inv, LED *led, GPIO_TypeDef *enable_port, uint16_t enable_pin, TIM_HandleTypeDef *htim, ADC_HandleTypeDef *hadc) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
 8000750:	807b      	strh	r3, [r7, #2]
    // Initialize inverter structure
    inv->state = INV_STATE_STARTUP;
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	2201      	movs	r2, #1
 8000756:	751a      	strb	r2, [r3, #20]
    inv->led = led;
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	68ba      	ldr	r2, [r7, #8]
 800075c:	601a      	str	r2, [r3, #0]
    inv->enable_pin = enable_pin;
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	887a      	ldrh	r2, [r7, #2]
 8000762:	811a      	strh	r2, [r3, #8]
    inv->enable_port = enable_port;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	605a      	str	r2, [r3, #4]
    inv->htim = htim;
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	69ba      	ldr	r2, [r7, #24]
 800076e:	60da      	str	r2, [r3, #12]
    inv->hadc = hadc;
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	69fa      	ldr	r2, [r7, #28]
 8000774:	611a      	str	r2, [r3, #16]
    inv->duties.Da = 0.5;
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800077c:	645a      	str	r2, [r3, #68]	@ 0x44
    inv->duties.Db = 0.5;
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8000784:	649a      	str	r2, [r3, #72]	@ 0x48
    inv->duties.Dc = 0.5;
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800078c:	64da      	str	r2, [r3, #76]	@ 0x4c

    HAL_TIM_Base_Start_IT(inv->htim);
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	68db      	ldr	r3, [r3, #12]
 8000792:	4618      	mov	r0, r3
 8000794:	f004 fe2e 	bl	80053f4 <HAL_TIM_Base_Start_IT>

}
 8000798:	bf00      	nop
 800079a:	3710      	adds	r7, #16
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <get_ADC>:
  * @brief  Get electrical ADC measurements.
  * @param  ADC_raw Pointer to the raw ADC values array.
  * @param  measurements Pointer to the measurements struct to store the results.
  * @retval OK 0 if an error occurred, 1 if successful.
  */
uint8_t get_ADC(volatile uint32_t ADC_raw[], volatile Measurements* measurements) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]

    // Calculate currents and voltage
    float ia = get_linear(ADC_raw[0], CURRENT_SLOPE, CURRENT_OFFSET);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 800082c <get_ADC+0x8c>
 80007b2:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8000830 <get_ADC+0x90>
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 f840 	bl	800083c <get_linear>
 80007bc:	ed87 0a05 	vstr	s0, [r7, #20]
    float ib = get_linear(ADC_raw[1], CURRENT_SLOPE, CURRENT_OFFSET);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3304      	adds	r3, #4
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	eddf 0a19 	vldr	s1, [pc, #100]	@ 800082c <get_ADC+0x8c>
 80007ca:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8000830 <get_ADC+0x90>
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 f834 	bl	800083c <get_linear>
 80007d4:	ed87 0a04 	vstr	s0, [r7, #16]
    float ic = get_linear(ADC_raw[2], CURRENT_SLOPE, CURRENT_OFFSET);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	3308      	adds	r3, #8
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	eddf 0a13 	vldr	s1, [pc, #76]	@ 800082c <get_ADC+0x8c>
 80007e2:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8000830 <get_ADC+0x90>
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 f828 	bl	800083c <get_linear>
 80007ec:	ed87 0a03 	vstr	s0, [r7, #12]
    float VDC = get_linear(ADC_raw[3], VOLTAGE_SLOPE, VOLTAGE_OFFSET);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	330c      	adds	r3, #12
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 8000834 <get_ADC+0x94>
 80007fa:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8000838 <get_ADC+0x98>
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 f81c 	bl	800083c <get_linear>
 8000804:	ed87 0a02 	vstr	s0, [r7, #8]

    // Store the measurements
    measurements->ia = ia;
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	697a      	ldr	r2, [r7, #20]
 800080c:	601a      	str	r2, [r3, #0]
    measurements->ib = ib;
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	693a      	ldr	r2, [r7, #16]
 8000812:	605a      	str	r2, [r3, #4]
    measurements->ic = ic;
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	68fa      	ldr	r2, [r7, #12]
 8000818:	609a      	str	r2, [r3, #8]
    measurements->VDC = VDC;
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	68ba      	ldr	r2, [r7, #8]
 800081e:	60da      	str	r2, [r3, #12]

    return 1; // Success
 8000820:	2301      	movs	r3, #1
}
 8000822:	4618      	mov	r0, r3
 8000824:	3718      	adds	r7, #24
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	3fd9afe4 	.word	0x3fd9afe4
 8000830:	4259afe4 	.word	0x4259afe4
 8000834:	3caaa3ad 	.word	0x3caaa3ad
 8000838:	3b78c650 	.word	0x3b78c650

0800083c <get_linear>:
  * @param  bits The ADC reading.
  * @param  slope The slope (units per volt).
  * @param  offset The offset (volts at zero).
  * @retval measurement The physical measurement.
  */
float get_linear(uint32_t bits, float slope, float offset) {
 800083c:	b480      	push	{r7}
 800083e:	b087      	sub	sp, #28
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	ed87 0a02 	vstr	s0, [r7, #8]
 8000848:	edc7 0a01 	vstr	s1, [r7, #4]
    // Convert ADC reading to voltage
    float voltage = (float) bits * 0.0008058608f; // Assuming 12-bit ADC and 3.3V reference (bits * (3.3 V / 4095.0 bits))
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	ee07 3a90 	vmov	s15, r3
 8000852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000856:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000890 <get_linear+0x54>
 800085a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800085e:	edc7 7a05 	vstr	s15, [r7, #20]

    // Convert voltage to physical measurement
    float measurement = (voltage - offset) * slope;
 8000862:	ed97 7a05 	vldr	s14, [r7, #20]
 8000866:	edd7 7a01 	vldr	s15, [r7, #4]
 800086a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800086e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000876:	edc7 7a04 	vstr	s15, [r7, #16]

    return measurement;
 800087a:	693b      	ldr	r3, [r7, #16]
 800087c:	ee07 3a90 	vmov	s15, r3
}
 8000880:	eeb0 0a67 	vmov.f32	s0, s15
 8000884:	371c      	adds	r7, #28
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	3a534067 	.word	0x3a534067

08000894 <handle_LED>:
 * This function handles the LED blinking modes based on the LED mode and current millisecond counter.
 *
 * @param led Pointer to the LED structure.
 * @param ms_counter Current millisecond counter.
 */
void handle_LED(LED *led, uint32_t ms_counter) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
    switch (led->mode) {
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	799b      	ldrb	r3, [r3, #6]
 80008a2:	2b03      	cmp	r3, #3
 80008a4:	d858      	bhi.n	8000958 <handle_LED+0xc4>
 80008a6:	a201      	add	r2, pc, #4	@ (adr r2, 80008ac <handle_LED+0x18>)
 80008a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ac:	080008bd 	.word	0x080008bd
 80008b0:	080008f7 	.word	0x080008f7
 80008b4:	08000935 	.word	0x08000935
 80008b8:	08000947 	.word	0x08000947
        case LED_MODE_BLINK_FAST:
            if (ms_counter % 200 < 100) {
 80008bc:	683a      	ldr	r2, [r7, #0]
 80008be:	4b29      	ldr	r3, [pc, #164]	@ (8000964 <handle_LED+0xd0>)
 80008c0:	fba3 1302 	umull	r1, r3, r3, r2
 80008c4:	099b      	lsrs	r3, r3, #6
 80008c6:	21c8      	movs	r1, #200	@ 0xc8
 80008c8:	fb01 f303 	mul.w	r3, r1, r3
 80008cc:	1ad3      	subs	r3, r2, r3
 80008ce:	2b63      	cmp	r3, #99	@ 0x63
 80008d0:	d808      	bhi.n	80008e4 <handle_LED+0x50>
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_SET);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6818      	ldr	r0, [r3, #0]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	889b      	ldrh	r3, [r3, #4]
 80008da:	2201      	movs	r2, #1
 80008dc:	4619      	mov	r1, r3
 80008de:	f003 fb17 	bl	8003f10 <HAL_GPIO_WritePin>
            } else {
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
            }
            break;
 80008e2:	e03a      	b.n	800095a <handle_LED+0xc6>
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	6818      	ldr	r0, [r3, #0]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	889b      	ldrh	r3, [r3, #4]
 80008ec:	2200      	movs	r2, #0
 80008ee:	4619      	mov	r1, r3
 80008f0:	f003 fb0e 	bl	8003f10 <HAL_GPIO_WritePin>
            break;
 80008f4:	e031      	b.n	800095a <handle_LED+0xc6>
        case LED_MODE_BLINK_SLOW:
            if (ms_counter % 1000 < 500) {
 80008f6:	683a      	ldr	r2, [r7, #0]
 80008f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000968 <handle_LED+0xd4>)
 80008fa:	fba3 1302 	umull	r1, r3, r3, r2
 80008fe:	099b      	lsrs	r3, r3, #6
 8000900:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000904:	fb01 f303 	mul.w	r3, r1, r3
 8000908:	1ad3      	subs	r3, r2, r3
 800090a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800090e:	d208      	bcs.n	8000922 <handle_LED+0x8e>
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_SET);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6818      	ldr	r0, [r3, #0]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	889b      	ldrh	r3, [r3, #4]
 8000918:	2201      	movs	r2, #1
 800091a:	4619      	mov	r1, r3
 800091c:	f003 faf8 	bl	8003f10 <HAL_GPIO_WritePin>
            } else {
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
            }
            break;
 8000920:	e01b      	b.n	800095a <handle_LED+0xc6>
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6818      	ldr	r0, [r3, #0]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	889b      	ldrh	r3, [r3, #4]
 800092a:	2200      	movs	r2, #0
 800092c:	4619      	mov	r1, r3
 800092e:	f003 faef 	bl	8003f10 <HAL_GPIO_WritePin>
            break;
 8000932:	e012      	b.n	800095a <handle_LED+0xc6>
        case LED_MODE_ON:
            HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_SET);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	6818      	ldr	r0, [r3, #0]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	889b      	ldrh	r3, [r3, #4]
 800093c:	2201      	movs	r2, #1
 800093e:	4619      	mov	r1, r3
 8000940:	f003 fae6 	bl	8003f10 <HAL_GPIO_WritePin>
            break;
 8000944:	e009      	b.n	800095a <handle_LED+0xc6>
        case LED_MODE_OFF:
            HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6818      	ldr	r0, [r3, #0]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	889b      	ldrh	r3, [r3, #4]
 800094e:	2200      	movs	r2, #0
 8000950:	4619      	mov	r1, r3
 8000952:	f003 fadd 	bl	8003f10 <HAL_GPIO_WritePin>
            break;
 8000956:	e000      	b.n	800095a <handle_LED+0xc6>
        default:
            // Invalid LED mode
            break;
 8000958:	bf00      	nop
    }
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	51eb851f 	.word	0x51eb851f
 8000968:	10624dd3 	.word	0x10624dd3

0800096c <enable_PWM>:
 *
 * This function enables PWM output for the specified timer.
 *
 * @param htim Pointer to the TIM_HandleTypeDef structure.
 */
void enable_PWM(TIM_HandleTypeDef *htim) {
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]

//	Reset the counter
//	htim->Instance->CNT=0;
	htim->Instance->CCMR1 = 0x6868; // Set Channel 1 and Channel 2 Output Compare mode to PWM Mode
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f646 0268 	movw	r2, #26728	@ 0x6868
 800097c:	619a      	str	r2, [r3, #24]

//	htim1.Instance->CCER = 0x888;
	htim->Instance->CCER = 0x10555;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a0c      	ldr	r2, [pc, #48]	@ (80009b4 <enable_PWM+0x48>)
 8000984:	621a      	str	r2, [r3, #32]

//	Enable Main Output
	htim->Instance->BDTR |=(1<<15);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000994:	645a      	str	r2, [r3, #68]	@ 0x44

//	Enable Counter
	htim->Instance->CR1 |=1;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f042 0201 	orr.w	r2, r2, #1
 80009a4:	601a      	str	r2, [r3, #0]

}
 80009a6:	bf00      	nop
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	00010555 	.word	0x00010555

080009b8 <disable_PWM>:
 *
 * This function disables PWM output for the specified timer.
 *
 * @param htim Pointer to the TIM_HandleTypeDef structure.
 */
void disable_PWM(TIM_HandleTypeDef *htim) {
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]

	//Disable outputs and select the polarity of each output
	htim->Instance->CNT=0;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2200      	movs	r2, #0
 80009c6:	625a      	str	r2, [r3, #36]	@ 0x24


	htim->Instance->CCER = 0xCCC;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f640 42cc 	movw	r2, #3276	@ 0xccc
 80009d0:	621a      	str	r2, [r3, #32]
	//	htim1.Instance->CCER |= 0x555;

		//Disable Main Output
	htim->Instance->BDTR &= 0xFFFF7FFF;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80009e0:	645a      	str	r2, [r3, #68]	@ 0x44
	//	htim1.Instance->BDTR &=(0<<15);
}
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <update_PWM>:
 * This function sets the duty cycles for the PWM channels.
 *
 * @param htim Pointer to the TIM_HandleTypeDef structure.
 * @param duties Duties structure containing duty cycle values.
 */
void update_PWM(TIM_HandleTypeDef *htim, Duties duties) {
 80009ee:	b480      	push	{r7}
 80009f0:	b085      	sub	sp, #20
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	60f8      	str	r0, [r7, #12]
 80009f6:	eef0 6a40 	vmov.f32	s13, s0
 80009fa:	eeb0 7a60 	vmov.f32	s14, s1
 80009fe:	eef0 7a41 	vmov.f32	s15, s2
 8000a02:	edc7 6a00 	vstr	s13, [r7]
 8000a06:	ed87 7a01 	vstr	s14, [r7, #4]
 8000a0a:	edc7 7a02 	vstr	s15, [r7, #8]


	htim->Instance->CCR1 = ((int32_t)(htim->Instance->ARR) * (1.0F-duties.Da));
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a14:	ee07 3a90 	vmov	s15, r3
 8000a18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a1c:	edd7 7a00 	vldr	s15, [r7]
 8000a20:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000a24:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a34:	ee17 2a90 	vmov	r2, s15
 8000a38:	635a      	str	r2, [r3, #52]	@ 0x34
	htim->Instance->CCR2 = ((int32_t)(htim->Instance->ARR) * (1.0F-duties.Db));
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a40:	ee07 3a90 	vmov	s15, r3
 8000a44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a48:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a4c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000a50:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a60:	ee17 2a90 	vmov	r2, s15
 8000a64:	639a      	str	r2, [r3, #56]	@ 0x38
	htim->Instance->CCR3 = ((int32_t)(htim->Instance->ARR) * (1.0F-duties.Dc));
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a6c:	ee07 3a90 	vmov	s15, r3
 8000a70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a74:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a78:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000a7c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a8c:	ee17 2a90 	vmov	r2, s15
 8000a90:	63da      	str	r2, [r3, #60]	@ 0x3c

}
 8000a92:	bf00      	nop
 8000a94:	3714      	adds	r7, #20
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
	...

08000aa0 <tasks_1ms>:
 *
 * This function is called by the TIM6 IRQ handler every millisecond.
 * It increments the millisecond counter and calls the LED handler
 * for left, right, and error LEDs.
 */
void tasks_1ms(void) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
    // Increment millisecond counter
    ms_counter++;
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad8 <tasks_1ms+0x38>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	4a0b      	ldr	r2, [pc, #44]	@ (8000ad8 <tasks_1ms+0x38>)
 8000aac:	6013      	str	r3, [r2, #0]

    // Call LED handler for left, right, and error LEDs
    handle_LED(&led_left, ms_counter);
 8000aae:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad8 <tasks_1ms+0x38>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4809      	ldr	r0, [pc, #36]	@ (8000adc <tasks_1ms+0x3c>)
 8000ab6:	f7ff feed 	bl	8000894 <handle_LED>
    handle_LED(&led_right, ms_counter);
 8000aba:	4b07      	ldr	r3, [pc, #28]	@ (8000ad8 <tasks_1ms+0x38>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4807      	ldr	r0, [pc, #28]	@ (8000ae0 <tasks_1ms+0x40>)
 8000ac2:	f7ff fee7 	bl	8000894 <handle_LED>
    handle_LED(&led_error, ms_counter);
 8000ac6:	4b04      	ldr	r3, [pc, #16]	@ (8000ad8 <tasks_1ms+0x38>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4619      	mov	r1, r3
 8000acc:	4805      	ldr	r0, [pc, #20]	@ (8000ae4 <tasks_1ms+0x44>)
 8000ace:	f7ff fee1 	bl	8000894 <handle_LED>
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200001a4 	.word	0x200001a4
 8000adc:	20000000 	.word	0x20000000
 8000ae0:	20000008 	.word	0x20000008
 8000ae4:	20000010 	.word	0x20000010

08000ae8 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000aee:	463b      	mov	r3, r7
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000afa:	4b2f      	ldr	r3, [pc, #188]	@ (8000bb8 <MX_ADC1_Init+0xd0>)
 8000afc:	4a2f      	ldr	r2, [pc, #188]	@ (8000bbc <MX_ADC1_Init+0xd4>)
 8000afe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b00:	4b2d      	ldr	r3, [pc, #180]	@ (8000bb8 <MX_ADC1_Init+0xd0>)
 8000b02:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000b06:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b08:	4b2b      	ldr	r3, [pc, #172]	@ (8000bb8 <MX_ADC1_Init+0xd0>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000bb8 <MX_ADC1_Init+0xd0>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b14:	4b28      	ldr	r3, [pc, #160]	@ (8000bb8 <MX_ADC1_Init+0xd0>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b1a:	4b27      	ldr	r3, [pc, #156]	@ (8000bb8 <MX_ADC1_Init+0xd0>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b22:	4b25      	ldr	r3, [pc, #148]	@ (8000bb8 <MX_ADC1_Init+0xd0>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b28:	4b23      	ldr	r3, [pc, #140]	@ (8000bb8 <MX_ADC1_Init+0xd0>)
 8000b2a:	4a25      	ldr	r2, [pc, #148]	@ (8000bc0 <MX_ADC1_Init+0xd8>)
 8000b2c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b2e:	4b22      	ldr	r3, [pc, #136]	@ (8000bb8 <MX_ADC1_Init+0xd0>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000b34:	4b20      	ldr	r3, [pc, #128]	@ (8000bb8 <MX_ADC1_Init+0xd0>)
 8000b36:	2203      	movs	r2, #3
 8000b38:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb8 <MX_ADC1_Init+0xd0>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b42:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb8 <MX_ADC1_Init+0xd0>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b48:	481b      	ldr	r0, [pc, #108]	@ (8000bb8 <MX_ADC1_Init+0xd0>)
 8000b4a:	f001 fb6b 	bl	8002224 <HAL_ADC_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000b54:	f000 fddc 	bl	8001710 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b60:	2300      	movs	r3, #0
 8000b62:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b64:	463b      	mov	r3, r7
 8000b66:	4619      	mov	r1, r3
 8000b68:	4813      	ldr	r0, [pc, #76]	@ (8000bb8 <MX_ADC1_Init+0xd0>)
 8000b6a:	f001 fcb7 	bl	80024dc <HAL_ADC_ConfigChannel>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b74:	f000 fdcc 	bl	8001710 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b80:	463b      	mov	r3, r7
 8000b82:	4619      	mov	r1, r3
 8000b84:	480c      	ldr	r0, [pc, #48]	@ (8000bb8 <MX_ADC1_Init+0xd0>)
 8000b86:	f001 fca9 	bl	80024dc <HAL_ADC_ConfigChannel>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000b90:	f000 fdbe 	bl	8001710 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8000b94:	2312      	movs	r3, #18
 8000b96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b9c:	463b      	mov	r3, r7
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4805      	ldr	r0, [pc, #20]	@ (8000bb8 <MX_ADC1_Init+0xd0>)
 8000ba2:	f001 fc9b 	bl	80024dc <HAL_ADC_ConfigChannel>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000bac:	f000 fdb0 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bb0:	bf00      	nop
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	200001a8 	.word	0x200001a8
 8000bbc:	40012000 	.word	0x40012000
 8000bc0:	0f000001 	.word	0x0f000001

08000bc4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bca:	463b      	mov	r3, r7
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000bd6:	4b37      	ldr	r3, [pc, #220]	@ (8000cb4 <MX_ADC2_Init+0xf0>)
 8000bd8:	4a37      	ldr	r2, [pc, #220]	@ (8000cb8 <MX_ADC2_Init+0xf4>)
 8000bda:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bdc:	4b35      	ldr	r3, [pc, #212]	@ (8000cb4 <MX_ADC2_Init+0xf0>)
 8000bde:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000be2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000be4:	4b33      	ldr	r3, [pc, #204]	@ (8000cb4 <MX_ADC2_Init+0xf0>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000bea:	4b32      	ldr	r3, [pc, #200]	@ (8000cb4 <MX_ADC2_Init+0xf0>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000bf0:	4b30      	ldr	r3, [pc, #192]	@ (8000cb4 <MX_ADC2_Init+0xf0>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000bf6:	4b2f      	ldr	r3, [pc, #188]	@ (8000cb4 <MX_ADC2_Init+0xf0>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000bfe:	4b2d      	ldr	r3, [pc, #180]	@ (8000cb4 <MX_ADC2_Init+0xf0>)
 8000c00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000c04:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000c06:	4b2b      	ldr	r3, [pc, #172]	@ (8000cb4 <MX_ADC2_Init+0xf0>)
 8000c08:	f04f 6210 	mov.w	r2, #150994944	@ 0x9000000
 8000c0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c0e:	4b29      	ldr	r3, [pc, #164]	@ (8000cb4 <MX_ADC2_Init+0xf0>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8000c14:	4b27      	ldr	r3, [pc, #156]	@ (8000cb4 <MX_ADC2_Init+0xf0>)
 8000c16:	2204      	movs	r2, #4
 8000c18:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000c1a:	4b26      	ldr	r3, [pc, #152]	@ (8000cb4 <MX_ADC2_Init+0xf0>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000c22:	4b24      	ldr	r3, [pc, #144]	@ (8000cb4 <MX_ADC2_Init+0xf0>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000c28:	4822      	ldr	r0, [pc, #136]	@ (8000cb4 <MX_ADC2_Init+0xf0>)
 8000c2a:	f001 fafb 	bl	8002224 <HAL_ADC_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8000c34:	f000 fd6c 	bl	8001710 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000c38:	2306      	movs	r3, #6
 8000c3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000c40:	2303      	movs	r3, #3
 8000c42:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c44:	463b      	mov	r3, r7
 8000c46:	4619      	mov	r1, r3
 8000c48:	481a      	ldr	r0, [pc, #104]	@ (8000cb4 <MX_ADC2_Init+0xf0>)
 8000c4a:	f001 fc47 	bl	80024dc <HAL_ADC_ConfigChannel>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8000c54:	f000 fd5c 	bl	8001710 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000c58:	2307      	movs	r3, #7
 8000c5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c60:	463b      	mov	r3, r7
 8000c62:	4619      	mov	r1, r3
 8000c64:	4813      	ldr	r0, [pc, #76]	@ (8000cb4 <MX_ADC2_Init+0xf0>)
 8000c66:	f001 fc39 	bl	80024dc <HAL_ADC_ConfigChannel>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8000c70:	f000 fd4e 	bl	8001710 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000c74:	2308      	movs	r3, #8
 8000c76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c7c:	463b      	mov	r3, r7
 8000c7e:	4619      	mov	r1, r3
 8000c80:	480c      	ldr	r0, [pc, #48]	@ (8000cb4 <MX_ADC2_Init+0xf0>)
 8000c82:	f001 fc2b 	bl	80024dc <HAL_ADC_ConfigChannel>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_ADC2_Init+0xcc>
  {
    Error_Handler();
 8000c8c:	f000 fd40 	bl	8001710 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000c90:	2309      	movs	r3, #9
 8000c92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000c94:	2304      	movs	r3, #4
 8000c96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c98:	463b      	mov	r3, r7
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4805      	ldr	r0, [pc, #20]	@ (8000cb4 <MX_ADC2_Init+0xf0>)
 8000c9e:	f001 fc1d 	bl	80024dc <HAL_ADC_ConfigChannel>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_ADC2_Init+0xe8>
  {
    Error_Handler();
 8000ca8:	f000 fd32 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000cac:	bf00      	nop
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	200001f0 	.word	0x200001f0
 8000cb8:	40012100 	.word	0x40012100

08000cbc <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cc2:	463b      	mov	r3, r7
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000cce:	4b21      	ldr	r3, [pc, #132]	@ (8000d54 <MX_ADC3_Init+0x98>)
 8000cd0:	4a21      	ldr	r2, [pc, #132]	@ (8000d58 <MX_ADC3_Init+0x9c>)
 8000cd2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cd4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d54 <MX_ADC3_Init+0x98>)
 8000cd6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000cda:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000cdc:	4b1d      	ldr	r3, [pc, #116]	@ (8000d54 <MX_ADC3_Init+0x98>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ce2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d54 <MX_ADC3_Init+0x98>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d54 <MX_ADC3_Init+0x98>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000cee:	4b19      	ldr	r3, [pc, #100]	@ (8000d54 <MX_ADC3_Init+0x98>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cf6:	4b17      	ldr	r3, [pc, #92]	@ (8000d54 <MX_ADC3_Init+0x98>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cfc:	4b15      	ldr	r3, [pc, #84]	@ (8000d54 <MX_ADC3_Init+0x98>)
 8000cfe:	4a17      	ldr	r2, [pc, #92]	@ (8000d5c <MX_ADC3_Init+0xa0>)
 8000d00:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d02:	4b14      	ldr	r3, [pc, #80]	@ (8000d54 <MX_ADC3_Init+0x98>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000d08:	4b12      	ldr	r3, [pc, #72]	@ (8000d54 <MX_ADC3_Init+0x98>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000d0e:	4b11      	ldr	r3, [pc, #68]	@ (8000d54 <MX_ADC3_Init+0x98>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d16:	4b0f      	ldr	r3, [pc, #60]	@ (8000d54 <MX_ADC3_Init+0x98>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000d1c:	480d      	ldr	r0, [pc, #52]	@ (8000d54 <MX_ADC3_Init+0x98>)
 8000d1e:	f001 fa81 	bl	8002224 <HAL_ADC_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000d28:	f000 fcf2 	bl	8001710 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000d2c:	230a      	movs	r3, #10
 8000d2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d30:	2301      	movs	r3, #1
 8000d32:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d34:	2300      	movs	r3, #0
 8000d36:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d38:	463b      	mov	r3, r7
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4805      	ldr	r0, [pc, #20]	@ (8000d54 <MX_ADC3_Init+0x98>)
 8000d3e:	f001 fbcd 	bl	80024dc <HAL_ADC_ConfigChannel>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000d48:	f000 fce2 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000d4c:	bf00      	nop
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000238 	.word	0x20000238
 8000d58:	40012200 	.word	0x40012200
 8000d5c:	0f000001 	.word	0x0f000001

08000d60 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08e      	sub	sp, #56	@ 0x38
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a7c      	ldr	r2, [pc, #496]	@ (8000f70 <HAL_ADC_MspInit+0x210>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d124      	bne.n	8000dcc <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d82:	4b7c      	ldr	r3, [pc, #496]	@ (8000f74 <HAL_ADC_MspInit+0x214>)
 8000d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d86:	4a7b      	ldr	r2, [pc, #492]	@ (8000f74 <HAL_ADC_MspInit+0x214>)
 8000d88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d8e:	4b79      	ldr	r3, [pc, #484]	@ (8000f74 <HAL_ADC_MspInit+0x214>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d96:	623b      	str	r3, [r7, #32]
 8000d98:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	4b76      	ldr	r3, [pc, #472]	@ (8000f74 <HAL_ADC_MspInit+0x214>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	4a75      	ldr	r2, [pc, #468]	@ (8000f74 <HAL_ADC_MspInit+0x214>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da6:	4b73      	ldr	r3, [pc, #460]	@ (8000f74 <HAL_ADC_MspInit+0x214>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	61fb      	str	r3, [r7, #28]
 8000db0:	69fb      	ldr	r3, [r7, #28]
    PA0/WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ia_L_Pin|ib_L_Pin|ic_L_Pin|VDC_L_Pin;
 8000db2:	230f      	movs	r3, #15
 8000db4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000db6:	2303      	movs	r3, #3
 8000db8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	486c      	ldr	r0, [pc, #432]	@ (8000f78 <HAL_ADC_MspInit+0x218>)
 8000dc6:	f002 fef7 	bl	8003bb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000dca:	e0cc      	b.n	8000f66 <HAL_ADC_MspInit+0x206>
  else if(adcHandle->Instance==ADC2)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a6a      	ldr	r2, [pc, #424]	@ (8000f7c <HAL_ADC_MspInit+0x21c>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d16e      	bne.n	8000eb4 <HAL_ADC_MspInit+0x154>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000dd6:	4b67      	ldr	r3, [pc, #412]	@ (8000f74 <HAL_ADC_MspInit+0x214>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dda:	4a66      	ldr	r2, [pc, #408]	@ (8000f74 <HAL_ADC_MspInit+0x214>)
 8000ddc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000de0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000de2:	4b64      	ldr	r3, [pc, #400]	@ (8000f74 <HAL_ADC_MspInit+0x214>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000dea:	61bb      	str	r3, [r7, #24]
 8000dec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dee:	4b61      	ldr	r3, [pc, #388]	@ (8000f74 <HAL_ADC_MspInit+0x214>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	4a60      	ldr	r2, [pc, #384]	@ (8000f74 <HAL_ADC_MspInit+0x214>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfa:	4b5e      	ldr	r3, [pc, #376]	@ (8000f74 <HAL_ADC_MspInit+0x214>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	617b      	str	r3, [r7, #20]
 8000e04:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e06:	4b5b      	ldr	r3, [pc, #364]	@ (8000f74 <HAL_ADC_MspInit+0x214>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0a:	4a5a      	ldr	r2, [pc, #360]	@ (8000f74 <HAL_ADC_MspInit+0x214>)
 8000e0c:	f043 0302 	orr.w	r3, r3, #2
 8000e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e12:	4b58      	ldr	r3, [pc, #352]	@ (8000f74 <HAL_ADC_MspInit+0x214>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ia_R_Pin|ib_R_Pin;
 8000e1e:	23c0      	movs	r3, #192	@ 0xc0
 8000e20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e22:	2303      	movs	r3, #3
 8000e24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4851      	ldr	r0, [pc, #324]	@ (8000f78 <HAL_ADC_MspInit+0x218>)
 8000e32:	f002 fec1 	bl	8003bb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ic_R_Pin|VDC_R_Pin;
 8000e36:	2303      	movs	r3, #3
 8000e38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e46:	4619      	mov	r1, r3
 8000e48:	484d      	ldr	r0, [pc, #308]	@ (8000f80 <HAL_ADC_MspInit+0x220>)
 8000e4a:	f002 feb5 	bl	8003bb8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8000e4e:	4b4d      	ldr	r3, [pc, #308]	@ (8000f84 <HAL_ADC_MspInit+0x224>)
 8000e50:	4a4d      	ldr	r2, [pc, #308]	@ (8000f88 <HAL_ADC_MspInit+0x228>)
 8000e52:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8000e54:	4b4b      	ldr	r3, [pc, #300]	@ (8000f84 <HAL_ADC_MspInit+0x224>)
 8000e56:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e5a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e5c:	4b49      	ldr	r3, [pc, #292]	@ (8000f84 <HAL_ADC_MspInit+0x224>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e62:	4b48      	ldr	r3, [pc, #288]	@ (8000f84 <HAL_ADC_MspInit+0x224>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000e68:	4b46      	ldr	r3, [pc, #280]	@ (8000f84 <HAL_ADC_MspInit+0x224>)
 8000e6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e6e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e70:	4b44      	ldr	r3, [pc, #272]	@ (8000f84 <HAL_ADC_MspInit+0x224>)
 8000e72:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e76:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e78:	4b42      	ldr	r3, [pc, #264]	@ (8000f84 <HAL_ADC_MspInit+0x224>)
 8000e7a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e7e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000e80:	4b40      	ldr	r3, [pc, #256]	@ (8000f84 <HAL_ADC_MspInit+0x224>)
 8000e82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e86:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000e88:	4b3e      	ldr	r3, [pc, #248]	@ (8000f84 <HAL_ADC_MspInit+0x224>)
 8000e8a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e8e:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e90:	4b3c      	ldr	r3, [pc, #240]	@ (8000f84 <HAL_ADC_MspInit+0x224>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000e96:	483b      	ldr	r0, [pc, #236]	@ (8000f84 <HAL_ADC_MspInit+0x224>)
 8000e98:	f002 fb16 	bl	80034c8 <HAL_DMA_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <HAL_ADC_MspInit+0x146>
      Error_Handler();
 8000ea2:	f000 fc35 	bl	8001710 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a36      	ldr	r2, [pc, #216]	@ (8000f84 <HAL_ADC_MspInit+0x224>)
 8000eaa:	639a      	str	r2, [r3, #56]	@ 0x38
 8000eac:	4a35      	ldr	r2, [pc, #212]	@ (8000f84 <HAL_ADC_MspInit+0x224>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000eb2:	e058      	b.n	8000f66 <HAL_ADC_MspInit+0x206>
  else if(adcHandle->Instance==ADC3)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a34      	ldr	r2, [pc, #208]	@ (8000f8c <HAL_ADC_MspInit+0x22c>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d153      	bne.n	8000f66 <HAL_ADC_MspInit+0x206>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000ebe:	4b2d      	ldr	r3, [pc, #180]	@ (8000f74 <HAL_ADC_MspInit+0x214>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec2:	4a2c      	ldr	r2, [pc, #176]	@ (8000f74 <HAL_ADC_MspInit+0x214>)
 8000ec4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ec8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eca:	4b2a      	ldr	r3, [pc, #168]	@ (8000f74 <HAL_ADC_MspInit+0x214>)
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ece:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed6:	4b27      	ldr	r3, [pc, #156]	@ (8000f74 <HAL_ADC_MspInit+0x214>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	4a26      	ldr	r2, [pc, #152]	@ (8000f74 <HAL_ADC_MspInit+0x214>)
 8000edc:	f043 0304 	orr.w	r3, r3, #4
 8000ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee2:	4b24      	ldr	r3, [pc, #144]	@ (8000f74 <HAL_ADC_MspInit+0x214>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee6:	f003 0304 	and.w	r3, r3, #4
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Tinv_L_Pin|Tinv_R_Pin|Tmot_L_Pin|Tmot_R_Pin;
 8000eee:	230f      	movs	r3, #15
 8000ef0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000efa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000efe:	4619      	mov	r1, r3
 8000f00:	4823      	ldr	r0, [pc, #140]	@ (8000f90 <HAL_ADC_MspInit+0x230>)
 8000f02:	f002 fe59 	bl	8003bb8 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8000f06:	4b23      	ldr	r3, [pc, #140]	@ (8000f94 <HAL_ADC_MspInit+0x234>)
 8000f08:	4a23      	ldr	r2, [pc, #140]	@ (8000f98 <HAL_ADC_MspInit+0x238>)
 8000f0a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000f0c:	4b21      	ldr	r3, [pc, #132]	@ (8000f94 <HAL_ADC_MspInit+0x234>)
 8000f0e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000f12:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f14:	4b1f      	ldr	r3, [pc, #124]	@ (8000f94 <HAL_ADC_MspInit+0x234>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000f94 <HAL_ADC_MspInit+0x234>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000f20:	4b1c      	ldr	r3, [pc, #112]	@ (8000f94 <HAL_ADC_MspInit+0x234>)
 8000f22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f26:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f28:	4b1a      	ldr	r3, [pc, #104]	@ (8000f94 <HAL_ADC_MspInit+0x234>)
 8000f2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f2e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f30:	4b18      	ldr	r3, [pc, #96]	@ (8000f94 <HAL_ADC_MspInit+0x234>)
 8000f32:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f36:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8000f38:	4b16      	ldr	r3, [pc, #88]	@ (8000f94 <HAL_ADC_MspInit+0x234>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000f3e:	4b15      	ldr	r3, [pc, #84]	@ (8000f94 <HAL_ADC_MspInit+0x234>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f44:	4b13      	ldr	r3, [pc, #76]	@ (8000f94 <HAL_ADC_MspInit+0x234>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000f4a:	4812      	ldr	r0, [pc, #72]	@ (8000f94 <HAL_ADC_MspInit+0x234>)
 8000f4c:	f002 fabc 	bl	80034c8 <HAL_DMA_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <HAL_ADC_MspInit+0x1fa>
      Error_Handler();
 8000f56:	f000 fbdb 	bl	8001710 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f94 <HAL_ADC_MspInit+0x234>)
 8000f5e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f60:	4a0c      	ldr	r2, [pc, #48]	@ (8000f94 <HAL_ADC_MspInit+0x234>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000f66:	bf00      	nop
 8000f68:	3738      	adds	r7, #56	@ 0x38
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40012000 	.word	0x40012000
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40020000 	.word	0x40020000
 8000f7c:	40012100 	.word	0x40012100
 8000f80:	40020400 	.word	0x40020400
 8000f84:	20000280 	.word	0x20000280
 8000f88:	40026440 	.word	0x40026440
 8000f8c:	40012200 	.word	0x40012200
 8000f90:	40020800 	.word	0x40020800
 8000f94:	200002e0 	.word	0x200002e0
 8000f98:	40026428 	.word	0x40026428

08000f9c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000fa0:	4b17      	ldr	r3, [pc, #92]	@ (8001000 <MX_CAN1_Init+0x64>)
 8000fa2:	4a18      	ldr	r2, [pc, #96]	@ (8001004 <MX_CAN1_Init+0x68>)
 8000fa4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 8000fa6:	4b16      	ldr	r3, [pc, #88]	@ (8001000 <MX_CAN1_Init+0x64>)
 8000fa8:	220c      	movs	r2, #12
 8000faa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000fac:	4b14      	ldr	r3, [pc, #80]	@ (8001000 <MX_CAN1_Init+0x64>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fb2:	4b13      	ldr	r3, [pc, #76]	@ (8001000 <MX_CAN1_Init+0x64>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 8000fb8:	4b11      	ldr	r3, [pc, #68]	@ (8001000 <MX_CAN1_Init+0x64>)
 8000fba:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000fbe:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8001000 <MX_CAN1_Init+0x64>)
 8000fc2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000fc6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000fc8:	4b0d      	ldr	r3, [pc, #52]	@ (8001000 <MX_CAN1_Init+0x64>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000fce:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <MX_CAN1_Init+0x64>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8001000 <MX_CAN1_Init+0x64>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000fda:	4b09      	ldr	r3, [pc, #36]	@ (8001000 <MX_CAN1_Init+0x64>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000fe0:	4b07      	ldr	r3, [pc, #28]	@ (8001000 <MX_CAN1_Init+0x64>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000fe6:	4b06      	ldr	r3, [pc, #24]	@ (8001000 <MX_CAN1_Init+0x64>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000fec:	4804      	ldr	r0, [pc, #16]	@ (8001000 <MX_CAN1_Init+0x64>)
 8000fee:	f001 fd47 	bl	8002a80 <HAL_CAN_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000ff8:	f000 fb8a 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000340 	.word	0x20000340
 8001004:	40006400 	.word	0x40006400

08001008 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	@ 0x28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a1f      	ldr	r2, [pc, #124]	@ (80010a4 <HAL_CAN_MspInit+0x9c>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d137      	bne.n	800109a <HAL_CAN_MspInit+0x92>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800102a:	4b1f      	ldr	r3, [pc, #124]	@ (80010a8 <HAL_CAN_MspInit+0xa0>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102e:	4a1e      	ldr	r2, [pc, #120]	@ (80010a8 <HAL_CAN_MspInit+0xa0>)
 8001030:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001034:	6413      	str	r3, [r2, #64]	@ 0x40
 8001036:	4b1c      	ldr	r3, [pc, #112]	@ (80010a8 <HAL_CAN_MspInit+0xa0>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800103e:	613b      	str	r3, [r7, #16]
 8001040:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001042:	4b19      	ldr	r3, [pc, #100]	@ (80010a8 <HAL_CAN_MspInit+0xa0>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001046:	4a18      	ldr	r2, [pc, #96]	@ (80010a8 <HAL_CAN_MspInit+0xa0>)
 8001048:	f043 0308 	orr.w	r3, r3, #8
 800104c:	6313      	str	r3, [r2, #48]	@ 0x30
 800104e:	4b16      	ldr	r3, [pc, #88]	@ (80010a8 <HAL_CAN_MspInit+0xa0>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001052:	f003 0308 	and.w	r3, r3, #8
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800105a:	2303      	movs	r3, #3
 800105c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001066:	2303      	movs	r3, #3
 8001068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800106a:	2309      	movs	r3, #9
 800106c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	4619      	mov	r1, r3
 8001074:	480d      	ldr	r0, [pc, #52]	@ (80010ac <HAL_CAN_MspInit+0xa4>)
 8001076:	f002 fd9f 	bl	8003bb8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2100      	movs	r1, #0
 800107e:	2014      	movs	r0, #20
 8001080:	f002 f90d 	bl	800329e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001084:	2014      	movs	r0, #20
 8001086:	f002 f926 	bl	80032d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	2100      	movs	r1, #0
 800108e:	2015      	movs	r0, #21
 8001090:	f002 f905 	bl	800329e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001094:	2015      	movs	r0, #21
 8001096:	f002 f91e 	bl	80032d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800109a:	bf00      	nop
 800109c:	3728      	adds	r7, #40	@ 0x28
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40006400 	.word	0x40006400
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40020c00 	.word	0x40020c00

080010b0 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80010b6:	463b      	mov	r3, r7
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80010be:	4b0f      	ldr	r3, [pc, #60]	@ (80010fc <MX_DAC_Init+0x4c>)
 80010c0:	4a0f      	ldr	r2, [pc, #60]	@ (8001100 <MX_DAC_Init+0x50>)
 80010c2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80010c4:	480d      	ldr	r0, [pc, #52]	@ (80010fc <MX_DAC_Init+0x4c>)
 80010c6:	f002 f920 	bl	800330a <HAL_DAC_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80010d0:	f000 fb1e 	bl	8001710 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80010d8:	2300      	movs	r3, #0
 80010da:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80010dc:	463b      	mov	r3, r7
 80010de:	2200      	movs	r2, #0
 80010e0:	4619      	mov	r1, r3
 80010e2:	4806      	ldr	r0, [pc, #24]	@ (80010fc <MX_DAC_Init+0x4c>)
 80010e4:	f002 f997 	bl	8003416 <HAL_DAC_ConfigChannel>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80010ee:	f000 fb0f 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000368 	.word	0x20000368
 8001100:	40007400 	.word	0x40007400

08001104 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	@ 0x28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a19      	ldr	r2, [pc, #100]	@ (8001188 <HAL_DAC_MspInit+0x84>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d12b      	bne.n	800117e <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001126:	4b19      	ldr	r3, [pc, #100]	@ (800118c <HAL_DAC_MspInit+0x88>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112a:	4a18      	ldr	r2, [pc, #96]	@ (800118c <HAL_DAC_MspInit+0x88>)
 800112c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001130:	6413      	str	r3, [r2, #64]	@ 0x40
 8001132:	4b16      	ldr	r3, [pc, #88]	@ (800118c <HAL_DAC_MspInit+0x88>)
 8001134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001136:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113e:	4b13      	ldr	r3, [pc, #76]	@ (800118c <HAL_DAC_MspInit+0x88>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	4a12      	ldr	r2, [pc, #72]	@ (800118c <HAL_DAC_MspInit+0x88>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6313      	str	r3, [r2, #48]	@ 0x30
 800114a:	4b10      	ldr	r3, [pc, #64]	@ (800118c <HAL_DAC_MspInit+0x88>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = DAC_Pin;
 8001156:	2310      	movs	r3, #16
 8001158:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800115a:	2303      	movs	r3, #3
 800115c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC_GPIO_Port, &GPIO_InitStruct);
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4619      	mov	r1, r3
 8001168:	4809      	ldr	r0, [pc, #36]	@ (8001190 <HAL_DAC_MspInit+0x8c>)
 800116a:	f002 fd25 	bl	8003bb8 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2100      	movs	r1, #0
 8001172:	2036      	movs	r0, #54	@ 0x36
 8001174:	f002 f893 	bl	800329e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001178:	2036      	movs	r0, #54	@ 0x36
 800117a:	f002 f8ac 	bl	80032d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800117e:	bf00      	nop
 8001180:	3728      	adds	r7, #40	@ 0x28
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40007400 	.word	0x40007400
 800118c:	40023800 	.word	0x40023800
 8001190:	40020000 	.word	0x40020000

08001194 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800119a:	4b10      	ldr	r3, [pc, #64]	@ (80011dc <MX_DMA_Init+0x48>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	4a0f      	ldr	r2, [pc, #60]	@ (80011dc <MX_DMA_Init+0x48>)
 80011a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a6:	4b0d      	ldr	r3, [pc, #52]	@ (80011dc <MX_DMA_Init+0x48>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2100      	movs	r1, #0
 80011b6:	2039      	movs	r0, #57	@ 0x39
 80011b8:	f002 f871 	bl	800329e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80011bc:	2039      	movs	r0, #57	@ 0x39
 80011be:	f002 f88a 	bl	80032d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2100      	movs	r1, #0
 80011c6:	203a      	movs	r0, #58	@ 0x3a
 80011c8:	f002 f869 	bl	800329e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80011cc:	203a      	movs	r0, #58	@ 0x3a
 80011ce:	f002 f882 	bl	80032d6 <HAL_NVIC_EnableIRQ>

}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40023800 	.word	0x40023800

080011e0 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08c      	sub	sp, #48	@ 0x30
 80011e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e6:	f107 031c 	add.w	r3, r7, #28
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
 80011f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011f6:	4b87      	ldr	r3, [pc, #540]	@ (8001414 <MX_GPIO_Init+0x234>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	4a86      	ldr	r2, [pc, #536]	@ (8001414 <MX_GPIO_Init+0x234>)
 80011fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001200:	6313      	str	r3, [r2, #48]	@ 0x30
 8001202:	4b84      	ldr	r3, [pc, #528]	@ (8001414 <MX_GPIO_Init+0x234>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800120a:	61bb      	str	r3, [r7, #24]
 800120c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800120e:	4b81      	ldr	r3, [pc, #516]	@ (8001414 <MX_GPIO_Init+0x234>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	4a80      	ldr	r2, [pc, #512]	@ (8001414 <MX_GPIO_Init+0x234>)
 8001214:	f043 0304 	orr.w	r3, r3, #4
 8001218:	6313      	str	r3, [r2, #48]	@ 0x30
 800121a:	4b7e      	ldr	r3, [pc, #504]	@ (8001414 <MX_GPIO_Init+0x234>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	f003 0304 	and.w	r3, r3, #4
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001226:	4b7b      	ldr	r3, [pc, #492]	@ (8001414 <MX_GPIO_Init+0x234>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	4a7a      	ldr	r2, [pc, #488]	@ (8001414 <MX_GPIO_Init+0x234>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6313      	str	r3, [r2, #48]	@ 0x30
 8001232:	4b78      	ldr	r3, [pc, #480]	@ (8001414 <MX_GPIO_Init+0x234>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123e:	4b75      	ldr	r3, [pc, #468]	@ (8001414 <MX_GPIO_Init+0x234>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	4a74      	ldr	r2, [pc, #464]	@ (8001414 <MX_GPIO_Init+0x234>)
 8001244:	f043 0302 	orr.w	r3, r3, #2
 8001248:	6313      	str	r3, [r2, #48]	@ 0x30
 800124a:	4b72      	ldr	r3, [pc, #456]	@ (8001414 <MX_GPIO_Init+0x234>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001256:	4b6f      	ldr	r3, [pc, #444]	@ (8001414 <MX_GPIO_Init+0x234>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	4a6e      	ldr	r2, [pc, #440]	@ (8001414 <MX_GPIO_Init+0x234>)
 800125c:	f043 0310 	orr.w	r3, r3, #16
 8001260:	6313      	str	r3, [r2, #48]	@ 0x30
 8001262:	4b6c      	ldr	r3, [pc, #432]	@ (8001414 <MX_GPIO_Init+0x234>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	f003 0310 	and.w	r3, r3, #16
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800126e:	4b69      	ldr	r3, [pc, #420]	@ (8001414 <MX_GPIO_Init+0x234>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	4a68      	ldr	r2, [pc, #416]	@ (8001414 <MX_GPIO_Init+0x234>)
 8001274:	f043 0308 	orr.w	r3, r3, #8
 8001278:	6313      	str	r3, [r2, #48]	@ 0x30
 800127a:	4b66      	ldr	r3, [pc, #408]	@ (8001414 <MX_GPIO_Init+0x234>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	f003 0308 	and.w	r3, r3, #8
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_R_GPIO_Port, ENABLE_R_Pin, GPIO_PIN_RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	2104      	movs	r1, #4
 800128a:	4863      	ldr	r0, [pc, #396]	@ (8001418 <MX_GPIO_Init+0x238>)
 800128c:	f002 fe40 	bl	8003f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_L_GPIO_Port, ENABLE_L_Pin, GPIO_PIN_RESET);
 8001290:	2200      	movs	r2, #0
 8001292:	2180      	movs	r1, #128	@ 0x80
 8001294:	4861      	ldr	r0, [pc, #388]	@ (800141c <MX_GPIO_Init+0x23c>)
 8001296:	f002 fe3b 	bl	8003f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_LEFT_Pin|LED_RIGHT_Pin|LED_ERR_Pin, GPIO_PIN_RESET);
 800129a:	2200      	movs	r2, #0
 800129c:	2170      	movs	r1, #112	@ 0x70
 800129e:	4860      	ldr	r0, [pc, #384]	@ (8001420 <MX_GPIO_Init+0x240>)
 80012a0:	f002 fe36 	bl	8003f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SC_det_Pin;
 80012a4:	2310      	movs	r3, #16
 80012a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a8:	2300      	movs	r3, #0
 80012aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SC_det_GPIO_Port, &GPIO_InitStruct);
 80012b0:	f107 031c 	add.w	r3, r7, #28
 80012b4:	4619      	mov	r1, r3
 80012b6:	485b      	ldr	r0, [pc, #364]	@ (8001424 <MX_GPIO_Init+0x244>)
 80012b8:	f002 fc7e 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_R_Pin;
 80012bc:	2304      	movs	r3, #4
 80012be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c0:	2301      	movs	r3, #1
 80012c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c8:	2300      	movs	r3, #0
 80012ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ENABLE_R_GPIO_Port, &GPIO_InitStruct);
 80012cc:	f107 031c 	add.w	r3, r7, #28
 80012d0:	4619      	mov	r1, r3
 80012d2:	4851      	ldr	r0, [pc, #324]	@ (8001418 <MX_GPIO_Init+0x238>)
 80012d4:	f002 fc70 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_L_Pin;
 80012d8:	2380      	movs	r3, #128	@ 0x80
 80012da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012dc:	2301      	movs	r3, #1
 80012de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	2300      	movs	r3, #0
 80012e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ENABLE_L_GPIO_Port, &GPIO_InitStruct);
 80012e8:	f107 031c 	add.w	r3, r7, #28
 80012ec:	4619      	mov	r1, r3
 80012ee:	484b      	ldr	r0, [pc, #300]	@ (800141c <MX_GPIO_Init+0x23c>)
 80012f0:	f002 fc62 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = WRN_L_Pin|WRN_R_Pin;
 80012f4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80012f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fa:	2300      	movs	r3, #0
 80012fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	4619      	mov	r1, r3
 8001308:	4844      	ldr	r0, [pc, #272]	@ (800141c <MX_GPIO_Init+0x23c>)
 800130a:	f002 fc55 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Z_R_Pin;
 800130e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001312:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001314:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001318:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Z_R_GPIO_Port, &GPIO_InitStruct);
 800131e:	f107 031c 	add.w	r3, r7, #28
 8001322:	4619      	mov	r1, r3
 8001324:	483c      	ldr	r0, [pc, #240]	@ (8001418 <MX_GPIO_Init+0x238>)
 8001326:	f002 fc47 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Z_L_Pin;
 800132a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800132e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001330:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001334:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Z_L_GPIO_Port, &GPIO_InitStruct);
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	4619      	mov	r1, r3
 8001340:	4837      	ldr	r0, [pc, #220]	@ (8001420 <MX_GPIO_Init+0x240>)
 8001342:	f002 fc39 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIP_R_Pin;
 8001346:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800134a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800134c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001350:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TRIP_R_GPIO_Port, &GPIO_InitStruct);
 8001356:	f107 031c 	add.w	r3, r7, #28
 800135a:	4619      	mov	r1, r3
 800135c:	4831      	ldr	r0, [pc, #196]	@ (8001424 <MX_GPIO_Init+0x244>)
 800135e:	f002 fc2b 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIP_L_Pin;
 8001362:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001366:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001368:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800136c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TRIP_L_GPIO_Port, &GPIO_InitStruct);
 8001372:	f107 031c 	add.w	r3, r7, #28
 8001376:	4619      	mov	r1, r3
 8001378:	482b      	ldr	r0, [pc, #172]	@ (8001428 <MX_GPIO_Init+0x248>)
 800137a:	f002 fc1d 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800137e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001382:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001384:	2300      	movs	r3, #0
 8001386:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138c:	f107 031c 	add.w	r3, r7, #28
 8001390:	4619      	mov	r1, r3
 8001392:	4825      	ldr	r0, [pc, #148]	@ (8001428 <MX_GPIO_Init+0x248>)
 8001394:	f002 fc10 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001398:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800139c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a6:	2303      	movs	r3, #3
 80013a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013aa:	230a      	movs	r3, #10
 80013ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ae:	f107 031c 	add.w	r3, r7, #28
 80013b2:	4619      	mov	r1, r3
 80013b4:	481c      	ldr	r0, [pc, #112]	@ (8001428 <MX_GPIO_Init+0x248>)
 80013b6:	f002 fbff 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIR_Pin;
 80013ba:	2308      	movs	r3, #8
 80013bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013be:	2300      	movs	r3, #0
 80013c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 80013c6:	f107 031c 	add.w	r3, r7, #28
 80013ca:	4619      	mov	r1, r3
 80013cc:	4814      	ldr	r0, [pc, #80]	@ (8001420 <MX_GPIO_Init+0x240>)
 80013ce:	f002 fbf3 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LED_LEFT_Pin|LED_RIGHT_Pin;
 80013d2:	2330      	movs	r3, #48	@ 0x30
 80013d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d6:	2301      	movs	r3, #1
 80013d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013de:	2300      	movs	r3, #0
 80013e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013e2:	f107 031c 	add.w	r3, r7, #28
 80013e6:	4619      	mov	r1, r3
 80013e8:	480d      	ldr	r0, [pc, #52]	@ (8001420 <MX_GPIO_Init+0x240>)
 80013ea:	f002 fbe5 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_ERR_Pin;
 80013ee:	2340      	movs	r3, #64	@ 0x40
 80013f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f2:	2301      	movs	r3, #1
 80013f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013f6:	2302      	movs	r3, #2
 80013f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_ERR_GPIO_Port, &GPIO_InitStruct);
 80013fe:	f107 031c 	add.w	r3, r7, #28
 8001402:	4619      	mov	r1, r3
 8001404:	4806      	ldr	r0, [pc, #24]	@ (8001420 <MX_GPIO_Init+0x240>)
 8001406:	f002 fbd7 	bl	8003bb8 <HAL_GPIO_Init>

}
 800140a:	bf00      	nop
 800140c:	3730      	adds	r7, #48	@ 0x30
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40023800 	.word	0x40023800
 8001418:	40020400 	.word	0x40020400
 800141c:	40021000 	.word	0x40021000
 8001420:	40020c00 	.word	0x40020c00
 8001424:	40020800 	.word	0x40020800
 8001428:	40020000 	.word	0x40020000

0800142c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001430:	4b1b      	ldr	r3, [pc, #108]	@ (80014a0 <MX_I2C1_Init+0x74>)
 8001432:	4a1c      	ldr	r2, [pc, #112]	@ (80014a4 <MX_I2C1_Init+0x78>)
 8001434:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8001436:	4b1a      	ldr	r3, [pc, #104]	@ (80014a0 <MX_I2C1_Init+0x74>)
 8001438:	4a1b      	ldr	r2, [pc, #108]	@ (80014a8 <MX_I2C1_Init+0x7c>)
 800143a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800143c:	4b18      	ldr	r3, [pc, #96]	@ (80014a0 <MX_I2C1_Init+0x74>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001442:	4b17      	ldr	r3, [pc, #92]	@ (80014a0 <MX_I2C1_Init+0x74>)
 8001444:	2201      	movs	r2, #1
 8001446:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001448:	4b15      	ldr	r3, [pc, #84]	@ (80014a0 <MX_I2C1_Init+0x74>)
 800144a:	2200      	movs	r2, #0
 800144c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800144e:	4b14      	ldr	r3, [pc, #80]	@ (80014a0 <MX_I2C1_Init+0x74>)
 8001450:	2200      	movs	r2, #0
 8001452:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001454:	4b12      	ldr	r3, [pc, #72]	@ (80014a0 <MX_I2C1_Init+0x74>)
 8001456:	2200      	movs	r2, #0
 8001458:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800145a:	4b11      	ldr	r3, [pc, #68]	@ (80014a0 <MX_I2C1_Init+0x74>)
 800145c:	2200      	movs	r2, #0
 800145e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001460:	4b0f      	ldr	r3, [pc, #60]	@ (80014a0 <MX_I2C1_Init+0x74>)
 8001462:	2200      	movs	r2, #0
 8001464:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001466:	480e      	ldr	r0, [pc, #56]	@ (80014a0 <MX_I2C1_Init+0x74>)
 8001468:	f002 fd6c 	bl	8003f44 <HAL_I2C_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001472:	f000 f94d 	bl	8001710 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001476:	2100      	movs	r1, #0
 8001478:	4809      	ldr	r0, [pc, #36]	@ (80014a0 <MX_I2C1_Init+0x74>)
 800147a:	f002 fdf3 	bl	8004064 <HAL_I2CEx_ConfigAnalogFilter>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001484:	f000 f944 	bl	8001710 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001488:	2100      	movs	r1, #0
 800148a:	4805      	ldr	r0, [pc, #20]	@ (80014a0 <MX_I2C1_Init+0x74>)
 800148c:	f002 fe35 	bl	80040fa <HAL_I2CEx_ConfigDigitalFilter>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001496:	f000 f93b 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	2000037c 	.word	0x2000037c
 80014a4:	40005400 	.word	0x40005400
 80014a8:	20404768 	.word	0x20404768

080014ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b0ae      	sub	sp, #184	@ 0xb8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	2290      	movs	r2, #144	@ 0x90
 80014ca:	2100      	movs	r1, #0
 80014cc:	4618      	mov	r0, r3
 80014ce:	f005 fb53 	bl	8006b78 <memset>
  if(i2cHandle->Instance==I2C1)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a21      	ldr	r2, [pc, #132]	@ (800155c <HAL_I2C_MspInit+0xb0>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d13b      	bne.n	8001554 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80014e0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80014e2:	2300      	movs	r3, #0
 80014e4:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4618      	mov	r0, r3
 80014ec:	f003 fb02 	bl	8004af4 <HAL_RCCEx_PeriphCLKConfig>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80014f6:	f000 f90b 	bl	8001710 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fa:	4b19      	ldr	r3, [pc, #100]	@ (8001560 <HAL_I2C_MspInit+0xb4>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fe:	4a18      	ldr	r2, [pc, #96]	@ (8001560 <HAL_I2C_MspInit+0xb4>)
 8001500:	f043 0302 	orr.w	r3, r3, #2
 8001504:	6313      	str	r3, [r2, #48]	@ 0x30
 8001506:	4b16      	ldr	r3, [pc, #88]	@ (8001560 <HAL_I2C_MspInit+0xb4>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001512:	23c0      	movs	r3, #192	@ 0xc0
 8001514:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001518:	2312      	movs	r3, #18
 800151a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001524:	2303      	movs	r3, #3
 8001526:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800152a:	2304      	movs	r3, #4
 800152c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001530:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001534:	4619      	mov	r1, r3
 8001536:	480b      	ldr	r0, [pc, #44]	@ (8001564 <HAL_I2C_MspInit+0xb8>)
 8001538:	f002 fb3e 	bl	8003bb8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800153c:	4b08      	ldr	r3, [pc, #32]	@ (8001560 <HAL_I2C_MspInit+0xb4>)
 800153e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001540:	4a07      	ldr	r2, [pc, #28]	@ (8001560 <HAL_I2C_MspInit+0xb4>)
 8001542:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001546:	6413      	str	r3, [r2, #64]	@ 0x40
 8001548:	4b05      	ldr	r3, [pc, #20]	@ (8001560 <HAL_I2C_MspInit+0xb4>)
 800154a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001554:	bf00      	nop
 8001556:	37b8      	adds	r7, #184	@ 0xb8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40005400 	.word	0x40005400
 8001560:	40023800 	.word	0x40023800
 8001564:	40020400 	.word	0x40020400

08001568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800156e:	f000 fdfc 	bl	800216a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001572:	f000 f85f 	bl	8001634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001576:	f7ff fe33 	bl	80011e0 <MX_GPIO_Init>
  MX_DMA_Init();
 800157a:	f7ff fe0b 	bl	8001194 <MX_DMA_Init>
  MX_ADC1_Init();
 800157e:	f7ff fab3 	bl	8000ae8 <MX_ADC1_Init>
  MX_CAN1_Init();
 8001582:	f7ff fd0b 	bl	8000f9c <MX_CAN1_Init>
  MX_USB_OTG_FS_USB_Init();
 8001586:	f000 fdbf 	bl	8002108 <MX_USB_OTG_FS_USB_Init>
  MX_ADC2_Init();
 800158a:	f7ff fb1b 	bl	8000bc4 <MX_ADC2_Init>
  MX_ADC3_Init();
 800158e:	f7ff fb95 	bl	8000cbc <MX_ADC3_Init>
  MX_DAC_Init();
 8001592:	f7ff fd8d 	bl	80010b0 <MX_DAC_Init>
  MX_I2C1_Init();
 8001596:	f7ff ff49 	bl	800142c <MX_I2C1_Init>
  MX_TIM1_Init();
 800159a:	f000 f9a3 	bl	80018e4 <MX_TIM1_Init>
  MX_TIM8_Init();
 800159e:	f000 fb5f 	bl	8001c60 <MX_TIM8_Init>
  MX_TIM2_Init();
 80015a2:	f000 fa69 	bl	8001a78 <MX_TIM2_Init>
  MX_TIM4_Init();
 80015a6:	f000 fac5 	bl	8001b34 <MX_TIM4_Init>
  MX_TIM6_Init();
 80015aa:	f000 fb23 	bl	8001bf4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  // Create inverter structures and assign the peripherals
  initialize_inverter(&invLeft, &led_left, ENABLE_L_GPIO_Port, ENABLE_L_Pin, &htim1, &hadc2);
 80015ae:	4b14      	ldr	r3, [pc, #80]	@ (8001600 <main+0x98>)
 80015b0:	9301      	str	r3, [sp, #4]
 80015b2:	4b14      	ldr	r3, [pc, #80]	@ (8001604 <main+0x9c>)
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	2380      	movs	r3, #128	@ 0x80
 80015b8:	4a13      	ldr	r2, [pc, #76]	@ (8001608 <main+0xa0>)
 80015ba:	4914      	ldr	r1, [pc, #80]	@ (800160c <main+0xa4>)
 80015bc:	4814      	ldr	r0, [pc, #80]	@ (8001610 <main+0xa8>)
 80015be:	f7ff f8c1 	bl	8000744 <initialize_inverter>
  initialize_inverter(&invRight, &led_right, ENABLE_R_GPIO_Port, ENABLE_R_Pin, &htim8, &hadc1);
 80015c2:	4b14      	ldr	r3, [pc, #80]	@ (8001614 <main+0xac>)
 80015c4:	9301      	str	r3, [sp, #4]
 80015c6:	4b14      	ldr	r3, [pc, #80]	@ (8001618 <main+0xb0>)
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	2304      	movs	r3, #4
 80015cc:	4a13      	ldr	r2, [pc, #76]	@ (800161c <main+0xb4>)
 80015ce:	4914      	ldr	r1, [pc, #80]	@ (8001620 <main+0xb8>)
 80015d0:	4814      	ldr	r0, [pc, #80]	@ (8001624 <main+0xbc>)
 80015d2:	f7ff f8b7 	bl	8000744 <initialize_inverter>

  HAL_ADC_Start_DMA(&hadc2, (uint32_t *) ADC_raw_L,4); // Starts ADC DMA
 80015d6:	2204      	movs	r2, #4
 80015d8:	4913      	ldr	r1, [pc, #76]	@ (8001628 <main+0xc0>)
 80015da:	4809      	ldr	r0, [pc, #36]	@ (8001600 <main+0x98>)
 80015dc:	f000 fe66 	bl	80022ac <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) ADC_raw_R,4); // Starts ADC DMA
 80015e0:	2204      	movs	r2, #4
 80015e2:	4912      	ldr	r1, [pc, #72]	@ (800162c <main+0xc4>)
 80015e4:	480b      	ldr	r0, [pc, #44]	@ (8001614 <main+0xac>)
 80015e6:	f000 fe61 	bl	80022ac <HAL_ADC_Start_DMA>

  // 1ms timer
  HAL_TIM_Base_Start_IT(&htim6);
 80015ea:	4811      	ldr	r0, [pc, #68]	@ (8001630 <main+0xc8>)
 80015ec:	f003 ff02 	bl	80053f4 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

      // Run FSM for left inverter
	  eval_inv_FSM(&invLeft);
 80015f0:	4807      	ldr	r0, [pc, #28]	@ (8001610 <main+0xa8>)
 80015f2:	f7ff f815 	bl	8000620 <eval_inv_FSM>

      // Run FSM for right inverter
	  eval_inv_FSM(&invRight);
 80015f6:	480b      	ldr	r0, [pc, #44]	@ (8001624 <main+0xbc>)
 80015f8:	f7ff f812 	bl	8000620 <eval_inv_FSM>
	  eval_inv_FSM(&invLeft);
 80015fc:	bf00      	nop
 80015fe:	e7f7      	b.n	80015f0 <main+0x88>
 8001600:	200001f0 	.word	0x200001f0
 8001604:	200003d0 	.word	0x200003d0
 8001608:	40021000 	.word	0x40021000
 800160c:	20000000 	.word	0x20000000
 8001610:	200000e4 	.word	0x200000e4
 8001614:	200001a8 	.word	0x200001a8
 8001618:	20000500 	.word	0x20000500
 800161c:	40020400 	.word	0x40020400
 8001620:	20000008 	.word	0x20000008
 8001624:	20000134 	.word	0x20000134
 8001628:	20000184 	.word	0x20000184
 800162c:	20000194 	.word	0x20000194
 8001630:	200004b4 	.word	0x200004b4

08001634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b094      	sub	sp, #80	@ 0x50
 8001638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800163a:	f107 031c 	add.w	r3, r7, #28
 800163e:	2234      	movs	r2, #52	@ 0x34
 8001640:	2100      	movs	r1, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f005 fa98 	bl	8006b78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001648:	f107 0308 	add.w	r3, r7, #8
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001658:	4b2b      	ldr	r3, [pc, #172]	@ (8001708 <SystemClock_Config+0xd4>)
 800165a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165c:	4a2a      	ldr	r2, [pc, #168]	@ (8001708 <SystemClock_Config+0xd4>)
 800165e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001662:	6413      	str	r3, [r2, #64]	@ 0x40
 8001664:	4b28      	ldr	r3, [pc, #160]	@ (8001708 <SystemClock_Config+0xd4>)
 8001666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001668:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800166c:	607b      	str	r3, [r7, #4]
 800166e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001670:	4b26      	ldr	r3, [pc, #152]	@ (800170c <SystemClock_Config+0xd8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a25      	ldr	r2, [pc, #148]	@ (800170c <SystemClock_Config+0xd8>)
 8001676:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	4b23      	ldr	r3, [pc, #140]	@ (800170c <SystemClock_Config+0xd8>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001684:	603b      	str	r3, [r7, #0]
 8001686:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001688:	2301      	movs	r3, #1
 800168a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800168c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001690:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001692:	2302      	movs	r3, #2
 8001694:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001696:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800169a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 10;
 800169c:	230a      	movs	r3, #10
 800169e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80016a0:	23d8      	movs	r3, #216	@ 0xd8
 80016a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016a4:	2302      	movs	r3, #2
 80016a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80016a8:	2309      	movs	r3, #9
 80016aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016ac:	2302      	movs	r3, #2
 80016ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b0:	f107 031c 	add.w	r3, r7, #28
 80016b4:	4618      	mov	r0, r3
 80016b6:	f002 fdbd 	bl	8004234 <HAL_RCC_OscConfig>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80016c0:	f000 f826 	bl	8001710 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80016c4:	f002 fd66 	bl	8004194 <HAL_PWREx_EnableOverDrive>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80016ce:	f000 f81f 	bl	8001710 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016d2:	230f      	movs	r3, #15
 80016d4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016d6:	2302      	movs	r3, #2
 80016d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016de:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80016e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016e8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80016ea:	f107 0308 	add.w	r3, r7, #8
 80016ee:	2107      	movs	r1, #7
 80016f0:	4618      	mov	r0, r3
 80016f2:	f003 f84d 	bl	8004790 <HAL_RCC_ClockConfig>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80016fc:	f000 f808 	bl	8001710 <Error_Handler>
  }
}
 8001700:	bf00      	nop
 8001702:	3750      	adds	r7, #80	@ 0x50
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40023800 	.word	0x40023800
 800170c:	40007000 	.word	0x40007000

08001710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001714:	b672      	cpsid	i
}
 8001716:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <Error_Handler+0x8>

0800171c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001722:	4b0f      	ldr	r3, [pc, #60]	@ (8001760 <HAL_MspInit+0x44>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001726:	4a0e      	ldr	r2, [pc, #56]	@ (8001760 <HAL_MspInit+0x44>)
 8001728:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800172c:	6413      	str	r3, [r2, #64]	@ 0x40
 800172e:	4b0c      	ldr	r3, [pc, #48]	@ (8001760 <HAL_MspInit+0x44>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001732:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001736:	607b      	str	r3, [r7, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173a:	4b09      	ldr	r3, [pc, #36]	@ (8001760 <HAL_MspInit+0x44>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800173e:	4a08      	ldr	r2, [pc, #32]	@ (8001760 <HAL_MspInit+0x44>)
 8001740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001744:	6453      	str	r3, [r2, #68]	@ 0x44
 8001746:	4b06      	ldr	r3, [pc, #24]	@ (8001760 <HAL_MspInit+0x44>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800174e:	603b      	str	r3, [r7, #0]
 8001750:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	40023800 	.word	0x40023800

08001764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <NMI_Handler+0x4>

0800176c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <HardFault_Handler+0x4>

08001774 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <MemManage_Handler+0x4>

0800177c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <BusFault_Handler+0x4>

08001784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001788:	bf00      	nop
 800178a:	e7fd      	b.n	8001788 <UsageFault_Handler+0x4>

0800178c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ba:	f000 fd13 	bl	80021e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80017c8:	4802      	ldr	r0, [pc, #8]	@ (80017d4 <CAN1_RX0_IRQHandler+0x10>)
 80017ca:	f001 fa54 	bl	8002c76 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000340 	.word	0x20000340

080017d8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80017dc:	4802      	ldr	r0, [pc, #8]	@ (80017e8 <CAN1_RX1_IRQHandler+0x10>)
 80017de:	f001 fa4a 	bl	8002c76 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000340 	.word	0x20000340

080017ec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017f0:	4818      	ldr	r0, [pc, #96]	@ (8001854 <TIM1_UP_TIM10_IRQHandler+0x68>)
 80017f2:	f003 ff90 	bl	8005716 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  get_ADC(ADC_raw_L, &invLeft.measurements);
 80017f6:	4918      	ldr	r1, [pc, #96]	@ (8001858 <TIM1_UP_TIM10_IRQHandler+0x6c>)
 80017f8:	4818      	ldr	r0, [pc, #96]	@ (800185c <TIM1_UP_TIM10_IRQHandler+0x70>)
 80017fa:	f7fe ffd1 	bl	80007a0 <get_ADC>

  calc_duties(vd_L, vq_L, vDC_L, freq_L, &invLeft.duties);
 80017fe:	4b18      	ldr	r3, [pc, #96]	@ (8001860 <TIM1_UP_TIM10_IRQHandler+0x74>)
 8001800:	edd3 7a00 	vldr	s15, [r3]
 8001804:	4b17      	ldr	r3, [pc, #92]	@ (8001864 <TIM1_UP_TIM10_IRQHandler+0x78>)
 8001806:	ed93 7a00 	vldr	s14, [r3]
 800180a:	4b17      	ldr	r3, [pc, #92]	@ (8001868 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 800180c:	edd3 6a00 	vldr	s13, [r3]
 8001810:	4b16      	ldr	r3, [pc, #88]	@ (800186c <TIM1_UP_TIM10_IRQHandler+0x80>)
 8001812:	ed93 6a00 	vldr	s12, [r3]
 8001816:	4816      	ldr	r0, [pc, #88]	@ (8001870 <TIM1_UP_TIM10_IRQHandler+0x84>)
 8001818:	eef0 1a46 	vmov.f32	s3, s12
 800181c:	eeb0 1a66 	vmov.f32	s2, s13
 8001820:	eef0 0a47 	vmov.f32	s1, s14
 8001824:	eeb0 0a67 	vmov.f32	s0, s15
 8001828:	f7fe fe7e 	bl	8000528 <calc_duties>

  update_PWM(invLeft.htim, invLeft.duties);
 800182c:	4b11      	ldr	r3, [pc, #68]	@ (8001874 <TIM1_UP_TIM10_IRQHandler+0x88>)
 800182e:	68da      	ldr	r2, [r3, #12]
 8001830:	4b10      	ldr	r3, [pc, #64]	@ (8001874 <TIM1_UP_TIM10_IRQHandler+0x88>)
 8001832:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 8001836:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 800183a:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800183e:	eeb0 0a66 	vmov.f32	s0, s13
 8001842:	eef0 0a47 	vmov.f32	s1, s14
 8001846:	eeb0 1a67 	vmov.f32	s2, s15
 800184a:	4610      	mov	r0, r2
 800184c:	f7ff f8cf 	bl	80009ee <update_PWM>

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}
 8001854:	200003d0 	.word	0x200003d0
 8001858:	200000fc 	.word	0x200000fc
 800185c:	20000184 	.word	0x20000184
 8001860:	20000018 	.word	0x20000018
 8001864:	2000001c 	.word	0x2000001c
 8001868:	20000020 	.word	0x20000020
 800186c:	20000024 	.word	0x20000024
 8001870:	20000128 	.word	0x20000128
 8001874:	200000e4 	.word	0x200000e4

08001878 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 800187c:	4804      	ldr	r0, [pc, #16]	@ (8001890 <TIM6_DAC_IRQHandler+0x18>)
 800187e:	f001 fd66 	bl	800334e <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8001882:	4804      	ldr	r0, [pc, #16]	@ (8001894 <TIM6_DAC_IRQHandler+0x1c>)
 8001884:	f003 ff47 	bl	8005716 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  tasks_1ms();
 8001888:	f7ff f90a 	bl	8000aa0 <tasks_1ms>
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000368 	.word	0x20000368
 8001894:	200004b4 	.word	0x200004b4

08001898 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800189c:	4802      	ldr	r0, [pc, #8]	@ (80018a8 <DMA2_Stream1_IRQHandler+0x10>)
 800189e:	f001 ff21 	bl	80036e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200002e0 	.word	0x200002e0

080018ac <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80018b0:	4802      	ldr	r0, [pc, #8]	@ (80018bc <DMA2_Stream2_IRQHandler+0x10>)
 80018b2:	f001 ff17 	bl	80036e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000280 	.word	0x20000280

080018c0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018c4:	4b06      	ldr	r3, [pc, #24]	@ (80018e0 <SystemInit+0x20>)
 80018c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018ca:	4a05      	ldr	r2, [pc, #20]	@ (80018e0 <SystemInit+0x20>)
 80018cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b09a      	sub	sp, #104	@ 0x68
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ea:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001904:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
 8001914:	615a      	str	r2, [r3, #20]
 8001916:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001918:	1d3b      	adds	r3, r7, #4
 800191a:	222c      	movs	r2, #44	@ 0x2c
 800191c:	2100      	movs	r1, #0
 800191e:	4618      	mov	r0, r3
 8001920:	f005 f92a 	bl	8006b78 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001924:	4b52      	ldr	r3, [pc, #328]	@ (8001a70 <MX_TIM1_Init+0x18c>)
 8001926:	4a53      	ldr	r2, [pc, #332]	@ (8001a74 <MX_TIM1_Init+0x190>)
 8001928:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800192a:	4b51      	ldr	r3, [pc, #324]	@ (8001a70 <MX_TIM1_Init+0x18c>)
 800192c:	2200      	movs	r2, #0
 800192e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001930:	4b4f      	ldr	r3, [pc, #316]	@ (8001a70 <MX_TIM1_Init+0x18c>)
 8001932:	2220      	movs	r2, #32
 8001934:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = (216000000*TS)/2;
 8001936:	4b4e      	ldr	r3, [pc, #312]	@ (8001a70 <MX_TIM1_Init+0x18c>)
 8001938:	f44f 6207 	mov.w	r2, #2160	@ 0x870
 800193c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800193e:	4b4c      	ldr	r3, [pc, #304]	@ (8001a70 <MX_TIM1_Init+0x18c>)
 8001940:	2200      	movs	r2, #0
 8001942:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8001944:	4b4a      	ldr	r3, [pc, #296]	@ (8001a70 <MX_TIM1_Init+0x18c>)
 8001946:	2201      	movs	r2, #1
 8001948:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800194a:	4b49      	ldr	r3, [pc, #292]	@ (8001a70 <MX_TIM1_Init+0x18c>)
 800194c:	2280      	movs	r2, #128	@ 0x80
 800194e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001950:	4847      	ldr	r0, [pc, #284]	@ (8001a70 <MX_TIM1_Init+0x18c>)
 8001952:	f003 fcf7 	bl	8005344 <HAL_TIM_Base_Init>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800195c:	f7ff fed8 	bl	8001710 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001960:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001964:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001966:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800196a:	4619      	mov	r1, r3
 800196c:	4840      	ldr	r0, [pc, #256]	@ (8001a70 <MX_TIM1_Init+0x18c>)
 800196e:	f004 fa1b 	bl	8005da8 <HAL_TIM_ConfigClockSource>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001978:	f7ff feca 	bl	8001710 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800197c:	483c      	ldr	r0, [pc, #240]	@ (8001a70 <MX_TIM1_Init+0x18c>)
 800197e:	f003 fe12 	bl	80055a6 <HAL_TIM_PWM_Init>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001988:	f7ff fec2 	bl	8001710 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800198c:	2320      	movs	r3, #32
 800198e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001990:	2300      	movs	r3, #0
 8001992:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001994:	2300      	movs	r3, #0
 8001996:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001998:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800199c:	4619      	mov	r1, r3
 800199e:	4834      	ldr	r0, [pc, #208]	@ (8001a70 <MX_TIM1_Init+0x18c>)
 80019a0:	f004 ffc0 	bl	8006924 <HAL_TIMEx_MasterConfigSynchronization>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80019aa:	f7ff feb1 	bl	8001710 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ae:	2360      	movs	r3, #96	@ 0x60
 80019b0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019b6:	2300      	movs	r3, #0
 80019b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80019ba:	2308      	movs	r3, #8
 80019bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019be:	2300      	movs	r3, #0
 80019c0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019c2:	2300      	movs	r3, #0
 80019c4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 80019c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019cc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80019d0:	2200      	movs	r2, #0
 80019d2:	4619      	mov	r1, r3
 80019d4:	4826      	ldr	r0, [pc, #152]	@ (8001a70 <MX_TIM1_Init+0x18c>)
 80019d6:	f004 f8d3 	bl	8005b80 <HAL_TIM_PWM_ConfigChannel>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80019e0:	f7ff fe96 	bl	8001710 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019e4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80019e8:	2204      	movs	r2, #4
 80019ea:	4619      	mov	r1, r3
 80019ec:	4820      	ldr	r0, [pc, #128]	@ (8001a70 <MX_TIM1_Init+0x18c>)
 80019ee:	f004 f8c7 	bl	8005b80 <HAL_TIM_PWM_ConfigChannel>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80019f8:	f7ff fe8a 	bl	8001710 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019fc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a00:	2208      	movs	r2, #8
 8001a02:	4619      	mov	r1, r3
 8001a04:	481a      	ldr	r0, [pc, #104]	@ (8001a70 <MX_TIM1_Init+0x18c>)
 8001a06:	f004 f8bb 	bl	8005b80 <HAL_TIM_PWM_ConfigChannel>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8001a10:	f7ff fe7e 	bl	8001710 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001a14:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001a18:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001a1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a1e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 8001a20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a24:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = DT*216000000;
 8001a26:	2320      	movs	r3, #32
 8001a28:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a32:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8001a38:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a3c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a42:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a4c:	1d3b      	adds	r3, r7, #4
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4807      	ldr	r0, [pc, #28]	@ (8001a70 <MX_TIM1_Init+0x18c>)
 8001a52:	f004 fff5 	bl	8006a40 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_TIM1_Init+0x17c>
  {
    Error_Handler();
 8001a5c:	f7ff fe58 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a60:	4803      	ldr	r0, [pc, #12]	@ (8001a70 <MX_TIM1_Init+0x18c>)
 8001a62:	f000 fab5 	bl	8001fd0 <HAL_TIM_MspPostInit>

}
 8001a66:	bf00      	nop
 8001a68:	3768      	adds	r7, #104	@ 0x68
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	200003d0 	.word	0x200003d0
 8001a74:	40010000 	.word	0x40010000

08001a78 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b088      	sub	sp, #32
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a7e:	f107 0314 	add.w	r3, r7, #20
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]
 8001a88:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a96:	4b26      	ldr	r3, [pc, #152]	@ (8001b30 <MX_TIM2_Init+0xb8>)
 8001a98:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a9c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a9e:	4b24      	ldr	r3, [pc, #144]	@ (8001b30 <MX_TIM2_Init+0xb8>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa4:	4b22      	ldr	r3, [pc, #136]	@ (8001b30 <MX_TIM2_Init+0xb8>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001aaa:	4b21      	ldr	r3, [pc, #132]	@ (8001b30 <MX_TIM2_Init+0xb8>)
 8001aac:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b30 <MX_TIM2_Init+0xb8>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b30 <MX_TIM2_Init+0xb8>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001abe:	481c      	ldr	r0, [pc, #112]	@ (8001b30 <MX_TIM2_Init+0xb8>)
 8001ac0:	f003 fdd2 	bl	8005668 <HAL_TIM_IC_Init>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001aca:	f7ff fe21 	bl	8001710 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ad6:	f107 0314 	add.w	r3, r7, #20
 8001ada:	4619      	mov	r1, r3
 8001adc:	4814      	ldr	r0, [pc, #80]	@ (8001b30 <MX_TIM2_Init+0xb8>)
 8001ade:	f004 ff21 	bl	8006924 <HAL_TIMEx_MasterConfigSynchronization>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001ae8:	f7ff fe12 	bl	8001710 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001aec:	2300      	movs	r3, #0
 8001aee:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001af0:	2301      	movs	r3, #1
 8001af2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001afc:	1d3b      	adds	r3, r7, #4
 8001afe:	2200      	movs	r2, #0
 8001b00:	4619      	mov	r1, r3
 8001b02:	480b      	ldr	r0, [pc, #44]	@ (8001b30 <MX_TIM2_Init+0xb8>)
 8001b04:	f003 ffa0 	bl	8005a48 <HAL_TIM_IC_ConfigChannel>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001b0e:	f7ff fdff 	bl	8001710 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	2208      	movs	r2, #8
 8001b16:	4619      	mov	r1, r3
 8001b18:	4805      	ldr	r0, [pc, #20]	@ (8001b30 <MX_TIM2_Init+0xb8>)
 8001b1a:	f003 ff95 	bl	8005a48 <HAL_TIM_IC_ConfigChannel>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001b24:	f7ff fdf4 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b28:	bf00      	nop
 8001b2a:	3720      	adds	r7, #32
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	2000041c 	.word	0x2000041c

08001b34 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b088      	sub	sp, #32
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b3a:	f107 0314 	add.w	r3, r7, #20
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b52:	4b26      	ldr	r3, [pc, #152]	@ (8001bec <MX_TIM4_Init+0xb8>)
 8001b54:	4a26      	ldr	r2, [pc, #152]	@ (8001bf0 <MX_TIM4_Init+0xbc>)
 8001b56:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001b58:	4b24      	ldr	r3, [pc, #144]	@ (8001bec <MX_TIM4_Init+0xb8>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b5e:	4b23      	ldr	r3, [pc, #140]	@ (8001bec <MX_TIM4_Init+0xb8>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001b64:	4b21      	ldr	r3, [pc, #132]	@ (8001bec <MX_TIM4_Init+0xb8>)
 8001b66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b6a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b6c:	4b1f      	ldr	r3, [pc, #124]	@ (8001bec <MX_TIM4_Init+0xb8>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b72:	4b1e      	ldr	r3, [pc, #120]	@ (8001bec <MX_TIM4_Init+0xb8>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001b78:	481c      	ldr	r0, [pc, #112]	@ (8001bec <MX_TIM4_Init+0xb8>)
 8001b7a:	f003 fd75 	bl	8005668 <HAL_TIM_IC_Init>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001b84:	f7ff fdc4 	bl	8001710 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	4619      	mov	r1, r3
 8001b96:	4815      	ldr	r0, [pc, #84]	@ (8001bec <MX_TIM4_Init+0xb8>)
 8001b98:	f004 fec4 	bl	8006924 <HAL_TIMEx_MasterConfigSynchronization>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8001ba2:	f7ff fdb5 	bl	8001710 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001baa:	2301      	movs	r3, #1
 8001bac:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	2200      	movs	r2, #0
 8001bba:	4619      	mov	r1, r3
 8001bbc:	480b      	ldr	r0, [pc, #44]	@ (8001bec <MX_TIM4_Init+0xb8>)
 8001bbe:	f003 ff43 	bl	8005a48 <HAL_TIM_IC_ConfigChannel>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001bc8:	f7ff fda2 	bl	8001710 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001bcc:	1d3b      	adds	r3, r7, #4
 8001bce:	2208      	movs	r2, #8
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4806      	ldr	r0, [pc, #24]	@ (8001bec <MX_TIM4_Init+0xb8>)
 8001bd4:	f003 ff38 	bl	8005a48 <HAL_TIM_IC_ConfigChannel>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8001bde:	f7ff fd97 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001be2:	bf00      	nop
 8001be4:	3720      	adds	r7, #32
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000468 	.word	0x20000468
 8001bf0:	40000800 	.word	0x40000800

08001bf4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bfa:	1d3b      	adds	r3, r7, #4
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001c04:	4b14      	ldr	r3, [pc, #80]	@ (8001c58 <MX_TIM6_Init+0x64>)
 8001c06:	4a15      	ldr	r2, [pc, #84]	@ (8001c5c <MX_TIM6_Init+0x68>)
 8001c08:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1;
 8001c0a:	4b13      	ldr	r3, [pc, #76]	@ (8001c58 <MX_TIM6_Init+0x64>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c10:	4b11      	ldr	r3, [pc, #68]	@ (8001c58 <MX_TIM6_Init+0x64>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 53999;
 8001c16:	4b10      	ldr	r3, [pc, #64]	@ (8001c58 <MX_TIM6_Init+0x64>)
 8001c18:	f24d 22ef 	movw	r2, #53999	@ 0xd2ef
 8001c1c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c58 <MX_TIM6_Init+0x64>)
 8001c20:	2280      	movs	r2, #128	@ 0x80
 8001c22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c24:	480c      	ldr	r0, [pc, #48]	@ (8001c58 <MX_TIM6_Init+0x64>)
 8001c26:	f003 fb8d 	bl	8005344 <HAL_TIM_Base_Init>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001c30:	f7ff fd6e 	bl	8001710 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c34:	2320      	movs	r3, #32
 8001c36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c3c:	1d3b      	adds	r3, r7, #4
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4805      	ldr	r0, [pc, #20]	@ (8001c58 <MX_TIM6_Init+0x64>)
 8001c42:	f004 fe6f 	bl	8006924 <HAL_TIMEx_MasterConfigSynchronization>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001c4c:	f7ff fd60 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c50:	bf00      	nop
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	200004b4 	.word	0x200004b4
 8001c5c:	40001000 	.word	0x40001000

08001c60 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b09a      	sub	sp, #104	@ 0x68
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c66:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	605a      	str	r2, [r3, #4]
 8001c70:	609a      	str	r2, [r3, #8]
 8001c72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c74:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c80:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]
 8001c90:	615a      	str	r2, [r3, #20]
 8001c92:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c94:	1d3b      	adds	r3, r7, #4
 8001c96:	222c      	movs	r2, #44	@ 0x2c
 8001c98:	2100      	movs	r1, #0
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f004 ff6c 	bl	8006b78 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001ca0:	4b54      	ldr	r3, [pc, #336]	@ (8001df4 <MX_TIM8_Init+0x194>)
 8001ca2:	4a55      	ldr	r2, [pc, #340]	@ (8001df8 <MX_TIM8_Init+0x198>)
 8001ca4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001ca6:	4b53      	ldr	r3, [pc, #332]	@ (8001df4 <MX_TIM8_Init+0x194>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cac:	4b51      	ldr	r3, [pc, #324]	@ (8001df4 <MX_TIM8_Init+0x194>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001cb2:	4b50      	ldr	r3, [pc, #320]	@ (8001df4 <MX_TIM8_Init+0x194>)
 8001cb4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cb8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cba:	4b4e      	ldr	r3, [pc, #312]	@ (8001df4 <MX_TIM8_Init+0x194>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001cc0:	4b4c      	ldr	r3, [pc, #304]	@ (8001df4 <MX_TIM8_Init+0x194>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc6:	4b4b      	ldr	r3, [pc, #300]	@ (8001df4 <MX_TIM8_Init+0x194>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001ccc:	4849      	ldr	r0, [pc, #292]	@ (8001df4 <MX_TIM8_Init+0x194>)
 8001cce:	f003 fb39 	bl	8005344 <HAL_TIM_Base_Init>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001cd8:	f7ff fd1a 	bl	8001710 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cdc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ce0:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001ce2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4842      	ldr	r0, [pc, #264]	@ (8001df4 <MX_TIM8_Init+0x194>)
 8001cea:	f004 f85d 	bl	8005da8 <HAL_TIM_ConfigClockSource>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001cf4:	f7ff fd0c 	bl	8001710 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001cf8:	483e      	ldr	r0, [pc, #248]	@ (8001df4 <MX_TIM8_Init+0x194>)
 8001cfa:	f003 fc54 	bl	80055a6 <HAL_TIM_PWM_Init>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001d04:	f7ff fd04 	bl	8001710 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8001d08:	483a      	ldr	r0, [pc, #232]	@ (8001df4 <MX_TIM8_Init+0x194>)
 8001d0a:	f003 fbeb 	bl	80054e4 <HAL_TIM_OC_Init>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_TIM8_Init+0xb8>
  {
    Error_Handler();
 8001d14:	f7ff fcfc 	bl	8001710 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d20:	2300      	movs	r3, #0
 8001d22:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001d24:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4832      	ldr	r0, [pc, #200]	@ (8001df4 <MX_TIM8_Init+0x194>)
 8001d2c:	f004 fdfa 	bl	8006924 <HAL_TIMEx_MasterConfigSynchronization>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_TIM8_Init+0xda>
  {
    Error_Handler();
 8001d36:	f7ff fceb 	bl	8001710 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d3a:	2360      	movs	r3, #96	@ 0x60
 8001d3c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d42:	2300      	movs	r3, #0
 8001d44:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d46:	2300      	movs	r3, #0
 8001d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d52:	2300      	movs	r3, #0
 8001d54:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d56:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4825      	ldr	r0, [pc, #148]	@ (8001df4 <MX_TIM8_Init+0x194>)
 8001d60:	f003 ff0e 	bl	8005b80 <HAL_TIM_PWM_ConfigChannel>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8001d6a:	f7ff fcd1 	bl	8001710 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d6e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d72:	2204      	movs	r2, #4
 8001d74:	4619      	mov	r1, r3
 8001d76:	481f      	ldr	r0, [pc, #124]	@ (8001df4 <MX_TIM8_Init+0x194>)
 8001d78:	f003 ff02 	bl	8005b80 <HAL_TIM_PWM_ConfigChannel>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 8001d82:	f7ff fcc5 	bl	8001710 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001d86:	2300      	movs	r3, #0
 8001d88:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d8a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d8e:	2208      	movs	r2, #8
 8001d90:	4619      	mov	r1, r3
 8001d92:	4818      	ldr	r0, [pc, #96]	@ (8001df4 <MX_TIM8_Init+0x194>)
 8001d94:	f003 fdde 	bl	8005954 <HAL_TIM_OC_ConfigChannel>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001d9e:	f7ff fcb7 	bl	8001710 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001da2:	2300      	movs	r3, #0
 8001da4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001da6:	2300      	movs	r3, #0
 8001da8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001db6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001dc4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001dc8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001dd2:	1d3b      	adds	r3, r7, #4
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4807      	ldr	r0, [pc, #28]	@ (8001df4 <MX_TIM8_Init+0x194>)
 8001dd8:	f004 fe32 	bl	8006a40 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_TIM8_Init+0x186>
  {
    Error_Handler();
 8001de2:	f7ff fc95 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001de6:	4803      	ldr	r0, [pc, #12]	@ (8001df4 <MX_TIM8_Init+0x194>)
 8001de8:	f000 f8f2 	bl	8001fd0 <HAL_TIM_MspPostInit>

}
 8001dec:	bf00      	nop
 8001dee:	3768      	adds	r7, #104	@ 0x68
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	20000500 	.word	0x20000500
 8001df8:	40010400 	.word	0x40010400

08001dfc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a23      	ldr	r2, [pc, #140]	@ (8001e98 <HAL_TIM_Base_MspInit+0x9c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d114      	bne.n	8001e38 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e0e:	4b23      	ldr	r3, [pc, #140]	@ (8001e9c <HAL_TIM_Base_MspInit+0xa0>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e12:	4a22      	ldr	r2, [pc, #136]	@ (8001e9c <HAL_TIM_Base_MspInit+0xa0>)
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e1a:	4b20      	ldr	r3, [pc, #128]	@ (8001e9c <HAL_TIM_Base_MspInit+0xa0>)
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001e26:	2200      	movs	r2, #0
 8001e28:	2100      	movs	r1, #0
 8001e2a:	2019      	movs	r0, #25
 8001e2c:	f001 fa37 	bl	800329e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001e30:	2019      	movs	r0, #25
 8001e32:	f001 fa50 	bl	80032d6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001e36:	e02a      	b.n	8001e8e <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM6)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a18      	ldr	r2, [pc, #96]	@ (8001ea0 <HAL_TIM_Base_MspInit+0xa4>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d114      	bne.n	8001e6c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001e42:	4b16      	ldr	r3, [pc, #88]	@ (8001e9c <HAL_TIM_Base_MspInit+0xa0>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e46:	4a15      	ldr	r2, [pc, #84]	@ (8001e9c <HAL_TIM_Base_MspInit+0xa0>)
 8001e48:	f043 0310 	orr.w	r3, r3, #16
 8001e4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e4e:	4b13      	ldr	r3, [pc, #76]	@ (8001e9c <HAL_TIM_Base_MspInit+0xa0>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e52:	f003 0310 	and.w	r3, r3, #16
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	2036      	movs	r0, #54	@ 0x36
 8001e60:	f001 fa1d 	bl	800329e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e64:	2036      	movs	r0, #54	@ 0x36
 8001e66:	f001 fa36 	bl	80032d6 <HAL_NVIC_EnableIRQ>
}
 8001e6a:	e010      	b.n	8001e8e <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM8)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a0c      	ldr	r2, [pc, #48]	@ (8001ea4 <HAL_TIM_Base_MspInit+0xa8>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d10b      	bne.n	8001e8e <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001e76:	4b09      	ldr	r3, [pc, #36]	@ (8001e9c <HAL_TIM_Base_MspInit+0xa0>)
 8001e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e7a:	4a08      	ldr	r2, [pc, #32]	@ (8001e9c <HAL_TIM_Base_MspInit+0xa0>)
 8001e7c:	f043 0302 	orr.w	r3, r3, #2
 8001e80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e82:	4b06      	ldr	r3, [pc, #24]	@ (8001e9c <HAL_TIM_Base_MspInit+0xa0>)
 8001e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
}
 8001e8e:	bf00      	nop
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40010000 	.word	0x40010000
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40001000 	.word	0x40001000
 8001ea4:	40010400 	.word	0x40010400

08001ea8 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08c      	sub	sp, #48	@ 0x30
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb0:	f107 031c 	add.w	r3, r7, #28
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ec8:	d146      	bne.n	8001f58 <HAL_TIM_IC_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eca:	4b3c      	ldr	r3, [pc, #240]	@ (8001fbc <HAL_TIM_IC_MspInit+0x114>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ece:	4a3b      	ldr	r2, [pc, #236]	@ (8001fbc <HAL_TIM_IC_MspInit+0x114>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ed6:	4b39      	ldr	r3, [pc, #228]	@ (8001fbc <HAL_TIM_IC_MspInit+0x114>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	61bb      	str	r3, [r7, #24]
 8001ee0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee2:	4b36      	ldr	r3, [pc, #216]	@ (8001fbc <HAL_TIM_IC_MspInit+0x114>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee6:	4a35      	ldr	r2, [pc, #212]	@ (8001fbc <HAL_TIM_IC_MspInit+0x114>)
 8001ee8:	f043 0302 	orr.w	r3, r3, #2
 8001eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eee:	4b33      	ldr	r3, [pc, #204]	@ (8001fbc <HAL_TIM_IC_MspInit+0x114>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	617b      	str	r3, [r7, #20]
 8001ef8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efa:	4b30      	ldr	r3, [pc, #192]	@ (8001fbc <HAL_TIM_IC_MspInit+0x114>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efe:	4a2f      	ldr	r2, [pc, #188]	@ (8001fbc <HAL_TIM_IC_MspInit+0x114>)
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f06:	4b2d      	ldr	r3, [pc, #180]	@ (8001fbc <HAL_TIM_IC_MspInit+0x114>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	613b      	str	r3, [r7, #16]
 8001f10:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = B_R_Pin;
 8001f12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f18:	2302      	movs	r3, #2
 8001f1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f20:	2300      	movs	r3, #0
 8001f22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f24:	2301      	movs	r3, #1
 8001f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(B_R_GPIO_Port, &GPIO_InitStruct);
 8001f28:	f107 031c 	add.w	r3, r7, #28
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4824      	ldr	r0, [pc, #144]	@ (8001fc0 <HAL_TIM_IC_MspInit+0x118>)
 8001f30:	f001 fe42 	bl	8003bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A_R_Pin;
 8001f34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f42:	2300      	movs	r3, #0
 8001f44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f46:	2301      	movs	r3, #1
 8001f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(A_R_GPIO_Port, &GPIO_InitStruct);
 8001f4a:	f107 031c 	add.w	r3, r7, #28
 8001f4e:	4619      	mov	r1, r3
 8001f50:	481c      	ldr	r0, [pc, #112]	@ (8001fc4 <HAL_TIM_IC_MspInit+0x11c>)
 8001f52:	f001 fe31 	bl	8003bb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001f56:	e02d      	b.n	8001fb4 <HAL_TIM_IC_MspInit+0x10c>
  else if(tim_icHandle->Instance==TIM4)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a1a      	ldr	r2, [pc, #104]	@ (8001fc8 <HAL_TIM_IC_MspInit+0x120>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d128      	bne.n	8001fb4 <HAL_TIM_IC_MspInit+0x10c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f62:	4b16      	ldr	r3, [pc, #88]	@ (8001fbc <HAL_TIM_IC_MspInit+0x114>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f66:	4a15      	ldr	r2, [pc, #84]	@ (8001fbc <HAL_TIM_IC_MspInit+0x114>)
 8001f68:	f043 0304 	orr.w	r3, r3, #4
 8001f6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f6e:	4b13      	ldr	r3, [pc, #76]	@ (8001fbc <HAL_TIM_IC_MspInit+0x114>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f72:	f003 0304 	and.w	r3, r3, #4
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f7a:	4b10      	ldr	r3, [pc, #64]	@ (8001fbc <HAL_TIM_IC_MspInit+0x114>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7e:	4a0f      	ldr	r2, [pc, #60]	@ (8001fbc <HAL_TIM_IC_MspInit+0x114>)
 8001f80:	f043 0308 	orr.w	r3, r3, #8
 8001f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f86:	4b0d      	ldr	r3, [pc, #52]	@ (8001fbc <HAL_TIM_IC_MspInit+0x114>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	60bb      	str	r3, [r7, #8]
 8001f90:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = A_L_Pin|B_L_Pin;
 8001f92:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8001f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fa8:	f107 031c 	add.w	r3, r7, #28
 8001fac:	4619      	mov	r1, r3
 8001fae:	4807      	ldr	r0, [pc, #28]	@ (8001fcc <HAL_TIM_IC_MspInit+0x124>)
 8001fb0:	f001 fe02 	bl	8003bb8 <HAL_GPIO_Init>
}
 8001fb4:	bf00      	nop
 8001fb6:	3730      	adds	r7, #48	@ 0x30
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	40020400 	.word	0x40020400
 8001fc4:	40020000 	.word	0x40020000
 8001fc8:	40000800 	.word	0x40000800
 8001fcc:	40020c00 	.word	0x40020c00

08001fd0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b08c      	sub	sp, #48	@ 0x30
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd8:	f107 031c 	add.w	r3, r7, #28
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	60da      	str	r2, [r3, #12]
 8001fe6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a3f      	ldr	r2, [pc, #252]	@ (80020ec <HAL_TIM_MspPostInit+0x11c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d11d      	bne.n	800202e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ff2:	4b3f      	ldr	r3, [pc, #252]	@ (80020f0 <HAL_TIM_MspPostInit+0x120>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff6:	4a3e      	ldr	r2, [pc, #248]	@ (80020f0 <HAL_TIM_MspPostInit+0x120>)
 8001ff8:	f043 0310 	orr.w	r3, r3, #16
 8001ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ffe:	4b3c      	ldr	r3, [pc, #240]	@ (80020f0 <HAL_TIM_MspPostInit+0x120>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002002:	f003 0310 	and.w	r3, r3, #16
 8002006:	61bb      	str	r3, [r7, #24]
 8002008:	69bb      	ldr	r3, [r7, #24]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWM1_L_Pin|PWM2_L_Pin|PWM3_L_Pin|PWM4_L_Pin
 800200a:	f44f 537c 	mov.w	r3, #16128	@ 0x3f00
 800200e:	61fb      	str	r3, [r7, #28]
                          |PWM5_L_Pin|PWM6_L_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002010:	2302      	movs	r3, #2
 8002012:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002018:	2300      	movs	r3, #0
 800201a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800201c:	2301      	movs	r3, #1
 800201e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002020:	f107 031c 	add.w	r3, r7, #28
 8002024:	4619      	mov	r1, r3
 8002026:	4833      	ldr	r0, [pc, #204]	@ (80020f4 <HAL_TIM_MspPostInit+0x124>)
 8002028:	f001 fdc6 	bl	8003bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800202c:	e05a      	b.n	80020e4 <HAL_TIM_MspPostInit+0x114>
  else if(timHandle->Instance==TIM8)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a31      	ldr	r2, [pc, #196]	@ (80020f8 <HAL_TIM_MspPostInit+0x128>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d155      	bne.n	80020e4 <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002038:	4b2d      	ldr	r3, [pc, #180]	@ (80020f0 <HAL_TIM_MspPostInit+0x120>)
 800203a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203c:	4a2c      	ldr	r2, [pc, #176]	@ (80020f0 <HAL_TIM_MspPostInit+0x120>)
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	6313      	str	r3, [r2, #48]	@ 0x30
 8002044:	4b2a      	ldr	r3, [pc, #168]	@ (80020f0 <HAL_TIM_MspPostInit+0x120>)
 8002046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002050:	4b27      	ldr	r3, [pc, #156]	@ (80020f0 <HAL_TIM_MspPostInit+0x120>)
 8002052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002054:	4a26      	ldr	r2, [pc, #152]	@ (80020f0 <HAL_TIM_MspPostInit+0x120>)
 8002056:	f043 0302 	orr.w	r3, r3, #2
 800205a:	6313      	str	r3, [r2, #48]	@ 0x30
 800205c:	4b24      	ldr	r3, [pc, #144]	@ (80020f0 <HAL_TIM_MspPostInit+0x120>)
 800205e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002068:	4b21      	ldr	r3, [pc, #132]	@ (80020f0 <HAL_TIM_MspPostInit+0x120>)
 800206a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206c:	4a20      	ldr	r2, [pc, #128]	@ (80020f0 <HAL_TIM_MspPostInit+0x120>)
 800206e:	f043 0304 	orr.w	r3, r3, #4
 8002072:	6313      	str	r3, [r2, #48]	@ 0x30
 8002074:	4b1e      	ldr	r3, [pc, #120]	@ (80020f0 <HAL_TIM_MspPostInit+0x120>)
 8002076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM1_R_Pin;
 8002080:	2320      	movs	r3, #32
 8002082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002084:	2302      	movs	r3, #2
 8002086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208c:	2300      	movs	r3, #0
 800208e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002090:	2303      	movs	r3, #3
 8002092:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM1_R_GPIO_Port, &GPIO_InitStruct);
 8002094:	f107 031c 	add.w	r3, r7, #28
 8002098:	4619      	mov	r1, r3
 800209a:	4818      	ldr	r0, [pc, #96]	@ (80020fc <HAL_TIM_MspPostInit+0x12c>)
 800209c:	f001 fd8c 	bl	8003bb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM3_R_Pin|PWM5_R_Pin;
 80020a0:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80020a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a6:	2302      	movs	r3, #2
 80020a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ae:	2300      	movs	r3, #0
 80020b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80020b2:	2303      	movs	r3, #3
 80020b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b6:	f107 031c 	add.w	r3, r7, #28
 80020ba:	4619      	mov	r1, r3
 80020bc:	4810      	ldr	r0, [pc, #64]	@ (8002100 <HAL_TIM_MspPostInit+0x130>)
 80020be:	f001 fd7b 	bl	8003bb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM2_R_Pin|PWM4_R_Pin|PWM6_R_Pin;
 80020c2:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80020c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c8:	2302      	movs	r3, #2
 80020ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d0:	2300      	movs	r3, #0
 80020d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80020d4:	2303      	movs	r3, #3
 80020d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020d8:	f107 031c 	add.w	r3, r7, #28
 80020dc:	4619      	mov	r1, r3
 80020de:	4809      	ldr	r0, [pc, #36]	@ (8002104 <HAL_TIM_MspPostInit+0x134>)
 80020e0:	f001 fd6a 	bl	8003bb8 <HAL_GPIO_Init>
}
 80020e4:	bf00      	nop
 80020e6:	3730      	adds	r7, #48	@ 0x30
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40010000 	.word	0x40010000
 80020f0:	40023800 	.word	0x40023800
 80020f4:	40021000 	.word	0x40021000
 80020f8:	40010400 	.word	0x40010400
 80020fc:	40020000 	.word	0x40020000
 8002100:	40020400 	.word	0x40020400
 8002104:	40020800 	.word	0x40020800

08002108 <MX_USB_OTG_FS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_USB_Init(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
	...

08002118 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002118:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002150 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800211c:	480d      	ldr	r0, [pc, #52]	@ (8002154 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800211e:	490e      	ldr	r1, [pc, #56]	@ (8002158 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002120:	4a0e      	ldr	r2, [pc, #56]	@ (800215c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002122:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002124:	e002      	b.n	800212c <LoopCopyDataInit>

08002126 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002126:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002128:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800212a:	3304      	adds	r3, #4

0800212c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800212c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800212e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002130:	d3f9      	bcc.n	8002126 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002132:	4a0b      	ldr	r2, [pc, #44]	@ (8002160 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002134:	4c0b      	ldr	r4, [pc, #44]	@ (8002164 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002136:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002138:	e001      	b.n	800213e <LoopFillZerobss>

0800213a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800213a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800213c:	3204      	adds	r2, #4

0800213e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800213e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002140:	d3fb      	bcc.n	800213a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002142:	f7ff fbbd 	bl	80018c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002146:	f004 fd25 	bl	8006b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800214a:	f7ff fa0d 	bl	8001568 <main>
  bx  lr    
 800214e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002150:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002154:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002158:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 800215c:	080082d8 	.word	0x080082d8
  ldr r2, =_sbss
 8002160:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8002164:	20000688 	.word	0x20000688

08002168 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002168:	e7fe      	b.n	8002168 <ADC_IRQHandler>

0800216a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800216e:	2003      	movs	r0, #3
 8002170:	f001 f88a 	bl	8003288 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002174:	200f      	movs	r0, #15
 8002176:	f000 f805 	bl	8002184 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800217a:	f7ff facf 	bl	800171c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800218c:	4b12      	ldr	r3, [pc, #72]	@ (80021d8 <HAL_InitTick+0x54>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	4b12      	ldr	r3, [pc, #72]	@ (80021dc <HAL_InitTick+0x58>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	4619      	mov	r1, r3
 8002196:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800219a:	fbb3 f3f1 	udiv	r3, r3, r1
 800219e:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a2:	4618      	mov	r0, r3
 80021a4:	f001 f8a5 	bl	80032f2 <HAL_SYSTICK_Config>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e00e      	b.n	80021d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b0f      	cmp	r3, #15
 80021b6:	d80a      	bhi.n	80021ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021b8:	2200      	movs	r2, #0
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	f04f 30ff 	mov.w	r0, #4294967295
 80021c0:	f001 f86d 	bl	800329e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021c4:	4a06      	ldr	r2, [pc, #24]	@ (80021e0 <HAL_InitTick+0x5c>)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
 80021cc:	e000      	b.n	80021d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	20000028 	.word	0x20000028
 80021dc:	20000030 	.word	0x20000030
 80021e0:	2000002c 	.word	0x2000002c

080021e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021e8:	4b06      	ldr	r3, [pc, #24]	@ (8002204 <HAL_IncTick+0x20>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	461a      	mov	r2, r3
 80021ee:	4b06      	ldr	r3, [pc, #24]	@ (8002208 <HAL_IncTick+0x24>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4413      	add	r3, r2
 80021f4:	4a04      	ldr	r2, [pc, #16]	@ (8002208 <HAL_IncTick+0x24>)
 80021f6:	6013      	str	r3, [r2, #0]
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	20000030 	.word	0x20000030
 8002208:	2000054c 	.word	0x2000054c

0800220c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return uwTick;
 8002210:	4b03      	ldr	r3, [pc, #12]	@ (8002220 <HAL_GetTick+0x14>)
 8002212:	681b      	ldr	r3, [r3, #0]
}
 8002214:	4618      	mov	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	2000054c 	.word	0x2000054c

08002224 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800222c:	2300      	movs	r3, #0
 800222e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e031      	b.n	800229e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223e:	2b00      	cmp	r3, #0
 8002240:	d109      	bne.n	8002256 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7fe fd8c 	bl	8000d60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225a:	f003 0310 	and.w	r3, r3, #16
 800225e:	2b00      	cmp	r3, #0
 8002260:	d116      	bne.n	8002290 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002266:	4b10      	ldr	r3, [pc, #64]	@ (80022a8 <HAL_ADC_Init+0x84>)
 8002268:	4013      	ands	r3, r2
 800226a:	f043 0202 	orr.w	r2, r3, #2
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 fa88 	bl	8002788 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002282:	f023 0303 	bic.w	r3, r3, #3
 8002286:	f043 0201 	orr.w	r2, r3, #1
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	641a      	str	r2, [r3, #64]	@ 0x40
 800228e:	e001      	b.n	8002294 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800229c:	7bfb      	ldrb	r3, [r7, #15]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	ffffeefd 	.word	0xffffeefd

080022ac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d101      	bne.n	80022ca <HAL_ADC_Start_DMA+0x1e>
 80022c6:	2302      	movs	r3, #2
 80022c8:	e0d4      	b.n	8002474 <HAL_ADC_Start_DMA+0x1c8>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d018      	beq.n	8002312 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0201 	orr.w	r2, r2, #1
 80022ee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80022f0:	4b62      	ldr	r3, [pc, #392]	@ (800247c <HAL_ADC_Start_DMA+0x1d0>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a62      	ldr	r2, [pc, #392]	@ (8002480 <HAL_ADC_Start_DMA+0x1d4>)
 80022f6:	fba2 2303 	umull	r2, r3, r2, r3
 80022fa:	0c9a      	lsrs	r2, r3, #18
 80022fc:	4613      	mov	r3, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	4413      	add	r3, r2
 8002302:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002304:	e002      	b.n	800230c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	3b01      	subs	r3, #1
 800230a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f9      	bne.n	8002306 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b01      	cmp	r3, #1
 800231e:	f040 809c 	bne.w	800245a <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002326:	4b57      	ldr	r3, [pc, #348]	@ (8002484 <HAL_ADC_Start_DMA+0x1d8>)
 8002328:	4013      	ands	r3, r2
 800232a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800233c:	2b00      	cmp	r3, #0
 800233e:	d007      	beq.n	8002350 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002344:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002348:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002354:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002358:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800235c:	d106      	bne.n	800236c <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002362:	f023 0206 	bic.w	r2, r3, #6
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	645a      	str	r2, [r3, #68]	@ 0x44
 800236a:	e002      	b.n	8002372 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800237e:	4a42      	ldr	r2, [pc, #264]	@ (8002488 <HAL_ADC_Start_DMA+0x1dc>)
 8002380:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002386:	4a41      	ldr	r2, [pc, #260]	@ (800248c <HAL_ADC_Start_DMA+0x1e0>)
 8002388:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800238e:	4a40      	ldr	r2, [pc, #256]	@ (8002490 <HAL_ADC_Start_DMA+0x1e4>)
 8002390:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800239a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80023aa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689a      	ldr	r2, [r3, #8]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023ba:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	334c      	adds	r3, #76	@ 0x4c
 80023c6:	4619      	mov	r1, r3
 80023c8:	68ba      	ldr	r2, [r7, #8]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f001 f92a 	bl	8003624 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80023d0:	4b30      	ldr	r3, [pc, #192]	@ (8002494 <HAL_ADC_Start_DMA+0x1e8>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 031f 	and.w	r3, r3, #31
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10f      	bne.n	80023fc <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d143      	bne.n	8002472 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80023f8:	609a      	str	r2, [r3, #8]
 80023fa:	e03a      	b.n	8002472 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a25      	ldr	r2, [pc, #148]	@ (8002498 <HAL_ADC_Start_DMA+0x1ec>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d10e      	bne.n	8002424 <HAL_ADC_Start_DMA+0x178>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d107      	bne.n	8002424 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002422:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002424:	4b1b      	ldr	r3, [pc, #108]	@ (8002494 <HAL_ADC_Start_DMA+0x1e8>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 0310 	and.w	r3, r3, #16
 800242c:	2b00      	cmp	r3, #0
 800242e:	d120      	bne.n	8002472 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a19      	ldr	r2, [pc, #100]	@ (800249c <HAL_ADC_Start_DMA+0x1f0>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d11b      	bne.n	8002472 <HAL_ADC_Start_DMA+0x1c6>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d114      	bne.n	8002472 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689a      	ldr	r2, [r3, #8]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	e00b      	b.n	8002472 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245e:	f043 0210 	orr.w	r2, r3, #16
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246a:	f043 0201 	orr.w	r2, r3, #1
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	20000028 	.word	0x20000028
 8002480:	431bde83 	.word	0x431bde83
 8002484:	fffff8fe 	.word	0xfffff8fe
 8002488:	0800297d 	.word	0x0800297d
 800248c:	08002a37 	.word	0x08002a37
 8002490:	08002a53 	.word	0x08002a53
 8002494:	40012300 	.word	0x40012300
 8002498:	40012000 	.word	0x40012000
 800249c:	40012200 	.word	0x40012200

080024a0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80024e6:	2300      	movs	r3, #0
 80024e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d101      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x1c>
 80024f4:	2302      	movs	r3, #2
 80024f6:	e136      	b.n	8002766 <HAL_ADC_ConfigChannel+0x28a>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b09      	cmp	r3, #9
 8002506:	d93a      	bls.n	800257e <HAL_ADC_ConfigChannel+0xa2>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002510:	d035      	beq.n	800257e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68d9      	ldr	r1, [r3, #12]
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	b29b      	uxth	r3, r3
 800251e:	461a      	mov	r2, r3
 8002520:	4613      	mov	r3, r2
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	4413      	add	r3, r2
 8002526:	3b1e      	subs	r3, #30
 8002528:	2207      	movs	r2, #7
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43da      	mvns	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	400a      	ands	r2, r1
 8002536:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a8d      	ldr	r2, [pc, #564]	@ (8002774 <HAL_ADC_ConfigChannel+0x298>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d10a      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68d9      	ldr	r1, [r3, #12]
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	061a      	lsls	r2, r3, #24
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	430a      	orrs	r2, r1
 8002554:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002556:	e035      	b.n	80025c4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68d9      	ldr	r1, [r3, #12]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	b29b      	uxth	r3, r3
 8002568:	4618      	mov	r0, r3
 800256a:	4603      	mov	r3, r0
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	4403      	add	r3, r0
 8002570:	3b1e      	subs	r3, #30
 8002572:	409a      	lsls	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	430a      	orrs	r2, r1
 800257a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800257c:	e022      	b.n	80025c4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6919      	ldr	r1, [r3, #16]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	b29b      	uxth	r3, r3
 800258a:	461a      	mov	r2, r3
 800258c:	4613      	mov	r3, r2
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	4413      	add	r3, r2
 8002592:	2207      	movs	r2, #7
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43da      	mvns	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	400a      	ands	r2, r1
 80025a0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6919      	ldr	r1, [r3, #16]
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	4618      	mov	r0, r3
 80025b4:	4603      	mov	r3, r0
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	4403      	add	r3, r0
 80025ba:	409a      	lsls	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2b06      	cmp	r3, #6
 80025ca:	d824      	bhi.n	8002616 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	4613      	mov	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4413      	add	r3, r2
 80025dc:	3b05      	subs	r3, #5
 80025de:	221f      	movs	r2, #31
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43da      	mvns	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	400a      	ands	r2, r1
 80025ec:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	4618      	mov	r0, r3
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	4613      	mov	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	3b05      	subs	r3, #5
 8002608:	fa00 f203 	lsl.w	r2, r0, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	635a      	str	r2, [r3, #52]	@ 0x34
 8002614:	e04c      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b0c      	cmp	r3, #12
 800261c:	d824      	bhi.n	8002668 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	4613      	mov	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	3b23      	subs	r3, #35	@ 0x23
 8002630:	221f      	movs	r2, #31
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43da      	mvns	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	400a      	ands	r2, r1
 800263e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	b29b      	uxth	r3, r3
 800264c:	4618      	mov	r0, r3
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	4613      	mov	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	3b23      	subs	r3, #35	@ 0x23
 800265a:	fa00 f203 	lsl.w	r2, r0, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	430a      	orrs	r2, r1
 8002664:	631a      	str	r2, [r3, #48]	@ 0x30
 8002666:	e023      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	4613      	mov	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	3b41      	subs	r3, #65	@ 0x41
 800267a:	221f      	movs	r2, #31
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	43da      	mvns	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	400a      	ands	r2, r1
 8002688:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	b29b      	uxth	r3, r3
 8002696:	4618      	mov	r0, r3
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	4613      	mov	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	3b41      	subs	r3, #65	@ 0x41
 80026a4:	fa00 f203 	lsl.w	r2, r0, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a30      	ldr	r2, [pc, #192]	@ (8002778 <HAL_ADC_ConfigChannel+0x29c>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d10a      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x1f4>
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80026c2:	d105      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80026c4:	4b2d      	ldr	r3, [pc, #180]	@ (800277c <HAL_ADC_ConfigChannel+0x2a0>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	4a2c      	ldr	r2, [pc, #176]	@ (800277c <HAL_ADC_ConfigChannel+0x2a0>)
 80026ca:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80026ce:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a28      	ldr	r2, [pc, #160]	@ (8002778 <HAL_ADC_ConfigChannel+0x29c>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d10f      	bne.n	80026fa <HAL_ADC_ConfigChannel+0x21e>
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2b12      	cmp	r3, #18
 80026e0:	d10b      	bne.n	80026fa <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80026e2:	4b26      	ldr	r3, [pc, #152]	@ (800277c <HAL_ADC_ConfigChannel+0x2a0>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	4a25      	ldr	r2, [pc, #148]	@ (800277c <HAL_ADC_ConfigChannel+0x2a0>)
 80026e8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80026ec:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80026ee:	4b23      	ldr	r3, [pc, #140]	@ (800277c <HAL_ADC_ConfigChannel+0x2a0>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	4a22      	ldr	r2, [pc, #136]	@ (800277c <HAL_ADC_ConfigChannel+0x2a0>)
 80026f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80026f8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a1e      	ldr	r2, [pc, #120]	@ (8002778 <HAL_ADC_ConfigChannel+0x29c>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d12b      	bne.n	800275c <HAL_ADC_ConfigChannel+0x280>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a1a      	ldr	r2, [pc, #104]	@ (8002774 <HAL_ADC_ConfigChannel+0x298>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d003      	beq.n	8002716 <HAL_ADC_ConfigChannel+0x23a>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2b11      	cmp	r3, #17
 8002714:	d122      	bne.n	800275c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002716:	4b19      	ldr	r3, [pc, #100]	@ (800277c <HAL_ADC_ConfigChannel+0x2a0>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	4a18      	ldr	r2, [pc, #96]	@ (800277c <HAL_ADC_ConfigChannel+0x2a0>)
 800271c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002720:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002722:	4b16      	ldr	r3, [pc, #88]	@ (800277c <HAL_ADC_ConfigChannel+0x2a0>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	4a15      	ldr	r2, [pc, #84]	@ (800277c <HAL_ADC_ConfigChannel+0x2a0>)
 8002728:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800272c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a10      	ldr	r2, [pc, #64]	@ (8002774 <HAL_ADC_ConfigChannel+0x298>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d111      	bne.n	800275c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002738:	4b11      	ldr	r3, [pc, #68]	@ (8002780 <HAL_ADC_ConfigChannel+0x2a4>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a11      	ldr	r2, [pc, #68]	@ (8002784 <HAL_ADC_ConfigChannel+0x2a8>)
 800273e:	fba2 2303 	umull	r2, r3, r2, r3
 8002742:	0c9a      	lsrs	r2, r3, #18
 8002744:	4613      	mov	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800274e:	e002      	b.n	8002756 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	3b01      	subs	r3, #1
 8002754:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1f9      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	10000012 	.word	0x10000012
 8002778:	40012000 	.word	0x40012000
 800277c:	40012300 	.word	0x40012300
 8002780:	20000028 	.word	0x20000028
 8002784:	431bde83 	.word	0x431bde83

08002788 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002790:	4b78      	ldr	r3, [pc, #480]	@ (8002974 <ADC_Init+0x1ec>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	4a77      	ldr	r2, [pc, #476]	@ (8002974 <ADC_Init+0x1ec>)
 8002796:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800279a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800279c:	4b75      	ldr	r3, [pc, #468]	@ (8002974 <ADC_Init+0x1ec>)
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	4973      	ldr	r1, [pc, #460]	@ (8002974 <ADC_Init+0x1ec>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6859      	ldr	r1, [r3, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	021a      	lsls	r2, r3, #8
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80027dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6859      	ldr	r1, [r3, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689a      	ldr	r2, [r3, #8]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6899      	ldr	r1, [r3, #8]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	430a      	orrs	r2, r1
 8002810:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002816:	4a58      	ldr	r2, [pc, #352]	@ (8002978 <ADC_Init+0x1f0>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d022      	beq.n	8002862 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800282a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6899      	ldr	r1, [r3, #8]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	430a      	orrs	r2, r1
 800283c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800284c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6899      	ldr	r1, [r3, #8]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	430a      	orrs	r2, r1
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	e00f      	b.n	8002882 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002870:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002880:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 0202 	bic.w	r2, r2, #2
 8002890:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6899      	ldr	r1, [r3, #8]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	005a      	lsls	r2, r3, #1
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d01b      	beq.n	80028e8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028be:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80028ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6859      	ldr	r1, [r3, #4]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028da:	3b01      	subs	r3, #1
 80028dc:	035a      	lsls	r2, r3, #13
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	605a      	str	r2, [r3, #4]
 80028e6:	e007      	b.n	80028f8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002906:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	3b01      	subs	r3, #1
 8002914:	051a      	lsls	r2, r3, #20
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800292c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6899      	ldr	r1, [r3, #8]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800293a:	025a      	lsls	r2, r3, #9
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689a      	ldr	r2, [r3, #8]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002952:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6899      	ldr	r1, [r3, #8]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	029a      	lsls	r2, r3, #10
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	609a      	str	r2, [r3, #8]
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	40012300 	.word	0x40012300
 8002978:	0f000001 	.word	0x0f000001

0800297c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002988:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002992:	2b00      	cmp	r3, #0
 8002994:	d13c      	bne.n	8002a10 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d12b      	bne.n	8002a08 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d127      	bne.n	8002a08 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029be:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d006      	beq.n	80029d4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d119      	bne.n	8002a08 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 0220 	bic.w	r2, r2, #32
 80029e2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d105      	bne.n	8002a08 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a00:	f043 0201 	orr.w	r2, r3, #1
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f7ff fd49 	bl	80024a0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a0e:	e00e      	b.n	8002a2e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a14:	f003 0310 	and.w	r3, r3, #16
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d003      	beq.n	8002a24 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f7ff fd53 	bl	80024c8 <HAL_ADC_ErrorCallback>
}
 8002a22:	e004      	b.n	8002a2e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	4798      	blx	r3
}
 8002a2e:	bf00      	nop
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b084      	sub	sp, #16
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a42:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f7ff fd35 	bl	80024b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a4a:	bf00      	nop
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b084      	sub	sp, #16
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a5e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2240      	movs	r2, #64	@ 0x40
 8002a64:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6a:	f043 0204 	orr.w	r2, r3, #4
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f7ff fd28 	bl	80024c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a78:	bf00      	nop
 8002a7a:	3710      	adds	r7, #16
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e0ed      	b.n	8002c6e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d102      	bne.n	8002aa4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7fe fab2 	bl	8001008 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f042 0201 	orr.w	r2, r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ab4:	f7ff fbaa 	bl	800220c <HAL_GetTick>
 8002ab8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002aba:	e012      	b.n	8002ae2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002abc:	f7ff fba6 	bl	800220c <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b0a      	cmp	r3, #10
 8002ac8:	d90b      	bls.n	8002ae2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ace:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2205      	movs	r2, #5
 8002ada:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e0c5      	b.n	8002c6e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d0e5      	beq.n	8002abc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 0202 	bic.w	r2, r2, #2
 8002afe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b00:	f7ff fb84 	bl	800220c <HAL_GetTick>
 8002b04:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b06:	e012      	b.n	8002b2e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b08:	f7ff fb80 	bl	800220c <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b0a      	cmp	r3, #10
 8002b14:	d90b      	bls.n	8002b2e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2205      	movs	r2, #5
 8002b26:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e09f      	b.n	8002c6e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1e5      	bne.n	8002b08 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	7e1b      	ldrb	r3, [r3, #24]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d108      	bne.n	8002b56 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	e007      	b.n	8002b66 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b64:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	7e5b      	ldrb	r3, [r3, #25]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d108      	bne.n	8002b80 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	e007      	b.n	8002b90 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	7e9b      	ldrb	r3, [r3, #26]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d108      	bne.n	8002baa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0220 	orr.w	r2, r2, #32
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	e007      	b.n	8002bba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 0220 	bic.w	r2, r2, #32
 8002bb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	7edb      	ldrb	r3, [r3, #27]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d108      	bne.n	8002bd4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 0210 	bic.w	r2, r2, #16
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	e007      	b.n	8002be4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f042 0210 	orr.w	r2, r2, #16
 8002be2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	7f1b      	ldrb	r3, [r3, #28]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d108      	bne.n	8002bfe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0208 	orr.w	r2, r2, #8
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	e007      	b.n	8002c0e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 0208 	bic.w	r2, r2, #8
 8002c0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	7f5b      	ldrb	r3, [r3, #29]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d108      	bne.n	8002c28 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f042 0204 	orr.w	r2, r2, #4
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	e007      	b.n	8002c38 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0204 	bic.w	r2, r2, #4
 8002c36:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	431a      	orrs	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	431a      	orrs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	ea42 0103 	orr.w	r1, r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	1e5a      	subs	r2, r3, #1
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b08a      	sub	sp, #40	@ 0x28
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d07c      	beq.n	8002db6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d023      	beq.n	8002d0e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 f983 	bl	8002fe4 <HAL_CAN_TxMailbox0CompleteCallback>
 8002cde:	e016      	b.n	8002d0e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	f003 0304 	and.w	r3, r3, #4
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d004      	beq.n	8002cf4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002cf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cf2:	e00c      	b.n	8002d0e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	f003 0308 	and.w	r3, r3, #8
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d004      	beq.n	8002d08 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002d04:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d06:	e002      	b.n	8002d0e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 f989 	bl	8003020 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d024      	beq.n	8002d62 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d20:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 f963 	bl	8002ff8 <HAL_CAN_TxMailbox1CompleteCallback>
 8002d32:	e016      	b.n	8002d62 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d004      	beq.n	8002d48 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d40:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d44:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d46:	e00c      	b.n	8002d62 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d004      	beq.n	8002d5c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d58:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d5a:	e002      	b.n	8002d62 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 f969 	bl	8003034 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d024      	beq.n	8002db6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002d74:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d003      	beq.n	8002d88 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 f943 	bl	800300c <HAL_CAN_TxMailbox2CompleteCallback>
 8002d86:	e016      	b.n	8002db6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d004      	beq.n	8002d9c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d98:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d9a:	e00c      	b.n	8002db6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d004      	beq.n	8002db0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dac:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dae:	e002      	b.n	8002db6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 f949 	bl	8003048 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002db6:	6a3b      	ldr	r3, [r7, #32]
 8002db8:	f003 0308 	and.w	r3, r3, #8
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00c      	beq.n	8002dda <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	f003 0310 	and.w	r3, r3, #16
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d007      	beq.n	8002dda <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dcc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002dd0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2210      	movs	r2, #16
 8002dd8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00b      	beq.n	8002dfc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d006      	beq.n	8002dfc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2208      	movs	r2, #8
 8002df4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f93a 	bl	8003070 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d009      	beq.n	8002e1a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f003 0303 	and.w	r3, r3, #3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d002      	beq.n	8002e1a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 f921 	bl	800305c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00c      	beq.n	8002e3e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d007      	beq.n	8002e3e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e30:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e34:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2210      	movs	r2, #16
 8002e3c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
 8002e40:	f003 0320 	and.w	r3, r3, #32
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00b      	beq.n	8002e60 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	f003 0308 	and.w	r3, r3, #8
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d006      	beq.n	8002e60 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2208      	movs	r2, #8
 8002e58:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 f91c 	bl	8003098 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002e60:	6a3b      	ldr	r3, [r7, #32]
 8002e62:	f003 0310 	and.w	r3, r3, #16
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d009      	beq.n	8002e7e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	f003 0303 	and.w	r3, r3, #3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d002      	beq.n	8002e7e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 f903 	bl	8003084 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
 8002e80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00b      	beq.n	8002ea0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	f003 0310 	and.w	r3, r3, #16
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d006      	beq.n	8002ea0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2210      	movs	r2, #16
 8002e98:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f906 	bl	80030ac <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002ea0:	6a3b      	ldr	r3, [r7, #32]
 8002ea2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00b      	beq.n	8002ec2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	f003 0308 	and.w	r3, r3, #8
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d006      	beq.n	8002ec2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2208      	movs	r2, #8
 8002eba:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 f8ff 	bl	80030c0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d07b      	beq.n	8002fc4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	f003 0304 	and.w	r3, r3, #4
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d072      	beq.n	8002fbc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002ed6:	6a3b      	ldr	r3, [r7, #32]
 8002ed8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d008      	beq.n	8002ef2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eec:	f043 0301 	orr.w	r3, r3, #1
 8002ef0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d008      	beq.n	8002f0e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f08:	f043 0302 	orr.w	r3, r3, #2
 8002f0c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d008      	beq.n	8002f2a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f24:	f043 0304 	orr.w	r3, r3, #4
 8002f28:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002f2a:	6a3b      	ldr	r3, [r7, #32]
 8002f2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d043      	beq.n	8002fbc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d03e      	beq.n	8002fbc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f44:	2b60      	cmp	r3, #96	@ 0x60
 8002f46:	d02b      	beq.n	8002fa0 <HAL_CAN_IRQHandler+0x32a>
 8002f48:	2b60      	cmp	r3, #96	@ 0x60
 8002f4a:	d82e      	bhi.n	8002faa <HAL_CAN_IRQHandler+0x334>
 8002f4c:	2b50      	cmp	r3, #80	@ 0x50
 8002f4e:	d022      	beq.n	8002f96 <HAL_CAN_IRQHandler+0x320>
 8002f50:	2b50      	cmp	r3, #80	@ 0x50
 8002f52:	d82a      	bhi.n	8002faa <HAL_CAN_IRQHandler+0x334>
 8002f54:	2b40      	cmp	r3, #64	@ 0x40
 8002f56:	d019      	beq.n	8002f8c <HAL_CAN_IRQHandler+0x316>
 8002f58:	2b40      	cmp	r3, #64	@ 0x40
 8002f5a:	d826      	bhi.n	8002faa <HAL_CAN_IRQHandler+0x334>
 8002f5c:	2b30      	cmp	r3, #48	@ 0x30
 8002f5e:	d010      	beq.n	8002f82 <HAL_CAN_IRQHandler+0x30c>
 8002f60:	2b30      	cmp	r3, #48	@ 0x30
 8002f62:	d822      	bhi.n	8002faa <HAL_CAN_IRQHandler+0x334>
 8002f64:	2b10      	cmp	r3, #16
 8002f66:	d002      	beq.n	8002f6e <HAL_CAN_IRQHandler+0x2f8>
 8002f68:	2b20      	cmp	r3, #32
 8002f6a:	d005      	beq.n	8002f78 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002f6c:	e01d      	b.n	8002faa <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f70:	f043 0308 	orr.w	r3, r3, #8
 8002f74:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f76:	e019      	b.n	8002fac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7a:	f043 0310 	orr.w	r3, r3, #16
 8002f7e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f80:	e014      	b.n	8002fac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f84:	f043 0320 	orr.w	r3, r3, #32
 8002f88:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f8a:	e00f      	b.n	8002fac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f92:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f94:	e00a      	b.n	8002fac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f9c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f9e:	e005      	b.n	8002fac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fa6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002fa8:	e000      	b.n	8002fac <HAL_CAN_IRQHandler+0x336>
            break;
 8002faa:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	699a      	ldr	r2, [r3, #24]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002fba:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2204      	movs	r2, #4
 8002fc2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d008      	beq.n	8002fdc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f87c 	bl	80030d4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002fdc:	bf00      	nop
 8002fde:	3728      	adds	r7, #40	@ 0x28
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003128 <__NVIC_SetPriorityGrouping+0x40>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003104:	4013      	ands	r3, r2
 8003106:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003110:	4b06      	ldr	r3, [pc, #24]	@ (800312c <__NVIC_SetPriorityGrouping+0x44>)
 8003112:	4313      	orrs	r3, r2
 8003114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003116:	4a04      	ldr	r2, [pc, #16]	@ (8003128 <__NVIC_SetPriorityGrouping+0x40>)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	60d3      	str	r3, [r2, #12]
}
 800311c:	bf00      	nop
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	e000ed00 	.word	0xe000ed00
 800312c:	05fa0000 	.word	0x05fa0000

08003130 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003134:	4b04      	ldr	r3, [pc, #16]	@ (8003148 <__NVIC_GetPriorityGrouping+0x18>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	0a1b      	lsrs	r3, r3, #8
 800313a:	f003 0307 	and.w	r3, r3, #7
}
 800313e:	4618      	mov	r0, r3
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	e000ed00 	.word	0xe000ed00

0800314c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	4603      	mov	r3, r0
 8003154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315a:	2b00      	cmp	r3, #0
 800315c:	db0b      	blt.n	8003176 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800315e:	79fb      	ldrb	r3, [r7, #7]
 8003160:	f003 021f 	and.w	r2, r3, #31
 8003164:	4907      	ldr	r1, [pc, #28]	@ (8003184 <__NVIC_EnableIRQ+0x38>)
 8003166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316a:	095b      	lsrs	r3, r3, #5
 800316c:	2001      	movs	r0, #1
 800316e:	fa00 f202 	lsl.w	r2, r0, r2
 8003172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003176:	bf00      	nop
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	e000e100 	.word	0xe000e100

08003188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	4603      	mov	r3, r0
 8003190:	6039      	str	r1, [r7, #0]
 8003192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003198:	2b00      	cmp	r3, #0
 800319a:	db0a      	blt.n	80031b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	b2da      	uxtb	r2, r3
 80031a0:	490c      	ldr	r1, [pc, #48]	@ (80031d4 <__NVIC_SetPriority+0x4c>)
 80031a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a6:	0112      	lsls	r2, r2, #4
 80031a8:	b2d2      	uxtb	r2, r2
 80031aa:	440b      	add	r3, r1
 80031ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031b0:	e00a      	b.n	80031c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	b2da      	uxtb	r2, r3
 80031b6:	4908      	ldr	r1, [pc, #32]	@ (80031d8 <__NVIC_SetPriority+0x50>)
 80031b8:	79fb      	ldrb	r3, [r7, #7]
 80031ba:	f003 030f 	and.w	r3, r3, #15
 80031be:	3b04      	subs	r3, #4
 80031c0:	0112      	lsls	r2, r2, #4
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	440b      	add	r3, r1
 80031c6:	761a      	strb	r2, [r3, #24]
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	e000e100 	.word	0xe000e100
 80031d8:	e000ed00 	.word	0xe000ed00

080031dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031dc:	b480      	push	{r7}
 80031de:	b089      	sub	sp, #36	@ 0x24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	f1c3 0307 	rsb	r3, r3, #7
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	bf28      	it	cs
 80031fa:	2304      	movcs	r3, #4
 80031fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	3304      	adds	r3, #4
 8003202:	2b06      	cmp	r3, #6
 8003204:	d902      	bls.n	800320c <NVIC_EncodePriority+0x30>
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	3b03      	subs	r3, #3
 800320a:	e000      	b.n	800320e <NVIC_EncodePriority+0x32>
 800320c:	2300      	movs	r3, #0
 800320e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003210:	f04f 32ff 	mov.w	r2, #4294967295
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	43da      	mvns	r2, r3
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	401a      	ands	r2, r3
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003224:	f04f 31ff 	mov.w	r1, #4294967295
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	fa01 f303 	lsl.w	r3, r1, r3
 800322e:	43d9      	mvns	r1, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003234:	4313      	orrs	r3, r2
         );
}
 8003236:	4618      	mov	r0, r3
 8003238:	3724      	adds	r7, #36	@ 0x24
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
	...

08003244 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	3b01      	subs	r3, #1
 8003250:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003254:	d301      	bcc.n	800325a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003256:	2301      	movs	r3, #1
 8003258:	e00f      	b.n	800327a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800325a:	4a0a      	ldr	r2, [pc, #40]	@ (8003284 <SysTick_Config+0x40>)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	3b01      	subs	r3, #1
 8003260:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003262:	210f      	movs	r1, #15
 8003264:	f04f 30ff 	mov.w	r0, #4294967295
 8003268:	f7ff ff8e 	bl	8003188 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800326c:	4b05      	ldr	r3, [pc, #20]	@ (8003284 <SysTick_Config+0x40>)
 800326e:	2200      	movs	r2, #0
 8003270:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003272:	4b04      	ldr	r3, [pc, #16]	@ (8003284 <SysTick_Config+0x40>)
 8003274:	2207      	movs	r2, #7
 8003276:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	e000e010 	.word	0xe000e010

08003288 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f7ff ff29 	bl	80030e8 <__NVIC_SetPriorityGrouping>
}
 8003296:	bf00      	nop
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800329e:	b580      	push	{r7, lr}
 80032a0:	b086      	sub	sp, #24
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	4603      	mov	r3, r0
 80032a6:	60b9      	str	r1, [r7, #8]
 80032a8:	607a      	str	r2, [r7, #4]
 80032aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80032ac:	2300      	movs	r3, #0
 80032ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032b0:	f7ff ff3e 	bl	8003130 <__NVIC_GetPriorityGrouping>
 80032b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	68b9      	ldr	r1, [r7, #8]
 80032ba:	6978      	ldr	r0, [r7, #20]
 80032bc:	f7ff ff8e 	bl	80031dc <NVIC_EncodePriority>
 80032c0:	4602      	mov	r2, r0
 80032c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032c6:	4611      	mov	r1, r2
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff ff5d 	bl	8003188 <__NVIC_SetPriority>
}
 80032ce:	bf00      	nop
 80032d0:	3718      	adds	r7, #24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b082      	sub	sp, #8
 80032da:	af00      	add	r7, sp, #0
 80032dc:	4603      	mov	r3, r0
 80032de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff ff31 	bl	800314c <__NVIC_EnableIRQ>
}
 80032ea:	bf00      	nop
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b082      	sub	sp, #8
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f7ff ffa2 	bl	8003244 <SysTick_Config>
 8003300:	4603      	mov	r3, r0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b082      	sub	sp, #8
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d101      	bne.n	800331c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e014      	b.n	8003346 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	791b      	ldrb	r3, [r3, #4]
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d105      	bne.n	8003332 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7fd fee9 	bl	8001104 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2202      	movs	r2, #2
 8003336:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b082      	sub	sp, #8
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003360:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003364:	d120      	bne.n	80033a8 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800336c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003370:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003374:	d118      	bne.n	80033a8 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2204      	movs	r2, #4
 800337a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	f043 0201 	orr.w	r2, r3, #1
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003390:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80033a0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f82d 	bl	8003402 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80033b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033b6:	d120      	bne.n	80033fa <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80033c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033c6:	d118      	bne.n	80033fa <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2204      	movs	r2, #4
 80033cc:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	f043 0202 	orr.w	r2, r3, #2
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80033e2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80033f2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 f85d 	bl	80034b4 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80033fa:	bf00      	nop
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003402:	b480      	push	{r7}
 8003404:	b083      	sub	sp, #12
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003416:	b480      	push	{r7}
 8003418:	b087      	sub	sp, #28
 800341a:	af00      	add	r7, sp, #0
 800341c:	60f8      	str	r0, [r7, #12]
 800341e:	60b9      	str	r1, [r7, #8]
 8003420:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	795b      	ldrb	r3, [r3, #5]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d101      	bne.n	800342e <HAL_DAC_ConfigChannel+0x18>
 800342a:	2302      	movs	r3, #2
 800342c:	e03c      	b.n	80034a8 <HAL_DAC_ConfigChannel+0x92>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2201      	movs	r2, #1
 8003432:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2202      	movs	r2, #2
 8003438:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f003 0310 	and.w	r3, r3, #16
 8003448:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	43db      	mvns	r3, r3
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	4013      	ands	r3, r2
 8003456:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	4313      	orrs	r3, r2
 8003462:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f003 0310 	and.w	r3, r3, #16
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	4313      	orrs	r3, r2
 8003474:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6819      	ldr	r1, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f003 0310 	and.w	r3, r3, #16
 800348a:	22c0      	movs	r2, #192	@ 0xc0
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	43da      	mvns	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	400a      	ands	r2, r1
 8003498:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2201      	movs	r2, #1
 800349e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	371c      	adds	r7, #28
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80034d4:	f7fe fe9a 	bl	800220c <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e099      	b.n	8003618 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2202      	movs	r2, #2
 80034e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0201 	bic.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003504:	e00f      	b.n	8003526 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003506:	f7fe fe81 	bl	800220c <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b05      	cmp	r3, #5
 8003512:	d908      	bls.n	8003526 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2220      	movs	r2, #32
 8003518:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2203      	movs	r2, #3
 800351e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e078      	b.n	8003618 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1e8      	bne.n	8003506 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	4b38      	ldr	r3, [pc, #224]	@ (8003620 <HAL_DMA_Init+0x158>)
 8003540:	4013      	ands	r3, r2
 8003542:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003552:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800355e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800356a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	4313      	orrs	r3, r2
 8003576:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357c:	2b04      	cmp	r3, #4
 800357e:	d107      	bne.n	8003590 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003588:	4313      	orrs	r3, r2
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	4313      	orrs	r3, r2
 800358e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	f023 0307 	bic.w	r3, r3, #7
 80035a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	d117      	bne.n	80035ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00e      	beq.n	80035ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 fa77 	bl	8003ac0 <DMA_CheckFifoParam>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d008      	beq.n	80035ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2240      	movs	r2, #64	@ 0x40
 80035dc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80035e6:	2301      	movs	r3, #1
 80035e8:	e016      	b.n	8003618 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 fa2e 	bl	8003a54 <DMA_CalcBaseAndBitshift>
 80035f8:	4603      	mov	r3, r0
 80035fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003600:	223f      	movs	r2, #63	@ 0x3f
 8003602:	409a      	lsls	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3718      	adds	r7, #24
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	e010803f 	.word	0xe010803f

08003624 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
 8003630:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003632:	2300      	movs	r3, #0
 8003634:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800363a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003642:	2b01      	cmp	r3, #1
 8003644:	d101      	bne.n	800364a <HAL_DMA_Start_IT+0x26>
 8003646:	2302      	movs	r3, #2
 8003648:	e048      	b.n	80036dc <HAL_DMA_Start_IT+0xb8>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b01      	cmp	r3, #1
 800365c:	d137      	bne.n	80036ce <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2202      	movs	r2, #2
 8003662:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	68b9      	ldr	r1, [r7, #8]
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f000 f9c0 	bl	80039f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800367c:	223f      	movs	r2, #63	@ 0x3f
 800367e:	409a      	lsls	r2, r3
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f042 0216 	orr.w	r2, r2, #22
 8003692:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	695a      	ldr	r2, [r3, #20]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80036a2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d007      	beq.n	80036bc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f042 0208 	orr.w	r2, r2, #8
 80036ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f042 0201 	orr.w	r2, r2, #1
 80036ca:	601a      	str	r2, [r3, #0]
 80036cc:	e005      	b.n	80036da <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80036d6:	2302      	movs	r3, #2
 80036d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80036da:	7dfb      	ldrb	r3, [r7, #23]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3718      	adds	r7, #24
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80036ec:	2300      	movs	r3, #0
 80036ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80036f0:	4b8e      	ldr	r3, [pc, #568]	@ (800392c <HAL_DMA_IRQHandler+0x248>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a8e      	ldr	r2, [pc, #568]	@ (8003930 <HAL_DMA_IRQHandler+0x24c>)
 80036f6:	fba2 2303 	umull	r2, r3, r2, r3
 80036fa:	0a9b      	lsrs	r3, r3, #10
 80036fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003702:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800370e:	2208      	movs	r2, #8
 8003710:	409a      	lsls	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	4013      	ands	r3, r2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d01a      	beq.n	8003750 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0304 	and.w	r3, r3, #4
 8003724:	2b00      	cmp	r3, #0
 8003726:	d013      	beq.n	8003750 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 0204 	bic.w	r2, r2, #4
 8003736:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800373c:	2208      	movs	r2, #8
 800373e:	409a      	lsls	r2, r3
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003748:	f043 0201 	orr.w	r2, r3, #1
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003754:	2201      	movs	r2, #1
 8003756:	409a      	lsls	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4013      	ands	r3, r2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d012      	beq.n	8003786 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00b      	beq.n	8003786 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003772:	2201      	movs	r2, #1
 8003774:	409a      	lsls	r2, r3
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800377e:	f043 0202 	orr.w	r2, r3, #2
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800378a:	2204      	movs	r2, #4
 800378c:	409a      	lsls	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	4013      	ands	r3, r2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d012      	beq.n	80037bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00b      	beq.n	80037bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a8:	2204      	movs	r2, #4
 80037aa:	409a      	lsls	r2, r3
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037b4:	f043 0204 	orr.w	r2, r3, #4
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037c0:	2210      	movs	r2, #16
 80037c2:	409a      	lsls	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4013      	ands	r3, r2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d043      	beq.n	8003854 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0308 	and.w	r3, r3, #8
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d03c      	beq.n	8003854 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037de:	2210      	movs	r2, #16
 80037e0:	409a      	lsls	r2, r3
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d018      	beq.n	8003826 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d108      	bne.n	8003814 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003806:	2b00      	cmp	r3, #0
 8003808:	d024      	beq.n	8003854 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	4798      	blx	r3
 8003812:	e01f      	b.n	8003854 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003818:	2b00      	cmp	r3, #0
 800381a:	d01b      	beq.n	8003854 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	4798      	blx	r3
 8003824:	e016      	b.n	8003854 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003830:	2b00      	cmp	r3, #0
 8003832:	d107      	bne.n	8003844 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 0208 	bic.w	r2, r2, #8
 8003842:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003848:	2b00      	cmp	r3, #0
 800384a:	d003      	beq.n	8003854 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003858:	2220      	movs	r2, #32
 800385a:	409a      	lsls	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	4013      	ands	r3, r2
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 808f 	beq.w	8003984 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0310 	and.w	r3, r3, #16
 8003870:	2b00      	cmp	r3, #0
 8003872:	f000 8087 	beq.w	8003984 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800387a:	2220      	movs	r2, #32
 800387c:	409a      	lsls	r2, r3
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b05      	cmp	r3, #5
 800388c:	d136      	bne.n	80038fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0216 	bic.w	r2, r2, #22
 800389c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	695a      	ldr	r2, [r3, #20]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d103      	bne.n	80038be <HAL_DMA_IRQHandler+0x1da>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d007      	beq.n	80038ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0208 	bic.w	r2, r2, #8
 80038cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038d2:	223f      	movs	r2, #63	@ 0x3f
 80038d4:	409a      	lsls	r2, r3
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d07e      	beq.n	80039f0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	4798      	blx	r3
        }
        return;
 80038fa:	e079      	b.n	80039f0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d01d      	beq.n	8003946 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10d      	bne.n	8003934 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800391c:	2b00      	cmp	r3, #0
 800391e:	d031      	beq.n	8003984 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	4798      	blx	r3
 8003928:	e02c      	b.n	8003984 <HAL_DMA_IRQHandler+0x2a0>
 800392a:	bf00      	nop
 800392c:	20000028 	.word	0x20000028
 8003930:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003938:	2b00      	cmp	r3, #0
 800393a:	d023      	beq.n	8003984 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	4798      	blx	r3
 8003944:	e01e      	b.n	8003984 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10f      	bne.n	8003974 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 0210 	bic.w	r2, r2, #16
 8003962:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003978:	2b00      	cmp	r3, #0
 800397a:	d003      	beq.n	8003984 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003988:	2b00      	cmp	r3, #0
 800398a:	d032      	beq.n	80039f2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b00      	cmp	r3, #0
 8003996:	d022      	beq.n	80039de <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2205      	movs	r2, #5
 800399c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 0201 	bic.w	r2, r2, #1
 80039ae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	3301      	adds	r3, #1
 80039b4:	60bb      	str	r3, [r7, #8]
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d307      	bcc.n	80039cc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1f2      	bne.n	80039b0 <HAL_DMA_IRQHandler+0x2cc>
 80039ca:	e000      	b.n	80039ce <HAL_DMA_IRQHandler+0x2ea>
          break;
 80039cc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d005      	beq.n	80039f2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	4798      	blx	r3
 80039ee:	e000      	b.n	80039f2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80039f0:	bf00      	nop
    }
  }
}
 80039f2:	3718      	adds	r7, #24
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
 8003a04:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003a14:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	2b40      	cmp	r3, #64	@ 0x40
 8003a24:	d108      	bne.n	8003a38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a36:	e007      	b.n	8003a48 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68ba      	ldr	r2, [r7, #8]
 8003a3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	60da      	str	r2, [r3, #12]
}
 8003a48:	bf00      	nop
 8003a4a:	3714      	adds	r7, #20
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	3b10      	subs	r3, #16
 8003a64:	4a13      	ldr	r2, [pc, #76]	@ (8003ab4 <DMA_CalcBaseAndBitshift+0x60>)
 8003a66:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6a:	091b      	lsrs	r3, r3, #4
 8003a6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a6e:	4a12      	ldr	r2, [pc, #72]	@ (8003ab8 <DMA_CalcBaseAndBitshift+0x64>)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4413      	add	r3, r2
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2b03      	cmp	r3, #3
 8003a80:	d908      	bls.n	8003a94 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	461a      	mov	r2, r3
 8003a88:	4b0c      	ldr	r3, [pc, #48]	@ (8003abc <DMA_CalcBaseAndBitshift+0x68>)
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	1d1a      	adds	r2, r3, #4
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	659a      	str	r2, [r3, #88]	@ 0x58
 8003a92:	e006      	b.n	8003aa2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	461a      	mov	r2, r3
 8003a9a:	4b08      	ldr	r3, [pc, #32]	@ (8003abc <DMA_CalcBaseAndBitshift+0x68>)
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	aaaaaaab 	.word	0xaaaaaaab
 8003ab8:	080080e8 	.word	0x080080e8
 8003abc:	fffffc00 	.word	0xfffffc00

08003ac0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d11f      	bne.n	8003b1a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	2b03      	cmp	r3, #3
 8003ade:	d856      	bhi.n	8003b8e <DMA_CheckFifoParam+0xce>
 8003ae0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ae8 <DMA_CheckFifoParam+0x28>)
 8003ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae6:	bf00      	nop
 8003ae8:	08003af9 	.word	0x08003af9
 8003aec:	08003b0b 	.word	0x08003b0b
 8003af0:	08003af9 	.word	0x08003af9
 8003af4:	08003b8f 	.word	0x08003b8f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003afc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d046      	beq.n	8003b92 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b08:	e043      	b.n	8003b92 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b0e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b12:	d140      	bne.n	8003b96 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b18:	e03d      	b.n	8003b96 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b22:	d121      	bne.n	8003b68 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	2b03      	cmp	r3, #3
 8003b28:	d837      	bhi.n	8003b9a <DMA_CheckFifoParam+0xda>
 8003b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8003b30 <DMA_CheckFifoParam+0x70>)
 8003b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b30:	08003b41 	.word	0x08003b41
 8003b34:	08003b47 	.word	0x08003b47
 8003b38:	08003b41 	.word	0x08003b41
 8003b3c:	08003b59 	.word	0x08003b59
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	73fb      	strb	r3, [r7, #15]
      break;
 8003b44:	e030      	b.n	8003ba8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d025      	beq.n	8003b9e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b56:	e022      	b.n	8003b9e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b5c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b60:	d11f      	bne.n	8003ba2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b66:	e01c      	b.n	8003ba2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d903      	bls.n	8003b76 <DMA_CheckFifoParam+0xb6>
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	2b03      	cmp	r3, #3
 8003b72:	d003      	beq.n	8003b7c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b74:	e018      	b.n	8003ba8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	73fb      	strb	r3, [r7, #15]
      break;
 8003b7a:	e015      	b.n	8003ba8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00e      	beq.n	8003ba6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b8c:	e00b      	b.n	8003ba6 <DMA_CheckFifoParam+0xe6>
      break;
 8003b8e:	bf00      	nop
 8003b90:	e00a      	b.n	8003ba8 <DMA_CheckFifoParam+0xe8>
      break;
 8003b92:	bf00      	nop
 8003b94:	e008      	b.n	8003ba8 <DMA_CheckFifoParam+0xe8>
      break;
 8003b96:	bf00      	nop
 8003b98:	e006      	b.n	8003ba8 <DMA_CheckFifoParam+0xe8>
      break;
 8003b9a:	bf00      	nop
 8003b9c:	e004      	b.n	8003ba8 <DMA_CheckFifoParam+0xe8>
      break;
 8003b9e:	bf00      	nop
 8003ba0:	e002      	b.n	8003ba8 <DMA_CheckFifoParam+0xe8>
      break;   
 8003ba2:	bf00      	nop
 8003ba4:	e000      	b.n	8003ba8 <DMA_CheckFifoParam+0xe8>
      break;
 8003ba6:	bf00      	nop
    }
  } 
  
  return status; 
 8003ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop

08003bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b089      	sub	sp, #36	@ 0x24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	61fb      	str	r3, [r7, #28]
 8003bd6:	e175      	b.n	8003ec4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003bd8:	2201      	movs	r2, #1
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	4013      	ands	r3, r2
 8003bea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	f040 8164 	bne.w	8003ebe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d005      	beq.n	8003c0e <HAL_GPIO_Init+0x56>
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f003 0303 	and.w	r3, r3, #3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d130      	bne.n	8003c70 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	2203      	movs	r2, #3
 8003c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1e:	43db      	mvns	r3, r3
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	4013      	ands	r3, r2
 8003c24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	68da      	ldr	r2, [r3, #12]
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c44:	2201      	movs	r2, #1
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	4013      	ands	r3, r2
 8003c52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	091b      	lsrs	r3, r3, #4
 8003c5a:	f003 0201 	and.w	r2, r3, #1
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	fa02 f303 	lsl.w	r3, r2, r3
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f003 0303 	and.w	r3, r3, #3
 8003c78:	2b03      	cmp	r3, #3
 8003c7a:	d017      	beq.n	8003cac <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	2203      	movs	r2, #3
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	4013      	ands	r3, r2
 8003c92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f003 0303 	and.w	r3, r3, #3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d123      	bne.n	8003d00 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	08da      	lsrs	r2, r3, #3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3208      	adds	r2, #8
 8003cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	f003 0307 	and.w	r3, r3, #7
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	220f      	movs	r2, #15
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	43db      	mvns	r3, r3
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	691a      	ldr	r2, [r3, #16]
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	f003 0307 	and.w	r3, r3, #7
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	08da      	lsrs	r2, r3, #3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	3208      	adds	r2, #8
 8003cfa:	69b9      	ldr	r1, [r7, #24]
 8003cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	2203      	movs	r2, #3
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	43db      	mvns	r3, r3
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	4013      	ands	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f003 0203 	and.w	r2, r3, #3
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	fa02 f303 	lsl.w	r3, r2, r3
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 80be 	beq.w	8003ebe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d42:	4b66      	ldr	r3, [pc, #408]	@ (8003edc <HAL_GPIO_Init+0x324>)
 8003d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d46:	4a65      	ldr	r2, [pc, #404]	@ (8003edc <HAL_GPIO_Init+0x324>)
 8003d48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d4e:	4b63      	ldr	r3, [pc, #396]	@ (8003edc <HAL_GPIO_Init+0x324>)
 8003d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d56:	60fb      	str	r3, [r7, #12]
 8003d58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003d5a:	4a61      	ldr	r2, [pc, #388]	@ (8003ee0 <HAL_GPIO_Init+0x328>)
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	089b      	lsrs	r3, r3, #2
 8003d60:	3302      	adds	r3, #2
 8003d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	f003 0303 	and.w	r3, r3, #3
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	220f      	movs	r2, #15
 8003d72:	fa02 f303 	lsl.w	r3, r2, r3
 8003d76:	43db      	mvns	r3, r3
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a58      	ldr	r2, [pc, #352]	@ (8003ee4 <HAL_GPIO_Init+0x32c>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d037      	beq.n	8003df6 <HAL_GPIO_Init+0x23e>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a57      	ldr	r2, [pc, #348]	@ (8003ee8 <HAL_GPIO_Init+0x330>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d031      	beq.n	8003df2 <HAL_GPIO_Init+0x23a>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a56      	ldr	r2, [pc, #344]	@ (8003eec <HAL_GPIO_Init+0x334>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d02b      	beq.n	8003dee <HAL_GPIO_Init+0x236>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a55      	ldr	r2, [pc, #340]	@ (8003ef0 <HAL_GPIO_Init+0x338>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d025      	beq.n	8003dea <HAL_GPIO_Init+0x232>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a54      	ldr	r2, [pc, #336]	@ (8003ef4 <HAL_GPIO_Init+0x33c>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d01f      	beq.n	8003de6 <HAL_GPIO_Init+0x22e>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a53      	ldr	r2, [pc, #332]	@ (8003ef8 <HAL_GPIO_Init+0x340>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d019      	beq.n	8003de2 <HAL_GPIO_Init+0x22a>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a52      	ldr	r2, [pc, #328]	@ (8003efc <HAL_GPIO_Init+0x344>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d013      	beq.n	8003dde <HAL_GPIO_Init+0x226>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a51      	ldr	r2, [pc, #324]	@ (8003f00 <HAL_GPIO_Init+0x348>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d00d      	beq.n	8003dda <HAL_GPIO_Init+0x222>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a50      	ldr	r2, [pc, #320]	@ (8003f04 <HAL_GPIO_Init+0x34c>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d007      	beq.n	8003dd6 <HAL_GPIO_Init+0x21e>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a4f      	ldr	r2, [pc, #316]	@ (8003f08 <HAL_GPIO_Init+0x350>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d101      	bne.n	8003dd2 <HAL_GPIO_Init+0x21a>
 8003dce:	2309      	movs	r3, #9
 8003dd0:	e012      	b.n	8003df8 <HAL_GPIO_Init+0x240>
 8003dd2:	230a      	movs	r3, #10
 8003dd4:	e010      	b.n	8003df8 <HAL_GPIO_Init+0x240>
 8003dd6:	2308      	movs	r3, #8
 8003dd8:	e00e      	b.n	8003df8 <HAL_GPIO_Init+0x240>
 8003dda:	2307      	movs	r3, #7
 8003ddc:	e00c      	b.n	8003df8 <HAL_GPIO_Init+0x240>
 8003dde:	2306      	movs	r3, #6
 8003de0:	e00a      	b.n	8003df8 <HAL_GPIO_Init+0x240>
 8003de2:	2305      	movs	r3, #5
 8003de4:	e008      	b.n	8003df8 <HAL_GPIO_Init+0x240>
 8003de6:	2304      	movs	r3, #4
 8003de8:	e006      	b.n	8003df8 <HAL_GPIO_Init+0x240>
 8003dea:	2303      	movs	r3, #3
 8003dec:	e004      	b.n	8003df8 <HAL_GPIO_Init+0x240>
 8003dee:	2302      	movs	r3, #2
 8003df0:	e002      	b.n	8003df8 <HAL_GPIO_Init+0x240>
 8003df2:	2301      	movs	r3, #1
 8003df4:	e000      	b.n	8003df8 <HAL_GPIO_Init+0x240>
 8003df6:	2300      	movs	r3, #0
 8003df8:	69fa      	ldr	r2, [r7, #28]
 8003dfa:	f002 0203 	and.w	r2, r2, #3
 8003dfe:	0092      	lsls	r2, r2, #2
 8003e00:	4093      	lsls	r3, r2
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003e08:	4935      	ldr	r1, [pc, #212]	@ (8003ee0 <HAL_GPIO_Init+0x328>)
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	089b      	lsrs	r3, r3, #2
 8003e0e:	3302      	adds	r3, #2
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e16:	4b3d      	ldr	r3, [pc, #244]	@ (8003f0c <HAL_GPIO_Init+0x354>)
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	43db      	mvns	r3, r3
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	4013      	ands	r3, r2
 8003e24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003e32:	69ba      	ldr	r2, [r7, #24]
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e3a:	4a34      	ldr	r2, [pc, #208]	@ (8003f0c <HAL_GPIO_Init+0x354>)
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e40:	4b32      	ldr	r3, [pc, #200]	@ (8003f0c <HAL_GPIO_Init+0x354>)
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	43db      	mvns	r3, r3
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d003      	beq.n	8003e64 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e64:	4a29      	ldr	r2, [pc, #164]	@ (8003f0c <HAL_GPIO_Init+0x354>)
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e6a:	4b28      	ldr	r3, [pc, #160]	@ (8003f0c <HAL_GPIO_Init+0x354>)
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	43db      	mvns	r3, r3
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	4013      	ands	r3, r2
 8003e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d003      	beq.n	8003e8e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e8e:	4a1f      	ldr	r2, [pc, #124]	@ (8003f0c <HAL_GPIO_Init+0x354>)
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e94:	4b1d      	ldr	r3, [pc, #116]	@ (8003f0c <HAL_GPIO_Init+0x354>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	43db      	mvns	r3, r3
 8003e9e:	69ba      	ldr	r2, [r7, #24]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d003      	beq.n	8003eb8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003eb8:	4a14      	ldr	r2, [pc, #80]	@ (8003f0c <HAL_GPIO_Init+0x354>)
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	61fb      	str	r3, [r7, #28]
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	2b0f      	cmp	r3, #15
 8003ec8:	f67f ae86 	bls.w	8003bd8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003ecc:	bf00      	nop
 8003ece:	bf00      	nop
 8003ed0:	3724      	adds	r7, #36	@ 0x24
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	40023800 	.word	0x40023800
 8003ee0:	40013800 	.word	0x40013800
 8003ee4:	40020000 	.word	0x40020000
 8003ee8:	40020400 	.word	0x40020400
 8003eec:	40020800 	.word	0x40020800
 8003ef0:	40020c00 	.word	0x40020c00
 8003ef4:	40021000 	.word	0x40021000
 8003ef8:	40021400 	.word	0x40021400
 8003efc:	40021800 	.word	0x40021800
 8003f00:	40021c00 	.word	0x40021c00
 8003f04:	40022000 	.word	0x40022000
 8003f08:	40022400 	.word	0x40022400
 8003f0c:	40013c00 	.word	0x40013c00

08003f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	460b      	mov	r3, r1
 8003f1a:	807b      	strh	r3, [r7, #2]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f20:	787b      	ldrb	r3, [r7, #1]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f26:	887a      	ldrh	r2, [r7, #2]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003f2c:	e003      	b.n	8003f36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003f2e:	887b      	ldrh	r3, [r7, #2]
 8003f30:	041a      	lsls	r2, r3, #16
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	619a      	str	r2, [r3, #24]
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
	...

08003f44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e07f      	b.n	8004056 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d106      	bne.n	8003f70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7fd fa9e 	bl	80014ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2224      	movs	r2, #36	@ 0x24
 8003f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 0201 	bic.w	r2, r2, #1
 8003f86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f94:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003fa4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d107      	bne.n	8003fbe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	689a      	ldr	r2, [r3, #8]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003fba:	609a      	str	r2, [r3, #8]
 8003fbc:	e006      	b.n	8003fcc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689a      	ldr	r2, [r3, #8]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003fca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d104      	bne.n	8003fde <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003fdc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	6859      	ldr	r1, [r3, #4]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	4b1d      	ldr	r3, [pc, #116]	@ (8004060 <HAL_I2C_Init+0x11c>)
 8003fea:	430b      	orrs	r3, r1
 8003fec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68da      	ldr	r2, [r3, #12]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ffc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691a      	ldr	r2, [r3, #16]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	430a      	orrs	r2, r1
 8004016:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	69d9      	ldr	r1, [r3, #28]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a1a      	ldr	r2, [r3, #32]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0201 	orr.w	r2, r2, #1
 8004036:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2220      	movs	r2, #32
 8004042:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	02008000 	.word	0x02008000

08004064 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b20      	cmp	r3, #32
 8004078:	d138      	bne.n	80040ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004080:	2b01      	cmp	r3, #1
 8004082:	d101      	bne.n	8004088 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004084:	2302      	movs	r3, #2
 8004086:	e032      	b.n	80040ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2224      	movs	r2, #36	@ 0x24
 8004094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0201 	bic.w	r2, r2, #1
 80040a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80040b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6819      	ldr	r1, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	430a      	orrs	r2, r1
 80040c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f042 0201 	orr.w	r2, r2, #1
 80040d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2220      	movs	r2, #32
 80040dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80040e8:	2300      	movs	r3, #0
 80040ea:	e000      	b.n	80040ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80040ec:	2302      	movs	r3, #2
  }
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b085      	sub	sp, #20
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
 8004102:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800410a:	b2db      	uxtb	r3, r3
 800410c:	2b20      	cmp	r3, #32
 800410e:	d139      	bne.n	8004184 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004116:	2b01      	cmp	r3, #1
 8004118:	d101      	bne.n	800411e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800411a:	2302      	movs	r3, #2
 800411c:	e033      	b.n	8004186 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2224      	movs	r2, #36	@ 0x24
 800412a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 0201 	bic.w	r2, r2, #1
 800413c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800414c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	021b      	lsls	r3, r3, #8
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	4313      	orrs	r3, r2
 8004156:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0201 	orr.w	r2, r2, #1
 800416e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2220      	movs	r2, #32
 8004174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004180:	2300      	movs	r3, #0
 8004182:	e000      	b.n	8004186 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004184:	2302      	movs	r3, #2
  }
}
 8004186:	4618      	mov	r0, r3
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
	...

08004194 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800419a:	2300      	movs	r3, #0
 800419c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800419e:	4b23      	ldr	r3, [pc, #140]	@ (800422c <HAL_PWREx_EnableOverDrive+0x98>)
 80041a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a2:	4a22      	ldr	r2, [pc, #136]	@ (800422c <HAL_PWREx_EnableOverDrive+0x98>)
 80041a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80041aa:	4b20      	ldr	r3, [pc, #128]	@ (800422c <HAL_PWREx_EnableOverDrive+0x98>)
 80041ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041b2:	603b      	str	r3, [r7, #0]
 80041b4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80041b6:	4b1e      	ldr	r3, [pc, #120]	@ (8004230 <HAL_PWREx_EnableOverDrive+0x9c>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a1d      	ldr	r2, [pc, #116]	@ (8004230 <HAL_PWREx_EnableOverDrive+0x9c>)
 80041bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041c0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041c2:	f7fe f823 	bl	800220c <HAL_GetTick>
 80041c6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80041c8:	e009      	b.n	80041de <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80041ca:	f7fe f81f 	bl	800220c <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80041d8:	d901      	bls.n	80041de <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e022      	b.n	8004224 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80041de:	4b14      	ldr	r3, [pc, #80]	@ (8004230 <HAL_PWREx_EnableOverDrive+0x9c>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041ea:	d1ee      	bne.n	80041ca <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80041ec:	4b10      	ldr	r3, [pc, #64]	@ (8004230 <HAL_PWREx_EnableOverDrive+0x9c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a0f      	ldr	r2, [pc, #60]	@ (8004230 <HAL_PWREx_EnableOverDrive+0x9c>)
 80041f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041f6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041f8:	f7fe f808 	bl	800220c <HAL_GetTick>
 80041fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80041fe:	e009      	b.n	8004214 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004200:	f7fe f804 	bl	800220c <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800420e:	d901      	bls.n	8004214 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e007      	b.n	8004224 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004214:	4b06      	ldr	r3, [pc, #24]	@ (8004230 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800421c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004220:	d1ee      	bne.n	8004200 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40023800 	.word	0x40023800
 8004230:	40007000 	.word	0x40007000

08004234 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800423c:	2300      	movs	r3, #0
 800423e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e29b      	b.n	8004782 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	f000 8087 	beq.w	8004366 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004258:	4b96      	ldr	r3, [pc, #600]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f003 030c 	and.w	r3, r3, #12
 8004260:	2b04      	cmp	r3, #4
 8004262:	d00c      	beq.n	800427e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004264:	4b93      	ldr	r3, [pc, #588]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f003 030c 	and.w	r3, r3, #12
 800426c:	2b08      	cmp	r3, #8
 800426e:	d112      	bne.n	8004296 <HAL_RCC_OscConfig+0x62>
 8004270:	4b90      	ldr	r3, [pc, #576]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004278:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800427c:	d10b      	bne.n	8004296 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800427e:	4b8d      	ldr	r3, [pc, #564]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d06c      	beq.n	8004364 <HAL_RCC_OscConfig+0x130>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d168      	bne.n	8004364 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e275      	b.n	8004782 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800429e:	d106      	bne.n	80042ae <HAL_RCC_OscConfig+0x7a>
 80042a0:	4b84      	ldr	r3, [pc, #528]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a83      	ldr	r2, [pc, #524]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042aa:	6013      	str	r3, [r2, #0]
 80042ac:	e02e      	b.n	800430c <HAL_RCC_OscConfig+0xd8>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10c      	bne.n	80042d0 <HAL_RCC_OscConfig+0x9c>
 80042b6:	4b7f      	ldr	r3, [pc, #508]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a7e      	ldr	r2, [pc, #504]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	4b7c      	ldr	r3, [pc, #496]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a7b      	ldr	r2, [pc, #492]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042cc:	6013      	str	r3, [r2, #0]
 80042ce:	e01d      	b.n	800430c <HAL_RCC_OscConfig+0xd8>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042d8:	d10c      	bne.n	80042f4 <HAL_RCC_OscConfig+0xc0>
 80042da:	4b76      	ldr	r3, [pc, #472]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a75      	ldr	r2, [pc, #468]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	4b73      	ldr	r3, [pc, #460]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a72      	ldr	r2, [pc, #456]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042f0:	6013      	str	r3, [r2, #0]
 80042f2:	e00b      	b.n	800430c <HAL_RCC_OscConfig+0xd8>
 80042f4:	4b6f      	ldr	r3, [pc, #444]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a6e      	ldr	r2, [pc, #440]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042fe:	6013      	str	r3, [r2, #0]
 8004300:	4b6c      	ldr	r3, [pc, #432]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a6b      	ldr	r2, [pc, #428]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004306:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800430a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d013      	beq.n	800433c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004314:	f7fd ff7a 	bl	800220c <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800431c:	f7fd ff76 	bl	800220c <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b64      	cmp	r3, #100	@ 0x64
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e229      	b.n	8004782 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800432e:	4b61      	ldr	r3, [pc, #388]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d0f0      	beq.n	800431c <HAL_RCC_OscConfig+0xe8>
 800433a:	e014      	b.n	8004366 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433c:	f7fd ff66 	bl	800220c <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004344:	f7fd ff62 	bl	800220c <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b64      	cmp	r3, #100	@ 0x64
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e215      	b.n	8004782 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004356:	4b57      	ldr	r3, [pc, #348]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1f0      	bne.n	8004344 <HAL_RCC_OscConfig+0x110>
 8004362:	e000      	b.n	8004366 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d069      	beq.n	8004446 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004372:	4b50      	ldr	r3, [pc, #320]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 030c 	and.w	r3, r3, #12
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00b      	beq.n	8004396 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800437e:	4b4d      	ldr	r3, [pc, #308]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f003 030c 	and.w	r3, r3, #12
 8004386:	2b08      	cmp	r3, #8
 8004388:	d11c      	bne.n	80043c4 <HAL_RCC_OscConfig+0x190>
 800438a:	4b4a      	ldr	r3, [pc, #296]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d116      	bne.n	80043c4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004396:	4b47      	ldr	r3, [pc, #284]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d005      	beq.n	80043ae <HAL_RCC_OscConfig+0x17a>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d001      	beq.n	80043ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e1e9      	b.n	8004782 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ae:	4b41      	ldr	r3, [pc, #260]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	493d      	ldr	r1, [pc, #244]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043c2:	e040      	b.n	8004446 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d023      	beq.n	8004414 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043cc:	4b39      	ldr	r3, [pc, #228]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a38      	ldr	r2, [pc, #224]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 80043d2:	f043 0301 	orr.w	r3, r3, #1
 80043d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d8:	f7fd ff18 	bl	800220c <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043e0:	f7fd ff14 	bl	800220c <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e1c7      	b.n	8004782 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043f2:	4b30      	ldr	r3, [pc, #192]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0f0      	beq.n	80043e0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043fe:	4b2d      	ldr	r3, [pc, #180]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	4929      	ldr	r1, [pc, #164]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 800440e:	4313      	orrs	r3, r2
 8004410:	600b      	str	r3, [r1, #0]
 8004412:	e018      	b.n	8004446 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004414:	4b27      	ldr	r3, [pc, #156]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a26      	ldr	r2, [pc, #152]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 800441a:	f023 0301 	bic.w	r3, r3, #1
 800441e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004420:	f7fd fef4 	bl	800220c <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004428:	f7fd fef0 	bl	800220c <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e1a3      	b.n	8004782 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800443a:	4b1e      	ldr	r3, [pc, #120]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1f0      	bne.n	8004428 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0308 	and.w	r3, r3, #8
 800444e:	2b00      	cmp	r3, #0
 8004450:	d038      	beq.n	80044c4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d019      	beq.n	800448e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800445a:	4b16      	ldr	r3, [pc, #88]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 800445c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800445e:	4a15      	ldr	r2, [pc, #84]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004460:	f043 0301 	orr.w	r3, r3, #1
 8004464:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004466:	f7fd fed1 	bl	800220c <HAL_GetTick>
 800446a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800446c:	e008      	b.n	8004480 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800446e:	f7fd fecd 	bl	800220c <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d901      	bls.n	8004480 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e180      	b.n	8004782 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004480:	4b0c      	ldr	r3, [pc, #48]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004482:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d0f0      	beq.n	800446e <HAL_RCC_OscConfig+0x23a>
 800448c:	e01a      	b.n	80044c4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800448e:	4b09      	ldr	r3, [pc, #36]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004490:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004492:	4a08      	ldr	r2, [pc, #32]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004494:	f023 0301 	bic.w	r3, r3, #1
 8004498:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800449a:	f7fd feb7 	bl	800220c <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044a0:	e00a      	b.n	80044b8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044a2:	f7fd feb3 	bl	800220c <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d903      	bls.n	80044b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e166      	b.n	8004782 <HAL_RCC_OscConfig+0x54e>
 80044b4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044b8:	4b92      	ldr	r3, [pc, #584]	@ (8004704 <HAL_RCC_OscConfig+0x4d0>)
 80044ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1ee      	bne.n	80044a2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0304 	and.w	r3, r3, #4
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 80a4 	beq.w	800461a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044d2:	4b8c      	ldr	r3, [pc, #560]	@ (8004704 <HAL_RCC_OscConfig+0x4d0>)
 80044d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10d      	bne.n	80044fa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80044de:	4b89      	ldr	r3, [pc, #548]	@ (8004704 <HAL_RCC_OscConfig+0x4d0>)
 80044e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e2:	4a88      	ldr	r2, [pc, #544]	@ (8004704 <HAL_RCC_OscConfig+0x4d0>)
 80044e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80044ea:	4b86      	ldr	r3, [pc, #536]	@ (8004704 <HAL_RCC_OscConfig+0x4d0>)
 80044ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044f2:	60bb      	str	r3, [r7, #8]
 80044f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044f6:	2301      	movs	r3, #1
 80044f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044fa:	4b83      	ldr	r3, [pc, #524]	@ (8004708 <HAL_RCC_OscConfig+0x4d4>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004502:	2b00      	cmp	r3, #0
 8004504:	d118      	bne.n	8004538 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004506:	4b80      	ldr	r3, [pc, #512]	@ (8004708 <HAL_RCC_OscConfig+0x4d4>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a7f      	ldr	r2, [pc, #508]	@ (8004708 <HAL_RCC_OscConfig+0x4d4>)
 800450c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004510:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004512:	f7fd fe7b 	bl	800220c <HAL_GetTick>
 8004516:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004518:	e008      	b.n	800452c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800451a:	f7fd fe77 	bl	800220c <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b64      	cmp	r3, #100	@ 0x64
 8004526:	d901      	bls.n	800452c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e12a      	b.n	8004782 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800452c:	4b76      	ldr	r3, [pc, #472]	@ (8004708 <HAL_RCC_OscConfig+0x4d4>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004534:	2b00      	cmp	r3, #0
 8004536:	d0f0      	beq.n	800451a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d106      	bne.n	800454e <HAL_RCC_OscConfig+0x31a>
 8004540:	4b70      	ldr	r3, [pc, #448]	@ (8004704 <HAL_RCC_OscConfig+0x4d0>)
 8004542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004544:	4a6f      	ldr	r2, [pc, #444]	@ (8004704 <HAL_RCC_OscConfig+0x4d0>)
 8004546:	f043 0301 	orr.w	r3, r3, #1
 800454a:	6713      	str	r3, [r2, #112]	@ 0x70
 800454c:	e02d      	b.n	80045aa <HAL_RCC_OscConfig+0x376>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10c      	bne.n	8004570 <HAL_RCC_OscConfig+0x33c>
 8004556:	4b6b      	ldr	r3, [pc, #428]	@ (8004704 <HAL_RCC_OscConfig+0x4d0>)
 8004558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800455a:	4a6a      	ldr	r2, [pc, #424]	@ (8004704 <HAL_RCC_OscConfig+0x4d0>)
 800455c:	f023 0301 	bic.w	r3, r3, #1
 8004560:	6713      	str	r3, [r2, #112]	@ 0x70
 8004562:	4b68      	ldr	r3, [pc, #416]	@ (8004704 <HAL_RCC_OscConfig+0x4d0>)
 8004564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004566:	4a67      	ldr	r2, [pc, #412]	@ (8004704 <HAL_RCC_OscConfig+0x4d0>)
 8004568:	f023 0304 	bic.w	r3, r3, #4
 800456c:	6713      	str	r3, [r2, #112]	@ 0x70
 800456e:	e01c      	b.n	80045aa <HAL_RCC_OscConfig+0x376>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	2b05      	cmp	r3, #5
 8004576:	d10c      	bne.n	8004592 <HAL_RCC_OscConfig+0x35e>
 8004578:	4b62      	ldr	r3, [pc, #392]	@ (8004704 <HAL_RCC_OscConfig+0x4d0>)
 800457a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800457c:	4a61      	ldr	r2, [pc, #388]	@ (8004704 <HAL_RCC_OscConfig+0x4d0>)
 800457e:	f043 0304 	orr.w	r3, r3, #4
 8004582:	6713      	str	r3, [r2, #112]	@ 0x70
 8004584:	4b5f      	ldr	r3, [pc, #380]	@ (8004704 <HAL_RCC_OscConfig+0x4d0>)
 8004586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004588:	4a5e      	ldr	r2, [pc, #376]	@ (8004704 <HAL_RCC_OscConfig+0x4d0>)
 800458a:	f043 0301 	orr.w	r3, r3, #1
 800458e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004590:	e00b      	b.n	80045aa <HAL_RCC_OscConfig+0x376>
 8004592:	4b5c      	ldr	r3, [pc, #368]	@ (8004704 <HAL_RCC_OscConfig+0x4d0>)
 8004594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004596:	4a5b      	ldr	r2, [pc, #364]	@ (8004704 <HAL_RCC_OscConfig+0x4d0>)
 8004598:	f023 0301 	bic.w	r3, r3, #1
 800459c:	6713      	str	r3, [r2, #112]	@ 0x70
 800459e:	4b59      	ldr	r3, [pc, #356]	@ (8004704 <HAL_RCC_OscConfig+0x4d0>)
 80045a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a2:	4a58      	ldr	r2, [pc, #352]	@ (8004704 <HAL_RCC_OscConfig+0x4d0>)
 80045a4:	f023 0304 	bic.w	r3, r3, #4
 80045a8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d015      	beq.n	80045de <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b2:	f7fd fe2b 	bl	800220c <HAL_GetTick>
 80045b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b8:	e00a      	b.n	80045d0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ba:	f7fd fe27 	bl	800220c <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e0d8      	b.n	8004782 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d0:	4b4c      	ldr	r3, [pc, #304]	@ (8004704 <HAL_RCC_OscConfig+0x4d0>)
 80045d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0ee      	beq.n	80045ba <HAL_RCC_OscConfig+0x386>
 80045dc:	e014      	b.n	8004608 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045de:	f7fd fe15 	bl	800220c <HAL_GetTick>
 80045e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045e4:	e00a      	b.n	80045fc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e6:	f7fd fe11 	bl	800220c <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e0c2      	b.n	8004782 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045fc:	4b41      	ldr	r3, [pc, #260]	@ (8004704 <HAL_RCC_OscConfig+0x4d0>)
 80045fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1ee      	bne.n	80045e6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004608:	7dfb      	ldrb	r3, [r7, #23]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d105      	bne.n	800461a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800460e:	4b3d      	ldr	r3, [pc, #244]	@ (8004704 <HAL_RCC_OscConfig+0x4d0>)
 8004610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004612:	4a3c      	ldr	r2, [pc, #240]	@ (8004704 <HAL_RCC_OscConfig+0x4d0>)
 8004614:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004618:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 80ae 	beq.w	8004780 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004624:	4b37      	ldr	r3, [pc, #220]	@ (8004704 <HAL_RCC_OscConfig+0x4d0>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f003 030c 	and.w	r3, r3, #12
 800462c:	2b08      	cmp	r3, #8
 800462e:	d06d      	beq.n	800470c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	2b02      	cmp	r3, #2
 8004636:	d14b      	bne.n	80046d0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004638:	4b32      	ldr	r3, [pc, #200]	@ (8004704 <HAL_RCC_OscConfig+0x4d0>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a31      	ldr	r2, [pc, #196]	@ (8004704 <HAL_RCC_OscConfig+0x4d0>)
 800463e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004642:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004644:	f7fd fde2 	bl	800220c <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800464c:	f7fd fdde 	bl	800220c <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e091      	b.n	8004782 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800465e:	4b29      	ldr	r3, [pc, #164]	@ (8004704 <HAL_RCC_OscConfig+0x4d0>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1f0      	bne.n	800464c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	69da      	ldr	r2, [r3, #28]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	431a      	orrs	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004678:	019b      	lsls	r3, r3, #6
 800467a:	431a      	orrs	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004680:	085b      	lsrs	r3, r3, #1
 8004682:	3b01      	subs	r3, #1
 8004684:	041b      	lsls	r3, r3, #16
 8004686:	431a      	orrs	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800468c:	061b      	lsls	r3, r3, #24
 800468e:	431a      	orrs	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004694:	071b      	lsls	r3, r3, #28
 8004696:	491b      	ldr	r1, [pc, #108]	@ (8004704 <HAL_RCC_OscConfig+0x4d0>)
 8004698:	4313      	orrs	r3, r2
 800469a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800469c:	4b19      	ldr	r3, [pc, #100]	@ (8004704 <HAL_RCC_OscConfig+0x4d0>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a18      	ldr	r2, [pc, #96]	@ (8004704 <HAL_RCC_OscConfig+0x4d0>)
 80046a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a8:	f7fd fdb0 	bl	800220c <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046b0:	f7fd fdac 	bl	800220c <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e05f      	b.n	8004782 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046c2:	4b10      	ldr	r3, [pc, #64]	@ (8004704 <HAL_RCC_OscConfig+0x4d0>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d0f0      	beq.n	80046b0 <HAL_RCC_OscConfig+0x47c>
 80046ce:	e057      	b.n	8004780 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004704 <HAL_RCC_OscConfig+0x4d0>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a0b      	ldr	r2, [pc, #44]	@ (8004704 <HAL_RCC_OscConfig+0x4d0>)
 80046d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046dc:	f7fd fd96 	bl	800220c <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046e2:	e008      	b.n	80046f6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046e4:	f7fd fd92 	bl	800220c <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e045      	b.n	8004782 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f6:	4b03      	ldr	r3, [pc, #12]	@ (8004704 <HAL_RCC_OscConfig+0x4d0>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1f0      	bne.n	80046e4 <HAL_RCC_OscConfig+0x4b0>
 8004702:	e03d      	b.n	8004780 <HAL_RCC_OscConfig+0x54c>
 8004704:	40023800 	.word	0x40023800
 8004708:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800470c:	4b1f      	ldr	r3, [pc, #124]	@ (800478c <HAL_RCC_OscConfig+0x558>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d030      	beq.n	800477c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004724:	429a      	cmp	r2, r3
 8004726:	d129      	bne.n	800477c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004732:	429a      	cmp	r2, r3
 8004734:	d122      	bne.n	800477c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800473c:	4013      	ands	r3, r2
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004742:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004744:	4293      	cmp	r3, r2
 8004746:	d119      	bne.n	800477c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004752:	085b      	lsrs	r3, r3, #1
 8004754:	3b01      	subs	r3, #1
 8004756:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004758:	429a      	cmp	r2, r3
 800475a:	d10f      	bne.n	800477c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004766:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004768:	429a      	cmp	r2, r3
 800476a:	d107      	bne.n	800477c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004776:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004778:	429a      	cmp	r2, r3
 800477a:	d001      	beq.n	8004780 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e000      	b.n	8004782 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3718      	adds	r7, #24
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	40023800 	.word	0x40023800

08004790 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800479a:	2300      	movs	r3, #0
 800479c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d101      	bne.n	80047a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e0d0      	b.n	800494a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047a8:	4b6a      	ldr	r3, [pc, #424]	@ (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 030f 	and.w	r3, r3, #15
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d910      	bls.n	80047d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047b6:	4b67      	ldr	r3, [pc, #412]	@ (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f023 020f 	bic.w	r2, r3, #15
 80047be:	4965      	ldr	r1, [pc, #404]	@ (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047c6:	4b63      	ldr	r3, [pc, #396]	@ (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 030f 	and.w	r3, r3, #15
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d001      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e0b8      	b.n	800494a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d020      	beq.n	8004826 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d005      	beq.n	80047fc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047f0:	4b59      	ldr	r3, [pc, #356]	@ (8004958 <HAL_RCC_ClockConfig+0x1c8>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	4a58      	ldr	r2, [pc, #352]	@ (8004958 <HAL_RCC_ClockConfig+0x1c8>)
 80047f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80047fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0308 	and.w	r3, r3, #8
 8004804:	2b00      	cmp	r3, #0
 8004806:	d005      	beq.n	8004814 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004808:	4b53      	ldr	r3, [pc, #332]	@ (8004958 <HAL_RCC_ClockConfig+0x1c8>)
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	4a52      	ldr	r2, [pc, #328]	@ (8004958 <HAL_RCC_ClockConfig+0x1c8>)
 800480e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004812:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004814:	4b50      	ldr	r3, [pc, #320]	@ (8004958 <HAL_RCC_ClockConfig+0x1c8>)
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	494d      	ldr	r1, [pc, #308]	@ (8004958 <HAL_RCC_ClockConfig+0x1c8>)
 8004822:	4313      	orrs	r3, r2
 8004824:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b00      	cmp	r3, #0
 8004830:	d040      	beq.n	80048b4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d107      	bne.n	800484a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800483a:	4b47      	ldr	r3, [pc, #284]	@ (8004958 <HAL_RCC_ClockConfig+0x1c8>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d115      	bne.n	8004872 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e07f      	b.n	800494a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	2b02      	cmp	r3, #2
 8004850:	d107      	bne.n	8004862 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004852:	4b41      	ldr	r3, [pc, #260]	@ (8004958 <HAL_RCC_ClockConfig+0x1c8>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d109      	bne.n	8004872 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e073      	b.n	800494a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004862:	4b3d      	ldr	r3, [pc, #244]	@ (8004958 <HAL_RCC_ClockConfig+0x1c8>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e06b      	b.n	800494a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004872:	4b39      	ldr	r3, [pc, #228]	@ (8004958 <HAL_RCC_ClockConfig+0x1c8>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f023 0203 	bic.w	r2, r3, #3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	4936      	ldr	r1, [pc, #216]	@ (8004958 <HAL_RCC_ClockConfig+0x1c8>)
 8004880:	4313      	orrs	r3, r2
 8004882:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004884:	f7fd fcc2 	bl	800220c <HAL_GetTick>
 8004888:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800488a:	e00a      	b.n	80048a2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800488c:	f7fd fcbe 	bl	800220c <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	f241 3288 	movw	r2, #5000	@ 0x1388
 800489a:	4293      	cmp	r3, r2
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e053      	b.n	800494a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a2:	4b2d      	ldr	r3, [pc, #180]	@ (8004958 <HAL_RCC_ClockConfig+0x1c8>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f003 020c 	and.w	r2, r3, #12
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d1eb      	bne.n	800488c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048b4:	4b27      	ldr	r3, [pc, #156]	@ (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 030f 	and.w	r3, r3, #15
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d210      	bcs.n	80048e4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048c2:	4b24      	ldr	r3, [pc, #144]	@ (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f023 020f 	bic.w	r2, r3, #15
 80048ca:	4922      	ldr	r1, [pc, #136]	@ (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048d2:	4b20      	ldr	r3, [pc, #128]	@ (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 030f 	and.w	r3, r3, #15
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d001      	beq.n	80048e4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e032      	b.n	800494a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0304 	and.w	r3, r3, #4
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d008      	beq.n	8004902 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048f0:	4b19      	ldr	r3, [pc, #100]	@ (8004958 <HAL_RCC_ClockConfig+0x1c8>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	4916      	ldr	r1, [pc, #88]	@ (8004958 <HAL_RCC_ClockConfig+0x1c8>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0308 	and.w	r3, r3, #8
 800490a:	2b00      	cmp	r3, #0
 800490c:	d009      	beq.n	8004922 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800490e:	4b12      	ldr	r3, [pc, #72]	@ (8004958 <HAL_RCC_ClockConfig+0x1c8>)
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	00db      	lsls	r3, r3, #3
 800491c:	490e      	ldr	r1, [pc, #56]	@ (8004958 <HAL_RCC_ClockConfig+0x1c8>)
 800491e:	4313      	orrs	r3, r2
 8004920:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004922:	f000 f821 	bl	8004968 <HAL_RCC_GetSysClockFreq>
 8004926:	4602      	mov	r2, r0
 8004928:	4b0b      	ldr	r3, [pc, #44]	@ (8004958 <HAL_RCC_ClockConfig+0x1c8>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	091b      	lsrs	r3, r3, #4
 800492e:	f003 030f 	and.w	r3, r3, #15
 8004932:	490a      	ldr	r1, [pc, #40]	@ (800495c <HAL_RCC_ClockConfig+0x1cc>)
 8004934:	5ccb      	ldrb	r3, [r1, r3]
 8004936:	fa22 f303 	lsr.w	r3, r2, r3
 800493a:	4a09      	ldr	r2, [pc, #36]	@ (8004960 <HAL_RCC_ClockConfig+0x1d0>)
 800493c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800493e:	4b09      	ldr	r3, [pc, #36]	@ (8004964 <HAL_RCC_ClockConfig+0x1d4>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4618      	mov	r0, r3
 8004944:	f7fd fc1e 	bl	8002184 <HAL_InitTick>

  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	40023c00 	.word	0x40023c00
 8004958:	40023800 	.word	0x40023800
 800495c:	080080d8 	.word	0x080080d8
 8004960:	20000028 	.word	0x20000028
 8004964:	2000002c 	.word	0x2000002c

08004968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800496c:	b090      	sub	sp, #64	@ 0x40
 800496e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004970:	2300      	movs	r3, #0
 8004972:	637b      	str	r3, [r7, #52]	@ 0x34
 8004974:	2300      	movs	r3, #0
 8004976:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004978:	2300      	movs	r3, #0
 800497a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800497c:	2300      	movs	r3, #0
 800497e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004980:	4b59      	ldr	r3, [pc, #356]	@ (8004ae8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f003 030c 	and.w	r3, r3, #12
 8004988:	2b08      	cmp	r3, #8
 800498a:	d00d      	beq.n	80049a8 <HAL_RCC_GetSysClockFreq+0x40>
 800498c:	2b08      	cmp	r3, #8
 800498e:	f200 80a1 	bhi.w	8004ad4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004992:	2b00      	cmp	r3, #0
 8004994:	d002      	beq.n	800499c <HAL_RCC_GetSysClockFreq+0x34>
 8004996:	2b04      	cmp	r3, #4
 8004998:	d003      	beq.n	80049a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800499a:	e09b      	b.n	8004ad4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800499c:	4b53      	ldr	r3, [pc, #332]	@ (8004aec <HAL_RCC_GetSysClockFreq+0x184>)
 800499e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80049a0:	e09b      	b.n	8004ada <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049a2:	4b53      	ldr	r3, [pc, #332]	@ (8004af0 <HAL_RCC_GetSysClockFreq+0x188>)
 80049a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80049a6:	e098      	b.n	8004ada <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049a8:	4b4f      	ldr	r3, [pc, #316]	@ (8004ae8 <HAL_RCC_GetSysClockFreq+0x180>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049b0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80049b2:	4b4d      	ldr	r3, [pc, #308]	@ (8004ae8 <HAL_RCC_GetSysClockFreq+0x180>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d028      	beq.n	8004a10 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049be:	4b4a      	ldr	r3, [pc, #296]	@ (8004ae8 <HAL_RCC_GetSysClockFreq+0x180>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	099b      	lsrs	r3, r3, #6
 80049c4:	2200      	movs	r2, #0
 80049c6:	623b      	str	r3, [r7, #32]
 80049c8:	627a      	str	r2, [r7, #36]	@ 0x24
 80049ca:	6a3b      	ldr	r3, [r7, #32]
 80049cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80049d0:	2100      	movs	r1, #0
 80049d2:	4b47      	ldr	r3, [pc, #284]	@ (8004af0 <HAL_RCC_GetSysClockFreq+0x188>)
 80049d4:	fb03 f201 	mul.w	r2, r3, r1
 80049d8:	2300      	movs	r3, #0
 80049da:	fb00 f303 	mul.w	r3, r0, r3
 80049de:	4413      	add	r3, r2
 80049e0:	4a43      	ldr	r2, [pc, #268]	@ (8004af0 <HAL_RCC_GetSysClockFreq+0x188>)
 80049e2:	fba0 1202 	umull	r1, r2, r0, r2
 80049e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049e8:	460a      	mov	r2, r1
 80049ea:	62ba      	str	r2, [r7, #40]	@ 0x28
 80049ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049ee:	4413      	add	r3, r2
 80049f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049f4:	2200      	movs	r2, #0
 80049f6:	61bb      	str	r3, [r7, #24]
 80049f8:	61fa      	str	r2, [r7, #28]
 80049fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004a02:	f7fb fc19 	bl	8000238 <__aeabi_uldivmod>
 8004a06:	4602      	mov	r2, r0
 8004a08:	460b      	mov	r3, r1
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a0e:	e053      	b.n	8004ab8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a10:	4b35      	ldr	r3, [pc, #212]	@ (8004ae8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	099b      	lsrs	r3, r3, #6
 8004a16:	2200      	movs	r2, #0
 8004a18:	613b      	str	r3, [r7, #16]
 8004a1a:	617a      	str	r2, [r7, #20]
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004a22:	f04f 0b00 	mov.w	fp, #0
 8004a26:	4652      	mov	r2, sl
 8004a28:	465b      	mov	r3, fp
 8004a2a:	f04f 0000 	mov.w	r0, #0
 8004a2e:	f04f 0100 	mov.w	r1, #0
 8004a32:	0159      	lsls	r1, r3, #5
 8004a34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a38:	0150      	lsls	r0, r2, #5
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	ebb2 080a 	subs.w	r8, r2, sl
 8004a42:	eb63 090b 	sbc.w	r9, r3, fp
 8004a46:	f04f 0200 	mov.w	r2, #0
 8004a4a:	f04f 0300 	mov.w	r3, #0
 8004a4e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004a52:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004a56:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004a5a:	ebb2 0408 	subs.w	r4, r2, r8
 8004a5e:	eb63 0509 	sbc.w	r5, r3, r9
 8004a62:	f04f 0200 	mov.w	r2, #0
 8004a66:	f04f 0300 	mov.w	r3, #0
 8004a6a:	00eb      	lsls	r3, r5, #3
 8004a6c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a70:	00e2      	lsls	r2, r4, #3
 8004a72:	4614      	mov	r4, r2
 8004a74:	461d      	mov	r5, r3
 8004a76:	eb14 030a 	adds.w	r3, r4, sl
 8004a7a:	603b      	str	r3, [r7, #0]
 8004a7c:	eb45 030b 	adc.w	r3, r5, fp
 8004a80:	607b      	str	r3, [r7, #4]
 8004a82:	f04f 0200 	mov.w	r2, #0
 8004a86:	f04f 0300 	mov.w	r3, #0
 8004a8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a8e:	4629      	mov	r1, r5
 8004a90:	028b      	lsls	r3, r1, #10
 8004a92:	4621      	mov	r1, r4
 8004a94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a98:	4621      	mov	r1, r4
 8004a9a:	028a      	lsls	r2, r1, #10
 8004a9c:	4610      	mov	r0, r2
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	60bb      	str	r3, [r7, #8]
 8004aa6:	60fa      	str	r2, [r7, #12]
 8004aa8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004aac:	f7fb fbc4 	bl	8000238 <__aeabi_uldivmod>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ae8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	0c1b      	lsrs	r3, r3, #16
 8004abe:	f003 0303 	and.w	r3, r3, #3
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	005b      	lsls	r3, r3, #1
 8004ac6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004ac8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004ad2:	e002      	b.n	8004ada <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ad4:	4b05      	ldr	r3, [pc, #20]	@ (8004aec <HAL_RCC_GetSysClockFreq+0x184>)
 8004ad6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004ad8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3740      	adds	r7, #64	@ 0x40
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ae6:	bf00      	nop
 8004ae8:	40023800 	.word	0x40023800
 8004aec:	00f42400 	.word	0x00f42400
 8004af0:	01312d00 	.word	0x01312d00

08004af4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b088      	sub	sp, #32
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004afc:	2300      	movs	r3, #0
 8004afe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004b00:	2300      	movs	r3, #0
 8004b02:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004b04:	2300      	movs	r3, #0
 8004b06:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d012      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b1c:	4b69      	ldr	r3, [pc, #420]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	4a68      	ldr	r2, [pc, #416]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b22:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004b26:	6093      	str	r3, [r2, #8]
 8004b28:	4b66      	ldr	r3, [pc, #408]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b30:	4964      	ldr	r1, [pc, #400]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d017      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b4e:	4b5d      	ldr	r3, [pc, #372]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b54:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b5c:	4959      	ldr	r1, [pc, #356]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b6c:	d101      	bne.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d017      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b8a:	4b4e      	ldr	r3, [pc, #312]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b90:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b98:	494a      	ldr	r1, [pc, #296]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ba8:	d101      	bne.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004baa:	2301      	movs	r3, #1
 8004bac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d001      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0320 	and.w	r3, r3, #32
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f000 808b 	beq.w	8004cee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bd8:	4b3a      	ldr	r3, [pc, #232]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bdc:	4a39      	ldr	r2, [pc, #228]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004be2:	6413      	str	r3, [r2, #64]	@ 0x40
 8004be4:	4b37      	ldr	r3, [pc, #220]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bec:	60bb      	str	r3, [r7, #8]
 8004bee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004bf0:	4b35      	ldr	r3, [pc, #212]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a34      	ldr	r2, [pc, #208]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004bf6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bfc:	f7fd fb06 	bl	800220c <HAL_GetTick>
 8004c00:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c02:	e008      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c04:	f7fd fb02 	bl	800220c <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b64      	cmp	r3, #100	@ 0x64
 8004c10:	d901      	bls.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e38f      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c16:	4b2c      	ldr	r3, [pc, #176]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d0f0      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c22:	4b28      	ldr	r3, [pc, #160]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c2a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d035      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d02e      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c40:	4b20      	ldr	r3, [pc, #128]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c48:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c4a:	4b1e      	ldr	r3, [pc, #120]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c4e:	4a1d      	ldr	r2, [pc, #116]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c54:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c56:	4b1b      	ldr	r3, [pc, #108]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c5a:	4a1a      	ldr	r2, [pc, #104]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c60:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004c62:	4a18      	ldr	r2, [pc, #96]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c68:	4b16      	ldr	r3, [pc, #88]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d114      	bne.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c74:	f7fd faca 	bl	800220c <HAL_GetTick>
 8004c78:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c7a:	e00a      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c7c:	f7fd fac6 	bl	800220c <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e351      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c92:	4b0c      	ldr	r3, [pc, #48]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d0ee      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ca6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004caa:	d111      	bne.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004cac:	4b05      	ldr	r3, [pc, #20]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004cb8:	4b04      	ldr	r3, [pc, #16]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004cba:	400b      	ands	r3, r1
 8004cbc:	4901      	ldr	r1, [pc, #4]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	608b      	str	r3, [r1, #8]
 8004cc2:	e00b      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004cc4:	40023800 	.word	0x40023800
 8004cc8:	40007000 	.word	0x40007000
 8004ccc:	0ffffcff 	.word	0x0ffffcff
 8004cd0:	4bac      	ldr	r3, [pc, #688]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	4aab      	ldr	r2, [pc, #684]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cd6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004cda:	6093      	str	r3, [r2, #8]
 8004cdc:	4ba9      	ldr	r3, [pc, #676]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cde:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ce8:	49a6      	ldr	r1, [pc, #664]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0310 	and.w	r3, r3, #16
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d010      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004cfa:	4ba2      	ldr	r3, [pc, #648]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d00:	4aa0      	ldr	r2, [pc, #640]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d06:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004d0a:	4b9e      	ldr	r3, [pc, #632]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d0c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d14:	499b      	ldr	r1, [pc, #620]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00a      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d28:	4b96      	ldr	r3, [pc, #600]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d2e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d36:	4993      	ldr	r1, [pc, #588]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00a      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d4a:	4b8e      	ldr	r3, [pc, #568]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d50:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d58:	498a      	ldr	r1, [pc, #552]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00a      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d6c:	4b85      	ldr	r3, [pc, #532]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d7a:	4982      	ldr	r1, [pc, #520]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00a      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d8e:	4b7d      	ldr	r3, [pc, #500]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d94:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d9c:	4979      	ldr	r1, [pc, #484]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00a      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004db0:	4b74      	ldr	r3, [pc, #464]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004db6:	f023 0203 	bic.w	r2, r3, #3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dbe:	4971      	ldr	r1, [pc, #452]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00a      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004dd2:	4b6c      	ldr	r3, [pc, #432]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dd8:	f023 020c 	bic.w	r2, r3, #12
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004de0:	4968      	ldr	r1, [pc, #416]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00a      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004df4:	4b63      	ldr	r3, [pc, #396]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dfa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e02:	4960      	ldr	r1, [pc, #384]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00a      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e16:	4b5b      	ldr	r3, [pc, #364]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e1c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e24:	4957      	ldr	r1, [pc, #348]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00a      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e38:	4b52      	ldr	r3, [pc, #328]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e3e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e46:	494f      	ldr	r1, [pc, #316]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00a      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004e5a:	4b4a      	ldr	r3, [pc, #296]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e60:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e68:	4946      	ldr	r1, [pc, #280]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00a      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004e7c:	4b41      	ldr	r3, [pc, #260]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e82:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e8a:	493e      	ldr	r1, [pc, #248]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004e9e:	4b39      	ldr	r3, [pc, #228]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ea4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eac:	4935      	ldr	r1, [pc, #212]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00a      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ec0:	4b30      	ldr	r3, [pc, #192]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ec6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ece:	492d      	ldr	r1, [pc, #180]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d011      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004ee2:	4b28      	ldr	r3, [pc, #160]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ee8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ef0:	4924      	ldr	r1, [pc, #144]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004efc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f00:	d101      	bne.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004f02:	2301      	movs	r3, #1
 8004f04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0308 	and.w	r3, r3, #8
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d001      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004f12:	2301      	movs	r3, #1
 8004f14:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00a      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f22:	4b18      	ldr	r3, [pc, #96]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f28:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f30:	4914      	ldr	r1, [pc, #80]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00b      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f44:	4b0f      	ldr	r3, [pc, #60]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f4a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f54:	490b      	ldr	r1, [pc, #44]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00f      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004f68:	4b06      	ldr	r3, [pc, #24]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f6e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f78:	4902      	ldr	r1, [pc, #8]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004f80:	e002      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004f82:	bf00      	nop
 8004f84:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00b      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f94:	4b8a      	ldr	r3, [pc, #552]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f9a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fa4:	4986      	ldr	r1, [pc, #536]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00b      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004fb8:	4b81      	ldr	r3, [pc, #516]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fbe:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fc8:	497d      	ldr	r1, [pc, #500]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d006      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f000 80d6 	beq.w	8005190 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004fe4:	4b76      	ldr	r3, [pc, #472]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a75      	ldr	r2, [pc, #468]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004fee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ff0:	f7fd f90c 	bl	800220c <HAL_GetTick>
 8004ff4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ff6:	e008      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ff8:	f7fd f908 	bl	800220c <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b64      	cmp	r3, #100	@ 0x64
 8005004:	d901      	bls.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e195      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800500a:	4b6d      	ldr	r3, [pc, #436]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1f0      	bne.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	d021      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005026:	2b00      	cmp	r3, #0
 8005028:	d11d      	bne.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800502a:	4b65      	ldr	r3, [pc, #404]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800502c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005030:	0c1b      	lsrs	r3, r3, #16
 8005032:	f003 0303 	and.w	r3, r3, #3
 8005036:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005038:	4b61      	ldr	r3, [pc, #388]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800503a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800503e:	0e1b      	lsrs	r3, r3, #24
 8005040:	f003 030f 	and.w	r3, r3, #15
 8005044:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	019a      	lsls	r2, r3, #6
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	041b      	lsls	r3, r3, #16
 8005050:	431a      	orrs	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	061b      	lsls	r3, r3, #24
 8005056:	431a      	orrs	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	071b      	lsls	r3, r3, #28
 800505e:	4958      	ldr	r1, [pc, #352]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005060:	4313      	orrs	r3, r2
 8005062:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d004      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005076:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800507a:	d00a      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005084:	2b00      	cmp	r3, #0
 8005086:	d02e      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800508c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005090:	d129      	bne.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005092:	4b4b      	ldr	r3, [pc, #300]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005094:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005098:	0c1b      	lsrs	r3, r3, #16
 800509a:	f003 0303 	and.w	r3, r3, #3
 800509e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80050a0:	4b47      	ldr	r3, [pc, #284]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050a6:	0f1b      	lsrs	r3, r3, #28
 80050a8:	f003 0307 	and.w	r3, r3, #7
 80050ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	019a      	lsls	r2, r3, #6
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	041b      	lsls	r3, r3, #16
 80050b8:	431a      	orrs	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	061b      	lsls	r3, r3, #24
 80050c0:	431a      	orrs	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	071b      	lsls	r3, r3, #28
 80050c6:	493e      	ldr	r1, [pc, #248]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80050ce:	4b3c      	ldr	r3, [pc, #240]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80050d4:	f023 021f 	bic.w	r2, r3, #31
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050dc:	3b01      	subs	r3, #1
 80050de:	4938      	ldr	r1, [pc, #224]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d01d      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80050f2:	4b33      	ldr	r3, [pc, #204]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050f8:	0e1b      	lsrs	r3, r3, #24
 80050fa:	f003 030f 	and.w	r3, r3, #15
 80050fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005100:	4b2f      	ldr	r3, [pc, #188]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005102:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005106:	0f1b      	lsrs	r3, r3, #28
 8005108:	f003 0307 	and.w	r3, r3, #7
 800510c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	019a      	lsls	r2, r3, #6
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	041b      	lsls	r3, r3, #16
 800511a:	431a      	orrs	r2, r3
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	061b      	lsls	r3, r3, #24
 8005120:	431a      	orrs	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	071b      	lsls	r3, r3, #28
 8005126:	4926      	ldr	r1, [pc, #152]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005128:	4313      	orrs	r3, r2
 800512a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d011      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	019a      	lsls	r2, r3, #6
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	041b      	lsls	r3, r3, #16
 8005146:	431a      	orrs	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	061b      	lsls	r3, r3, #24
 800514e:	431a      	orrs	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	071b      	lsls	r3, r3, #28
 8005156:	491a      	ldr	r1, [pc, #104]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005158:	4313      	orrs	r3, r2
 800515a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800515e:	4b18      	ldr	r3, [pc, #96]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a17      	ldr	r2, [pc, #92]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005164:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005168:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800516a:	f7fd f84f 	bl	800220c <HAL_GetTick>
 800516e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005170:	e008      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005172:	f7fd f84b 	bl	800220c <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	2b64      	cmp	r3, #100	@ 0x64
 800517e:	d901      	bls.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e0d8      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005184:	4b0e      	ldr	r3, [pc, #56]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d0f0      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	2b01      	cmp	r3, #1
 8005194:	f040 80ce 	bne.w	8005334 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005198:	4b09      	ldr	r3, [pc, #36]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a08      	ldr	r2, [pc, #32]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800519e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051a4:	f7fd f832 	bl	800220c <HAL_GetTick>
 80051a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051aa:	e00b      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80051ac:	f7fd f82e 	bl	800220c <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b64      	cmp	r3, #100	@ 0x64
 80051b8:	d904      	bls.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e0bb      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80051be:	bf00      	nop
 80051c0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051c4:	4b5e      	ldr	r3, [pc, #376]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051d0:	d0ec      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d003      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d009      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d02e      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d12a      	bne.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80051fa:	4b51      	ldr	r3, [pc, #324]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005200:	0c1b      	lsrs	r3, r3, #16
 8005202:	f003 0303 	and.w	r3, r3, #3
 8005206:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005208:	4b4d      	ldr	r3, [pc, #308]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800520a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800520e:	0f1b      	lsrs	r3, r3, #28
 8005210:	f003 0307 	and.w	r3, r3, #7
 8005214:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	019a      	lsls	r2, r3, #6
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	041b      	lsls	r3, r3, #16
 8005220:	431a      	orrs	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	061b      	lsls	r3, r3, #24
 8005228:	431a      	orrs	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	071b      	lsls	r3, r3, #28
 800522e:	4944      	ldr	r1, [pc, #272]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005230:	4313      	orrs	r3, r2
 8005232:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005236:	4b42      	ldr	r3, [pc, #264]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005238:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800523c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005244:	3b01      	subs	r3, #1
 8005246:	021b      	lsls	r3, r3, #8
 8005248:	493d      	ldr	r1, [pc, #244]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800524a:	4313      	orrs	r3, r2
 800524c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d022      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005260:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005264:	d11d      	bne.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005266:	4b36      	ldr	r3, [pc, #216]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005268:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800526c:	0e1b      	lsrs	r3, r3, #24
 800526e:	f003 030f 	and.w	r3, r3, #15
 8005272:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005274:	4b32      	ldr	r3, [pc, #200]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800527a:	0f1b      	lsrs	r3, r3, #28
 800527c:	f003 0307 	and.w	r3, r3, #7
 8005280:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	019a      	lsls	r2, r3, #6
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	041b      	lsls	r3, r3, #16
 800528e:	431a      	orrs	r2, r3
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	061b      	lsls	r3, r3, #24
 8005294:	431a      	orrs	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	071b      	lsls	r3, r3, #28
 800529a:	4929      	ldr	r1, [pc, #164]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800529c:	4313      	orrs	r3, r2
 800529e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0308 	and.w	r3, r3, #8
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d028      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80052ae:	4b24      	ldr	r3, [pc, #144]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052b4:	0e1b      	lsrs	r3, r3, #24
 80052b6:	f003 030f 	and.w	r3, r3, #15
 80052ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80052bc:	4b20      	ldr	r3, [pc, #128]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052c2:	0c1b      	lsrs	r3, r3, #16
 80052c4:	f003 0303 	and.w	r3, r3, #3
 80052c8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	019a      	lsls	r2, r3, #6
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	041b      	lsls	r3, r3, #16
 80052d4:	431a      	orrs	r2, r3
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	061b      	lsls	r3, r3, #24
 80052da:	431a      	orrs	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	69db      	ldr	r3, [r3, #28]
 80052e0:	071b      	lsls	r3, r3, #28
 80052e2:	4917      	ldr	r1, [pc, #92]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80052ea:	4b15      	ldr	r3, [pc, #84]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f8:	4911      	ldr	r1, [pc, #68]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005300:	4b0f      	ldr	r3, [pc, #60]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a0e      	ldr	r2, [pc, #56]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005306:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800530a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800530c:	f7fc ff7e 	bl	800220c <HAL_GetTick>
 8005310:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005312:	e008      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005314:	f7fc ff7a 	bl	800220c <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b64      	cmp	r3, #100	@ 0x64
 8005320:	d901      	bls.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e007      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005326:	4b06      	ldr	r3, [pc, #24]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800532e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005332:	d1ef      	bne.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3720      	adds	r7, #32
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	40023800 	.word	0x40023800

08005344 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e049      	b.n	80053ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d106      	bne.n	8005370 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f7fc fd46 	bl	8001dfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2202      	movs	r2, #2
 8005374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	3304      	adds	r3, #4
 8005380:	4619      	mov	r1, r3
 8005382:	4610      	mov	r0, r2
 8005384:	f000 fe0c 	bl	8005fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3708      	adds	r7, #8
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
	...

080053f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b01      	cmp	r3, #1
 8005406:	d001      	beq.n	800540c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e054      	b.n	80054b6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2202      	movs	r2, #2
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68da      	ldr	r2, [r3, #12]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f042 0201 	orr.w	r2, r2, #1
 8005422:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a26      	ldr	r2, [pc, #152]	@ (80054c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d022      	beq.n	8005474 <HAL_TIM_Base_Start_IT+0x80>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005436:	d01d      	beq.n	8005474 <HAL_TIM_Base_Start_IT+0x80>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a22      	ldr	r2, [pc, #136]	@ (80054c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d018      	beq.n	8005474 <HAL_TIM_Base_Start_IT+0x80>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a21      	ldr	r2, [pc, #132]	@ (80054cc <HAL_TIM_Base_Start_IT+0xd8>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d013      	beq.n	8005474 <HAL_TIM_Base_Start_IT+0x80>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a1f      	ldr	r2, [pc, #124]	@ (80054d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d00e      	beq.n	8005474 <HAL_TIM_Base_Start_IT+0x80>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a1e      	ldr	r2, [pc, #120]	@ (80054d4 <HAL_TIM_Base_Start_IT+0xe0>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d009      	beq.n	8005474 <HAL_TIM_Base_Start_IT+0x80>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a1c      	ldr	r2, [pc, #112]	@ (80054d8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d004      	beq.n	8005474 <HAL_TIM_Base_Start_IT+0x80>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a1b      	ldr	r2, [pc, #108]	@ (80054dc <HAL_TIM_Base_Start_IT+0xe8>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d115      	bne.n	80054a0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	689a      	ldr	r2, [r3, #8]
 800547a:	4b19      	ldr	r3, [pc, #100]	@ (80054e0 <HAL_TIM_Base_Start_IT+0xec>)
 800547c:	4013      	ands	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2b06      	cmp	r3, #6
 8005484:	d015      	beq.n	80054b2 <HAL_TIM_Base_Start_IT+0xbe>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800548c:	d011      	beq.n	80054b2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f042 0201 	orr.w	r2, r2, #1
 800549c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800549e:	e008      	b.n	80054b2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f042 0201 	orr.w	r2, r2, #1
 80054ae:	601a      	str	r2, [r3, #0]
 80054b0:	e000      	b.n	80054b4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3714      	adds	r7, #20
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	40010000 	.word	0x40010000
 80054c8:	40000400 	.word	0x40000400
 80054cc:	40000800 	.word	0x40000800
 80054d0:	40000c00 	.word	0x40000c00
 80054d4:	40010400 	.word	0x40010400
 80054d8:	40014000 	.word	0x40014000
 80054dc:	40001800 	.word	0x40001800
 80054e0:	00010007 	.word	0x00010007

080054e4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e049      	b.n	800558a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d106      	bne.n	8005510 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f841 	bl	8005592 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2202      	movs	r2, #2
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	3304      	adds	r3, #4
 8005520:	4619      	mov	r1, r3
 8005522:	4610      	mov	r0, r2
 8005524:	f000 fd3c 	bl	8005fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3708      	adds	r7, #8
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005592:	b480      	push	{r7}
 8005594:	b083      	sub	sp, #12
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800559a:	bf00      	nop
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b082      	sub	sp, #8
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d101      	bne.n	80055b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e049      	b.n	800564c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d106      	bne.n	80055d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 f841 	bl	8005654 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2202      	movs	r2, #2
 80055d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	3304      	adds	r3, #4
 80055e2:	4619      	mov	r1, r3
 80055e4:	4610      	mov	r0, r2
 80055e6:	f000 fcdb 	bl	8005fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2201      	movs	r2, #1
 800562e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3708      	adds	r7, #8
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800565c:	bf00      	nop
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e049      	b.n	800570e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b00      	cmp	r3, #0
 8005684:	d106      	bne.n	8005694 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7fc fc0a 	bl	8001ea8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2202      	movs	r2, #2
 8005698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	3304      	adds	r3, #4
 80056a4:	4619      	mov	r1, r3
 80056a6:	4610      	mov	r0, r2
 80056a8:	f000 fc7a 	bl	8005fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3708      	adds	r7, #8
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b082      	sub	sp, #8
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	f003 0302 	and.w	r3, r3, #2
 8005728:	2b02      	cmp	r3, #2
 800572a:	d122      	bne.n	8005772 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	f003 0302 	and.w	r3, r3, #2
 8005736:	2b02      	cmp	r3, #2
 8005738:	d11b      	bne.n	8005772 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f06f 0202 	mvn.w	r2, #2
 8005742:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	699b      	ldr	r3, [r3, #24]
 8005750:	f003 0303 	and.w	r3, r3, #3
 8005754:	2b00      	cmp	r3, #0
 8005756:	d003      	beq.n	8005760 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 fc03 	bl	8005f64 <HAL_TIM_IC_CaptureCallback>
 800575e:	e005      	b.n	800576c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 fbf5 	bl	8005f50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 fc06 	bl	8005f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	f003 0304 	and.w	r3, r3, #4
 800577c:	2b04      	cmp	r3, #4
 800577e:	d122      	bne.n	80057c6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	f003 0304 	and.w	r3, r3, #4
 800578a:	2b04      	cmp	r3, #4
 800578c:	d11b      	bne.n	80057c6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f06f 0204 	mvn.w	r2, #4
 8005796:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2202      	movs	r2, #2
 800579c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d003      	beq.n	80057b4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 fbd9 	bl	8005f64 <HAL_TIM_IC_CaptureCallback>
 80057b2:	e005      	b.n	80057c0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 fbcb 	bl	8005f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 fbdc 	bl	8005f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	f003 0308 	and.w	r3, r3, #8
 80057d0:	2b08      	cmp	r3, #8
 80057d2:	d122      	bne.n	800581a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	f003 0308 	and.w	r3, r3, #8
 80057de:	2b08      	cmp	r3, #8
 80057e0:	d11b      	bne.n	800581a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f06f 0208 	mvn.w	r2, #8
 80057ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2204      	movs	r2, #4
 80057f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	69db      	ldr	r3, [r3, #28]
 80057f8:	f003 0303 	and.w	r3, r3, #3
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d003      	beq.n	8005808 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 fbaf 	bl	8005f64 <HAL_TIM_IC_CaptureCallback>
 8005806:	e005      	b.n	8005814 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 fba1 	bl	8005f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 fbb2 	bl	8005f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	f003 0310 	and.w	r3, r3, #16
 8005824:	2b10      	cmp	r3, #16
 8005826:	d122      	bne.n	800586e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	f003 0310 	and.w	r3, r3, #16
 8005832:	2b10      	cmp	r3, #16
 8005834:	d11b      	bne.n	800586e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f06f 0210 	mvn.w	r2, #16
 800583e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2208      	movs	r2, #8
 8005844:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	69db      	ldr	r3, [r3, #28]
 800584c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005850:	2b00      	cmp	r3, #0
 8005852:	d003      	beq.n	800585c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 fb85 	bl	8005f64 <HAL_TIM_IC_CaptureCallback>
 800585a:	e005      	b.n	8005868 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 fb77 	bl	8005f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 fb88 	bl	8005f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	2b01      	cmp	r3, #1
 800587a:	d10e      	bne.n	800589a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	2b01      	cmp	r3, #1
 8005888:	d107      	bne.n	800589a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f06f 0201 	mvn.w	r2, #1
 8005892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 fb51 	bl	8005f3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058a4:	2b80      	cmp	r3, #128	@ 0x80
 80058a6:	d10e      	bne.n	80058c6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058b2:	2b80      	cmp	r3, #128	@ 0x80
 80058b4:	d107      	bne.n	80058c6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80058be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f001 f945 	bl	8006b50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058d4:	d10e      	bne.n	80058f4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058e0:	2b80      	cmp	r3, #128	@ 0x80
 80058e2:	d107      	bne.n	80058f4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80058ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f001 f938 	bl	8006b64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058fe:	2b40      	cmp	r3, #64	@ 0x40
 8005900:	d10e      	bne.n	8005920 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800590c:	2b40      	cmp	r3, #64	@ 0x40
 800590e:	d107      	bne.n	8005920 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 fb36 	bl	8005f8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	f003 0320 	and.w	r3, r3, #32
 800592a:	2b20      	cmp	r3, #32
 800592c:	d10e      	bne.n	800594c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	f003 0320 	and.w	r3, r3, #32
 8005938:	2b20      	cmp	r3, #32
 800593a:	d107      	bne.n	800594c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f06f 0220 	mvn.w	r2, #32
 8005944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f001 f8f8 	bl	8006b3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800594c:	bf00      	nop
 800594e:	3708      	adds	r7, #8
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b086      	sub	sp, #24
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005960:	2300      	movs	r3, #0
 8005962:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800596a:	2b01      	cmp	r3, #1
 800596c:	d101      	bne.n	8005972 <HAL_TIM_OC_ConfigChannel+0x1e>
 800596e:	2302      	movs	r3, #2
 8005970:	e066      	b.n	8005a40 <HAL_TIM_OC_ConfigChannel+0xec>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2b14      	cmp	r3, #20
 800597e:	d857      	bhi.n	8005a30 <HAL_TIM_OC_ConfigChannel+0xdc>
 8005980:	a201      	add	r2, pc, #4	@ (adr r2, 8005988 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005986:	bf00      	nop
 8005988:	080059dd 	.word	0x080059dd
 800598c:	08005a31 	.word	0x08005a31
 8005990:	08005a31 	.word	0x08005a31
 8005994:	08005a31 	.word	0x08005a31
 8005998:	080059eb 	.word	0x080059eb
 800599c:	08005a31 	.word	0x08005a31
 80059a0:	08005a31 	.word	0x08005a31
 80059a4:	08005a31 	.word	0x08005a31
 80059a8:	080059f9 	.word	0x080059f9
 80059ac:	08005a31 	.word	0x08005a31
 80059b0:	08005a31 	.word	0x08005a31
 80059b4:	08005a31 	.word	0x08005a31
 80059b8:	08005a07 	.word	0x08005a07
 80059bc:	08005a31 	.word	0x08005a31
 80059c0:	08005a31 	.word	0x08005a31
 80059c4:	08005a31 	.word	0x08005a31
 80059c8:	08005a15 	.word	0x08005a15
 80059cc:	08005a31 	.word	0x08005a31
 80059d0:	08005a31 	.word	0x08005a31
 80059d4:	08005a31 	.word	0x08005a31
 80059d8:	08005a23 	.word	0x08005a23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68b9      	ldr	r1, [r7, #8]
 80059e2:	4618      	mov	r0, r3
 80059e4:	f000 fb7c 	bl	80060e0 <TIM_OC1_SetConfig>
      break;
 80059e8:	e025      	b.n	8005a36 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68b9      	ldr	r1, [r7, #8]
 80059f0:	4618      	mov	r0, r3
 80059f2:	f000 fbe7 	bl	80061c4 <TIM_OC2_SetConfig>
      break;
 80059f6:	e01e      	b.n	8005a36 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68b9      	ldr	r1, [r7, #8]
 80059fe:	4618      	mov	r0, r3
 8005a00:	f000 fc58 	bl	80062b4 <TIM_OC3_SetConfig>
      break;
 8005a04:	e017      	b.n	8005a36 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68b9      	ldr	r1, [r7, #8]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f000 fcc7 	bl	80063a0 <TIM_OC4_SetConfig>
      break;
 8005a12:	e010      	b.n	8005a36 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68b9      	ldr	r1, [r7, #8]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 fd18 	bl	8006450 <TIM_OC5_SetConfig>
      break;
 8005a20:	e009      	b.n	8005a36 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68b9      	ldr	r1, [r7, #8]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f000 fd63 	bl	80064f4 <TIM_OC6_SetConfig>
      break;
 8005a2e:	e002      	b.n	8005a36 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	75fb      	strb	r3, [r7, #23]
      break;
 8005a34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3718      	adds	r7, #24
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b086      	sub	sp, #24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a54:	2300      	movs	r3, #0
 8005a56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d101      	bne.n	8005a66 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005a62:	2302      	movs	r3, #2
 8005a64:	e088      	b.n	8005b78 <HAL_TIM_IC_ConfigChannel+0x130>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d11b      	bne.n	8005aac <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005a84:	f000 fd8a 	bl	800659c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	699a      	ldr	r2, [r3, #24]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f022 020c 	bic.w	r2, r2, #12
 8005a96:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6999      	ldr	r1, [r3, #24]
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	689a      	ldr	r2, [r3, #8]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	619a      	str	r2, [r3, #24]
 8005aaa:	e060      	b.n	8005b6e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2b04      	cmp	r3, #4
 8005ab0:	d11c      	bne.n	8005aec <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005ac2:	f000 fe0e 	bl	80066e2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	699a      	ldr	r2, [r3, #24]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005ad4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	6999      	ldr	r1, [r3, #24]
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	021a      	lsls	r2, r3, #8
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	619a      	str	r2, [r3, #24]
 8005aea:	e040      	b.n	8005b6e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2b08      	cmp	r3, #8
 8005af0:	d11b      	bne.n	8005b2a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005b02:	f000 fe5b 	bl	80067bc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	69da      	ldr	r2, [r3, #28]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f022 020c 	bic.w	r2, r2, #12
 8005b14:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	69d9      	ldr	r1, [r3, #28]
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	689a      	ldr	r2, [r3, #8]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	430a      	orrs	r2, r1
 8005b26:	61da      	str	r2, [r3, #28]
 8005b28:	e021      	b.n	8005b6e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2b0c      	cmp	r3, #12
 8005b2e:	d11c      	bne.n	8005b6a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005b40:	f000 fe78 	bl	8006834 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	69da      	ldr	r2, [r3, #28]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005b52:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	69d9      	ldr	r1, [r3, #28]
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	021a      	lsls	r2, r3, #8
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	430a      	orrs	r2, r1
 8005b66:	61da      	str	r2, [r3, #28]
 8005b68:	e001      	b.n	8005b6e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3718      	adds	r7, #24
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d101      	bne.n	8005b9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	e0ff      	b.n	8005d9e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2b14      	cmp	r3, #20
 8005baa:	f200 80f0 	bhi.w	8005d8e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005bae:	a201      	add	r2, pc, #4	@ (adr r2, 8005bb4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb4:	08005c09 	.word	0x08005c09
 8005bb8:	08005d8f 	.word	0x08005d8f
 8005bbc:	08005d8f 	.word	0x08005d8f
 8005bc0:	08005d8f 	.word	0x08005d8f
 8005bc4:	08005c49 	.word	0x08005c49
 8005bc8:	08005d8f 	.word	0x08005d8f
 8005bcc:	08005d8f 	.word	0x08005d8f
 8005bd0:	08005d8f 	.word	0x08005d8f
 8005bd4:	08005c8b 	.word	0x08005c8b
 8005bd8:	08005d8f 	.word	0x08005d8f
 8005bdc:	08005d8f 	.word	0x08005d8f
 8005be0:	08005d8f 	.word	0x08005d8f
 8005be4:	08005ccb 	.word	0x08005ccb
 8005be8:	08005d8f 	.word	0x08005d8f
 8005bec:	08005d8f 	.word	0x08005d8f
 8005bf0:	08005d8f 	.word	0x08005d8f
 8005bf4:	08005d0d 	.word	0x08005d0d
 8005bf8:	08005d8f 	.word	0x08005d8f
 8005bfc:	08005d8f 	.word	0x08005d8f
 8005c00:	08005d8f 	.word	0x08005d8f
 8005c04:	08005d4d 	.word	0x08005d4d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68b9      	ldr	r1, [r7, #8]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 fa66 	bl	80060e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	699a      	ldr	r2, [r3, #24]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f042 0208 	orr.w	r2, r2, #8
 8005c22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	699a      	ldr	r2, [r3, #24]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f022 0204 	bic.w	r2, r2, #4
 8005c32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6999      	ldr	r1, [r3, #24]
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	691a      	ldr	r2, [r3, #16]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	619a      	str	r2, [r3, #24]
      break;
 8005c46:	e0a5      	b.n	8005d94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68b9      	ldr	r1, [r7, #8]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 fab8 	bl	80061c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	699a      	ldr	r2, [r3, #24]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	699a      	ldr	r2, [r3, #24]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	6999      	ldr	r1, [r3, #24]
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	021a      	lsls	r2, r3, #8
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	430a      	orrs	r2, r1
 8005c86:	619a      	str	r2, [r3, #24]
      break;
 8005c88:	e084      	b.n	8005d94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68b9      	ldr	r1, [r7, #8]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f000 fb0f 	bl	80062b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	69da      	ldr	r2, [r3, #28]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f042 0208 	orr.w	r2, r2, #8
 8005ca4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	69da      	ldr	r2, [r3, #28]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f022 0204 	bic.w	r2, r2, #4
 8005cb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	69d9      	ldr	r1, [r3, #28]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	691a      	ldr	r2, [r3, #16]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	61da      	str	r2, [r3, #28]
      break;
 8005cc8:	e064      	b.n	8005d94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68b9      	ldr	r1, [r7, #8]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f000 fb65 	bl	80063a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	69da      	ldr	r2, [r3, #28]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ce4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	69da      	ldr	r2, [r3, #28]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	69d9      	ldr	r1, [r3, #28]
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	021a      	lsls	r2, r3, #8
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	430a      	orrs	r2, r1
 8005d08:	61da      	str	r2, [r3, #28]
      break;
 8005d0a:	e043      	b.n	8005d94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68b9      	ldr	r1, [r7, #8]
 8005d12:	4618      	mov	r0, r3
 8005d14:	f000 fb9c 	bl	8006450 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f042 0208 	orr.w	r2, r2, #8
 8005d26:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f022 0204 	bic.w	r2, r2, #4
 8005d36:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	691a      	ldr	r2, [r3, #16]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	430a      	orrs	r2, r1
 8005d48:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005d4a:	e023      	b.n	8005d94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68b9      	ldr	r1, [r7, #8]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 fbce 	bl	80064f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d66:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d76:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	021a      	lsls	r2, r3, #8
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005d8c:	e002      	b.n	8005d94 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	75fb      	strb	r3, [r7, #23]
      break;
 8005d92:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3718      	adds	r7, #24
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop

08005da8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005db2:	2300      	movs	r3, #0
 8005db4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d101      	bne.n	8005dc4 <HAL_TIM_ConfigClockSource+0x1c>
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	e0b4      	b.n	8005f2e <HAL_TIM_ConfigClockSource+0x186>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2202      	movs	r2, #2
 8005dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ddc:	68ba      	ldr	r2, [r7, #8]
 8005dde:	4b56      	ldr	r3, [pc, #344]	@ (8005f38 <HAL_TIM_ConfigClockSource+0x190>)
 8005de0:	4013      	ands	r3, r2
 8005de2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005dea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68ba      	ldr	r2, [r7, #8]
 8005df2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dfc:	d03e      	beq.n	8005e7c <HAL_TIM_ConfigClockSource+0xd4>
 8005dfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e02:	f200 8087 	bhi.w	8005f14 <HAL_TIM_ConfigClockSource+0x16c>
 8005e06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e0a:	f000 8086 	beq.w	8005f1a <HAL_TIM_ConfigClockSource+0x172>
 8005e0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e12:	d87f      	bhi.n	8005f14 <HAL_TIM_ConfigClockSource+0x16c>
 8005e14:	2b70      	cmp	r3, #112	@ 0x70
 8005e16:	d01a      	beq.n	8005e4e <HAL_TIM_ConfigClockSource+0xa6>
 8005e18:	2b70      	cmp	r3, #112	@ 0x70
 8005e1a:	d87b      	bhi.n	8005f14 <HAL_TIM_ConfigClockSource+0x16c>
 8005e1c:	2b60      	cmp	r3, #96	@ 0x60
 8005e1e:	d050      	beq.n	8005ec2 <HAL_TIM_ConfigClockSource+0x11a>
 8005e20:	2b60      	cmp	r3, #96	@ 0x60
 8005e22:	d877      	bhi.n	8005f14 <HAL_TIM_ConfigClockSource+0x16c>
 8005e24:	2b50      	cmp	r3, #80	@ 0x50
 8005e26:	d03c      	beq.n	8005ea2 <HAL_TIM_ConfigClockSource+0xfa>
 8005e28:	2b50      	cmp	r3, #80	@ 0x50
 8005e2a:	d873      	bhi.n	8005f14 <HAL_TIM_ConfigClockSource+0x16c>
 8005e2c:	2b40      	cmp	r3, #64	@ 0x40
 8005e2e:	d058      	beq.n	8005ee2 <HAL_TIM_ConfigClockSource+0x13a>
 8005e30:	2b40      	cmp	r3, #64	@ 0x40
 8005e32:	d86f      	bhi.n	8005f14 <HAL_TIM_ConfigClockSource+0x16c>
 8005e34:	2b30      	cmp	r3, #48	@ 0x30
 8005e36:	d064      	beq.n	8005f02 <HAL_TIM_ConfigClockSource+0x15a>
 8005e38:	2b30      	cmp	r3, #48	@ 0x30
 8005e3a:	d86b      	bhi.n	8005f14 <HAL_TIM_ConfigClockSource+0x16c>
 8005e3c:	2b20      	cmp	r3, #32
 8005e3e:	d060      	beq.n	8005f02 <HAL_TIM_ConfigClockSource+0x15a>
 8005e40:	2b20      	cmp	r3, #32
 8005e42:	d867      	bhi.n	8005f14 <HAL_TIM_ConfigClockSource+0x16c>
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d05c      	beq.n	8005f02 <HAL_TIM_ConfigClockSource+0x15a>
 8005e48:	2b10      	cmp	r3, #16
 8005e4a:	d05a      	beq.n	8005f02 <HAL_TIM_ConfigClockSource+0x15a>
 8005e4c:	e062      	b.n	8005f14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e5e:	f000 fd41 	bl	80068e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005e70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68ba      	ldr	r2, [r7, #8]
 8005e78:	609a      	str	r2, [r3, #8]
      break;
 8005e7a:	e04f      	b.n	8005f1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e8c:	f000 fd2a 	bl	80068e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689a      	ldr	r2, [r3, #8]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e9e:	609a      	str	r2, [r3, #8]
      break;
 8005ea0:	e03c      	b.n	8005f1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eae:	461a      	mov	r2, r3
 8005eb0:	f000 fbe8 	bl	8006684 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2150      	movs	r1, #80	@ 0x50
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f000 fcf7 	bl	80068ae <TIM_ITRx_SetConfig>
      break;
 8005ec0:	e02c      	b.n	8005f1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ece:	461a      	mov	r2, r3
 8005ed0:	f000 fc44 	bl	800675c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2160      	movs	r1, #96	@ 0x60
 8005eda:	4618      	mov	r0, r3
 8005edc:	f000 fce7 	bl	80068ae <TIM_ITRx_SetConfig>
      break;
 8005ee0:	e01c      	b.n	8005f1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eee:	461a      	mov	r2, r3
 8005ef0:	f000 fbc8 	bl	8006684 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2140      	movs	r1, #64	@ 0x40
 8005efa:	4618      	mov	r0, r3
 8005efc:	f000 fcd7 	bl	80068ae <TIM_ITRx_SetConfig>
      break;
 8005f00:	e00c      	b.n	8005f1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	4610      	mov	r0, r2
 8005f0e:	f000 fcce 	bl	80068ae <TIM_ITRx_SetConfig>
      break;
 8005f12:	e003      	b.n	8005f1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	73fb      	strb	r3, [r7, #15]
      break;
 8005f18:	e000      	b.n	8005f1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005f1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	fffeff88 	.word	0xfffeff88

08005f3c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a40      	ldr	r2, [pc, #256]	@ (80060b4 <TIM_Base_SetConfig+0x114>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d013      	beq.n	8005fe0 <TIM_Base_SetConfig+0x40>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fbe:	d00f      	beq.n	8005fe0 <TIM_Base_SetConfig+0x40>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a3d      	ldr	r2, [pc, #244]	@ (80060b8 <TIM_Base_SetConfig+0x118>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d00b      	beq.n	8005fe0 <TIM_Base_SetConfig+0x40>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a3c      	ldr	r2, [pc, #240]	@ (80060bc <TIM_Base_SetConfig+0x11c>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d007      	beq.n	8005fe0 <TIM_Base_SetConfig+0x40>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a3b      	ldr	r2, [pc, #236]	@ (80060c0 <TIM_Base_SetConfig+0x120>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d003      	beq.n	8005fe0 <TIM_Base_SetConfig+0x40>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a3a      	ldr	r2, [pc, #232]	@ (80060c4 <TIM_Base_SetConfig+0x124>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d108      	bne.n	8005ff2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a2f      	ldr	r2, [pc, #188]	@ (80060b4 <TIM_Base_SetConfig+0x114>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d02b      	beq.n	8006052 <TIM_Base_SetConfig+0xb2>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006000:	d027      	beq.n	8006052 <TIM_Base_SetConfig+0xb2>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a2c      	ldr	r2, [pc, #176]	@ (80060b8 <TIM_Base_SetConfig+0x118>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d023      	beq.n	8006052 <TIM_Base_SetConfig+0xb2>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a2b      	ldr	r2, [pc, #172]	@ (80060bc <TIM_Base_SetConfig+0x11c>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d01f      	beq.n	8006052 <TIM_Base_SetConfig+0xb2>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a2a      	ldr	r2, [pc, #168]	@ (80060c0 <TIM_Base_SetConfig+0x120>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d01b      	beq.n	8006052 <TIM_Base_SetConfig+0xb2>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a29      	ldr	r2, [pc, #164]	@ (80060c4 <TIM_Base_SetConfig+0x124>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d017      	beq.n	8006052 <TIM_Base_SetConfig+0xb2>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a28      	ldr	r2, [pc, #160]	@ (80060c8 <TIM_Base_SetConfig+0x128>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d013      	beq.n	8006052 <TIM_Base_SetConfig+0xb2>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a27      	ldr	r2, [pc, #156]	@ (80060cc <TIM_Base_SetConfig+0x12c>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d00f      	beq.n	8006052 <TIM_Base_SetConfig+0xb2>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a26      	ldr	r2, [pc, #152]	@ (80060d0 <TIM_Base_SetConfig+0x130>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d00b      	beq.n	8006052 <TIM_Base_SetConfig+0xb2>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a25      	ldr	r2, [pc, #148]	@ (80060d4 <TIM_Base_SetConfig+0x134>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d007      	beq.n	8006052 <TIM_Base_SetConfig+0xb2>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a24      	ldr	r2, [pc, #144]	@ (80060d8 <TIM_Base_SetConfig+0x138>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d003      	beq.n	8006052 <TIM_Base_SetConfig+0xb2>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a23      	ldr	r2, [pc, #140]	@ (80060dc <TIM_Base_SetConfig+0x13c>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d108      	bne.n	8006064 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006058:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	4313      	orrs	r3, r2
 8006062:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	4313      	orrs	r3, r2
 8006070:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	689a      	ldr	r2, [r3, #8]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a0a      	ldr	r2, [pc, #40]	@ (80060b4 <TIM_Base_SetConfig+0x114>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d003      	beq.n	8006098 <TIM_Base_SetConfig+0xf8>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a0c      	ldr	r2, [pc, #48]	@ (80060c4 <TIM_Base_SetConfig+0x124>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d103      	bne.n	80060a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	691a      	ldr	r2, [r3, #16]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	615a      	str	r2, [r3, #20]
}
 80060a6:	bf00      	nop
 80060a8:	3714      	adds	r7, #20
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	40010000 	.word	0x40010000
 80060b8:	40000400 	.word	0x40000400
 80060bc:	40000800 	.word	0x40000800
 80060c0:	40000c00 	.word	0x40000c00
 80060c4:	40010400 	.word	0x40010400
 80060c8:	40014000 	.word	0x40014000
 80060cc:	40014400 	.word	0x40014400
 80060d0:	40014800 	.word	0x40014800
 80060d4:	40001800 	.word	0x40001800
 80060d8:	40001c00 	.word	0x40001c00
 80060dc:	40002000 	.word	0x40002000

080060e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b087      	sub	sp, #28
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	f023 0201 	bic.w	r2, r3, #1
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	4b2b      	ldr	r3, [pc, #172]	@ (80061b8 <TIM_OC1_SetConfig+0xd8>)
 800610c:	4013      	ands	r3, r2
 800610e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f023 0303 	bic.w	r3, r3, #3
 8006116:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	4313      	orrs	r3, r2
 8006120:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f023 0302 	bic.w	r3, r3, #2
 8006128:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	4313      	orrs	r3, r2
 8006132:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a21      	ldr	r2, [pc, #132]	@ (80061bc <TIM_OC1_SetConfig+0xdc>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d003      	beq.n	8006144 <TIM_OC1_SetConfig+0x64>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a20      	ldr	r2, [pc, #128]	@ (80061c0 <TIM_OC1_SetConfig+0xe0>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d10c      	bne.n	800615e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	f023 0308 	bic.w	r3, r3, #8
 800614a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	697a      	ldr	r2, [r7, #20]
 8006152:	4313      	orrs	r3, r2
 8006154:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	f023 0304 	bic.w	r3, r3, #4
 800615c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a16      	ldr	r2, [pc, #88]	@ (80061bc <TIM_OC1_SetConfig+0xdc>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d003      	beq.n	800616e <TIM_OC1_SetConfig+0x8e>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a15      	ldr	r2, [pc, #84]	@ (80061c0 <TIM_OC1_SetConfig+0xe0>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d111      	bne.n	8006192 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006174:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800617c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	4313      	orrs	r3, r2
 8006186:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	4313      	orrs	r3, r2
 8006190:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	685a      	ldr	r2, [r3, #4]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	621a      	str	r2, [r3, #32]
}
 80061ac:	bf00      	nop
 80061ae:	371c      	adds	r7, #28
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	fffeff8f 	.word	0xfffeff8f
 80061bc:	40010000 	.word	0x40010000
 80061c0:	40010400 	.word	0x40010400

080061c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b087      	sub	sp, #28
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	f023 0210 	bic.w	r2, r3, #16
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a1b      	ldr	r3, [r3, #32]
 80061de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	4b2e      	ldr	r3, [pc, #184]	@ (80062a8 <TIM_OC2_SetConfig+0xe4>)
 80061f0:	4013      	ands	r3, r2
 80061f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	021b      	lsls	r3, r3, #8
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	4313      	orrs	r3, r2
 8006206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	f023 0320 	bic.w	r3, r3, #32
 800620e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	011b      	lsls	r3, r3, #4
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	4313      	orrs	r3, r2
 800621a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a23      	ldr	r2, [pc, #140]	@ (80062ac <TIM_OC2_SetConfig+0xe8>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d003      	beq.n	800622c <TIM_OC2_SetConfig+0x68>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a22      	ldr	r2, [pc, #136]	@ (80062b0 <TIM_OC2_SetConfig+0xec>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d10d      	bne.n	8006248 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006232:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	011b      	lsls	r3, r3, #4
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	4313      	orrs	r3, r2
 800623e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006246:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a18      	ldr	r2, [pc, #96]	@ (80062ac <TIM_OC2_SetConfig+0xe8>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d003      	beq.n	8006258 <TIM_OC2_SetConfig+0x94>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a17      	ldr	r2, [pc, #92]	@ (80062b0 <TIM_OC2_SetConfig+0xec>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d113      	bne.n	8006280 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800625e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006266:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	695b      	ldr	r3, [r3, #20]
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	693a      	ldr	r2, [r7, #16]
 8006270:	4313      	orrs	r3, r2
 8006272:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	4313      	orrs	r3, r2
 800627e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	693a      	ldr	r2, [r7, #16]
 8006284:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	621a      	str	r2, [r3, #32]
}
 800629a:	bf00      	nop
 800629c:	371c      	adds	r7, #28
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	feff8fff 	.word	0xfeff8fff
 80062ac:	40010000 	.word	0x40010000
 80062b0:	40010400 	.word	0x40010400

080062b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b087      	sub	sp, #28
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a1b      	ldr	r3, [r3, #32]
 80062c2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	69db      	ldr	r3, [r3, #28]
 80062da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	4b2d      	ldr	r3, [pc, #180]	@ (8006394 <TIM_OC3_SetConfig+0xe0>)
 80062e0:	4013      	ands	r3, r2
 80062e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f023 0303 	bic.w	r3, r3, #3
 80062ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80062fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	021b      	lsls	r3, r3, #8
 8006304:	697a      	ldr	r2, [r7, #20]
 8006306:	4313      	orrs	r3, r2
 8006308:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a22      	ldr	r2, [pc, #136]	@ (8006398 <TIM_OC3_SetConfig+0xe4>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d003      	beq.n	800631a <TIM_OC3_SetConfig+0x66>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a21      	ldr	r2, [pc, #132]	@ (800639c <TIM_OC3_SetConfig+0xe8>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d10d      	bne.n	8006336 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006320:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	021b      	lsls	r3, r3, #8
 8006328:	697a      	ldr	r2, [r7, #20]
 800632a:	4313      	orrs	r3, r2
 800632c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006334:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a17      	ldr	r2, [pc, #92]	@ (8006398 <TIM_OC3_SetConfig+0xe4>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d003      	beq.n	8006346 <TIM_OC3_SetConfig+0x92>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a16      	ldr	r2, [pc, #88]	@ (800639c <TIM_OC3_SetConfig+0xe8>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d113      	bne.n	800636e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800634c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006354:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	011b      	lsls	r3, r3, #4
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	4313      	orrs	r3, r2
 8006360:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	011b      	lsls	r3, r3, #4
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	4313      	orrs	r3, r2
 800636c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	685a      	ldr	r2, [r3, #4]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	697a      	ldr	r2, [r7, #20]
 8006386:	621a      	str	r2, [r3, #32]
}
 8006388:	bf00      	nop
 800638a:	371c      	adds	r7, #28
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr
 8006394:	fffeff8f 	.word	0xfffeff8f
 8006398:	40010000 	.word	0x40010000
 800639c:	40010400 	.word	0x40010400

080063a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b087      	sub	sp, #28
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	69db      	ldr	r3, [r3, #28]
 80063c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	4b1e      	ldr	r3, [pc, #120]	@ (8006444 <TIM_OC4_SetConfig+0xa4>)
 80063cc:	4013      	ands	r3, r2
 80063ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	021b      	lsls	r3, r3, #8
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80063ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	031b      	lsls	r3, r3, #12
 80063f2:	693a      	ldr	r2, [r7, #16]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a13      	ldr	r2, [pc, #76]	@ (8006448 <TIM_OC4_SetConfig+0xa8>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d003      	beq.n	8006408 <TIM_OC4_SetConfig+0x68>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a12      	ldr	r2, [pc, #72]	@ (800644c <TIM_OC4_SetConfig+0xac>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d109      	bne.n	800641c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800640e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	695b      	ldr	r3, [r3, #20]
 8006414:	019b      	lsls	r3, r3, #6
 8006416:	697a      	ldr	r2, [r7, #20]
 8006418:	4313      	orrs	r3, r2
 800641a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	685a      	ldr	r2, [r3, #4]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	693a      	ldr	r2, [r7, #16]
 8006434:	621a      	str	r2, [r3, #32]
}
 8006436:	bf00      	nop
 8006438:	371c      	adds	r7, #28
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	feff8fff 	.word	0xfeff8fff
 8006448:	40010000 	.word	0x40010000
 800644c:	40010400 	.word	0x40010400

08006450 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006450:	b480      	push	{r7}
 8006452:	b087      	sub	sp, #28
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	4b1b      	ldr	r3, [pc, #108]	@ (80064e8 <TIM_OC5_SetConfig+0x98>)
 800647c:	4013      	ands	r3, r2
 800647e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	4313      	orrs	r3, r2
 8006488:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006490:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	041b      	lsls	r3, r3, #16
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	4313      	orrs	r3, r2
 800649c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a12      	ldr	r2, [pc, #72]	@ (80064ec <TIM_OC5_SetConfig+0x9c>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d003      	beq.n	80064ae <TIM_OC5_SetConfig+0x5e>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a11      	ldr	r2, [pc, #68]	@ (80064f0 <TIM_OC5_SetConfig+0xa0>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d109      	bne.n	80064c2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	021b      	lsls	r3, r3, #8
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	4313      	orrs	r3, r2
 80064c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	685a      	ldr	r2, [r3, #4]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	693a      	ldr	r2, [r7, #16]
 80064da:	621a      	str	r2, [r3, #32]
}
 80064dc:	bf00      	nop
 80064de:	371c      	adds	r7, #28
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr
 80064e8:	fffeff8f 	.word	0xfffeff8f
 80064ec:	40010000 	.word	0x40010000
 80064f0:	40010400 	.word	0x40010400

080064f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b087      	sub	sp, #28
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a1b      	ldr	r3, [r3, #32]
 800650e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800651a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	4b1c      	ldr	r3, [pc, #112]	@ (8006590 <TIM_OC6_SetConfig+0x9c>)
 8006520:	4013      	ands	r3, r2
 8006522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	021b      	lsls	r3, r3, #8
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	4313      	orrs	r3, r2
 800652e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006536:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	051b      	lsls	r3, r3, #20
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	4313      	orrs	r3, r2
 8006542:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a13      	ldr	r2, [pc, #76]	@ (8006594 <TIM_OC6_SetConfig+0xa0>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d003      	beq.n	8006554 <TIM_OC6_SetConfig+0x60>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a12      	ldr	r2, [pc, #72]	@ (8006598 <TIM_OC6_SetConfig+0xa4>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d109      	bne.n	8006568 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800655a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	695b      	ldr	r3, [r3, #20]
 8006560:	029b      	lsls	r3, r3, #10
 8006562:	697a      	ldr	r2, [r7, #20]
 8006564:	4313      	orrs	r3, r2
 8006566:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	685a      	ldr	r2, [r3, #4]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	693a      	ldr	r2, [r7, #16]
 8006580:	621a      	str	r2, [r3, #32]
}
 8006582:	bf00      	nop
 8006584:	371c      	adds	r7, #28
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr
 800658e:	bf00      	nop
 8006590:	feff8fff 	.word	0xfeff8fff
 8006594:	40010000 	.word	0x40010000
 8006598:	40010400 	.word	0x40010400

0800659c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800659c:	b480      	push	{r7}
 800659e:	b087      	sub	sp, #28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
 80065a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	f023 0201 	bic.w	r2, r3, #1
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6a1b      	ldr	r3, [r3, #32]
 80065c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	4a28      	ldr	r2, [pc, #160]	@ (8006668 <TIM_TI1_SetConfig+0xcc>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d01b      	beq.n	8006602 <TIM_TI1_SetConfig+0x66>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065d0:	d017      	beq.n	8006602 <TIM_TI1_SetConfig+0x66>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	4a25      	ldr	r2, [pc, #148]	@ (800666c <TIM_TI1_SetConfig+0xd0>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d013      	beq.n	8006602 <TIM_TI1_SetConfig+0x66>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	4a24      	ldr	r2, [pc, #144]	@ (8006670 <TIM_TI1_SetConfig+0xd4>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d00f      	beq.n	8006602 <TIM_TI1_SetConfig+0x66>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	4a23      	ldr	r2, [pc, #140]	@ (8006674 <TIM_TI1_SetConfig+0xd8>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d00b      	beq.n	8006602 <TIM_TI1_SetConfig+0x66>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	4a22      	ldr	r2, [pc, #136]	@ (8006678 <TIM_TI1_SetConfig+0xdc>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d007      	beq.n	8006602 <TIM_TI1_SetConfig+0x66>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	4a21      	ldr	r2, [pc, #132]	@ (800667c <TIM_TI1_SetConfig+0xe0>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d003      	beq.n	8006602 <TIM_TI1_SetConfig+0x66>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	4a20      	ldr	r2, [pc, #128]	@ (8006680 <TIM_TI1_SetConfig+0xe4>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d101      	bne.n	8006606 <TIM_TI1_SetConfig+0x6a>
 8006602:	2301      	movs	r3, #1
 8006604:	e000      	b.n	8006608 <TIM_TI1_SetConfig+0x6c>
 8006606:	2300      	movs	r3, #0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d008      	beq.n	800661e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	f023 0303 	bic.w	r3, r3, #3
 8006612:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006614:	697a      	ldr	r2, [r7, #20]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4313      	orrs	r3, r2
 800661a:	617b      	str	r3, [r7, #20]
 800661c:	e003      	b.n	8006626 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	f043 0301 	orr.w	r3, r3, #1
 8006624:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800662c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	011b      	lsls	r3, r3, #4
 8006632:	b2db      	uxtb	r3, r3
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	4313      	orrs	r3, r2
 8006638:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	f023 030a 	bic.w	r3, r3, #10
 8006640:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	f003 030a 	and.w	r3, r3, #10
 8006648:	693a      	ldr	r2, [r7, #16]
 800664a:	4313      	orrs	r3, r2
 800664c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	697a      	ldr	r2, [r7, #20]
 8006652:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	621a      	str	r2, [r3, #32]
}
 800665a:	bf00      	nop
 800665c:	371c      	adds	r7, #28
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	40010000 	.word	0x40010000
 800666c:	40000400 	.word	0x40000400
 8006670:	40000800 	.word	0x40000800
 8006674:	40000c00 	.word	0x40000c00
 8006678:	40010400 	.word	0x40010400
 800667c:	40014000 	.word	0x40014000
 8006680:	40001800 	.word	0x40001800

08006684 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006684:	b480      	push	{r7}
 8006686:	b087      	sub	sp, #28
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6a1b      	ldr	r3, [r3, #32]
 8006694:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	f023 0201 	bic.w	r2, r3, #1
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80066ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	011b      	lsls	r3, r3, #4
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	f023 030a 	bic.w	r3, r3, #10
 80066c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066c2:	697a      	ldr	r2, [r7, #20]
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	693a      	ldr	r2, [r7, #16]
 80066ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	621a      	str	r2, [r3, #32]
}
 80066d6:	bf00      	nop
 80066d8:	371c      	adds	r7, #28
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr

080066e2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80066e2:	b480      	push	{r7}
 80066e4:	b087      	sub	sp, #28
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	60f8      	str	r0, [r7, #12]
 80066ea:	60b9      	str	r1, [r7, #8]
 80066ec:	607a      	str	r2, [r7, #4]
 80066ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6a1b      	ldr	r3, [r3, #32]
 80066f4:	f023 0210 	bic.w	r2, r3, #16
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800670e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	021b      	lsls	r3, r3, #8
 8006714:	697a      	ldr	r2, [r7, #20]
 8006716:	4313      	orrs	r3, r2
 8006718:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006720:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	031b      	lsls	r3, r3, #12
 8006726:	b29b      	uxth	r3, r3
 8006728:	697a      	ldr	r2, [r7, #20]
 800672a:	4313      	orrs	r3, r2
 800672c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006734:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	011b      	lsls	r3, r3, #4
 800673a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800673e:	693a      	ldr	r2, [r7, #16]
 8006740:	4313      	orrs	r3, r2
 8006742:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	621a      	str	r2, [r3, #32]
}
 8006750:	bf00      	nop
 8006752:	371c      	adds	r7, #28
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800675c:	b480      	push	{r7}
 800675e:	b087      	sub	sp, #28
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6a1b      	ldr	r3, [r3, #32]
 800676c:	f023 0210 	bic.w	r2, r3, #16
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6a1b      	ldr	r3, [r3, #32]
 800677e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006786:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	031b      	lsls	r3, r3, #12
 800678c:	697a      	ldr	r2, [r7, #20]
 800678e:	4313      	orrs	r3, r2
 8006790:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006798:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	011b      	lsls	r3, r3, #4
 800679e:	693a      	ldr	r2, [r7, #16]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	697a      	ldr	r2, [r7, #20]
 80067a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	693a      	ldr	r2, [r7, #16]
 80067ae:	621a      	str	r2, [r3, #32]
}
 80067b0:	bf00      	nop
 80067b2:	371c      	adds	r7, #28
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80067bc:	b480      	push	{r7}
 80067be:	b087      	sub	sp, #28
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	607a      	str	r2, [r7, #4]
 80067c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	69db      	ldr	r3, [r3, #28]
 80067da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6a1b      	ldr	r3, [r3, #32]
 80067e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	f023 0303 	bic.w	r3, r3, #3
 80067e8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067f8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	011b      	lsls	r3, r3, #4
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	697a      	ldr	r2, [r7, #20]
 8006802:	4313      	orrs	r3, r2
 8006804:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800680c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	021b      	lsls	r3, r3, #8
 8006812:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	4313      	orrs	r3, r2
 800681a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	621a      	str	r2, [r3, #32]
}
 8006828:	bf00      	nop
 800682a:	371c      	adds	r7, #28
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006834:	b480      	push	{r7}
 8006836:	b087      	sub	sp, #28
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
 8006840:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	69db      	ldr	r3, [r3, #28]
 8006852:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6a1b      	ldr	r3, [r3, #32]
 8006858:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006860:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	021b      	lsls	r3, r3, #8
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	4313      	orrs	r3, r2
 800686a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006872:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	031b      	lsls	r3, r3, #12
 8006878:	b29b      	uxth	r3, r3
 800687a:	697a      	ldr	r2, [r7, #20]
 800687c:	4313      	orrs	r3, r2
 800687e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006886:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	031b      	lsls	r3, r3, #12
 800688c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006890:	693a      	ldr	r2, [r7, #16]
 8006892:	4313      	orrs	r3, r2
 8006894:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	697a      	ldr	r2, [r7, #20]
 800689a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	621a      	str	r2, [r3, #32]
}
 80068a2:	bf00      	nop
 80068a4:	371c      	adds	r7, #28
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr

080068ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068ae:	b480      	push	{r7}
 80068b0:	b085      	sub	sp, #20
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
 80068b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068c6:	683a      	ldr	r2, [r7, #0]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	f043 0307 	orr.w	r3, r3, #7
 80068d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	609a      	str	r2, [r3, #8]
}
 80068d8:	bf00      	nop
 80068da:	3714      	adds	r7, #20
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b087      	sub	sp, #28
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	607a      	str	r2, [r7, #4]
 80068f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80068fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	021a      	lsls	r2, r3, #8
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	431a      	orrs	r2, r3
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	4313      	orrs	r3, r2
 800690c:	697a      	ldr	r2, [r7, #20]
 800690e:	4313      	orrs	r3, r2
 8006910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	697a      	ldr	r2, [r7, #20]
 8006916:	609a      	str	r2, [r3, #8]
}
 8006918:	bf00      	nop
 800691a:	371c      	adds	r7, #28
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006924:	b480      	push	{r7}
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006934:	2b01      	cmp	r3, #1
 8006936:	d101      	bne.n	800693c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006938:	2302      	movs	r3, #2
 800693a:	e06d      	b.n	8006a18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2202      	movs	r2, #2
 8006948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a30      	ldr	r2, [pc, #192]	@ (8006a24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d004      	beq.n	8006970 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a2f      	ldr	r2, [pc, #188]	@ (8006a28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d108      	bne.n	8006982 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006976:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	4313      	orrs	r3, r2
 8006980:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006988:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	4313      	orrs	r3, r2
 8006992:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a20      	ldr	r2, [pc, #128]	@ (8006a24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d022      	beq.n	80069ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069ae:	d01d      	beq.n	80069ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a1d      	ldr	r2, [pc, #116]	@ (8006a2c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d018      	beq.n	80069ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a1c      	ldr	r2, [pc, #112]	@ (8006a30 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d013      	beq.n	80069ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a1a      	ldr	r2, [pc, #104]	@ (8006a34 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d00e      	beq.n	80069ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a15      	ldr	r2, [pc, #84]	@ (8006a28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d009      	beq.n	80069ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a16      	ldr	r2, [pc, #88]	@ (8006a38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d004      	beq.n	80069ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a15      	ldr	r2, [pc, #84]	@ (8006a3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d10c      	bne.n	8006a06 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	68ba      	ldr	r2, [r7, #8]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3714      	adds	r7, #20
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr
 8006a24:	40010000 	.word	0x40010000
 8006a28:	40010400 	.word	0x40010400
 8006a2c:	40000400 	.word	0x40000400
 8006a30:	40000800 	.word	0x40000800
 8006a34:	40000c00 	.word	0x40000c00
 8006a38:	40014000 	.word	0x40014000
 8006a3c:	40001800 	.word	0x40001800

08006a40 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d101      	bne.n	8006a5c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a58:	2302      	movs	r3, #2
 8006a5a:	e065      	b.n	8006b28 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	695b      	ldr	r3, [r3, #20]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	699b      	ldr	r3, [r3, #24]
 8006ad0:	041b      	lsls	r3, r3, #16
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a16      	ldr	r2, [pc, #88]	@ (8006b34 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d004      	beq.n	8006aea <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a14      	ldr	r2, [pc, #80]	@ (8006b38 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d115      	bne.n	8006b16 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af4:	051b      	lsls	r3, r3, #20
 8006af6:	4313      	orrs	r3, r2
 8006af8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	69db      	ldr	r3, [r3, #28]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	6a1b      	ldr	r3, [r3, #32]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3714      	adds	r7, #20
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr
 8006b34:	40010000 	.word	0x40010000
 8006b38:	40010400 	.word	0x40010400

08006b3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b44:	bf00      	nop
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b58:	bf00      	nop
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b6c:	bf00      	nop
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <memset>:
 8006b78:	4402      	add	r2, r0
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d100      	bne.n	8006b82 <memset+0xa>
 8006b80:	4770      	bx	lr
 8006b82:	f803 1b01 	strb.w	r1, [r3], #1
 8006b86:	e7f9      	b.n	8006b7c <memset+0x4>

08006b88 <__errno>:
 8006b88:	4b01      	ldr	r3, [pc, #4]	@ (8006b90 <__errno+0x8>)
 8006b8a:	6818      	ldr	r0, [r3, #0]
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	20000034 	.word	0x20000034

08006b94 <__libc_init_array>:
 8006b94:	b570      	push	{r4, r5, r6, lr}
 8006b96:	4d0d      	ldr	r5, [pc, #52]	@ (8006bcc <__libc_init_array+0x38>)
 8006b98:	4c0d      	ldr	r4, [pc, #52]	@ (8006bd0 <__libc_init_array+0x3c>)
 8006b9a:	1b64      	subs	r4, r4, r5
 8006b9c:	10a4      	asrs	r4, r4, #2
 8006b9e:	2600      	movs	r6, #0
 8006ba0:	42a6      	cmp	r6, r4
 8006ba2:	d109      	bne.n	8006bb8 <__libc_init_array+0x24>
 8006ba4:	4d0b      	ldr	r5, [pc, #44]	@ (8006bd4 <__libc_init_array+0x40>)
 8006ba6:	4c0c      	ldr	r4, [pc, #48]	@ (8006bd8 <__libc_init_array+0x44>)
 8006ba8:	f000 fe56 	bl	8007858 <_init>
 8006bac:	1b64      	subs	r4, r4, r5
 8006bae:	10a4      	asrs	r4, r4, #2
 8006bb0:	2600      	movs	r6, #0
 8006bb2:	42a6      	cmp	r6, r4
 8006bb4:	d105      	bne.n	8006bc2 <__libc_init_array+0x2e>
 8006bb6:	bd70      	pop	{r4, r5, r6, pc}
 8006bb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bbc:	4798      	blx	r3
 8006bbe:	3601      	adds	r6, #1
 8006bc0:	e7ee      	b.n	8006ba0 <__libc_init_array+0xc>
 8006bc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bc6:	4798      	blx	r3
 8006bc8:	3601      	adds	r6, #1
 8006bca:	e7f2      	b.n	8006bb2 <__libc_init_array+0x1e>
 8006bcc:	080082d0 	.word	0x080082d0
 8006bd0:	080082d0 	.word	0x080082d0
 8006bd4:	080082d0 	.word	0x080082d0
 8006bd8:	080082d4 	.word	0x080082d4
 8006bdc:	00000000 	.word	0x00000000

08006be0 <cos>:
 8006be0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006be2:	eeb0 7b40 	vmov.f64	d7, d0
 8006be6:	ee17 3a90 	vmov	r3, s15
 8006bea:	4a21      	ldr	r2, [pc, #132]	@ (8006c70 <cos+0x90>)
 8006bec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d806      	bhi.n	8006c02 <cos+0x22>
 8006bf4:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8006c68 <cos+0x88>
 8006bf8:	b005      	add	sp, #20
 8006bfa:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bfe:	f000 b8ab 	b.w	8006d58 <__kernel_cos>
 8006c02:	4a1c      	ldr	r2, [pc, #112]	@ (8006c74 <cos+0x94>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d904      	bls.n	8006c12 <cos+0x32>
 8006c08:	ee30 0b40 	vsub.f64	d0, d0, d0
 8006c0c:	b005      	add	sp, #20
 8006c0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006c12:	4668      	mov	r0, sp
 8006c14:	f000 f960 	bl	8006ed8 <__ieee754_rem_pio2>
 8006c18:	f000 0003 	and.w	r0, r0, #3
 8006c1c:	2801      	cmp	r0, #1
 8006c1e:	d009      	beq.n	8006c34 <cos+0x54>
 8006c20:	2802      	cmp	r0, #2
 8006c22:	d010      	beq.n	8006c46 <cos+0x66>
 8006c24:	b9b0      	cbnz	r0, 8006c54 <cos+0x74>
 8006c26:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006c2a:	ed9d 0b00 	vldr	d0, [sp]
 8006c2e:	f000 f893 	bl	8006d58 <__kernel_cos>
 8006c32:	e7eb      	b.n	8006c0c <cos+0x2c>
 8006c34:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006c38:	ed9d 0b00 	vldr	d0, [sp]
 8006c3c:	f000 f8f4 	bl	8006e28 <__kernel_sin>
 8006c40:	eeb1 0b40 	vneg.f64	d0, d0
 8006c44:	e7e2      	b.n	8006c0c <cos+0x2c>
 8006c46:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006c4a:	ed9d 0b00 	vldr	d0, [sp]
 8006c4e:	f000 f883 	bl	8006d58 <__kernel_cos>
 8006c52:	e7f5      	b.n	8006c40 <cos+0x60>
 8006c54:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006c58:	ed9d 0b00 	vldr	d0, [sp]
 8006c5c:	2001      	movs	r0, #1
 8006c5e:	f000 f8e3 	bl	8006e28 <__kernel_sin>
 8006c62:	e7d3      	b.n	8006c0c <cos+0x2c>
 8006c64:	f3af 8000 	nop.w
	...
 8006c70:	3fe921fb 	.word	0x3fe921fb
 8006c74:	7fefffff 	.word	0x7fefffff

08006c78 <sin>:
 8006c78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c7a:	eeb0 7b40 	vmov.f64	d7, d0
 8006c7e:	ee17 3a90 	vmov	r3, s15
 8006c82:	4a21      	ldr	r2, [pc, #132]	@ (8006d08 <sin+0x90>)
 8006c84:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d807      	bhi.n	8006c9c <sin+0x24>
 8006c8c:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8006d00 <sin+0x88>
 8006c90:	2000      	movs	r0, #0
 8006c92:	b005      	add	sp, #20
 8006c94:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c98:	f000 b8c6 	b.w	8006e28 <__kernel_sin>
 8006c9c:	4a1b      	ldr	r2, [pc, #108]	@ (8006d0c <sin+0x94>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d904      	bls.n	8006cac <sin+0x34>
 8006ca2:	ee30 0b40 	vsub.f64	d0, d0, d0
 8006ca6:	b005      	add	sp, #20
 8006ca8:	f85d fb04 	ldr.w	pc, [sp], #4
 8006cac:	4668      	mov	r0, sp
 8006cae:	f000 f913 	bl	8006ed8 <__ieee754_rem_pio2>
 8006cb2:	f000 0003 	and.w	r0, r0, #3
 8006cb6:	2801      	cmp	r0, #1
 8006cb8:	d00a      	beq.n	8006cd0 <sin+0x58>
 8006cba:	2802      	cmp	r0, #2
 8006cbc:	d00f      	beq.n	8006cde <sin+0x66>
 8006cbe:	b9c0      	cbnz	r0, 8006cf2 <sin+0x7a>
 8006cc0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006cc4:	ed9d 0b00 	vldr	d0, [sp]
 8006cc8:	2001      	movs	r0, #1
 8006cca:	f000 f8ad 	bl	8006e28 <__kernel_sin>
 8006cce:	e7ea      	b.n	8006ca6 <sin+0x2e>
 8006cd0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006cd4:	ed9d 0b00 	vldr	d0, [sp]
 8006cd8:	f000 f83e 	bl	8006d58 <__kernel_cos>
 8006cdc:	e7e3      	b.n	8006ca6 <sin+0x2e>
 8006cde:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006ce2:	ed9d 0b00 	vldr	d0, [sp]
 8006ce6:	2001      	movs	r0, #1
 8006ce8:	f000 f89e 	bl	8006e28 <__kernel_sin>
 8006cec:	eeb1 0b40 	vneg.f64	d0, d0
 8006cf0:	e7d9      	b.n	8006ca6 <sin+0x2e>
 8006cf2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006cf6:	ed9d 0b00 	vldr	d0, [sp]
 8006cfa:	f000 f82d 	bl	8006d58 <__kernel_cos>
 8006cfe:	e7f5      	b.n	8006cec <sin+0x74>
	...
 8006d08:	3fe921fb 	.word	0x3fe921fb
 8006d0c:	7fefffff 	.word	0x7fefffff

08006d10 <sqrtf>:
 8006d10:	b508      	push	{r3, lr}
 8006d12:	ed2d 8b02 	vpush	{d8}
 8006d16:	eeb0 8a40 	vmov.f32	s16, s0
 8006d1a:	f000 f817 	bl	8006d4c <__ieee754_sqrtf>
 8006d1e:	eeb4 8a48 	vcmp.f32	s16, s16
 8006d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d26:	d60c      	bvs.n	8006d42 <sqrtf+0x32>
 8006d28:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8006d48 <sqrtf+0x38>
 8006d2c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d34:	d505      	bpl.n	8006d42 <sqrtf+0x32>
 8006d36:	f7ff ff27 	bl	8006b88 <__errno>
 8006d3a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006d3e:	2321      	movs	r3, #33	@ 0x21
 8006d40:	6003      	str	r3, [r0, #0]
 8006d42:	ecbd 8b02 	vpop	{d8}
 8006d46:	bd08      	pop	{r3, pc}
 8006d48:	00000000 	.word	0x00000000

08006d4c <__ieee754_sqrtf>:
 8006d4c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006d50:	4770      	bx	lr
 8006d52:	0000      	movs	r0, r0
 8006d54:	0000      	movs	r0, r0
	...

08006d58 <__kernel_cos>:
 8006d58:	eeb0 5b40 	vmov.f64	d5, d0
 8006d5c:	ee15 1a90 	vmov	r1, s11
 8006d60:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8006d64:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8006d68:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 8006d6c:	d204      	bcs.n	8006d78 <__kernel_cos+0x20>
 8006d6e:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 8006d72:	ee17 3a90 	vmov	r3, s15
 8006d76:	b343      	cbz	r3, 8006dca <__kernel_cos+0x72>
 8006d78:	ee25 6b05 	vmul.f64	d6, d5, d5
 8006d7c:	ee21 1b45 	vnmul.f64	d1, d1, d5
 8006d80:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8006df0 <__kernel_cos+0x98>
 8006d84:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8006df8 <__kernel_cos+0xa0>
 8006d88:	eea6 4b07 	vfma.f64	d4, d6, d7
 8006d8c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8006e00 <__kernel_cos+0xa8>
 8006d90:	eea4 7b06 	vfma.f64	d7, d4, d6
 8006d94:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8006e08 <__kernel_cos+0xb0>
 8006d98:	eea7 4b06 	vfma.f64	d4, d7, d6
 8006d9c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8006e10 <__kernel_cos+0xb8>
 8006da0:	4b1f      	ldr	r3, [pc, #124]	@ (8006e20 <__kernel_cos+0xc8>)
 8006da2:	eea4 7b06 	vfma.f64	d7, d4, d6
 8006da6:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8006e18 <__kernel_cos+0xc0>
 8006daa:	4299      	cmp	r1, r3
 8006dac:	eea7 4b06 	vfma.f64	d4, d7, d6
 8006db0:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8006db4:	ee24 4b06 	vmul.f64	d4, d4, d6
 8006db8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006dbc:	eea6 1b04 	vfma.f64	d1, d6, d4
 8006dc0:	d804      	bhi.n	8006dcc <__kernel_cos+0x74>
 8006dc2:	ee37 7b41 	vsub.f64	d7, d7, d1
 8006dc6:	ee30 0b47 	vsub.f64	d0, d0, d7
 8006dca:	4770      	bx	lr
 8006dcc:	4b15      	ldr	r3, [pc, #84]	@ (8006e24 <__kernel_cos+0xcc>)
 8006dce:	4299      	cmp	r1, r3
 8006dd0:	d809      	bhi.n	8006de6 <__kernel_cos+0x8e>
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 8006dd8:	ec43 2b16 	vmov	d6, r2, r3
 8006ddc:	ee30 0b46 	vsub.f64	d0, d0, d6
 8006de0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006de4:	e7ed      	b.n	8006dc2 <__kernel_cos+0x6a>
 8006de6:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 8006dea:	e7f7      	b.n	8006ddc <__kernel_cos+0x84>
 8006dec:	f3af 8000 	nop.w
 8006df0:	be8838d4 	.word	0xbe8838d4
 8006df4:	bda8fae9 	.word	0xbda8fae9
 8006df8:	bdb4b1c4 	.word	0xbdb4b1c4
 8006dfc:	3e21ee9e 	.word	0x3e21ee9e
 8006e00:	809c52ad 	.word	0x809c52ad
 8006e04:	be927e4f 	.word	0xbe927e4f
 8006e08:	19cb1590 	.word	0x19cb1590
 8006e0c:	3efa01a0 	.word	0x3efa01a0
 8006e10:	16c15177 	.word	0x16c15177
 8006e14:	bf56c16c 	.word	0xbf56c16c
 8006e18:	5555554c 	.word	0x5555554c
 8006e1c:	3fa55555 	.word	0x3fa55555
 8006e20:	3fd33332 	.word	0x3fd33332
 8006e24:	3fe90000 	.word	0x3fe90000

08006e28 <__kernel_sin>:
 8006e28:	ee10 3a90 	vmov	r3, s1
 8006e2c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006e30:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8006e34:	d204      	bcs.n	8006e40 <__kernel_sin+0x18>
 8006e36:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8006e3a:	ee17 3a90 	vmov	r3, s15
 8006e3e:	b35b      	cbz	r3, 8006e98 <__kernel_sin+0x70>
 8006e40:	ee20 6b00 	vmul.f64	d6, d0, d0
 8006e44:	ee20 5b06 	vmul.f64	d5, d0, d6
 8006e48:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8006ea0 <__kernel_sin+0x78>
 8006e4c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8006ea8 <__kernel_sin+0x80>
 8006e50:	eea6 4b07 	vfma.f64	d4, d6, d7
 8006e54:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8006eb0 <__kernel_sin+0x88>
 8006e58:	eea4 7b06 	vfma.f64	d7, d4, d6
 8006e5c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8006eb8 <__kernel_sin+0x90>
 8006e60:	eea7 4b06 	vfma.f64	d4, d7, d6
 8006e64:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8006ec0 <__kernel_sin+0x98>
 8006e68:	eea4 7b06 	vfma.f64	d7, d4, d6
 8006e6c:	b930      	cbnz	r0, 8006e7c <__kernel_sin+0x54>
 8006e6e:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8006ec8 <__kernel_sin+0xa0>
 8006e72:	eea6 4b07 	vfma.f64	d4, d6, d7
 8006e76:	eea4 0b05 	vfma.f64	d0, d4, d5
 8006e7a:	4770      	bx	lr
 8006e7c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8006e80:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 8006e84:	eea1 7b04 	vfma.f64	d7, d1, d4
 8006e88:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8006e8c:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8006ed0 <__kernel_sin+0xa8>
 8006e90:	eea5 1b07 	vfma.f64	d1, d5, d7
 8006e94:	ee30 0b41 	vsub.f64	d0, d0, d1
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	f3af 8000 	nop.w
 8006ea0:	5acfd57c 	.word	0x5acfd57c
 8006ea4:	3de5d93a 	.word	0x3de5d93a
 8006ea8:	8a2b9ceb 	.word	0x8a2b9ceb
 8006eac:	be5ae5e6 	.word	0xbe5ae5e6
 8006eb0:	57b1fe7d 	.word	0x57b1fe7d
 8006eb4:	3ec71de3 	.word	0x3ec71de3
 8006eb8:	19c161d5 	.word	0x19c161d5
 8006ebc:	bf2a01a0 	.word	0xbf2a01a0
 8006ec0:	1110f8a6 	.word	0x1110f8a6
 8006ec4:	3f811111 	.word	0x3f811111
 8006ec8:	55555549 	.word	0x55555549
 8006ecc:	bfc55555 	.word	0xbfc55555
 8006ed0:	55555549 	.word	0x55555549
 8006ed4:	3fc55555 	.word	0x3fc55555

08006ed8 <__ieee754_rem_pio2>:
 8006ed8:	b570      	push	{r4, r5, r6, lr}
 8006eda:	eeb0 7b40 	vmov.f64	d7, d0
 8006ede:	ee17 5a90 	vmov	r5, s15
 8006ee2:	4b99      	ldr	r3, [pc, #612]	@ (8007148 <__ieee754_rem_pio2+0x270>)
 8006ee4:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8006ee8:	429e      	cmp	r6, r3
 8006eea:	b088      	sub	sp, #32
 8006eec:	4604      	mov	r4, r0
 8006eee:	d807      	bhi.n	8006f00 <__ieee754_rem_pio2+0x28>
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	ed84 0b00 	vstr	d0, [r4]
 8006ef8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006efc:	2000      	movs	r0, #0
 8006efe:	e01b      	b.n	8006f38 <__ieee754_rem_pio2+0x60>
 8006f00:	4b92      	ldr	r3, [pc, #584]	@ (800714c <__ieee754_rem_pio2+0x274>)
 8006f02:	429e      	cmp	r6, r3
 8006f04:	d83b      	bhi.n	8006f7e <__ieee754_rem_pio2+0xa6>
 8006f06:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 8006f0a:	2d00      	cmp	r5, #0
 8006f0c:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 8007108 <__ieee754_rem_pio2+0x230>
 8006f10:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 8006f14:	dd19      	ble.n	8006f4a <__ieee754_rem_pio2+0x72>
 8006f16:	ee30 7b46 	vsub.f64	d7, d0, d6
 8006f1a:	429e      	cmp	r6, r3
 8006f1c:	d00e      	beq.n	8006f3c <__ieee754_rem_pio2+0x64>
 8006f1e:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 8007110 <__ieee754_rem_pio2+0x238>
 8006f22:	ee37 6b45 	vsub.f64	d6, d7, d5
 8006f26:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006f2a:	ed84 6b00 	vstr	d6, [r4]
 8006f2e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8006f32:	ed84 7b02 	vstr	d7, [r4, #8]
 8006f36:	2001      	movs	r0, #1
 8006f38:	b008      	add	sp, #32
 8006f3a:	bd70      	pop	{r4, r5, r6, pc}
 8006f3c:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8007118 <__ieee754_rem_pio2+0x240>
 8006f40:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 8007120 <__ieee754_rem_pio2+0x248>
 8006f44:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006f48:	e7eb      	b.n	8006f22 <__ieee754_rem_pio2+0x4a>
 8006f4a:	429e      	cmp	r6, r3
 8006f4c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8006f50:	d00e      	beq.n	8006f70 <__ieee754_rem_pio2+0x98>
 8006f52:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 8007110 <__ieee754_rem_pio2+0x238>
 8006f56:	ee37 6b05 	vadd.f64	d6, d7, d5
 8006f5a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006f5e:	ed84 6b00 	vstr	d6, [r4]
 8006f62:	ee37 7b05 	vadd.f64	d7, d7, d5
 8006f66:	f04f 30ff 	mov.w	r0, #4294967295
 8006f6a:	ed84 7b02 	vstr	d7, [r4, #8]
 8006f6e:	e7e3      	b.n	8006f38 <__ieee754_rem_pio2+0x60>
 8006f70:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8007118 <__ieee754_rem_pio2+0x240>
 8006f74:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 8007120 <__ieee754_rem_pio2+0x248>
 8006f78:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006f7c:	e7eb      	b.n	8006f56 <__ieee754_rem_pio2+0x7e>
 8006f7e:	4b74      	ldr	r3, [pc, #464]	@ (8007150 <__ieee754_rem_pio2+0x278>)
 8006f80:	429e      	cmp	r6, r3
 8006f82:	d870      	bhi.n	8007066 <__ieee754_rem_pio2+0x18e>
 8006f84:	f000 f8ec 	bl	8007160 <fabs>
 8006f88:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8006f8c:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8007128 <__ieee754_rem_pio2+0x250>
 8006f90:	eea0 7b06 	vfma.f64	d7, d0, d6
 8006f94:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006f98:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8006f9c:	ee17 0a90 	vmov	r0, s15
 8006fa0:	eeb1 4b45 	vneg.f64	d4, d5
 8006fa4:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8007108 <__ieee754_rem_pio2+0x230>
 8006fa8:	eea5 0b47 	vfms.f64	d0, d5, d7
 8006fac:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8007110 <__ieee754_rem_pio2+0x238>
 8006fb0:	281f      	cmp	r0, #31
 8006fb2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006fb6:	ee30 6b47 	vsub.f64	d6, d0, d7
 8006fba:	dc05      	bgt.n	8006fc8 <__ieee754_rem_pio2+0xf0>
 8006fbc:	4b65      	ldr	r3, [pc, #404]	@ (8007154 <__ieee754_rem_pio2+0x27c>)
 8006fbe:	1e42      	subs	r2, r0, #1
 8006fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fc4:	42b3      	cmp	r3, r6
 8006fc6:	d109      	bne.n	8006fdc <__ieee754_rem_pio2+0x104>
 8006fc8:	ee16 3a90 	vmov	r3, s13
 8006fcc:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8006fd0:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8006fd4:	2b10      	cmp	r3, #16
 8006fd6:	ea4f 5226 	mov.w	r2, r6, asr #20
 8006fda:	dc02      	bgt.n	8006fe2 <__ieee754_rem_pio2+0x10a>
 8006fdc:	ed84 6b00 	vstr	d6, [r4]
 8006fe0:	e01a      	b.n	8007018 <__ieee754_rem_pio2+0x140>
 8006fe2:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 8007118 <__ieee754_rem_pio2+0x240>
 8006fe6:	eeb0 6b40 	vmov.f64	d6, d0
 8006fea:	eea4 6b03 	vfma.f64	d6, d4, d3
 8006fee:	ee30 7b46 	vsub.f64	d7, d0, d6
 8006ff2:	eea4 7b03 	vfma.f64	d7, d4, d3
 8006ff6:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 8007120 <__ieee754_rem_pio2+0x248>
 8006ffa:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8006ffe:	ee36 3b47 	vsub.f64	d3, d6, d7
 8007002:	ee13 3a90 	vmov	r3, s7
 8007006:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800700a:	1ad3      	subs	r3, r2, r3
 800700c:	2b31      	cmp	r3, #49	@ 0x31
 800700e:	dc17      	bgt.n	8007040 <__ieee754_rem_pio2+0x168>
 8007010:	eeb0 0b46 	vmov.f64	d0, d6
 8007014:	ed84 3b00 	vstr	d3, [r4]
 8007018:	ed94 6b00 	vldr	d6, [r4]
 800701c:	2d00      	cmp	r5, #0
 800701e:	ee30 0b46 	vsub.f64	d0, d0, d6
 8007022:	ee30 0b47 	vsub.f64	d0, d0, d7
 8007026:	ed84 0b02 	vstr	d0, [r4, #8]
 800702a:	da85      	bge.n	8006f38 <__ieee754_rem_pio2+0x60>
 800702c:	eeb1 6b46 	vneg.f64	d6, d6
 8007030:	eeb1 0b40 	vneg.f64	d0, d0
 8007034:	ed84 6b00 	vstr	d6, [r4]
 8007038:	ed84 0b02 	vstr	d0, [r4, #8]
 800703c:	4240      	negs	r0, r0
 800703e:	e77b      	b.n	8006f38 <__ieee754_rem_pio2+0x60>
 8007040:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8007130 <__ieee754_rem_pio2+0x258>
 8007044:	eeb0 0b46 	vmov.f64	d0, d6
 8007048:	eea4 0b07 	vfma.f64	d0, d4, d7
 800704c:	ee36 6b40 	vsub.f64	d6, d6, d0
 8007050:	eea4 6b07 	vfma.f64	d6, d4, d7
 8007054:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 8007138 <__ieee754_rem_pio2+0x260>
 8007058:	eeb0 7b46 	vmov.f64	d7, d6
 800705c:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8007060:	ee30 6b47 	vsub.f64	d6, d0, d7
 8007064:	e7ba      	b.n	8006fdc <__ieee754_rem_pio2+0x104>
 8007066:	4b3c      	ldr	r3, [pc, #240]	@ (8007158 <__ieee754_rem_pio2+0x280>)
 8007068:	429e      	cmp	r6, r3
 800706a:	d906      	bls.n	800707a <__ieee754_rem_pio2+0x1a2>
 800706c:	ee30 7b40 	vsub.f64	d7, d0, d0
 8007070:	ed80 7b02 	vstr	d7, [r0, #8]
 8007074:	ed80 7b00 	vstr	d7, [r0]
 8007078:	e740      	b.n	8006efc <__ieee754_rem_pio2+0x24>
 800707a:	ee10 3a10 	vmov	r3, s0
 800707e:	1532      	asrs	r2, r6, #20
 8007080:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 8007084:	4618      	mov	r0, r3
 8007086:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800708a:	ec41 0b17 	vmov	d7, r0, r1
 800708e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8007092:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8007140 <__ieee754_rem_pio2+0x268>
 8007096:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800709a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800709e:	ed8d 6b02 	vstr	d6, [sp, #8]
 80070a2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80070a6:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80070aa:	a808      	add	r0, sp, #32
 80070ac:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80070b0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80070b4:	ed8d 6b04 	vstr	d6, [sp, #16]
 80070b8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80070bc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80070c0:	2103      	movs	r1, #3
 80070c2:	ed30 7b02 	vldmdb	r0!, {d7}
 80070c6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80070ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070ce:	460b      	mov	r3, r1
 80070d0:	f101 31ff 	add.w	r1, r1, #4294967295
 80070d4:	d0f5      	beq.n	80070c2 <__ieee754_rem_pio2+0x1ea>
 80070d6:	4921      	ldr	r1, [pc, #132]	@ (800715c <__ieee754_rem_pio2+0x284>)
 80070d8:	9101      	str	r1, [sp, #4]
 80070da:	2102      	movs	r1, #2
 80070dc:	9100      	str	r1, [sp, #0]
 80070de:	a802      	add	r0, sp, #8
 80070e0:	4621      	mov	r1, r4
 80070e2:	f000 f845 	bl	8007170 <__kernel_rem_pio2>
 80070e6:	2d00      	cmp	r5, #0
 80070e8:	f6bf af26 	bge.w	8006f38 <__ieee754_rem_pio2+0x60>
 80070ec:	ed94 7b00 	vldr	d7, [r4]
 80070f0:	eeb1 7b47 	vneg.f64	d7, d7
 80070f4:	ed84 7b00 	vstr	d7, [r4]
 80070f8:	ed94 7b02 	vldr	d7, [r4, #8]
 80070fc:	eeb1 7b47 	vneg.f64	d7, d7
 8007100:	ed84 7b02 	vstr	d7, [r4, #8]
 8007104:	e79a      	b.n	800703c <__ieee754_rem_pio2+0x164>
 8007106:	bf00      	nop
 8007108:	54400000 	.word	0x54400000
 800710c:	3ff921fb 	.word	0x3ff921fb
 8007110:	1a626331 	.word	0x1a626331
 8007114:	3dd0b461 	.word	0x3dd0b461
 8007118:	1a600000 	.word	0x1a600000
 800711c:	3dd0b461 	.word	0x3dd0b461
 8007120:	2e037073 	.word	0x2e037073
 8007124:	3ba3198a 	.word	0x3ba3198a
 8007128:	6dc9c883 	.word	0x6dc9c883
 800712c:	3fe45f30 	.word	0x3fe45f30
 8007130:	2e000000 	.word	0x2e000000
 8007134:	3ba3198a 	.word	0x3ba3198a
 8007138:	252049c1 	.word	0x252049c1
 800713c:	397b839a 	.word	0x397b839a
 8007140:	00000000 	.word	0x00000000
 8007144:	41700000 	.word	0x41700000
 8007148:	3fe921fb 	.word	0x3fe921fb
 800714c:	4002d97b 	.word	0x4002d97b
 8007150:	413921fb 	.word	0x413921fb
 8007154:	080080f0 	.word	0x080080f0
 8007158:	7fefffff 	.word	0x7fefffff
 800715c:	08008170 	.word	0x08008170

08007160 <fabs>:
 8007160:	ec51 0b10 	vmov	r0, r1, d0
 8007164:	4602      	mov	r2, r0
 8007166:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800716a:	ec43 2b10 	vmov	d0, r2, r3
 800716e:	4770      	bx	lr

08007170 <__kernel_rem_pio2>:
 8007170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007174:	ed2d 8b06 	vpush	{d8-d10}
 8007178:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 800717c:	469b      	mov	fp, r3
 800717e:	9001      	str	r0, [sp, #4]
 8007180:	4bbb      	ldr	r3, [pc, #748]	@ (8007470 <__kernel_rem_pio2+0x300>)
 8007182:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 8007184:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 8007188:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 800718c:	f112 0f14 	cmn.w	r2, #20
 8007190:	bfa8      	it	ge
 8007192:	1ed3      	subge	r3, r2, #3
 8007194:	f10b 3aff 	add.w	sl, fp, #4294967295
 8007198:	bfb8      	it	lt
 800719a:	2300      	movlt	r3, #0
 800719c:	f06f 0517 	mvn.w	r5, #23
 80071a0:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 8007458 <__kernel_rem_pio2+0x2e8>
 80071a4:	bfa4      	itt	ge
 80071a6:	2018      	movge	r0, #24
 80071a8:	fb93 f3f0 	sdivge	r3, r3, r0
 80071ac:	fb03 5505 	mla	r5, r3, r5, r5
 80071b0:	eba3 040a 	sub.w	r4, r3, sl
 80071b4:	4415      	add	r5, r2
 80071b6:	460f      	mov	r7, r1
 80071b8:	eb09 060a 	add.w	r6, r9, sl
 80071bc:	a81a      	add	r0, sp, #104	@ 0x68
 80071be:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 80071c2:	2200      	movs	r2, #0
 80071c4:	42b2      	cmp	r2, r6
 80071c6:	dd0e      	ble.n	80071e6 <__kernel_rem_pio2+0x76>
 80071c8:	aa1a      	add	r2, sp, #104	@ 0x68
 80071ca:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 80071ce:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 80071d2:	2600      	movs	r6, #0
 80071d4:	454e      	cmp	r6, r9
 80071d6:	dc25      	bgt.n	8007224 <__kernel_rem_pio2+0xb4>
 80071d8:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 8007458 <__kernel_rem_pio2+0x2e8>
 80071dc:	f8dd c004 	ldr.w	ip, [sp, #4]
 80071e0:	4614      	mov	r4, r2
 80071e2:	2000      	movs	r0, #0
 80071e4:	e015      	b.n	8007212 <__kernel_rem_pio2+0xa2>
 80071e6:	42d4      	cmn	r4, r2
 80071e8:	d409      	bmi.n	80071fe <__kernel_rem_pio2+0x8e>
 80071ea:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 80071ee:	ee07 1a90 	vmov	s15, r1
 80071f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80071f6:	eca0 7b02 	vstmia	r0!, {d7}
 80071fa:	3201      	adds	r2, #1
 80071fc:	e7e2      	b.n	80071c4 <__kernel_rem_pio2+0x54>
 80071fe:	eeb0 7b46 	vmov.f64	d7, d6
 8007202:	e7f8      	b.n	80071f6 <__kernel_rem_pio2+0x86>
 8007204:	ecbc 5b02 	vldmia	ip!, {d5}
 8007208:	ed94 6b00 	vldr	d6, [r4]
 800720c:	3001      	adds	r0, #1
 800720e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8007212:	4550      	cmp	r0, sl
 8007214:	f1a4 0408 	sub.w	r4, r4, #8
 8007218:	ddf4      	ble.n	8007204 <__kernel_rem_pio2+0x94>
 800721a:	ecae 7b02 	vstmia	lr!, {d7}
 800721e:	3601      	adds	r6, #1
 8007220:	3208      	adds	r2, #8
 8007222:	e7d7      	b.n	80071d4 <__kernel_rem_pio2+0x64>
 8007224:	aa06      	add	r2, sp, #24
 8007226:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 8007460 <__kernel_rem_pio2+0x2f0>
 800722a:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 8007468 <__kernel_rem_pio2+0x2f8>
 800722e:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8007232:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8007236:	9203      	str	r2, [sp, #12]
 8007238:	9302      	str	r3, [sp, #8]
 800723a:	464c      	mov	r4, r9
 800723c:	00e3      	lsls	r3, r4, #3
 800723e:	9304      	str	r3, [sp, #16]
 8007240:	ab92      	add	r3, sp, #584	@ 0x248
 8007242:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007246:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 800724a:	aa6a      	add	r2, sp, #424	@ 0x1a8
 800724c:	ab06      	add	r3, sp, #24
 800724e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8007252:	461e      	mov	r6, r3
 8007254:	4620      	mov	r0, r4
 8007256:	2800      	cmp	r0, #0
 8007258:	f1a2 0208 	sub.w	r2, r2, #8
 800725c:	dc4a      	bgt.n	80072f4 <__kernel_rem_pio2+0x184>
 800725e:	4628      	mov	r0, r5
 8007260:	9305      	str	r3, [sp, #20]
 8007262:	f000 fa01 	bl	8007668 <scalbn>
 8007266:	eeb0 8b40 	vmov.f64	d8, d0
 800726a:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 800726e:	ee28 0b00 	vmul.f64	d0, d8, d0
 8007272:	f000 fa79 	bl	8007768 <floor>
 8007276:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 800727a:	eea0 8b47 	vfms.f64	d8, d0, d7
 800727e:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8007282:	2d00      	cmp	r5, #0
 8007284:	ee17 8a90 	vmov	r8, s15
 8007288:	9b05      	ldr	r3, [sp, #20]
 800728a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800728e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8007292:	dd41      	ble.n	8007318 <__kernel_rem_pio2+0x1a8>
 8007294:	1e60      	subs	r0, r4, #1
 8007296:	aa06      	add	r2, sp, #24
 8007298:	f1c5 0c18 	rsb	ip, r5, #24
 800729c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 80072a0:	fa46 f20c 	asr.w	r2, r6, ip
 80072a4:	4490      	add	r8, r2
 80072a6:	fa02 f20c 	lsl.w	r2, r2, ip
 80072aa:	1ab6      	subs	r6, r6, r2
 80072ac:	aa06      	add	r2, sp, #24
 80072ae:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 80072b2:	f1c5 0217 	rsb	r2, r5, #23
 80072b6:	4116      	asrs	r6, r2
 80072b8:	2e00      	cmp	r6, #0
 80072ba:	dd3c      	ble.n	8007336 <__kernel_rem_pio2+0x1c6>
 80072bc:	f04f 0c00 	mov.w	ip, #0
 80072c0:	f108 0801 	add.w	r8, r8, #1
 80072c4:	4660      	mov	r0, ip
 80072c6:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 80072ca:	4564      	cmp	r4, ip
 80072cc:	dc66      	bgt.n	800739c <__kernel_rem_pio2+0x22c>
 80072ce:	2d00      	cmp	r5, #0
 80072d0:	dd03      	ble.n	80072da <__kernel_rem_pio2+0x16a>
 80072d2:	2d01      	cmp	r5, #1
 80072d4:	d072      	beq.n	80073bc <__kernel_rem_pio2+0x24c>
 80072d6:	2d02      	cmp	r5, #2
 80072d8:	d07a      	beq.n	80073d0 <__kernel_rem_pio2+0x260>
 80072da:	2e02      	cmp	r6, #2
 80072dc:	d12b      	bne.n	8007336 <__kernel_rem_pio2+0x1c6>
 80072de:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80072e2:	ee30 8b48 	vsub.f64	d8, d0, d8
 80072e6:	b330      	cbz	r0, 8007336 <__kernel_rem_pio2+0x1c6>
 80072e8:	4628      	mov	r0, r5
 80072ea:	f000 f9bd 	bl	8007668 <scalbn>
 80072ee:	ee38 8b40 	vsub.f64	d8, d8, d0
 80072f2:	e020      	b.n	8007336 <__kernel_rem_pio2+0x1c6>
 80072f4:	ee20 7b09 	vmul.f64	d7, d0, d9
 80072f8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80072fc:	3801      	subs	r0, #1
 80072fe:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8007302:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8007306:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800730a:	eca6 0a01 	vstmia	r6!, {s0}
 800730e:	ed92 0b00 	vldr	d0, [r2]
 8007312:	ee37 0b00 	vadd.f64	d0, d7, d0
 8007316:	e79e      	b.n	8007256 <__kernel_rem_pio2+0xe6>
 8007318:	d105      	bne.n	8007326 <__kernel_rem_pio2+0x1b6>
 800731a:	1e62      	subs	r2, r4, #1
 800731c:	a906      	add	r1, sp, #24
 800731e:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8007322:	15f6      	asrs	r6, r6, #23
 8007324:	e7c8      	b.n	80072b8 <__kernel_rem_pio2+0x148>
 8007326:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800732a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800732e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007332:	da31      	bge.n	8007398 <__kernel_rem_pio2+0x228>
 8007334:	2600      	movs	r6, #0
 8007336:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800733a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800733e:	f040 809b 	bne.w	8007478 <__kernel_rem_pio2+0x308>
 8007342:	1e62      	subs	r2, r4, #1
 8007344:	2000      	movs	r0, #0
 8007346:	454a      	cmp	r2, r9
 8007348:	da49      	bge.n	80073de <__kernel_rem_pio2+0x26e>
 800734a:	2800      	cmp	r0, #0
 800734c:	d062      	beq.n	8007414 <__kernel_rem_pio2+0x2a4>
 800734e:	3c01      	subs	r4, #1
 8007350:	ab06      	add	r3, sp, #24
 8007352:	3d18      	subs	r5, #24
 8007354:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d0f8      	beq.n	800734e <__kernel_rem_pio2+0x1de>
 800735c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8007360:	4628      	mov	r0, r5
 8007362:	f000 f981 	bl	8007668 <scalbn>
 8007366:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8007460 <__kernel_rem_pio2+0x2f0>
 800736a:	1c62      	adds	r2, r4, #1
 800736c:	a96a      	add	r1, sp, #424	@ 0x1a8
 800736e:	00d3      	lsls	r3, r2, #3
 8007370:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8007374:	4622      	mov	r2, r4
 8007376:	2a00      	cmp	r2, #0
 8007378:	f280 80a8 	bge.w	80074cc <__kernel_rem_pio2+0x35c>
 800737c:	4622      	mov	r2, r4
 800737e:	2a00      	cmp	r2, #0
 8007380:	f2c0 80c6 	blt.w	8007510 <__kernel_rem_pio2+0x3a0>
 8007384:	a96a      	add	r1, sp, #424	@ 0x1a8
 8007386:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800738a:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 8007458 <__kernel_rem_pio2+0x2e8>
 800738e:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 8007474 <__kernel_rem_pio2+0x304>
 8007392:	2000      	movs	r0, #0
 8007394:	1aa1      	subs	r1, r4, r2
 8007396:	e0b0      	b.n	80074fa <__kernel_rem_pio2+0x38a>
 8007398:	2602      	movs	r6, #2
 800739a:	e78f      	b.n	80072bc <__kernel_rem_pio2+0x14c>
 800739c:	f853 2b04 	ldr.w	r2, [r3], #4
 80073a0:	b948      	cbnz	r0, 80073b6 <__kernel_rem_pio2+0x246>
 80073a2:	b122      	cbz	r2, 80073ae <__kernel_rem_pio2+0x23e>
 80073a4:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 80073a8:	f843 2c04 	str.w	r2, [r3, #-4]
 80073ac:	2201      	movs	r2, #1
 80073ae:	f10c 0c01 	add.w	ip, ip, #1
 80073b2:	4610      	mov	r0, r2
 80073b4:	e789      	b.n	80072ca <__kernel_rem_pio2+0x15a>
 80073b6:	ebae 0202 	sub.w	r2, lr, r2
 80073ba:	e7f5      	b.n	80073a8 <__kernel_rem_pio2+0x238>
 80073bc:	1e62      	subs	r2, r4, #1
 80073be:	ab06      	add	r3, sp, #24
 80073c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80073c8:	a906      	add	r1, sp, #24
 80073ca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80073ce:	e784      	b.n	80072da <__kernel_rem_pio2+0x16a>
 80073d0:	1e62      	subs	r2, r4, #1
 80073d2:	ab06      	add	r3, sp, #24
 80073d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80073dc:	e7f4      	b.n	80073c8 <__kernel_rem_pio2+0x258>
 80073de:	ab06      	add	r3, sp, #24
 80073e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073e4:	3a01      	subs	r2, #1
 80073e6:	4318      	orrs	r0, r3
 80073e8:	e7ad      	b.n	8007346 <__kernel_rem_pio2+0x1d6>
 80073ea:	3301      	adds	r3, #1
 80073ec:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 80073f0:	2800      	cmp	r0, #0
 80073f2:	d0fa      	beq.n	80073ea <__kernel_rem_pio2+0x27a>
 80073f4:	9a04      	ldr	r2, [sp, #16]
 80073f6:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 80073fa:	446a      	add	r2, sp
 80073fc:	eb04 000b 	add.w	r0, r4, fp
 8007400:	a91a      	add	r1, sp, #104	@ 0x68
 8007402:	1c66      	adds	r6, r4, #1
 8007404:	3a98      	subs	r2, #152	@ 0x98
 8007406:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800740a:	4423      	add	r3, r4
 800740c:	42b3      	cmp	r3, r6
 800740e:	da04      	bge.n	800741a <__kernel_rem_pio2+0x2aa>
 8007410:	461c      	mov	r4, r3
 8007412:	e713      	b.n	800723c <__kernel_rem_pio2+0xcc>
 8007414:	9a03      	ldr	r2, [sp, #12]
 8007416:	2301      	movs	r3, #1
 8007418:	e7e8      	b.n	80073ec <__kernel_rem_pio2+0x27c>
 800741a:	9902      	ldr	r1, [sp, #8]
 800741c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007420:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 8007424:	9104      	str	r1, [sp, #16]
 8007426:	ee07 1a90 	vmov	s15, r1
 800742a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800742e:	2400      	movs	r4, #0
 8007430:	eca0 7b02 	vstmia	r0!, {d7}
 8007434:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8007458 <__kernel_rem_pio2+0x2e8>
 8007438:	4686      	mov	lr, r0
 800743a:	4554      	cmp	r4, sl
 800743c:	dd03      	ble.n	8007446 <__kernel_rem_pio2+0x2d6>
 800743e:	eca2 7b02 	vstmia	r2!, {d7}
 8007442:	3601      	adds	r6, #1
 8007444:	e7e2      	b.n	800740c <__kernel_rem_pio2+0x29c>
 8007446:	ecbc 5b02 	vldmia	ip!, {d5}
 800744a:	ed3e 6b02 	vldmdb	lr!, {d6}
 800744e:	3401      	adds	r4, #1
 8007450:	eea5 7b06 	vfma.f64	d7, d5, d6
 8007454:	e7f1      	b.n	800743a <__kernel_rem_pio2+0x2ca>
 8007456:	bf00      	nop
	...
 8007464:	3e700000 	.word	0x3e700000
 8007468:	00000000 	.word	0x00000000
 800746c:	41700000 	.word	0x41700000
 8007470:	080082b8 	.word	0x080082b8
 8007474:	08008278 	.word	0x08008278
 8007478:	4268      	negs	r0, r5
 800747a:	eeb0 0b48 	vmov.f64	d0, d8
 800747e:	f000 f8f3 	bl	8007668 <scalbn>
 8007482:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 8007650 <__kernel_rem_pio2+0x4e0>
 8007486:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800748a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800748e:	db17      	blt.n	80074c0 <__kernel_rem_pio2+0x350>
 8007490:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 8007658 <__kernel_rem_pio2+0x4e8>
 8007494:	ee20 7b07 	vmul.f64	d7, d0, d7
 8007498:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800749c:	aa06      	add	r2, sp, #24
 800749e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 80074a2:	eea5 0b46 	vfms.f64	d0, d5, d6
 80074a6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80074aa:	3518      	adds	r5, #24
 80074ac:	ee10 3a10 	vmov	r3, s0
 80074b0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80074b4:	ee17 3a10 	vmov	r3, s14
 80074b8:	3401      	adds	r4, #1
 80074ba:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80074be:	e74d      	b.n	800735c <__kernel_rem_pio2+0x1ec>
 80074c0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80074c4:	aa06      	add	r2, sp, #24
 80074c6:	ee10 3a10 	vmov	r3, s0
 80074ca:	e7f6      	b.n	80074ba <__kernel_rem_pio2+0x34a>
 80074cc:	a806      	add	r0, sp, #24
 80074ce:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80074d2:	9001      	str	r0, [sp, #4]
 80074d4:	ee07 0a90 	vmov	s15, r0
 80074d8:	3a01      	subs	r2, #1
 80074da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80074de:	ee27 7b00 	vmul.f64	d7, d7, d0
 80074e2:	ee20 0b06 	vmul.f64	d0, d0, d6
 80074e6:	ed21 7b02 	vstmdb	r1!, {d7}
 80074ea:	e744      	b.n	8007376 <__kernel_rem_pio2+0x206>
 80074ec:	ecbc 5b02 	vldmia	ip!, {d5}
 80074f0:	ecb5 6b02 	vldmia	r5!, {d6}
 80074f4:	3001      	adds	r0, #1
 80074f6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80074fa:	4548      	cmp	r0, r9
 80074fc:	dc01      	bgt.n	8007502 <__kernel_rem_pio2+0x392>
 80074fe:	4281      	cmp	r1, r0
 8007500:	daf4      	bge.n	80074ec <__kernel_rem_pio2+0x37c>
 8007502:	a842      	add	r0, sp, #264	@ 0x108
 8007504:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8007508:	ed81 7b00 	vstr	d7, [r1]
 800750c:	3a01      	subs	r2, #1
 800750e:	e736      	b.n	800737e <__kernel_rem_pio2+0x20e>
 8007510:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8007512:	2a02      	cmp	r2, #2
 8007514:	dc0a      	bgt.n	800752c <__kernel_rem_pio2+0x3bc>
 8007516:	2a00      	cmp	r2, #0
 8007518:	dc2d      	bgt.n	8007576 <__kernel_rem_pio2+0x406>
 800751a:	d046      	beq.n	80075aa <__kernel_rem_pio2+0x43a>
 800751c:	f008 0007 	and.w	r0, r8, #7
 8007520:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 8007524:	ecbd 8b06 	vpop	{d8-d10}
 8007528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800752c:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800752e:	2a03      	cmp	r2, #3
 8007530:	d1f4      	bne.n	800751c <__kernel_rem_pio2+0x3ac>
 8007532:	a942      	add	r1, sp, #264	@ 0x108
 8007534:	f1a3 0208 	sub.w	r2, r3, #8
 8007538:	440a      	add	r2, r1
 800753a:	4611      	mov	r1, r2
 800753c:	4620      	mov	r0, r4
 800753e:	2800      	cmp	r0, #0
 8007540:	f1a1 0108 	sub.w	r1, r1, #8
 8007544:	dc52      	bgt.n	80075ec <__kernel_rem_pio2+0x47c>
 8007546:	4621      	mov	r1, r4
 8007548:	2901      	cmp	r1, #1
 800754a:	f1a2 0208 	sub.w	r2, r2, #8
 800754e:	dc5d      	bgt.n	800760c <__kernel_rem_pio2+0x49c>
 8007550:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 8007660 <__kernel_rem_pio2+0x4f0>
 8007554:	aa42      	add	r2, sp, #264	@ 0x108
 8007556:	4413      	add	r3, r2
 8007558:	2c01      	cmp	r4, #1
 800755a:	dc67      	bgt.n	800762c <__kernel_rem_pio2+0x4bc>
 800755c:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 8007560:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 8007564:	2e00      	cmp	r6, #0
 8007566:	d167      	bne.n	8007638 <__kernel_rem_pio2+0x4c8>
 8007568:	ed87 5b00 	vstr	d5, [r7]
 800756c:	ed87 6b02 	vstr	d6, [r7, #8]
 8007570:	ed87 7b04 	vstr	d7, [r7, #16]
 8007574:	e7d2      	b.n	800751c <__kernel_rem_pio2+0x3ac>
 8007576:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 8007660 <__kernel_rem_pio2+0x4f0>
 800757a:	aa42      	add	r2, sp, #264	@ 0x108
 800757c:	4413      	add	r3, r2
 800757e:	4622      	mov	r2, r4
 8007580:	2a00      	cmp	r2, #0
 8007582:	da24      	bge.n	80075ce <__kernel_rem_pio2+0x45e>
 8007584:	b34e      	cbz	r6, 80075da <__kernel_rem_pio2+0x46a>
 8007586:	eeb1 7b46 	vneg.f64	d7, d6
 800758a:	ed87 7b00 	vstr	d7, [r7]
 800758e:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 8007592:	aa44      	add	r2, sp, #272	@ 0x110
 8007594:	2301      	movs	r3, #1
 8007596:	ee37 7b46 	vsub.f64	d7, d7, d6
 800759a:	429c      	cmp	r4, r3
 800759c:	da20      	bge.n	80075e0 <__kernel_rem_pio2+0x470>
 800759e:	b10e      	cbz	r6, 80075a4 <__kernel_rem_pio2+0x434>
 80075a0:	eeb1 7b47 	vneg.f64	d7, d7
 80075a4:	ed87 7b02 	vstr	d7, [r7, #8]
 80075a8:	e7b8      	b.n	800751c <__kernel_rem_pio2+0x3ac>
 80075aa:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8007660 <__kernel_rem_pio2+0x4f0>
 80075ae:	aa42      	add	r2, sp, #264	@ 0x108
 80075b0:	4413      	add	r3, r2
 80075b2:	2c00      	cmp	r4, #0
 80075b4:	da05      	bge.n	80075c2 <__kernel_rem_pio2+0x452>
 80075b6:	b10e      	cbz	r6, 80075bc <__kernel_rem_pio2+0x44c>
 80075b8:	eeb1 7b47 	vneg.f64	d7, d7
 80075bc:	ed87 7b00 	vstr	d7, [r7]
 80075c0:	e7ac      	b.n	800751c <__kernel_rem_pio2+0x3ac>
 80075c2:	ed33 6b02 	vldmdb	r3!, {d6}
 80075c6:	3c01      	subs	r4, #1
 80075c8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80075cc:	e7f1      	b.n	80075b2 <__kernel_rem_pio2+0x442>
 80075ce:	ed33 7b02 	vldmdb	r3!, {d7}
 80075d2:	3a01      	subs	r2, #1
 80075d4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80075d8:	e7d2      	b.n	8007580 <__kernel_rem_pio2+0x410>
 80075da:	eeb0 7b46 	vmov.f64	d7, d6
 80075de:	e7d4      	b.n	800758a <__kernel_rem_pio2+0x41a>
 80075e0:	ecb2 6b02 	vldmia	r2!, {d6}
 80075e4:	3301      	adds	r3, #1
 80075e6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80075ea:	e7d6      	b.n	800759a <__kernel_rem_pio2+0x42a>
 80075ec:	ed91 7b00 	vldr	d7, [r1]
 80075f0:	ed91 5b02 	vldr	d5, [r1, #8]
 80075f4:	3801      	subs	r0, #1
 80075f6:	ee37 6b05 	vadd.f64	d6, d7, d5
 80075fa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80075fe:	ed81 6b00 	vstr	d6, [r1]
 8007602:	ee37 7b05 	vadd.f64	d7, d7, d5
 8007606:	ed81 7b02 	vstr	d7, [r1, #8]
 800760a:	e798      	b.n	800753e <__kernel_rem_pio2+0x3ce>
 800760c:	ed92 7b00 	vldr	d7, [r2]
 8007610:	ed92 5b02 	vldr	d5, [r2, #8]
 8007614:	3901      	subs	r1, #1
 8007616:	ee37 6b05 	vadd.f64	d6, d7, d5
 800761a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800761e:	ed82 6b00 	vstr	d6, [r2]
 8007622:	ee37 7b05 	vadd.f64	d7, d7, d5
 8007626:	ed82 7b02 	vstr	d7, [r2, #8]
 800762a:	e78d      	b.n	8007548 <__kernel_rem_pio2+0x3d8>
 800762c:	ed33 6b02 	vldmdb	r3!, {d6}
 8007630:	3c01      	subs	r4, #1
 8007632:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007636:	e78f      	b.n	8007558 <__kernel_rem_pio2+0x3e8>
 8007638:	eeb1 5b45 	vneg.f64	d5, d5
 800763c:	eeb1 6b46 	vneg.f64	d6, d6
 8007640:	ed87 5b00 	vstr	d5, [r7]
 8007644:	eeb1 7b47 	vneg.f64	d7, d7
 8007648:	ed87 6b02 	vstr	d6, [r7, #8]
 800764c:	e790      	b.n	8007570 <__kernel_rem_pio2+0x400>
 800764e:	bf00      	nop
 8007650:	00000000 	.word	0x00000000
 8007654:	41700000 	.word	0x41700000
 8007658:	00000000 	.word	0x00000000
 800765c:	3e700000 	.word	0x3e700000
	...

08007668 <scalbn>:
 8007668:	ee10 1a90 	vmov	r1, s1
 800766c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007670:	b98b      	cbnz	r3, 8007696 <scalbn+0x2e>
 8007672:	ee10 3a10 	vmov	r3, s0
 8007676:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800767a:	4319      	orrs	r1, r3
 800767c:	d00a      	beq.n	8007694 <scalbn+0x2c>
 800767e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8007730 <scalbn+0xc8>
 8007682:	4b37      	ldr	r3, [pc, #220]	@ (8007760 <scalbn+0xf8>)
 8007684:	ee20 0b07 	vmul.f64	d0, d0, d7
 8007688:	4298      	cmp	r0, r3
 800768a:	da0b      	bge.n	80076a4 <scalbn+0x3c>
 800768c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8007738 <scalbn+0xd0>
 8007690:	ee20 0b07 	vmul.f64	d0, d0, d7
 8007694:	4770      	bx	lr
 8007696:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800769a:	4293      	cmp	r3, r2
 800769c:	d107      	bne.n	80076ae <scalbn+0x46>
 800769e:	ee30 0b00 	vadd.f64	d0, d0, d0
 80076a2:	4770      	bx	lr
 80076a4:	ee10 1a90 	vmov	r1, s1
 80076a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80076ac:	3b36      	subs	r3, #54	@ 0x36
 80076ae:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80076b2:	4290      	cmp	r0, r2
 80076b4:	dd0d      	ble.n	80076d2 <scalbn+0x6a>
 80076b6:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8007740 <scalbn+0xd8>
 80076ba:	ee10 3a90 	vmov	r3, s1
 80076be:	eeb0 6b47 	vmov.f64	d6, d7
 80076c2:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 8007748 <scalbn+0xe0>
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	fe27 7b05 	vselge.f64	d7, d7, d5
 80076cc:	ee27 0b06 	vmul.f64	d0, d7, d6
 80076d0:	4770      	bx	lr
 80076d2:	4418      	add	r0, r3
 80076d4:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 80076d8:	4298      	cmp	r0, r3
 80076da:	dcec      	bgt.n	80076b6 <scalbn+0x4e>
 80076dc:	2800      	cmp	r0, #0
 80076de:	dd0a      	ble.n	80076f6 <scalbn+0x8e>
 80076e0:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 80076e4:	ec53 2b10 	vmov	r2, r3, d0
 80076e8:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 80076ec:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 80076f0:	ec43 2b10 	vmov	d0, r2, r3
 80076f4:	4770      	bx	lr
 80076f6:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 80076fa:	da09      	bge.n	8007710 <scalbn+0xa8>
 80076fc:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 8007738 <scalbn+0xd0>
 8007700:	ee10 3a90 	vmov	r3, s1
 8007704:	eeb0 6b47 	vmov.f64	d6, d7
 8007708:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8007750 <scalbn+0xe8>
 800770c:	2b00      	cmp	r3, #0
 800770e:	e7db      	b.n	80076c8 <scalbn+0x60>
 8007710:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 8007714:	ec53 2b10 	vmov	r2, r3, d0
 8007718:	3036      	adds	r0, #54	@ 0x36
 800771a:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800771e:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8007722:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8007758 <scalbn+0xf0>
 8007726:	ec43 2b10 	vmov	d0, r2, r3
 800772a:	e7b1      	b.n	8007690 <scalbn+0x28>
 800772c:	f3af 8000 	nop.w
 8007730:	00000000 	.word	0x00000000
 8007734:	43500000 	.word	0x43500000
 8007738:	c2f8f359 	.word	0xc2f8f359
 800773c:	01a56e1f 	.word	0x01a56e1f
 8007740:	8800759c 	.word	0x8800759c
 8007744:	7e37e43c 	.word	0x7e37e43c
 8007748:	8800759c 	.word	0x8800759c
 800774c:	fe37e43c 	.word	0xfe37e43c
 8007750:	c2f8f359 	.word	0xc2f8f359
 8007754:	81a56e1f 	.word	0x81a56e1f
 8007758:	00000000 	.word	0x00000000
 800775c:	3c900000 	.word	0x3c900000
 8007760:	ffff3cb0 	.word	0xffff3cb0
 8007764:	00000000 	.word	0x00000000

08007768 <floor>:
 8007768:	ee10 3a90 	vmov	r3, s1
 800776c:	f3c3 500a 	ubfx	r0, r3, #20, #11
 8007770:	ee10 2a10 	vmov	r2, s0
 8007774:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8007778:	2913      	cmp	r1, #19
 800777a:	b530      	push	{r4, r5, lr}
 800777c:	4615      	mov	r5, r2
 800777e:	dc33      	bgt.n	80077e8 <floor+0x80>
 8007780:	2900      	cmp	r1, #0
 8007782:	da18      	bge.n	80077b6 <floor+0x4e>
 8007784:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 8007848 <floor+0xe0>
 8007788:	ee30 0b07 	vadd.f64	d0, d0, d7
 800778c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007794:	dd0a      	ble.n	80077ac <floor+0x44>
 8007796:	2b00      	cmp	r3, #0
 8007798:	da50      	bge.n	800783c <floor+0xd4>
 800779a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800779e:	4313      	orrs	r3, r2
 80077a0:	2200      	movs	r2, #0
 80077a2:	4293      	cmp	r3, r2
 80077a4:	4b2a      	ldr	r3, [pc, #168]	@ (8007850 <floor+0xe8>)
 80077a6:	bf08      	it	eq
 80077a8:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80077ac:	4619      	mov	r1, r3
 80077ae:	4610      	mov	r0, r2
 80077b0:	ec41 0b10 	vmov	d0, r0, r1
 80077b4:	e01f      	b.n	80077f6 <floor+0x8e>
 80077b6:	4827      	ldr	r0, [pc, #156]	@ (8007854 <floor+0xec>)
 80077b8:	4108      	asrs	r0, r1
 80077ba:	ea03 0400 	and.w	r4, r3, r0
 80077be:	4314      	orrs	r4, r2
 80077c0:	d019      	beq.n	80077f6 <floor+0x8e>
 80077c2:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007848 <floor+0xe0>
 80077c6:	ee30 0b07 	vadd.f64	d0, d0, d7
 80077ca:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80077ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077d2:	ddeb      	ble.n	80077ac <floor+0x44>
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	bfbe      	ittt	lt
 80077d8:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 80077dc:	410a      	asrlt	r2, r1
 80077de:	189b      	addlt	r3, r3, r2
 80077e0:	ea23 0300 	bic.w	r3, r3, r0
 80077e4:	2200      	movs	r2, #0
 80077e6:	e7e1      	b.n	80077ac <floor+0x44>
 80077e8:	2933      	cmp	r1, #51	@ 0x33
 80077ea:	dd05      	ble.n	80077f8 <floor+0x90>
 80077ec:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80077f0:	d101      	bne.n	80077f6 <floor+0x8e>
 80077f2:	ee30 0b00 	vadd.f64	d0, d0, d0
 80077f6:	bd30      	pop	{r4, r5, pc}
 80077f8:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 80077fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007800:	40e0      	lsrs	r0, r4
 8007802:	4210      	tst	r0, r2
 8007804:	d0f7      	beq.n	80077f6 <floor+0x8e>
 8007806:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8007848 <floor+0xe0>
 800780a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800780e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007816:	ddc9      	ble.n	80077ac <floor+0x44>
 8007818:	2b00      	cmp	r3, #0
 800781a:	da02      	bge.n	8007822 <floor+0xba>
 800781c:	2914      	cmp	r1, #20
 800781e:	d103      	bne.n	8007828 <floor+0xc0>
 8007820:	3301      	adds	r3, #1
 8007822:	ea22 0200 	bic.w	r2, r2, r0
 8007826:	e7c1      	b.n	80077ac <floor+0x44>
 8007828:	2401      	movs	r4, #1
 800782a:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 800782e:	fa04 f101 	lsl.w	r1, r4, r1
 8007832:	440a      	add	r2, r1
 8007834:	42aa      	cmp	r2, r5
 8007836:	bf38      	it	cc
 8007838:	191b      	addcc	r3, r3, r4
 800783a:	e7f2      	b.n	8007822 <floor+0xba>
 800783c:	2200      	movs	r2, #0
 800783e:	4613      	mov	r3, r2
 8007840:	e7b4      	b.n	80077ac <floor+0x44>
 8007842:	bf00      	nop
 8007844:	f3af 8000 	nop.w
 8007848:	8800759c 	.word	0x8800759c
 800784c:	7e37e43c 	.word	0x7e37e43c
 8007850:	bff00000 	.word	0xbff00000
 8007854:	000fffff 	.word	0x000fffff

08007858 <_init>:
 8007858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800785a:	bf00      	nop
 800785c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800785e:	bc08      	pop	{r3}
 8007860:	469e      	mov	lr, r3
 8007862:	4770      	bx	lr

08007864 <_fini>:
 8007864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007866:	bf00      	nop
 8007868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800786a:	bc08      	pop	{r3}
 800786c:	469e      	mov	lr, r3
 800786e:	4770      	bx	lr

Disassembly of section .ccmram:

08007870 <pi_aw_calc>:
 * @param v Pointer to the PI control structure.
 *
 * @note This function computes the PI control action with anti-windup.
 */
void pi_aw_calc(volatile pi_aw_struct *v)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
    if(v->enable)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	881b      	ldrh	r3, [r3, #0]
 800787c:	b29b      	uxth	r3, r3
 800787e:	2b00      	cmp	r3, #0
 8007880:	d063      	beq.n	800794a <pi_aw_calc+0xda>
    {
        v->e[0] = v->pi_consig - v->pi_fdb; // Calculate error
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	ed93 7a07 	vldr	s14, [r3, #28]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	edd3 7a08 	vldr	s15, [r3, #32]
 800788e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	edc3 7a05 	vstr	s15, [r3, #20]

        // PI trapezoidal with feedforward
        v->pi_int[0] =  v->Ki * v->e[0] * v->Ts + v->pi_int[1] + (v->pi_out_postsat - v->pi_out_presat) * v->Kaw * v->Ts;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	ed93 7a03 	vldr	s14, [r3, #12]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	edd3 7a05 	vldr	s15, [r3, #20]
 80078a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80078ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80078b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80078c8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	edd3 7a04 	vldr	s15, [r3, #16]
 80078d2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80078dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80078e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

        v->pi_out_presat = v->pi_out;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	62da      	str	r2, [r3, #44]	@ 0x2c

        // Output voltage saturation
        if (v->pi_out > v->pi_out_max)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80078fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007906:	dd04      	ble.n	8007912 <pi_aw_calc+0xa2>
            v->pi_out = v->pi_out_max;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	635a      	str	r2, [r3, #52]	@ 0x34
 8007910:	e00e      	b.n	8007930 <pi_aw_calc+0xc0>
        else if (v->pi_out < v->pi_out_min)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800791e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007926:	d503      	bpl.n	8007930 <pi_aw_calc+0xc0>
            v->pi_out = v->pi_out_min;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	635a      	str	r2, [r3, #52]	@ 0x34
        else;

        // Copy previous values
        v->e[1] = v->e[0];                      // Copy previous error
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	695a      	ldr	r2, [r3, #20]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	619a      	str	r2, [r3, #24]
        v->pi_ffw[1] = v->pi_ffw[0];            // Copy previous feedforward
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	645a      	str	r2, [r3, #68]	@ 0x44
        v->pi_int[1] = v->pi_int[0];			// Copy previous integrator
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	63da      	str	r2, [r3, #60]	@ 0x3c
        v->e[1] = 0.0F;
        v->pi_ffw[1] = 0.0F;
        v->pi_int[1] = 0.0F;
        v->pi_out = 0.0F;
    }
}
 8007948:	e00f      	b.n	800796a <pi_aw_calc+0xfa>
        v->e[1] = 0.0F;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f04f 0200 	mov.w	r2, #0
 8007950:	619a      	str	r2, [r3, #24]
        v->pi_ffw[1] = 0.0F;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f04f 0200 	mov.w	r2, #0
 8007958:	645a      	str	r2, [r3, #68]	@ 0x44
        v->pi_int[1] = 0.0F;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f04f 0200 	mov.w	r2, #0
 8007960:	63da      	str	r2, [r3, #60]	@ 0x3c
        v->pi_out = 0.0F;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f04f 0200 	mov.w	r2, #0
 8007968:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800796a:	bf00      	nop
 800796c:	370c      	adds	r7, #12
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr

08007976 <pi_init>:
 *
 * @param v Pointer to the PI structure.
 *
 * @note This function initializes the constants used in the PI controller.
 */
void pi_init(volatile pi_struct *v){
 8007976:	b480      	push	{r7}
 8007978:	b083      	sub	sp, #12
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
    v->K0 = v->Kp + v->Ki * v->Ts * 0.5F;   // K0 = Kp + Ki*Ts/2
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	ed93 7a02 	vldr	s14, [r3, #8]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	edd3 6a03 	vldr	s13, [r3, #12]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	edd3 7a01 	vldr	s15, [r3, #4]
 8007990:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007994:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8007998:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800799c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	edc3 7a04 	vstr	s15, [r3, #16]
    v->K1 = -v->Kp + v->Ki * v->Ts * 0.5F;  // K1 = -Kp + Ki*Ts/2
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	ed93 7a03 	vldr	s14, [r3, #12]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80079b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079b6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80079ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80079c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	edc3 7a05 	vstr	s15, [r3, #20]
}
 80079ce:	bf00      	nop
 80079d0:	370c      	adds	r7, #12
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr

080079da <pi_calc>:
 * @param v Pointer to the PI structure.
 *
 * @note This function computes the PI control action with feedforward and saturation.
 */
void pi_calc(volatile pi_struct *v)
{
 80079da:	b480      	push	{r7}
 80079dc:	b083      	sub	sp, #12
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
    if(v->enable)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	881b      	ldrh	r3, [r3, #0]
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d056      	beq.n	8007a9a <pi_calc+0xc0>
    {
        v->e[0] = v->pi_consig - v->pi_fdb; // Calculate error
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	ed93 7a08 	vldr	s14, [r3, #32]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80079f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	edc3 7a06 	vstr	s15, [r3, #24]
        v->pi_out += v->K0 * v->e[0] + v->K1 * v->e[1] + v->pi_ffw[0] - v->pi_ffw[1];   // PI trapezoidal with feedforward
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	ed93 7a04 	vldr	s14, [r3, #16]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	edd3 7a06 	vldr	s15, [r3, #24]
 8007a0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	edd3 6a05 	vldr	s13, [r3, #20]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	edd3 7a07 	vldr	s15, [r3, #28]
 8007a1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007a22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8007a2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8007a36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8007a40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        // Output voltage saturation
        if (v->pi_out > v->pi_out_max)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8007a56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a5e:	dd04      	ble.n	8007a6a <pi_calc+0x90>
            v->pi_out = v->pi_out_max;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	631a      	str	r2, [r3, #48]	@ 0x30
 8007a68:	e00e      	b.n	8007a88 <pi_calc+0xae>
        else if (v->pi_out < v->pi_out_min)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8007a76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a7e:	d503      	bpl.n	8007a88 <pi_calc+0xae>
            v->pi_out = v->pi_out_min;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	631a      	str	r2, [r3, #48]	@ 0x30
        else;
        // Copy previous values
        v->e[1] = v->e[0];                      // Copy previous error
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	699a      	ldr	r2, [r3, #24]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	61da      	str	r2, [r3, #28]
        v->pi_ffw[1] = v->pi_ffw[0];            // Copy previous feedforward
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	639a      	str	r2, [r3, #56]	@ 0x38
        // Reset previous control variables
        v->e[1] = 0.0F;
        v->pi_ffw[1] = 0.0F;
        v->pi_out = 0.0F;
    }
}
 8007a98:	e00b      	b.n	8007ab2 <pi_calc+0xd8>
        v->e[1] = 0.0F;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f04f 0200 	mov.w	r2, #0
 8007aa0:	61da      	str	r2, [r3, #28]
        v->pi_ffw[1] = 0.0F;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f04f 0200 	mov.w	r2, #0
 8007aa8:	639a      	str	r2, [r3, #56]	@ 0x38
        v->pi_out = 0.0F;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f04f 0200 	mov.w	r2, #0
 8007ab0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007ab2:	bf00      	nop
 8007ab4:	370c      	adds	r7, #12
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr

08007abe <clarke3F_calc>:
 * @param v Pointer to the Clarke transformation structure.
 *
 * @note This function computes the Clarke transformation for three-phase signals.
 */
void clarke3F_calc(volatile clarke3F_struct *v)
{
 8007abe:	b480      	push	{r7}
 8007ac0:	b083      	sub	sp, #12
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
    v->D = v->a;                                       // Alfa = A
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	609a      	str	r2, [r3, #8]
    v->Q = ISQ3*( v->a + 2.0F * v->b );              // Beta = 1/sqrt(3)*(A + 2*B) = 1/sqrt(3)*(B - C)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	ed93 7a00 	vldr	s14, [r3]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	edd3 7a01 	vldr	s15, [r3, #4]
 8007ada:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007ade:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ae2:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8007afc <clarke3F_calc+0x3e>
 8007ae6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr
 8007afc:	3f13cd3a 	.word	0x3f13cd3a

08007b00 <rot_calc>:
 * @param v Pointer to the rotation transformation structure.
 *
 * @note This function computes the rotation transformation (clockwise).
 */
void rot_calc(volatile rot_struct *v)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
    v->d = v->D*v->cosFi + v->Q*v->sinFi;              // d = Alfa(D)*cos(Fi) + Beta(Q)*sin(Fi)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	ed93 7a00 	vldr	s14, [r3]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	edd3 7a03 	vldr	s15, [r3, #12]
 8007b14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	edd3 6a01 	vldr	s13, [r3, #4]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	edd3 7a02 	vldr	s15, [r3, #8]
 8007b24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007b28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	edc3 7a04 	vstr	s15, [r3, #16]
    v->q = v->Q*v->cosFi - v->D*v->sinFi ;             // q = -Alfa(D)*sin(Fi) + Beta(Q)*cos(Fi)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	ed93 7a01 	vldr	s14, [r3, #4]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	edd3 7a03 	vldr	s15, [r3, #12]
 8007b3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	edd3 6a00 	vldr	s13, [r3]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	edd3 7a02 	vldr	s15, [r3, #8]
 8007b4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007b52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8007b5c:	bf00      	nop
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <irot_calc>:
 * @param v Pointer to the inverse rotation transformation structure.
 *
 * @note This function computes the inverse rotation transformation (counterclockwise).
 */
void irot_calc(volatile irot_struct *v)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
    v->alpha = v->d*v->cosFi - v->q*v->sinFi;              // Alfa(D) = d*cos(Fi) - q*sin(Fi)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	ed93 7a00 	vldr	s14, [r3]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	edd3 7a03 	vldr	s15, [r3, #12]
 8007b7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	edd3 6a01 	vldr	s13, [r3, #4]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	edd3 7a02 	vldr	s15, [r3, #8]
 8007b8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007b90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	edc3 7a04 	vstr	s15, [r3, #16]
    v->beta = v->d*v->sinFi + v->q*v->cosFi;              // Beta(Q) = d*sin(Fi) + q*cos(Fi)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	ed93 7a00 	vldr	s14, [r3]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	edd3 7a02 	vldr	s15, [r3, #8]
 8007ba6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	edd3 6a01 	vldr	s13, [r3, #4]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	edd3 7a03 	vldr	s15, [r3, #12]
 8007bb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007bba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8007bc4:	bf00      	nop
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <angle_calc>:
 * @param v Pointer to the angle generation structure.
 *
 * @note This function generates the angle.
 */
void angle_calc(volatile angle_struct *v)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
    // Integrator
    v->angle += v->freq*v->Ts*2;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	ed93 7a00 	vldr	s14, [r3]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	edd3 7a01 	vldr	s15, [r3, #4]
 8007be4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007be8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	edd3 7a02 	vldr	s15, [r3, #8]
 8007bf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	edc3 7a02 	vstr	s15, [r3, #8]
    v->angle = (v->angle > 1) ? (v->angle - 2) : v->angle;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	edd3 7a02 	vldr	s15, [r3, #8]
 8007c02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c0e:	dd07      	ble.n	8007c20 <angle_calc+0x50>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	edd3 7a02 	vldr	s15, [r3, #8]
 8007c16:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8007c1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007c1e:	e002      	b.n	8007c26 <angle_calc+0x56>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	edd3 7a02 	vldr	s15, [r3, #8]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8007c2c:	bf00      	nop
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <svpwm_calc>:
 * @param v Pointer to the SVPWM structure.
 *
 * @note This function calculates the Space Vector Pulse Width Modulation (SVPWM).
 */
void svpwm_calc(volatile svpwm_struct *v)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b089      	sub	sp, #36	@ 0x24
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]

    // Auxiliary variables for SVPWM
    float Va, Vb, Vc, max, min, h;

    // Calculate Va, Vb, and Vc for three-phase system without neutral
    Va = v->alpha;                                      // A = Alfa
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	61fb      	str	r3, [r7, #28]
    //Vb = (- v->valfa + SQ3*v->vbeta)*0.5;              // B = -1/2*Alfa + sqrt(3)/2*Beta
    Vb = (- v->alpha + SQ3*v->beta)*DIV2;              // B = -1/2*Alfa + sqrt(3)/2*Beta
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	edd3 7a01 	vldr	s15, [r3, #4]
 8007c4c:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8007d60 <svpwm_calc+0x128>
 8007c50:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	edd3 7a00 	vldr	s15, [r3]
 8007c5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c5e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007c62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007c66:	edc7 7a06 	vstr	s15, [r7, #24]
    Vc = - Va - Vb;                                     // C = - A - B
 8007c6a:	edd7 7a07 	vldr	s15, [r7, #28]
 8007c6e:	eeb1 7a67 	vneg.f32	s14, s15
 8007c72:	edd7 7a06 	vldr	s15, [r7, #24]
 8007c76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c7a:	edc7 7a05 	vstr	s15, [r7, #20]

    // Homopolar addition
    // Select maximum
    max = Va;
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	613b      	str	r3, [r7, #16]
    max = (Vb >= max) ? Vb : max;
 8007c82:	ed97 7a06 	vldr	s14, [r7, #24]
 8007c86:	edd7 7a04 	vldr	s15, [r7, #16]
 8007c8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c92:	db01      	blt.n	8007c98 <svpwm_calc+0x60>
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	e000      	b.n	8007c9a <svpwm_calc+0x62>
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	613b      	str	r3, [r7, #16]
    max = (Vc >= max) ? Vc : max;
 8007c9c:	ed97 7a05 	vldr	s14, [r7, #20]
 8007ca0:	edd7 7a04 	vldr	s15, [r7, #16]
 8007ca4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cac:	db01      	blt.n	8007cb2 <svpwm_calc+0x7a>
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	e000      	b.n	8007cb4 <svpwm_calc+0x7c>
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	613b      	str	r3, [r7, #16]
    // Select minimum
    min = Va;
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	60fb      	str	r3, [r7, #12]
    min = (Vb <= min) ? Vb : min;
 8007cba:	ed97 7a06 	vldr	s14, [r7, #24]
 8007cbe:	edd7 7a03 	vldr	s15, [r7, #12]
 8007cc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cca:	d801      	bhi.n	8007cd0 <svpwm_calc+0x98>
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	e000      	b.n	8007cd2 <svpwm_calc+0x9a>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	60fb      	str	r3, [r7, #12]
    min = (Vc <= min) ? Vc : min;
 8007cd4:	ed97 7a05 	vldr	s14, [r7, #20]
 8007cd8:	edd7 7a03 	vldr	s15, [r7, #12]
 8007cdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ce4:	d801      	bhi.n	8007cea <svpwm_calc+0xb2>
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	e000      	b.n	8007cec <svpwm_calc+0xb4>
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	60fb      	str	r3, [r7, #12]
    // Calculate homopolar component
    h = (max + min)*DIV2;
 8007cee:	ed97 7a04 	vldr	s14, [r7, #16]
 8007cf2:	edd7 7a03 	vldr	s15, [r7, #12]
 8007cf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007cfa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007cfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007d02:	edc7 7a02 	vstr	s15, [r7, #8]

    // Generate duty cycles (range from 0 to 1)
    // Convert sinusoids ranging up to 0.5 to sinusoids ranging from 0 to 1
    v->Da = (Va - h + 0.5F);
 8007d06:	ed97 7a07 	vldr	s14, [r7, #28]
 8007d0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8007d0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d12:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007d16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	edc3 7a02 	vstr	s15, [r3, #8]
    v->Db = (Vb - h + 0.5F);
 8007d20:	ed97 7a06 	vldr	s14, [r7, #24]
 8007d24:	edd7 7a02 	vldr	s15, [r7, #8]
 8007d28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d2c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007d30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	edc3 7a03 	vstr	s15, [r3, #12]
    v->Dc = (Vc - h + 0.5F);
 8007d3a:	ed97 7a05 	vldr	s14, [r7, #20]
 8007d3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8007d42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d46:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007d4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8007d54:	bf00      	nop
 8007d56:	3724      	adds	r7, #36	@ 0x24
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr
 8007d60:	3fddb3d7 	.word	0x3fddb3d7

08007d64 <rampa_calc>:
 * @param v Pointer to the ramp structure.
 *
 * @note This function calculates the ramp.
 */
void rampa_calc(volatile rampa_struct *v)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
    if (v->enable)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	7b1b      	ldrb	r3, [r3, #12]
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d04e      	beq.n	8007e14 <rampa_calc+0xb0>
    {
        if(v->out < v->in)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	ed93 7a01 	vldr	s14, [r3, #4]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	edd3 7a00 	vldr	s15, [r3]
 8007d82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d8a:	d51b      	bpl.n	8007dc4 <rampa_calc+0x60>
        {
            v->out += v->Incr;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	ed93 7a02 	vldr	s14, [r3, #8]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	edd3 7a01 	vldr	s15, [r3, #4]
 8007d98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	edc3 7a01 	vstr	s15, [r3, #4]
            if(v->out > v->in)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	ed93 7a01 	vldr	s14, [r3, #4]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	edd3 7a00 	vldr	s15, [r3]
 8007dae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007db6:	dc00      	bgt.n	8007dba <rampa_calc+0x56>
    }
    else
    {
        v->out = 0.0F;
    }
}
 8007db8:	e030      	b.n	8007e1c <rampa_calc+0xb8>
                v->out = v->in;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	605a      	str	r2, [r3, #4]
}
 8007dc2:	e02b      	b.n	8007e1c <rampa_calc+0xb8>
        else if(v->out > v->in)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	ed93 7a01 	vldr	s14, [r3, #4]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	edd3 7a00 	vldr	s15, [r3]
 8007dd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dd8:	dc00      	bgt.n	8007ddc <rampa_calc+0x78>
}
 8007dda:	e01f      	b.n	8007e1c <rampa_calc+0xb8>
            v->out -= v->Incr;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	edd3 7a02 	vldr	s15, [r3, #8]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	ed93 7a01 	vldr	s14, [r3, #4]
 8007de8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	edc3 7a01 	vstr	s15, [r3, #4]
            if(v->out < v->in)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	ed93 7a01 	vldr	s14, [r3, #4]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	edd3 7a00 	vldr	s15, [r3]
 8007dfe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e06:	d400      	bmi.n	8007e0a <rampa_calc+0xa6>
}
 8007e08:	e008      	b.n	8007e1c <rampa_calc+0xb8>
                v->out = v->in;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	605a      	str	r2, [r3, #4]
}
 8007e12:	e003      	b.n	8007e1c <rampa_calc+0xb8>
        v->out = 0.0F;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f04f 0200 	mov.w	r2, #0
 8007e1a:	605a      	str	r2, [r3, #4]
}
 8007e1c:	bf00      	nop
 8007e1e:	370c      	adds	r7, #12
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <rampa_dual_calc>:
 * @param v Pointer to the dual ramp structure.
 *
 * @note This function calculates the dual ramp.
 */
void rampa_dual_calc(volatile rampa_dual_struct *v)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
    if (v->enable)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	7c1b      	ldrb	r3, [r3, #16]
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d04e      	beq.n	8007ed8 <rampa_dual_calc+0xb0>
    {
        if(v->out < v->in)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	ed93 7a01 	vldr	s14, [r3, #4]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	edd3 7a00 	vldr	s15, [r3]
 8007e46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e4e:	d51b      	bpl.n	8007e88 <rampa_dual_calc+0x60>
        {
            v->out += v->Incr;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	ed93 7a02 	vldr	s14, [r3, #8]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	edd3 7a01 	vldr	s15, [r3, #4]
 8007e5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	edc3 7a01 	vstr	s15, [r3, #4]
            if(v->out > v->in)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	ed93 7a01 	vldr	s14, [r3, #4]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	edd3 7a00 	vldr	s15, [r3]
 8007e72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e7a:	dc00      	bgt.n	8007e7e <rampa_dual_calc+0x56>
    }
    else
    {
        v->out = 0;
    }
}
 8007e7c:	e030      	b.n	8007ee0 <rampa_dual_calc+0xb8>
                v->out = v->in;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	605a      	str	r2, [r3, #4]
}
 8007e86:	e02b      	b.n	8007ee0 <rampa_dual_calc+0xb8>
        else if(v->out > v->in)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	ed93 7a01 	vldr	s14, [r3, #4]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	edd3 7a00 	vldr	s15, [r3]
 8007e94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e9c:	dc00      	bgt.n	8007ea0 <rampa_dual_calc+0x78>
}
 8007e9e:	e01f      	b.n	8007ee0 <rampa_dual_calc+0xb8>
            v->out -= v->Decr;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	edd3 7a03 	vldr	s15, [r3, #12]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	ed93 7a01 	vldr	s14, [r3, #4]
 8007eac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	edc3 7a01 	vstr	s15, [r3, #4]
            if(v->out < v->in)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	ed93 7a01 	vldr	s14, [r3, #4]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	edd3 7a00 	vldr	s15, [r3]
 8007ec2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eca:	d400      	bmi.n	8007ece <rampa_dual_calc+0xa6>
}
 8007ecc:	e008      	b.n	8007ee0 <rampa_dual_calc+0xb8>
                v->out = v->in;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	605a      	str	r2, [r3, #4]
}
 8007ed6:	e003      	b.n	8007ee0 <rampa_dual_calc+0xb8>
        v->out = 0;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f04f 0200 	mov.w	r2, #0
 8007ede:	605a      	str	r2, [r3, #4]
}
 8007ee0:	bf00      	nop
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <RMS_calc>:
 *
 * @param v Pointer to the RMS structure.
 *
 * @note This function calculates the Root Mean Square (RMS).
 */
void RMS_calc(volatile RMS_struct *v){
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
    // Calculate RMS output current.
    //-----------------------------------------------------------------------------------------
    v->Sq_Sum += (float) (v->Measure * v->Measure)* v->T_exec;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	ed93 7a01 	vldr	s14, [r3, #4]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	edd3 7a01 	vldr	s15, [r3, #4]
 8007f00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	edd3 7a00 	vldr	s15, [r3]
 8007f0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	edd3 7a02 	vldr	s15, [r3, #8]
 8007f14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	edc3 7a02 	vstr	s15, [r3, #8]
    // Execute calculation at the zero crossing of the angle
    //
    if (v->Freq > 0.0F) {
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	edd3 7a04 	vldr	s15, [r3, #16]
 8007f24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f2c:	dd25      	ble.n	8007f7a <RMS_calc+0x8e>
        if (v->Angle_ant < 0.0F && v->Angle >= 0.0F) {
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	edd3 7a06 	vldr	s15, [r3, #24]
 8007f34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f3c:	d54c      	bpl.n	8007fd8 <RMS_calc+0xec>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	edd3 7a05 	vldr	s15, [r3, #20]
 8007f44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f4c:	db44      	blt.n	8007fd8 <RMS_calc+0xec>
           // Calculate RMS
            v->Out_RMS = sqrtf((float) v->Sq_Sum * v->Freq);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	ed93 7a02 	vldr	s14, [r3, #8]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	edd3 7a04 	vldr	s15, [r3, #16]
 8007f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f5e:	eeb0 0a67 	vmov.f32	s0, s15
 8007f62:	f7fe fed5 	bl	8006d10 <sqrtf>
 8007f66:	eef0 7a40 	vmov.f32	s15, s0
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	edc3 7a03 	vstr	s15, [r3, #12]
            v->Sq_Sum = 0;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f04f 0200 	mov.w	r2, #0
 8007f76:	609a      	str	r2, [r3, #8]
 8007f78:	e02e      	b.n	8007fd8 <RMS_calc+0xec>
        }
        else;
    }
    else if (v->Freq < 0.0F){
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	edd3 7a04 	vldr	s15, [r3, #16]
 8007f80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f88:	d526      	bpl.n	8007fd8 <RMS_calc+0xec>
        if (v->Angle_ant > 0.0F && v->Angle <= 0.0F) {
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	edd3 7a06 	vldr	s15, [r3, #24]
 8007f90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f98:	dd1e      	ble.n	8007fd8 <RMS_calc+0xec>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	edd3 7a05 	vldr	s15, [r3, #20]
 8007fa0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fa8:	d816      	bhi.n	8007fd8 <RMS_calc+0xec>
            // Calculate RMS
            v->Out_RMS = sqrtf((float) v->Sq_Sum * v->Freq * (-1.0F));
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	ed93 7a02 	vldr	s14, [r3, #8]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	edd3 7a04 	vldr	s15, [r3, #16]
 8007fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fba:	eef1 7a67 	vneg.f32	s15, s15
 8007fbe:	eeb0 0a67 	vmov.f32	s0, s15
 8007fc2:	f7fe fea5 	bl	8006d10 <sqrtf>
 8007fc6:	eef0 7a40 	vmov.f32	s15, s0
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	edc3 7a03 	vstr	s15, [r3, #12]
            v->Sq_Sum = 0;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f04f 0200 	mov.w	r2, #0
 8007fd6:	609a      	str	r2, [r3, #8]
        }
        else;
        //do nothing
    }
    else;
    v->Angle_ant = v->Angle;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	695a      	ldr	r2, [r3, #20]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	619a      	str	r2, [r3, #24]
}
 8007fe0:	bf00      	nop
 8007fe2:	3708      	adds	r7, #8
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <filtreLP_calc>:
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
    if (v->enable)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	8a9b      	ldrh	r3, [r3, #20]
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d015      	beq.n	8008026 <filtreLP_calc+0x3e>
        v->out = (v->alfa * (v->in - v->out)) + v->out;    // Filter out(k) = alfa*in(k) + (1-alfa)*out(k-1)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	ed93 7a02 	vldr	s14, [r3, #8]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	edd3 6a00 	vldr	s13, [r3]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	edd3 7a01 	vldr	s15, [r3, #4]
 800800c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008010:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	edd3 7a01 	vldr	s15, [r3, #4]
 800801a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8008024:	e003      	b.n	800802e <filtreLP_calc+0x46>
        v->out = v->in;        // Without filter. Out(k) = In(k)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	605a      	str	r2, [r3, #4]
}
 800802e:	bf00      	nop
 8008030:	370c      	adds	r7, #12
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr

0800803a <step_calc>:
 * @param v Pointer to the step structure.
 *
 * @note This function calculates the step function.
 */
void step_calc(volatile step_struct *v)
{
 800803a:	b480      	push	{r7}
 800803c:	b083      	sub	sp, #12
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
    // Calculate step width in pulses to count
    v->Pulses = (uint32_t)((v->fs) * (v->t_step));
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	ed93 7a00 	vldr	s14, [r3]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	edd3 7a04 	vldr	s15, [r3, #16]
 800804e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008052:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008056:	ee17 2a90 	vmov	r2, s15
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	615a      	str	r2, [r3, #20]

    // If enabled, perform the step and start counting
    if (v->enable == 1 && v->Counter < v->Pulses){
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	8b9b      	ldrh	r3, [r3, #28]
 8008062:	b29b      	uxth	r3, r3
 8008064:	2b01      	cmp	r3, #1
 8008066:	d116      	bne.n	8008096 <step_calc+0x5c>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	699a      	ldr	r2, [r3, #24]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	695b      	ldr	r3, [r3, #20]
 8008070:	429a      	cmp	r2, r3
 8008072:	d210      	bcs.n	8008096 <step_calc+0x5c>
        v->Out = v->In + v->Step;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	ed93 7a01 	vldr	s14, [r3, #4]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	edd3 7a03 	vldr	s15, [r3, #12]
 8008080:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	edc3 7a02 	vstr	s15, [r3, #8]
        v->Counter++;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	699b      	ldr	r3, [r3, #24]
 800808e:	1c5a      	adds	r2, r3, #1
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	619a      	str	r2, [r3, #24]
 8008094:	e01a      	b.n	80080cc <step_calc+0x92>
    }
    // When reaching the time limit, remove step and reset the counter
    else if (v->enable == 1 && v->Counter >= v->Pulses){
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	8b9b      	ldrh	r3, [r3, #28]
 800809a:	b29b      	uxth	r3, r3
 800809c:	2b01      	cmp	r3, #1
 800809e:	d110      	bne.n	80080c2 <step_calc+0x88>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	699a      	ldr	r2, [r3, #24]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	695b      	ldr	r3, [r3, #20]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d30a      	bcc.n	80080c2 <step_calc+0x88>
        v->Out = v->In;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	685a      	ldr	r2, [r3, #4]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	609a      	str	r2, [r3, #8]
        v->Counter = 0;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2200      	movs	r2, #0
 80080b8:	619a      	str	r2, [r3, #24]
        v->enable = 0;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	839a      	strh	r2, [r3, #28]
 80080c0:	e004      	b.n	80080cc <step_calc+0x92>
    }
    // If not enabled
    else v->Out = v->In;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	685a      	ldr	r2, [r3, #4]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	609a      	str	r2, [r3, #8]
}
 80080ca:	bf00      	nop
 80080cc:	bf00      	nop
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr
