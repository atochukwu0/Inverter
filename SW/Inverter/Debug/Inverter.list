
Inverter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000693c  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ccmram       00000868  08006b34  08006b34  00007b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  0800739c  0800739c  0000839c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080073b4  080073b4  00009088  2**0
                  CONTENTS
  5 .ARM          00000008  080073b4  080073b4  000083b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080073bc  080073bc  00009088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  080073bc  080073bc  000083bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  080073c0  080073c0  000083c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000088  20000000  080073c4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000056c  20000088  0800744c  00009088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005f4  0800744c  000095f4  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00009088  2**0
                  CONTENTS, READONLY
 13 .debug_info   000171ad  00000000  00000000  000090b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003fc7  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001478  00000000  00000000  00024230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f9b  00000000  00000000  000256a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b810  00000000  00000000  00026643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001da24  00000000  00000000  00051e53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00103d6e  00000000  00000000  0006f877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001735e5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005440  00000000  00000000  00173628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  00178a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000088 	.word	0x20000088
 8000214:	00000000 	.word	0x00000000
 8000218:	08006b1c 	.word	0x08006b1c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000008c 	.word	0x2000008c
 8000234:	08006b1c 	.word	0x08006b1c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <control>:
 * For now, it sets a constant duty cycle.
 *
 * @param measurements Pointer to the measurements structure.
 * @param duties Pointer to the duties structure.
 */
void control(volatile float valfa, volatile float vbeta, Measurements *measurements, Duties *duties) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000532:	edc7 0a02 	vstr	s1, [r7, #8]
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	6039      	str	r1, [r7, #0]


	static svpwm_struct svpwm;

    // Assign values to SVPWM structure
    svpwm.valfa = valfa; // Example value, replace with actual measurement or calculation
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	4a0b      	ldr	r2, [pc, #44]	@ (800056c <control+0x44>)
 800053e:	6013      	str	r3, [r2, #0]
    svpwm.vbeta = vbeta; // Example value, replace with actual measurement or calculation
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	4a0a      	ldr	r2, [pc, #40]	@ (800056c <control+0x44>)
 8000544:	6053      	str	r3, [r2, #4]

    // Calculate SVPWM
    svpwm_calc(&svpwm);
 8000546:	4809      	ldr	r0, [pc, #36]	@ (800056c <control+0x44>)
 8000548:	f006 fcd8 	bl	8006efc <svpwm_calc>

    // Assign SVPWM duties
    duties->Da = svpwm.Ta;
 800054c:	4b07      	ldr	r3, [pc, #28]	@ (800056c <control+0x44>)
 800054e:	689a      	ldr	r2, [r3, #8]
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	601a      	str	r2, [r3, #0]
    duties->Db = svpwm.Tb;
 8000554:	4b05      	ldr	r3, [pc, #20]	@ (800056c <control+0x44>)
 8000556:	68da      	ldr	r2, [r3, #12]
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	605a      	str	r2, [r3, #4]
    duties->Dc = svpwm.Tc;
 800055c:	4b03      	ldr	r3, [pc, #12]	@ (800056c <control+0x44>)
 800055e:	691a      	ldr	r2, [r3, #16]
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	609a      	str	r2, [r3, #8]
//    duties->Da = 0.5F;
//    duties->Db = 0.5F;
//    duties->Dc = 0.5F;

}
 8000564:	bf00      	nop
 8000566:	3710      	adds	r7, #16
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	200000a4 	.word	0x200000a4

08000570 <inv_init>:
 * @param inv Pointer to the inverter operation structure.
 * @param led Pointer to the LED structure.
 * @param enable_port Pointer to the GPIO port for enabling/disabling the inverter.
 * @param enable_pin Pin number for enabling/disabling the inverter.
 */
void inv_init(InverterOperation *inv, LED *led, GPIO_TypeDef *enable_port, uint16_t enable_pin) {
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
 800057c:	807b      	strh	r3, [r7, #2]
    // Initialize inverter operation structure
    inv->state = INV_STATE_STARTUP;
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	2201      	movs	r2, #1
 8000582:	729a      	strb	r2, [r3, #10]
    inv->led = led;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	68ba      	ldr	r2, [r7, #8]
 8000588:	601a      	str	r2, [r3, #0]
    inv->enable_pin = enable_pin;
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	887a      	ldrh	r2, [r7, #2]
 800058e:	811a      	strh	r2, [r3, #8]
    inv->enable_port = enable_port;
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	687a      	ldr	r2, [r7, #4]
 8000594:	605a      	str	r2, [r3, #4]
    // Add initialization of other inverter-specific variables here
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
	...

080005a4 <inv_FSM>:
 *
 * This function executes the finite state machine to control the inverter operation based on its current state.
 *
 * @param inv Pointer to the inverter operation structure.
 */
void inv_FSM(InverterOperation *inv) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
    switch (inv->state) {
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	7a9b      	ldrb	r3, [r3, #10]
 80005b0:	2b03      	cmp	r3, #3
 80005b2:	d81b      	bhi.n	80005ec <inv_FSM+0x48>
 80005b4:	a201      	add	r2, pc, #4	@ (adr r2, 80005bc <inv_FSM+0x18>)
 80005b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ba:	bf00      	nop
 80005bc:	080005cd 	.word	0x080005cd
 80005c0:	080005d5 	.word	0x080005d5
 80005c4:	080005dd 	.word	0x080005dd
 80005c8:	080005e5 	.word	0x080005e5
        case INV_STATE_IDLE:
            idle_handler(inv);
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f000 f813 	bl	80005f8 <idle_handler>
            break;
 80005d2:	e00c      	b.n	80005ee <inv_FSM+0x4a>
        case INV_STATE_STARTUP:
            startup_handler(inv);
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f000 f823 	bl	8000620 <startup_handler>
            break;
 80005da:	e008      	b.n	80005ee <inv_FSM+0x4a>
        case INV_STATE_RUNNING:
            running_handler(inv);
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f000 f833 	bl	8000648 <running_handler>
            break;
 80005e2:	e004      	b.n	80005ee <inv_FSM+0x4a>
        case INV_STATE_FAULT:
            fault_handler(inv);
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f000 f843 	bl	8000670 <fault_handler>
            break;
 80005ea:	e000      	b.n	80005ee <inv_FSM+0x4a>
        default:
            // Invalid state, handle error
            break;
 80005ec:	bf00      	nop
    }
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop

080005f8 <idle_handler>:
 *
 * This function handles the actions and transitions for the idle state of the inverter operation.
 *
 * @param inv Pointer to the inverter operation structure.
 */
static void idle_handler(InverterOperation *inv) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
    // Perform actions required in idle state
    // Transition conditions to other states:
    // - Start startup sequence based on input condition
    // - Transition to fault state based on error conditions
    inv->led->mode = LED_MODE_OFF;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2203      	movs	r2, #3
 8000606:	719a      	strb	r2, [r3, #6]
    DISABLE(inv->enable_port, inv->enable_pin);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	6858      	ldr	r0, [r3, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	891b      	ldrh	r3, [r3, #8]
 8000610:	2200      	movs	r2, #0
 8000612:	4619      	mov	r1, r3
 8000614:	f003 fbfa 	bl	8003e0c <HAL_GPIO_WritePin>
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <startup_handler>:
 *
 * This function handles the actions and transitions for the startup state of the inverter operation.
 *
 * @param inv Pointer to the inverter operation structure.
 */
static void startup_handler(InverterOperation *inv) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
    // Perform actions required in startup state
    // Transition conditions to other states:
    // - Transition to running state when startup sequence completes successfully
    // - Transition to fault state based on error conditions during startup
    inv->led->mode = LED_MODE_BLINK_FAST;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2200      	movs	r2, #0
 800062e:	719a      	strb	r2, [r3, #6]
    DISABLE(inv->enable_port, inv->enable_pin);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	6858      	ldr	r0, [r3, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	891b      	ldrh	r3, [r3, #8]
 8000638:	2200      	movs	r2, #0
 800063a:	4619      	mov	r1, r3
 800063c:	f003 fbe6 	bl	8003e0c <HAL_GPIO_WritePin>
}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <running_handler>:
 *
 * This function handles the actions and transitions for the running state of the inverter operation.
 *
 * @param inv Pointer to the inverter operation structure.
 */
static void running_handler(InverterOperation *inv) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
    // Perform actions required in running state
    // This is where the main control loop resides
    // Monitor inverter variables, adjust control parameters, etc.
    // Transition conditions to other states:
    // - Transition to fault state based on error conditions during operation
    inv->led->mode = LED_MODE_ON;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2202      	movs	r2, #2
 8000656:	719a      	strb	r2, [r3, #6]
    ENABLE(inv->enable_port, inv->enable_pin);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	6858      	ldr	r0, [r3, #4]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	891b      	ldrh	r3, [r3, #8]
 8000660:	2201      	movs	r2, #1
 8000662:	4619      	mov	r1, r3
 8000664:	f003 fbd2 	bl	8003e0c <HAL_GPIO_WritePin>
}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <fault_handler>:
 *
 * This function handles the actions and transitions for the fault state of the inverter operation.
 *
 * @param inv Pointer to the inverter operation structure.
 */
static void fault_handler(InverterOperation *inv) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
    // Perform actions required in fault state
    // This could involve shutting down the inverter, logging error messages, etc.
    // Transition conditions to other states:
    // - Retry startup sequence after a delay if fault condition is recoverable
    // - Transition to idle state after fault is resolved
    inv->led->mode = LED_MODE_BLINK_SLOW;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2201      	movs	r2, #1
 800067e:	719a      	strb	r2, [r3, #6]
    DISABLE(inv->enable_port, inv->enable_pin);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	6858      	ldr	r0, [r3, #4]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	891b      	ldrh	r3, [r3, #8]
 8000688:	2200      	movs	r2, #0
 800068a:	4619      	mov	r1, r3
 800068c:	f003 fbbe 	bl	8003e0c <HAL_GPIO_WritePin>
}
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <getADCelec>:
  * @param  ADC_raw Pointer to the raw ADC values array.
  * @param  encoder Pointer to the encoder struct.
  * @param  measurements Pointer to the measurements struct to store the results.
  * @retval OK 0 if an error occurred, 1 if successful.
  */
uint8_t getADCelec(volatile uint32_t* ADC_raw, volatile Encoder* encoder, volatile Measurements* measurements) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b088      	sub	sp, #32
 800069c:	af00      	add	r7, sp, #0
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	60b9      	str	r1, [r7, #8]
 80006a2:	607a      	str	r2, [r7, #4]
    // Check for null pointers
    if (ADC_raw == NULL || encoder == NULL || measurements == NULL) {
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d005      	beq.n	80006b6 <getADCelec+0x1e>
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d002      	beq.n	80006b6 <getADCelec+0x1e>
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d101      	bne.n	80006ba <getADCelec+0x22>
        return 0; // Error: Null pointer detected
 80006b6:	2300      	movs	r3, #0
 80006b8:	e03b      	b.n	8000732 <getADCelec+0x9a>
    }

    // Calculate currents and voltage
    float ia = getLinear(ADC_raw[0], CURRENT_SLOPE, CURRENT_OFFSET);
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 800073c <getADCelec+0xa4>
 80006c2:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8000740 <getADCelec+0xa8>
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 f840 	bl	800074c <getLinear>
 80006cc:	ed87 0a07 	vstr	s0, [r7, #28]
    float ib = getLinear(ADC_raw[1], CURRENT_SLOPE, CURRENT_OFFSET);
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	3304      	adds	r3, #4
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	eddf 0a19 	vldr	s1, [pc, #100]	@ 800073c <getADCelec+0xa4>
 80006da:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8000740 <getADCelec+0xa8>
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 f834 	bl	800074c <getLinear>
 80006e4:	ed87 0a06 	vstr	s0, [r7, #24]
    float ic = getLinear(ADC_raw[2], CURRENT_SLOPE, CURRENT_OFFSET);
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	3308      	adds	r3, #8
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	eddf 0a13 	vldr	s1, [pc, #76]	@ 800073c <getADCelec+0xa4>
 80006f2:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8000740 <getADCelec+0xa8>
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 f828 	bl	800074c <getLinear>
 80006fc:	ed87 0a05 	vstr	s0, [r7, #20]
    float VDC = getLinear(ADC_raw[3], VOLTAGE_SLOPE, VOLTAGE_OFFSET);
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	330c      	adds	r3, #12
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 8000744 <getADCelec+0xac>
 800070a:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8000748 <getADCelec+0xb0>
 800070e:	4618      	mov	r0, r3
 8000710:	f000 f81c 	bl	800074c <getLinear>
 8000714:	ed87 0a04 	vstr	s0, [r7, #16]

    // Store the measurements
    measurements->ia = ia;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	69fa      	ldr	r2, [r7, #28]
 800071c:	601a      	str	r2, [r3, #0]
    measurements->ib = ib;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	69ba      	ldr	r2, [r7, #24]
 8000722:	605a      	str	r2, [r3, #4]
    measurements->ic = ic;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	697a      	ldr	r2, [r7, #20]
 8000728:	609a      	str	r2, [r3, #8]
    measurements->VDC = VDC;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	693a      	ldr	r2, [r7, #16]
 800072e:	60da      	str	r2, [r3, #12]

    return 1; // Success
 8000730:	2301      	movs	r3, #1
}
 8000732:	4618      	mov	r0, r3
 8000734:	3720      	adds	r7, #32
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	3fd9afe4 	.word	0x3fd9afe4
 8000740:	4259afe4 	.word	0x4259afe4
 8000744:	3caaa3ad 	.word	0x3caaa3ad
 8000748:	3b78c650 	.word	0x3b78c650

0800074c <getLinear>:
  * @param  bits The ADC reading.
  * @param  slope The slope (units per volt).
  * @param  offset The offset (volts at zero).
  * @retval measurement The physical measurement.
  */
float getLinear(uint32_t bits, float slope, float offset) {
 800074c:	b480      	push	{r7}
 800074e:	b087      	sub	sp, #28
 8000750:	af00      	add	r7, sp, #0
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	ed87 0a02 	vstr	s0, [r7, #8]
 8000758:	edc7 0a01 	vstr	s1, [r7, #4]
    // Convert ADC reading to voltage
    float voltage = (float) bits * 0.0008058608f; // Assuming 12-bit ADC and 3.3V reference (bits * (3.3 V / 4095.0 bits))
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	ee07 3a90 	vmov	s15, r3
 8000762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000766:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80007a0 <getLinear+0x54>
 800076a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800076e:	edc7 7a05 	vstr	s15, [r7, #20]

    // Convert voltage to physical measurement
    float measurement = (voltage - offset) * slope;
 8000772:	ed97 7a05 	vldr	s14, [r7, #20]
 8000776:	edd7 7a01 	vldr	s15, [r7, #4]
 800077a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800077e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000786:	edc7 7a04 	vstr	s15, [r7, #16]

    return measurement;
 800078a:	693b      	ldr	r3, [r7, #16]
 800078c:	ee07 3a90 	vmov	s15, r3
}
 8000790:	eeb0 0a67 	vmov.f32	s0, s15
 8000794:	371c      	adds	r7, #28
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	3a534067 	.word	0x3a534067

080007a4 <LED_handler>:
 * This function handles the LED blinking modes based on the LED mode and current millisecond counter.
 *
 * @param led Pointer to the LED structure.
 * @param ms_counter Current millisecond counter.
 */
void LED_handler(LED *led, uint32_t ms_counter) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
    switch (led->mode) {
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	799b      	ldrb	r3, [r3, #6]
 80007b2:	2b03      	cmp	r3, #3
 80007b4:	d858      	bhi.n	8000868 <LED_handler+0xc4>
 80007b6:	a201      	add	r2, pc, #4	@ (adr r2, 80007bc <LED_handler+0x18>)
 80007b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007bc:	080007cd 	.word	0x080007cd
 80007c0:	08000807 	.word	0x08000807
 80007c4:	08000845 	.word	0x08000845
 80007c8:	08000857 	.word	0x08000857
        case LED_MODE_BLINK_FAST:
            if (ms_counter % 200 < 100) {
 80007cc:	683a      	ldr	r2, [r7, #0]
 80007ce:	4b29      	ldr	r3, [pc, #164]	@ (8000874 <LED_handler+0xd0>)
 80007d0:	fba3 1302 	umull	r1, r3, r3, r2
 80007d4:	099b      	lsrs	r3, r3, #6
 80007d6:	21c8      	movs	r1, #200	@ 0xc8
 80007d8:	fb01 f303 	mul.w	r3, r1, r3
 80007dc:	1ad3      	subs	r3, r2, r3
 80007de:	2b63      	cmp	r3, #99	@ 0x63
 80007e0:	d808      	bhi.n	80007f4 <LED_handler+0x50>
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_SET);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	6818      	ldr	r0, [r3, #0]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	889b      	ldrh	r3, [r3, #4]
 80007ea:	2201      	movs	r2, #1
 80007ec:	4619      	mov	r1, r3
 80007ee:	f003 fb0d 	bl	8003e0c <HAL_GPIO_WritePin>
            } else {
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
            }
            break;
 80007f2:	e03a      	b.n	800086a <LED_handler+0xc6>
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	6818      	ldr	r0, [r3, #0]
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	889b      	ldrh	r3, [r3, #4]
 80007fc:	2200      	movs	r2, #0
 80007fe:	4619      	mov	r1, r3
 8000800:	f003 fb04 	bl	8003e0c <HAL_GPIO_WritePin>
            break;
 8000804:	e031      	b.n	800086a <LED_handler+0xc6>
        case LED_MODE_BLINK_SLOW:
            if (ms_counter % 1000 < 500) {
 8000806:	683a      	ldr	r2, [r7, #0]
 8000808:	4b1b      	ldr	r3, [pc, #108]	@ (8000878 <LED_handler+0xd4>)
 800080a:	fba3 1302 	umull	r1, r3, r3, r2
 800080e:	099b      	lsrs	r3, r3, #6
 8000810:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000814:	fb01 f303 	mul.w	r3, r1, r3
 8000818:	1ad3      	subs	r3, r2, r3
 800081a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800081e:	d208      	bcs.n	8000832 <LED_handler+0x8e>
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_SET);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	6818      	ldr	r0, [r3, #0]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	889b      	ldrh	r3, [r3, #4]
 8000828:	2201      	movs	r2, #1
 800082a:	4619      	mov	r1, r3
 800082c:	f003 faee 	bl	8003e0c <HAL_GPIO_WritePin>
            } else {
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
            }
            break;
 8000830:	e01b      	b.n	800086a <LED_handler+0xc6>
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6818      	ldr	r0, [r3, #0]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	889b      	ldrh	r3, [r3, #4]
 800083a:	2200      	movs	r2, #0
 800083c:	4619      	mov	r1, r3
 800083e:	f003 fae5 	bl	8003e0c <HAL_GPIO_WritePin>
            break;
 8000842:	e012      	b.n	800086a <LED_handler+0xc6>
        case LED_MODE_ON:
            HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_SET);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	6818      	ldr	r0, [r3, #0]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	889b      	ldrh	r3, [r3, #4]
 800084c:	2201      	movs	r2, #1
 800084e:	4619      	mov	r1, r3
 8000850:	f003 fadc 	bl	8003e0c <HAL_GPIO_WritePin>
            break;
 8000854:	e009      	b.n	800086a <LED_handler+0xc6>
        case LED_MODE_OFF:
            HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6818      	ldr	r0, [r3, #0]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	889b      	ldrh	r3, [r3, #4]
 800085e:	2200      	movs	r2, #0
 8000860:	4619      	mov	r1, r3
 8000862:	f003 fad3 	bl	8003e0c <HAL_GPIO_WritePin>
            break;
 8000866:	e000      	b.n	800086a <LED_handler+0xc6>
        default:
            // Invalid LED mode
            break;
 8000868:	bf00      	nop
    }
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	51eb851f 	.word	0x51eb851f
 8000878:	10624dd3 	.word	0x10624dd3

0800087c <enable_PWM>:
 *
 * This function enables PWM output for the specified timer.
 *
 * @param htim Pointer to the TIM_HandleTypeDef structure.
 */
void enable_PWM(TIM_HandleTypeDef *htim, Duties *duties) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	6039      	str	r1, [r7, #0]

//	//Reset the counter
//	htim->Instance->CNT=0;
//
	htim->Instance->CCMR1 = 0x6868; // Set Channel 1 and Channel 2 Output Compare mode to PWM Mode
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f646 0268 	movw	r2, #26728	@ 0x6868
 800088e:	619a      	str	r2, [r3, #24]
//
//	//	htim1.Instance->CCER = 0x888;
	htim->Instance->CCER = 0x10555;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a0c      	ldr	r2, [pc, #48]	@ (80008c8 <enable_PWM+0x4c>)
 8000896:	621a      	str	r2, [r3, #32]
//
//	//Enable Main Output
	htim->Instance->BDTR |=(1<<15);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80008a6:	645a      	str	r2, [r3, #68]	@ 0x44
//
//	//Enable Counter
	htim->Instance->CR1 |=1;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f042 0201 	orr.w	r2, r2, #1
 80008b6:	601a      	str	r2, [r3, #0]

    set_PWM(htim, duties);
 80008b8:	6839      	ldr	r1, [r7, #0]
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f000 f848 	bl	8000950 <set_PWM>
}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	00010555 	.word	0x00010555

080008cc <Compare3F_calc>:
	htim->Instance->BDTR &= 0xFFFF7FFF;
	//	htim1.Instance->BDTR &=(0<<15);
}

void Compare3F_calc(TIM_HandleTypeDef *htim, Compare3F_struct *v)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]

	v->compA = ((int32_t)(htim->Instance->ARR) * v->alfaA);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008dc:	ee07 3a90 	vmov	s15, r3
 80008e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	edd3 7a00 	vldr	s15, [r3]
 80008ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008f2:	ee17 2a90 	vmov	r2, s15
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	60da      	str	r2, [r3, #12]
	v->compB = ((int32_t)(htim->Instance->ARR) * v->alfaB);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000900:	ee07 3a90 	vmov	s15, r3
 8000904:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	edd3 7a01 	vldr	s15, [r3, #4]
 800090e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000912:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000916:	ee17 2a90 	vmov	r2, s15
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	611a      	str	r2, [r3, #16]
	v->compC = ((int32_t)(htim->Instance->ARR) * v->alfaC);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000924:	ee07 3a90 	vmov	s15, r3
 8000928:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000936:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800093a:	ee17 2a90 	vmov	r2, s15
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	615a      	str	r2, [r3, #20]

}
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
	...

08000950 <set_PWM>:
 * This function sets the duty cycles for the PWM channels.
 *
 * @param htim Pointer to the TIM_HandleTypeDef structure.
 * @param duties Pointer to the Duties structure containing duty cycle values.
 */
void set_PWM(TIM_HandleTypeDef *htim, Duties *duties) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	@ 0x28
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	6039      	str	r1, [r7, #0]

	Compare3F_struct Compare = COMPARE3F_DEFAULTS;
 800095a:	f04f 0300 	mov.w	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	f04f 0300 	mov.w	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	f04f 0300 	mov.w	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
 800096c:	2300      	movs	r3, #0
 800096e:	61bb      	str	r3, [r7, #24]
 8000970:	2300      	movs	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
 8000974:	2300      	movs	r3, #0
 8000976:	623b      	str	r3, [r7, #32]
 8000978:	4b19      	ldr	r3, [pc, #100]	@ (80009e0 <set_PWM+0x90>)
 800097a:	627b      	str	r3, [r7, #36]	@ 0x24

	Compare.alfaA = 1.0F - duties->Da;
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	edd3 7a00 	vldr	s15, [r3]
 8000982:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000986:	ee77 7a67 	vsub.f32	s15, s14, s15
 800098a:	edc7 7a03 	vstr	s15, [r7, #12]
	Compare.alfaB = 1.0F - duties->Db;
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	edd3 7a01 	vldr	s15, [r3, #4]
 8000994:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000998:	ee77 7a67 	vsub.f32	s15, s14, s15
 800099c:	edc7 7a04 	vstr	s15, [r7, #16]
	Compare.alfaC = 1.0F - duties->Dc;
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80009a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80009aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009ae:	edc7 7a05 	vstr	s15, [r7, #20]


	Compare3F_calc(htim, &Compare);
 80009b2:	f107 030c 	add.w	r3, r7, #12
 80009b6:	4619      	mov	r1, r3
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f7ff ff87 	bl	80008cc <Compare3F_calc>

	htim->Instance->CCR1 = Compare.compA;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	69ba      	ldr	r2, [r7, #24]
 80009c4:	635a      	str	r2, [r3, #52]	@ 0x34
	htim->Instance->CCR2 = Compare.compB;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	69fa      	ldr	r2, [r7, #28]
 80009cc:	639a      	str	r2, [r3, #56]	@ 0x38
	htim->Instance->CCR3 = Compare.compC;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	6a3a      	ldr	r2, [r7, #32]
 80009d4:	63da      	str	r2, [r3, #60]	@ 0x3c

}
 80009d6:	bf00      	nop
 80009d8:	3728      	adds	r7, #40	@ 0x28
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	080008cd 	.word	0x080008cd

080009e4 <tasks_1ms>:
 *
 * This function is called by the TIM6 IRQ handler every millisecond.
 * It increments the millisecond counter and calls the LED handler
 * for left, right, and error LEDs.
 */
void tasks_1ms(void) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
    // Increment millisecond counter
    ms_counter++;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a1c <tasks_1ms+0x38>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	3301      	adds	r3, #1
 80009ee:	4a0b      	ldr	r2, [pc, #44]	@ (8000a1c <tasks_1ms+0x38>)
 80009f0:	6013      	str	r3, [r2, #0]

    // Call LED handler for left, right, and error LEDs
    LED_handler(&led_left, ms_counter);
 80009f2:	4b0a      	ldr	r3, [pc, #40]	@ (8000a1c <tasks_1ms+0x38>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4619      	mov	r1, r3
 80009f8:	4809      	ldr	r0, [pc, #36]	@ (8000a20 <tasks_1ms+0x3c>)
 80009fa:	f7ff fed3 	bl	80007a4 <LED_handler>
    LED_handler(&led_right, ms_counter);
 80009fe:	4b07      	ldr	r3, [pc, #28]	@ (8000a1c <tasks_1ms+0x38>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4619      	mov	r1, r3
 8000a04:	4807      	ldr	r0, [pc, #28]	@ (8000a24 <tasks_1ms+0x40>)
 8000a06:	f7ff fecd 	bl	80007a4 <LED_handler>
    LED_handler(&led_error, ms_counter);
 8000a0a:	4b04      	ldr	r3, [pc, #16]	@ (8000a1c <tasks_1ms+0x38>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4805      	ldr	r0, [pc, #20]	@ (8000a28 <tasks_1ms+0x44>)
 8000a12:	f7ff fec7 	bl	80007a4 <LED_handler>
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200000f8 	.word	0x200000f8
 8000a20:	20000014 	.word	0x20000014
 8000a24:	2000001c 	.word	0x2000001c
 8000a28:	20000024 	.word	0x20000024

08000a2c <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a32:	463b      	mov	r3, r7
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a3e:	4b2f      	ldr	r3, [pc, #188]	@ (8000afc <MX_ADC1_Init+0xd0>)
 8000a40:	4a2f      	ldr	r2, [pc, #188]	@ (8000b00 <MX_ADC1_Init+0xd4>)
 8000a42:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a44:	4b2d      	ldr	r3, [pc, #180]	@ (8000afc <MX_ADC1_Init+0xd0>)
 8000a46:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000a4a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a4c:	4b2b      	ldr	r3, [pc, #172]	@ (8000afc <MX_ADC1_Init+0xd0>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a52:	4b2a      	ldr	r3, [pc, #168]	@ (8000afc <MX_ADC1_Init+0xd0>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a58:	4b28      	ldr	r3, [pc, #160]	@ (8000afc <MX_ADC1_Init+0xd0>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a5e:	4b27      	ldr	r3, [pc, #156]	@ (8000afc <MX_ADC1_Init+0xd0>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a66:	4b25      	ldr	r3, [pc, #148]	@ (8000afc <MX_ADC1_Init+0xd0>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a6c:	4b23      	ldr	r3, [pc, #140]	@ (8000afc <MX_ADC1_Init+0xd0>)
 8000a6e:	4a25      	ldr	r2, [pc, #148]	@ (8000b04 <MX_ADC1_Init+0xd8>)
 8000a70:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a72:	4b22      	ldr	r3, [pc, #136]	@ (8000afc <MX_ADC1_Init+0xd0>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000a78:	4b20      	ldr	r3, [pc, #128]	@ (8000afc <MX_ADC1_Init+0xd0>)
 8000a7a:	2203      	movs	r2, #3
 8000a7c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000afc <MX_ADC1_Init+0xd0>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a86:	4b1d      	ldr	r3, [pc, #116]	@ (8000afc <MX_ADC1_Init+0xd0>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a8c:	481b      	ldr	r0, [pc, #108]	@ (8000afc <MX_ADC1_Init+0xd0>)
 8000a8e:	f001 fb47 	bl	8002120 <HAL_ADC_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a98:	f000 fdd2 	bl	8001640 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aa8:	463b      	mov	r3, r7
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4813      	ldr	r0, [pc, #76]	@ (8000afc <MX_ADC1_Init+0xd0>)
 8000aae:	f001 fc93 	bl	80023d8 <HAL_ADC_ConfigChannel>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ab8:	f000 fdc2 	bl	8001640 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000abc:	2301      	movs	r3, #1
 8000abe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	480c      	ldr	r0, [pc, #48]	@ (8000afc <MX_ADC1_Init+0xd0>)
 8000aca:	f001 fc85 	bl	80023d8 <HAL_ADC_ConfigChannel>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000ad4:	f000 fdb4 	bl	8001640 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8000ad8:	2312      	movs	r3, #18
 8000ada:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000adc:	2303      	movs	r3, #3
 8000ade:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ae0:	463b      	mov	r3, r7
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4805      	ldr	r0, [pc, #20]	@ (8000afc <MX_ADC1_Init+0xd0>)
 8000ae6:	f001 fc77 	bl	80023d8 <HAL_ADC_ConfigChannel>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000af0:	f000 fda6 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	200000fc 	.word	0x200000fc
 8000b00:	40012000 	.word	0x40012000
 8000b04:	0f000001 	.word	0x0f000001

08000b08 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b0e:	463b      	mov	r3, r7
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000b1a:	4b37      	ldr	r3, [pc, #220]	@ (8000bf8 <MX_ADC2_Init+0xf0>)
 8000b1c:	4a37      	ldr	r2, [pc, #220]	@ (8000bfc <MX_ADC2_Init+0xf4>)
 8000b1e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b20:	4b35      	ldr	r3, [pc, #212]	@ (8000bf8 <MX_ADC2_Init+0xf0>)
 8000b22:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000b26:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000b28:	4b33      	ldr	r3, [pc, #204]	@ (8000bf8 <MX_ADC2_Init+0xf0>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b2e:	4b32      	ldr	r3, [pc, #200]	@ (8000bf8 <MX_ADC2_Init+0xf0>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b34:	4b30      	ldr	r3, [pc, #192]	@ (8000bf8 <MX_ADC2_Init+0xf0>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b3a:	4b2f      	ldr	r3, [pc, #188]	@ (8000bf8 <MX_ADC2_Init+0xf0>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000b42:	4b2d      	ldr	r3, [pc, #180]	@ (8000bf8 <MX_ADC2_Init+0xf0>)
 8000b44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000b48:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000b4a:	4b2b      	ldr	r3, [pc, #172]	@ (8000bf8 <MX_ADC2_Init+0xf0>)
 8000b4c:	f04f 6210 	mov.w	r2, #150994944	@ 0x9000000
 8000b50:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b52:	4b29      	ldr	r3, [pc, #164]	@ (8000bf8 <MX_ADC2_Init+0xf0>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8000b58:	4b27      	ldr	r3, [pc, #156]	@ (8000bf8 <MX_ADC2_Init+0xf0>)
 8000b5a:	2204      	movs	r2, #4
 8000b5c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000b5e:	4b26      	ldr	r3, [pc, #152]	@ (8000bf8 <MX_ADC2_Init+0xf0>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000b66:	4b24      	ldr	r3, [pc, #144]	@ (8000bf8 <MX_ADC2_Init+0xf0>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b6c:	4822      	ldr	r0, [pc, #136]	@ (8000bf8 <MX_ADC2_Init+0xf0>)
 8000b6e:	f001 fad7 	bl	8002120 <HAL_ADC_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8000b78:	f000 fd62 	bl	8001640 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000b7c:	2306      	movs	r3, #6
 8000b7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b80:	2301      	movs	r3, #1
 8000b82:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000b84:	2303      	movs	r3, #3
 8000b86:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b88:	463b      	mov	r3, r7
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	481a      	ldr	r0, [pc, #104]	@ (8000bf8 <MX_ADC2_Init+0xf0>)
 8000b8e:	f001 fc23 	bl	80023d8 <HAL_ADC_ConfigChannel>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8000b98:	f000 fd52 	bl	8001640 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000b9c:	2307      	movs	r3, #7
 8000b9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ba4:	463b      	mov	r3, r7
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4813      	ldr	r0, [pc, #76]	@ (8000bf8 <MX_ADC2_Init+0xf0>)
 8000baa:	f001 fc15 	bl	80023d8 <HAL_ADC_ConfigChannel>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8000bb4:	f000 fd44 	bl	8001640 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000bb8:	2308      	movs	r3, #8
 8000bba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bc0:	463b      	mov	r3, r7
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	480c      	ldr	r0, [pc, #48]	@ (8000bf8 <MX_ADC2_Init+0xf0>)
 8000bc6:	f001 fc07 	bl	80023d8 <HAL_ADC_ConfigChannel>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_ADC2_Init+0xcc>
  {
    Error_Handler();
 8000bd0:	f000 fd36 	bl	8001640 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000bd4:	2309      	movs	r3, #9
 8000bd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000bd8:	2304      	movs	r3, #4
 8000bda:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bdc:	463b      	mov	r3, r7
 8000bde:	4619      	mov	r1, r3
 8000be0:	4805      	ldr	r0, [pc, #20]	@ (8000bf8 <MX_ADC2_Init+0xf0>)
 8000be2:	f001 fbf9 	bl	80023d8 <HAL_ADC_ConfigChannel>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_ADC2_Init+0xe8>
  {
    Error_Handler();
 8000bec:	f000 fd28 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	3710      	adds	r7, #16
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000144 	.word	0x20000144
 8000bfc:	40012100 	.word	0x40012100

08000c00 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c06:	463b      	mov	r3, r7
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000c12:	4b21      	ldr	r3, [pc, #132]	@ (8000c98 <MX_ADC3_Init+0x98>)
 8000c14:	4a21      	ldr	r2, [pc, #132]	@ (8000c9c <MX_ADC3_Init+0x9c>)
 8000c16:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c18:	4b1f      	ldr	r3, [pc, #124]	@ (8000c98 <MX_ADC3_Init+0x98>)
 8000c1a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000c1e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000c20:	4b1d      	ldr	r3, [pc, #116]	@ (8000c98 <MX_ADC3_Init+0x98>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c26:	4b1c      	ldr	r3, [pc, #112]	@ (8000c98 <MX_ADC3_Init+0x98>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000c98 <MX_ADC3_Init+0x98>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000c32:	4b19      	ldr	r3, [pc, #100]	@ (8000c98 <MX_ADC3_Init+0x98>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c3a:	4b17      	ldr	r3, [pc, #92]	@ (8000c98 <MX_ADC3_Init+0x98>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c40:	4b15      	ldr	r3, [pc, #84]	@ (8000c98 <MX_ADC3_Init+0x98>)
 8000c42:	4a17      	ldr	r2, [pc, #92]	@ (8000ca0 <MX_ADC3_Init+0xa0>)
 8000c44:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c46:	4b14      	ldr	r3, [pc, #80]	@ (8000c98 <MX_ADC3_Init+0x98>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000c4c:	4b12      	ldr	r3, [pc, #72]	@ (8000c98 <MX_ADC3_Init+0x98>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000c52:	4b11      	ldr	r3, [pc, #68]	@ (8000c98 <MX_ADC3_Init+0x98>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c98 <MX_ADC3_Init+0x98>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c60:	480d      	ldr	r0, [pc, #52]	@ (8000c98 <MX_ADC3_Init+0x98>)
 8000c62:	f001 fa5d 	bl	8002120 <HAL_ADC_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000c6c:	f000 fce8 	bl	8001640 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000c70:	230a      	movs	r3, #10
 8000c72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c74:	2301      	movs	r3, #1
 8000c76:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c7c:	463b      	mov	r3, r7
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4805      	ldr	r0, [pc, #20]	@ (8000c98 <MX_ADC3_Init+0x98>)
 8000c82:	f001 fba9 	bl	80023d8 <HAL_ADC_ConfigChannel>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000c8c:	f000 fcd8 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c90:	bf00      	nop
 8000c92:	3710      	adds	r7, #16
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	2000018c 	.word	0x2000018c
 8000c9c:	40012200 	.word	0x40012200
 8000ca0:	0f000001 	.word	0x0f000001

08000ca4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08e      	sub	sp, #56	@ 0x38
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a7c      	ldr	r2, [pc, #496]	@ (8000eb4 <HAL_ADC_MspInit+0x210>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d124      	bne.n	8000d10 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cc6:	4b7c      	ldr	r3, [pc, #496]	@ (8000eb8 <HAL_ADC_MspInit+0x214>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cca:	4a7b      	ldr	r2, [pc, #492]	@ (8000eb8 <HAL_ADC_MspInit+0x214>)
 8000ccc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cd2:	4b79      	ldr	r3, [pc, #484]	@ (8000eb8 <HAL_ADC_MspInit+0x214>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cda:	623b      	str	r3, [r7, #32]
 8000cdc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	4b76      	ldr	r3, [pc, #472]	@ (8000eb8 <HAL_ADC_MspInit+0x214>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	4a75      	ldr	r2, [pc, #468]	@ (8000eb8 <HAL_ADC_MspInit+0x214>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cea:	4b73      	ldr	r3, [pc, #460]	@ (8000eb8 <HAL_ADC_MspInit+0x214>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	61fb      	str	r3, [r7, #28]
 8000cf4:	69fb      	ldr	r3, [r7, #28]
    PA0/WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ia_L_Pin|ib_L_Pin|ic_L_Pin|VDC_L_Pin;
 8000cf6:	230f      	movs	r3, #15
 8000cf8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d06:	4619      	mov	r1, r3
 8000d08:	486c      	ldr	r0, [pc, #432]	@ (8000ebc <HAL_ADC_MspInit+0x218>)
 8000d0a:	f002 fed3 	bl	8003ab4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000d0e:	e0cc      	b.n	8000eaa <HAL_ADC_MspInit+0x206>
  else if(adcHandle->Instance==ADC2)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a6a      	ldr	r2, [pc, #424]	@ (8000ec0 <HAL_ADC_MspInit+0x21c>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d16e      	bne.n	8000df8 <HAL_ADC_MspInit+0x154>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000d1a:	4b67      	ldr	r3, [pc, #412]	@ (8000eb8 <HAL_ADC_MspInit+0x214>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d1e:	4a66      	ldr	r2, [pc, #408]	@ (8000eb8 <HAL_ADC_MspInit+0x214>)
 8000d20:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d24:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d26:	4b64      	ldr	r3, [pc, #400]	@ (8000eb8 <HAL_ADC_MspInit+0x214>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d2e:	61bb      	str	r3, [r7, #24]
 8000d30:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	4b61      	ldr	r3, [pc, #388]	@ (8000eb8 <HAL_ADC_MspInit+0x214>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	4a60      	ldr	r2, [pc, #384]	@ (8000eb8 <HAL_ADC_MspInit+0x214>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3e:	4b5e      	ldr	r3, [pc, #376]	@ (8000eb8 <HAL_ADC_MspInit+0x214>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4a:	4b5b      	ldr	r3, [pc, #364]	@ (8000eb8 <HAL_ADC_MspInit+0x214>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	4a5a      	ldr	r2, [pc, #360]	@ (8000eb8 <HAL_ADC_MspInit+0x214>)
 8000d50:	f043 0302 	orr.w	r3, r3, #2
 8000d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d56:	4b58      	ldr	r3, [pc, #352]	@ (8000eb8 <HAL_ADC_MspInit+0x214>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	f003 0302 	and.w	r3, r3, #2
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ia_R_Pin|ib_R_Pin;
 8000d62:	23c0      	movs	r3, #192	@ 0xc0
 8000d64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d66:	2303      	movs	r3, #3
 8000d68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d72:	4619      	mov	r1, r3
 8000d74:	4851      	ldr	r0, [pc, #324]	@ (8000ebc <HAL_ADC_MspInit+0x218>)
 8000d76:	f002 fe9d 	bl	8003ab4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ic_R_Pin|VDC_R_Pin;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	484d      	ldr	r0, [pc, #308]	@ (8000ec4 <HAL_ADC_MspInit+0x220>)
 8000d8e:	f002 fe91 	bl	8003ab4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8000d92:	4b4d      	ldr	r3, [pc, #308]	@ (8000ec8 <HAL_ADC_MspInit+0x224>)
 8000d94:	4a4d      	ldr	r2, [pc, #308]	@ (8000ecc <HAL_ADC_MspInit+0x228>)
 8000d96:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8000d98:	4b4b      	ldr	r3, [pc, #300]	@ (8000ec8 <HAL_ADC_MspInit+0x224>)
 8000d9a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000d9e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000da0:	4b49      	ldr	r3, [pc, #292]	@ (8000ec8 <HAL_ADC_MspInit+0x224>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000da6:	4b48      	ldr	r3, [pc, #288]	@ (8000ec8 <HAL_ADC_MspInit+0x224>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000dac:	4b46      	ldr	r3, [pc, #280]	@ (8000ec8 <HAL_ADC_MspInit+0x224>)
 8000dae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000db2:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000db4:	4b44      	ldr	r3, [pc, #272]	@ (8000ec8 <HAL_ADC_MspInit+0x224>)
 8000db6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000dba:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000dbc:	4b42      	ldr	r3, [pc, #264]	@ (8000ec8 <HAL_ADC_MspInit+0x224>)
 8000dbe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000dc2:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000dc4:	4b40      	ldr	r3, [pc, #256]	@ (8000ec8 <HAL_ADC_MspInit+0x224>)
 8000dc6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dca:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000dcc:	4b3e      	ldr	r3, [pc, #248]	@ (8000ec8 <HAL_ADC_MspInit+0x224>)
 8000dce:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000dd2:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dd4:	4b3c      	ldr	r3, [pc, #240]	@ (8000ec8 <HAL_ADC_MspInit+0x224>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000dda:	483b      	ldr	r0, [pc, #236]	@ (8000ec8 <HAL_ADC_MspInit+0x224>)
 8000ddc:	f002 faf2 	bl	80033c4 <HAL_DMA_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <HAL_ADC_MspInit+0x146>
      Error_Handler();
 8000de6:	f000 fc2b 	bl	8001640 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a36      	ldr	r2, [pc, #216]	@ (8000ec8 <HAL_ADC_MspInit+0x224>)
 8000dee:	639a      	str	r2, [r3, #56]	@ 0x38
 8000df0:	4a35      	ldr	r2, [pc, #212]	@ (8000ec8 <HAL_ADC_MspInit+0x224>)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000df6:	e058      	b.n	8000eaa <HAL_ADC_MspInit+0x206>
  else if(adcHandle->Instance==ADC3)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a34      	ldr	r2, [pc, #208]	@ (8000ed0 <HAL_ADC_MspInit+0x22c>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d153      	bne.n	8000eaa <HAL_ADC_MspInit+0x206>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000e02:	4b2d      	ldr	r3, [pc, #180]	@ (8000eb8 <HAL_ADC_MspInit+0x214>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e06:	4a2c      	ldr	r2, [pc, #176]	@ (8000eb8 <HAL_ADC_MspInit+0x214>)
 8000e08:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000eb8 <HAL_ADC_MspInit+0x214>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1a:	4b27      	ldr	r3, [pc, #156]	@ (8000eb8 <HAL_ADC_MspInit+0x214>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	4a26      	ldr	r2, [pc, #152]	@ (8000eb8 <HAL_ADC_MspInit+0x214>)
 8000e20:	f043 0304 	orr.w	r3, r3, #4
 8000e24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e26:	4b24      	ldr	r3, [pc, #144]	@ (8000eb8 <HAL_ADC_MspInit+0x214>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	f003 0304 	and.w	r3, r3, #4
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Tinv_L_Pin|Tinv_R_Pin|Tmot_L_Pin|Tmot_R_Pin;
 8000e32:	230f      	movs	r3, #15
 8000e34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e36:	2303      	movs	r3, #3
 8000e38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e42:	4619      	mov	r1, r3
 8000e44:	4823      	ldr	r0, [pc, #140]	@ (8000ed4 <HAL_ADC_MspInit+0x230>)
 8000e46:	f002 fe35 	bl	8003ab4 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8000e4a:	4b23      	ldr	r3, [pc, #140]	@ (8000ed8 <HAL_ADC_MspInit+0x234>)
 8000e4c:	4a23      	ldr	r2, [pc, #140]	@ (8000edc <HAL_ADC_MspInit+0x238>)
 8000e4e:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000e50:	4b21      	ldr	r3, [pc, #132]	@ (8000ed8 <HAL_ADC_MspInit+0x234>)
 8000e52:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000e56:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e58:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed8 <HAL_ADC_MspInit+0x234>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e5e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed8 <HAL_ADC_MspInit+0x234>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000e64:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed8 <HAL_ADC_MspInit+0x234>)
 8000e66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e6a:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed8 <HAL_ADC_MspInit+0x234>)
 8000e6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e72:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e74:	4b18      	ldr	r3, [pc, #96]	@ (8000ed8 <HAL_ADC_MspInit+0x234>)
 8000e76:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e7a:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8000e7c:	4b16      	ldr	r3, [pc, #88]	@ (8000ed8 <HAL_ADC_MspInit+0x234>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000e82:	4b15      	ldr	r3, [pc, #84]	@ (8000ed8 <HAL_ADC_MspInit+0x234>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e88:	4b13      	ldr	r3, [pc, #76]	@ (8000ed8 <HAL_ADC_MspInit+0x234>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000e8e:	4812      	ldr	r0, [pc, #72]	@ (8000ed8 <HAL_ADC_MspInit+0x234>)
 8000e90:	f002 fa98 	bl	80033c4 <HAL_DMA_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <HAL_ADC_MspInit+0x1fa>
      Error_Handler();
 8000e9a:	f000 fbd1 	bl	8001640 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed8 <HAL_ADC_MspInit+0x234>)
 8000ea2:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ea4:	4a0c      	ldr	r2, [pc, #48]	@ (8000ed8 <HAL_ADC_MspInit+0x234>)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000eaa:	bf00      	nop
 8000eac:	3738      	adds	r7, #56	@ 0x38
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40012000 	.word	0x40012000
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020000 	.word	0x40020000
 8000ec0:	40012100 	.word	0x40012100
 8000ec4:	40020400 	.word	0x40020400
 8000ec8:	200001d4 	.word	0x200001d4
 8000ecc:	40026440 	.word	0x40026440
 8000ed0:	40012200 	.word	0x40012200
 8000ed4:	40020800 	.word	0x40020800
 8000ed8:	20000234 	.word	0x20000234
 8000edc:	40026428 	.word	0x40026428

08000ee0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000ee4:	4b17      	ldr	r3, [pc, #92]	@ (8000f44 <MX_CAN1_Init+0x64>)
 8000ee6:	4a18      	ldr	r2, [pc, #96]	@ (8000f48 <MX_CAN1_Init+0x68>)
 8000ee8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 8000eea:	4b16      	ldr	r3, [pc, #88]	@ (8000f44 <MX_CAN1_Init+0x64>)
 8000eec:	220c      	movs	r2, #12
 8000eee:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ef0:	4b14      	ldr	r3, [pc, #80]	@ (8000f44 <MX_CAN1_Init+0x64>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ef6:	4b13      	ldr	r3, [pc, #76]	@ (8000f44 <MX_CAN1_Init+0x64>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 8000efc:	4b11      	ldr	r3, [pc, #68]	@ (8000f44 <MX_CAN1_Init+0x64>)
 8000efe:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000f02:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <MX_CAN1_Init+0x64>)
 8000f06:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000f0a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f44 <MX_CAN1_Init+0x64>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000f12:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <MX_CAN1_Init+0x64>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000f18:	4b0a      	ldr	r3, [pc, #40]	@ (8000f44 <MX_CAN1_Init+0x64>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000f1e:	4b09      	ldr	r3, [pc, #36]	@ (8000f44 <MX_CAN1_Init+0x64>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f24:	4b07      	ldr	r3, [pc, #28]	@ (8000f44 <MX_CAN1_Init+0x64>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f2a:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <MX_CAN1_Init+0x64>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f30:	4804      	ldr	r0, [pc, #16]	@ (8000f44 <MX_CAN1_Init+0x64>)
 8000f32:	f001 fd23 	bl	800297c <HAL_CAN_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000f3c:	f000 fb80 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000294 	.word	0x20000294
 8000f48:	40006400 	.word	0x40006400

08000f4c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	@ 0x28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a1f      	ldr	r2, [pc, #124]	@ (8000fe8 <HAL_CAN_MspInit+0x9c>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d137      	bne.n	8000fde <HAL_CAN_MspInit+0x92>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000fec <HAL_CAN_MspInit+0xa0>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f72:	4a1e      	ldr	r2, [pc, #120]	@ (8000fec <HAL_CAN_MspInit+0xa0>)
 8000f74:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fec <HAL_CAN_MspInit+0xa0>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f86:	4b19      	ldr	r3, [pc, #100]	@ (8000fec <HAL_CAN_MspInit+0xa0>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	4a18      	ldr	r2, [pc, #96]	@ (8000fec <HAL_CAN_MspInit+0xa0>)
 8000f8c:	f043 0308 	orr.w	r3, r3, #8
 8000f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f92:	4b16      	ldr	r3, [pc, #88]	@ (8000fec <HAL_CAN_MspInit+0xa0>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f96:	f003 0308 	and.w	r3, r3, #8
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000faa:	2303      	movs	r3, #3
 8000fac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000fae:	2309      	movs	r3, #9
 8000fb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	480d      	ldr	r0, [pc, #52]	@ (8000ff0 <HAL_CAN_MspInit+0xa4>)
 8000fba:	f002 fd7b 	bl	8003ab4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	2014      	movs	r0, #20
 8000fc4:	f002 f8e9 	bl	800319a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000fc8:	2014      	movs	r0, #20
 8000fca:	f002 f902 	bl	80031d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2015      	movs	r0, #21
 8000fd4:	f002 f8e1 	bl	800319a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000fd8:	2015      	movs	r0, #21
 8000fda:	f002 f8fa 	bl	80031d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000fde:	bf00      	nop
 8000fe0:	3728      	adds	r7, #40	@ 0x28
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40006400 	.word	0x40006400
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40020c00 	.word	0x40020c00

08000ff4 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001002:	4b0f      	ldr	r3, [pc, #60]	@ (8001040 <MX_DAC_Init+0x4c>)
 8001004:	4a0f      	ldr	r2, [pc, #60]	@ (8001044 <MX_DAC_Init+0x50>)
 8001006:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001008:	480d      	ldr	r0, [pc, #52]	@ (8001040 <MX_DAC_Init+0x4c>)
 800100a:	f002 f8fc 	bl	8003206 <HAL_DAC_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001014:	f000 fb14 	bl	8001640 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001018:	2300      	movs	r3, #0
 800101a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800101c:	2300      	movs	r3, #0
 800101e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001020:	463b      	mov	r3, r7
 8001022:	2200      	movs	r2, #0
 8001024:	4619      	mov	r1, r3
 8001026:	4806      	ldr	r0, [pc, #24]	@ (8001040 <MX_DAC_Init+0x4c>)
 8001028:	f002 f973 	bl	8003312 <HAL_DAC_ConfigChannel>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001032:	f000 fb05 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200002bc 	.word	0x200002bc
 8001044:	40007400 	.word	0x40007400

08001048 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	@ 0x28
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a19      	ldr	r2, [pc, #100]	@ (80010cc <HAL_DAC_MspInit+0x84>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d12b      	bne.n	80010c2 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800106a:	4b19      	ldr	r3, [pc, #100]	@ (80010d0 <HAL_DAC_MspInit+0x88>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106e:	4a18      	ldr	r2, [pc, #96]	@ (80010d0 <HAL_DAC_MspInit+0x88>)
 8001070:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001074:	6413      	str	r3, [r2, #64]	@ 0x40
 8001076:	4b16      	ldr	r3, [pc, #88]	@ (80010d0 <HAL_DAC_MspInit+0x88>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001082:	4b13      	ldr	r3, [pc, #76]	@ (80010d0 <HAL_DAC_MspInit+0x88>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	4a12      	ldr	r2, [pc, #72]	@ (80010d0 <HAL_DAC_MspInit+0x88>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6313      	str	r3, [r2, #48]	@ 0x30
 800108e:	4b10      	ldr	r3, [pc, #64]	@ (80010d0 <HAL_DAC_MspInit+0x88>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = DAC_Pin;
 800109a:	2310      	movs	r3, #16
 800109c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800109e:	2303      	movs	r3, #3
 80010a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC_GPIO_Port, &GPIO_InitStruct);
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	4809      	ldr	r0, [pc, #36]	@ (80010d4 <HAL_DAC_MspInit+0x8c>)
 80010ae:	f002 fd01 	bl	8003ab4 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2100      	movs	r1, #0
 80010b6:	2036      	movs	r0, #54	@ 0x36
 80010b8:	f002 f86f 	bl	800319a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010bc:	2036      	movs	r0, #54	@ 0x36
 80010be:	f002 f888 	bl	80031d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80010c2:	bf00      	nop
 80010c4:	3728      	adds	r7, #40	@ 0x28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40007400 	.word	0x40007400
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40020000 	.word	0x40020000

080010d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010de:	4b10      	ldr	r3, [pc, #64]	@ (8001120 <MX_DMA_Init+0x48>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001120 <MX_DMA_Init+0x48>)
 80010e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001120 <MX_DMA_Init+0x48>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2100      	movs	r1, #0
 80010fa:	2039      	movs	r0, #57	@ 0x39
 80010fc:	f002 f84d 	bl	800319a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001100:	2039      	movs	r0, #57	@ 0x39
 8001102:	f002 f866 	bl	80031d2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001106:	2200      	movs	r2, #0
 8001108:	2100      	movs	r1, #0
 800110a:	203a      	movs	r0, #58	@ 0x3a
 800110c:	f002 f845 	bl	800319a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001110:	203a      	movs	r0, #58	@ 0x3a
 8001112:	f002 f85e 	bl	80031d2 <HAL_NVIC_EnableIRQ>

}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40023800 	.word	0x40023800

08001124 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08c      	sub	sp, #48	@ 0x30
 8001128:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112a:	f107 031c 	add.w	r3, r7, #28
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800113a:	4b87      	ldr	r3, [pc, #540]	@ (8001358 <MX_GPIO_Init+0x234>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	4a86      	ldr	r2, [pc, #536]	@ (8001358 <MX_GPIO_Init+0x234>)
 8001140:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001144:	6313      	str	r3, [r2, #48]	@ 0x30
 8001146:	4b84      	ldr	r3, [pc, #528]	@ (8001358 <MX_GPIO_Init+0x234>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800114e:	61bb      	str	r3, [r7, #24]
 8001150:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001152:	4b81      	ldr	r3, [pc, #516]	@ (8001358 <MX_GPIO_Init+0x234>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	4a80      	ldr	r2, [pc, #512]	@ (8001358 <MX_GPIO_Init+0x234>)
 8001158:	f043 0304 	orr.w	r3, r3, #4
 800115c:	6313      	str	r3, [r2, #48]	@ 0x30
 800115e:	4b7e      	ldr	r3, [pc, #504]	@ (8001358 <MX_GPIO_Init+0x234>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	617b      	str	r3, [r7, #20]
 8001168:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116a:	4b7b      	ldr	r3, [pc, #492]	@ (8001358 <MX_GPIO_Init+0x234>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	4a7a      	ldr	r2, [pc, #488]	@ (8001358 <MX_GPIO_Init+0x234>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6313      	str	r3, [r2, #48]	@ 0x30
 8001176:	4b78      	ldr	r3, [pc, #480]	@ (8001358 <MX_GPIO_Init+0x234>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001182:	4b75      	ldr	r3, [pc, #468]	@ (8001358 <MX_GPIO_Init+0x234>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	4a74      	ldr	r2, [pc, #464]	@ (8001358 <MX_GPIO_Init+0x234>)
 8001188:	f043 0302 	orr.w	r3, r3, #2
 800118c:	6313      	str	r3, [r2, #48]	@ 0x30
 800118e:	4b72      	ldr	r3, [pc, #456]	@ (8001358 <MX_GPIO_Init+0x234>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800119a:	4b6f      	ldr	r3, [pc, #444]	@ (8001358 <MX_GPIO_Init+0x234>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	4a6e      	ldr	r2, [pc, #440]	@ (8001358 <MX_GPIO_Init+0x234>)
 80011a0:	f043 0310 	orr.w	r3, r3, #16
 80011a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a6:	4b6c      	ldr	r3, [pc, #432]	@ (8001358 <MX_GPIO_Init+0x234>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	f003 0310 	and.w	r3, r3, #16
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011b2:	4b69      	ldr	r3, [pc, #420]	@ (8001358 <MX_GPIO_Init+0x234>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	4a68      	ldr	r2, [pc, #416]	@ (8001358 <MX_GPIO_Init+0x234>)
 80011b8:	f043 0308 	orr.w	r3, r3, #8
 80011bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011be:	4b66      	ldr	r3, [pc, #408]	@ (8001358 <MX_GPIO_Init+0x234>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	f003 0308 	and.w	r3, r3, #8
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_R_GPIO_Port, ENABLE_R_Pin, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2104      	movs	r1, #4
 80011ce:	4863      	ldr	r0, [pc, #396]	@ (800135c <MX_GPIO_Init+0x238>)
 80011d0:	f002 fe1c 	bl	8003e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_L_GPIO_Port, ENABLE_L_Pin, GPIO_PIN_RESET);
 80011d4:	2200      	movs	r2, #0
 80011d6:	2180      	movs	r1, #128	@ 0x80
 80011d8:	4861      	ldr	r0, [pc, #388]	@ (8001360 <MX_GPIO_Init+0x23c>)
 80011da:	f002 fe17 	bl	8003e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_LEFT_Pin|LED_RIGHT_Pin|LED_ERR_Pin, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	2170      	movs	r1, #112	@ 0x70
 80011e2:	4860      	ldr	r0, [pc, #384]	@ (8001364 <MX_GPIO_Init+0x240>)
 80011e4:	f002 fe12 	bl	8003e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SC_det_Pin;
 80011e8:	2310      	movs	r3, #16
 80011ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ec:	2300      	movs	r3, #0
 80011ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SC_det_GPIO_Port, &GPIO_InitStruct);
 80011f4:	f107 031c 	add.w	r3, r7, #28
 80011f8:	4619      	mov	r1, r3
 80011fa:	485b      	ldr	r0, [pc, #364]	@ (8001368 <MX_GPIO_Init+0x244>)
 80011fc:	f002 fc5a 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_R_Pin;
 8001200:	2304      	movs	r3, #4
 8001202:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001204:	2301      	movs	r3, #1
 8001206:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ENABLE_R_GPIO_Port, &GPIO_InitStruct);
 8001210:	f107 031c 	add.w	r3, r7, #28
 8001214:	4619      	mov	r1, r3
 8001216:	4851      	ldr	r0, [pc, #324]	@ (800135c <MX_GPIO_Init+0x238>)
 8001218:	f002 fc4c 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_L_Pin;
 800121c:	2380      	movs	r3, #128	@ 0x80
 800121e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001220:	2301      	movs	r3, #1
 8001222:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2300      	movs	r3, #0
 800122a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ENABLE_L_GPIO_Port, &GPIO_InitStruct);
 800122c:	f107 031c 	add.w	r3, r7, #28
 8001230:	4619      	mov	r1, r3
 8001232:	484b      	ldr	r0, [pc, #300]	@ (8001360 <MX_GPIO_Init+0x23c>)
 8001234:	f002 fc3e 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = WRN_L_Pin|WRN_R_Pin;
 8001238:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800123c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800123e:	2300      	movs	r3, #0
 8001240:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001246:	f107 031c 	add.w	r3, r7, #28
 800124a:	4619      	mov	r1, r3
 800124c:	4844      	ldr	r0, [pc, #272]	@ (8001360 <MX_GPIO_Init+0x23c>)
 800124e:	f002 fc31 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Z_R_Pin;
 8001252:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001256:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001258:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800125c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Z_R_GPIO_Port, &GPIO_InitStruct);
 8001262:	f107 031c 	add.w	r3, r7, #28
 8001266:	4619      	mov	r1, r3
 8001268:	483c      	ldr	r0, [pc, #240]	@ (800135c <MX_GPIO_Init+0x238>)
 800126a:	f002 fc23 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Z_L_Pin;
 800126e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001272:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001274:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001278:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Z_L_GPIO_Port, &GPIO_InitStruct);
 800127e:	f107 031c 	add.w	r3, r7, #28
 8001282:	4619      	mov	r1, r3
 8001284:	4837      	ldr	r0, [pc, #220]	@ (8001364 <MX_GPIO_Init+0x240>)
 8001286:	f002 fc15 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIP_R_Pin;
 800128a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800128e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001290:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001294:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TRIP_R_GPIO_Port, &GPIO_InitStruct);
 800129a:	f107 031c 	add.w	r3, r7, #28
 800129e:	4619      	mov	r1, r3
 80012a0:	4831      	ldr	r0, [pc, #196]	@ (8001368 <MX_GPIO_Init+0x244>)
 80012a2:	f002 fc07 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIP_L_Pin;
 80012a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012ac:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TRIP_L_GPIO_Port, &GPIO_InitStruct);
 80012b6:	f107 031c 	add.w	r3, r7, #28
 80012ba:	4619      	mov	r1, r3
 80012bc:	482b      	ldr	r0, [pc, #172]	@ (800136c <MX_GPIO_Init+0x248>)
 80012be:	f002 fbf9 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c8:	2300      	movs	r3, #0
 80012ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d0:	f107 031c 	add.w	r3, r7, #28
 80012d4:	4619      	mov	r1, r3
 80012d6:	4825      	ldr	r0, [pc, #148]	@ (800136c <MX_GPIO_Init+0x248>)
 80012d8:	f002 fbec 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80012dc:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80012e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	2302      	movs	r3, #2
 80012e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ea:	2303      	movs	r3, #3
 80012ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012ee:	230a      	movs	r3, #10
 80012f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f2:	f107 031c 	add.w	r3, r7, #28
 80012f6:	4619      	mov	r1, r3
 80012f8:	481c      	ldr	r0, [pc, #112]	@ (800136c <MX_GPIO_Init+0x248>)
 80012fa:	f002 fbdb 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIR_Pin;
 80012fe:	2308      	movs	r3, #8
 8001300:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001302:	2300      	movs	r3, #0
 8001304:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 800130a:	f107 031c 	add.w	r3, r7, #28
 800130e:	4619      	mov	r1, r3
 8001310:	4814      	ldr	r0, [pc, #80]	@ (8001364 <MX_GPIO_Init+0x240>)
 8001312:	f002 fbcf 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LED_LEFT_Pin|LED_RIGHT_Pin;
 8001316:	2330      	movs	r3, #48	@ 0x30
 8001318:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131a:	2301      	movs	r3, #1
 800131c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001326:	f107 031c 	add.w	r3, r7, #28
 800132a:	4619      	mov	r1, r3
 800132c:	480d      	ldr	r0, [pc, #52]	@ (8001364 <MX_GPIO_Init+0x240>)
 800132e:	f002 fbc1 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_ERR_Pin;
 8001332:	2340      	movs	r3, #64	@ 0x40
 8001334:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001336:	2301      	movs	r3, #1
 8001338:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800133a:	2302      	movs	r3, #2
 800133c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133e:	2300      	movs	r3, #0
 8001340:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_ERR_GPIO_Port, &GPIO_InitStruct);
 8001342:	f107 031c 	add.w	r3, r7, #28
 8001346:	4619      	mov	r1, r3
 8001348:	4806      	ldr	r0, [pc, #24]	@ (8001364 <MX_GPIO_Init+0x240>)
 800134a:	f002 fbb3 	bl	8003ab4 <HAL_GPIO_Init>

}
 800134e:	bf00      	nop
 8001350:	3730      	adds	r7, #48	@ 0x30
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40023800 	.word	0x40023800
 800135c:	40020400 	.word	0x40020400
 8001360:	40021000 	.word	0x40021000
 8001364:	40020c00 	.word	0x40020c00
 8001368:	40020800 	.word	0x40020800
 800136c:	40020000 	.word	0x40020000

08001370 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001374:	4b1b      	ldr	r3, [pc, #108]	@ (80013e4 <MX_I2C1_Init+0x74>)
 8001376:	4a1c      	ldr	r2, [pc, #112]	@ (80013e8 <MX_I2C1_Init+0x78>)
 8001378:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800137a:	4b1a      	ldr	r3, [pc, #104]	@ (80013e4 <MX_I2C1_Init+0x74>)
 800137c:	4a1b      	ldr	r2, [pc, #108]	@ (80013ec <MX_I2C1_Init+0x7c>)
 800137e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001380:	4b18      	ldr	r3, [pc, #96]	@ (80013e4 <MX_I2C1_Init+0x74>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001386:	4b17      	ldr	r3, [pc, #92]	@ (80013e4 <MX_I2C1_Init+0x74>)
 8001388:	2201      	movs	r2, #1
 800138a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800138c:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <MX_I2C1_Init+0x74>)
 800138e:	2200      	movs	r2, #0
 8001390:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001392:	4b14      	ldr	r3, [pc, #80]	@ (80013e4 <MX_I2C1_Init+0x74>)
 8001394:	2200      	movs	r2, #0
 8001396:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001398:	4b12      	ldr	r3, [pc, #72]	@ (80013e4 <MX_I2C1_Init+0x74>)
 800139a:	2200      	movs	r2, #0
 800139c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800139e:	4b11      	ldr	r3, [pc, #68]	@ (80013e4 <MX_I2C1_Init+0x74>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013a4:	4b0f      	ldr	r3, [pc, #60]	@ (80013e4 <MX_I2C1_Init+0x74>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013aa:	480e      	ldr	r0, [pc, #56]	@ (80013e4 <MX_I2C1_Init+0x74>)
 80013ac:	f002 fd48 	bl	8003e40 <HAL_I2C_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80013b6:	f000 f943 	bl	8001640 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013ba:	2100      	movs	r1, #0
 80013bc:	4809      	ldr	r0, [pc, #36]	@ (80013e4 <MX_I2C1_Init+0x74>)
 80013be:	f002 fdcf 	bl	8003f60 <HAL_I2CEx_ConfigAnalogFilter>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80013c8:	f000 f93a 	bl	8001640 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013cc:	2100      	movs	r1, #0
 80013ce:	4805      	ldr	r0, [pc, #20]	@ (80013e4 <MX_I2C1_Init+0x74>)
 80013d0:	f002 fe11 	bl	8003ff6 <HAL_I2CEx_ConfigDigitalFilter>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013da:	f000 f931 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200002d0 	.word	0x200002d0
 80013e8:	40005400 	.word	0x40005400
 80013ec:	20404768 	.word	0x20404768

080013f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b0ae      	sub	sp, #184	@ 0xb8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	2290      	movs	r2, #144	@ 0x90
 800140e:	2100      	movs	r1, #0
 8001410:	4618      	mov	r0, r3
 8001412:	f005 fb2f 	bl	8006a74 <memset>
  if(i2cHandle->Instance==I2C1)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a21      	ldr	r2, [pc, #132]	@ (80014a0 <HAL_I2C_MspInit+0xb0>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d13b      	bne.n	8001498 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001420:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001424:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001426:	2300      	movs	r3, #0
 8001428:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	4618      	mov	r0, r3
 8001430:	f003 fade 	bl	80049f0 <HAL_RCCEx_PeriphCLKConfig>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800143a:	f000 f901 	bl	8001640 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800143e:	4b19      	ldr	r3, [pc, #100]	@ (80014a4 <HAL_I2C_MspInit+0xb4>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	4a18      	ldr	r2, [pc, #96]	@ (80014a4 <HAL_I2C_MspInit+0xb4>)
 8001444:	f043 0302 	orr.w	r3, r3, #2
 8001448:	6313      	str	r3, [r2, #48]	@ 0x30
 800144a:	4b16      	ldr	r3, [pc, #88]	@ (80014a4 <HAL_I2C_MspInit+0xb4>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001456:	23c0      	movs	r3, #192	@ 0xc0
 8001458:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800145c:	2312      	movs	r3, #18
 800145e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001468:	2303      	movs	r3, #3
 800146a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800146e:	2304      	movs	r3, #4
 8001470:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001474:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001478:	4619      	mov	r1, r3
 800147a:	480b      	ldr	r0, [pc, #44]	@ (80014a8 <HAL_I2C_MspInit+0xb8>)
 800147c:	f002 fb1a 	bl	8003ab4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001480:	4b08      	ldr	r3, [pc, #32]	@ (80014a4 <HAL_I2C_MspInit+0xb4>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001484:	4a07      	ldr	r2, [pc, #28]	@ (80014a4 <HAL_I2C_MspInit+0xb4>)
 8001486:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800148a:	6413      	str	r3, [r2, #64]	@ 0x40
 800148c:	4b05      	ldr	r3, [pc, #20]	@ (80014a4 <HAL_I2C_MspInit+0xb4>)
 800148e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001490:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001498:	bf00      	nop
 800149a:	37b8      	adds	r7, #184	@ 0xb8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40005400 	.word	0x40005400
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40020400 	.word	0x40020400

080014ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014b0:	f000 fdd9 	bl	8002066 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014b4:	f000 f856 	bl	8001564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014b8:	f7ff fe34 	bl	8001124 <MX_GPIO_Init>
  MX_DMA_Init();
 80014bc:	f7ff fe0c 	bl	80010d8 <MX_DMA_Init>
  MX_ADC1_Init();
 80014c0:	f7ff fab4 	bl	8000a2c <MX_ADC1_Init>
  MX_CAN1_Init();
 80014c4:	f7ff fd0c 	bl	8000ee0 <MX_CAN1_Init>
  MX_USB_OTG_FS_USB_Init();
 80014c8:	f000 fd9c 	bl	8002004 <MX_USB_OTG_FS_USB_Init>
  MX_ADC2_Init();
 80014cc:	f7ff fb1c 	bl	8000b08 <MX_ADC2_Init>
  MX_ADC3_Init();
 80014d0:	f7ff fb96 	bl	8000c00 <MX_ADC3_Init>
  MX_DAC_Init();
 80014d4:	f7ff fd8e 	bl	8000ff4 <MX_DAC_Init>
  MX_I2C1_Init();
 80014d8:	f7ff ff4a 	bl	8001370 <MX_I2C1_Init>
  MX_TIM1_Init();
 80014dc:	f000 f980 	bl	80017e0 <MX_TIM1_Init>
  MX_TIM8_Init();
 80014e0:	f000 fb3c 	bl	8001b5c <MX_TIM8_Init>
  MX_TIM2_Init();
 80014e4:	f000 fa46 	bl	8001974 <MX_TIM2_Init>
  MX_TIM4_Init();
 80014e8:	f000 faa2 	bl	8001a30 <MX_TIM4_Init>
  MX_TIM6_Init();
 80014ec:	f000 fb00 	bl	8001af0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim1);
 80014f0:	4811      	ldr	r0, [pc, #68]	@ (8001538 <main+0x8c>)
 80014f2:	f003 fefd 	bl	80052f0 <HAL_TIM_Base_Start_IT>
//	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_BREAK);	  /* Enable the TIM Break interrupt */

  HAL_TIM_Base_Start_IT(&htim6);
 80014f6:	4811      	ldr	r0, [pc, #68]	@ (800153c <main+0x90>)
 80014f8:	f003 fefa 	bl	80052f0 <HAL_TIM_Base_Start_IT>

  HAL_ADC_Start_DMA(&hadc2, (uint32_t *) ADC_LEFT_raw,4);
 80014fc:	2204      	movs	r2, #4
 80014fe:	4910      	ldr	r1, [pc, #64]	@ (8001540 <main+0x94>)
 8001500:	4810      	ldr	r0, [pc, #64]	@ (8001544 <main+0x98>)
 8001502:	f000 fe51 	bl	80021a8 <HAL_ADC_Start_DMA>

  inv_init(&invLeft, &led_left, ENABLE_L_GPIO_Port, ENABLE_L_Pin);
 8001506:	2380      	movs	r3, #128	@ 0x80
 8001508:	4a0f      	ldr	r2, [pc, #60]	@ (8001548 <main+0x9c>)
 800150a:	4910      	ldr	r1, [pc, #64]	@ (800154c <main+0xa0>)
 800150c:	4810      	ldr	r0, [pc, #64]	@ (8001550 <main+0xa4>)
 800150e:	f7ff f82f 	bl	8000570 <inv_init>
  inv_init(&invRight, &led_right, ENABLE_R_GPIO_Port, ENABLE_R_Pin);
 8001512:	2304      	movs	r3, #4
 8001514:	4a0f      	ldr	r2, [pc, #60]	@ (8001554 <main+0xa8>)
 8001516:	4910      	ldr	r1, [pc, #64]	@ (8001558 <main+0xac>)
 8001518:	4810      	ldr	r0, [pc, #64]	@ (800155c <main+0xb0>)
 800151a:	f7ff f829 	bl	8000570 <inv_init>


  enable_PWM(&htim1, &duties_LEFT);
 800151e:	4910      	ldr	r1, [pc, #64]	@ (8001560 <main+0xb4>)
 8001520:	4805      	ldr	r0, [pc, #20]	@ (8001538 <main+0x8c>)
 8001522:	f7ff f9ab 	bl	800087c <enable_PWM>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

      // Run FSM for left inverter
	  inv_FSM(&invLeft);
 8001526:	480a      	ldr	r0, [pc, #40]	@ (8001550 <main+0xa4>)
 8001528:	f7ff f83c 	bl	80005a4 <inv_FSM>

      // Run FSM for right inverter
	  inv_FSM(&invRight);
 800152c:	480b      	ldr	r0, [pc, #44]	@ (800155c <main+0xb0>)
 800152e:	f7ff f839 	bl	80005a4 <inv_FSM>
	  inv_FSM(&invLeft);
 8001532:	bf00      	nop
 8001534:	e7f7      	b.n	8001526 <main+0x7a>
 8001536:	bf00      	nop
 8001538:	2000033c 	.word	0x2000033c
 800153c:	20000420 	.word	0x20000420
 8001540:	200000bc 	.word	0x200000bc
 8001544:	20000144 	.word	0x20000144
 8001548:	40021000 	.word	0x40021000
 800154c:	20000014 	.word	0x20000014
 8001550:	20000324 	.word	0x20000324
 8001554:	40020400 	.word	0x40020400
 8001558:	2000001c 	.word	0x2000001c
 800155c:	20000330 	.word	0x20000330
 8001560:	20000000 	.word	0x20000000

08001564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b094      	sub	sp, #80	@ 0x50
 8001568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800156a:	f107 031c 	add.w	r3, r7, #28
 800156e:	2234      	movs	r2, #52	@ 0x34
 8001570:	2100      	movs	r1, #0
 8001572:	4618      	mov	r0, r3
 8001574:	f005 fa7e 	bl	8006a74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001578:	f107 0308 	add.w	r3, r7, #8
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001588:	4b2b      	ldr	r3, [pc, #172]	@ (8001638 <SystemClock_Config+0xd4>)
 800158a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158c:	4a2a      	ldr	r2, [pc, #168]	@ (8001638 <SystemClock_Config+0xd4>)
 800158e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001592:	6413      	str	r3, [r2, #64]	@ 0x40
 8001594:	4b28      	ldr	r3, [pc, #160]	@ (8001638 <SystemClock_Config+0xd4>)
 8001596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001598:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015a0:	4b26      	ldr	r3, [pc, #152]	@ (800163c <SystemClock_Config+0xd8>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a25      	ldr	r2, [pc, #148]	@ (800163c <SystemClock_Config+0xd8>)
 80015a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	4b23      	ldr	r3, [pc, #140]	@ (800163c <SystemClock_Config+0xd8>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015b4:	603b      	str	r3, [r7, #0]
 80015b6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015b8:	2301      	movs	r3, #1
 80015ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c2:	2302      	movs	r3, #2
 80015c4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80015ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 10;
 80015cc:	230a      	movs	r3, #10
 80015ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80015d0:	23d8      	movs	r3, #216	@ 0xd8
 80015d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015d4:	2302      	movs	r3, #2
 80015d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80015d8:	2309      	movs	r3, #9
 80015da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015dc:	2302      	movs	r3, #2
 80015de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015e0:	f107 031c 	add.w	r3, r7, #28
 80015e4:	4618      	mov	r0, r3
 80015e6:	f002 fda3 	bl	8004130 <HAL_RCC_OscConfig>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80015f0:	f000 f826 	bl	8001640 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80015f4:	f002 fd4c 	bl	8004090 <HAL_PWREx_EnableOverDrive>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80015fe:	f000 f81f 	bl	8001640 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001602:	230f      	movs	r3, #15
 8001604:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001606:	2302      	movs	r3, #2
 8001608:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800160e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001612:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001614:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001618:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800161a:	f107 0308 	add.w	r3, r7, #8
 800161e:	2107      	movs	r1, #7
 8001620:	4618      	mov	r0, r3
 8001622:	f003 f833 	bl	800468c <HAL_RCC_ClockConfig>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800162c:	f000 f808 	bl	8001640 <Error_Handler>
  }
}
 8001630:	bf00      	nop
 8001632:	3750      	adds	r7, #80	@ 0x50
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40023800 	.word	0x40023800
 800163c:	40007000 	.word	0x40007000

08001640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001644:	b672      	cpsid	i
}
 8001646:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <Error_Handler+0x8>

0800164c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001652:	4b0f      	ldr	r3, [pc, #60]	@ (8001690 <HAL_MspInit+0x44>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001656:	4a0e      	ldr	r2, [pc, #56]	@ (8001690 <HAL_MspInit+0x44>)
 8001658:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800165c:	6413      	str	r3, [r2, #64]	@ 0x40
 800165e:	4b0c      	ldr	r3, [pc, #48]	@ (8001690 <HAL_MspInit+0x44>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001662:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166a:	4b09      	ldr	r3, [pc, #36]	@ (8001690 <HAL_MspInit+0x44>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166e:	4a08      	ldr	r2, [pc, #32]	@ (8001690 <HAL_MspInit+0x44>)
 8001670:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001674:	6453      	str	r3, [r2, #68]	@ 0x44
 8001676:	4b06      	ldr	r3, [pc, #24]	@ (8001690 <HAL_MspInit+0x44>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800167a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800167e:	603b      	str	r3, [r7, #0]
 8001680:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	40023800 	.word	0x40023800

08001694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001698:	bf00      	nop
 800169a:	e7fd      	b.n	8001698 <NMI_Handler+0x4>

0800169c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016a0:	bf00      	nop
 80016a2:	e7fd      	b.n	80016a0 <HardFault_Handler+0x4>

080016a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a8:	bf00      	nop
 80016aa:	e7fd      	b.n	80016a8 <MemManage_Handler+0x4>

080016ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b0:	bf00      	nop
 80016b2:	e7fd      	b.n	80016b0 <BusFault_Handler+0x4>

080016b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b8:	bf00      	nop
 80016ba:	e7fd      	b.n	80016b8 <UsageFault_Handler+0x4>

080016bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ea:	f000 fcf9 	bl	80020e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80016f8:	4802      	ldr	r0, [pc, #8]	@ (8001704 <CAN1_RX0_IRQHandler+0x10>)
 80016fa:	f001 fa3a 	bl	8002b72 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000294 	.word	0x20000294

08001708 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800170c:	4802      	ldr	r0, [pc, #8]	@ (8001718 <CAN1_RX1_IRQHandler+0x10>)
 800170e:	f001 fa30 	bl	8002b72 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000294 	.word	0x20000294

0800171c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001720:	480d      	ldr	r0, [pc, #52]	@ (8001758 <TIM1_UP_TIM10_IRQHandler+0x3c>)
 8001722:	f003 ff76 	bl	8005612 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  getADCelec(ADC_LEFT_raw, &encoder_LEFT, &measurements_LEFT);
 8001726:	4a0d      	ldr	r2, [pc, #52]	@ (800175c <TIM1_UP_TIM10_IRQHandler+0x40>)
 8001728:	490d      	ldr	r1, [pc, #52]	@ (8001760 <TIM1_UP_TIM10_IRQHandler+0x44>)
 800172a:	480e      	ldr	r0, [pc, #56]	@ (8001764 <TIM1_UP_TIM10_IRQHandler+0x48>)
 800172c:	f7fe ffb4 	bl	8000698 <getADCelec>

  control(valfa_L, vbeta_L, &measurements_LEFT, &duties_LEFT);
 8001730:	4b0d      	ldr	r3, [pc, #52]	@ (8001768 <TIM1_UP_TIM10_IRQHandler+0x4c>)
 8001732:	edd3 7a00 	vldr	s15, [r3]
 8001736:	4b0d      	ldr	r3, [pc, #52]	@ (800176c <TIM1_UP_TIM10_IRQHandler+0x50>)
 8001738:	ed93 7a00 	vldr	s14, [r3]
 800173c:	490c      	ldr	r1, [pc, #48]	@ (8001770 <TIM1_UP_TIM10_IRQHandler+0x54>)
 800173e:	4807      	ldr	r0, [pc, #28]	@ (800175c <TIM1_UP_TIM10_IRQHandler+0x40>)
 8001740:	eef0 0a47 	vmov.f32	s1, s14
 8001744:	eeb0 0a67 	vmov.f32	s0, s15
 8001748:	f7fe feee 	bl	8000528 <control>

  set_PWM(&htim1, &duties_LEFT);
 800174c:	4908      	ldr	r1, [pc, #32]	@ (8001770 <TIM1_UP_TIM10_IRQHandler+0x54>)
 800174e:	4802      	ldr	r0, [pc, #8]	@ (8001758 <TIM1_UP_TIM10_IRQHandler+0x3c>)
 8001750:	f7ff f8fe 	bl	8000950 <set_PWM>
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}
 8001758:	2000033c 	.word	0x2000033c
 800175c:	200000e8 	.word	0x200000e8
 8001760:	200000cc 	.word	0x200000cc
 8001764:	200000bc 	.word	0x200000bc
 8001768:	2000000c 	.word	0x2000000c
 800176c:	20000010 	.word	0x20000010
 8001770:	20000000 	.word	0x20000000

08001774 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001778:	4804      	ldr	r0, [pc, #16]	@ (800178c <TIM6_DAC_IRQHandler+0x18>)
 800177a:	f001 fd66 	bl	800324a <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 800177e:	4804      	ldr	r0, [pc, #16]	@ (8001790 <TIM6_DAC_IRQHandler+0x1c>)
 8001780:	f003 ff47 	bl	8005612 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  tasks_1ms();
 8001784:	f7ff f92e 	bl	80009e4 <tasks_1ms>
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}
 800178c:	200002bc 	.word	0x200002bc
 8001790:	20000420 	.word	0x20000420

08001794 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001798:	4802      	ldr	r0, [pc, #8]	@ (80017a4 <DMA2_Stream1_IRQHandler+0x10>)
 800179a:	f001 ff21 	bl	80035e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000234 	.word	0x20000234

080017a8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80017ac:	4802      	ldr	r0, [pc, #8]	@ (80017b8 <DMA2_Stream2_IRQHandler+0x10>)
 80017ae:	f001 ff17 	bl	80035e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	200001d4 	.word	0x200001d4

080017bc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c0:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <SystemInit+0x20>)
 80017c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017c6:	4a05      	ldr	r2, [pc, #20]	@ (80017dc <SystemInit+0x20>)
 80017c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b09a      	sub	sp, #104	@ 0x68
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017e6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001800:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
 8001810:	615a      	str	r2, [r3, #20]
 8001812:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001814:	1d3b      	adds	r3, r7, #4
 8001816:	222c      	movs	r2, #44	@ 0x2c
 8001818:	2100      	movs	r1, #0
 800181a:	4618      	mov	r0, r3
 800181c:	f005 f92a 	bl	8006a74 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001820:	4b52      	ldr	r3, [pc, #328]	@ (800196c <MX_TIM1_Init+0x18c>)
 8001822:	4a53      	ldr	r2, [pc, #332]	@ (8001970 <MX_TIM1_Init+0x190>)
 8001824:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001826:	4b51      	ldr	r3, [pc, #324]	@ (800196c <MX_TIM1_Init+0x18c>)
 8001828:	2200      	movs	r2, #0
 800182a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800182c:	4b4f      	ldr	r3, [pc, #316]	@ (800196c <MX_TIM1_Init+0x18c>)
 800182e:	2220      	movs	r2, #32
 8001830:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = (216000000*TS)/2;
 8001832:	4b4e      	ldr	r3, [pc, #312]	@ (800196c <MX_TIM1_Init+0x18c>)
 8001834:	f44f 6207 	mov.w	r2, #2160	@ 0x870
 8001838:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800183a:	4b4c      	ldr	r3, [pc, #304]	@ (800196c <MX_TIM1_Init+0x18c>)
 800183c:	2200      	movs	r2, #0
 800183e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8001840:	4b4a      	ldr	r3, [pc, #296]	@ (800196c <MX_TIM1_Init+0x18c>)
 8001842:	2201      	movs	r2, #1
 8001844:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001846:	4b49      	ldr	r3, [pc, #292]	@ (800196c <MX_TIM1_Init+0x18c>)
 8001848:	2280      	movs	r2, #128	@ 0x80
 800184a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800184c:	4847      	ldr	r0, [pc, #284]	@ (800196c <MX_TIM1_Init+0x18c>)
 800184e:	f003 fcf7 	bl	8005240 <HAL_TIM_Base_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001858:	f7ff fef2 	bl	8001640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800185c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001860:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001862:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001866:	4619      	mov	r1, r3
 8001868:	4840      	ldr	r0, [pc, #256]	@ (800196c <MX_TIM1_Init+0x18c>)
 800186a:	f004 fa1b 	bl	8005ca4 <HAL_TIM_ConfigClockSource>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001874:	f7ff fee4 	bl	8001640 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001878:	483c      	ldr	r0, [pc, #240]	@ (800196c <MX_TIM1_Init+0x18c>)
 800187a:	f003 fe12 	bl	80054a2 <HAL_TIM_PWM_Init>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001884:	f7ff fedc 	bl	8001640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001888:	2320      	movs	r3, #32
 800188a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800188c:	2300      	movs	r3, #0
 800188e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001890:	2300      	movs	r3, #0
 8001892:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001894:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001898:	4619      	mov	r1, r3
 800189a:	4834      	ldr	r0, [pc, #208]	@ (800196c <MX_TIM1_Init+0x18c>)
 800189c:	f004 ffc0 	bl	8006820 <HAL_TIMEx_MasterConfigSynchronization>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80018a6:	f7ff fecb 	bl	8001640 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018aa:	2360      	movs	r3, #96	@ 0x60
 80018ac:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018b2:	2300      	movs	r3, #0
 80018b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80018b6:	2308      	movs	r3, #8
 80018b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018be:	2300      	movs	r3, #0
 80018c0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 80018c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018c8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80018cc:	2200      	movs	r2, #0
 80018ce:	4619      	mov	r1, r3
 80018d0:	4826      	ldr	r0, [pc, #152]	@ (800196c <MX_TIM1_Init+0x18c>)
 80018d2:	f004 f8d3 	bl	8005a7c <HAL_TIM_PWM_ConfigChannel>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80018dc:	f7ff feb0 	bl	8001640 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018e0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80018e4:	2204      	movs	r2, #4
 80018e6:	4619      	mov	r1, r3
 80018e8:	4820      	ldr	r0, [pc, #128]	@ (800196c <MX_TIM1_Init+0x18c>)
 80018ea:	f004 f8c7 	bl	8005a7c <HAL_TIM_PWM_ConfigChannel>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80018f4:	f7ff fea4 	bl	8001640 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018f8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80018fc:	2208      	movs	r2, #8
 80018fe:	4619      	mov	r1, r3
 8001900:	481a      	ldr	r0, [pc, #104]	@ (800196c <MX_TIM1_Init+0x18c>)
 8001902:	f004 f8bb 	bl	8005a7c <HAL_TIM_PWM_ConfigChannel>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 800190c:	f7ff fe98 	bl	8001640 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001910:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001914:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001916:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800191a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 800191c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001920:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = DT*216000000;
 8001922:	2320      	movs	r3, #32
 8001924:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800192a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800192e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8001934:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001938:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800193a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800193e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001944:	2300      	movs	r3, #0
 8001946:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	4619      	mov	r1, r3
 800194c:	4807      	ldr	r0, [pc, #28]	@ (800196c <MX_TIM1_Init+0x18c>)
 800194e:	f004 fff5 	bl	800693c <HAL_TIMEx_ConfigBreakDeadTime>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM1_Init+0x17c>
  {
    Error_Handler();
 8001958:	f7ff fe72 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800195c:	4803      	ldr	r0, [pc, #12]	@ (800196c <MX_TIM1_Init+0x18c>)
 800195e:	f000 fab5 	bl	8001ecc <HAL_TIM_MspPostInit>

}
 8001962:	bf00      	nop
 8001964:	3768      	adds	r7, #104	@ 0x68
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	2000033c 	.word	0x2000033c
 8001970:	40010000 	.word	0x40010000

08001974 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b088      	sub	sp, #32
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	605a      	str	r2, [r3, #4]
 8001984:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001986:	1d3b      	adds	r3, r7, #4
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001992:	4b26      	ldr	r3, [pc, #152]	@ (8001a2c <MX_TIM2_Init+0xb8>)
 8001994:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001998:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800199a:	4b24      	ldr	r3, [pc, #144]	@ (8001a2c <MX_TIM2_Init+0xb8>)
 800199c:	2200      	movs	r2, #0
 800199e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a0:	4b22      	ldr	r3, [pc, #136]	@ (8001a2c <MX_TIM2_Init+0xb8>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80019a6:	4b21      	ldr	r3, [pc, #132]	@ (8001a2c <MX_TIM2_Init+0xb8>)
 80019a8:	f04f 32ff 	mov.w	r2, #4294967295
 80019ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ae:	4b1f      	ldr	r3, [pc, #124]	@ (8001a2c <MX_TIM2_Init+0xb8>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a2c <MX_TIM2_Init+0xb8>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80019ba:	481c      	ldr	r0, [pc, #112]	@ (8001a2c <MX_TIM2_Init+0xb8>)
 80019bc:	f003 fdd2 	bl	8005564 <HAL_TIM_IC_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80019c6:	f7ff fe3b 	bl	8001640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019d2:	f107 0314 	add.w	r3, r7, #20
 80019d6:	4619      	mov	r1, r3
 80019d8:	4814      	ldr	r0, [pc, #80]	@ (8001a2c <MX_TIM2_Init+0xb8>)
 80019da:	f004 ff21 	bl	8006820 <HAL_TIMEx_MasterConfigSynchronization>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80019e4:	f7ff fe2c 	bl	8001640 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80019e8:	2300      	movs	r3, #0
 80019ea:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80019ec:	2301      	movs	r3, #1
 80019ee:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80019f8:	1d3b      	adds	r3, r7, #4
 80019fa:	2200      	movs	r2, #0
 80019fc:	4619      	mov	r1, r3
 80019fe:	480b      	ldr	r0, [pc, #44]	@ (8001a2c <MX_TIM2_Init+0xb8>)
 8001a00:	f003 ffa0 	bl	8005944 <HAL_TIM_IC_ConfigChannel>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001a0a:	f7ff fe19 	bl	8001640 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001a0e:	1d3b      	adds	r3, r7, #4
 8001a10:	2208      	movs	r2, #8
 8001a12:	4619      	mov	r1, r3
 8001a14:	4805      	ldr	r0, [pc, #20]	@ (8001a2c <MX_TIM2_Init+0xb8>)
 8001a16:	f003 ff95 	bl	8005944 <HAL_TIM_IC_ConfigChannel>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001a20:	f7ff fe0e 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a24:	bf00      	nop
 8001a26:	3720      	adds	r7, #32
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000388 	.word	0x20000388

08001a30 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b088      	sub	sp, #32
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a42:	1d3b      	adds	r3, r7, #4
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a4e:	4b26      	ldr	r3, [pc, #152]	@ (8001ae8 <MX_TIM4_Init+0xb8>)
 8001a50:	4a26      	ldr	r2, [pc, #152]	@ (8001aec <MX_TIM4_Init+0xbc>)
 8001a52:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001a54:	4b24      	ldr	r3, [pc, #144]	@ (8001ae8 <MX_TIM4_Init+0xb8>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a5a:	4b23      	ldr	r3, [pc, #140]	@ (8001ae8 <MX_TIM4_Init+0xb8>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001a60:	4b21      	ldr	r3, [pc, #132]	@ (8001ae8 <MX_TIM4_Init+0xb8>)
 8001a62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a66:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a68:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae8 <MX_TIM4_Init+0xb8>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae8 <MX_TIM4_Init+0xb8>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001a74:	481c      	ldr	r0, [pc, #112]	@ (8001ae8 <MX_TIM4_Init+0xb8>)
 8001a76:	f003 fd75 	bl	8005564 <HAL_TIM_IC_Init>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001a80:	f7ff fdde 	bl	8001640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	4619      	mov	r1, r3
 8001a92:	4815      	ldr	r0, [pc, #84]	@ (8001ae8 <MX_TIM4_Init+0xb8>)
 8001a94:	f004 fec4 	bl	8006820 <HAL_TIMEx_MasterConfigSynchronization>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8001a9e:	f7ff fdcf 	bl	8001640 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001ab2:	1d3b      	adds	r3, r7, #4
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	480b      	ldr	r0, [pc, #44]	@ (8001ae8 <MX_TIM4_Init+0xb8>)
 8001aba:	f003 ff43 	bl	8005944 <HAL_TIM_IC_ConfigChannel>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001ac4:	f7ff fdbc 	bl	8001640 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001ac8:	1d3b      	adds	r3, r7, #4
 8001aca:	2208      	movs	r2, #8
 8001acc:	4619      	mov	r1, r3
 8001ace:	4806      	ldr	r0, [pc, #24]	@ (8001ae8 <MX_TIM4_Init+0xb8>)
 8001ad0:	f003 ff38 	bl	8005944 <HAL_TIM_IC_ConfigChannel>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8001ada:	f7ff fdb1 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ade:	bf00      	nop
 8001ae0:	3720      	adds	r7, #32
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	200003d4 	.word	0x200003d4
 8001aec:	40000800 	.word	0x40000800

08001af0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b00:	4b14      	ldr	r3, [pc, #80]	@ (8001b54 <MX_TIM6_Init+0x64>)
 8001b02:	4a15      	ldr	r2, [pc, #84]	@ (8001b58 <MX_TIM6_Init+0x68>)
 8001b04:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1;
 8001b06:	4b13      	ldr	r3, [pc, #76]	@ (8001b54 <MX_TIM6_Init+0x64>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b0c:	4b11      	ldr	r3, [pc, #68]	@ (8001b54 <MX_TIM6_Init+0x64>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 53999;
 8001b12:	4b10      	ldr	r3, [pc, #64]	@ (8001b54 <MX_TIM6_Init+0x64>)
 8001b14:	f24d 22ef 	movw	r2, #53999	@ 0xd2ef
 8001b18:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b54 <MX_TIM6_Init+0x64>)
 8001b1c:	2280      	movs	r2, #128	@ 0x80
 8001b1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b20:	480c      	ldr	r0, [pc, #48]	@ (8001b54 <MX_TIM6_Init+0x64>)
 8001b22:	f003 fb8d 	bl	8005240 <HAL_TIM_Base_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001b2c:	f7ff fd88 	bl	8001640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b30:	2320      	movs	r3, #32
 8001b32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b34:	2300      	movs	r3, #0
 8001b36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b38:	1d3b      	adds	r3, r7, #4
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4805      	ldr	r0, [pc, #20]	@ (8001b54 <MX_TIM6_Init+0x64>)
 8001b3e:	f004 fe6f 	bl	8006820 <HAL_TIMEx_MasterConfigSynchronization>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001b48:	f7ff fd7a 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b4c:	bf00      	nop
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20000420 	.word	0x20000420
 8001b58:	40001000 	.word	0x40001000

08001b5c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b09a      	sub	sp, #104	@ 0x68
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b62:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	605a      	str	r2, [r3, #4]
 8001b6c:	609a      	str	r2, [r3, #8]
 8001b6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b70:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b7c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
 8001b8c:	615a      	str	r2, [r3, #20]
 8001b8e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b90:	1d3b      	adds	r3, r7, #4
 8001b92:	222c      	movs	r2, #44	@ 0x2c
 8001b94:	2100      	movs	r1, #0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f004 ff6c 	bl	8006a74 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001b9c:	4b54      	ldr	r3, [pc, #336]	@ (8001cf0 <MX_TIM8_Init+0x194>)
 8001b9e:	4a55      	ldr	r2, [pc, #340]	@ (8001cf4 <MX_TIM8_Init+0x198>)
 8001ba0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001ba2:	4b53      	ldr	r3, [pc, #332]	@ (8001cf0 <MX_TIM8_Init+0x194>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba8:	4b51      	ldr	r3, [pc, #324]	@ (8001cf0 <MX_TIM8_Init+0x194>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001bae:	4b50      	ldr	r3, [pc, #320]	@ (8001cf0 <MX_TIM8_Init+0x194>)
 8001bb0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bb4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb6:	4b4e      	ldr	r3, [pc, #312]	@ (8001cf0 <MX_TIM8_Init+0x194>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001bbc:	4b4c      	ldr	r3, [pc, #304]	@ (8001cf0 <MX_TIM8_Init+0x194>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc2:	4b4b      	ldr	r3, [pc, #300]	@ (8001cf0 <MX_TIM8_Init+0x194>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001bc8:	4849      	ldr	r0, [pc, #292]	@ (8001cf0 <MX_TIM8_Init+0x194>)
 8001bca:	f003 fb39 	bl	8005240 <HAL_TIM_Base_Init>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001bd4:	f7ff fd34 	bl	8001640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bdc:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001bde:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001be2:	4619      	mov	r1, r3
 8001be4:	4842      	ldr	r0, [pc, #264]	@ (8001cf0 <MX_TIM8_Init+0x194>)
 8001be6:	f004 f85d 	bl	8005ca4 <HAL_TIM_ConfigClockSource>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001bf0:	f7ff fd26 	bl	8001640 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001bf4:	483e      	ldr	r0, [pc, #248]	@ (8001cf0 <MX_TIM8_Init+0x194>)
 8001bf6:	f003 fc54 	bl	80054a2 <HAL_TIM_PWM_Init>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001c00:	f7ff fd1e 	bl	8001640 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8001c04:	483a      	ldr	r0, [pc, #232]	@ (8001cf0 <MX_TIM8_Init+0x194>)
 8001c06:	f003 fbeb 	bl	80053e0 <HAL_TIM_OC_Init>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_TIM8_Init+0xb8>
  {
    Error_Handler();
 8001c10:	f7ff fd16 	bl	8001640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c14:	2300      	movs	r3, #0
 8001c16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001c20:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001c24:	4619      	mov	r1, r3
 8001c26:	4832      	ldr	r0, [pc, #200]	@ (8001cf0 <MX_TIM8_Init+0x194>)
 8001c28:	f004 fdfa 	bl	8006820 <HAL_TIMEx_MasterConfigSynchronization>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_TIM8_Init+0xda>
  {
    Error_Handler();
 8001c32:	f7ff fd05 	bl	8001640 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c36:	2360      	movs	r3, #96	@ 0x60
 8001c38:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c42:	2300      	movs	r3, #0
 8001c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c46:	2300      	movs	r3, #0
 8001c48:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c52:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c56:	2200      	movs	r2, #0
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4825      	ldr	r0, [pc, #148]	@ (8001cf0 <MX_TIM8_Init+0x194>)
 8001c5c:	f003 ff0e 	bl	8005a7c <HAL_TIM_PWM_ConfigChannel>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8001c66:	f7ff fceb 	bl	8001640 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c6a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c6e:	2204      	movs	r2, #4
 8001c70:	4619      	mov	r1, r3
 8001c72:	481f      	ldr	r0, [pc, #124]	@ (8001cf0 <MX_TIM8_Init+0x194>)
 8001c74:	f003 ff02 	bl	8005a7c <HAL_TIM_PWM_ConfigChannel>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 8001c7e:	f7ff fcdf 	bl	8001640 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001c82:	2300      	movs	r3, #0
 8001c84:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c86:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c8a:	2208      	movs	r2, #8
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4818      	ldr	r0, [pc, #96]	@ (8001cf0 <MX_TIM8_Init+0x194>)
 8001c90:	f003 fdde 	bl	8005850 <HAL_TIM_OC_ConfigChannel>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001c9a:	f7ff fcd1 	bl	8001640 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cb2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cb6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001cc0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001cc4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001cce:	1d3b      	adds	r3, r7, #4
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4807      	ldr	r0, [pc, #28]	@ (8001cf0 <MX_TIM8_Init+0x194>)
 8001cd4:	f004 fe32 	bl	800693c <HAL_TIMEx_ConfigBreakDeadTime>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_TIM8_Init+0x186>
  {
    Error_Handler();
 8001cde:	f7ff fcaf 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001ce2:	4803      	ldr	r0, [pc, #12]	@ (8001cf0 <MX_TIM8_Init+0x194>)
 8001ce4:	f000 f8f2 	bl	8001ecc <HAL_TIM_MspPostInit>

}
 8001ce8:	bf00      	nop
 8001cea:	3768      	adds	r7, #104	@ 0x68
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	2000046c 	.word	0x2000046c
 8001cf4:	40010400 	.word	0x40010400

08001cf8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a23      	ldr	r2, [pc, #140]	@ (8001d94 <HAL_TIM_Base_MspInit+0x9c>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d114      	bne.n	8001d34 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d0a:	4b23      	ldr	r3, [pc, #140]	@ (8001d98 <HAL_TIM_Base_MspInit+0xa0>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0e:	4a22      	ldr	r2, [pc, #136]	@ (8001d98 <HAL_TIM_Base_MspInit+0xa0>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d16:	4b20      	ldr	r3, [pc, #128]	@ (8001d98 <HAL_TIM_Base_MspInit+0xa0>)
 8001d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001d22:	2200      	movs	r2, #0
 8001d24:	2100      	movs	r1, #0
 8001d26:	2019      	movs	r0, #25
 8001d28:	f001 fa37 	bl	800319a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001d2c:	2019      	movs	r0, #25
 8001d2e:	f001 fa50 	bl	80031d2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001d32:	e02a      	b.n	8001d8a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM6)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a18      	ldr	r2, [pc, #96]	@ (8001d9c <HAL_TIM_Base_MspInit+0xa4>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d114      	bne.n	8001d68 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001d3e:	4b16      	ldr	r3, [pc, #88]	@ (8001d98 <HAL_TIM_Base_MspInit+0xa0>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d42:	4a15      	ldr	r2, [pc, #84]	@ (8001d98 <HAL_TIM_Base_MspInit+0xa0>)
 8001d44:	f043 0310 	orr.w	r3, r3, #16
 8001d48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d4a:	4b13      	ldr	r3, [pc, #76]	@ (8001d98 <HAL_TIM_Base_MspInit+0xa0>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4e:	f003 0310 	and.w	r3, r3, #16
 8001d52:	613b      	str	r3, [r7, #16]
 8001d54:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001d56:	2200      	movs	r2, #0
 8001d58:	2100      	movs	r1, #0
 8001d5a:	2036      	movs	r0, #54	@ 0x36
 8001d5c:	f001 fa1d 	bl	800319a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d60:	2036      	movs	r0, #54	@ 0x36
 8001d62:	f001 fa36 	bl	80031d2 <HAL_NVIC_EnableIRQ>
}
 8001d66:	e010      	b.n	8001d8a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM8)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a0c      	ldr	r2, [pc, #48]	@ (8001da0 <HAL_TIM_Base_MspInit+0xa8>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d10b      	bne.n	8001d8a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001d72:	4b09      	ldr	r3, [pc, #36]	@ (8001d98 <HAL_TIM_Base_MspInit+0xa0>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d76:	4a08      	ldr	r2, [pc, #32]	@ (8001d98 <HAL_TIM_Base_MspInit+0xa0>)
 8001d78:	f043 0302 	orr.w	r3, r3, #2
 8001d7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d7e:	4b06      	ldr	r3, [pc, #24]	@ (8001d98 <HAL_TIM_Base_MspInit+0xa0>)
 8001d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
}
 8001d8a:	bf00      	nop
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40010000 	.word	0x40010000
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40001000 	.word	0x40001000
 8001da0:	40010400 	.word	0x40010400

08001da4 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08c      	sub	sp, #48	@ 0x30
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dac:	f107 031c 	add.w	r3, r7, #28
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
 8001dba:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dc4:	d146      	bne.n	8001e54 <HAL_TIM_IC_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dc6:	4b3c      	ldr	r3, [pc, #240]	@ (8001eb8 <HAL_TIM_IC_MspInit+0x114>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dca:	4a3b      	ldr	r2, [pc, #236]	@ (8001eb8 <HAL_TIM_IC_MspInit+0x114>)
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dd2:	4b39      	ldr	r3, [pc, #228]	@ (8001eb8 <HAL_TIM_IC_MspInit+0x114>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	61bb      	str	r3, [r7, #24]
 8001ddc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dde:	4b36      	ldr	r3, [pc, #216]	@ (8001eb8 <HAL_TIM_IC_MspInit+0x114>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de2:	4a35      	ldr	r2, [pc, #212]	@ (8001eb8 <HAL_TIM_IC_MspInit+0x114>)
 8001de4:	f043 0302 	orr.w	r3, r3, #2
 8001de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dea:	4b33      	ldr	r3, [pc, #204]	@ (8001eb8 <HAL_TIM_IC_MspInit+0x114>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	617b      	str	r3, [r7, #20]
 8001df4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df6:	4b30      	ldr	r3, [pc, #192]	@ (8001eb8 <HAL_TIM_IC_MspInit+0x114>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfa:	4a2f      	ldr	r2, [pc, #188]	@ (8001eb8 <HAL_TIM_IC_MspInit+0x114>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e02:	4b2d      	ldr	r3, [pc, #180]	@ (8001eb8 <HAL_TIM_IC_MspInit+0x114>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	613b      	str	r3, [r7, #16]
 8001e0c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = B_R_Pin;
 8001e0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e14:	2302      	movs	r3, #2
 8001e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e20:	2301      	movs	r3, #1
 8001e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(B_R_GPIO_Port, &GPIO_InitStruct);
 8001e24:	f107 031c 	add.w	r3, r7, #28
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4824      	ldr	r0, [pc, #144]	@ (8001ebc <HAL_TIM_IC_MspInit+0x118>)
 8001e2c:	f001 fe42 	bl	8003ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A_R_Pin;
 8001e30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e36:	2302      	movs	r3, #2
 8001e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e42:	2301      	movs	r3, #1
 8001e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(A_R_GPIO_Port, &GPIO_InitStruct);
 8001e46:	f107 031c 	add.w	r3, r7, #28
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	481c      	ldr	r0, [pc, #112]	@ (8001ec0 <HAL_TIM_IC_MspInit+0x11c>)
 8001e4e:	f001 fe31 	bl	8003ab4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001e52:	e02d      	b.n	8001eb0 <HAL_TIM_IC_MspInit+0x10c>
  else if(tim_icHandle->Instance==TIM4)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a1a      	ldr	r2, [pc, #104]	@ (8001ec4 <HAL_TIM_IC_MspInit+0x120>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d128      	bne.n	8001eb0 <HAL_TIM_IC_MspInit+0x10c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e5e:	4b16      	ldr	r3, [pc, #88]	@ (8001eb8 <HAL_TIM_IC_MspInit+0x114>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e62:	4a15      	ldr	r2, [pc, #84]	@ (8001eb8 <HAL_TIM_IC_MspInit+0x114>)
 8001e64:	f043 0304 	orr.w	r3, r3, #4
 8001e68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e6a:	4b13      	ldr	r3, [pc, #76]	@ (8001eb8 <HAL_TIM_IC_MspInit+0x114>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6e:	f003 0304 	and.w	r3, r3, #4
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e76:	4b10      	ldr	r3, [pc, #64]	@ (8001eb8 <HAL_TIM_IC_MspInit+0x114>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7a:	4a0f      	ldr	r2, [pc, #60]	@ (8001eb8 <HAL_TIM_IC_MspInit+0x114>)
 8001e7c:	f043 0308 	orr.w	r3, r3, #8
 8001e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e82:	4b0d      	ldr	r3, [pc, #52]	@ (8001eb8 <HAL_TIM_IC_MspInit+0x114>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e86:	f003 0308 	and.w	r3, r3, #8
 8001e8a:	60bb      	str	r3, [r7, #8]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = A_L_Pin|B_L_Pin;
 8001e8e:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8001e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e94:	2302      	movs	r3, #2
 8001e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ea4:	f107 031c 	add.w	r3, r7, #28
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4807      	ldr	r0, [pc, #28]	@ (8001ec8 <HAL_TIM_IC_MspInit+0x124>)
 8001eac:	f001 fe02 	bl	8003ab4 <HAL_GPIO_Init>
}
 8001eb0:	bf00      	nop
 8001eb2:	3730      	adds	r7, #48	@ 0x30
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	40020400 	.word	0x40020400
 8001ec0:	40020000 	.word	0x40020000
 8001ec4:	40000800 	.word	0x40000800
 8001ec8:	40020c00 	.word	0x40020c00

08001ecc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b08c      	sub	sp, #48	@ 0x30
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed4:	f107 031c 	add.w	r3, r7, #28
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	60da      	str	r2, [r3, #12]
 8001ee2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a3f      	ldr	r2, [pc, #252]	@ (8001fe8 <HAL_TIM_MspPostInit+0x11c>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d11d      	bne.n	8001f2a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eee:	4b3f      	ldr	r3, [pc, #252]	@ (8001fec <HAL_TIM_MspPostInit+0x120>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef2:	4a3e      	ldr	r2, [pc, #248]	@ (8001fec <HAL_TIM_MspPostInit+0x120>)
 8001ef4:	f043 0310 	orr.w	r3, r3, #16
 8001ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001efa:	4b3c      	ldr	r3, [pc, #240]	@ (8001fec <HAL_TIM_MspPostInit+0x120>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efe:	f003 0310 	and.w	r3, r3, #16
 8001f02:	61bb      	str	r3, [r7, #24]
 8001f04:	69bb      	ldr	r3, [r7, #24]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWM1_L_Pin|PWM2_L_Pin|PWM3_L_Pin|PWM4_L_Pin
 8001f06:	f44f 537c 	mov.w	r3, #16128	@ 0x3f00
 8001f0a:	61fb      	str	r3, [r7, #28]
                          |PWM5_L_Pin|PWM6_L_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f14:	2300      	movs	r3, #0
 8001f16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f1c:	f107 031c 	add.w	r3, r7, #28
 8001f20:	4619      	mov	r1, r3
 8001f22:	4833      	ldr	r0, [pc, #204]	@ (8001ff0 <HAL_TIM_MspPostInit+0x124>)
 8001f24:	f001 fdc6 	bl	8003ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001f28:	e05a      	b.n	8001fe0 <HAL_TIM_MspPostInit+0x114>
  else if(timHandle->Instance==TIM8)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a31      	ldr	r2, [pc, #196]	@ (8001ff4 <HAL_TIM_MspPostInit+0x128>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d155      	bne.n	8001fe0 <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f34:	4b2d      	ldr	r3, [pc, #180]	@ (8001fec <HAL_TIM_MspPostInit+0x120>)
 8001f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f38:	4a2c      	ldr	r2, [pc, #176]	@ (8001fec <HAL_TIM_MspPostInit+0x120>)
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f40:	4b2a      	ldr	r3, [pc, #168]	@ (8001fec <HAL_TIM_MspPostInit+0x120>)
 8001f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	617b      	str	r3, [r7, #20]
 8001f4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f4c:	4b27      	ldr	r3, [pc, #156]	@ (8001fec <HAL_TIM_MspPostInit+0x120>)
 8001f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f50:	4a26      	ldr	r2, [pc, #152]	@ (8001fec <HAL_TIM_MspPostInit+0x120>)
 8001f52:	f043 0302 	orr.w	r3, r3, #2
 8001f56:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f58:	4b24      	ldr	r3, [pc, #144]	@ (8001fec <HAL_TIM_MspPostInit+0x120>)
 8001f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f64:	4b21      	ldr	r3, [pc, #132]	@ (8001fec <HAL_TIM_MspPostInit+0x120>)
 8001f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f68:	4a20      	ldr	r2, [pc, #128]	@ (8001fec <HAL_TIM_MspPostInit+0x120>)
 8001f6a:	f043 0304 	orr.w	r3, r3, #4
 8001f6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f70:	4b1e      	ldr	r3, [pc, #120]	@ (8001fec <HAL_TIM_MspPostInit+0x120>)
 8001f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM1_R_Pin;
 8001f7c:	2320      	movs	r3, #32
 8001f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f80:	2302      	movs	r3, #2
 8001f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM1_R_GPIO_Port, &GPIO_InitStruct);
 8001f90:	f107 031c 	add.w	r3, r7, #28
 8001f94:	4619      	mov	r1, r3
 8001f96:	4818      	ldr	r0, [pc, #96]	@ (8001ff8 <HAL_TIM_MspPostInit+0x12c>)
 8001f98:	f001 fd8c 	bl	8003ab4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM3_R_Pin|PWM5_R_Pin;
 8001f9c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001faa:	2300      	movs	r3, #0
 8001fac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb2:	f107 031c 	add.w	r3, r7, #28
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4810      	ldr	r0, [pc, #64]	@ (8001ffc <HAL_TIM_MspPostInit+0x130>)
 8001fba:	f001 fd7b 	bl	8003ab4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM2_R_Pin|PWM4_R_Pin|PWM6_R_Pin;
 8001fbe:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fd4:	f107 031c 	add.w	r3, r7, #28
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4809      	ldr	r0, [pc, #36]	@ (8002000 <HAL_TIM_MspPostInit+0x134>)
 8001fdc:	f001 fd6a 	bl	8003ab4 <HAL_GPIO_Init>
}
 8001fe0:	bf00      	nop
 8001fe2:	3730      	adds	r7, #48	@ 0x30
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40010000 	.word	0x40010000
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40010400 	.word	0x40010400
 8001ff8:	40020000 	.word	0x40020000
 8001ffc:	40020400 	.word	0x40020400
 8002000:	40020800 	.word	0x40020800

08002004 <MX_USB_OTG_FS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_USB_Init(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
	...

08002014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002014:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800204c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002018:	480d      	ldr	r0, [pc, #52]	@ (8002050 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800201a:	490e      	ldr	r1, [pc, #56]	@ (8002054 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800201c:	4a0e      	ldr	r2, [pc, #56]	@ (8002058 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800201e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002020:	e002      	b.n	8002028 <LoopCopyDataInit>

08002022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002026:	3304      	adds	r3, #4

08002028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800202a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800202c:	d3f9      	bcc.n	8002022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800202e:	4a0b      	ldr	r2, [pc, #44]	@ (800205c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002030:	4c0b      	ldr	r4, [pc, #44]	@ (8002060 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002034:	e001      	b.n	800203a <LoopFillZerobss>

08002036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002038:	3204      	adds	r2, #4

0800203a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800203a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800203c:	d3fb      	bcc.n	8002036 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800203e:	f7ff fbbd 	bl	80017bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002042:	f004 fd25 	bl	8006a90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002046:	f7ff fa31 	bl	80014ac <main>
  bx  lr    
 800204a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800204c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002054:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002058:	080073c4 	.word	0x080073c4
  ldr r2, =_sbss
 800205c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002060:	200005f4 	.word	0x200005f4

08002064 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002064:	e7fe      	b.n	8002064 <ADC_IRQHandler>

08002066 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800206a:	2003      	movs	r0, #3
 800206c:	f001 f88a 	bl	8003184 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002070:	200f      	movs	r0, #15
 8002072:	f000 f805 	bl	8002080 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002076:	f7ff fae9 	bl	800164c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	bd80      	pop	{r7, pc}

08002080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002088:	4b12      	ldr	r3, [pc, #72]	@ (80020d4 <HAL_InitTick+0x54>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	4b12      	ldr	r3, [pc, #72]	@ (80020d8 <HAL_InitTick+0x58>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	4619      	mov	r1, r3
 8002092:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002096:	fbb3 f3f1 	udiv	r3, r3, r1
 800209a:	fbb2 f3f3 	udiv	r3, r2, r3
 800209e:	4618      	mov	r0, r3
 80020a0:	f001 f8a5 	bl	80031ee <HAL_SYSTICK_Config>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e00e      	b.n	80020cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2b0f      	cmp	r3, #15
 80020b2:	d80a      	bhi.n	80020ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020b4:	2200      	movs	r2, #0
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	f04f 30ff 	mov.w	r0, #4294967295
 80020bc:	f001 f86d 	bl	800319a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020c0:	4a06      	ldr	r2, [pc, #24]	@ (80020dc <HAL_InitTick+0x5c>)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
 80020c8:	e000      	b.n	80020cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	2000002c 	.word	0x2000002c
 80020d8:	20000034 	.word	0x20000034
 80020dc:	20000030 	.word	0x20000030

080020e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020e4:	4b06      	ldr	r3, [pc, #24]	@ (8002100 <HAL_IncTick+0x20>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	461a      	mov	r2, r3
 80020ea:	4b06      	ldr	r3, [pc, #24]	@ (8002104 <HAL_IncTick+0x24>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4413      	add	r3, r2
 80020f0:	4a04      	ldr	r2, [pc, #16]	@ (8002104 <HAL_IncTick+0x24>)
 80020f2:	6013      	str	r3, [r2, #0]
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	20000034 	.word	0x20000034
 8002104:	200004b8 	.word	0x200004b8

08002108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return uwTick;
 800210c:	4b03      	ldr	r3, [pc, #12]	@ (800211c <HAL_GetTick+0x14>)
 800210e:	681b      	ldr	r3, [r3, #0]
}
 8002110:	4618      	mov	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	200004b8 	.word	0x200004b8

08002120 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002128:	2300      	movs	r3, #0
 800212a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e031      	b.n	800219a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213a:	2b00      	cmp	r3, #0
 800213c:	d109      	bne.n	8002152 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7fe fdb0 	bl	8000ca4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002156:	f003 0310 	and.w	r3, r3, #16
 800215a:	2b00      	cmp	r3, #0
 800215c:	d116      	bne.n	800218c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002162:	4b10      	ldr	r3, [pc, #64]	@ (80021a4 <HAL_ADC_Init+0x84>)
 8002164:	4013      	ands	r3, r2
 8002166:	f043 0202 	orr.w	r2, r3, #2
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 fa88 	bl	8002684 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217e:	f023 0303 	bic.w	r3, r3, #3
 8002182:	f043 0201 	orr.w	r2, r3, #1
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	641a      	str	r2, [r3, #64]	@ 0x40
 800218a:	e001      	b.n	8002190 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002198:	7bfb      	ldrb	r3, [r7, #15]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	ffffeefd 	.word	0xffffeefd

080021a8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d101      	bne.n	80021c6 <HAL_ADC_Start_DMA+0x1e>
 80021c2:	2302      	movs	r3, #2
 80021c4:	e0d4      	b.n	8002370 <HAL_ADC_Start_DMA+0x1c8>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d018      	beq.n	800220e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0201 	orr.w	r2, r2, #1
 80021ea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80021ec:	4b62      	ldr	r3, [pc, #392]	@ (8002378 <HAL_ADC_Start_DMA+0x1d0>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a62      	ldr	r2, [pc, #392]	@ (800237c <HAL_ADC_Start_DMA+0x1d4>)
 80021f2:	fba2 2303 	umull	r2, r3, r2, r3
 80021f6:	0c9a      	lsrs	r2, r3, #18
 80021f8:	4613      	mov	r3, r2
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	4413      	add	r3, r2
 80021fe:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002200:	e002      	b.n	8002208 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	3b01      	subs	r3, #1
 8002206:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f9      	bne.n	8002202 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b01      	cmp	r3, #1
 800221a:	f040 809c 	bne.w	8002356 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002222:	4b57      	ldr	r3, [pc, #348]	@ (8002380 <HAL_ADC_Start_DMA+0x1d8>)
 8002224:	4013      	ands	r3, r2
 8002226:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002238:	2b00      	cmp	r3, #0
 800223a:	d007      	beq.n	800224c <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002240:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002244:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002250:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002254:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002258:	d106      	bne.n	8002268 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225e:	f023 0206 	bic.w	r2, r3, #6
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	645a      	str	r2, [r3, #68]	@ 0x44
 8002266:	e002      	b.n	800226e <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800227a:	4a42      	ldr	r2, [pc, #264]	@ (8002384 <HAL_ADC_Start_DMA+0x1dc>)
 800227c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002282:	4a41      	ldr	r2, [pc, #260]	@ (8002388 <HAL_ADC_Start_DMA+0x1e0>)
 8002284:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800228a:	4a40      	ldr	r2, [pc, #256]	@ (800238c <HAL_ADC_Start_DMA+0x1e4>)
 800228c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002296:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80022a6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689a      	ldr	r2, [r3, #8]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022b6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	334c      	adds	r3, #76	@ 0x4c
 80022c2:	4619      	mov	r1, r3
 80022c4:	68ba      	ldr	r2, [r7, #8]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f001 f92a 	bl	8003520 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80022cc:	4b30      	ldr	r3, [pc, #192]	@ (8002390 <HAL_ADC_Start_DMA+0x1e8>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 031f 	and.w	r3, r3, #31
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d10f      	bne.n	80022f8 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d143      	bne.n	800236e <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80022f4:	609a      	str	r2, [r3, #8]
 80022f6:	e03a      	b.n	800236e <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a25      	ldr	r2, [pc, #148]	@ (8002394 <HAL_ADC_Start_DMA+0x1ec>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d10e      	bne.n	8002320 <HAL_ADC_Start_DMA+0x178>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d107      	bne.n	8002320 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800231e:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002320:	4b1b      	ldr	r3, [pc, #108]	@ (8002390 <HAL_ADC_Start_DMA+0x1e8>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 0310 	and.w	r3, r3, #16
 8002328:	2b00      	cmp	r3, #0
 800232a:	d120      	bne.n	800236e <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a19      	ldr	r2, [pc, #100]	@ (8002398 <HAL_ADC_Start_DMA+0x1f0>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d11b      	bne.n	800236e <HAL_ADC_Start_DMA+0x1c6>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d114      	bne.n	800236e <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	e00b      	b.n	800236e <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235a:	f043 0210 	orr.w	r2, r3, #16
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002366:	f043 0201 	orr.w	r2, r3, #1
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	2000002c 	.word	0x2000002c
 800237c:	431bde83 	.word	0x431bde83
 8002380:	fffff8fe 	.word	0xfffff8fe
 8002384:	08002879 	.word	0x08002879
 8002388:	08002933 	.word	0x08002933
 800238c:	0800294f 	.word	0x0800294f
 8002390:	40012300 	.word	0x40012300
 8002394:	40012000 	.word	0x40012000
 8002398:	40012200 	.word	0x40012200

0800239c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x1c>
 80023f0:	2302      	movs	r3, #2
 80023f2:	e136      	b.n	8002662 <HAL_ADC_ConfigChannel+0x28a>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2b09      	cmp	r3, #9
 8002402:	d93a      	bls.n	800247a <HAL_ADC_ConfigChannel+0xa2>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800240c:	d035      	beq.n	800247a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68d9      	ldr	r1, [r3, #12]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	b29b      	uxth	r3, r3
 800241a:	461a      	mov	r2, r3
 800241c:	4613      	mov	r3, r2
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	4413      	add	r3, r2
 8002422:	3b1e      	subs	r3, #30
 8002424:	2207      	movs	r2, #7
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43da      	mvns	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	400a      	ands	r2, r1
 8002432:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a8d      	ldr	r2, [pc, #564]	@ (8002670 <HAL_ADC_ConfigChannel+0x298>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d10a      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68d9      	ldr	r1, [r3, #12]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	061a      	lsls	r2, r3, #24
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	430a      	orrs	r2, r1
 8002450:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002452:	e035      	b.n	80024c0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68d9      	ldr	r1, [r3, #12]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	689a      	ldr	r2, [r3, #8]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	b29b      	uxth	r3, r3
 8002464:	4618      	mov	r0, r3
 8002466:	4603      	mov	r3, r0
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	4403      	add	r3, r0
 800246c:	3b1e      	subs	r3, #30
 800246e:	409a      	lsls	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002478:	e022      	b.n	80024c0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6919      	ldr	r1, [r3, #16]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	b29b      	uxth	r3, r3
 8002486:	461a      	mov	r2, r3
 8002488:	4613      	mov	r3, r2
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	4413      	add	r3, r2
 800248e:	2207      	movs	r2, #7
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43da      	mvns	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	400a      	ands	r2, r1
 800249c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6919      	ldr	r1, [r3, #16]
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	4618      	mov	r0, r3
 80024b0:	4603      	mov	r3, r0
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	4403      	add	r3, r0
 80024b6:	409a      	lsls	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	430a      	orrs	r2, r1
 80024be:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b06      	cmp	r3, #6
 80024c6:	d824      	bhi.n	8002512 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	3b05      	subs	r3, #5
 80024da:	221f      	movs	r2, #31
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	43da      	mvns	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	400a      	ands	r2, r1
 80024e8:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	4618      	mov	r0, r3
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	3b05      	subs	r3, #5
 8002504:	fa00 f203 	lsl.w	r2, r0, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	430a      	orrs	r2, r1
 800250e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002510:	e04c      	b.n	80025ac <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b0c      	cmp	r3, #12
 8002518:	d824      	bhi.n	8002564 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	3b23      	subs	r3, #35	@ 0x23
 800252c:	221f      	movs	r2, #31
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43da      	mvns	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	400a      	ands	r2, r1
 800253a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	b29b      	uxth	r3, r3
 8002548:	4618      	mov	r0, r3
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	4613      	mov	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4413      	add	r3, r2
 8002554:	3b23      	subs	r3, #35	@ 0x23
 8002556:	fa00 f203 	lsl.w	r2, r0, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	631a      	str	r2, [r3, #48]	@ 0x30
 8002562:	e023      	b.n	80025ac <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	4613      	mov	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	3b41      	subs	r3, #65	@ 0x41
 8002576:	221f      	movs	r2, #31
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43da      	mvns	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	400a      	ands	r2, r1
 8002584:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	b29b      	uxth	r3, r3
 8002592:	4618      	mov	r0, r3
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	4613      	mov	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	4413      	add	r3, r2
 800259e:	3b41      	subs	r3, #65	@ 0x41
 80025a0:	fa00 f203 	lsl.w	r2, r0, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a30      	ldr	r2, [pc, #192]	@ (8002674 <HAL_ADC_ConfigChannel+0x29c>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d10a      	bne.n	80025cc <HAL_ADC_ConfigChannel+0x1f4>
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80025be:	d105      	bne.n	80025cc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80025c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002678 <HAL_ADC_ConfigChannel+0x2a0>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	4a2c      	ldr	r2, [pc, #176]	@ (8002678 <HAL_ADC_ConfigChannel+0x2a0>)
 80025c6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80025ca:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a28      	ldr	r2, [pc, #160]	@ (8002674 <HAL_ADC_ConfigChannel+0x29c>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d10f      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0x21e>
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2b12      	cmp	r3, #18
 80025dc:	d10b      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80025de:	4b26      	ldr	r3, [pc, #152]	@ (8002678 <HAL_ADC_ConfigChannel+0x2a0>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	4a25      	ldr	r2, [pc, #148]	@ (8002678 <HAL_ADC_ConfigChannel+0x2a0>)
 80025e4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80025e8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80025ea:	4b23      	ldr	r3, [pc, #140]	@ (8002678 <HAL_ADC_ConfigChannel+0x2a0>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	4a22      	ldr	r2, [pc, #136]	@ (8002678 <HAL_ADC_ConfigChannel+0x2a0>)
 80025f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80025f4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a1e      	ldr	r2, [pc, #120]	@ (8002674 <HAL_ADC_ConfigChannel+0x29c>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d12b      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x280>
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a1a      	ldr	r2, [pc, #104]	@ (8002670 <HAL_ADC_ConfigChannel+0x298>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d003      	beq.n	8002612 <HAL_ADC_ConfigChannel+0x23a>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2b11      	cmp	r3, #17
 8002610:	d122      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002612:	4b19      	ldr	r3, [pc, #100]	@ (8002678 <HAL_ADC_ConfigChannel+0x2a0>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	4a18      	ldr	r2, [pc, #96]	@ (8002678 <HAL_ADC_ConfigChannel+0x2a0>)
 8002618:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800261c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800261e:	4b16      	ldr	r3, [pc, #88]	@ (8002678 <HAL_ADC_ConfigChannel+0x2a0>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	4a15      	ldr	r2, [pc, #84]	@ (8002678 <HAL_ADC_ConfigChannel+0x2a0>)
 8002624:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002628:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a10      	ldr	r2, [pc, #64]	@ (8002670 <HAL_ADC_ConfigChannel+0x298>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d111      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002634:	4b11      	ldr	r3, [pc, #68]	@ (800267c <HAL_ADC_ConfigChannel+0x2a4>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a11      	ldr	r2, [pc, #68]	@ (8002680 <HAL_ADC_ConfigChannel+0x2a8>)
 800263a:	fba2 2303 	umull	r2, r3, r2, r3
 800263e:	0c9a      	lsrs	r2, r3, #18
 8002640:	4613      	mov	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800264a:	e002      	b.n	8002652 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	3b01      	subs	r3, #1
 8002650:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1f9      	bne.n	800264c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	10000012 	.word	0x10000012
 8002674:	40012000 	.word	0x40012000
 8002678:	40012300 	.word	0x40012300
 800267c:	2000002c 	.word	0x2000002c
 8002680:	431bde83 	.word	0x431bde83

08002684 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800268c:	4b78      	ldr	r3, [pc, #480]	@ (8002870 <ADC_Init+0x1ec>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	4a77      	ldr	r2, [pc, #476]	@ (8002870 <ADC_Init+0x1ec>)
 8002692:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002696:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002698:	4b75      	ldr	r3, [pc, #468]	@ (8002870 <ADC_Init+0x1ec>)
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	4973      	ldr	r1, [pc, #460]	@ (8002870 <ADC_Init+0x1ec>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6859      	ldr	r1, [r3, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	021a      	lsls	r2, r3, #8
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80026d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6859      	ldr	r1, [r3, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6899      	ldr	r1, [r3, #8]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68da      	ldr	r2, [r3, #12]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002712:	4a58      	ldr	r2, [pc, #352]	@ (8002874 <ADC_Init+0x1f0>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d022      	beq.n	800275e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002726:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6899      	ldr	r1, [r3, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002748:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6899      	ldr	r1, [r3, #8]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	609a      	str	r2, [r3, #8]
 800275c:	e00f      	b.n	800277e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800276c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800277c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0202 	bic.w	r2, r2, #2
 800278c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6899      	ldr	r1, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	005a      	lsls	r2, r3, #1
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	430a      	orrs	r2, r1
 80027a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d01b      	beq.n	80027e4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80027ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6859      	ldr	r1, [r3, #4]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d6:	3b01      	subs	r3, #1
 80027d8:	035a      	lsls	r2, r3, #13
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	430a      	orrs	r2, r1
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	e007      	b.n	80027f4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002802:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	3b01      	subs	r3, #1
 8002810:	051a      	lsls	r2, r3, #20
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002828:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6899      	ldr	r1, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002836:	025a      	lsls	r2, r3, #9
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800284e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6899      	ldr	r1, [r3, #8]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	029a      	lsls	r2, r3, #10
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	430a      	orrs	r2, r1
 8002862:	609a      	str	r2, [r3, #8]
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	40012300 	.word	0x40012300
 8002874:	0f000001 	.word	0x0f000001

08002878 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002884:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800288e:	2b00      	cmp	r3, #0
 8002890:	d13c      	bne.n	800290c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002896:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d12b      	bne.n	8002904 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d127      	bne.n	8002904 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ba:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d006      	beq.n	80028d0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d119      	bne.n	8002904 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 0220 	bic.w	r2, r2, #32
 80028de:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d105      	bne.n	8002904 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fc:	f043 0201 	orr.w	r2, r3, #1
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f7ff fd49 	bl	800239c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800290a:	e00e      	b.n	800292a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002910:	f003 0310 	and.w	r3, r3, #16
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f7ff fd53 	bl	80023c4 <HAL_ADC_ErrorCallback>
}
 800291e:	e004      	b.n	800292a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	4798      	blx	r3
}
 800292a:	bf00      	nop
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b084      	sub	sp, #16
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800293e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f7ff fd35 	bl	80023b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002946:	bf00      	nop
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b084      	sub	sp, #16
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800295a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2240      	movs	r2, #64	@ 0x40
 8002960:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002966:	f043 0204 	orr.w	r2, r3, #4
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f7ff fd28 	bl	80023c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002974:	bf00      	nop
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e0ed      	b.n	8002b6a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d102      	bne.n	80029a0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7fe fad6 	bl	8000f4c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0201 	orr.w	r2, r2, #1
 80029ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029b0:	f7ff fbaa 	bl	8002108 <HAL_GetTick>
 80029b4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80029b6:	e012      	b.n	80029de <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80029b8:	f7ff fba6 	bl	8002108 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b0a      	cmp	r3, #10
 80029c4:	d90b      	bls.n	80029de <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2205      	movs	r2, #5
 80029d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e0c5      	b.n	8002b6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d0e5      	beq.n	80029b8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 0202 	bic.w	r2, r2, #2
 80029fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029fc:	f7ff fb84 	bl	8002108 <HAL_GetTick>
 8002a00:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a02:	e012      	b.n	8002a2a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a04:	f7ff fb80 	bl	8002108 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b0a      	cmp	r3, #10
 8002a10:	d90b      	bls.n	8002a2a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a16:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2205      	movs	r2, #5
 8002a22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e09f      	b.n	8002b6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1e5      	bne.n	8002a04 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	7e1b      	ldrb	r3, [r3, #24]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d108      	bne.n	8002a52 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	e007      	b.n	8002a62 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	7e5b      	ldrb	r3, [r3, #25]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d108      	bne.n	8002a7c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	e007      	b.n	8002a8c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	7e9b      	ldrb	r3, [r3, #26]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d108      	bne.n	8002aa6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0220 	orr.w	r2, r2, #32
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	e007      	b.n	8002ab6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 0220 	bic.w	r2, r2, #32
 8002ab4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	7edb      	ldrb	r3, [r3, #27]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d108      	bne.n	8002ad0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 0210 	bic.w	r2, r2, #16
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	e007      	b.n	8002ae0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 0210 	orr.w	r2, r2, #16
 8002ade:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	7f1b      	ldrb	r3, [r3, #28]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d108      	bne.n	8002afa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f042 0208 	orr.w	r2, r2, #8
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	e007      	b.n	8002b0a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 0208 	bic.w	r2, r2, #8
 8002b08:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	7f5b      	ldrb	r3, [r3, #29]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d108      	bne.n	8002b24 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f042 0204 	orr.w	r2, r2, #4
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	e007      	b.n	8002b34 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 0204 	bic.w	r2, r2, #4
 8002b32:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	431a      	orrs	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	ea42 0103 	orr.w	r1, r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	1e5a      	subs	r2, r3, #1
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	430a      	orrs	r2, r1
 8002b58:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b08a      	sub	sp, #40	@ 0x28
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002bae:	6a3b      	ldr	r3, [r7, #32]
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d07c      	beq.n	8002cb2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d023      	beq.n	8002c0a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 f983 	bl	8002ee0 <HAL_CAN_TxMailbox0CompleteCallback>
 8002bda:	e016      	b.n	8002c0a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	f003 0304 	and.w	r3, r3, #4
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d004      	beq.n	8002bf0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002bec:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bee:	e00c      	b.n	8002c0a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d004      	beq.n	8002c04 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c00:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c02:	e002      	b.n	8002c0a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f989 	bl	8002f1c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d024      	beq.n	8002c5e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c1c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d003      	beq.n	8002c30 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 f963 	bl	8002ef4 <HAL_CAN_TxMailbox1CompleteCallback>
 8002c2e:	e016      	b.n	8002c5e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d004      	beq.n	8002c44 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c40:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c42:	e00c      	b.n	8002c5e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d004      	beq.n	8002c58 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c54:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c56:	e002      	b.n	8002c5e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f969 	bl	8002f30 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d024      	beq.n	8002cb2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002c70:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 f943 	bl	8002f08 <HAL_CAN_TxMailbox2CompleteCallback>
 8002c82:	e016      	b.n	8002cb2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d004      	beq.n	8002c98 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c94:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c96:	e00c      	b.n	8002cb2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d004      	beq.n	8002cac <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ca8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002caa:	e002      	b.n	8002cb2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f949 	bl	8002f44 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	f003 0308 	and.w	r3, r3, #8
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00c      	beq.n	8002cd6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	f003 0310 	and.w	r3, r3, #16
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d007      	beq.n	8002cd6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ccc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2210      	movs	r2, #16
 8002cd4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002cd6:	6a3b      	ldr	r3, [r7, #32]
 8002cd8:	f003 0304 	and.w	r3, r3, #4
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00b      	beq.n	8002cf8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	f003 0308 	and.w	r3, r3, #8
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d006      	beq.n	8002cf8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2208      	movs	r2, #8
 8002cf0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f93a 	bl	8002f6c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002cf8:	6a3b      	ldr	r3, [r7, #32]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d009      	beq.n	8002d16 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f003 0303 	and.w	r3, r3, #3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d002      	beq.n	8002d16 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 f921 	bl	8002f58 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00c      	beq.n	8002d3a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	f003 0310 	and.w	r3, r3, #16
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d007      	beq.n	8002d3a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d30:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2210      	movs	r2, #16
 8002d38:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	f003 0320 	and.w	r3, r3, #32
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00b      	beq.n	8002d5c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d006      	beq.n	8002d5c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2208      	movs	r2, #8
 8002d54:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f91c 	bl	8002f94 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	f003 0310 	and.w	r3, r3, #16
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d009      	beq.n	8002d7a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	f003 0303 	and.w	r3, r3, #3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d002      	beq.n	8002d7a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 f903 	bl	8002f80 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002d7a:	6a3b      	ldr	r3, [r7, #32]
 8002d7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00b      	beq.n	8002d9c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	f003 0310 	and.w	r3, r3, #16
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d006      	beq.n	8002d9c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2210      	movs	r2, #16
 8002d94:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f906 	bl	8002fa8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
 8002d9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00b      	beq.n	8002dbe <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	f003 0308 	and.w	r3, r3, #8
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d006      	beq.n	8002dbe <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2208      	movs	r2, #8
 8002db6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 f8ff 	bl	8002fbc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002dbe:	6a3b      	ldr	r3, [r7, #32]
 8002dc0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d07b      	beq.n	8002ec0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	f003 0304 	and.w	r3, r3, #4
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d072      	beq.n	8002eb8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d008      	beq.n	8002dee <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de8:	f043 0301 	orr.w	r3, r3, #1
 8002dec:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002dee:	6a3b      	ldr	r3, [r7, #32]
 8002df0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d008      	beq.n	8002e0a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e04:	f043 0302 	orr.w	r3, r3, #2
 8002e08:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e0a:	6a3b      	ldr	r3, [r7, #32]
 8002e0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d008      	beq.n	8002e26 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e20:	f043 0304 	orr.w	r3, r3, #4
 8002e24:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e26:	6a3b      	ldr	r3, [r7, #32]
 8002e28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d043      	beq.n	8002eb8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d03e      	beq.n	8002eb8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e40:	2b60      	cmp	r3, #96	@ 0x60
 8002e42:	d02b      	beq.n	8002e9c <HAL_CAN_IRQHandler+0x32a>
 8002e44:	2b60      	cmp	r3, #96	@ 0x60
 8002e46:	d82e      	bhi.n	8002ea6 <HAL_CAN_IRQHandler+0x334>
 8002e48:	2b50      	cmp	r3, #80	@ 0x50
 8002e4a:	d022      	beq.n	8002e92 <HAL_CAN_IRQHandler+0x320>
 8002e4c:	2b50      	cmp	r3, #80	@ 0x50
 8002e4e:	d82a      	bhi.n	8002ea6 <HAL_CAN_IRQHandler+0x334>
 8002e50:	2b40      	cmp	r3, #64	@ 0x40
 8002e52:	d019      	beq.n	8002e88 <HAL_CAN_IRQHandler+0x316>
 8002e54:	2b40      	cmp	r3, #64	@ 0x40
 8002e56:	d826      	bhi.n	8002ea6 <HAL_CAN_IRQHandler+0x334>
 8002e58:	2b30      	cmp	r3, #48	@ 0x30
 8002e5a:	d010      	beq.n	8002e7e <HAL_CAN_IRQHandler+0x30c>
 8002e5c:	2b30      	cmp	r3, #48	@ 0x30
 8002e5e:	d822      	bhi.n	8002ea6 <HAL_CAN_IRQHandler+0x334>
 8002e60:	2b10      	cmp	r3, #16
 8002e62:	d002      	beq.n	8002e6a <HAL_CAN_IRQHandler+0x2f8>
 8002e64:	2b20      	cmp	r3, #32
 8002e66:	d005      	beq.n	8002e74 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002e68:	e01d      	b.n	8002ea6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6c:	f043 0308 	orr.w	r3, r3, #8
 8002e70:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e72:	e019      	b.n	8002ea8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e76:	f043 0310 	orr.w	r3, r3, #16
 8002e7a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e7c:	e014      	b.n	8002ea8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e80:	f043 0320 	orr.w	r3, r3, #32
 8002e84:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e86:	e00f      	b.n	8002ea8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e8e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e90:	e00a      	b.n	8002ea8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e98:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e9a:	e005      	b.n	8002ea8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ea2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ea4:	e000      	b.n	8002ea8 <HAL_CAN_IRQHandler+0x336>
            break;
 8002ea6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	699a      	ldr	r2, [r3, #24]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002eb6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2204      	movs	r2, #4
 8002ebe:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d008      	beq.n	8002ed8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 f87c 	bl	8002fd0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002ed8:	bf00      	nop
 8002eda:	3728      	adds	r7, #40	@ 0x28
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8003024 <__NVIC_SetPriorityGrouping+0x40>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003000:	4013      	ands	r3, r2
 8003002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800300c:	4b06      	ldr	r3, [pc, #24]	@ (8003028 <__NVIC_SetPriorityGrouping+0x44>)
 800300e:	4313      	orrs	r3, r2
 8003010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003012:	4a04      	ldr	r2, [pc, #16]	@ (8003024 <__NVIC_SetPriorityGrouping+0x40>)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	60d3      	str	r3, [r2, #12]
}
 8003018:	bf00      	nop
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	e000ed00 	.word	0xe000ed00
 8003028:	05fa0000 	.word	0x05fa0000

0800302c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003030:	4b04      	ldr	r3, [pc, #16]	@ (8003044 <__NVIC_GetPriorityGrouping+0x18>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	0a1b      	lsrs	r3, r3, #8
 8003036:	f003 0307 	and.w	r3, r3, #7
}
 800303a:	4618      	mov	r0, r3
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	e000ed00 	.word	0xe000ed00

08003048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003056:	2b00      	cmp	r3, #0
 8003058:	db0b      	blt.n	8003072 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800305a:	79fb      	ldrb	r3, [r7, #7]
 800305c:	f003 021f 	and.w	r2, r3, #31
 8003060:	4907      	ldr	r1, [pc, #28]	@ (8003080 <__NVIC_EnableIRQ+0x38>)
 8003062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	2001      	movs	r0, #1
 800306a:	fa00 f202 	lsl.w	r2, r0, r2
 800306e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	e000e100 	.word	0xe000e100

08003084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	4603      	mov	r3, r0
 800308c:	6039      	str	r1, [r7, #0]
 800308e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003094:	2b00      	cmp	r3, #0
 8003096:	db0a      	blt.n	80030ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	b2da      	uxtb	r2, r3
 800309c:	490c      	ldr	r1, [pc, #48]	@ (80030d0 <__NVIC_SetPriority+0x4c>)
 800309e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a2:	0112      	lsls	r2, r2, #4
 80030a4:	b2d2      	uxtb	r2, r2
 80030a6:	440b      	add	r3, r1
 80030a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030ac:	e00a      	b.n	80030c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	4908      	ldr	r1, [pc, #32]	@ (80030d4 <__NVIC_SetPriority+0x50>)
 80030b4:	79fb      	ldrb	r3, [r7, #7]
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	3b04      	subs	r3, #4
 80030bc:	0112      	lsls	r2, r2, #4
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	440b      	add	r3, r1
 80030c2:	761a      	strb	r2, [r3, #24]
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	e000e100 	.word	0xe000e100
 80030d4:	e000ed00 	.word	0xe000ed00

080030d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030d8:	b480      	push	{r7}
 80030da:	b089      	sub	sp, #36	@ 0x24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	f1c3 0307 	rsb	r3, r3, #7
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	bf28      	it	cs
 80030f6:	2304      	movcs	r3, #4
 80030f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	3304      	adds	r3, #4
 80030fe:	2b06      	cmp	r3, #6
 8003100:	d902      	bls.n	8003108 <NVIC_EncodePriority+0x30>
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	3b03      	subs	r3, #3
 8003106:	e000      	b.n	800310a <NVIC_EncodePriority+0x32>
 8003108:	2300      	movs	r3, #0
 800310a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800310c:	f04f 32ff 	mov.w	r2, #4294967295
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43da      	mvns	r2, r3
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	401a      	ands	r2, r3
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003120:	f04f 31ff 	mov.w	r1, #4294967295
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	fa01 f303 	lsl.w	r3, r1, r3
 800312a:	43d9      	mvns	r1, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003130:	4313      	orrs	r3, r2
         );
}
 8003132:	4618      	mov	r0, r3
 8003134:	3724      	adds	r7, #36	@ 0x24
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
	...

08003140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3b01      	subs	r3, #1
 800314c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003150:	d301      	bcc.n	8003156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003152:	2301      	movs	r3, #1
 8003154:	e00f      	b.n	8003176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003156:	4a0a      	ldr	r2, [pc, #40]	@ (8003180 <SysTick_Config+0x40>)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3b01      	subs	r3, #1
 800315c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800315e:	210f      	movs	r1, #15
 8003160:	f04f 30ff 	mov.w	r0, #4294967295
 8003164:	f7ff ff8e 	bl	8003084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003168:	4b05      	ldr	r3, [pc, #20]	@ (8003180 <SysTick_Config+0x40>)
 800316a:	2200      	movs	r2, #0
 800316c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800316e:	4b04      	ldr	r3, [pc, #16]	@ (8003180 <SysTick_Config+0x40>)
 8003170:	2207      	movs	r2, #7
 8003172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	e000e010 	.word	0xe000e010

08003184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f7ff ff29 	bl	8002fe4 <__NVIC_SetPriorityGrouping>
}
 8003192:	bf00      	nop
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800319a:	b580      	push	{r7, lr}
 800319c:	b086      	sub	sp, #24
 800319e:	af00      	add	r7, sp, #0
 80031a0:	4603      	mov	r3, r0
 80031a2:	60b9      	str	r1, [r7, #8]
 80031a4:	607a      	str	r2, [r7, #4]
 80031a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031a8:	2300      	movs	r3, #0
 80031aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031ac:	f7ff ff3e 	bl	800302c <__NVIC_GetPriorityGrouping>
 80031b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	68b9      	ldr	r1, [r7, #8]
 80031b6:	6978      	ldr	r0, [r7, #20]
 80031b8:	f7ff ff8e 	bl	80030d8 <NVIC_EncodePriority>
 80031bc:	4602      	mov	r2, r0
 80031be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031c2:	4611      	mov	r1, r2
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff ff5d 	bl	8003084 <__NVIC_SetPriority>
}
 80031ca:	bf00      	nop
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b082      	sub	sp, #8
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	4603      	mov	r3, r0
 80031da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff ff31 	bl	8003048 <__NVIC_EnableIRQ>
}
 80031e6:	bf00      	nop
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b082      	sub	sp, #8
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7ff ffa2 	bl	8003140 <SysTick_Config>
 80031fc:	4603      	mov	r3, r0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b082      	sub	sp, #8
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e014      	b.n	8003242 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	791b      	ldrb	r3, [r3, #4]
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d105      	bne.n	800322e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f7fd ff0d 	bl	8001048 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2202      	movs	r2, #2
 8003232:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b082      	sub	sp, #8
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800325c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003260:	d120      	bne.n	80032a4 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003268:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800326c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003270:	d118      	bne.n	80032a4 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2204      	movs	r2, #4
 8003276:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	f043 0201 	orr.w	r2, r3, #1
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800328c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800329c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f82d 	bl	80032fe <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032b2:	d120      	bne.n	80032f6 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032c2:	d118      	bne.n	80032f6 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2204      	movs	r2, #4
 80032c8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	f043 0202 	orr.w	r2, r3, #2
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80032de:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80032ee:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 f85d 	bl	80033b0 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80032f6:	bf00      	nop
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80032fe:	b480      	push	{r7}
 8003300:	b083      	sub	sp, #12
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003306:	bf00      	nop
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr

08003312 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003312:	b480      	push	{r7}
 8003314:	b087      	sub	sp, #28
 8003316:	af00      	add	r7, sp, #0
 8003318:	60f8      	str	r0, [r7, #12]
 800331a:	60b9      	str	r1, [r7, #8]
 800331c:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	795b      	ldrb	r3, [r3, #5]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d101      	bne.n	800332a <HAL_DAC_ConfigChannel+0x18>
 8003326:	2302      	movs	r3, #2
 8003328:	e03c      	b.n	80033a4 <HAL_DAC_ConfigChannel+0x92>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2201      	movs	r2, #1
 800332e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2202      	movs	r2, #2
 8003334:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f003 0310 	and.w	r3, r3, #16
 8003344:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	43db      	mvns	r3, r3
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	4013      	ands	r3, r2
 8003352:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	4313      	orrs	r3, r2
 800335e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f003 0310 	and.w	r3, r3, #16
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	4313      	orrs	r3, r2
 8003370:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6819      	ldr	r1, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f003 0310 	and.w	r3, r3, #16
 8003386:	22c0      	movs	r2, #192	@ 0xc0
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	43da      	mvns	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	400a      	ands	r2, r1
 8003394:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2201      	movs	r2, #1
 800339a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	371c      	adds	r7, #28
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80033d0:	f7fe fe9a 	bl	8002108 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e099      	b.n	8003514 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2202      	movs	r2, #2
 80033e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0201 	bic.w	r2, r2, #1
 80033fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003400:	e00f      	b.n	8003422 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003402:	f7fe fe81 	bl	8002108 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b05      	cmp	r3, #5
 800340e:	d908      	bls.n	8003422 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2220      	movs	r2, #32
 8003414:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2203      	movs	r2, #3
 800341a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e078      	b.n	8003514 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1e8      	bne.n	8003402 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	4b38      	ldr	r3, [pc, #224]	@ (800351c <HAL_DMA_Init+0x158>)
 800343c:	4013      	ands	r3, r2
 800343e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800344e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800345a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003466:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	4313      	orrs	r3, r2
 8003472:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003478:	2b04      	cmp	r3, #4
 800347a:	d107      	bne.n	800348c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003484:	4313      	orrs	r3, r2
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	4313      	orrs	r3, r2
 800348a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	f023 0307 	bic.w	r3, r3, #7
 80034a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b2:	2b04      	cmp	r3, #4
 80034b4:	d117      	bne.n	80034e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	4313      	orrs	r3, r2
 80034be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00e      	beq.n	80034e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 fa77 	bl	80039bc <DMA_CheckFifoParam>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2240      	movs	r2, #64	@ 0x40
 80034d8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80034e2:	2301      	movs	r3, #1
 80034e4:	e016      	b.n	8003514 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 fa2e 	bl	8003950 <DMA_CalcBaseAndBitshift>
 80034f4:	4603      	mov	r3, r0
 80034f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034fc:	223f      	movs	r2, #63	@ 0x3f
 80034fe:	409a      	lsls	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3718      	adds	r7, #24
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	e010803f 	.word	0xe010803f

08003520 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
 800352c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800352e:	2300      	movs	r3, #0
 8003530:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003536:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800353e:	2b01      	cmp	r3, #1
 8003540:	d101      	bne.n	8003546 <HAL_DMA_Start_IT+0x26>
 8003542:	2302      	movs	r3, #2
 8003544:	e048      	b.n	80035d8 <HAL_DMA_Start_IT+0xb8>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b01      	cmp	r3, #1
 8003558:	d137      	bne.n	80035ca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2202      	movs	r2, #2
 800355e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	68b9      	ldr	r1, [r7, #8]
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 f9c0 	bl	80038f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003578:	223f      	movs	r2, #63	@ 0x3f
 800357a:	409a      	lsls	r2, r3
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 0216 	orr.w	r2, r2, #22
 800358e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	695a      	ldr	r2, [r3, #20]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800359e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d007      	beq.n	80035b8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f042 0208 	orr.w	r2, r2, #8
 80035b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0201 	orr.w	r2, r2, #1
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	e005      	b.n	80035d6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80035d2:	2302      	movs	r3, #2
 80035d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80035d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80035e8:	2300      	movs	r3, #0
 80035ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80035ec:	4b8e      	ldr	r3, [pc, #568]	@ (8003828 <HAL_DMA_IRQHandler+0x248>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a8e      	ldr	r2, [pc, #568]	@ (800382c <HAL_DMA_IRQHandler+0x24c>)
 80035f2:	fba2 2303 	umull	r2, r3, r2, r3
 80035f6:	0a9b      	lsrs	r3, r3, #10
 80035f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800360a:	2208      	movs	r2, #8
 800360c:	409a      	lsls	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	4013      	ands	r3, r2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d01a      	beq.n	800364c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b00      	cmp	r3, #0
 8003622:	d013      	beq.n	800364c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0204 	bic.w	r2, r2, #4
 8003632:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003638:	2208      	movs	r2, #8
 800363a:	409a      	lsls	r2, r3
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003644:	f043 0201 	orr.w	r2, r3, #1
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003650:	2201      	movs	r2, #1
 8003652:	409a      	lsls	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4013      	ands	r3, r2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d012      	beq.n	8003682 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00b      	beq.n	8003682 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800366e:	2201      	movs	r2, #1
 8003670:	409a      	lsls	r2, r3
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800367a:	f043 0202 	orr.w	r2, r3, #2
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003686:	2204      	movs	r2, #4
 8003688:	409a      	lsls	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	4013      	ands	r3, r2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d012      	beq.n	80036b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00b      	beq.n	80036b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a4:	2204      	movs	r2, #4
 80036a6:	409a      	lsls	r2, r3
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036b0:	f043 0204 	orr.w	r2, r3, #4
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036bc:	2210      	movs	r2, #16
 80036be:	409a      	lsls	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4013      	ands	r3, r2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d043      	beq.n	8003750 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0308 	and.w	r3, r3, #8
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d03c      	beq.n	8003750 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036da:	2210      	movs	r2, #16
 80036dc:	409a      	lsls	r2, r3
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d018      	beq.n	8003722 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d108      	bne.n	8003710 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003702:	2b00      	cmp	r3, #0
 8003704:	d024      	beq.n	8003750 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	4798      	blx	r3
 800370e:	e01f      	b.n	8003750 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003714:	2b00      	cmp	r3, #0
 8003716:	d01b      	beq.n	8003750 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	4798      	blx	r3
 8003720:	e016      	b.n	8003750 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800372c:	2b00      	cmp	r3, #0
 800372e:	d107      	bne.n	8003740 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0208 	bic.w	r2, r2, #8
 800373e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003754:	2220      	movs	r2, #32
 8003756:	409a      	lsls	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4013      	ands	r3, r2
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 808f 	beq.w	8003880 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0310 	and.w	r3, r3, #16
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 8087 	beq.w	8003880 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003776:	2220      	movs	r2, #32
 8003778:	409a      	lsls	r2, r3
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b05      	cmp	r3, #5
 8003788:	d136      	bne.n	80037f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0216 	bic.w	r2, r2, #22
 8003798:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	695a      	ldr	r2, [r3, #20]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d103      	bne.n	80037ba <HAL_DMA_IRQHandler+0x1da>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d007      	beq.n	80037ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0208 	bic.w	r2, r2, #8
 80037c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ce:	223f      	movs	r2, #63	@ 0x3f
 80037d0:	409a      	lsls	r2, r3
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d07e      	beq.n	80038ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	4798      	blx	r3
        }
        return;
 80037f6:	e079      	b.n	80038ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d01d      	beq.n	8003842 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d10d      	bne.n	8003830 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003818:	2b00      	cmp	r3, #0
 800381a:	d031      	beq.n	8003880 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	4798      	blx	r3
 8003824:	e02c      	b.n	8003880 <HAL_DMA_IRQHandler+0x2a0>
 8003826:	bf00      	nop
 8003828:	2000002c 	.word	0x2000002c
 800382c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003834:	2b00      	cmp	r3, #0
 8003836:	d023      	beq.n	8003880 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	4798      	blx	r3
 8003840:	e01e      	b.n	8003880 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10f      	bne.n	8003870 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0210 	bic.w	r2, r2, #16
 800385e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003874:	2b00      	cmp	r3, #0
 8003876:	d003      	beq.n	8003880 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003884:	2b00      	cmp	r3, #0
 8003886:	d032      	beq.n	80038ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	d022      	beq.n	80038da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2205      	movs	r2, #5
 8003898:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 0201 	bic.w	r2, r2, #1
 80038aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	3301      	adds	r3, #1
 80038b0:	60bb      	str	r3, [r7, #8]
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d307      	bcc.n	80038c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1f2      	bne.n	80038ac <HAL_DMA_IRQHandler+0x2cc>
 80038c6:	e000      	b.n	80038ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80038c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d005      	beq.n	80038ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	4798      	blx	r3
 80038ea:	e000      	b.n	80038ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80038ec:	bf00      	nop
    }
  }
}
 80038ee:	3718      	adds	r7, #24
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
 8003900:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003910:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	2b40      	cmp	r3, #64	@ 0x40
 8003920:	d108      	bne.n	8003934 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68ba      	ldr	r2, [r7, #8]
 8003930:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003932:	e007      	b.n	8003944 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	60da      	str	r2, [r3, #12]
}
 8003944:	bf00      	nop
 8003946:	3714      	adds	r7, #20
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	b2db      	uxtb	r3, r3
 800395e:	3b10      	subs	r3, #16
 8003960:	4a13      	ldr	r2, [pc, #76]	@ (80039b0 <DMA_CalcBaseAndBitshift+0x60>)
 8003962:	fba2 2303 	umull	r2, r3, r2, r3
 8003966:	091b      	lsrs	r3, r3, #4
 8003968:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800396a:	4a12      	ldr	r2, [pc, #72]	@ (80039b4 <DMA_CalcBaseAndBitshift+0x64>)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4413      	add	r3, r2
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	461a      	mov	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2b03      	cmp	r3, #3
 800397c:	d908      	bls.n	8003990 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	461a      	mov	r2, r3
 8003984:	4b0c      	ldr	r3, [pc, #48]	@ (80039b8 <DMA_CalcBaseAndBitshift+0x68>)
 8003986:	4013      	ands	r3, r2
 8003988:	1d1a      	adds	r2, r3, #4
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	659a      	str	r2, [r3, #88]	@ 0x58
 800398e:	e006      	b.n	800399e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	461a      	mov	r2, r3
 8003996:	4b08      	ldr	r3, [pc, #32]	@ (80039b8 <DMA_CalcBaseAndBitshift+0x68>)
 8003998:	4013      	ands	r3, r2
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3714      	adds	r7, #20
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	aaaaaaab 	.word	0xaaaaaaab
 80039b4:	080073ac 	.word	0x080073ac
 80039b8:	fffffc00 	.word	0xfffffc00

080039bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039c4:	2300      	movs	r3, #0
 80039c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d11f      	bne.n	8003a16 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2b03      	cmp	r3, #3
 80039da:	d856      	bhi.n	8003a8a <DMA_CheckFifoParam+0xce>
 80039dc:	a201      	add	r2, pc, #4	@ (adr r2, 80039e4 <DMA_CheckFifoParam+0x28>)
 80039de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e2:	bf00      	nop
 80039e4:	080039f5 	.word	0x080039f5
 80039e8:	08003a07 	.word	0x08003a07
 80039ec:	080039f5 	.word	0x080039f5
 80039f0:	08003a8b 	.word	0x08003a8b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d046      	beq.n	8003a8e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a04:	e043      	b.n	8003a8e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a0a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a0e:	d140      	bne.n	8003a92 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a14:	e03d      	b.n	8003a92 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a1e:	d121      	bne.n	8003a64 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	2b03      	cmp	r3, #3
 8003a24:	d837      	bhi.n	8003a96 <DMA_CheckFifoParam+0xda>
 8003a26:	a201      	add	r2, pc, #4	@ (adr r2, 8003a2c <DMA_CheckFifoParam+0x70>)
 8003a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a2c:	08003a3d 	.word	0x08003a3d
 8003a30:	08003a43 	.word	0x08003a43
 8003a34:	08003a3d 	.word	0x08003a3d
 8003a38:	08003a55 	.word	0x08003a55
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a40:	e030      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a46:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d025      	beq.n	8003a9a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a52:	e022      	b.n	8003a9a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a58:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a5c:	d11f      	bne.n	8003a9e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a62:	e01c      	b.n	8003a9e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d903      	bls.n	8003a72 <DMA_CheckFifoParam+0xb6>
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	2b03      	cmp	r3, #3
 8003a6e:	d003      	beq.n	8003a78 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a70:	e018      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	73fb      	strb	r3, [r7, #15]
      break;
 8003a76:	e015      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00e      	beq.n	8003aa2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	73fb      	strb	r3, [r7, #15]
      break;
 8003a88:	e00b      	b.n	8003aa2 <DMA_CheckFifoParam+0xe6>
      break;
 8003a8a:	bf00      	nop
 8003a8c:	e00a      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      break;
 8003a8e:	bf00      	nop
 8003a90:	e008      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      break;
 8003a92:	bf00      	nop
 8003a94:	e006      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      break;
 8003a96:	bf00      	nop
 8003a98:	e004      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      break;
 8003a9a:	bf00      	nop
 8003a9c:	e002      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003a9e:	bf00      	nop
 8003aa0:	e000      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      break;
 8003aa2:	bf00      	nop
    }
  } 
  
  return status; 
 8003aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop

08003ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b089      	sub	sp, #36	@ 0x24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003aca:	2300      	movs	r3, #0
 8003acc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003ace:	2300      	movs	r3, #0
 8003ad0:	61fb      	str	r3, [r7, #28]
 8003ad2:	e175      	b.n	8003dc0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	f040 8164 	bne.w	8003dba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f003 0303 	and.w	r3, r3, #3
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d005      	beq.n	8003b0a <HAL_GPIO_Init+0x56>
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f003 0303 	and.w	r3, r3, #3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d130      	bne.n	8003b6c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	2203      	movs	r2, #3
 8003b16:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1a:	43db      	mvns	r3, r3
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b40:	2201      	movs	r2, #1
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	43db      	mvns	r3, r3
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	091b      	lsrs	r3, r3, #4
 8003b56:	f003 0201 	and.w	r2, r3, #1
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f003 0303 	and.w	r3, r3, #3
 8003b74:	2b03      	cmp	r3, #3
 8003b76:	d017      	beq.n	8003ba8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	2203      	movs	r2, #3
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f003 0303 	and.w	r3, r3, #3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d123      	bne.n	8003bfc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	08da      	lsrs	r2, r3, #3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	3208      	adds	r2, #8
 8003bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	220f      	movs	r2, #15
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	691a      	ldr	r2, [r3, #16]
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	f003 0307 	and.w	r3, r3, #7
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	08da      	lsrs	r2, r3, #3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	3208      	adds	r2, #8
 8003bf6:	69b9      	ldr	r1, [r7, #24]
 8003bf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	2203      	movs	r2, #3
 8003c08:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	4013      	ands	r3, r2
 8003c12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f003 0203 	and.w	r2, r3, #3
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	fa02 f303 	lsl.w	r3, r2, r3
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 80be 	beq.w	8003dba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c3e:	4b66      	ldr	r3, [pc, #408]	@ (8003dd8 <HAL_GPIO_Init+0x324>)
 8003c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c42:	4a65      	ldr	r2, [pc, #404]	@ (8003dd8 <HAL_GPIO_Init+0x324>)
 8003c44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c48:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c4a:	4b63      	ldr	r3, [pc, #396]	@ (8003dd8 <HAL_GPIO_Init+0x324>)
 8003c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c52:	60fb      	str	r3, [r7, #12]
 8003c54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003c56:	4a61      	ldr	r2, [pc, #388]	@ (8003ddc <HAL_GPIO_Init+0x328>)
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	089b      	lsrs	r3, r3, #2
 8003c5c:	3302      	adds	r3, #2
 8003c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	f003 0303 	and.w	r3, r3, #3
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	220f      	movs	r2, #15
 8003c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c72:	43db      	mvns	r3, r3
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	4013      	ands	r3, r2
 8003c78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a58      	ldr	r2, [pc, #352]	@ (8003de0 <HAL_GPIO_Init+0x32c>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d037      	beq.n	8003cf2 <HAL_GPIO_Init+0x23e>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a57      	ldr	r2, [pc, #348]	@ (8003de4 <HAL_GPIO_Init+0x330>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d031      	beq.n	8003cee <HAL_GPIO_Init+0x23a>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a56      	ldr	r2, [pc, #344]	@ (8003de8 <HAL_GPIO_Init+0x334>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d02b      	beq.n	8003cea <HAL_GPIO_Init+0x236>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a55      	ldr	r2, [pc, #340]	@ (8003dec <HAL_GPIO_Init+0x338>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d025      	beq.n	8003ce6 <HAL_GPIO_Init+0x232>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a54      	ldr	r2, [pc, #336]	@ (8003df0 <HAL_GPIO_Init+0x33c>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d01f      	beq.n	8003ce2 <HAL_GPIO_Init+0x22e>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a53      	ldr	r2, [pc, #332]	@ (8003df4 <HAL_GPIO_Init+0x340>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d019      	beq.n	8003cde <HAL_GPIO_Init+0x22a>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a52      	ldr	r2, [pc, #328]	@ (8003df8 <HAL_GPIO_Init+0x344>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d013      	beq.n	8003cda <HAL_GPIO_Init+0x226>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a51      	ldr	r2, [pc, #324]	@ (8003dfc <HAL_GPIO_Init+0x348>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d00d      	beq.n	8003cd6 <HAL_GPIO_Init+0x222>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a50      	ldr	r2, [pc, #320]	@ (8003e00 <HAL_GPIO_Init+0x34c>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d007      	beq.n	8003cd2 <HAL_GPIO_Init+0x21e>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a4f      	ldr	r2, [pc, #316]	@ (8003e04 <HAL_GPIO_Init+0x350>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d101      	bne.n	8003cce <HAL_GPIO_Init+0x21a>
 8003cca:	2309      	movs	r3, #9
 8003ccc:	e012      	b.n	8003cf4 <HAL_GPIO_Init+0x240>
 8003cce:	230a      	movs	r3, #10
 8003cd0:	e010      	b.n	8003cf4 <HAL_GPIO_Init+0x240>
 8003cd2:	2308      	movs	r3, #8
 8003cd4:	e00e      	b.n	8003cf4 <HAL_GPIO_Init+0x240>
 8003cd6:	2307      	movs	r3, #7
 8003cd8:	e00c      	b.n	8003cf4 <HAL_GPIO_Init+0x240>
 8003cda:	2306      	movs	r3, #6
 8003cdc:	e00a      	b.n	8003cf4 <HAL_GPIO_Init+0x240>
 8003cde:	2305      	movs	r3, #5
 8003ce0:	e008      	b.n	8003cf4 <HAL_GPIO_Init+0x240>
 8003ce2:	2304      	movs	r3, #4
 8003ce4:	e006      	b.n	8003cf4 <HAL_GPIO_Init+0x240>
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e004      	b.n	8003cf4 <HAL_GPIO_Init+0x240>
 8003cea:	2302      	movs	r3, #2
 8003cec:	e002      	b.n	8003cf4 <HAL_GPIO_Init+0x240>
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e000      	b.n	8003cf4 <HAL_GPIO_Init+0x240>
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	69fa      	ldr	r2, [r7, #28]
 8003cf6:	f002 0203 	and.w	r2, r2, #3
 8003cfa:	0092      	lsls	r2, r2, #2
 8003cfc:	4093      	lsls	r3, r2
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003d04:	4935      	ldr	r1, [pc, #212]	@ (8003ddc <HAL_GPIO_Init+0x328>)
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	089b      	lsrs	r3, r3, #2
 8003d0a:	3302      	adds	r3, #2
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d12:	4b3d      	ldr	r3, [pc, #244]	@ (8003e08 <HAL_GPIO_Init+0x354>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	43db      	mvns	r3, r3
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d36:	4a34      	ldr	r2, [pc, #208]	@ (8003e08 <HAL_GPIO_Init+0x354>)
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d3c:	4b32      	ldr	r3, [pc, #200]	@ (8003e08 <HAL_GPIO_Init+0x354>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	43db      	mvns	r3, r3
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	4013      	ands	r3, r2
 8003d4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d003      	beq.n	8003d60 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d60:	4a29      	ldr	r2, [pc, #164]	@ (8003e08 <HAL_GPIO_Init+0x354>)
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d66:	4b28      	ldr	r3, [pc, #160]	@ (8003e08 <HAL_GPIO_Init+0x354>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	43db      	mvns	r3, r3
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	4013      	ands	r3, r2
 8003d74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d8a:	4a1f      	ldr	r2, [pc, #124]	@ (8003e08 <HAL_GPIO_Init+0x354>)
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d90:	4b1d      	ldr	r3, [pc, #116]	@ (8003e08 <HAL_GPIO_Init+0x354>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	43db      	mvns	r3, r3
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d003      	beq.n	8003db4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003db4:	4a14      	ldr	r2, [pc, #80]	@ (8003e08 <HAL_GPIO_Init+0x354>)
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	61fb      	str	r3, [r7, #28]
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	2b0f      	cmp	r3, #15
 8003dc4:	f67f ae86 	bls.w	8003ad4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003dc8:	bf00      	nop
 8003dca:	bf00      	nop
 8003dcc:	3724      	adds	r7, #36	@ 0x24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	40013800 	.word	0x40013800
 8003de0:	40020000 	.word	0x40020000
 8003de4:	40020400 	.word	0x40020400
 8003de8:	40020800 	.word	0x40020800
 8003dec:	40020c00 	.word	0x40020c00
 8003df0:	40021000 	.word	0x40021000
 8003df4:	40021400 	.word	0x40021400
 8003df8:	40021800 	.word	0x40021800
 8003dfc:	40021c00 	.word	0x40021c00
 8003e00:	40022000 	.word	0x40022000
 8003e04:	40022400 	.word	0x40022400
 8003e08:	40013c00 	.word	0x40013c00

08003e0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	460b      	mov	r3, r1
 8003e16:	807b      	strh	r3, [r7, #2]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e1c:	787b      	ldrb	r3, [r7, #1]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d003      	beq.n	8003e2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e22:	887a      	ldrh	r2, [r7, #2]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003e28:	e003      	b.n	8003e32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003e2a:	887b      	ldrh	r3, [r7, #2]
 8003e2c:	041a      	lsls	r2, r3, #16
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	619a      	str	r2, [r3, #24]
}
 8003e32:	bf00      	nop
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
	...

08003e40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e07f      	b.n	8003f52 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d106      	bne.n	8003e6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7fd fac2 	bl	80013f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2224      	movs	r2, #36	@ 0x24
 8003e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 0201 	bic.w	r2, r2, #1
 8003e82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003e90:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ea0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d107      	bne.n	8003eba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689a      	ldr	r2, [r3, #8]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003eb6:	609a      	str	r2, [r3, #8]
 8003eb8:	e006      	b.n	8003ec8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689a      	ldr	r2, [r3, #8]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003ec6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d104      	bne.n	8003eda <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ed8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6859      	ldr	r1, [r3, #4]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	4b1d      	ldr	r3, [pc, #116]	@ (8003f5c <HAL_I2C_Init+0x11c>)
 8003ee6:	430b      	orrs	r3, r1
 8003ee8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68da      	ldr	r2, [r3, #12]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ef8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691a      	ldr	r2, [r3, #16]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	430a      	orrs	r2, r1
 8003f12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	69d9      	ldr	r1, [r3, #28]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a1a      	ldr	r2, [r3, #32]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f042 0201 	orr.w	r2, r2, #1
 8003f32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	02008000 	.word	0x02008000

08003f60 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b20      	cmp	r3, #32
 8003f74:	d138      	bne.n	8003fe8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d101      	bne.n	8003f84 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f80:	2302      	movs	r3, #2
 8003f82:	e032      	b.n	8003fea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2224      	movs	r2, #36	@ 0x24
 8003f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 0201 	bic.w	r2, r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003fb2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6819      	ldr	r1, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f042 0201 	orr.w	r2, r2, #1
 8003fd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	e000      	b.n	8003fea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003fe8:	2302      	movs	r3, #2
  }
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b085      	sub	sp, #20
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
 8003ffe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b20      	cmp	r3, #32
 800400a:	d139      	bne.n	8004080 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004012:	2b01      	cmp	r3, #1
 8004014:	d101      	bne.n	800401a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004016:	2302      	movs	r3, #2
 8004018:	e033      	b.n	8004082 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2224      	movs	r2, #36	@ 0x24
 8004026:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 0201 	bic.w	r2, r2, #1
 8004038:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004048:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	021b      	lsls	r3, r3, #8
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	4313      	orrs	r3, r2
 8004052:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f042 0201 	orr.w	r2, r2, #1
 800406a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2220      	movs	r2, #32
 8004070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800407c:	2300      	movs	r3, #0
 800407e:	e000      	b.n	8004082 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004080:	2302      	movs	r3, #2
  }
}
 8004082:	4618      	mov	r0, r3
 8004084:	3714      	adds	r7, #20
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
	...

08004090 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004096:	2300      	movs	r3, #0
 8004098:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800409a:	4b23      	ldr	r3, [pc, #140]	@ (8004128 <HAL_PWREx_EnableOverDrive+0x98>)
 800409c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409e:	4a22      	ldr	r2, [pc, #136]	@ (8004128 <HAL_PWREx_EnableOverDrive+0x98>)
 80040a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80040a6:	4b20      	ldr	r3, [pc, #128]	@ (8004128 <HAL_PWREx_EnableOverDrive+0x98>)
 80040a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040ae:	603b      	str	r3, [r7, #0]
 80040b0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80040b2:	4b1e      	ldr	r3, [pc, #120]	@ (800412c <HAL_PWREx_EnableOverDrive+0x9c>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a1d      	ldr	r2, [pc, #116]	@ (800412c <HAL_PWREx_EnableOverDrive+0x9c>)
 80040b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040bc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040be:	f7fe f823 	bl	8002108 <HAL_GetTick>
 80040c2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80040c4:	e009      	b.n	80040da <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80040c6:	f7fe f81f 	bl	8002108 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80040d4:	d901      	bls.n	80040da <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e022      	b.n	8004120 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80040da:	4b14      	ldr	r3, [pc, #80]	@ (800412c <HAL_PWREx_EnableOverDrive+0x9c>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040e6:	d1ee      	bne.n	80040c6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80040e8:	4b10      	ldr	r3, [pc, #64]	@ (800412c <HAL_PWREx_EnableOverDrive+0x9c>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a0f      	ldr	r2, [pc, #60]	@ (800412c <HAL_PWREx_EnableOverDrive+0x9c>)
 80040ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040f2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040f4:	f7fe f808 	bl	8002108 <HAL_GetTick>
 80040f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80040fa:	e009      	b.n	8004110 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80040fc:	f7fe f804 	bl	8002108 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800410a:	d901      	bls.n	8004110 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e007      	b.n	8004120 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004110:	4b06      	ldr	r3, [pc, #24]	@ (800412c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004118:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800411c:	d1ee      	bne.n	80040fc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3708      	adds	r7, #8
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	40023800 	.word	0x40023800
 800412c:	40007000 	.word	0x40007000

08004130 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004138:	2300      	movs	r3, #0
 800413a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e29b      	b.n	800467e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 8087 	beq.w	8004262 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004154:	4b96      	ldr	r3, [pc, #600]	@ (80043b0 <HAL_RCC_OscConfig+0x280>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f003 030c 	and.w	r3, r3, #12
 800415c:	2b04      	cmp	r3, #4
 800415e:	d00c      	beq.n	800417a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004160:	4b93      	ldr	r3, [pc, #588]	@ (80043b0 <HAL_RCC_OscConfig+0x280>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f003 030c 	and.w	r3, r3, #12
 8004168:	2b08      	cmp	r3, #8
 800416a:	d112      	bne.n	8004192 <HAL_RCC_OscConfig+0x62>
 800416c:	4b90      	ldr	r3, [pc, #576]	@ (80043b0 <HAL_RCC_OscConfig+0x280>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004174:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004178:	d10b      	bne.n	8004192 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800417a:	4b8d      	ldr	r3, [pc, #564]	@ (80043b0 <HAL_RCC_OscConfig+0x280>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d06c      	beq.n	8004260 <HAL_RCC_OscConfig+0x130>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d168      	bne.n	8004260 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e275      	b.n	800467e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800419a:	d106      	bne.n	80041aa <HAL_RCC_OscConfig+0x7a>
 800419c:	4b84      	ldr	r3, [pc, #528]	@ (80043b0 <HAL_RCC_OscConfig+0x280>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a83      	ldr	r2, [pc, #524]	@ (80043b0 <HAL_RCC_OscConfig+0x280>)
 80041a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041a6:	6013      	str	r3, [r2, #0]
 80041a8:	e02e      	b.n	8004208 <HAL_RCC_OscConfig+0xd8>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10c      	bne.n	80041cc <HAL_RCC_OscConfig+0x9c>
 80041b2:	4b7f      	ldr	r3, [pc, #508]	@ (80043b0 <HAL_RCC_OscConfig+0x280>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a7e      	ldr	r2, [pc, #504]	@ (80043b0 <HAL_RCC_OscConfig+0x280>)
 80041b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041bc:	6013      	str	r3, [r2, #0]
 80041be:	4b7c      	ldr	r3, [pc, #496]	@ (80043b0 <HAL_RCC_OscConfig+0x280>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a7b      	ldr	r2, [pc, #492]	@ (80043b0 <HAL_RCC_OscConfig+0x280>)
 80041c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041c8:	6013      	str	r3, [r2, #0]
 80041ca:	e01d      	b.n	8004208 <HAL_RCC_OscConfig+0xd8>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041d4:	d10c      	bne.n	80041f0 <HAL_RCC_OscConfig+0xc0>
 80041d6:	4b76      	ldr	r3, [pc, #472]	@ (80043b0 <HAL_RCC_OscConfig+0x280>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a75      	ldr	r2, [pc, #468]	@ (80043b0 <HAL_RCC_OscConfig+0x280>)
 80041dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041e0:	6013      	str	r3, [r2, #0]
 80041e2:	4b73      	ldr	r3, [pc, #460]	@ (80043b0 <HAL_RCC_OscConfig+0x280>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a72      	ldr	r2, [pc, #456]	@ (80043b0 <HAL_RCC_OscConfig+0x280>)
 80041e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041ec:	6013      	str	r3, [r2, #0]
 80041ee:	e00b      	b.n	8004208 <HAL_RCC_OscConfig+0xd8>
 80041f0:	4b6f      	ldr	r3, [pc, #444]	@ (80043b0 <HAL_RCC_OscConfig+0x280>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a6e      	ldr	r2, [pc, #440]	@ (80043b0 <HAL_RCC_OscConfig+0x280>)
 80041f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041fa:	6013      	str	r3, [r2, #0]
 80041fc:	4b6c      	ldr	r3, [pc, #432]	@ (80043b0 <HAL_RCC_OscConfig+0x280>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a6b      	ldr	r2, [pc, #428]	@ (80043b0 <HAL_RCC_OscConfig+0x280>)
 8004202:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004206:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d013      	beq.n	8004238 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004210:	f7fd ff7a 	bl	8002108 <HAL_GetTick>
 8004214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004216:	e008      	b.n	800422a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004218:	f7fd ff76 	bl	8002108 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b64      	cmp	r3, #100	@ 0x64
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e229      	b.n	800467e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800422a:	4b61      	ldr	r3, [pc, #388]	@ (80043b0 <HAL_RCC_OscConfig+0x280>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d0f0      	beq.n	8004218 <HAL_RCC_OscConfig+0xe8>
 8004236:	e014      	b.n	8004262 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004238:	f7fd ff66 	bl	8002108 <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004240:	f7fd ff62 	bl	8002108 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b64      	cmp	r3, #100	@ 0x64
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e215      	b.n	800467e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004252:	4b57      	ldr	r3, [pc, #348]	@ (80043b0 <HAL_RCC_OscConfig+0x280>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1f0      	bne.n	8004240 <HAL_RCC_OscConfig+0x110>
 800425e:	e000      	b.n	8004262 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d069      	beq.n	8004342 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800426e:	4b50      	ldr	r3, [pc, #320]	@ (80043b0 <HAL_RCC_OscConfig+0x280>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 030c 	and.w	r3, r3, #12
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00b      	beq.n	8004292 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800427a:	4b4d      	ldr	r3, [pc, #308]	@ (80043b0 <HAL_RCC_OscConfig+0x280>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 030c 	and.w	r3, r3, #12
 8004282:	2b08      	cmp	r3, #8
 8004284:	d11c      	bne.n	80042c0 <HAL_RCC_OscConfig+0x190>
 8004286:	4b4a      	ldr	r3, [pc, #296]	@ (80043b0 <HAL_RCC_OscConfig+0x280>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d116      	bne.n	80042c0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004292:	4b47      	ldr	r3, [pc, #284]	@ (80043b0 <HAL_RCC_OscConfig+0x280>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d005      	beq.n	80042aa <HAL_RCC_OscConfig+0x17a>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d001      	beq.n	80042aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e1e9      	b.n	800467e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042aa:	4b41      	ldr	r3, [pc, #260]	@ (80043b0 <HAL_RCC_OscConfig+0x280>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	00db      	lsls	r3, r3, #3
 80042b8:	493d      	ldr	r1, [pc, #244]	@ (80043b0 <HAL_RCC_OscConfig+0x280>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042be:	e040      	b.n	8004342 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d023      	beq.n	8004310 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042c8:	4b39      	ldr	r3, [pc, #228]	@ (80043b0 <HAL_RCC_OscConfig+0x280>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a38      	ldr	r2, [pc, #224]	@ (80043b0 <HAL_RCC_OscConfig+0x280>)
 80042ce:	f043 0301 	orr.w	r3, r3, #1
 80042d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d4:	f7fd ff18 	bl	8002108 <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042dc:	f7fd ff14 	bl	8002108 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e1c7      	b.n	800467e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ee:	4b30      	ldr	r3, [pc, #192]	@ (80043b0 <HAL_RCC_OscConfig+0x280>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d0f0      	beq.n	80042dc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042fa:	4b2d      	ldr	r3, [pc, #180]	@ (80043b0 <HAL_RCC_OscConfig+0x280>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	4929      	ldr	r1, [pc, #164]	@ (80043b0 <HAL_RCC_OscConfig+0x280>)
 800430a:	4313      	orrs	r3, r2
 800430c:	600b      	str	r3, [r1, #0]
 800430e:	e018      	b.n	8004342 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004310:	4b27      	ldr	r3, [pc, #156]	@ (80043b0 <HAL_RCC_OscConfig+0x280>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a26      	ldr	r2, [pc, #152]	@ (80043b0 <HAL_RCC_OscConfig+0x280>)
 8004316:	f023 0301 	bic.w	r3, r3, #1
 800431a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800431c:	f7fd fef4 	bl	8002108 <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004324:	f7fd fef0 	bl	8002108 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e1a3      	b.n	800467e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004336:	4b1e      	ldr	r3, [pc, #120]	@ (80043b0 <HAL_RCC_OscConfig+0x280>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1f0      	bne.n	8004324 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0308 	and.w	r3, r3, #8
 800434a:	2b00      	cmp	r3, #0
 800434c:	d038      	beq.n	80043c0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d019      	beq.n	800438a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004356:	4b16      	ldr	r3, [pc, #88]	@ (80043b0 <HAL_RCC_OscConfig+0x280>)
 8004358:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800435a:	4a15      	ldr	r2, [pc, #84]	@ (80043b0 <HAL_RCC_OscConfig+0x280>)
 800435c:	f043 0301 	orr.w	r3, r3, #1
 8004360:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004362:	f7fd fed1 	bl	8002108 <HAL_GetTick>
 8004366:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004368:	e008      	b.n	800437c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800436a:	f7fd fecd 	bl	8002108 <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b02      	cmp	r3, #2
 8004376:	d901      	bls.n	800437c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e180      	b.n	800467e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800437c:	4b0c      	ldr	r3, [pc, #48]	@ (80043b0 <HAL_RCC_OscConfig+0x280>)
 800437e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0f0      	beq.n	800436a <HAL_RCC_OscConfig+0x23a>
 8004388:	e01a      	b.n	80043c0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800438a:	4b09      	ldr	r3, [pc, #36]	@ (80043b0 <HAL_RCC_OscConfig+0x280>)
 800438c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800438e:	4a08      	ldr	r2, [pc, #32]	@ (80043b0 <HAL_RCC_OscConfig+0x280>)
 8004390:	f023 0301 	bic.w	r3, r3, #1
 8004394:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004396:	f7fd feb7 	bl	8002108 <HAL_GetTick>
 800439a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800439c:	e00a      	b.n	80043b4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800439e:	f7fd feb3 	bl	8002108 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d903      	bls.n	80043b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e166      	b.n	800467e <HAL_RCC_OscConfig+0x54e>
 80043b0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043b4:	4b92      	ldr	r3, [pc, #584]	@ (8004600 <HAL_RCC_OscConfig+0x4d0>)
 80043b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1ee      	bne.n	800439e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0304 	and.w	r3, r3, #4
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f000 80a4 	beq.w	8004516 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043ce:	4b8c      	ldr	r3, [pc, #560]	@ (8004600 <HAL_RCC_OscConfig+0x4d0>)
 80043d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10d      	bne.n	80043f6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80043da:	4b89      	ldr	r3, [pc, #548]	@ (8004600 <HAL_RCC_OscConfig+0x4d0>)
 80043dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043de:	4a88      	ldr	r2, [pc, #544]	@ (8004600 <HAL_RCC_OscConfig+0x4d0>)
 80043e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80043e6:	4b86      	ldr	r3, [pc, #536]	@ (8004600 <HAL_RCC_OscConfig+0x4d0>)
 80043e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043ee:	60bb      	str	r3, [r7, #8]
 80043f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043f2:	2301      	movs	r3, #1
 80043f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043f6:	4b83      	ldr	r3, [pc, #524]	@ (8004604 <HAL_RCC_OscConfig+0x4d4>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d118      	bne.n	8004434 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004402:	4b80      	ldr	r3, [pc, #512]	@ (8004604 <HAL_RCC_OscConfig+0x4d4>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a7f      	ldr	r2, [pc, #508]	@ (8004604 <HAL_RCC_OscConfig+0x4d4>)
 8004408:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800440c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800440e:	f7fd fe7b 	bl	8002108 <HAL_GetTick>
 8004412:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004414:	e008      	b.n	8004428 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004416:	f7fd fe77 	bl	8002108 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b64      	cmp	r3, #100	@ 0x64
 8004422:	d901      	bls.n	8004428 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e12a      	b.n	800467e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004428:	4b76      	ldr	r3, [pc, #472]	@ (8004604 <HAL_RCC_OscConfig+0x4d4>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004430:	2b00      	cmp	r3, #0
 8004432:	d0f0      	beq.n	8004416 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d106      	bne.n	800444a <HAL_RCC_OscConfig+0x31a>
 800443c:	4b70      	ldr	r3, [pc, #448]	@ (8004600 <HAL_RCC_OscConfig+0x4d0>)
 800443e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004440:	4a6f      	ldr	r2, [pc, #444]	@ (8004600 <HAL_RCC_OscConfig+0x4d0>)
 8004442:	f043 0301 	orr.w	r3, r3, #1
 8004446:	6713      	str	r3, [r2, #112]	@ 0x70
 8004448:	e02d      	b.n	80044a6 <HAL_RCC_OscConfig+0x376>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10c      	bne.n	800446c <HAL_RCC_OscConfig+0x33c>
 8004452:	4b6b      	ldr	r3, [pc, #428]	@ (8004600 <HAL_RCC_OscConfig+0x4d0>)
 8004454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004456:	4a6a      	ldr	r2, [pc, #424]	@ (8004600 <HAL_RCC_OscConfig+0x4d0>)
 8004458:	f023 0301 	bic.w	r3, r3, #1
 800445c:	6713      	str	r3, [r2, #112]	@ 0x70
 800445e:	4b68      	ldr	r3, [pc, #416]	@ (8004600 <HAL_RCC_OscConfig+0x4d0>)
 8004460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004462:	4a67      	ldr	r2, [pc, #412]	@ (8004600 <HAL_RCC_OscConfig+0x4d0>)
 8004464:	f023 0304 	bic.w	r3, r3, #4
 8004468:	6713      	str	r3, [r2, #112]	@ 0x70
 800446a:	e01c      	b.n	80044a6 <HAL_RCC_OscConfig+0x376>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	2b05      	cmp	r3, #5
 8004472:	d10c      	bne.n	800448e <HAL_RCC_OscConfig+0x35e>
 8004474:	4b62      	ldr	r3, [pc, #392]	@ (8004600 <HAL_RCC_OscConfig+0x4d0>)
 8004476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004478:	4a61      	ldr	r2, [pc, #388]	@ (8004600 <HAL_RCC_OscConfig+0x4d0>)
 800447a:	f043 0304 	orr.w	r3, r3, #4
 800447e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004480:	4b5f      	ldr	r3, [pc, #380]	@ (8004600 <HAL_RCC_OscConfig+0x4d0>)
 8004482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004484:	4a5e      	ldr	r2, [pc, #376]	@ (8004600 <HAL_RCC_OscConfig+0x4d0>)
 8004486:	f043 0301 	orr.w	r3, r3, #1
 800448a:	6713      	str	r3, [r2, #112]	@ 0x70
 800448c:	e00b      	b.n	80044a6 <HAL_RCC_OscConfig+0x376>
 800448e:	4b5c      	ldr	r3, [pc, #368]	@ (8004600 <HAL_RCC_OscConfig+0x4d0>)
 8004490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004492:	4a5b      	ldr	r2, [pc, #364]	@ (8004600 <HAL_RCC_OscConfig+0x4d0>)
 8004494:	f023 0301 	bic.w	r3, r3, #1
 8004498:	6713      	str	r3, [r2, #112]	@ 0x70
 800449a:	4b59      	ldr	r3, [pc, #356]	@ (8004600 <HAL_RCC_OscConfig+0x4d0>)
 800449c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800449e:	4a58      	ldr	r2, [pc, #352]	@ (8004600 <HAL_RCC_OscConfig+0x4d0>)
 80044a0:	f023 0304 	bic.w	r3, r3, #4
 80044a4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d015      	beq.n	80044da <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ae:	f7fd fe2b 	bl	8002108 <HAL_GetTick>
 80044b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b4:	e00a      	b.n	80044cc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044b6:	f7fd fe27 	bl	8002108 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d901      	bls.n	80044cc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e0d8      	b.n	800467e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044cc:	4b4c      	ldr	r3, [pc, #304]	@ (8004600 <HAL_RCC_OscConfig+0x4d0>)
 80044ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d0ee      	beq.n	80044b6 <HAL_RCC_OscConfig+0x386>
 80044d8:	e014      	b.n	8004504 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044da:	f7fd fe15 	bl	8002108 <HAL_GetTick>
 80044de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044e0:	e00a      	b.n	80044f8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044e2:	f7fd fe11 	bl	8002108 <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d901      	bls.n	80044f8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e0c2      	b.n	800467e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044f8:	4b41      	ldr	r3, [pc, #260]	@ (8004600 <HAL_RCC_OscConfig+0x4d0>)
 80044fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1ee      	bne.n	80044e2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004504:	7dfb      	ldrb	r3, [r7, #23]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d105      	bne.n	8004516 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800450a:	4b3d      	ldr	r3, [pc, #244]	@ (8004600 <HAL_RCC_OscConfig+0x4d0>)
 800450c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450e:	4a3c      	ldr	r2, [pc, #240]	@ (8004600 <HAL_RCC_OscConfig+0x4d0>)
 8004510:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004514:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 80ae 	beq.w	800467c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004520:	4b37      	ldr	r3, [pc, #220]	@ (8004600 <HAL_RCC_OscConfig+0x4d0>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f003 030c 	and.w	r3, r3, #12
 8004528:	2b08      	cmp	r3, #8
 800452a:	d06d      	beq.n	8004608 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	2b02      	cmp	r3, #2
 8004532:	d14b      	bne.n	80045cc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004534:	4b32      	ldr	r3, [pc, #200]	@ (8004600 <HAL_RCC_OscConfig+0x4d0>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a31      	ldr	r2, [pc, #196]	@ (8004600 <HAL_RCC_OscConfig+0x4d0>)
 800453a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800453e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004540:	f7fd fde2 	bl	8002108 <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004548:	f7fd fdde 	bl	8002108 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b02      	cmp	r3, #2
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e091      	b.n	800467e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800455a:	4b29      	ldr	r3, [pc, #164]	@ (8004600 <HAL_RCC_OscConfig+0x4d0>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1f0      	bne.n	8004548 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	69da      	ldr	r2, [r3, #28]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004574:	019b      	lsls	r3, r3, #6
 8004576:	431a      	orrs	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800457c:	085b      	lsrs	r3, r3, #1
 800457e:	3b01      	subs	r3, #1
 8004580:	041b      	lsls	r3, r3, #16
 8004582:	431a      	orrs	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004588:	061b      	lsls	r3, r3, #24
 800458a:	431a      	orrs	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004590:	071b      	lsls	r3, r3, #28
 8004592:	491b      	ldr	r1, [pc, #108]	@ (8004600 <HAL_RCC_OscConfig+0x4d0>)
 8004594:	4313      	orrs	r3, r2
 8004596:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004598:	4b19      	ldr	r3, [pc, #100]	@ (8004600 <HAL_RCC_OscConfig+0x4d0>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a18      	ldr	r2, [pc, #96]	@ (8004600 <HAL_RCC_OscConfig+0x4d0>)
 800459e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a4:	f7fd fdb0 	bl	8002108 <HAL_GetTick>
 80045a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045aa:	e008      	b.n	80045be <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ac:	f7fd fdac 	bl	8002108 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e05f      	b.n	800467e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045be:	4b10      	ldr	r3, [pc, #64]	@ (8004600 <HAL_RCC_OscConfig+0x4d0>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d0f0      	beq.n	80045ac <HAL_RCC_OscConfig+0x47c>
 80045ca:	e057      	b.n	800467c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004600 <HAL_RCC_OscConfig+0x4d0>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a0b      	ldr	r2, [pc, #44]	@ (8004600 <HAL_RCC_OscConfig+0x4d0>)
 80045d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d8:	f7fd fd96 	bl	8002108 <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045de:	e008      	b.n	80045f2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045e0:	f7fd fd92 	bl	8002108 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e045      	b.n	800467e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045f2:	4b03      	ldr	r3, [pc, #12]	@ (8004600 <HAL_RCC_OscConfig+0x4d0>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1f0      	bne.n	80045e0 <HAL_RCC_OscConfig+0x4b0>
 80045fe:	e03d      	b.n	800467c <HAL_RCC_OscConfig+0x54c>
 8004600:	40023800 	.word	0x40023800
 8004604:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004608:	4b1f      	ldr	r3, [pc, #124]	@ (8004688 <HAL_RCC_OscConfig+0x558>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d030      	beq.n	8004678 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004620:	429a      	cmp	r2, r3
 8004622:	d129      	bne.n	8004678 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800462e:	429a      	cmp	r2, r3
 8004630:	d122      	bne.n	8004678 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004638:	4013      	ands	r3, r2
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800463e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004640:	4293      	cmp	r3, r2
 8004642:	d119      	bne.n	8004678 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800464e:	085b      	lsrs	r3, r3, #1
 8004650:	3b01      	subs	r3, #1
 8004652:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004654:	429a      	cmp	r2, r3
 8004656:	d10f      	bne.n	8004678 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004662:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004664:	429a      	cmp	r2, r3
 8004666:	d107      	bne.n	8004678 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004672:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004674:	429a      	cmp	r2, r3
 8004676:	d001      	beq.n	800467c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e000      	b.n	800467e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	40023800 	.word	0x40023800

0800468c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004696:	2300      	movs	r3, #0
 8004698:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e0d0      	b.n	8004846 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046a4:	4b6a      	ldr	r3, [pc, #424]	@ (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 030f 	and.w	r3, r3, #15
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d910      	bls.n	80046d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046b2:	4b67      	ldr	r3, [pc, #412]	@ (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f023 020f 	bic.w	r2, r3, #15
 80046ba:	4965      	ldr	r1, [pc, #404]	@ (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	4313      	orrs	r3, r2
 80046c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046c2:	4b63      	ldr	r3, [pc, #396]	@ (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 030f 	and.w	r3, r3, #15
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d001      	beq.n	80046d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e0b8      	b.n	8004846 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d020      	beq.n	8004722 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0304 	and.w	r3, r3, #4
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d005      	beq.n	80046f8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046ec:	4b59      	ldr	r3, [pc, #356]	@ (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	4a58      	ldr	r2, [pc, #352]	@ (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 80046f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80046f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0308 	and.w	r3, r3, #8
 8004700:	2b00      	cmp	r3, #0
 8004702:	d005      	beq.n	8004710 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004704:	4b53      	ldr	r3, [pc, #332]	@ (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	4a52      	ldr	r2, [pc, #328]	@ (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 800470a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800470e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004710:	4b50      	ldr	r3, [pc, #320]	@ (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	494d      	ldr	r1, [pc, #308]	@ (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 800471e:	4313      	orrs	r3, r2
 8004720:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d040      	beq.n	80047b0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d107      	bne.n	8004746 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004736:	4b47      	ldr	r3, [pc, #284]	@ (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d115      	bne.n	800476e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e07f      	b.n	8004846 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	2b02      	cmp	r3, #2
 800474c:	d107      	bne.n	800475e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800474e:	4b41      	ldr	r3, [pc, #260]	@ (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d109      	bne.n	800476e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e073      	b.n	8004846 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800475e:	4b3d      	ldr	r3, [pc, #244]	@ (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e06b      	b.n	8004846 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800476e:	4b39      	ldr	r3, [pc, #228]	@ (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f023 0203 	bic.w	r2, r3, #3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	4936      	ldr	r1, [pc, #216]	@ (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 800477c:	4313      	orrs	r3, r2
 800477e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004780:	f7fd fcc2 	bl	8002108 <HAL_GetTick>
 8004784:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004786:	e00a      	b.n	800479e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004788:	f7fd fcbe 	bl	8002108 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004796:	4293      	cmp	r3, r2
 8004798:	d901      	bls.n	800479e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e053      	b.n	8004846 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800479e:	4b2d      	ldr	r3, [pc, #180]	@ (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f003 020c 	and.w	r2, r3, #12
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d1eb      	bne.n	8004788 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047b0:	4b27      	ldr	r3, [pc, #156]	@ (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 030f 	and.w	r3, r3, #15
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d210      	bcs.n	80047e0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047be:	4b24      	ldr	r3, [pc, #144]	@ (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f023 020f 	bic.w	r2, r3, #15
 80047c6:	4922      	ldr	r1, [pc, #136]	@ (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ce:	4b20      	ldr	r3, [pc, #128]	@ (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 030f 	and.w	r3, r3, #15
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d001      	beq.n	80047e0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e032      	b.n	8004846 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d008      	beq.n	80047fe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047ec:	4b19      	ldr	r3, [pc, #100]	@ (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	4916      	ldr	r1, [pc, #88]	@ (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0308 	and.w	r3, r3, #8
 8004806:	2b00      	cmp	r3, #0
 8004808:	d009      	beq.n	800481e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800480a:	4b12      	ldr	r3, [pc, #72]	@ (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	490e      	ldr	r1, [pc, #56]	@ (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 800481a:	4313      	orrs	r3, r2
 800481c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800481e:	f000 f821 	bl	8004864 <HAL_RCC_GetSysClockFreq>
 8004822:	4602      	mov	r2, r0
 8004824:	4b0b      	ldr	r3, [pc, #44]	@ (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	091b      	lsrs	r3, r3, #4
 800482a:	f003 030f 	and.w	r3, r3, #15
 800482e:	490a      	ldr	r1, [pc, #40]	@ (8004858 <HAL_RCC_ClockConfig+0x1cc>)
 8004830:	5ccb      	ldrb	r3, [r1, r3]
 8004832:	fa22 f303 	lsr.w	r3, r2, r3
 8004836:	4a09      	ldr	r2, [pc, #36]	@ (800485c <HAL_RCC_ClockConfig+0x1d0>)
 8004838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800483a:	4b09      	ldr	r3, [pc, #36]	@ (8004860 <HAL_RCC_ClockConfig+0x1d4>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4618      	mov	r0, r3
 8004840:	f7fd fc1e 	bl	8002080 <HAL_InitTick>

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	40023c00 	.word	0x40023c00
 8004854:	40023800 	.word	0x40023800
 8004858:	0800739c 	.word	0x0800739c
 800485c:	2000002c 	.word	0x2000002c
 8004860:	20000030 	.word	0x20000030

08004864 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004868:	b090      	sub	sp, #64	@ 0x40
 800486a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800486c:	2300      	movs	r3, #0
 800486e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004870:	2300      	movs	r3, #0
 8004872:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004874:	2300      	movs	r3, #0
 8004876:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8004878:	2300      	movs	r3, #0
 800487a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800487c:	4b59      	ldr	r3, [pc, #356]	@ (80049e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f003 030c 	and.w	r3, r3, #12
 8004884:	2b08      	cmp	r3, #8
 8004886:	d00d      	beq.n	80048a4 <HAL_RCC_GetSysClockFreq+0x40>
 8004888:	2b08      	cmp	r3, #8
 800488a:	f200 80a1 	bhi.w	80049d0 <HAL_RCC_GetSysClockFreq+0x16c>
 800488e:	2b00      	cmp	r3, #0
 8004890:	d002      	beq.n	8004898 <HAL_RCC_GetSysClockFreq+0x34>
 8004892:	2b04      	cmp	r3, #4
 8004894:	d003      	beq.n	800489e <HAL_RCC_GetSysClockFreq+0x3a>
 8004896:	e09b      	b.n	80049d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004898:	4b53      	ldr	r3, [pc, #332]	@ (80049e8 <HAL_RCC_GetSysClockFreq+0x184>)
 800489a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800489c:	e09b      	b.n	80049d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800489e:	4b53      	ldr	r3, [pc, #332]	@ (80049ec <HAL_RCC_GetSysClockFreq+0x188>)
 80048a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80048a2:	e098      	b.n	80049d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048a4:	4b4f      	ldr	r3, [pc, #316]	@ (80049e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048ac:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80048ae:	4b4d      	ldr	r3, [pc, #308]	@ (80049e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d028      	beq.n	800490c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048ba:	4b4a      	ldr	r3, [pc, #296]	@ (80049e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	099b      	lsrs	r3, r3, #6
 80048c0:	2200      	movs	r2, #0
 80048c2:	623b      	str	r3, [r7, #32]
 80048c4:	627a      	str	r2, [r7, #36]	@ 0x24
 80048c6:	6a3b      	ldr	r3, [r7, #32]
 80048c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80048cc:	2100      	movs	r1, #0
 80048ce:	4b47      	ldr	r3, [pc, #284]	@ (80049ec <HAL_RCC_GetSysClockFreq+0x188>)
 80048d0:	fb03 f201 	mul.w	r2, r3, r1
 80048d4:	2300      	movs	r3, #0
 80048d6:	fb00 f303 	mul.w	r3, r0, r3
 80048da:	4413      	add	r3, r2
 80048dc:	4a43      	ldr	r2, [pc, #268]	@ (80049ec <HAL_RCC_GetSysClockFreq+0x188>)
 80048de:	fba0 1202 	umull	r1, r2, r0, r2
 80048e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048e4:	460a      	mov	r2, r1
 80048e6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80048e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048ea:	4413      	add	r3, r2
 80048ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048f0:	2200      	movs	r2, #0
 80048f2:	61bb      	str	r3, [r7, #24]
 80048f4:	61fa      	str	r2, [r7, #28]
 80048f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80048fe:	f7fb fc9b 	bl	8000238 <__aeabi_uldivmod>
 8004902:	4602      	mov	r2, r0
 8004904:	460b      	mov	r3, r1
 8004906:	4613      	mov	r3, r2
 8004908:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800490a:	e053      	b.n	80049b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800490c:	4b35      	ldr	r3, [pc, #212]	@ (80049e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	099b      	lsrs	r3, r3, #6
 8004912:	2200      	movs	r2, #0
 8004914:	613b      	str	r3, [r7, #16]
 8004916:	617a      	str	r2, [r7, #20]
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800491e:	f04f 0b00 	mov.w	fp, #0
 8004922:	4652      	mov	r2, sl
 8004924:	465b      	mov	r3, fp
 8004926:	f04f 0000 	mov.w	r0, #0
 800492a:	f04f 0100 	mov.w	r1, #0
 800492e:	0159      	lsls	r1, r3, #5
 8004930:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004934:	0150      	lsls	r0, r2, #5
 8004936:	4602      	mov	r2, r0
 8004938:	460b      	mov	r3, r1
 800493a:	ebb2 080a 	subs.w	r8, r2, sl
 800493e:	eb63 090b 	sbc.w	r9, r3, fp
 8004942:	f04f 0200 	mov.w	r2, #0
 8004946:	f04f 0300 	mov.w	r3, #0
 800494a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800494e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004952:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004956:	ebb2 0408 	subs.w	r4, r2, r8
 800495a:	eb63 0509 	sbc.w	r5, r3, r9
 800495e:	f04f 0200 	mov.w	r2, #0
 8004962:	f04f 0300 	mov.w	r3, #0
 8004966:	00eb      	lsls	r3, r5, #3
 8004968:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800496c:	00e2      	lsls	r2, r4, #3
 800496e:	4614      	mov	r4, r2
 8004970:	461d      	mov	r5, r3
 8004972:	eb14 030a 	adds.w	r3, r4, sl
 8004976:	603b      	str	r3, [r7, #0]
 8004978:	eb45 030b 	adc.w	r3, r5, fp
 800497c:	607b      	str	r3, [r7, #4]
 800497e:	f04f 0200 	mov.w	r2, #0
 8004982:	f04f 0300 	mov.w	r3, #0
 8004986:	e9d7 4500 	ldrd	r4, r5, [r7]
 800498a:	4629      	mov	r1, r5
 800498c:	028b      	lsls	r3, r1, #10
 800498e:	4621      	mov	r1, r4
 8004990:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004994:	4621      	mov	r1, r4
 8004996:	028a      	lsls	r2, r1, #10
 8004998:	4610      	mov	r0, r2
 800499a:	4619      	mov	r1, r3
 800499c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800499e:	2200      	movs	r2, #0
 80049a0:	60bb      	str	r3, [r7, #8]
 80049a2:	60fa      	str	r2, [r7, #12]
 80049a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049a8:	f7fb fc46 	bl	8000238 <__aeabi_uldivmod>
 80049ac:	4602      	mov	r2, r0
 80049ae:	460b      	mov	r3, r1
 80049b0:	4613      	mov	r3, r2
 80049b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80049b4:	4b0b      	ldr	r3, [pc, #44]	@ (80049e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	0c1b      	lsrs	r3, r3, #16
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	3301      	adds	r3, #1
 80049c0:	005b      	lsls	r3, r3, #1
 80049c2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80049c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80049c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049cc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80049ce:	e002      	b.n	80049d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049d0:	4b05      	ldr	r3, [pc, #20]	@ (80049e8 <HAL_RCC_GetSysClockFreq+0x184>)
 80049d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80049d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3740      	adds	r7, #64	@ 0x40
 80049dc:	46bd      	mov	sp, r7
 80049de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049e2:	bf00      	nop
 80049e4:	40023800 	.word	0x40023800
 80049e8:	00f42400 	.word	0x00f42400
 80049ec:	01312d00 	.word	0x01312d00

080049f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b088      	sub	sp, #32
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80049f8:	2300      	movs	r3, #0
 80049fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80049fc:	2300      	movs	r3, #0
 80049fe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004a00:	2300      	movs	r3, #0
 8004a02:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004a04:	2300      	movs	r3, #0
 8004a06:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d012      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a18:	4b69      	ldr	r3, [pc, #420]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	4a68      	ldr	r2, [pc, #416]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a1e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004a22:	6093      	str	r3, [r2, #8]
 8004a24:	4b66      	ldr	r3, [pc, #408]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a2c:	4964      	ldr	r1, [pc, #400]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d017      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a4a:	4b5d      	ldr	r3, [pc, #372]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a50:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a58:	4959      	ldr	r1, [pc, #356]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a68:	d101      	bne.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d101      	bne.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004a76:	2301      	movs	r3, #1
 8004a78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d017      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a86:	4b4e      	ldr	r3, [pc, #312]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a8c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a94:	494a      	ldr	r1, [pc, #296]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004aa4:	d101      	bne.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0320 	and.w	r3, r3, #32
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f000 808b 	beq.w	8004bea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ad4:	4b3a      	ldr	r3, [pc, #232]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad8:	4a39      	ldr	r2, [pc, #228]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ada:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ade:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ae0:	4b37      	ldr	r3, [pc, #220]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ae8:	60bb      	str	r3, [r7, #8]
 8004aea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004aec:	4b35      	ldr	r3, [pc, #212]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a34      	ldr	r2, [pc, #208]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004af2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004af6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004af8:	f7fd fb06 	bl	8002108 <HAL_GetTick>
 8004afc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004afe:	e008      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b00:	f7fd fb02 	bl	8002108 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	2b64      	cmp	r3, #100	@ 0x64
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e38f      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004b12:	4b2c      	ldr	r3, [pc, #176]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d0f0      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b1e:	4b28      	ldr	r3, [pc, #160]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b26:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d035      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d02e      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b3c:	4b20      	ldr	r3, [pc, #128]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b44:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b46:	4b1e      	ldr	r3, [pc, #120]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b4a:	4a1d      	ldr	r2, [pc, #116]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b50:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b52:	4b1b      	ldr	r3, [pc, #108]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b56:	4a1a      	ldr	r2, [pc, #104]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b5c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004b5e:	4a18      	ldr	r2, [pc, #96]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b64:	4b16      	ldr	r3, [pc, #88]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d114      	bne.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b70:	f7fd faca 	bl	8002108 <HAL_GetTick>
 8004b74:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b76:	e00a      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b78:	f7fd fac6 	bl	8002108 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d901      	bls.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e351      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d0ee      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ba2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ba6:	d111      	bne.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004ba8:	4b05      	ldr	r3, [pc, #20]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004bb4:	4b04      	ldr	r3, [pc, #16]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004bb6:	400b      	ands	r3, r1
 8004bb8:	4901      	ldr	r1, [pc, #4]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	608b      	str	r3, [r1, #8]
 8004bbe:	e00b      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004bc0:	40023800 	.word	0x40023800
 8004bc4:	40007000 	.word	0x40007000
 8004bc8:	0ffffcff 	.word	0x0ffffcff
 8004bcc:	4bac      	ldr	r3, [pc, #688]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	4aab      	ldr	r2, [pc, #684]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bd2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004bd6:	6093      	str	r3, [r2, #8]
 8004bd8:	4ba9      	ldr	r3, [pc, #676]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bda:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004be4:	49a6      	ldr	r1, [pc, #664]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0310 	and.w	r3, r3, #16
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d010      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004bf6:	4ba2      	ldr	r3, [pc, #648]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bfc:	4aa0      	ldr	r2, [pc, #640]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bfe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c02:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004c06:	4b9e      	ldr	r3, [pc, #632]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c08:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c10:	499b      	ldr	r1, [pc, #620]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00a      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c24:	4b96      	ldr	r3, [pc, #600]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c2a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c32:	4993      	ldr	r1, [pc, #588]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00a      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c46:	4b8e      	ldr	r3, [pc, #568]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c4c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c54:	498a      	ldr	r1, [pc, #552]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00a      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c68:	4b85      	ldr	r3, [pc, #532]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c6e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c76:	4982      	ldr	r1, [pc, #520]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00a      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c8a:	4b7d      	ldr	r3, [pc, #500]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c90:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c98:	4979      	ldr	r1, [pc, #484]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00a      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cac:	4b74      	ldr	r3, [pc, #464]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cb2:	f023 0203 	bic.w	r2, r3, #3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cba:	4971      	ldr	r1, [pc, #452]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00a      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cce:	4b6c      	ldr	r3, [pc, #432]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cd4:	f023 020c 	bic.w	r2, r3, #12
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cdc:	4968      	ldr	r1, [pc, #416]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00a      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cf0:	4b63      	ldr	r3, [pc, #396]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cf6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cfe:	4960      	ldr	r1, [pc, #384]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00a      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d12:	4b5b      	ldr	r3, [pc, #364]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d18:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d20:	4957      	ldr	r1, [pc, #348]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00a      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d34:	4b52      	ldr	r3, [pc, #328]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d3a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d42:	494f      	ldr	r1, [pc, #316]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00a      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004d56:	4b4a      	ldr	r3, [pc, #296]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d5c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d64:	4946      	ldr	r1, [pc, #280]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00a      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004d78:	4b41      	ldr	r3, [pc, #260]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d7e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d86:	493e      	ldr	r1, [pc, #248]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00a      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004d9a:	4b39      	ldr	r3, [pc, #228]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004da0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004da8:	4935      	ldr	r1, [pc, #212]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00a      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004dbc:	4b30      	ldr	r3, [pc, #192]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dc2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004dca:	492d      	ldr	r1, [pc, #180]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d011      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004dde:	4b28      	ldr	r3, [pc, #160]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004de4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004dec:	4924      	ldr	r1, [pc, #144]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004df8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004dfc:	d101      	bne.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0308 	and.w	r3, r3, #8
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d001      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00a      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e1e:	4b18      	ldr	r3, [pc, #96]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e24:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e2c:	4914      	ldr	r1, [pc, #80]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00b      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e40:	4b0f      	ldr	r3, [pc, #60]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e46:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e50:	490b      	ldr	r1, [pc, #44]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00f      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004e64:	4b06      	ldr	r3, [pc, #24]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e6a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e74:	4902      	ldr	r1, [pc, #8]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004e7c:	e002      	b.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004e7e:	bf00      	nop
 8004e80:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00b      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e90:	4b8a      	ldr	r3, [pc, #552]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e96:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ea0:	4986      	ldr	r1, [pc, #536]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00b      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004eb4:	4b81      	ldr	r3, [pc, #516]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004eba:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ec4:	497d      	ldr	r1, [pc, #500]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d006      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	f000 80d6 	beq.w	800508c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ee0:	4b76      	ldr	r3, [pc, #472]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a75      	ldr	r2, [pc, #468]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ee6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004eea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eec:	f7fd f90c 	bl	8002108 <HAL_GetTick>
 8004ef0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ef2:	e008      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ef4:	f7fd f908 	bl	8002108 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b64      	cmp	r3, #100	@ 0x64
 8004f00:	d901      	bls.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e195      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f06:	4b6d      	ldr	r3, [pc, #436]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1f0      	bne.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d021      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d11d      	bne.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f26:	4b65      	ldr	r3, [pc, #404]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f2c:	0c1b      	lsrs	r3, r3, #16
 8004f2e:	f003 0303 	and.w	r3, r3, #3
 8004f32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f34:	4b61      	ldr	r3, [pc, #388]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f3a:	0e1b      	lsrs	r3, r3, #24
 8004f3c:	f003 030f 	and.w	r3, r3, #15
 8004f40:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	019a      	lsls	r2, r3, #6
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	041b      	lsls	r3, r3, #16
 8004f4c:	431a      	orrs	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	061b      	lsls	r3, r3, #24
 8004f52:	431a      	orrs	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	071b      	lsls	r3, r3, #28
 8004f5a:	4958      	ldr	r1, [pc, #352]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d004      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f76:	d00a      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d02e      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f8c:	d129      	bne.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f8e:	4b4b      	ldr	r3, [pc, #300]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f94:	0c1b      	lsrs	r3, r3, #16
 8004f96:	f003 0303 	and.w	r3, r3, #3
 8004f9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f9c:	4b47      	ldr	r3, [pc, #284]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fa2:	0f1b      	lsrs	r3, r3, #28
 8004fa4:	f003 0307 	and.w	r3, r3, #7
 8004fa8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	019a      	lsls	r2, r3, #6
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	041b      	lsls	r3, r3, #16
 8004fb4:	431a      	orrs	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	061b      	lsls	r3, r3, #24
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	071b      	lsls	r3, r3, #28
 8004fc2:	493e      	ldr	r1, [pc, #248]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004fca:	4b3c      	ldr	r3, [pc, #240]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fd0:	f023 021f 	bic.w	r2, r3, #31
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	4938      	ldr	r1, [pc, #224]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d01d      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004fee:	4b33      	ldr	r3, [pc, #204]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ff0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ff4:	0e1b      	lsrs	r3, r3, #24
 8004ff6:	f003 030f 	and.w	r3, r3, #15
 8004ffa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ffc:	4b2f      	ldr	r3, [pc, #188]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005002:	0f1b      	lsrs	r3, r3, #28
 8005004:	f003 0307 	and.w	r3, r3, #7
 8005008:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	019a      	lsls	r2, r3, #6
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	041b      	lsls	r3, r3, #16
 8005016:	431a      	orrs	r2, r3
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	061b      	lsls	r3, r3, #24
 800501c:	431a      	orrs	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	071b      	lsls	r3, r3, #28
 8005022:	4926      	ldr	r1, [pc, #152]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005024:	4313      	orrs	r3, r2
 8005026:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d011      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	019a      	lsls	r2, r3, #6
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	041b      	lsls	r3, r3, #16
 8005042:	431a      	orrs	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	061b      	lsls	r3, r3, #24
 800504a:	431a      	orrs	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	071b      	lsls	r3, r3, #28
 8005052:	491a      	ldr	r1, [pc, #104]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005054:	4313      	orrs	r3, r2
 8005056:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800505a:	4b18      	ldr	r3, [pc, #96]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a17      	ldr	r2, [pc, #92]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005060:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005064:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005066:	f7fd f84f 	bl	8002108 <HAL_GetTick>
 800506a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800506c:	e008      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800506e:	f7fd f84b 	bl	8002108 <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	2b64      	cmp	r3, #100	@ 0x64
 800507a:	d901      	bls.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e0d8      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005080:	4b0e      	ldr	r3, [pc, #56]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d0f0      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	2b01      	cmp	r3, #1
 8005090:	f040 80ce 	bne.w	8005230 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005094:	4b09      	ldr	r3, [pc, #36]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a08      	ldr	r2, [pc, #32]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800509a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800509e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050a0:	f7fd f832 	bl	8002108 <HAL_GetTick>
 80050a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80050a6:	e00b      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80050a8:	f7fd f82e 	bl	8002108 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b64      	cmp	r3, #100	@ 0x64
 80050b4:	d904      	bls.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e0bb      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80050ba:	bf00      	nop
 80050bc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80050c0:	4b5e      	ldr	r3, [pc, #376]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80050cc:	d0ec      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d003      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d009      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d02e      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d12a      	bne.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80050f6:	4b51      	ldr	r3, [pc, #324]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050fc:	0c1b      	lsrs	r3, r3, #16
 80050fe:	f003 0303 	and.w	r3, r3, #3
 8005102:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005104:	4b4d      	ldr	r3, [pc, #308]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800510a:	0f1b      	lsrs	r3, r3, #28
 800510c:	f003 0307 	and.w	r3, r3, #7
 8005110:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	019a      	lsls	r2, r3, #6
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	041b      	lsls	r3, r3, #16
 800511c:	431a      	orrs	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	061b      	lsls	r3, r3, #24
 8005124:	431a      	orrs	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	071b      	lsls	r3, r3, #28
 800512a:	4944      	ldr	r1, [pc, #272]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800512c:	4313      	orrs	r3, r2
 800512e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005132:	4b42      	ldr	r3, [pc, #264]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005134:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005138:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005140:	3b01      	subs	r3, #1
 8005142:	021b      	lsls	r3, r3, #8
 8005144:	493d      	ldr	r1, [pc, #244]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005146:	4313      	orrs	r3, r2
 8005148:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d022      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800515c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005160:	d11d      	bne.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005162:	4b36      	ldr	r3, [pc, #216]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005168:	0e1b      	lsrs	r3, r3, #24
 800516a:	f003 030f 	and.w	r3, r3, #15
 800516e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005170:	4b32      	ldr	r3, [pc, #200]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005176:	0f1b      	lsrs	r3, r3, #28
 8005178:	f003 0307 	and.w	r3, r3, #7
 800517c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	019a      	lsls	r2, r3, #6
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a1b      	ldr	r3, [r3, #32]
 8005188:	041b      	lsls	r3, r3, #16
 800518a:	431a      	orrs	r2, r3
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	061b      	lsls	r3, r3, #24
 8005190:	431a      	orrs	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	071b      	lsls	r3, r3, #28
 8005196:	4929      	ldr	r1, [pc, #164]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005198:	4313      	orrs	r3, r2
 800519a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0308 	and.w	r3, r3, #8
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d028      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80051aa:	4b24      	ldr	r3, [pc, #144]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051b0:	0e1b      	lsrs	r3, r3, #24
 80051b2:	f003 030f 	and.w	r3, r3, #15
 80051b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80051b8:	4b20      	ldr	r3, [pc, #128]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051be:	0c1b      	lsrs	r3, r3, #16
 80051c0:	f003 0303 	and.w	r3, r3, #3
 80051c4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	019a      	lsls	r2, r3, #6
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	041b      	lsls	r3, r3, #16
 80051d0:	431a      	orrs	r2, r3
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	061b      	lsls	r3, r3, #24
 80051d6:	431a      	orrs	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	69db      	ldr	r3, [r3, #28]
 80051dc:	071b      	lsls	r3, r3, #28
 80051de:	4917      	ldr	r1, [pc, #92]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80051e6:	4b15      	ldr	r3, [pc, #84]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80051ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f4:	4911      	ldr	r1, [pc, #68]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80051fc:	4b0f      	ldr	r3, [pc, #60]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a0e      	ldr	r2, [pc, #56]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005202:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005206:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005208:	f7fc ff7e 	bl	8002108 <HAL_GetTick>
 800520c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800520e:	e008      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005210:	f7fc ff7a 	bl	8002108 <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	2b64      	cmp	r3, #100	@ 0x64
 800521c:	d901      	bls.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e007      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005222:	4b06      	ldr	r3, [pc, #24]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800522a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800522e:	d1ef      	bne.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3720      	adds	r7, #32
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	40023800 	.word	0x40023800

08005240 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d101      	bne.n	8005252 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e049      	b.n	80052e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	d106      	bne.n	800526c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f7fc fd46 	bl	8001cf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2202      	movs	r2, #2
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	3304      	adds	r3, #4
 800527c:	4619      	mov	r1, r3
 800527e:	4610      	mov	r0, r2
 8005280:	f000 fe0c 	bl	8005e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3708      	adds	r7, #8
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
	...

080052f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b01      	cmp	r3, #1
 8005302:	d001      	beq.n	8005308 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e054      	b.n	80053b2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2202      	movs	r2, #2
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68da      	ldr	r2, [r3, #12]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f042 0201 	orr.w	r2, r2, #1
 800531e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a26      	ldr	r2, [pc, #152]	@ (80053c0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d022      	beq.n	8005370 <HAL_TIM_Base_Start_IT+0x80>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005332:	d01d      	beq.n	8005370 <HAL_TIM_Base_Start_IT+0x80>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a22      	ldr	r2, [pc, #136]	@ (80053c4 <HAL_TIM_Base_Start_IT+0xd4>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d018      	beq.n	8005370 <HAL_TIM_Base_Start_IT+0x80>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a21      	ldr	r2, [pc, #132]	@ (80053c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d013      	beq.n	8005370 <HAL_TIM_Base_Start_IT+0x80>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a1f      	ldr	r2, [pc, #124]	@ (80053cc <HAL_TIM_Base_Start_IT+0xdc>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d00e      	beq.n	8005370 <HAL_TIM_Base_Start_IT+0x80>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a1e      	ldr	r2, [pc, #120]	@ (80053d0 <HAL_TIM_Base_Start_IT+0xe0>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d009      	beq.n	8005370 <HAL_TIM_Base_Start_IT+0x80>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a1c      	ldr	r2, [pc, #112]	@ (80053d4 <HAL_TIM_Base_Start_IT+0xe4>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d004      	beq.n	8005370 <HAL_TIM_Base_Start_IT+0x80>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a1b      	ldr	r2, [pc, #108]	@ (80053d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d115      	bne.n	800539c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	689a      	ldr	r2, [r3, #8]
 8005376:	4b19      	ldr	r3, [pc, #100]	@ (80053dc <HAL_TIM_Base_Start_IT+0xec>)
 8005378:	4013      	ands	r3, r2
 800537a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2b06      	cmp	r3, #6
 8005380:	d015      	beq.n	80053ae <HAL_TIM_Base_Start_IT+0xbe>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005388:	d011      	beq.n	80053ae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f042 0201 	orr.w	r2, r2, #1
 8005398:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800539a:	e008      	b.n	80053ae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f042 0201 	orr.w	r2, r2, #1
 80053aa:	601a      	str	r2, [r3, #0]
 80053ac:	e000      	b.n	80053b0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3714      	adds	r7, #20
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	40010000 	.word	0x40010000
 80053c4:	40000400 	.word	0x40000400
 80053c8:	40000800 	.word	0x40000800
 80053cc:	40000c00 	.word	0x40000c00
 80053d0:	40010400 	.word	0x40010400
 80053d4:	40014000 	.word	0x40014000
 80053d8:	40001800 	.word	0x40001800
 80053dc:	00010007 	.word	0x00010007

080053e0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e049      	b.n	8005486 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d106      	bne.n	800540c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f841 	bl	800548e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2202      	movs	r2, #2
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	3304      	adds	r3, #4
 800541c:	4619      	mov	r1, r3
 800541e:	4610      	mov	r0, r2
 8005420:	f000 fd3c 	bl	8005e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3708      	adds	r7, #8
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800548e:	b480      	push	{r7}
 8005490:	b083      	sub	sp, #12
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005496:	bf00      	nop
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b082      	sub	sp, #8
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d101      	bne.n	80054b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e049      	b.n	8005548 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d106      	bne.n	80054ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 f841 	bl	8005550 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2202      	movs	r2, #2
 80054d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	3304      	adds	r3, #4
 80054de:	4619      	mov	r1, r3
 80054e0:	4610      	mov	r0, r2
 80054e2:	f000 fcdb 	bl	8005e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2201      	movs	r2, #1
 8005502:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2201      	movs	r2, #1
 800552a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2201      	movs	r2, #1
 8005532:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2201      	movs	r2, #1
 8005542:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3708      	adds	r7, #8
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e049      	b.n	800560a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d106      	bne.n	8005590 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7fc fc0a 	bl	8001da4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	3304      	adds	r3, #4
 80055a0:	4619      	mov	r1, r3
 80055a2:	4610      	mov	r0, r2
 80055a4:	f000 fc7a 	bl	8005e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3708      	adds	r7, #8
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005612:	b580      	push	{r7, lr}
 8005614:	b082      	sub	sp, #8
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	f003 0302 	and.w	r3, r3, #2
 8005624:	2b02      	cmp	r3, #2
 8005626:	d122      	bne.n	800566e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	f003 0302 	and.w	r3, r3, #2
 8005632:	2b02      	cmp	r3, #2
 8005634:	d11b      	bne.n	800566e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f06f 0202 	mvn.w	r2, #2
 800563e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	f003 0303 	and.w	r3, r3, #3
 8005650:	2b00      	cmp	r3, #0
 8005652:	d003      	beq.n	800565c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 fc03 	bl	8005e60 <HAL_TIM_IC_CaptureCallback>
 800565a:	e005      	b.n	8005668 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 fbf5 	bl	8005e4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 fc06 	bl	8005e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	f003 0304 	and.w	r3, r3, #4
 8005678:	2b04      	cmp	r3, #4
 800567a:	d122      	bne.n	80056c2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	f003 0304 	and.w	r3, r3, #4
 8005686:	2b04      	cmp	r3, #4
 8005688:	d11b      	bne.n	80056c2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f06f 0204 	mvn.w	r2, #4
 8005692:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2202      	movs	r2, #2
 8005698:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d003      	beq.n	80056b0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 fbd9 	bl	8005e60 <HAL_TIM_IC_CaptureCallback>
 80056ae:	e005      	b.n	80056bc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 fbcb 	bl	8005e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 fbdc 	bl	8005e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	f003 0308 	and.w	r3, r3, #8
 80056cc:	2b08      	cmp	r3, #8
 80056ce:	d122      	bne.n	8005716 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	f003 0308 	and.w	r3, r3, #8
 80056da:	2b08      	cmp	r3, #8
 80056dc:	d11b      	bne.n	8005716 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f06f 0208 	mvn.w	r2, #8
 80056e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2204      	movs	r2, #4
 80056ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	69db      	ldr	r3, [r3, #28]
 80056f4:	f003 0303 	and.w	r3, r3, #3
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d003      	beq.n	8005704 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 fbaf 	bl	8005e60 <HAL_TIM_IC_CaptureCallback>
 8005702:	e005      	b.n	8005710 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 fba1 	bl	8005e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 fbb2 	bl	8005e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	f003 0310 	and.w	r3, r3, #16
 8005720:	2b10      	cmp	r3, #16
 8005722:	d122      	bne.n	800576a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	f003 0310 	and.w	r3, r3, #16
 800572e:	2b10      	cmp	r3, #16
 8005730:	d11b      	bne.n	800576a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f06f 0210 	mvn.w	r2, #16
 800573a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2208      	movs	r2, #8
 8005740:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	69db      	ldr	r3, [r3, #28]
 8005748:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800574c:	2b00      	cmp	r3, #0
 800574e:	d003      	beq.n	8005758 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 fb85 	bl	8005e60 <HAL_TIM_IC_CaptureCallback>
 8005756:	e005      	b.n	8005764 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 fb77 	bl	8005e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 fb88 	bl	8005e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	f003 0301 	and.w	r3, r3, #1
 8005774:	2b01      	cmp	r3, #1
 8005776:	d10e      	bne.n	8005796 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b01      	cmp	r3, #1
 8005784:	d107      	bne.n	8005796 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f06f 0201 	mvn.w	r2, #1
 800578e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 fb51 	bl	8005e38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057a0:	2b80      	cmp	r3, #128	@ 0x80
 80057a2:	d10e      	bne.n	80057c2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057ae:	2b80      	cmp	r3, #128	@ 0x80
 80057b0:	d107      	bne.n	80057c2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80057ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f001 f945 	bl	8006a4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057d0:	d10e      	bne.n	80057f0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057dc:	2b80      	cmp	r3, #128	@ 0x80
 80057de:	d107      	bne.n	80057f0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80057e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f001 f938 	bl	8006a60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057fa:	2b40      	cmp	r3, #64	@ 0x40
 80057fc:	d10e      	bne.n	800581c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005808:	2b40      	cmp	r3, #64	@ 0x40
 800580a:	d107      	bne.n	800581c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 fb36 	bl	8005e88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	f003 0320 	and.w	r3, r3, #32
 8005826:	2b20      	cmp	r3, #32
 8005828:	d10e      	bne.n	8005848 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	f003 0320 	and.w	r3, r3, #32
 8005834:	2b20      	cmp	r3, #32
 8005836:	d107      	bne.n	8005848 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f06f 0220 	mvn.w	r2, #32
 8005840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f001 f8f8 	bl	8006a38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005848:	bf00      	nop
 800584a:	3708      	adds	r7, #8
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b086      	sub	sp, #24
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800585c:	2300      	movs	r3, #0
 800585e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005866:	2b01      	cmp	r3, #1
 8005868:	d101      	bne.n	800586e <HAL_TIM_OC_ConfigChannel+0x1e>
 800586a:	2302      	movs	r3, #2
 800586c:	e066      	b.n	800593c <HAL_TIM_OC_ConfigChannel+0xec>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2b14      	cmp	r3, #20
 800587a:	d857      	bhi.n	800592c <HAL_TIM_OC_ConfigChannel+0xdc>
 800587c:	a201      	add	r2, pc, #4	@ (adr r2, 8005884 <HAL_TIM_OC_ConfigChannel+0x34>)
 800587e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005882:	bf00      	nop
 8005884:	080058d9 	.word	0x080058d9
 8005888:	0800592d 	.word	0x0800592d
 800588c:	0800592d 	.word	0x0800592d
 8005890:	0800592d 	.word	0x0800592d
 8005894:	080058e7 	.word	0x080058e7
 8005898:	0800592d 	.word	0x0800592d
 800589c:	0800592d 	.word	0x0800592d
 80058a0:	0800592d 	.word	0x0800592d
 80058a4:	080058f5 	.word	0x080058f5
 80058a8:	0800592d 	.word	0x0800592d
 80058ac:	0800592d 	.word	0x0800592d
 80058b0:	0800592d 	.word	0x0800592d
 80058b4:	08005903 	.word	0x08005903
 80058b8:	0800592d 	.word	0x0800592d
 80058bc:	0800592d 	.word	0x0800592d
 80058c0:	0800592d 	.word	0x0800592d
 80058c4:	08005911 	.word	0x08005911
 80058c8:	0800592d 	.word	0x0800592d
 80058cc:	0800592d 	.word	0x0800592d
 80058d0:	0800592d 	.word	0x0800592d
 80058d4:	0800591f 	.word	0x0800591f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68b9      	ldr	r1, [r7, #8]
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 fb7c 	bl	8005fdc <TIM_OC1_SetConfig>
      break;
 80058e4:	e025      	b.n	8005932 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68b9      	ldr	r1, [r7, #8]
 80058ec:	4618      	mov	r0, r3
 80058ee:	f000 fbe7 	bl	80060c0 <TIM_OC2_SetConfig>
      break;
 80058f2:	e01e      	b.n	8005932 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68b9      	ldr	r1, [r7, #8]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 fc58 	bl	80061b0 <TIM_OC3_SetConfig>
      break;
 8005900:	e017      	b.n	8005932 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68b9      	ldr	r1, [r7, #8]
 8005908:	4618      	mov	r0, r3
 800590a:	f000 fcc7 	bl	800629c <TIM_OC4_SetConfig>
      break;
 800590e:	e010      	b.n	8005932 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68b9      	ldr	r1, [r7, #8]
 8005916:	4618      	mov	r0, r3
 8005918:	f000 fd18 	bl	800634c <TIM_OC5_SetConfig>
      break;
 800591c:	e009      	b.n	8005932 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68b9      	ldr	r1, [r7, #8]
 8005924:	4618      	mov	r0, r3
 8005926:	f000 fd63 	bl	80063f0 <TIM_OC6_SetConfig>
      break;
 800592a:	e002      	b.n	8005932 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	75fb      	strb	r3, [r7, #23]
      break;
 8005930:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800593a:	7dfb      	ldrb	r3, [r7, #23]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3718      	adds	r7, #24
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b086      	sub	sp, #24
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005950:	2300      	movs	r3, #0
 8005952:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800595a:	2b01      	cmp	r3, #1
 800595c:	d101      	bne.n	8005962 <HAL_TIM_IC_ConfigChannel+0x1e>
 800595e:	2302      	movs	r3, #2
 8005960:	e088      	b.n	8005a74 <HAL_TIM_IC_ConfigChannel+0x130>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d11b      	bne.n	80059a8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005980:	f000 fd8a 	bl	8006498 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	699a      	ldr	r2, [r3, #24]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f022 020c 	bic.w	r2, r2, #12
 8005992:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6999      	ldr	r1, [r3, #24]
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	689a      	ldr	r2, [r3, #8]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	430a      	orrs	r2, r1
 80059a4:	619a      	str	r2, [r3, #24]
 80059a6:	e060      	b.n	8005a6a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b04      	cmp	r3, #4
 80059ac:	d11c      	bne.n	80059e8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80059be:	f000 fe0e 	bl	80065de <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	699a      	ldr	r2, [r3, #24]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80059d0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	6999      	ldr	r1, [r3, #24]
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	021a      	lsls	r2, r3, #8
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	430a      	orrs	r2, r1
 80059e4:	619a      	str	r2, [r3, #24]
 80059e6:	e040      	b.n	8005a6a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b08      	cmp	r3, #8
 80059ec:	d11b      	bne.n	8005a26 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80059fe:	f000 fe5b 	bl	80066b8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	69da      	ldr	r2, [r3, #28]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f022 020c 	bic.w	r2, r2, #12
 8005a10:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	69d9      	ldr	r1, [r3, #28]
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	689a      	ldr	r2, [r3, #8]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	430a      	orrs	r2, r1
 8005a22:	61da      	str	r2, [r3, #28]
 8005a24:	e021      	b.n	8005a6a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2b0c      	cmp	r3, #12
 8005a2a:	d11c      	bne.n	8005a66 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005a3c:	f000 fe78 	bl	8006730 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	69da      	ldr	r2, [r3, #28]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005a4e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	69d9      	ldr	r1, [r3, #28]
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	021a      	lsls	r2, r3, #8
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	430a      	orrs	r2, r1
 8005a62:	61da      	str	r2, [r3, #28]
 8005a64:	e001      	b.n	8005a6a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3718      	adds	r7, #24
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d101      	bne.n	8005a9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a96:	2302      	movs	r3, #2
 8005a98:	e0ff      	b.n	8005c9a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2b14      	cmp	r3, #20
 8005aa6:	f200 80f0 	bhi.w	8005c8a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8005ab0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab0:	08005b05 	.word	0x08005b05
 8005ab4:	08005c8b 	.word	0x08005c8b
 8005ab8:	08005c8b 	.word	0x08005c8b
 8005abc:	08005c8b 	.word	0x08005c8b
 8005ac0:	08005b45 	.word	0x08005b45
 8005ac4:	08005c8b 	.word	0x08005c8b
 8005ac8:	08005c8b 	.word	0x08005c8b
 8005acc:	08005c8b 	.word	0x08005c8b
 8005ad0:	08005b87 	.word	0x08005b87
 8005ad4:	08005c8b 	.word	0x08005c8b
 8005ad8:	08005c8b 	.word	0x08005c8b
 8005adc:	08005c8b 	.word	0x08005c8b
 8005ae0:	08005bc7 	.word	0x08005bc7
 8005ae4:	08005c8b 	.word	0x08005c8b
 8005ae8:	08005c8b 	.word	0x08005c8b
 8005aec:	08005c8b 	.word	0x08005c8b
 8005af0:	08005c09 	.word	0x08005c09
 8005af4:	08005c8b 	.word	0x08005c8b
 8005af8:	08005c8b 	.word	0x08005c8b
 8005afc:	08005c8b 	.word	0x08005c8b
 8005b00:	08005c49 	.word	0x08005c49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68b9      	ldr	r1, [r7, #8]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f000 fa66 	bl	8005fdc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	699a      	ldr	r2, [r3, #24]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f042 0208 	orr.w	r2, r2, #8
 8005b1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	699a      	ldr	r2, [r3, #24]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f022 0204 	bic.w	r2, r2, #4
 8005b2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6999      	ldr	r1, [r3, #24]
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	691a      	ldr	r2, [r3, #16]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	430a      	orrs	r2, r1
 8005b40:	619a      	str	r2, [r3, #24]
      break;
 8005b42:	e0a5      	b.n	8005c90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68b9      	ldr	r1, [r7, #8]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f000 fab8 	bl	80060c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	699a      	ldr	r2, [r3, #24]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	699a      	ldr	r2, [r3, #24]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6999      	ldr	r1, [r3, #24]
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	021a      	lsls	r2, r3, #8
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	430a      	orrs	r2, r1
 8005b82:	619a      	str	r2, [r3, #24]
      break;
 8005b84:	e084      	b.n	8005c90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68b9      	ldr	r1, [r7, #8]
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f000 fb0f 	bl	80061b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	69da      	ldr	r2, [r3, #28]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f042 0208 	orr.w	r2, r2, #8
 8005ba0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	69da      	ldr	r2, [r3, #28]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f022 0204 	bic.w	r2, r2, #4
 8005bb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	69d9      	ldr	r1, [r3, #28]
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	691a      	ldr	r2, [r3, #16]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	61da      	str	r2, [r3, #28]
      break;
 8005bc4:	e064      	b.n	8005c90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68b9      	ldr	r1, [r7, #8]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f000 fb65 	bl	800629c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	69da      	ldr	r2, [r3, #28]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005be0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	69da      	ldr	r2, [r3, #28]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	69d9      	ldr	r1, [r3, #28]
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	021a      	lsls	r2, r3, #8
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	430a      	orrs	r2, r1
 8005c04:	61da      	str	r2, [r3, #28]
      break;
 8005c06:	e043      	b.n	8005c90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68b9      	ldr	r1, [r7, #8]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 fb9c 	bl	800634c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f042 0208 	orr.w	r2, r2, #8
 8005c22:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f022 0204 	bic.w	r2, r2, #4
 8005c32:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	691a      	ldr	r2, [r3, #16]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005c46:	e023      	b.n	8005c90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68b9      	ldr	r1, [r7, #8]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 fbce 	bl	80063f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c62:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c72:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	021a      	lsls	r2, r3, #8
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	430a      	orrs	r2, r1
 8005c86:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005c88:	e002      	b.n	8005c90 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	75fb      	strb	r3, [r7, #23]
      break;
 8005c8e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3718      	adds	r7, #24
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop

08005ca4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d101      	bne.n	8005cc0 <HAL_TIM_ConfigClockSource+0x1c>
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	e0b4      	b.n	8005e2a <HAL_TIM_ConfigClockSource+0x186>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2202      	movs	r2, #2
 8005ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	4b56      	ldr	r3, [pc, #344]	@ (8005e34 <HAL_TIM_ConfigClockSource+0x190>)
 8005cdc:	4013      	ands	r3, r2
 8005cde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ce6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cf8:	d03e      	beq.n	8005d78 <HAL_TIM_ConfigClockSource+0xd4>
 8005cfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cfe:	f200 8087 	bhi.w	8005e10 <HAL_TIM_ConfigClockSource+0x16c>
 8005d02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d06:	f000 8086 	beq.w	8005e16 <HAL_TIM_ConfigClockSource+0x172>
 8005d0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d0e:	d87f      	bhi.n	8005e10 <HAL_TIM_ConfigClockSource+0x16c>
 8005d10:	2b70      	cmp	r3, #112	@ 0x70
 8005d12:	d01a      	beq.n	8005d4a <HAL_TIM_ConfigClockSource+0xa6>
 8005d14:	2b70      	cmp	r3, #112	@ 0x70
 8005d16:	d87b      	bhi.n	8005e10 <HAL_TIM_ConfigClockSource+0x16c>
 8005d18:	2b60      	cmp	r3, #96	@ 0x60
 8005d1a:	d050      	beq.n	8005dbe <HAL_TIM_ConfigClockSource+0x11a>
 8005d1c:	2b60      	cmp	r3, #96	@ 0x60
 8005d1e:	d877      	bhi.n	8005e10 <HAL_TIM_ConfigClockSource+0x16c>
 8005d20:	2b50      	cmp	r3, #80	@ 0x50
 8005d22:	d03c      	beq.n	8005d9e <HAL_TIM_ConfigClockSource+0xfa>
 8005d24:	2b50      	cmp	r3, #80	@ 0x50
 8005d26:	d873      	bhi.n	8005e10 <HAL_TIM_ConfigClockSource+0x16c>
 8005d28:	2b40      	cmp	r3, #64	@ 0x40
 8005d2a:	d058      	beq.n	8005dde <HAL_TIM_ConfigClockSource+0x13a>
 8005d2c:	2b40      	cmp	r3, #64	@ 0x40
 8005d2e:	d86f      	bhi.n	8005e10 <HAL_TIM_ConfigClockSource+0x16c>
 8005d30:	2b30      	cmp	r3, #48	@ 0x30
 8005d32:	d064      	beq.n	8005dfe <HAL_TIM_ConfigClockSource+0x15a>
 8005d34:	2b30      	cmp	r3, #48	@ 0x30
 8005d36:	d86b      	bhi.n	8005e10 <HAL_TIM_ConfigClockSource+0x16c>
 8005d38:	2b20      	cmp	r3, #32
 8005d3a:	d060      	beq.n	8005dfe <HAL_TIM_ConfigClockSource+0x15a>
 8005d3c:	2b20      	cmp	r3, #32
 8005d3e:	d867      	bhi.n	8005e10 <HAL_TIM_ConfigClockSource+0x16c>
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d05c      	beq.n	8005dfe <HAL_TIM_ConfigClockSource+0x15a>
 8005d44:	2b10      	cmp	r3, #16
 8005d46:	d05a      	beq.n	8005dfe <HAL_TIM_ConfigClockSource+0x15a>
 8005d48:	e062      	b.n	8005e10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d5a:	f000 fd41 	bl	80067e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005d6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	609a      	str	r2, [r3, #8]
      break;
 8005d76:	e04f      	b.n	8005e18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d88:	f000 fd2a 	bl	80067e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	689a      	ldr	r2, [r3, #8]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d9a:	609a      	str	r2, [r3, #8]
      break;
 8005d9c:	e03c      	b.n	8005e18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005daa:	461a      	mov	r2, r3
 8005dac:	f000 fbe8 	bl	8006580 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2150      	movs	r1, #80	@ 0x50
 8005db6:	4618      	mov	r0, r3
 8005db8:	f000 fcf7 	bl	80067aa <TIM_ITRx_SetConfig>
      break;
 8005dbc:	e02c      	b.n	8005e18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dca:	461a      	mov	r2, r3
 8005dcc:	f000 fc44 	bl	8006658 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2160      	movs	r1, #96	@ 0x60
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f000 fce7 	bl	80067aa <TIM_ITRx_SetConfig>
      break;
 8005ddc:	e01c      	b.n	8005e18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dea:	461a      	mov	r2, r3
 8005dec:	f000 fbc8 	bl	8006580 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2140      	movs	r1, #64	@ 0x40
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 fcd7 	bl	80067aa <TIM_ITRx_SetConfig>
      break;
 8005dfc:	e00c      	b.n	8005e18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4619      	mov	r1, r3
 8005e08:	4610      	mov	r0, r2
 8005e0a:	f000 fcce 	bl	80067aa <TIM_ITRx_SetConfig>
      break;
 8005e0e:	e003      	b.n	8005e18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	73fb      	strb	r3, [r7, #15]
      break;
 8005e14:	e000      	b.n	8005e18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3710      	adds	r7, #16
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	fffeff88 	.word	0xfffeff88

08005e38 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005e40:	bf00      	nop
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e68:	bf00      	nop
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a40      	ldr	r2, [pc, #256]	@ (8005fb0 <TIM_Base_SetConfig+0x114>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d013      	beq.n	8005edc <TIM_Base_SetConfig+0x40>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eba:	d00f      	beq.n	8005edc <TIM_Base_SetConfig+0x40>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a3d      	ldr	r2, [pc, #244]	@ (8005fb4 <TIM_Base_SetConfig+0x118>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d00b      	beq.n	8005edc <TIM_Base_SetConfig+0x40>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a3c      	ldr	r2, [pc, #240]	@ (8005fb8 <TIM_Base_SetConfig+0x11c>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d007      	beq.n	8005edc <TIM_Base_SetConfig+0x40>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a3b      	ldr	r2, [pc, #236]	@ (8005fbc <TIM_Base_SetConfig+0x120>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d003      	beq.n	8005edc <TIM_Base_SetConfig+0x40>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a3a      	ldr	r2, [pc, #232]	@ (8005fc0 <TIM_Base_SetConfig+0x124>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d108      	bne.n	8005eee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ee2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a2f      	ldr	r2, [pc, #188]	@ (8005fb0 <TIM_Base_SetConfig+0x114>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d02b      	beq.n	8005f4e <TIM_Base_SetConfig+0xb2>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005efc:	d027      	beq.n	8005f4e <TIM_Base_SetConfig+0xb2>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a2c      	ldr	r2, [pc, #176]	@ (8005fb4 <TIM_Base_SetConfig+0x118>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d023      	beq.n	8005f4e <TIM_Base_SetConfig+0xb2>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a2b      	ldr	r2, [pc, #172]	@ (8005fb8 <TIM_Base_SetConfig+0x11c>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d01f      	beq.n	8005f4e <TIM_Base_SetConfig+0xb2>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a2a      	ldr	r2, [pc, #168]	@ (8005fbc <TIM_Base_SetConfig+0x120>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d01b      	beq.n	8005f4e <TIM_Base_SetConfig+0xb2>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a29      	ldr	r2, [pc, #164]	@ (8005fc0 <TIM_Base_SetConfig+0x124>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d017      	beq.n	8005f4e <TIM_Base_SetConfig+0xb2>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a28      	ldr	r2, [pc, #160]	@ (8005fc4 <TIM_Base_SetConfig+0x128>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d013      	beq.n	8005f4e <TIM_Base_SetConfig+0xb2>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a27      	ldr	r2, [pc, #156]	@ (8005fc8 <TIM_Base_SetConfig+0x12c>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d00f      	beq.n	8005f4e <TIM_Base_SetConfig+0xb2>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a26      	ldr	r2, [pc, #152]	@ (8005fcc <TIM_Base_SetConfig+0x130>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d00b      	beq.n	8005f4e <TIM_Base_SetConfig+0xb2>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a25      	ldr	r2, [pc, #148]	@ (8005fd0 <TIM_Base_SetConfig+0x134>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d007      	beq.n	8005f4e <TIM_Base_SetConfig+0xb2>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a24      	ldr	r2, [pc, #144]	@ (8005fd4 <TIM_Base_SetConfig+0x138>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d003      	beq.n	8005f4e <TIM_Base_SetConfig+0xb2>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a23      	ldr	r2, [pc, #140]	@ (8005fd8 <TIM_Base_SetConfig+0x13c>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d108      	bne.n	8005f60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	689a      	ldr	r2, [r3, #8]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a0a      	ldr	r2, [pc, #40]	@ (8005fb0 <TIM_Base_SetConfig+0x114>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d003      	beq.n	8005f94 <TIM_Base_SetConfig+0xf8>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a0c      	ldr	r2, [pc, #48]	@ (8005fc0 <TIM_Base_SetConfig+0x124>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d103      	bne.n	8005f9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	691a      	ldr	r2, [r3, #16]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	615a      	str	r2, [r3, #20]
}
 8005fa2:	bf00      	nop
 8005fa4:	3714      	adds	r7, #20
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	40010000 	.word	0x40010000
 8005fb4:	40000400 	.word	0x40000400
 8005fb8:	40000800 	.word	0x40000800
 8005fbc:	40000c00 	.word	0x40000c00
 8005fc0:	40010400 	.word	0x40010400
 8005fc4:	40014000 	.word	0x40014000
 8005fc8:	40014400 	.word	0x40014400
 8005fcc:	40014800 	.word	0x40014800
 8005fd0:	40001800 	.word	0x40001800
 8005fd4:	40001c00 	.word	0x40001c00
 8005fd8:	40002000 	.word	0x40002000

08005fdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b087      	sub	sp, #28
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	f023 0201 	bic.w	r2, r3, #1
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	4b2b      	ldr	r3, [pc, #172]	@ (80060b4 <TIM_OC1_SetConfig+0xd8>)
 8006008:	4013      	ands	r3, r2
 800600a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f023 0303 	bic.w	r3, r3, #3
 8006012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	4313      	orrs	r3, r2
 800601c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	f023 0302 	bic.w	r3, r3, #2
 8006024:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	4313      	orrs	r3, r2
 800602e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a21      	ldr	r2, [pc, #132]	@ (80060b8 <TIM_OC1_SetConfig+0xdc>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d003      	beq.n	8006040 <TIM_OC1_SetConfig+0x64>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a20      	ldr	r2, [pc, #128]	@ (80060bc <TIM_OC1_SetConfig+0xe0>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d10c      	bne.n	800605a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	f023 0308 	bic.w	r3, r3, #8
 8006046:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	697a      	ldr	r2, [r7, #20]
 800604e:	4313      	orrs	r3, r2
 8006050:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	f023 0304 	bic.w	r3, r3, #4
 8006058:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a16      	ldr	r2, [pc, #88]	@ (80060b8 <TIM_OC1_SetConfig+0xdc>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d003      	beq.n	800606a <TIM_OC1_SetConfig+0x8e>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a15      	ldr	r2, [pc, #84]	@ (80060bc <TIM_OC1_SetConfig+0xe0>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d111      	bne.n	800608e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006070:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006078:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	4313      	orrs	r3, r2
 8006082:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	4313      	orrs	r3, r2
 800608c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	693a      	ldr	r2, [r7, #16]
 8006092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	685a      	ldr	r2, [r3, #4]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	621a      	str	r2, [r3, #32]
}
 80060a8:	bf00      	nop
 80060aa:	371c      	adds	r7, #28
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr
 80060b4:	fffeff8f 	.word	0xfffeff8f
 80060b8:	40010000 	.word	0x40010000
 80060bc:	40010400 	.word	0x40010400

080060c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b087      	sub	sp, #28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	f023 0210 	bic.w	r2, r3, #16
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	4b2e      	ldr	r3, [pc, #184]	@ (80061a4 <TIM_OC2_SetConfig+0xe4>)
 80060ec:	4013      	ands	r3, r2
 80060ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	021b      	lsls	r3, r3, #8
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	4313      	orrs	r3, r2
 8006102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	f023 0320 	bic.w	r3, r3, #32
 800610a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	011b      	lsls	r3, r3, #4
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	4313      	orrs	r3, r2
 8006116:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a23      	ldr	r2, [pc, #140]	@ (80061a8 <TIM_OC2_SetConfig+0xe8>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d003      	beq.n	8006128 <TIM_OC2_SetConfig+0x68>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a22      	ldr	r2, [pc, #136]	@ (80061ac <TIM_OC2_SetConfig+0xec>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d10d      	bne.n	8006144 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800612e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	011b      	lsls	r3, r3, #4
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	4313      	orrs	r3, r2
 800613a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006142:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a18      	ldr	r2, [pc, #96]	@ (80061a8 <TIM_OC2_SetConfig+0xe8>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d003      	beq.n	8006154 <TIM_OC2_SetConfig+0x94>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a17      	ldr	r2, [pc, #92]	@ (80061ac <TIM_OC2_SetConfig+0xec>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d113      	bne.n	800617c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800615a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006162:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	693a      	ldr	r2, [r7, #16]
 800616c:	4313      	orrs	r3, r2
 800616e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	693a      	ldr	r2, [r7, #16]
 8006178:	4313      	orrs	r3, r2
 800617a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	685a      	ldr	r2, [r3, #4]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	621a      	str	r2, [r3, #32]
}
 8006196:	bf00      	nop
 8006198:	371c      	adds	r7, #28
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	feff8fff 	.word	0xfeff8fff
 80061a8:	40010000 	.word	0x40010000
 80061ac:	40010400 	.word	0x40010400

080061b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b087      	sub	sp, #28
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a1b      	ldr	r3, [r3, #32]
 80061ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	69db      	ldr	r3, [r3, #28]
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	4b2d      	ldr	r3, [pc, #180]	@ (8006290 <TIM_OC3_SetConfig+0xe0>)
 80061dc:	4013      	ands	r3, r2
 80061de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f023 0303 	bic.w	r3, r3, #3
 80061e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80061f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	021b      	lsls	r3, r3, #8
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	4313      	orrs	r3, r2
 8006204:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a22      	ldr	r2, [pc, #136]	@ (8006294 <TIM_OC3_SetConfig+0xe4>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d003      	beq.n	8006216 <TIM_OC3_SetConfig+0x66>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a21      	ldr	r2, [pc, #132]	@ (8006298 <TIM_OC3_SetConfig+0xe8>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d10d      	bne.n	8006232 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800621c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	021b      	lsls	r3, r3, #8
 8006224:	697a      	ldr	r2, [r7, #20]
 8006226:	4313      	orrs	r3, r2
 8006228:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006230:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a17      	ldr	r2, [pc, #92]	@ (8006294 <TIM_OC3_SetConfig+0xe4>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d003      	beq.n	8006242 <TIM_OC3_SetConfig+0x92>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a16      	ldr	r2, [pc, #88]	@ (8006298 <TIM_OC3_SetConfig+0xe8>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d113      	bne.n	800626a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006248:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006250:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	011b      	lsls	r3, r3, #4
 8006258:	693a      	ldr	r2, [r7, #16]
 800625a:	4313      	orrs	r3, r2
 800625c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	011b      	lsls	r3, r3, #4
 8006264:	693a      	ldr	r2, [r7, #16]
 8006266:	4313      	orrs	r3, r2
 8006268:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	693a      	ldr	r2, [r7, #16]
 800626e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	685a      	ldr	r2, [r3, #4]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	621a      	str	r2, [r3, #32]
}
 8006284:	bf00      	nop
 8006286:	371c      	adds	r7, #28
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr
 8006290:	fffeff8f 	.word	0xfffeff8f
 8006294:	40010000 	.word	0x40010000
 8006298:	40010400 	.word	0x40010400

0800629c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800629c:	b480      	push	{r7}
 800629e:	b087      	sub	sp, #28
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a1b      	ldr	r3, [r3, #32]
 80062b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	69db      	ldr	r3, [r3, #28]
 80062c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	4b1e      	ldr	r3, [pc, #120]	@ (8006340 <TIM_OC4_SetConfig+0xa4>)
 80062c8:	4013      	ands	r3, r2
 80062ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	021b      	lsls	r3, r3, #8
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	4313      	orrs	r3, r2
 80062de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80062e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	031b      	lsls	r3, r3, #12
 80062ee:	693a      	ldr	r2, [r7, #16]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a13      	ldr	r2, [pc, #76]	@ (8006344 <TIM_OC4_SetConfig+0xa8>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d003      	beq.n	8006304 <TIM_OC4_SetConfig+0x68>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a12      	ldr	r2, [pc, #72]	@ (8006348 <TIM_OC4_SetConfig+0xac>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d109      	bne.n	8006318 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800630a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	695b      	ldr	r3, [r3, #20]
 8006310:	019b      	lsls	r3, r3, #6
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	4313      	orrs	r3, r2
 8006316:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	685a      	ldr	r2, [r3, #4]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	621a      	str	r2, [r3, #32]
}
 8006332:	bf00      	nop
 8006334:	371c      	adds	r7, #28
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	feff8fff 	.word	0xfeff8fff
 8006344:	40010000 	.word	0x40010000
 8006348:	40010400 	.word	0x40010400

0800634c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800634c:	b480      	push	{r7}
 800634e:	b087      	sub	sp, #28
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	4b1b      	ldr	r3, [pc, #108]	@ (80063e4 <TIM_OC5_SetConfig+0x98>)
 8006378:	4013      	ands	r3, r2
 800637a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	4313      	orrs	r3, r2
 8006384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800638c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	041b      	lsls	r3, r3, #16
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	4313      	orrs	r3, r2
 8006398:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a12      	ldr	r2, [pc, #72]	@ (80063e8 <TIM_OC5_SetConfig+0x9c>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d003      	beq.n	80063aa <TIM_OC5_SetConfig+0x5e>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a11      	ldr	r2, [pc, #68]	@ (80063ec <TIM_OC5_SetConfig+0xa0>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d109      	bne.n	80063be <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	021b      	lsls	r3, r3, #8
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	685a      	ldr	r2, [r3, #4]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	621a      	str	r2, [r3, #32]
}
 80063d8:	bf00      	nop
 80063da:	371c      	adds	r7, #28
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr
 80063e4:	fffeff8f 	.word	0xfffeff8f
 80063e8:	40010000 	.word	0x40010000
 80063ec:	40010400 	.word	0x40010400

080063f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b087      	sub	sp, #28
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	4b1c      	ldr	r3, [pc, #112]	@ (800648c <TIM_OC6_SetConfig+0x9c>)
 800641c:	4013      	ands	r3, r2
 800641e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	021b      	lsls	r3, r3, #8
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	4313      	orrs	r3, r2
 800642a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006432:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	051b      	lsls	r3, r3, #20
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	4313      	orrs	r3, r2
 800643e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a13      	ldr	r2, [pc, #76]	@ (8006490 <TIM_OC6_SetConfig+0xa0>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d003      	beq.n	8006450 <TIM_OC6_SetConfig+0x60>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a12      	ldr	r2, [pc, #72]	@ (8006494 <TIM_OC6_SetConfig+0xa4>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d109      	bne.n	8006464 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006456:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	695b      	ldr	r3, [r3, #20]
 800645c:	029b      	lsls	r3, r3, #10
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	4313      	orrs	r3, r2
 8006462:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	621a      	str	r2, [r3, #32]
}
 800647e:	bf00      	nop
 8006480:	371c      	adds	r7, #28
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	feff8fff 	.word	0xfeff8fff
 8006490:	40010000 	.word	0x40010000
 8006494:	40010400 	.word	0x40010400

08006498 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006498:	b480      	push	{r7}
 800649a:	b087      	sub	sp, #28
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	607a      	str	r2, [r7, #4]
 80064a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	f023 0201 	bic.w	r2, r3, #1
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	699b      	ldr	r3, [r3, #24]
 80064b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6a1b      	ldr	r3, [r3, #32]
 80064bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	4a28      	ldr	r2, [pc, #160]	@ (8006564 <TIM_TI1_SetConfig+0xcc>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d01b      	beq.n	80064fe <TIM_TI1_SetConfig+0x66>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064cc:	d017      	beq.n	80064fe <TIM_TI1_SetConfig+0x66>
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	4a25      	ldr	r2, [pc, #148]	@ (8006568 <TIM_TI1_SetConfig+0xd0>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d013      	beq.n	80064fe <TIM_TI1_SetConfig+0x66>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	4a24      	ldr	r2, [pc, #144]	@ (800656c <TIM_TI1_SetConfig+0xd4>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d00f      	beq.n	80064fe <TIM_TI1_SetConfig+0x66>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	4a23      	ldr	r2, [pc, #140]	@ (8006570 <TIM_TI1_SetConfig+0xd8>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d00b      	beq.n	80064fe <TIM_TI1_SetConfig+0x66>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	4a22      	ldr	r2, [pc, #136]	@ (8006574 <TIM_TI1_SetConfig+0xdc>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d007      	beq.n	80064fe <TIM_TI1_SetConfig+0x66>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	4a21      	ldr	r2, [pc, #132]	@ (8006578 <TIM_TI1_SetConfig+0xe0>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d003      	beq.n	80064fe <TIM_TI1_SetConfig+0x66>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	4a20      	ldr	r2, [pc, #128]	@ (800657c <TIM_TI1_SetConfig+0xe4>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d101      	bne.n	8006502 <TIM_TI1_SetConfig+0x6a>
 80064fe:	2301      	movs	r3, #1
 8006500:	e000      	b.n	8006504 <TIM_TI1_SetConfig+0x6c>
 8006502:	2300      	movs	r3, #0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d008      	beq.n	800651a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	f023 0303 	bic.w	r3, r3, #3
 800650e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006510:	697a      	ldr	r2, [r7, #20]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4313      	orrs	r3, r2
 8006516:	617b      	str	r3, [r7, #20]
 8006518:	e003      	b.n	8006522 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	f043 0301 	orr.w	r3, r3, #1
 8006520:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006528:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	011b      	lsls	r3, r3, #4
 800652e:	b2db      	uxtb	r3, r3
 8006530:	697a      	ldr	r2, [r7, #20]
 8006532:	4313      	orrs	r3, r2
 8006534:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	f023 030a 	bic.w	r3, r3, #10
 800653c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	f003 030a 	and.w	r3, r3, #10
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	4313      	orrs	r3, r2
 8006548:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	693a      	ldr	r2, [r7, #16]
 8006554:	621a      	str	r2, [r3, #32]
}
 8006556:	bf00      	nop
 8006558:	371c      	adds	r7, #28
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	40010000 	.word	0x40010000
 8006568:	40000400 	.word	0x40000400
 800656c:	40000800 	.word	0x40000800
 8006570:	40000c00 	.word	0x40000c00
 8006574:	40010400 	.word	0x40010400
 8006578:	40014000 	.word	0x40014000
 800657c:	40001800 	.word	0x40001800

08006580 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006580:	b480      	push	{r7}
 8006582:	b087      	sub	sp, #28
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6a1b      	ldr	r3, [r3, #32]
 8006590:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6a1b      	ldr	r3, [r3, #32]
 8006596:	f023 0201 	bic.w	r2, r3, #1
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80065aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	011b      	lsls	r3, r3, #4
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	f023 030a 	bic.w	r3, r3, #10
 80065bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	693a      	ldr	r2, [r7, #16]
 80065ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	697a      	ldr	r2, [r7, #20]
 80065d0:	621a      	str	r2, [r3, #32]
}
 80065d2:	bf00      	nop
 80065d4:	371c      	adds	r7, #28
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr

080065de <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80065de:	b480      	push	{r7}
 80065e0:	b087      	sub	sp, #28
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	60f8      	str	r0, [r7, #12]
 80065e6:	60b9      	str	r1, [r7, #8]
 80065e8:	607a      	str	r2, [r7, #4]
 80065ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6a1b      	ldr	r3, [r3, #32]
 80065f0:	f023 0210 	bic.w	r2, r3, #16
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	699b      	ldr	r3, [r3, #24]
 80065fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6a1b      	ldr	r3, [r3, #32]
 8006602:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800660a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	021b      	lsls	r3, r3, #8
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	4313      	orrs	r3, r2
 8006614:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800661c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	031b      	lsls	r3, r3, #12
 8006622:	b29b      	uxth	r3, r3
 8006624:	697a      	ldr	r2, [r7, #20]
 8006626:	4313      	orrs	r3, r2
 8006628:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006630:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	011b      	lsls	r3, r3, #4
 8006636:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	4313      	orrs	r3, r2
 800663e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	693a      	ldr	r2, [r7, #16]
 800664a:	621a      	str	r2, [r3, #32]
}
 800664c:	bf00      	nop
 800664e:	371c      	adds	r7, #28
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006658:	b480      	push	{r7}
 800665a:	b087      	sub	sp, #28
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6a1b      	ldr	r3, [r3, #32]
 8006668:	f023 0210 	bic.w	r2, r3, #16
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6a1b      	ldr	r3, [r3, #32]
 800667a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006682:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	031b      	lsls	r3, r3, #12
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	4313      	orrs	r3, r2
 800668c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006694:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	011b      	lsls	r3, r3, #4
 800669a:	693a      	ldr	r2, [r7, #16]
 800669c:	4313      	orrs	r3, r2
 800669e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	693a      	ldr	r2, [r7, #16]
 80066aa:	621a      	str	r2, [r3, #32]
}
 80066ac:	bf00      	nop
 80066ae:	371c      	adds	r7, #28
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b087      	sub	sp, #28
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	607a      	str	r2, [r7, #4]
 80066c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6a1b      	ldr	r3, [r3, #32]
 80066ca:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	69db      	ldr	r3, [r3, #28]
 80066d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6a1b      	ldr	r3, [r3, #32]
 80066dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	f023 0303 	bic.w	r3, r3, #3
 80066e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80066f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	011b      	lsls	r3, r3, #4
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	697a      	ldr	r2, [r7, #20]
 80066fe:	4313      	orrs	r3, r2
 8006700:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006708:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	021b      	lsls	r3, r3, #8
 800670e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006712:	693a      	ldr	r2, [r7, #16]
 8006714:	4313      	orrs	r3, r2
 8006716:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	697a      	ldr	r2, [r7, #20]
 800671c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	621a      	str	r2, [r3, #32]
}
 8006724:	bf00      	nop
 8006726:	371c      	adds	r7, #28
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006730:	b480      	push	{r7}
 8006732:	b087      	sub	sp, #28
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	607a      	str	r2, [r7, #4]
 800673c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6a1b      	ldr	r3, [r3, #32]
 8006742:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	69db      	ldr	r3, [r3, #28]
 800674e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6a1b      	ldr	r3, [r3, #32]
 8006754:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800675c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	021b      	lsls	r3, r3, #8
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	4313      	orrs	r3, r2
 8006766:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800676e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	031b      	lsls	r3, r3, #12
 8006774:	b29b      	uxth	r3, r3
 8006776:	697a      	ldr	r2, [r7, #20]
 8006778:	4313      	orrs	r3, r2
 800677a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006782:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	031b      	lsls	r3, r3, #12
 8006788:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800678c:	693a      	ldr	r2, [r7, #16]
 800678e:	4313      	orrs	r3, r2
 8006790:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	621a      	str	r2, [r3, #32]
}
 800679e:	bf00      	nop
 80067a0:	371c      	adds	r7, #28
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr

080067aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067aa:	b480      	push	{r7}
 80067ac:	b085      	sub	sp, #20
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
 80067b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067c2:	683a      	ldr	r2, [r7, #0]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	f043 0307 	orr.w	r3, r3, #7
 80067cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	609a      	str	r2, [r3, #8]
}
 80067d4:	bf00      	nop
 80067d6:	3714      	adds	r7, #20
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b087      	sub	sp, #28
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	607a      	str	r2, [r7, #4]
 80067ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80067fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	021a      	lsls	r2, r3, #8
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	431a      	orrs	r2, r3
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	4313      	orrs	r3, r2
 8006808:	697a      	ldr	r2, [r7, #20]
 800680a:	4313      	orrs	r3, r2
 800680c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	697a      	ldr	r2, [r7, #20]
 8006812:	609a      	str	r2, [r3, #8]
}
 8006814:	bf00      	nop
 8006816:	371c      	adds	r7, #28
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006830:	2b01      	cmp	r3, #1
 8006832:	d101      	bne.n	8006838 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006834:	2302      	movs	r3, #2
 8006836:	e06d      	b.n	8006914 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2202      	movs	r2, #2
 8006844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a30      	ldr	r2, [pc, #192]	@ (8006920 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d004      	beq.n	800686c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a2f      	ldr	r2, [pc, #188]	@ (8006924 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d108      	bne.n	800687e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006872:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	4313      	orrs	r3, r2
 800687c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006884:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	4313      	orrs	r3, r2
 800688e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a20      	ldr	r2, [pc, #128]	@ (8006920 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d022      	beq.n	80068e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068aa:	d01d      	beq.n	80068e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a1d      	ldr	r2, [pc, #116]	@ (8006928 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d018      	beq.n	80068e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a1c      	ldr	r2, [pc, #112]	@ (800692c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d013      	beq.n	80068e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a1a      	ldr	r2, [pc, #104]	@ (8006930 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d00e      	beq.n	80068e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a15      	ldr	r2, [pc, #84]	@ (8006924 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d009      	beq.n	80068e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a16      	ldr	r2, [pc, #88]	@ (8006934 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d004      	beq.n	80068e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a15      	ldr	r2, [pc, #84]	@ (8006938 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d10c      	bne.n	8006902 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	68ba      	ldr	r2, [r7, #8]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68ba      	ldr	r2, [r7, #8]
 8006900:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2201      	movs	r2, #1
 8006906:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3714      	adds	r7, #20
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr
 8006920:	40010000 	.word	0x40010000
 8006924:	40010400 	.word	0x40010400
 8006928:	40000400 	.word	0x40000400
 800692c:	40000800 	.word	0x40000800
 8006930:	40000c00 	.word	0x40000c00
 8006934:	40014000 	.word	0x40014000
 8006938:	40001800 	.word	0x40001800

0800693c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800693c:	b480      	push	{r7}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006946:	2300      	movs	r3, #0
 8006948:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006950:	2b01      	cmp	r3, #1
 8006952:	d101      	bne.n	8006958 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006954:	2302      	movs	r3, #2
 8006956:	e065      	b.n	8006a24 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	4313      	orrs	r3, r2
 800696c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	4313      	orrs	r3, r2
 800697a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	4313      	orrs	r3, r2
 8006988:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4313      	orrs	r3, r2
 8006996:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	695b      	ldr	r3, [r3, #20]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069be:	4313      	orrs	r3, r2
 80069c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	699b      	ldr	r3, [r3, #24]
 80069cc:	041b      	lsls	r3, r3, #16
 80069ce:	4313      	orrs	r3, r2
 80069d0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a16      	ldr	r2, [pc, #88]	@ (8006a30 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d004      	beq.n	80069e6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a14      	ldr	r2, [pc, #80]	@ (8006a34 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d115      	bne.n	8006a12 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f0:	051b      	lsls	r3, r3, #20
 80069f2:	4313      	orrs	r3, r2
 80069f4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	69db      	ldr	r3, [r3, #28]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3714      	adds	r7, #20
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr
 8006a30:	40010000 	.word	0x40010000
 8006a34:	40010400 	.word	0x40010400

08006a38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a68:	bf00      	nop
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <memset>:
 8006a74:	4402      	add	r2, r0
 8006a76:	4603      	mov	r3, r0
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d100      	bne.n	8006a7e <memset+0xa>
 8006a7c:	4770      	bx	lr
 8006a7e:	f803 1b01 	strb.w	r1, [r3], #1
 8006a82:	e7f9      	b.n	8006a78 <memset+0x4>

08006a84 <__errno>:
 8006a84:	4b01      	ldr	r3, [pc, #4]	@ (8006a8c <__errno+0x8>)
 8006a86:	6818      	ldr	r0, [r3, #0]
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	20000038 	.word	0x20000038

08006a90 <__libc_init_array>:
 8006a90:	b570      	push	{r4, r5, r6, lr}
 8006a92:	4d0d      	ldr	r5, [pc, #52]	@ (8006ac8 <__libc_init_array+0x38>)
 8006a94:	4c0d      	ldr	r4, [pc, #52]	@ (8006acc <__libc_init_array+0x3c>)
 8006a96:	1b64      	subs	r4, r4, r5
 8006a98:	10a4      	asrs	r4, r4, #2
 8006a9a:	2600      	movs	r6, #0
 8006a9c:	42a6      	cmp	r6, r4
 8006a9e:	d109      	bne.n	8006ab4 <__libc_init_array+0x24>
 8006aa0:	4d0b      	ldr	r5, [pc, #44]	@ (8006ad0 <__libc_init_array+0x40>)
 8006aa2:	4c0c      	ldr	r4, [pc, #48]	@ (8006ad4 <__libc_init_array+0x44>)
 8006aa4:	f000 f83a 	bl	8006b1c <_init>
 8006aa8:	1b64      	subs	r4, r4, r5
 8006aaa:	10a4      	asrs	r4, r4, #2
 8006aac:	2600      	movs	r6, #0
 8006aae:	42a6      	cmp	r6, r4
 8006ab0:	d105      	bne.n	8006abe <__libc_init_array+0x2e>
 8006ab2:	bd70      	pop	{r4, r5, r6, pc}
 8006ab4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ab8:	4798      	blx	r3
 8006aba:	3601      	adds	r6, #1
 8006abc:	e7ee      	b.n	8006a9c <__libc_init_array+0xc>
 8006abe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ac2:	4798      	blx	r3
 8006ac4:	3601      	adds	r6, #1
 8006ac6:	e7f2      	b.n	8006aae <__libc_init_array+0x1e>
 8006ac8:	080073bc 	.word	0x080073bc
 8006acc:	080073bc 	.word	0x080073bc
 8006ad0:	080073bc 	.word	0x080073bc
 8006ad4:	080073c0 	.word	0x080073c0

08006ad8 <sqrtf>:
 8006ad8:	b508      	push	{r3, lr}
 8006ada:	ed2d 8b02 	vpush	{d8}
 8006ade:	eeb0 8a40 	vmov.f32	s16, s0
 8006ae2:	f000 f817 	bl	8006b14 <__ieee754_sqrtf>
 8006ae6:	eeb4 8a48 	vcmp.f32	s16, s16
 8006aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aee:	d60c      	bvs.n	8006b0a <sqrtf+0x32>
 8006af0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8006b10 <sqrtf+0x38>
 8006af4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006afc:	d505      	bpl.n	8006b0a <sqrtf+0x32>
 8006afe:	f7ff ffc1 	bl	8006a84 <__errno>
 8006b02:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006b06:	2321      	movs	r3, #33	@ 0x21
 8006b08:	6003      	str	r3, [r0, #0]
 8006b0a:	ecbd 8b02 	vpop	{d8}
 8006b0e:	bd08      	pop	{r3, pc}
 8006b10:	00000000 	.word	0x00000000

08006b14 <__ieee754_sqrtf>:
 8006b14:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006b18:	4770      	bx	lr
	...

08006b1c <_init>:
 8006b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b1e:	bf00      	nop
 8006b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b22:	bc08      	pop	{r3}
 8006b24:	469e      	mov	lr, r3
 8006b26:	4770      	bx	lr

08006b28 <_fini>:
 8006b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b2a:	bf00      	nop
 8006b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b2e:	bc08      	pop	{r3}
 8006b30:	469e      	mov	lr, r3
 8006b32:	4770      	bx	lr

Disassembly of section .ccmram:

08006b34 <pi_aw_calc>:
 * @param v Pointer to the PI control structure.
 *
 * @note This function computes the PI control action with anti-windup.
 */
void pi_aw_calc(volatile pi_aw_struct *v)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
    if(v->enable)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	881b      	ldrh	r3, [r3, #0]
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d063      	beq.n	8006c0e <pi_aw_calc+0xda>
    {
        v->e[0] = v->pi_consig - v->pi_fdb; // Calculate error
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	ed93 7a07 	vldr	s14, [r3, #28]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	edd3 7a08 	vldr	s15, [r3, #32]
 8006b52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	edc3 7a05 	vstr	s15, [r3, #20]

        // PI trapezoidal with feedforward
        v->pi_int[0] =  v->Ki * v->e[0] * v->Ts + v->pi_int[1] + (v->pi_out_postsat - v->pi_out_presat) * v->Kaw * v->Ts;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	ed93 7a03 	vldr	s14, [r3, #12]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	edd3 7a05 	vldr	s15, [r3, #20]
 8006b68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	edd3 7a01 	vldr	s15, [r3, #4]
 8006b72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8006b7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8006b8c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	edd3 7a04 	vldr	s15, [r3, #16]
 8006b96:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	edd3 7a01 	vldr	s15, [r3, #4]
 8006ba0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006ba4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

        v->pi_out_presat = v->pi_out;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	62da      	str	r2, [r3, #44]	@ 0x2c

        // Output voltage saturation
        if (v->pi_out > v->pi_out_max)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006bc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bca:	dd04      	ble.n	8006bd6 <pi_aw_calc+0xa2>
            v->pi_out = v->pi_out_max;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	635a      	str	r2, [r3, #52]	@ 0x34
 8006bd4:	e00e      	b.n	8006bf4 <pi_aw_calc+0xc0>
        else if (v->pi_out < v->pi_out_min)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8006be2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bea:	d503      	bpl.n	8006bf4 <pi_aw_calc+0xc0>
            v->pi_out = v->pi_out_min;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	635a      	str	r2, [r3, #52]	@ 0x34
        else;

        // Copy previous values
        v->e[1] = v->e[0];                      // Copy previous error
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	695a      	ldr	r2, [r3, #20]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	619a      	str	r2, [r3, #24]
        v->pi_ffw[1] = v->pi_ffw[0];            // Copy previous feedforward
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	645a      	str	r2, [r3, #68]	@ 0x44
        v->pi_int[1] = v->pi_int[0];			// Copy previous integrator
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	63da      	str	r2, [r3, #60]	@ 0x3c
        v->e[1] = 0.0F;
        v->pi_ffw[1] = 0.0F;
        v->pi_int[1] = 0.0F;
        v->pi_out = 0.0F;
    }
}
 8006c0c:	e00f      	b.n	8006c2e <pi_aw_calc+0xfa>
        v->e[1] = 0.0F;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f04f 0200 	mov.w	r2, #0
 8006c14:	619a      	str	r2, [r3, #24]
        v->pi_ffw[1] = 0.0F;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f04f 0200 	mov.w	r2, #0
 8006c1c:	645a      	str	r2, [r3, #68]	@ 0x44
        v->pi_int[1] = 0.0F;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f04f 0200 	mov.w	r2, #0
 8006c24:	63da      	str	r2, [r3, #60]	@ 0x3c
        v->pi_out = 0.0F;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f04f 0200 	mov.w	r2, #0
 8006c2c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8006c2e:	bf00      	nop
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <pi_init>:
 *
 * @param v Pointer to the PI structure.
 *
 * @note This function initializes the constants used in the PI controller.
 */
void pi_init(volatile pi_struct *v){
 8006c3a:	b480      	push	{r7}
 8006c3c:	b083      	sub	sp, #12
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
    v->K0 = v->Kp + v->Ki * v->Ts * 0.5F;   // K0 = Kp + Ki*Ts/2
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	ed93 7a02 	vldr	s14, [r3, #8]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	edd3 6a03 	vldr	s13, [r3, #12]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	edd3 7a01 	vldr	s15, [r3, #4]
 8006c54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006c58:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8006c5c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006c60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	edc3 7a04 	vstr	s15, [r3, #16]
    v->K1 = -v->Kp + v->Ki * v->Ts * 0.5F;  // K1 = -Kp + Ki*Ts/2
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	ed93 7a03 	vldr	s14, [r3, #12]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	edd3 7a01 	vldr	s15, [r3, #4]
 8006c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c7a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006c7e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	edd3 7a02 	vldr	s15, [r3, #8]
 8006c88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8006c92:	bf00      	nop
 8006c94:	370c      	adds	r7, #12
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr

08006c9e <pi_calc>:
 * @param v Pointer to the PI structure.
 *
 * @note This function computes the PI control action with feedforward and saturation.
 */
void pi_calc(volatile pi_struct *v)
{
 8006c9e:	b480      	push	{r7}
 8006ca0:	b083      	sub	sp, #12
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
    if(v->enable)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	881b      	ldrh	r3, [r3, #0]
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d056      	beq.n	8006d5e <pi_calc+0xc0>
    {
        v->e[0] = v->pi_consig - v->pi_fdb; // Calculate error
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	ed93 7a08 	vldr	s14, [r3, #32]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006cbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	edc3 7a06 	vstr	s15, [r3, #24]
        v->pi_out += v->K0 * v->e[0] + v->K1 * v->e[1] + v->pi_ffw[0] - v->pi_ffw[1];   // PI trapezoidal with feedforward
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	ed93 7a04 	vldr	s14, [r3, #16]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	edd3 7a06 	vldr	s15, [r3, #24]
 8006cd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	edd3 6a05 	vldr	s13, [r3, #20]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	edd3 7a07 	vldr	s15, [r3, #28]
 8006ce2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006ce6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8006cf0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8006cfa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8006d04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        // Output voltage saturation
        if (v->pi_out > v->pi_out_max)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8006d1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d22:	dd04      	ble.n	8006d2e <pi_calc+0x90>
            v->pi_out = v->pi_out_max;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8006d2c:	e00e      	b.n	8006d4c <pi_calc+0xae>
        else if (v->pi_out < v->pi_out_min)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8006d3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d42:	d503      	bpl.n	8006d4c <pi_calc+0xae>
            v->pi_out = v->pi_out_min;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	631a      	str	r2, [r3, #48]	@ 0x30
        else;
        // Copy previous values
        v->e[1] = v->e[0];                      // Copy previous error
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	699a      	ldr	r2, [r3, #24]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	61da      	str	r2, [r3, #28]
        v->pi_ffw[1] = v->pi_ffw[0];            // Copy previous feedforward
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	639a      	str	r2, [r3, #56]	@ 0x38
        // Reset previous control variables
        v->e[1] = 0.0F;
        v->pi_ffw[1] = 0.0F;
        v->pi_out = 0.0F;
    }
}
 8006d5c:	e00b      	b.n	8006d76 <pi_calc+0xd8>
        v->e[1] = 0.0F;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f04f 0200 	mov.w	r2, #0
 8006d64:	61da      	str	r2, [r3, #28]
        v->pi_ffw[1] = 0.0F;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f04f 0200 	mov.w	r2, #0
 8006d6c:	639a      	str	r2, [r3, #56]	@ 0x38
        v->pi_out = 0.0F;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f04f 0200 	mov.w	r2, #0
 8006d74:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006d76:	bf00      	nop
 8006d78:	370c      	adds	r7, #12
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr

08006d82 <clarke3F_calc>:
 * @param v Pointer to the Clarke transformation structure.
 *
 * @note This function computes the Clarke transformation for three-phase signals.
 */
void clarke3F_calc(volatile clarke3F_struct *v)
{
 8006d82:	b480      	push	{r7}
 8006d84:	b083      	sub	sp, #12
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
    v->D = v->a;                                       // Alfa = A
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	609a      	str	r2, [r3, #8]
    v->Q = ISQ3*( v->a + 2.0F * v->b );              // Beta = 1/sqrt(3)*(A + 2*B) = 1/sqrt(3)*(B - C)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	ed93 7a00 	vldr	s14, [r3]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	edd3 7a01 	vldr	s15, [r3, #4]
 8006d9e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006da2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006da6:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8006dc0 <clarke3F_calc+0x3e>
 8006daa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8006db4:	bf00      	nop
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr
 8006dc0:	3f13cd3a 	.word	0x3f13cd3a

08006dc4 <rot_calc>:
 * @param v Pointer to the rotation transformation structure.
 *
 * @note This function computes the rotation transformation (clockwise).
 */
void rot_calc(volatile rot_struct *v)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
    v->d = v->D*v->cosFi + v->Q*v->sinFi;              // d = Alfa(D)*cos(Fi) + Beta(Q)*sin(Fi)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	ed93 7a00 	vldr	s14, [r3]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	edd3 7a03 	vldr	s15, [r3, #12]
 8006dd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	edd3 6a01 	vldr	s13, [r3, #4]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	edd3 7a02 	vldr	s15, [r3, #8]
 8006de8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006dec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	edc3 7a04 	vstr	s15, [r3, #16]
    v->q = v->Q*v->cosFi - v->D*v->sinFi ;             // q = -Alfa(D)*sin(Fi) + Beta(Q)*cos(Fi)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	ed93 7a01 	vldr	s14, [r3, #4]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	edd3 7a03 	vldr	s15, [r3, #12]
 8006e02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	edd3 6a00 	vldr	s13, [r3]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	edd3 7a02 	vldr	s15, [r3, #8]
 8006e12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006e16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <irot_calc>:
 * @param v Pointer to the inverse rotation transformation structure.
 *
 * @note This function computes the inverse rotation transformation (counterclockwise).
 */
void irot_calc(volatile irot_struct *v)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
    v->D = v->d*v->cosFi - v->q*v->sinFi;              // Alfa(D) = d*cos(Fi) - q*sin(Fi)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	ed93 7a00 	vldr	s14, [r3]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	edd3 7a03 	vldr	s15, [r3, #12]
 8006e40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	edd3 6a01 	vldr	s13, [r3, #4]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	edd3 7a02 	vldr	s15, [r3, #8]
 8006e50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006e54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	edc3 7a04 	vstr	s15, [r3, #16]
    v->Q = v->d*v->sinFi + v->q*v->cosFi;              // Beta(Q) = d*sin(Fi) + q*cos(Fi)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	ed93 7a00 	vldr	s14, [r3]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	edd3 7a02 	vldr	s15, [r3, #8]
 8006e6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	edd3 6a01 	vldr	s13, [r3, #4]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	edd3 7a03 	vldr	s15, [r3, #12]
 8006e7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006e7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8006e88:	bf00      	nop
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <angle_calc>:
 * @param v Pointer to the angle generation structure.
 *
 * @note This function generates the angle.
 */
void angle_calc(volatile angle_struct *v)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
    // Integrator
    v->angle += v->freq*v->Ts*2;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	ed93 7a00 	vldr	s14, [r3]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	edd3 7a01 	vldr	s15, [r3, #4]
 8006ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eac:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	edd3 7a02 	vldr	s15, [r3, #8]
 8006eb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	edc3 7a02 	vstr	s15, [r3, #8]
    v->angle = (v->angle > 1) ? (v->angle - 2) : v->angle;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	edd3 7a02 	vldr	s15, [r3, #8]
 8006ec6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006eca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ed2:	dd07      	ble.n	8006ee4 <angle_calc+0x50>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	edd3 7a02 	vldr	s15, [r3, #8]
 8006eda:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8006ede:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006ee2:	e002      	b.n	8006eea <angle_calc+0x56>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	edd3 7a02 	vldr	s15, [r3, #8]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <svpwm_calc>:
 * @param v Pointer to the SVPWM structure.
 *
 * @note This function calculates the Space Vector Pulse Width Modulation (SVPWM).
 */
void svpwm_calc(volatile svpwm_struct *v)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b089      	sub	sp, #36	@ 0x24
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]

    // Auxiliary variables for SVPWM
    float Va, Vb, Vc, max, min, h;

    // Calculate Va, Vb, and Vc for three-phase system without neutral
    Va = v->valfa;                                      // A = Alfa
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	61fb      	str	r3, [r7, #28]
    //Vb = (- v->valfa + SQ3*v->vbeta)*0.5;              // B = -1/2*Alfa + sqrt(3)/2*Beta
    Vb = (- v->valfa + SQ3*v->vbeta)*DIV2;              // B = -1/2*Alfa + sqrt(3)/2*Beta
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	edd3 7a01 	vldr	s15, [r3, #4]
 8006f10:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8007024 <svpwm_calc+0x128>
 8006f14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	edd3 7a00 	vldr	s15, [r3]
 8006f1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f22:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006f26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f2a:	edc7 7a06 	vstr	s15, [r7, #24]
    Vc = - Va - Vb;                                     // C = - A - B
 8006f2e:	edd7 7a07 	vldr	s15, [r7, #28]
 8006f32:	eeb1 7a67 	vneg.f32	s14, s15
 8006f36:	edd7 7a06 	vldr	s15, [r7, #24]
 8006f3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f3e:	edc7 7a05 	vstr	s15, [r7, #20]

    // Homopolar addition
    // Select maximum
    max = Va;
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	613b      	str	r3, [r7, #16]
    max = (Vb >= max) ? Vb : max;
 8006f46:	ed97 7a06 	vldr	s14, [r7, #24]
 8006f4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8006f4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f56:	db01      	blt.n	8006f5c <svpwm_calc+0x60>
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	e000      	b.n	8006f5e <svpwm_calc+0x62>
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	613b      	str	r3, [r7, #16]
    max = (Vc >= max) ? Vc : max;
 8006f60:	ed97 7a05 	vldr	s14, [r7, #20]
 8006f64:	edd7 7a04 	vldr	s15, [r7, #16]
 8006f68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f70:	db01      	blt.n	8006f76 <svpwm_calc+0x7a>
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	e000      	b.n	8006f78 <svpwm_calc+0x7c>
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	613b      	str	r3, [r7, #16]
    // Select minimum
    min = Va;
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	60fb      	str	r3, [r7, #12]
    min = (Vb <= min) ? Vb : min;
 8006f7e:	ed97 7a06 	vldr	s14, [r7, #24]
 8006f82:	edd7 7a03 	vldr	s15, [r7, #12]
 8006f86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f8e:	d801      	bhi.n	8006f94 <svpwm_calc+0x98>
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	e000      	b.n	8006f96 <svpwm_calc+0x9a>
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	60fb      	str	r3, [r7, #12]
    min = (Vc <= min) ? Vc : min;
 8006f98:	ed97 7a05 	vldr	s14, [r7, #20]
 8006f9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006fa0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fa8:	d801      	bhi.n	8006fae <svpwm_calc+0xb2>
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	e000      	b.n	8006fb0 <svpwm_calc+0xb4>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	60fb      	str	r3, [r7, #12]
    // Calculate homopolar component
    h = (max + min)*DIV2;
 8006fb2:	ed97 7a04 	vldr	s14, [r7, #16]
 8006fb6:	edd7 7a03 	vldr	s15, [r7, #12]
 8006fba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006fbe:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006fc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006fc6:	edc7 7a02 	vstr	s15, [r7, #8]

    // Generate duty cycles (range from 0 to 1)
    // Convert sinusoids ranging up to 0.5 to sinusoids ranging from 0 to 1
    v->Ta = (Va - h + 0.5F);
 8006fca:	ed97 7a07 	vldr	s14, [r7, #28]
 8006fce:	edd7 7a02 	vldr	s15, [r7, #8]
 8006fd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006fd6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006fda:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	edc3 7a02 	vstr	s15, [r3, #8]
    v->Tb = (Vb - h + 0.5F);
 8006fe4:	ed97 7a06 	vldr	s14, [r7, #24]
 8006fe8:	edd7 7a02 	vldr	s15, [r7, #8]
 8006fec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ff0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006ff4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	edc3 7a03 	vstr	s15, [r3, #12]
    v->Tc = (Vc - h + 0.5F);
 8006ffe:	ed97 7a05 	vldr	s14, [r7, #20]
 8007002:	edd7 7a02 	vldr	s15, [r7, #8]
 8007006:	ee77 7a67 	vsub.f32	s15, s14, s15
 800700a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800700e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8007018:	bf00      	nop
 800701a:	3724      	adds	r7, #36	@ 0x24
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr
 8007024:	3fddb3d7 	.word	0x3fddb3d7

08007028 <rampa_calc>:
 * @param v Pointer to the ramp structure.
 *
 * @note This function calculates the ramp.
 */
void rampa_calc(volatile rampa_struct *v)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
    if (v->enable)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	7b1b      	ldrb	r3, [r3, #12]
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b00      	cmp	r3, #0
 8007038:	d04e      	beq.n	80070d8 <rampa_calc+0xb0>
    {
        if(v->out < v->in)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	ed93 7a01 	vldr	s14, [r3, #4]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	edd3 7a00 	vldr	s15, [r3]
 8007046:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800704a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800704e:	d51b      	bpl.n	8007088 <rampa_calc+0x60>
        {
            v->out += v->Incr;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	ed93 7a02 	vldr	s14, [r3, #8]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	edd3 7a01 	vldr	s15, [r3, #4]
 800705c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	edc3 7a01 	vstr	s15, [r3, #4]
            if(v->out > v->in)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	ed93 7a01 	vldr	s14, [r3, #4]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	edd3 7a00 	vldr	s15, [r3]
 8007072:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800707a:	dc00      	bgt.n	800707e <rampa_calc+0x56>
    }
    else
    {
        v->out = 0.0F;
    }
}
 800707c:	e030      	b.n	80070e0 <rampa_calc+0xb8>
                v->out = v->in;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	605a      	str	r2, [r3, #4]
}
 8007086:	e02b      	b.n	80070e0 <rampa_calc+0xb8>
        else if(v->out > v->in)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	ed93 7a01 	vldr	s14, [r3, #4]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	edd3 7a00 	vldr	s15, [r3]
 8007094:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800709c:	dc00      	bgt.n	80070a0 <rampa_calc+0x78>
}
 800709e:	e01f      	b.n	80070e0 <rampa_calc+0xb8>
            v->out -= v->Incr;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	ed93 7a01 	vldr	s14, [r3, #4]
 80070ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	edc3 7a01 	vstr	s15, [r3, #4]
            if(v->out < v->in)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	ed93 7a01 	vldr	s14, [r3, #4]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	edd3 7a00 	vldr	s15, [r3]
 80070c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80070c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070ca:	d400      	bmi.n	80070ce <rampa_calc+0xa6>
}
 80070cc:	e008      	b.n	80070e0 <rampa_calc+0xb8>
                v->out = v->in;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	605a      	str	r2, [r3, #4]
}
 80070d6:	e003      	b.n	80070e0 <rampa_calc+0xb8>
        v->out = 0.0F;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f04f 0200 	mov.w	r2, #0
 80070de:	605a      	str	r2, [r3, #4]
}
 80070e0:	bf00      	nop
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <rampa_dual_calc>:
 * @param v Pointer to the dual ramp structure.
 *
 * @note This function calculates the dual ramp.
 */
void rampa_dual_calc(volatile rampa_dual_struct *v)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
    if (v->enable)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	7c1b      	ldrb	r3, [r3, #16]
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d04e      	beq.n	800719c <rampa_dual_calc+0xb0>
    {
        if(v->out < v->in)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	ed93 7a01 	vldr	s14, [r3, #4]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	edd3 7a00 	vldr	s15, [r3]
 800710a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800710e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007112:	d51b      	bpl.n	800714c <rampa_dual_calc+0x60>
        {
            v->out += v->Incr;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	ed93 7a02 	vldr	s14, [r3, #8]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	edd3 7a01 	vldr	s15, [r3, #4]
 8007120:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	edc3 7a01 	vstr	s15, [r3, #4]
            if(v->out > v->in)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	ed93 7a01 	vldr	s14, [r3, #4]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	edd3 7a00 	vldr	s15, [r3]
 8007136:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800713a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800713e:	dc00      	bgt.n	8007142 <rampa_dual_calc+0x56>
    }
    else
    {
        v->out = 0;
    }
}
 8007140:	e030      	b.n	80071a4 <rampa_dual_calc+0xb8>
                v->out = v->in;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	605a      	str	r2, [r3, #4]
}
 800714a:	e02b      	b.n	80071a4 <rampa_dual_calc+0xb8>
        else if(v->out > v->in)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	ed93 7a01 	vldr	s14, [r3, #4]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	edd3 7a00 	vldr	s15, [r3]
 8007158:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800715c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007160:	dc00      	bgt.n	8007164 <rampa_dual_calc+0x78>
}
 8007162:	e01f      	b.n	80071a4 <rampa_dual_calc+0xb8>
            v->out -= v->Decr;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	edd3 7a03 	vldr	s15, [r3, #12]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	ed93 7a01 	vldr	s14, [r3, #4]
 8007170:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	edc3 7a01 	vstr	s15, [r3, #4]
            if(v->out < v->in)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	ed93 7a01 	vldr	s14, [r3, #4]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	edd3 7a00 	vldr	s15, [r3]
 8007186:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800718a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800718e:	d400      	bmi.n	8007192 <rampa_dual_calc+0xa6>
}
 8007190:	e008      	b.n	80071a4 <rampa_dual_calc+0xb8>
                v->out = v->in;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	605a      	str	r2, [r3, #4]
}
 800719a:	e003      	b.n	80071a4 <rampa_dual_calc+0xb8>
        v->out = 0;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f04f 0200 	mov.w	r2, #0
 80071a2:	605a      	str	r2, [r3, #4]
}
 80071a4:	bf00      	nop
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <RMS_calc>:
 *
 * @param v Pointer to the RMS structure.
 *
 * @note This function calculates the Root Mean Square (RMS).
 */
void RMS_calc(volatile RMS_struct *v){
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
    // Calculate RMS output current.
    //-----------------------------------------------------------------------------------------
    v->Sq_Sum += (float) (v->Measure * v->Measure)* v->T_exec;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	ed93 7a01 	vldr	s14, [r3, #4]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80071c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	edd3 7a00 	vldr	s15, [r3]
 80071ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	edd3 7a02 	vldr	s15, [r3, #8]
 80071d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	edc3 7a02 	vstr	s15, [r3, #8]
    // Execute calculation at the zero crossing of the angle
    //
    if (v->Freq > 0.0F) {
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	edd3 7a04 	vldr	s15, [r3, #16]
 80071e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80071ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071f0:	dd25      	ble.n	800723e <RMS_calc+0x8e>
        if (v->Angle_ant < 0.0F && v->Angle >= 0.0F) {
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	edd3 7a06 	vldr	s15, [r3, #24]
 80071f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80071fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007200:	d54c      	bpl.n	800729c <RMS_calc+0xec>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	edd3 7a05 	vldr	s15, [r3, #20]
 8007208:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800720c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007210:	db44      	blt.n	800729c <RMS_calc+0xec>
           // Calculate RMS
            v->Out_RMS = sqrtf((float) v->Sq_Sum * v->Freq);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	ed93 7a02 	vldr	s14, [r3, #8]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	edd3 7a04 	vldr	s15, [r3, #16]
 800721e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007222:	eeb0 0a67 	vmov.f32	s0, s15
 8007226:	f7ff fc57 	bl	8006ad8 <sqrtf>
 800722a:	eef0 7a40 	vmov.f32	s15, s0
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	edc3 7a03 	vstr	s15, [r3, #12]
            v->Sq_Sum = 0;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f04f 0200 	mov.w	r2, #0
 800723a:	609a      	str	r2, [r3, #8]
 800723c:	e02e      	b.n	800729c <RMS_calc+0xec>
        }
        else;
    }
    else if (v->Freq < 0.0F){
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	edd3 7a04 	vldr	s15, [r3, #16]
 8007244:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800724c:	d526      	bpl.n	800729c <RMS_calc+0xec>
        if (v->Angle_ant > 0.0F && v->Angle <= 0.0F) {
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	edd3 7a06 	vldr	s15, [r3, #24]
 8007254:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800725c:	dd1e      	ble.n	800729c <RMS_calc+0xec>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	edd3 7a05 	vldr	s15, [r3, #20]
 8007264:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800726c:	d816      	bhi.n	800729c <RMS_calc+0xec>
            // Calculate RMS
            v->Out_RMS = sqrtf((float) v->Sq_Sum * v->Freq * (-1.0F));
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	ed93 7a02 	vldr	s14, [r3, #8]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	edd3 7a04 	vldr	s15, [r3, #16]
 800727a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800727e:	eef1 7a67 	vneg.f32	s15, s15
 8007282:	eeb0 0a67 	vmov.f32	s0, s15
 8007286:	f7ff fc27 	bl	8006ad8 <sqrtf>
 800728a:	eef0 7a40 	vmov.f32	s15, s0
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	edc3 7a03 	vstr	s15, [r3, #12]
            v->Sq_Sum = 0;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f04f 0200 	mov.w	r2, #0
 800729a:	609a      	str	r2, [r3, #8]
        }
        else;
        //do nothing
    }
    else;
    v->Angle_ant = v->Angle;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	695a      	ldr	r2, [r3, #20]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	619a      	str	r2, [r3, #24]
}
 80072a4:	bf00      	nop
 80072a6:	3708      	adds	r7, #8
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <filtreLP_calc>:
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
    if (v->enable)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	8a9b      	ldrh	r3, [r3, #20]
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d015      	beq.n	80072ea <filtreLP_calc+0x3e>
        v->out = (v->alfa * (v->in - v->out)) + v->out;    // Filter out(k) = alfa*in(k) + (1-alfa)*out(k-1)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	ed93 7a02 	vldr	s14, [r3, #8]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	edd3 6a00 	vldr	s13, [r3]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80072d0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80072d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	edd3 7a01 	vldr	s15, [r3, #4]
 80072de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80072e8:	e003      	b.n	80072f2 <filtreLP_calc+0x46>
        v->out = v->in;        // Without filter. Out(k) = In(k)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	605a      	str	r2, [r3, #4]
}
 80072f2:	bf00      	nop
 80072f4:	370c      	adds	r7, #12
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr

080072fe <step_calc>:
 * @param v Pointer to the step structure.
 *
 * @note This function calculates the step function.
 */
void step_calc(volatile step_struct *v)
{
 80072fe:	b480      	push	{r7}
 8007300:	b083      	sub	sp, #12
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
    // Calculate step width in pulses to count
    v->Pulses = (uint32_t)((v->fs) * (v->t_step));
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	ed93 7a00 	vldr	s14, [r3]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	edd3 7a04 	vldr	s15, [r3, #16]
 8007312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007316:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800731a:	ee17 2a90 	vmov	r2, s15
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	615a      	str	r2, [r3, #20]

    // If enabled, perform the step and start counting
    if (v->enable == 1 && v->Counter < v->Pulses){
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	8b9b      	ldrh	r3, [r3, #28]
 8007326:	b29b      	uxth	r3, r3
 8007328:	2b01      	cmp	r3, #1
 800732a:	d116      	bne.n	800735a <step_calc+0x5c>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	699a      	ldr	r2, [r3, #24]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	695b      	ldr	r3, [r3, #20]
 8007334:	429a      	cmp	r2, r3
 8007336:	d210      	bcs.n	800735a <step_calc+0x5c>
        v->Out = v->In + v->Step;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	ed93 7a01 	vldr	s14, [r3, #4]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	edd3 7a03 	vldr	s15, [r3, #12]
 8007344:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	edc3 7a02 	vstr	s15, [r3, #8]
        v->Counter++;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	699b      	ldr	r3, [r3, #24]
 8007352:	1c5a      	adds	r2, r3, #1
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	619a      	str	r2, [r3, #24]
 8007358:	e01a      	b.n	8007390 <step_calc+0x92>
    }
    // When reaching the time limit, remove step and reset the counter
    else if (v->enable == 1 && v->Counter >= v->Pulses){
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	8b9b      	ldrh	r3, [r3, #28]
 800735e:	b29b      	uxth	r3, r3
 8007360:	2b01      	cmp	r3, #1
 8007362:	d110      	bne.n	8007386 <step_calc+0x88>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	699a      	ldr	r2, [r3, #24]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	429a      	cmp	r2, r3
 800736e:	d30a      	bcc.n	8007386 <step_calc+0x88>
        v->Out = v->In;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	685a      	ldr	r2, [r3, #4]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	609a      	str	r2, [r3, #8]
        v->Counter = 0;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	619a      	str	r2, [r3, #24]
        v->enable = 0;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	839a      	strh	r2, [r3, #28]
 8007384:	e004      	b.n	8007390 <step_calc+0x92>
    }
    // If not enabled
    else v->Out = v->In;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	685a      	ldr	r2, [r3, #4]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	609a      	str	r2, [r3, #8]
}
 800738e:	bf00      	nop
 8007390:	bf00      	nop
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr
