
Inverter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006350  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08006548  08006548  00007548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006560  08006560  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  08006560  08006560  00007560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006568  08006568  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006568  08006568  00007568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800656c  0800656c  0000756c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006570  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f8  2000000c  0800657c  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  0800657c  00008404  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015877  00000000  00000000  0000803a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000381b  00000000  00000000  0001d8b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001358  00000000  00000000  000210d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000edc  00000000  00000000  00022428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028ea3  00000000  00000000  00023304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ac20  00000000  00000000  0004c1a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffe37  00000000  00000000  00066dc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00166bfe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f70  00000000  00000000  00166c44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0016bbb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08006530 	.word	0x08006530

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08006530 	.word	0x08006530

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800052e:	463b      	mov	r3, r7
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800053a:	4b2f      	ldr	r3, [pc, #188]	@ (80005f8 <MX_ADC1_Init+0xd0>)
 800053c:	4a2f      	ldr	r2, [pc, #188]	@ (80005fc <MX_ADC1_Init+0xd4>)
 800053e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000540:	4b2d      	ldr	r3, [pc, #180]	@ (80005f8 <MX_ADC1_Init+0xd0>)
 8000542:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000546:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000548:	4b2b      	ldr	r3, [pc, #172]	@ (80005f8 <MX_ADC1_Init+0xd0>)
 800054a:	2200      	movs	r2, #0
 800054c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800054e:	4b2a      	ldr	r3, [pc, #168]	@ (80005f8 <MX_ADC1_Init+0xd0>)
 8000550:	2201      	movs	r2, #1
 8000552:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000554:	4b28      	ldr	r3, [pc, #160]	@ (80005f8 <MX_ADC1_Init+0xd0>)
 8000556:	2201      	movs	r2, #1
 8000558:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800055a:	4b27      	ldr	r3, [pc, #156]	@ (80005f8 <MX_ADC1_Init+0xd0>)
 800055c:	2200      	movs	r2, #0
 800055e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000562:	4b25      	ldr	r3, [pc, #148]	@ (80005f8 <MX_ADC1_Init+0xd0>)
 8000564:	2200      	movs	r2, #0
 8000566:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000568:	4b23      	ldr	r3, [pc, #140]	@ (80005f8 <MX_ADC1_Init+0xd0>)
 800056a:	4a25      	ldr	r2, [pc, #148]	@ (8000600 <MX_ADC1_Init+0xd8>)
 800056c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800056e:	4b22      	ldr	r3, [pc, #136]	@ (80005f8 <MX_ADC1_Init+0xd0>)
 8000570:	2200      	movs	r2, #0
 8000572:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000574:	4b20      	ldr	r3, [pc, #128]	@ (80005f8 <MX_ADC1_Init+0xd0>)
 8000576:	2203      	movs	r2, #3
 8000578:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800057a:	4b1f      	ldr	r3, [pc, #124]	@ (80005f8 <MX_ADC1_Init+0xd0>)
 800057c:	2201      	movs	r2, #1
 800057e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000582:	4b1d      	ldr	r3, [pc, #116]	@ (80005f8 <MX_ADC1_Init+0xd0>)
 8000584:	2201      	movs	r2, #1
 8000586:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000588:	481b      	ldr	r0, [pc, #108]	@ (80005f8 <MX_ADC1_Init+0xd0>)
 800058a:	f001 fb35 	bl	8001bf8 <HAL_ADC_Init>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000594:	f000 fde8 	bl	8001168 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000598:	2300      	movs	r3, #0
 800059a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800059c:	2301      	movs	r3, #1
 800059e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005a0:	2300      	movs	r3, #0
 80005a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005a4:	463b      	mov	r3, r7
 80005a6:	4619      	mov	r1, r3
 80005a8:	4813      	ldr	r0, [pc, #76]	@ (80005f8 <MX_ADC1_Init+0xd0>)
 80005aa:	f001 fd9b 	bl	80020e4 <HAL_ADC_ConfigChannel>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005b4:	f000 fdd8 	bl	8001168 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005b8:	2301      	movs	r3, #1
 80005ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005bc:	2302      	movs	r3, #2
 80005be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005c0:	463b      	mov	r3, r7
 80005c2:	4619      	mov	r1, r3
 80005c4:	480c      	ldr	r0, [pc, #48]	@ (80005f8 <MX_ADC1_Init+0xd0>)
 80005c6:	f001 fd8d 	bl	80020e4 <HAL_ADC_ConfigChannel>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80005d0:	f000 fdca 	bl	8001168 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 80005d4:	2312      	movs	r3, #18
 80005d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80005d8:	2303      	movs	r3, #3
 80005da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005dc:	463b      	mov	r3, r7
 80005de:	4619      	mov	r1, r3
 80005e0:	4805      	ldr	r0, [pc, #20]	@ (80005f8 <MX_ADC1_Init+0xd0>)
 80005e2:	f001 fd7f 	bl	80020e4 <HAL_ADC_ConfigChannel>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80005ec:	f000 fdbc 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005f0:	bf00      	nop
 80005f2:	3710      	adds	r7, #16
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20000028 	.word	0x20000028
 80005fc:	40012000 	.word	0x40012000
 8000600:	0f000001 	.word	0x0f000001

08000604 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800060a:	463b      	mov	r3, r7
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000616:	4b37      	ldr	r3, [pc, #220]	@ (80006f4 <MX_ADC2_Init+0xf0>)
 8000618:	4a37      	ldr	r2, [pc, #220]	@ (80006f8 <MX_ADC2_Init+0xf4>)
 800061a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800061c:	4b35      	ldr	r3, [pc, #212]	@ (80006f4 <MX_ADC2_Init+0xf0>)
 800061e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000622:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000624:	4b33      	ldr	r3, [pc, #204]	@ (80006f4 <MX_ADC2_Init+0xf0>)
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800062a:	4b32      	ldr	r3, [pc, #200]	@ (80006f4 <MX_ADC2_Init+0xf0>)
 800062c:	2201      	movs	r2, #1
 800062e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000630:	4b30      	ldr	r3, [pc, #192]	@ (80006f4 <MX_ADC2_Init+0xf0>)
 8000632:	2200      	movs	r2, #0
 8000634:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000636:	4b2f      	ldr	r3, [pc, #188]	@ (80006f4 <MX_ADC2_Init+0xf0>)
 8000638:	2200      	movs	r2, #0
 800063a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800063e:	4b2d      	ldr	r3, [pc, #180]	@ (80006f4 <MX_ADC2_Init+0xf0>)
 8000640:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000644:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000646:	4b2b      	ldr	r3, [pc, #172]	@ (80006f4 <MX_ADC2_Init+0xf0>)
 8000648:	f04f 6210 	mov.w	r2, #150994944	@ 0x9000000
 800064c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800064e:	4b29      	ldr	r3, [pc, #164]	@ (80006f4 <MX_ADC2_Init+0xf0>)
 8000650:	2200      	movs	r2, #0
 8000652:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8000654:	4b27      	ldr	r3, [pc, #156]	@ (80006f4 <MX_ADC2_Init+0xf0>)
 8000656:	2204      	movs	r2, #4
 8000658:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800065a:	4b26      	ldr	r3, [pc, #152]	@ (80006f4 <MX_ADC2_Init+0xf0>)
 800065c:	2201      	movs	r2, #1
 800065e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000662:	4b24      	ldr	r3, [pc, #144]	@ (80006f4 <MX_ADC2_Init+0xf0>)
 8000664:	2200      	movs	r2, #0
 8000666:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000668:	4822      	ldr	r0, [pc, #136]	@ (80006f4 <MX_ADC2_Init+0xf0>)
 800066a:	f001 fac5 	bl	8001bf8 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8000674:	f000 fd78 	bl	8001168 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000678:	2306      	movs	r3, #6
 800067a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800067c:	2301      	movs	r3, #1
 800067e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000680:	2301      	movs	r3, #1
 8000682:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000684:	463b      	mov	r3, r7
 8000686:	4619      	mov	r1, r3
 8000688:	481a      	ldr	r0, [pc, #104]	@ (80006f4 <MX_ADC2_Init+0xf0>)
 800068a:	f001 fd2b 	bl	80020e4 <HAL_ADC_ConfigChannel>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8000694:	f000 fd68 	bl	8001168 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000698:	2307      	movs	r3, #7
 800069a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800069c:	2302      	movs	r3, #2
 800069e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006a0:	463b      	mov	r3, r7
 80006a2:	4619      	mov	r1, r3
 80006a4:	4813      	ldr	r0, [pc, #76]	@ (80006f4 <MX_ADC2_Init+0xf0>)
 80006a6:	f001 fd1d 	bl	80020e4 <HAL_ADC_ConfigChannel>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 80006b0:	f000 fd5a 	bl	8001168 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80006b4:	2308      	movs	r3, #8
 80006b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006b8:	2303      	movs	r3, #3
 80006ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006bc:	463b      	mov	r3, r7
 80006be:	4619      	mov	r1, r3
 80006c0:	480c      	ldr	r0, [pc, #48]	@ (80006f4 <MX_ADC2_Init+0xf0>)
 80006c2:	f001 fd0f 	bl	80020e4 <HAL_ADC_ConfigChannel>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_ADC2_Init+0xcc>
  {
    Error_Handler();
 80006cc:	f000 fd4c 	bl	8001168 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80006d0:	2309      	movs	r3, #9
 80006d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80006d4:	2304      	movs	r3, #4
 80006d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006d8:	463b      	mov	r3, r7
 80006da:	4619      	mov	r1, r3
 80006dc:	4805      	ldr	r0, [pc, #20]	@ (80006f4 <MX_ADC2_Init+0xf0>)
 80006de:	f001 fd01 	bl	80020e4 <HAL_ADC_ConfigChannel>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_ADC2_Init+0xe8>
  {
    Error_Handler();
 80006e8:	f000 fd3e 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000070 	.word	0x20000070
 80006f8:	40012100 	.word	0x40012100

080006fc <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000702:	463b      	mov	r3, r7
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800070e:	4b21      	ldr	r3, [pc, #132]	@ (8000794 <MX_ADC3_Init+0x98>)
 8000710:	4a21      	ldr	r2, [pc, #132]	@ (8000798 <MX_ADC3_Init+0x9c>)
 8000712:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000714:	4b1f      	ldr	r3, [pc, #124]	@ (8000794 <MX_ADC3_Init+0x98>)
 8000716:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800071a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800071c:	4b1d      	ldr	r3, [pc, #116]	@ (8000794 <MX_ADC3_Init+0x98>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000722:	4b1c      	ldr	r3, [pc, #112]	@ (8000794 <MX_ADC3_Init+0x98>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000728:	4b1a      	ldr	r3, [pc, #104]	@ (8000794 <MX_ADC3_Init+0x98>)
 800072a:	2200      	movs	r2, #0
 800072c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800072e:	4b19      	ldr	r3, [pc, #100]	@ (8000794 <MX_ADC3_Init+0x98>)
 8000730:	2200      	movs	r2, #0
 8000732:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000736:	4b17      	ldr	r3, [pc, #92]	@ (8000794 <MX_ADC3_Init+0x98>)
 8000738:	2200      	movs	r2, #0
 800073a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800073c:	4b15      	ldr	r3, [pc, #84]	@ (8000794 <MX_ADC3_Init+0x98>)
 800073e:	4a17      	ldr	r2, [pc, #92]	@ (800079c <MX_ADC3_Init+0xa0>)
 8000740:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000742:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <MX_ADC3_Init+0x98>)
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000748:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <MX_ADC3_Init+0x98>)
 800074a:	2201      	movs	r2, #1
 800074c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800074e:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <MX_ADC3_Init+0x98>)
 8000750:	2200      	movs	r2, #0
 8000752:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000756:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <MX_ADC3_Init+0x98>)
 8000758:	2201      	movs	r2, #1
 800075a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800075c:	480d      	ldr	r0, [pc, #52]	@ (8000794 <MX_ADC3_Init+0x98>)
 800075e:	f001 fa4b 	bl	8001bf8 <HAL_ADC_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000768:	f000 fcfe 	bl	8001168 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800076c:	230a      	movs	r3, #10
 800076e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000770:	2301      	movs	r3, #1
 8000772:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000778:	463b      	mov	r3, r7
 800077a:	4619      	mov	r1, r3
 800077c:	4805      	ldr	r0, [pc, #20]	@ (8000794 <MX_ADC3_Init+0x98>)
 800077e:	f001 fcb1 	bl	80020e4 <HAL_ADC_ConfigChannel>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000788:	f000 fcee 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800078c:	bf00      	nop
 800078e:	3710      	adds	r7, #16
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200000b8 	.word	0x200000b8
 8000798:	40012200 	.word	0x40012200
 800079c:	0f000001 	.word	0x0f000001

080007a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08e      	sub	sp, #56	@ 0x38
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a9f      	ldr	r2, [pc, #636]	@ (8000a3c <HAL_ADC_MspInit+0x29c>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d15c      	bne.n	800087c <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007c2:	4b9f      	ldr	r3, [pc, #636]	@ (8000a40 <HAL_ADC_MspInit+0x2a0>)
 80007c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007c6:	4a9e      	ldr	r2, [pc, #632]	@ (8000a40 <HAL_ADC_MspInit+0x2a0>)
 80007c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80007ce:	4b9c      	ldr	r3, [pc, #624]	@ (8000a40 <HAL_ADC_MspInit+0x2a0>)
 80007d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80007d6:	623b      	str	r3, [r7, #32]
 80007d8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	4b99      	ldr	r3, [pc, #612]	@ (8000a40 <HAL_ADC_MspInit+0x2a0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	4a98      	ldr	r2, [pc, #608]	@ (8000a40 <HAL_ADC_MspInit+0x2a0>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e6:	4b96      	ldr	r3, [pc, #600]	@ (8000a40 <HAL_ADC_MspInit+0x2a0>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	61fb      	str	r3, [r7, #28]
 80007f0:	69fb      	ldr	r3, [r7, #28]
    PA0/WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ia_L_Pin|ib_L_Pin|ic_L_Pin|VDC_L_Pin;
 80007f2:	230f      	movs	r3, #15
 80007f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007f6:	2303      	movs	r3, #3
 80007f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000802:	4619      	mov	r1, r3
 8000804:	488f      	ldr	r0, [pc, #572]	@ (8000a44 <HAL_ADC_MspInit+0x2a4>)
 8000806:	f002 ffe5 	bl	80037d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800080a:	4b8f      	ldr	r3, [pc, #572]	@ (8000a48 <HAL_ADC_MspInit+0x2a8>)
 800080c:	4a8f      	ldr	r2, [pc, #572]	@ (8000a4c <HAL_ADC_MspInit+0x2ac>)
 800080e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000810:	4b8d      	ldr	r3, [pc, #564]	@ (8000a48 <HAL_ADC_MspInit+0x2a8>)
 8000812:	2200      	movs	r2, #0
 8000814:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000816:	4b8c      	ldr	r3, [pc, #560]	@ (8000a48 <HAL_ADC_MspInit+0x2a8>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800081c:	4b8a      	ldr	r3, [pc, #552]	@ (8000a48 <HAL_ADC_MspInit+0x2a8>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000822:	4b89      	ldr	r3, [pc, #548]	@ (8000a48 <HAL_ADC_MspInit+0x2a8>)
 8000824:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000828:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800082a:	4b87      	ldr	r3, [pc, #540]	@ (8000a48 <HAL_ADC_MspInit+0x2a8>)
 800082c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000830:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000832:	4b85      	ldr	r3, [pc, #532]	@ (8000a48 <HAL_ADC_MspInit+0x2a8>)
 8000834:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000838:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800083a:	4b83      	ldr	r3, [pc, #524]	@ (8000a48 <HAL_ADC_MspInit+0x2a8>)
 800083c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000840:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000842:	4b81      	ldr	r3, [pc, #516]	@ (8000a48 <HAL_ADC_MspInit+0x2a8>)
 8000844:	2200      	movs	r2, #0
 8000846:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000848:	4b7f      	ldr	r3, [pc, #508]	@ (8000a48 <HAL_ADC_MspInit+0x2a8>)
 800084a:	2200      	movs	r2, #0
 800084c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800084e:	487e      	ldr	r0, [pc, #504]	@ (8000a48 <HAL_ADC_MspInit+0x2a8>)
 8000850:	f002 fc48 	bl	80030e4 <HAL_DMA_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 800085a:	f000 fc85 	bl	8001168 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4a79      	ldr	r2, [pc, #484]	@ (8000a48 <HAL_ADC_MspInit+0x2a8>)
 8000862:	639a      	str	r2, [r3, #56]	@ 0x38
 8000864:	4a78      	ldr	r2, [pc, #480]	@ (8000a48 <HAL_ADC_MspInit+0x2a8>)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800086a:	2200      	movs	r2, #0
 800086c:	2100      	movs	r1, #0
 800086e:	2012      	movs	r0, #18
 8000870:	f002 fb23 	bl	8002eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000874:	2012      	movs	r0, #18
 8000876:	f002 fb3c 	bl	8002ef2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800087a:	e0da      	b.n	8000a32 <HAL_ADC_MspInit+0x292>
  else if(adcHandle->Instance==ADC2)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a73      	ldr	r2, [pc, #460]	@ (8000a50 <HAL_ADC_MspInit+0x2b0>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d174      	bne.n	8000970 <HAL_ADC_MspInit+0x1d0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000886:	4b6e      	ldr	r3, [pc, #440]	@ (8000a40 <HAL_ADC_MspInit+0x2a0>)
 8000888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800088a:	4a6d      	ldr	r2, [pc, #436]	@ (8000a40 <HAL_ADC_MspInit+0x2a0>)
 800088c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000890:	6453      	str	r3, [r2, #68]	@ 0x44
 8000892:	4b6b      	ldr	r3, [pc, #428]	@ (8000a40 <HAL_ADC_MspInit+0x2a0>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000896:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800089a:	61bb      	str	r3, [r7, #24]
 800089c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	4b68      	ldr	r3, [pc, #416]	@ (8000a40 <HAL_ADC_MspInit+0x2a0>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a67      	ldr	r2, [pc, #412]	@ (8000a40 <HAL_ADC_MspInit+0x2a0>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b65      	ldr	r3, [pc, #404]	@ (8000a40 <HAL_ADC_MspInit+0x2a0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	617b      	str	r3, [r7, #20]
 80008b4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	4b62      	ldr	r3, [pc, #392]	@ (8000a40 <HAL_ADC_MspInit+0x2a0>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	4a61      	ldr	r2, [pc, #388]	@ (8000a40 <HAL_ADC_MspInit+0x2a0>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c2:	4b5f      	ldr	r3, [pc, #380]	@ (8000a40 <HAL_ADC_MspInit+0x2a0>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ia_R_Pin|ib_R_Pin;
 80008ce:	23c0      	movs	r3, #192	@ 0xc0
 80008d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008d2:	2303      	movs	r3, #3
 80008d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008de:	4619      	mov	r1, r3
 80008e0:	4858      	ldr	r0, [pc, #352]	@ (8000a44 <HAL_ADC_MspInit+0x2a4>)
 80008e2:	f002 ff77 	bl	80037d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ic_R_Pin|VDC_R_Pin;
 80008e6:	2303      	movs	r3, #3
 80008e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008ea:	2303      	movs	r3, #3
 80008ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008f6:	4619      	mov	r1, r3
 80008f8:	4856      	ldr	r0, [pc, #344]	@ (8000a54 <HAL_ADC_MspInit+0x2b4>)
 80008fa:	f002 ff6b 	bl	80037d4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80008fe:	4b56      	ldr	r3, [pc, #344]	@ (8000a58 <HAL_ADC_MspInit+0x2b8>)
 8000900:	4a56      	ldr	r2, [pc, #344]	@ (8000a5c <HAL_ADC_MspInit+0x2bc>)
 8000902:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8000904:	4b54      	ldr	r3, [pc, #336]	@ (8000a58 <HAL_ADC_MspInit+0x2b8>)
 8000906:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800090a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800090c:	4b52      	ldr	r3, [pc, #328]	@ (8000a58 <HAL_ADC_MspInit+0x2b8>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000912:	4b51      	ldr	r3, [pc, #324]	@ (8000a58 <HAL_ADC_MspInit+0x2b8>)
 8000914:	2200      	movs	r2, #0
 8000916:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000918:	4b4f      	ldr	r3, [pc, #316]	@ (8000a58 <HAL_ADC_MspInit+0x2b8>)
 800091a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800091e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000920:	4b4d      	ldr	r3, [pc, #308]	@ (8000a58 <HAL_ADC_MspInit+0x2b8>)
 8000922:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000926:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000928:	4b4b      	ldr	r3, [pc, #300]	@ (8000a58 <HAL_ADC_MspInit+0x2b8>)
 800092a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800092e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8000930:	4b49      	ldr	r3, [pc, #292]	@ (8000a58 <HAL_ADC_MspInit+0x2b8>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000936:	4b48      	ldr	r3, [pc, #288]	@ (8000a58 <HAL_ADC_MspInit+0x2b8>)
 8000938:	2200      	movs	r2, #0
 800093a:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800093c:	4b46      	ldr	r3, [pc, #280]	@ (8000a58 <HAL_ADC_MspInit+0x2b8>)
 800093e:	2200      	movs	r2, #0
 8000940:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000942:	4845      	ldr	r0, [pc, #276]	@ (8000a58 <HAL_ADC_MspInit+0x2b8>)
 8000944:	f002 fbce 	bl	80030e4 <HAL_DMA_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <HAL_ADC_MspInit+0x1b2>
      Error_Handler();
 800094e:	f000 fc0b 	bl	8001168 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4a40      	ldr	r2, [pc, #256]	@ (8000a58 <HAL_ADC_MspInit+0x2b8>)
 8000956:	639a      	str	r2, [r3, #56]	@ 0x38
 8000958:	4a3f      	ldr	r2, [pc, #252]	@ (8000a58 <HAL_ADC_MspInit+0x2b8>)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800095e:	2200      	movs	r2, #0
 8000960:	2100      	movs	r1, #0
 8000962:	2012      	movs	r0, #18
 8000964:	f002 faa9 	bl	8002eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000968:	2012      	movs	r0, #18
 800096a:	f002 fac2 	bl	8002ef2 <HAL_NVIC_EnableIRQ>
}
 800096e:	e060      	b.n	8000a32 <HAL_ADC_MspInit+0x292>
  else if(adcHandle->Instance==ADC3)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a3a      	ldr	r2, [pc, #232]	@ (8000a60 <HAL_ADC_MspInit+0x2c0>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d15b      	bne.n	8000a32 <HAL_ADC_MspInit+0x292>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800097a:	4b31      	ldr	r3, [pc, #196]	@ (8000a40 <HAL_ADC_MspInit+0x2a0>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800097e:	4a30      	ldr	r2, [pc, #192]	@ (8000a40 <HAL_ADC_MspInit+0x2a0>)
 8000980:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000984:	6453      	str	r3, [r2, #68]	@ 0x44
 8000986:	4b2e      	ldr	r3, [pc, #184]	@ (8000a40 <HAL_ADC_MspInit+0x2a0>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800098a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000992:	4b2b      	ldr	r3, [pc, #172]	@ (8000a40 <HAL_ADC_MspInit+0x2a0>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	4a2a      	ldr	r2, [pc, #168]	@ (8000a40 <HAL_ADC_MspInit+0x2a0>)
 8000998:	f043 0304 	orr.w	r3, r3, #4
 800099c:	6313      	str	r3, [r2, #48]	@ 0x30
 800099e:	4b28      	ldr	r3, [pc, #160]	@ (8000a40 <HAL_ADC_MspInit+0x2a0>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	f003 0304 	and.w	r3, r3, #4
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Tinv_L_Pin|Tinv_R_Pin|Tmot_L_Pin|Tmot_R_Pin;
 80009aa:	230f      	movs	r3, #15
 80009ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ae:	2303      	movs	r3, #3
 80009b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ba:	4619      	mov	r1, r3
 80009bc:	4829      	ldr	r0, [pc, #164]	@ (8000a64 <HAL_ADC_MspInit+0x2c4>)
 80009be:	f002 ff09 	bl	80037d4 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 80009c2:	4b29      	ldr	r3, [pc, #164]	@ (8000a68 <HAL_ADC_MspInit+0x2c8>)
 80009c4:	4a29      	ldr	r2, [pc, #164]	@ (8000a6c <HAL_ADC_MspInit+0x2cc>)
 80009c6:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80009c8:	4b27      	ldr	r3, [pc, #156]	@ (8000a68 <HAL_ADC_MspInit+0x2c8>)
 80009ca:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80009ce:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009d0:	4b25      	ldr	r3, [pc, #148]	@ (8000a68 <HAL_ADC_MspInit+0x2c8>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80009d6:	4b24      	ldr	r3, [pc, #144]	@ (8000a68 <HAL_ADC_MspInit+0x2c8>)
 80009d8:	2200      	movs	r2, #0
 80009da:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80009dc:	4b22      	ldr	r3, [pc, #136]	@ (8000a68 <HAL_ADC_MspInit+0x2c8>)
 80009de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009e2:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009e4:	4b20      	ldr	r3, [pc, #128]	@ (8000a68 <HAL_ADC_MspInit+0x2c8>)
 80009e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009ea:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000a68 <HAL_ADC_MspInit+0x2c8>)
 80009ee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009f2:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 80009f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a68 <HAL_ADC_MspInit+0x2c8>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80009fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000a68 <HAL_ADC_MspInit+0x2c8>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a00:	4b19      	ldr	r3, [pc, #100]	@ (8000a68 <HAL_ADC_MspInit+0x2c8>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000a06:	4818      	ldr	r0, [pc, #96]	@ (8000a68 <HAL_ADC_MspInit+0x2c8>)
 8000a08:	f002 fb6c 	bl	80030e4 <HAL_DMA_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <HAL_ADC_MspInit+0x276>
      Error_Handler();
 8000a12:	f000 fba9 	bl	8001168 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a13      	ldr	r2, [pc, #76]	@ (8000a68 <HAL_ADC_MspInit+0x2c8>)
 8000a1a:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a1c:	4a12      	ldr	r2, [pc, #72]	@ (8000a68 <HAL_ADC_MspInit+0x2c8>)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	2012      	movs	r0, #18
 8000a28:	f002 fa47 	bl	8002eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000a2c:	2012      	movs	r0, #18
 8000a2e:	f002 fa60 	bl	8002ef2 <HAL_NVIC_EnableIRQ>
}
 8000a32:	bf00      	nop
 8000a34:	3738      	adds	r7, #56	@ 0x38
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40012000 	.word	0x40012000
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40020000 	.word	0x40020000
 8000a48:	20000100 	.word	0x20000100
 8000a4c:	40026410 	.word	0x40026410
 8000a50:	40012100 	.word	0x40012100
 8000a54:	40020400 	.word	0x40020400
 8000a58:	20000160 	.word	0x20000160
 8000a5c:	40026440 	.word	0x40026440
 8000a60:	40012200 	.word	0x40012200
 8000a64:	40020800 	.word	0x40020800
 8000a68:	200001c0 	.word	0x200001c0
 8000a6c:	40026428 	.word	0x40026428

08000a70 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a74:	4b17      	ldr	r3, [pc, #92]	@ (8000ad4 <MX_CAN1_Init+0x64>)
 8000a76:	4a18      	ldr	r2, [pc, #96]	@ (8000ad8 <MX_CAN1_Init+0x68>)
 8000a78:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 8000a7a:	4b16      	ldr	r3, [pc, #88]	@ (8000ad4 <MX_CAN1_Init+0x64>)
 8000a7c:	220c      	movs	r2, #12
 8000a7e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a80:	4b14      	ldr	r3, [pc, #80]	@ (8000ad4 <MX_CAN1_Init+0x64>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a86:	4b13      	ldr	r3, [pc, #76]	@ (8000ad4 <MX_CAN1_Init+0x64>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 8000a8c:	4b11      	ldr	r3, [pc, #68]	@ (8000ad4 <MX_CAN1_Init+0x64>)
 8000a8e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000a92:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad4 <MX_CAN1_Init+0x64>)
 8000a96:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000a9a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad4 <MX_CAN1_Init+0x64>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad4 <MX_CAN1_Init+0x64>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad4 <MX_CAN1_Init+0x64>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000aae:	4b09      	ldr	r3, [pc, #36]	@ (8000ad4 <MX_CAN1_Init+0x64>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ab4:	4b07      	ldr	r3, [pc, #28]	@ (8000ad4 <MX_CAN1_Init+0x64>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000aba:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <MX_CAN1_Init+0x64>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ac0:	4804      	ldr	r0, [pc, #16]	@ (8000ad4 <MX_CAN1_Init+0x64>)
 8000ac2:	f001 fdeb 	bl	800269c <HAL_CAN_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000acc:	f000 fb4c 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000220 	.word	0x20000220
 8000ad8:	40006400 	.word	0x40006400

08000adc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	@ 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a1f      	ldr	r2, [pc, #124]	@ (8000b78 <HAL_CAN_MspInit+0x9c>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d137      	bne.n	8000b6e <HAL_CAN_MspInit+0x92>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000afe:	4b1f      	ldr	r3, [pc, #124]	@ (8000b7c <HAL_CAN_MspInit+0xa0>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b02:	4a1e      	ldr	r2, [pc, #120]	@ (8000b7c <HAL_CAN_MspInit+0xa0>)
 8000b04:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b7c <HAL_CAN_MspInit+0xa0>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b16:	4b19      	ldr	r3, [pc, #100]	@ (8000b7c <HAL_CAN_MspInit+0xa0>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	4a18      	ldr	r2, [pc, #96]	@ (8000b7c <HAL_CAN_MspInit+0xa0>)
 8000b1c:	f043 0308 	orr.w	r3, r3, #8
 8000b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b22:	4b16      	ldr	r3, [pc, #88]	@ (8000b7c <HAL_CAN_MspInit+0xa0>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	f003 0308 	and.w	r3, r3, #8
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b32:	2302      	movs	r3, #2
 8000b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b3e:	2309      	movs	r3, #9
 8000b40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4619      	mov	r1, r3
 8000b48:	480d      	ldr	r0, [pc, #52]	@ (8000b80 <HAL_CAN_MspInit+0xa4>)
 8000b4a:	f002 fe43 	bl	80037d4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2100      	movs	r1, #0
 8000b52:	2014      	movs	r0, #20
 8000b54:	f002 f9b1 	bl	8002eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000b58:	2014      	movs	r0, #20
 8000b5a:	f002 f9ca 	bl	8002ef2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2100      	movs	r1, #0
 8000b62:	2015      	movs	r0, #21
 8000b64:	f002 f9a9 	bl	8002eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000b68:	2015      	movs	r0, #21
 8000b6a:	f002 f9c2 	bl	8002ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000b6e:	bf00      	nop
 8000b70:	3728      	adds	r7, #40	@ 0x28
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40006400 	.word	0x40006400
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020c00 	.word	0x40020c00

08000b84 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b8a:	463b      	mov	r3, r7
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000b92:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd0 <MX_DAC_Init+0x4c>)
 8000b94:	4a0f      	ldr	r2, [pc, #60]	@ (8000bd4 <MX_DAC_Init+0x50>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000b98:	480d      	ldr	r0, [pc, #52]	@ (8000bd0 <MX_DAC_Init+0x4c>)
 8000b9a:	f002 f9c4 	bl	8002f26 <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000ba4:	f000 fae0 	bl	8001168 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bac:	2300      	movs	r3, #0
 8000bae:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4806      	ldr	r0, [pc, #24]	@ (8000bd0 <MX_DAC_Init+0x4c>)
 8000bb8:	f002 fa3b 	bl	8003032 <HAL_DAC_ConfigChannel>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000bc2:	f000 fad1 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000248 	.word	0x20000248
 8000bd4:	40007400 	.word	0x40007400

08000bd8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	@ 0x28
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a19      	ldr	r2, [pc, #100]	@ (8000c5c <HAL_DAC_MspInit+0x84>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d12b      	bne.n	8000c52 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000bfa:	4b19      	ldr	r3, [pc, #100]	@ (8000c60 <HAL_DAC_MspInit+0x88>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfe:	4a18      	ldr	r2, [pc, #96]	@ (8000c60 <HAL_DAC_MspInit+0x88>)
 8000c00:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000c04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c06:	4b16      	ldr	r3, [pc, #88]	@ (8000c60 <HAL_DAC_MspInit+0x88>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c12:	4b13      	ldr	r3, [pc, #76]	@ (8000c60 <HAL_DAC_MspInit+0x88>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	4a12      	ldr	r2, [pc, #72]	@ (8000c60 <HAL_DAC_MspInit+0x88>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1e:	4b10      	ldr	r3, [pc, #64]	@ (8000c60 <HAL_DAC_MspInit+0x88>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = DAC_Pin;
 8000c2a:	2310      	movs	r3, #16
 8000c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC_GPIO_Port, &GPIO_InitStruct);
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4809      	ldr	r0, [pc, #36]	@ (8000c64 <HAL_DAC_MspInit+0x8c>)
 8000c3e:	f002 fdc9 	bl	80037d4 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2100      	movs	r1, #0
 8000c46:	2036      	movs	r0, #54	@ 0x36
 8000c48:	f002 f937 	bl	8002eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c4c:	2036      	movs	r0, #54	@ 0x36
 8000c4e:	f002 f950 	bl	8002ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000c52:	bf00      	nop
 8000c54:	3728      	adds	r7, #40	@ 0x28
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40007400 	.word	0x40007400
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40020000 	.word	0x40020000

08000c68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c6e:	4b14      	ldr	r3, [pc, #80]	@ (8000cc0 <MX_DMA_Init+0x58>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	4a13      	ldr	r2, [pc, #76]	@ (8000cc0 <MX_DMA_Init+0x58>)
 8000c74:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7a:	4b11      	ldr	r3, [pc, #68]	@ (8000cc0 <MX_DMA_Init+0x58>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2100      	movs	r1, #0
 8000c8a:	2038      	movs	r0, #56	@ 0x38
 8000c8c:	f002 f915 	bl	8002eba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c90:	2038      	movs	r0, #56	@ 0x38
 8000c92:	f002 f92e 	bl	8002ef2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2100      	movs	r1, #0
 8000c9a:	2039      	movs	r0, #57	@ 0x39
 8000c9c:	f002 f90d 	bl	8002eba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000ca0:	2039      	movs	r0, #57	@ 0x39
 8000ca2:	f002 f926 	bl	8002ef2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2100      	movs	r1, #0
 8000caa:	203a      	movs	r0, #58	@ 0x3a
 8000cac:	f002 f905 	bl	8002eba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000cb0:	203a      	movs	r0, #58	@ 0x3a
 8000cb2:	f002 f91e 	bl	8002ef2 <HAL_NVIC_EnableIRQ>

}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40023800 	.word	0x40023800

08000cc4 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08c      	sub	sp, #48	@ 0x30
 8000cc8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cca:	f107 031c 	add.w	r3, r7, #28
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
 8000cd6:	60da      	str	r2, [r3, #12]
 8000cd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cda:	4b68      	ldr	r3, [pc, #416]	@ (8000e7c <MX_GPIO_Init+0x1b8>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cde:	4a67      	ldr	r2, [pc, #412]	@ (8000e7c <MX_GPIO_Init+0x1b8>)
 8000ce0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce6:	4b65      	ldr	r3, [pc, #404]	@ (8000e7c <MX_GPIO_Init+0x1b8>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cee:	61bb      	str	r3, [r7, #24]
 8000cf0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf2:	4b62      	ldr	r3, [pc, #392]	@ (8000e7c <MX_GPIO_Init+0x1b8>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	4a61      	ldr	r2, [pc, #388]	@ (8000e7c <MX_GPIO_Init+0x1b8>)
 8000cf8:	f043 0304 	orr.w	r3, r3, #4
 8000cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfe:	4b5f      	ldr	r3, [pc, #380]	@ (8000e7c <MX_GPIO_Init+0x1b8>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	f003 0304 	and.w	r3, r3, #4
 8000d06:	617b      	str	r3, [r7, #20]
 8000d08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	4b5c      	ldr	r3, [pc, #368]	@ (8000e7c <MX_GPIO_Init+0x1b8>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	4a5b      	ldr	r2, [pc, #364]	@ (8000e7c <MX_GPIO_Init+0x1b8>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d16:	4b59      	ldr	r3, [pc, #356]	@ (8000e7c <MX_GPIO_Init+0x1b8>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d22:	4b56      	ldr	r3, [pc, #344]	@ (8000e7c <MX_GPIO_Init+0x1b8>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	4a55      	ldr	r2, [pc, #340]	@ (8000e7c <MX_GPIO_Init+0x1b8>)
 8000d28:	f043 0302 	orr.w	r3, r3, #2
 8000d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2e:	4b53      	ldr	r3, [pc, #332]	@ (8000e7c <MX_GPIO_Init+0x1b8>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	f003 0302 	and.w	r3, r3, #2
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d3a:	4b50      	ldr	r3, [pc, #320]	@ (8000e7c <MX_GPIO_Init+0x1b8>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	4a4f      	ldr	r2, [pc, #316]	@ (8000e7c <MX_GPIO_Init+0x1b8>)
 8000d40:	f043 0310 	orr.w	r3, r3, #16
 8000d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d46:	4b4d      	ldr	r3, [pc, #308]	@ (8000e7c <MX_GPIO_Init+0x1b8>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	f003 0310 	and.w	r3, r3, #16
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d52:	4b4a      	ldr	r3, [pc, #296]	@ (8000e7c <MX_GPIO_Init+0x1b8>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d56:	4a49      	ldr	r2, [pc, #292]	@ (8000e7c <MX_GPIO_Init+0x1b8>)
 8000d58:	f043 0308 	orr.w	r3, r3, #8
 8000d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5e:	4b47      	ldr	r3, [pc, #284]	@ (8000e7c <MX_GPIO_Init+0x1b8>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	f003 0308 	and.w	r3, r3, #8
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_R_GPIO_Port, ENABLE_R_Pin, GPIO_PIN_RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2104      	movs	r1, #4
 8000d6e:	4844      	ldr	r0, [pc, #272]	@ (8000e80 <MX_GPIO_Init+0x1bc>)
 8000d70:	f002 fef4 	bl	8003b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_LEFT_Pin|LED_RIGHT_Pin|LED_ERR_Pin, GPIO_PIN_RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	2170      	movs	r1, #112	@ 0x70
 8000d78:	4842      	ldr	r0, [pc, #264]	@ (8000e84 <MX_GPIO_Init+0x1c0>)
 8000d7a:	f002 feef 	bl	8003b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SC_det_Pin;
 8000d7e:	2310      	movs	r3, #16
 8000d80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d82:	2300      	movs	r3, #0
 8000d84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SC_det_GPIO_Port, &GPIO_InitStruct);
 8000d8a:	f107 031c 	add.w	r3, r7, #28
 8000d8e:	4619      	mov	r1, r3
 8000d90:	483d      	ldr	r0, [pc, #244]	@ (8000e88 <MX_GPIO_Init+0x1c4>)
 8000d92:	f002 fd1f 	bl	80037d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_R_Pin;
 8000d96:	2304      	movs	r3, #4
 8000d98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ENABLE_R_GPIO_Port, &GPIO_InitStruct);
 8000da6:	f107 031c 	add.w	r3, r7, #28
 8000daa:	4619      	mov	r1, r3
 8000dac:	4834      	ldr	r0, [pc, #208]	@ (8000e80 <MX_GPIO_Init+0x1bc>)
 8000dae:	f002 fd11 	bl	80037d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ENABLE_L_Pin|WRN_L_Pin|WRN_R_Pin;
 8000db2:	f24c 0380 	movw	r3, #49280	@ 0xc080
 8000db6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db8:	2300      	movs	r3, #0
 8000dba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dc0:	f107 031c 	add.w	r3, r7, #28
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4831      	ldr	r0, [pc, #196]	@ (8000e8c <MX_GPIO_Init+0x1c8>)
 8000dc8:	f002 fd04 	bl	80037d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIP_R_Pin;
 8000dcc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dd2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000dd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TRIP_R_GPIO_Port, &GPIO_InitStruct);
 8000ddc:	f107 031c 	add.w	r3, r7, #28
 8000de0:	4619      	mov	r1, r3
 8000de2:	4829      	ldr	r0, [pc, #164]	@ (8000e88 <MX_GPIO_Init+0x1c4>)
 8000de4:	f002 fcf6 	bl	80037d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIP_L_Pin;
 8000de8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dee:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000df2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TRIP_L_GPIO_Port, &GPIO_InitStruct);
 8000df8:	f107 031c 	add.w	r3, r7, #28
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4824      	ldr	r0, [pc, #144]	@ (8000e90 <MX_GPIO_Init+0x1cc>)
 8000e00:	f002 fce8 	bl	80037d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e12:	f107 031c 	add.w	r3, r7, #28
 8000e16:	4619      	mov	r1, r3
 8000e18:	481d      	ldr	r0, [pc, #116]	@ (8000e90 <MX_GPIO_Init+0x1cc>)
 8000e1a:	f002 fcdb 	bl	80037d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000e1e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000e22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e24:	2302      	movs	r3, #2
 8000e26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e30:	230a      	movs	r3, #10
 8000e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e34:	f107 031c 	add.w	r3, r7, #28
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4815      	ldr	r0, [pc, #84]	@ (8000e90 <MX_GPIO_Init+0x1cc>)
 8000e3c:	f002 fcca 	bl	80037d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIR_Pin;
 8000e40:	2308      	movs	r3, #8
 8000e42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e44:	2300      	movs	r3, #0
 8000e46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 8000e4c:	f107 031c 	add.w	r3, r7, #28
 8000e50:	4619      	mov	r1, r3
 8000e52:	480c      	ldr	r0, [pc, #48]	@ (8000e84 <MX_GPIO_Init+0x1c0>)
 8000e54:	f002 fcbe 	bl	80037d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_LEFT_Pin|LED_RIGHT_Pin|LED_ERR_Pin;
 8000e58:	2370      	movs	r3, #112	@ 0x70
 8000e5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e68:	f107 031c 	add.w	r3, r7, #28
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4805      	ldr	r0, [pc, #20]	@ (8000e84 <MX_GPIO_Init+0x1c0>)
 8000e70:	f002 fcb0 	bl	80037d4 <HAL_GPIO_Init>

}
 8000e74:	bf00      	nop
 8000e76:	3730      	adds	r7, #48	@ 0x30
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40020400 	.word	0x40020400
 8000e84:	40020c00 	.word	0x40020c00
 8000e88:	40020800 	.word	0x40020800
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	40020000 	.word	0x40020000

08000e94 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e98:	4b1b      	ldr	r3, [pc, #108]	@ (8000f08 <MX_I2C1_Init+0x74>)
 8000e9a:	4a1c      	ldr	r2, [pc, #112]	@ (8000f0c <MX_I2C1_Init+0x78>)
 8000e9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f08 <MX_I2C1_Init+0x74>)
 8000ea0:	4a1b      	ldr	r2, [pc, #108]	@ (8000f10 <MX_I2C1_Init+0x7c>)
 8000ea2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ea4:	4b18      	ldr	r3, [pc, #96]	@ (8000f08 <MX_I2C1_Init+0x74>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eaa:	4b17      	ldr	r3, [pc, #92]	@ (8000f08 <MX_I2C1_Init+0x74>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eb0:	4b15      	ldr	r3, [pc, #84]	@ (8000f08 <MX_I2C1_Init+0x74>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000eb6:	4b14      	ldr	r3, [pc, #80]	@ (8000f08 <MX_I2C1_Init+0x74>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ebc:	4b12      	ldr	r3, [pc, #72]	@ (8000f08 <MX_I2C1_Init+0x74>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ec2:	4b11      	ldr	r3, [pc, #68]	@ (8000f08 <MX_I2C1_Init+0x74>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f08 <MX_I2C1_Init+0x74>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ece:	480e      	ldr	r0, [pc, #56]	@ (8000f08 <MX_I2C1_Init+0x74>)
 8000ed0:	f002 fe5e 	bl	8003b90 <HAL_I2C_Init>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000eda:	f000 f945 	bl	8001168 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4809      	ldr	r0, [pc, #36]	@ (8000f08 <MX_I2C1_Init+0x74>)
 8000ee2:	f002 fee5 	bl	8003cb0 <HAL_I2CEx_ConfigAnalogFilter>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000eec:	f000 f93c 	bl	8001168 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4805      	ldr	r0, [pc, #20]	@ (8000f08 <MX_I2C1_Init+0x74>)
 8000ef4:	f002 ff27 	bl	8003d46 <HAL_I2CEx_ConfigDigitalFilter>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000efe:	f000 f933 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	2000025c 	.word	0x2000025c
 8000f0c:	40005400 	.word	0x40005400
 8000f10:	20404768 	.word	0x20404768

08000f14 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b0ae      	sub	sp, #184	@ 0xb8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	2290      	movs	r2, #144	@ 0x90
 8000f32:	2100      	movs	r1, #0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f005 facf 	bl	80064d8 <memset>
  if(i2cHandle->Instance==I2C1)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a21      	ldr	r2, [pc, #132]	@ (8000fc4 <HAL_I2C_MspInit+0xb0>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d13b      	bne.n	8000fbc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f44:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f48:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4618      	mov	r0, r3
 8000f54:	f003 fbf4 	bl	8004740 <HAL_RCCEx_PeriphCLKConfig>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000f5e:	f000 f903 	bl	8001168 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f62:	4b19      	ldr	r3, [pc, #100]	@ (8000fc8 <HAL_I2C_MspInit+0xb4>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	4a18      	ldr	r2, [pc, #96]	@ (8000fc8 <HAL_I2C_MspInit+0xb4>)
 8000f68:	f043 0302 	orr.w	r3, r3, #2
 8000f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6e:	4b16      	ldr	r3, [pc, #88]	@ (8000fc8 <HAL_I2C_MspInit+0xb4>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f72:	f003 0302 	and.w	r3, r3, #2
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f7a:	23c0      	movs	r3, #192	@ 0xc0
 8000f7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f80:	2312      	movs	r3, #18
 8000f82:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f92:	2304      	movs	r3, #4
 8000f94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f98:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	480b      	ldr	r0, [pc, #44]	@ (8000fcc <HAL_I2C_MspInit+0xb8>)
 8000fa0:	f002 fc18 	bl	80037d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fa4:	4b08      	ldr	r3, [pc, #32]	@ (8000fc8 <HAL_I2C_MspInit+0xb4>)
 8000fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa8:	4a07      	ldr	r2, [pc, #28]	@ (8000fc8 <HAL_I2C_MspInit+0xb4>)
 8000faa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000fae:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fb0:	4b05      	ldr	r3, [pc, #20]	@ (8000fc8 <HAL_I2C_MspInit+0xb4>)
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000fbc:	bf00      	nop
 8000fbe:	37b8      	adds	r7, #184	@ 0xb8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40005400 	.word	0x40005400
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40020400 	.word	0x40020400

08000fd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd4:	f000 fd8f 	bl	8001af6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd8:	f000 f858 	bl	800108c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fdc:	f7ff fe72 	bl	8000cc4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fe0:	f7ff fe42 	bl	8000c68 <MX_DMA_Init>
  MX_ADC1_Init();
 8000fe4:	f7ff faa0 	bl	8000528 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000fe8:	f7ff fd42 	bl	8000a70 <MX_CAN1_Init>
  MX_USB_OTG_FS_USB_Init();
 8000fec:	f000 fd52 	bl	8001a94 <MX_USB_OTG_FS_USB_Init>
  MX_ADC2_Init();
 8000ff0:	f7ff fb08 	bl	8000604 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000ff4:	f7ff fb82 	bl	80006fc <MX_ADC3_Init>
  MX_DAC_Init();
 8000ff8:	f7ff fdc4 	bl	8000b84 <MX_DAC_Init>
  MX_I2C1_Init();
 8000ffc:	f7ff ff4a 	bl	8000e94 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001000:	f000 f974 	bl	80012ec <MX_TIM1_Init>
  MX_TIM8_Init();
 8001004:	f000 fb14 	bl	8001630 <MX_TIM8_Init>
  MX_TIM2_Init();
 8001008:	f000 fa3e 	bl	8001488 <MX_TIM2_Init>
  MX_TIM4_Init();
 800100c:	f000 faa6 	bl	800155c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 8001010:	4819      	ldr	r0, [pc, #100]	@ (8001078 <main+0xa8>)
 8001012:	f004 f815 	bl	8005040 <HAL_TIM_Base_Start>
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_BREAK);
 8001016:	4b18      	ldr	r3, [pc, #96]	@ (8001078 <main+0xa8>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	68da      	ldr	r2, [r3, #12]
 800101c:	4b16      	ldr	r3, [pc, #88]	@ (8001078 <main+0xa8>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001024:	60da      	str	r2, [r3, #12]

  HAL_ADC_Start_DMA(&hadc2, (uint32_t *) ADC2_raw,8);
 8001026:	2208      	movs	r2, #8
 8001028:	4914      	ldr	r1, [pc, #80]	@ (800107c <main+0xac>)
 800102a:	4815      	ldr	r0, [pc, #84]	@ (8001080 <main+0xb0>)
 800102c:	f000 ff38 	bl	8001ea0 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Check the status of SC_det_Pin
	  if (HAL_GPIO_ReadPin(SC_det_GPIO_Port, SC_det_Pin) == GPIO_PIN_SET) {
 8001030:	2110      	movs	r1, #16
 8001032:	4814      	ldr	r0, [pc, #80]	@ (8001084 <main+0xb4>)
 8001034:	f002 fd7a 	bl	8003b2c <HAL_GPIO_ReadPin>
 8001038:	4603      	mov	r3, r0
 800103a:	2b01      	cmp	r3, #1
 800103c:	d105      	bne.n	800104a <main+0x7a>
		  // Turn on the left LED
		  HAL_GPIO_WritePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin, GPIO_PIN_SET);
 800103e:	2201      	movs	r2, #1
 8001040:	2110      	movs	r1, #16
 8001042:	4811      	ldr	r0, [pc, #68]	@ (8001088 <main+0xb8>)
 8001044:	f002 fd8a 	bl	8003b5c <HAL_GPIO_WritePin>
 8001048:	e004      	b.n	8001054 <main+0x84>
	  } else {
		  // Turn off the left LED
		  HAL_GPIO_WritePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	2110      	movs	r1, #16
 800104e:	480e      	ldr	r0, [pc, #56]	@ (8001088 <main+0xb8>)
 8001050:	f002 fd84 	bl	8003b5c <HAL_GPIO_WritePin>
	  }

	  // Turn on the right LED and turn off the left LED
	  HAL_GPIO_WritePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin, GPIO_PIN_SET);
 8001054:	2201      	movs	r2, #1
 8001056:	2120      	movs	r1, #32
 8001058:	480b      	ldr	r0, [pc, #44]	@ (8001088 <main+0xb8>)
 800105a:	f002 fd7f 	bl	8003b5c <HAL_GPIO_WritePin>

	  HAL_Delay(100); // Delay for 1 second
 800105e:	2064      	movs	r0, #100	@ 0x64
 8001060:	f000 fda6 	bl	8001bb0 <HAL_Delay>

	  // Turn on the left LED and turn off the right LED
	  HAL_GPIO_WritePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin, GPIO_PIN_RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	2120      	movs	r1, #32
 8001068:	4807      	ldr	r0, [pc, #28]	@ (8001088 <main+0xb8>)
 800106a:	f002 fd77 	bl	8003b5c <HAL_GPIO_WritePin>

	  HAL_Delay(100); // Delay for 1 second
 800106e:	2064      	movs	r0, #100	@ 0x64
 8001070:	f000 fd9e 	bl	8001bb0 <HAL_Delay>
	  if (HAL_GPIO_ReadPin(SC_det_GPIO_Port, SC_det_Pin) == GPIO_PIN_SET) {
 8001074:	e7dc      	b.n	8001030 <main+0x60>
 8001076:	bf00      	nop
 8001078:	200002d0 	.word	0x200002d0
 800107c:	200002b0 	.word	0x200002b0
 8001080:	20000070 	.word	0x20000070
 8001084:	40020800 	.word	0x40020800
 8001088:	40020c00 	.word	0x40020c00

0800108c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b094      	sub	sp, #80	@ 0x50
 8001090:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001092:	f107 031c 	add.w	r3, r7, #28
 8001096:	2234      	movs	r2, #52	@ 0x34
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f005 fa1c 	bl	80064d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a0:	f107 0308 	add.w	r3, r7, #8
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001160 <SystemClock_Config+0xd4>)
 80010b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b4:	4a2a      	ldr	r2, [pc, #168]	@ (8001160 <SystemClock_Config+0xd4>)
 80010b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80010bc:	4b28      	ldr	r3, [pc, #160]	@ (8001160 <SystemClock_Config+0xd4>)
 80010be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010c8:	4b26      	ldr	r3, [pc, #152]	@ (8001164 <SystemClock_Config+0xd8>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a25      	ldr	r2, [pc, #148]	@ (8001164 <SystemClock_Config+0xd8>)
 80010ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	4b23      	ldr	r3, [pc, #140]	@ (8001164 <SystemClock_Config+0xd8>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010dc:	603b      	str	r3, [r7, #0]
 80010de:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010e0:	2301      	movs	r3, #1
 80010e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ea:	2302      	movs	r3, #2
 80010ec:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 10;
 80010f4:	230a      	movs	r3, #10
 80010f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80010f8:	23d8      	movs	r3, #216	@ 0xd8
 80010fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010fc:	2302      	movs	r3, #2
 80010fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001100:	2309      	movs	r3, #9
 8001102:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001104:	2302      	movs	r3, #2
 8001106:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001108:	f107 031c 	add.w	r3, r7, #28
 800110c:	4618      	mov	r0, r3
 800110e:	f002 feb7 	bl	8003e80 <HAL_RCC_OscConfig>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001118:	f000 f826 	bl	8001168 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800111c:	f002 fe60 	bl	8003de0 <HAL_PWREx_EnableOverDrive>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001126:	f000 f81f 	bl	8001168 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112a:	230f      	movs	r3, #15
 800112c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800112e:	2302      	movs	r3, #2
 8001130:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001136:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800113a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800113c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001140:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001142:	f107 0308 	add.w	r3, r7, #8
 8001146:	2107      	movs	r1, #7
 8001148:	4618      	mov	r0, r3
 800114a:	f003 f947 	bl	80043dc <HAL_RCC_ClockConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001154:	f000 f808 	bl	8001168 <Error_Handler>
  }
}
 8001158:	bf00      	nop
 800115a:	3750      	adds	r7, #80	@ 0x50
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40023800 	.word	0x40023800
 8001164:	40007000 	.word	0x40007000

08001168 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800116c:	b672      	cpsid	i
}
 800116e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <Error_Handler+0x8>

08001174 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800117a:	4b0f      	ldr	r3, [pc, #60]	@ (80011b8 <HAL_MspInit+0x44>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117e:	4a0e      	ldr	r2, [pc, #56]	@ (80011b8 <HAL_MspInit+0x44>)
 8001180:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001184:	6413      	str	r3, [r2, #64]	@ 0x40
 8001186:	4b0c      	ldr	r3, [pc, #48]	@ (80011b8 <HAL_MspInit+0x44>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001192:	4b09      	ldr	r3, [pc, #36]	@ (80011b8 <HAL_MspInit+0x44>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001196:	4a08      	ldr	r2, [pc, #32]	@ (80011b8 <HAL_MspInit+0x44>)
 8001198:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800119c:	6453      	str	r3, [r2, #68]	@ 0x44
 800119e:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <HAL_MspInit+0x44>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011a6:	603b      	str	r3, [r7, #0]
 80011a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	40023800 	.word	0x40023800

080011bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011c0:	bf00      	nop
 80011c2:	e7fd      	b.n	80011c0 <NMI_Handler+0x4>

080011c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c8:	bf00      	nop
 80011ca:	e7fd      	b.n	80011c8 <HardFault_Handler+0x4>

080011cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <MemManage_Handler+0x4>

080011d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d8:	bf00      	nop
 80011da:	e7fd      	b.n	80011d8 <BusFault_Handler+0x4>

080011dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e0:	bf00      	nop
 80011e2:	e7fd      	b.n	80011e0 <UsageFault_Handler+0x4>

080011e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001212:	f000 fcad 	bl	8001b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001220:	4805      	ldr	r0, [pc, #20]	@ (8001238 <ADC_IRQHandler+0x1c>)
 8001222:	f000 fd2d 	bl	8001c80 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001226:	4805      	ldr	r0, [pc, #20]	@ (800123c <ADC_IRQHandler+0x20>)
 8001228:	f000 fd2a 	bl	8001c80 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 800122c:	4804      	ldr	r0, [pc, #16]	@ (8001240 <ADC_IRQHandler+0x24>)
 800122e:	f000 fd27 	bl	8001c80 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000028 	.word	0x20000028
 800123c:	20000070 	.word	0x20000070
 8001240:	200000b8 	.word	0x200000b8

08001244 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001248:	4802      	ldr	r0, [pc, #8]	@ (8001254 <CAN1_RX0_IRQHandler+0x10>)
 800124a:	f001 fb22 	bl	8002892 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000220 	.word	0x20000220

08001258 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800125c:	4802      	ldr	r0, [pc, #8]	@ (8001268 <CAN1_RX1_IRQHandler+0x10>)
 800125e:	f001 fb18 	bl	8002892 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000220 	.word	0x20000220

0800126c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001270:	4802      	ldr	r0, [pc, #8]	@ (800127c <TIM6_DAC_IRQHandler+0x10>)
 8001272:	f001 fe7a 	bl	8002f6a <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000248 	.word	0x20000248

08001280 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001284:	4802      	ldr	r0, [pc, #8]	@ (8001290 <DMA2_Stream0_IRQHandler+0x10>)
 8001286:	f002 f83b 	bl	8003300 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000100 	.word	0x20000100

08001294 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001298:	4802      	ldr	r0, [pc, #8]	@ (80012a4 <DMA2_Stream1_IRQHandler+0x10>)
 800129a:	f002 f831 	bl	8003300 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200001c0 	.word	0x200001c0

080012a8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80012ac:	4804      	ldr	r0, [pc, #16]	@ (80012c0 <DMA2_Stream2_IRQHandler+0x18>)
 80012ae:	f002 f827 	bl	8003300 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */
  HAL_GPIO_WritePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin, GPIO_PIN_SET);
 80012b2:	2201      	movs	r2, #1
 80012b4:	2110      	movs	r1, #16
 80012b6:	4803      	ldr	r0, [pc, #12]	@ (80012c4 <DMA2_Stream2_IRQHandler+0x1c>)
 80012b8:	f002 fc50 	bl	8003b5c <HAL_GPIO_WritePin>
  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000160 	.word	0x20000160
 80012c4:	40020c00 	.word	0x40020c00

080012c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012cc:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <SystemInit+0x20>)
 80012ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012d2:	4a05      	ldr	r2, [pc, #20]	@ (80012e8 <SystemInit+0x20>)
 80012d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b09a      	sub	sp, #104	@ 0x68
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001300:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800130c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]
 800131c:	615a      	str	r2, [r3, #20]
 800131e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	222c      	movs	r2, #44	@ 0x2c
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f005 f8d6 	bl	80064d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800132c:	4b54      	ldr	r3, [pc, #336]	@ (8001480 <MX_TIM1_Init+0x194>)
 800132e:	4a55      	ldr	r2, [pc, #340]	@ (8001484 <MX_TIM1_Init+0x198>)
 8001330:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001332:	4b53      	ldr	r3, [pc, #332]	@ (8001480 <MX_TIM1_Init+0x194>)
 8001334:	2200      	movs	r2, #0
 8001336:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001338:	4b51      	ldr	r3, [pc, #324]	@ (8001480 <MX_TIM1_Init+0x194>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800133e:	4b50      	ldr	r3, [pc, #320]	@ (8001480 <MX_TIM1_Init+0x194>)
 8001340:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001344:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001346:	4b4e      	ldr	r3, [pc, #312]	@ (8001480 <MX_TIM1_Init+0x194>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800134c:	4b4c      	ldr	r3, [pc, #304]	@ (8001480 <MX_TIM1_Init+0x194>)
 800134e:	2200      	movs	r2, #0
 8001350:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001352:	4b4b      	ldr	r3, [pc, #300]	@ (8001480 <MX_TIM1_Init+0x194>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001358:	4849      	ldr	r0, [pc, #292]	@ (8001480 <MX_TIM1_Init+0x194>)
 800135a:	f003 fe19 	bl	8004f90 <HAL_TIM_Base_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001364:	f7ff ff00 	bl	8001168 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001368:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800136c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800136e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001372:	4619      	mov	r1, r3
 8001374:	4842      	ldr	r0, [pc, #264]	@ (8001480 <MX_TIM1_Init+0x194>)
 8001376:	f004 fa17 	bl	80057a8 <HAL_TIM_ConfigClockSource>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001380:	f7ff fef2 	bl	8001168 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001384:	483e      	ldr	r0, [pc, #248]	@ (8001480 <MX_TIM1_Init+0x194>)
 8001386:	f003 ff2c 	bl	80051e2 <HAL_TIM_PWM_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001390:	f7ff feea 	bl	8001168 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001394:	483a      	ldr	r0, [pc, #232]	@ (8001480 <MX_TIM1_Init+0x194>)
 8001396:	f003 fec3 	bl	8005120 <HAL_TIM_OC_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 80013a0:	f7ff fee2 	bl	8001168 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a4:	2300      	movs	r3, #0
 80013a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013a8:	2300      	movs	r3, #0
 80013aa:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013b0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80013b4:	4619      	mov	r1, r3
 80013b6:	4832      	ldr	r0, [pc, #200]	@ (8001480 <MX_TIM1_Init+0x194>)
 80013b8:	f004 ff82 	bl	80062c0 <HAL_TIMEx_MasterConfigSynchronization>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 80013c2:	f7ff fed1 	bl	8001168 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013c6:	2360      	movs	r3, #96	@ 0x60
 80013c8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013ce:	2300      	movs	r3, #0
 80013d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013d2:	2300      	movs	r3, #0
 80013d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013da:	2300      	movs	r3, #0
 80013dc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013de:	2300      	movs	r3, #0
 80013e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013e2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013e6:	2200      	movs	r2, #0
 80013e8:	4619      	mov	r1, r3
 80013ea:	4825      	ldr	r0, [pc, #148]	@ (8001480 <MX_TIM1_Init+0x194>)
 80013ec:	f004 f8c8 	bl	8005580 <HAL_TIM_PWM_ConfigChannel>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80013f6:	f7ff feb7 	bl	8001168 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80013fa:	2300      	movs	r3, #0
 80013fc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013fe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001402:	2204      	movs	r2, #4
 8001404:	4619      	mov	r1, r3
 8001406:	481e      	ldr	r0, [pc, #120]	@ (8001480 <MX_TIM1_Init+0x194>)
 8001408:	f003 ffa4 	bl	8005354 <HAL_TIM_OC_ConfigChannel>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001412:	f7ff fea9 	bl	8001168 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001416:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800141a:	2208      	movs	r2, #8
 800141c:	4619      	mov	r1, r3
 800141e:	4818      	ldr	r0, [pc, #96]	@ (8001480 <MX_TIM1_Init+0x194>)
 8001420:	f003 ff98 	bl	8005354 <HAL_TIM_OC_ConfigChannel>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800142a:	f7ff fe9d 	bl	8001168 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800142e:	2300      	movs	r3, #0
 8001430:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001432:	2300      	movs	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800143a:	2300      	movs	r3, #0
 800143c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001442:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001446:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800144c:	2300      	movs	r3, #0
 800144e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001450:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001454:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800145a:	2300      	movs	r3, #0
 800145c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	4619      	mov	r1, r3
 8001462:	4807      	ldr	r0, [pc, #28]	@ (8001480 <MX_TIM1_Init+0x194>)
 8001464:	f004 ffba 	bl	80063dc <HAL_TIMEx_ConfigBreakDeadTime>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM1_Init+0x186>
  {
    Error_Handler();
 800146e:	f7ff fe7b 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001472:	4803      	ldr	r0, [pc, #12]	@ (8001480 <MX_TIM1_Init+0x194>)
 8001474:	f000 fa72 	bl	800195c <HAL_TIM_MspPostInit>

}
 8001478:	bf00      	nop
 800147a:	3768      	adds	r7, #104	@ 0x68
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	200002d0 	.word	0x200002d0
 8001484:	40010000 	.word	0x40010000

08001488 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b088      	sub	sp, #32
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800148e:	f107 0314 	add.w	r3, r7, #20
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001558 <MX_TIM2_Init+0xd0>)
 80014a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001558 <MX_TIM2_Init+0xd0>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b4:	4b28      	ldr	r3, [pc, #160]	@ (8001558 <MX_TIM2_Init+0xd0>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80014ba:	4b27      	ldr	r3, [pc, #156]	@ (8001558 <MX_TIM2_Init+0xd0>)
 80014bc:	f04f 32ff 	mov.w	r2, #4294967295
 80014c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c2:	4b25      	ldr	r3, [pc, #148]	@ (8001558 <MX_TIM2_Init+0xd0>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c8:	4b23      	ldr	r3, [pc, #140]	@ (8001558 <MX_TIM2_Init+0xd0>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80014ce:	4822      	ldr	r0, [pc, #136]	@ (8001558 <MX_TIM2_Init+0xd0>)
 80014d0:	f003 fee8 	bl	80052a4 <HAL_TIM_IC_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80014da:	f7ff fe45 	bl	8001168 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	481a      	ldr	r0, [pc, #104]	@ (8001558 <MX_TIM2_Init+0xd0>)
 80014ee:	f004 fee7 	bl	80062c0 <HAL_TIMEx_MasterConfigSynchronization>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80014f8:	f7ff fe36 	bl	8001168 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014fc:	2300      	movs	r3, #0
 80014fe:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001500:	2301      	movs	r3, #1
 8001502:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	2200      	movs	r2, #0
 8001510:	4619      	mov	r1, r3
 8001512:	4811      	ldr	r0, [pc, #68]	@ (8001558 <MX_TIM2_Init+0xd0>)
 8001514:	f003 ff98 	bl	8005448 <HAL_TIM_IC_ConfigChannel>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800151e:	f7ff fe23 	bl	8001168 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	2208      	movs	r2, #8
 8001526:	4619      	mov	r1, r3
 8001528:	480b      	ldr	r0, [pc, #44]	@ (8001558 <MX_TIM2_Init+0xd0>)
 800152a:	f003 ff8d 	bl	8005448 <HAL_TIM_IC_ConfigChannel>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001534:	f7ff fe18 	bl	8001168 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	220c      	movs	r2, #12
 800153c:	4619      	mov	r1, r3
 800153e:	4806      	ldr	r0, [pc, #24]	@ (8001558 <MX_TIM2_Init+0xd0>)
 8001540:	f003 ff82 	bl	8005448 <HAL_TIM_IC_ConfigChannel>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 800154a:	f7ff fe0d 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	3720      	adds	r7, #32
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	2000031c 	.word	0x2000031c

0800155c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b088      	sub	sp, #32
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800157a:	4b2b      	ldr	r3, [pc, #172]	@ (8001628 <MX_TIM4_Init+0xcc>)
 800157c:	4a2b      	ldr	r2, [pc, #172]	@ (800162c <MX_TIM4_Init+0xd0>)
 800157e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001580:	4b29      	ldr	r3, [pc, #164]	@ (8001628 <MX_TIM4_Init+0xcc>)
 8001582:	2200      	movs	r2, #0
 8001584:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001586:	4b28      	ldr	r3, [pc, #160]	@ (8001628 <MX_TIM4_Init+0xcc>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800158c:	4b26      	ldr	r3, [pc, #152]	@ (8001628 <MX_TIM4_Init+0xcc>)
 800158e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001592:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001594:	4b24      	ldr	r3, [pc, #144]	@ (8001628 <MX_TIM4_Init+0xcc>)
 8001596:	2200      	movs	r2, #0
 8001598:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800159a:	4b23      	ldr	r3, [pc, #140]	@ (8001628 <MX_TIM4_Init+0xcc>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80015a0:	4821      	ldr	r0, [pc, #132]	@ (8001628 <MX_TIM4_Init+0xcc>)
 80015a2:	f003 fe7f 	bl	80052a4 <HAL_TIM_IC_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80015ac:	f7ff fddc 	bl	8001168 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	4619      	mov	r1, r3
 80015be:	481a      	ldr	r0, [pc, #104]	@ (8001628 <MX_TIM4_Init+0xcc>)
 80015c0:	f004 fe7e 	bl	80062c0 <HAL_TIMEx_MasterConfigSynchronization>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80015ca:	f7ff fdcd 	bl	8001168 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80015ce:	2300      	movs	r3, #0
 80015d0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015d2:	2301      	movs	r3, #1
 80015d4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	2200      	movs	r2, #0
 80015e2:	4619      	mov	r1, r3
 80015e4:	4810      	ldr	r0, [pc, #64]	@ (8001628 <MX_TIM4_Init+0xcc>)
 80015e6:	f003 ff2f 	bl	8005448 <HAL_TIM_IC_ConfigChannel>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80015f0:	f7ff fdba 	bl	8001168 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	2208      	movs	r2, #8
 80015f8:	4619      	mov	r1, r3
 80015fa:	480b      	ldr	r0, [pc, #44]	@ (8001628 <MX_TIM4_Init+0xcc>)
 80015fc:	f003 ff24 	bl	8005448 <HAL_TIM_IC_ConfigChannel>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8001606:	f7ff fdaf 	bl	8001168 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	220c      	movs	r2, #12
 800160e:	4619      	mov	r1, r3
 8001610:	4805      	ldr	r0, [pc, #20]	@ (8001628 <MX_TIM4_Init+0xcc>)
 8001612:	f003 ff19 	bl	8005448 <HAL_TIM_IC_ConfigChannel>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM4_Init+0xc4>
  {
    Error_Handler();
 800161c:	f7ff fda4 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001620:	bf00      	nop
 8001622:	3720      	adds	r7, #32
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000368 	.word	0x20000368
 800162c:	40000800 	.word	0x40000800

08001630 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b09a      	sub	sp, #104	@ 0x68
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001636:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001644:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001650:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
 8001660:	615a      	str	r2, [r3, #20]
 8001662:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	222c      	movs	r2, #44	@ 0x2c
 8001668:	2100      	movs	r1, #0
 800166a:	4618      	mov	r0, r3
 800166c:	f004 ff34 	bl	80064d8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001670:	4b54      	ldr	r3, [pc, #336]	@ (80017c4 <MX_TIM8_Init+0x194>)
 8001672:	4a55      	ldr	r2, [pc, #340]	@ (80017c8 <MX_TIM8_Init+0x198>)
 8001674:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001676:	4b53      	ldr	r3, [pc, #332]	@ (80017c4 <MX_TIM8_Init+0x194>)
 8001678:	2200      	movs	r2, #0
 800167a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167c:	4b51      	ldr	r3, [pc, #324]	@ (80017c4 <MX_TIM8_Init+0x194>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001682:	4b50      	ldr	r3, [pc, #320]	@ (80017c4 <MX_TIM8_Init+0x194>)
 8001684:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001688:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800168a:	4b4e      	ldr	r3, [pc, #312]	@ (80017c4 <MX_TIM8_Init+0x194>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001690:	4b4c      	ldr	r3, [pc, #304]	@ (80017c4 <MX_TIM8_Init+0x194>)
 8001692:	2200      	movs	r2, #0
 8001694:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001696:	4b4b      	ldr	r3, [pc, #300]	@ (80017c4 <MX_TIM8_Init+0x194>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800169c:	4849      	ldr	r0, [pc, #292]	@ (80017c4 <MX_TIM8_Init+0x194>)
 800169e:	f003 fc77 	bl	8004f90 <HAL_TIM_Base_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80016a8:	f7ff fd5e 	bl	8001168 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016b0:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80016b2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80016b6:	4619      	mov	r1, r3
 80016b8:	4842      	ldr	r0, [pc, #264]	@ (80017c4 <MX_TIM8_Init+0x194>)
 80016ba:	f004 f875 	bl	80057a8 <HAL_TIM_ConfigClockSource>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80016c4:	f7ff fd50 	bl	8001168 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80016c8:	483e      	ldr	r0, [pc, #248]	@ (80017c4 <MX_TIM8_Init+0x194>)
 80016ca:	f003 fd8a 	bl	80051e2 <HAL_TIM_PWM_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80016d4:	f7ff fd48 	bl	8001168 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 80016d8:	483a      	ldr	r0, [pc, #232]	@ (80017c4 <MX_TIM8_Init+0x194>)
 80016da:	f003 fd21 	bl	8005120 <HAL_TIM_OC_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM8_Init+0xb8>
  {
    Error_Handler();
 80016e4:	f7ff fd40 	bl	8001168 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e8:	2300      	movs	r3, #0
 80016ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016ec:	2300      	movs	r3, #0
 80016ee:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f0:	2300      	movs	r3, #0
 80016f2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80016f4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80016f8:	4619      	mov	r1, r3
 80016fa:	4832      	ldr	r0, [pc, #200]	@ (80017c4 <MX_TIM8_Init+0x194>)
 80016fc:	f004 fde0 	bl	80062c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM8_Init+0xda>
  {
    Error_Handler();
 8001706:	f7ff fd2f 	bl	8001168 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800170a:	2360      	movs	r3, #96	@ 0x60
 800170c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001712:	2300      	movs	r3, #0
 8001714:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001716:	2300      	movs	r3, #0
 8001718:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800171a:	2300      	movs	r3, #0
 800171c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800171e:	2300      	movs	r3, #0
 8001720:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001722:	2300      	movs	r3, #0
 8001724:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001726:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800172a:	2200      	movs	r2, #0
 800172c:	4619      	mov	r1, r3
 800172e:	4825      	ldr	r0, [pc, #148]	@ (80017c4 <MX_TIM8_Init+0x194>)
 8001730:	f003 ff26 	bl	8005580 <HAL_TIM_PWM_ConfigChannel>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 800173a:	f7ff fd15 	bl	8001168 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800173e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001742:	2204      	movs	r2, #4
 8001744:	4619      	mov	r1, r3
 8001746:	481f      	ldr	r0, [pc, #124]	@ (80017c4 <MX_TIM8_Init+0x194>)
 8001748:	f003 ff1a 	bl	8005580 <HAL_TIM_PWM_ConfigChannel>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 8001752:	f7ff fd09 	bl	8001168 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001756:	2300      	movs	r3, #0
 8001758:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800175a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800175e:	2208      	movs	r2, #8
 8001760:	4619      	mov	r1, r3
 8001762:	4818      	ldr	r0, [pc, #96]	@ (80017c4 <MX_TIM8_Init+0x194>)
 8001764:	f003 fdf6 	bl	8005354 <HAL_TIM_OC_ConfigChannel>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 800176e:	f7ff fcfb 	bl	8001168 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001776:	2300      	movs	r3, #0
 8001778:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001786:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800178a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001790:	2300      	movs	r3, #0
 8001792:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001794:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001798:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800179e:	2300      	movs	r3, #0
 80017a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	4619      	mov	r1, r3
 80017a6:	4807      	ldr	r0, [pc, #28]	@ (80017c4 <MX_TIM8_Init+0x194>)
 80017a8:	f004 fe18 	bl	80063dc <HAL_TIMEx_ConfigBreakDeadTime>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_TIM8_Init+0x186>
  {
    Error_Handler();
 80017b2:	f7ff fcd9 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80017b6:	4803      	ldr	r0, [pc, #12]	@ (80017c4 <MX_TIM8_Init+0x194>)
 80017b8:	f000 f8d0 	bl	800195c <HAL_TIM_MspPostInit>

}
 80017bc:	bf00      	nop
 80017be:	3768      	adds	r7, #104	@ 0x68
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	200003b4 	.word	0x200003b4
 80017c8:	40010400 	.word	0x40010400

080017cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a13      	ldr	r2, [pc, #76]	@ (8001828 <HAL_TIM_Base_MspInit+0x5c>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d10c      	bne.n	80017f8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017de:	4b13      	ldr	r3, [pc, #76]	@ (800182c <HAL_TIM_Base_MspInit+0x60>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e2:	4a12      	ldr	r2, [pc, #72]	@ (800182c <HAL_TIM_Base_MspInit+0x60>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80017ea:	4b10      	ldr	r3, [pc, #64]	@ (800182c <HAL_TIM_Base_MspInit+0x60>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80017f6:	e010      	b.n	800181a <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM8)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001830 <HAL_TIM_Base_MspInit+0x64>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d10b      	bne.n	800181a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001802:	4b0a      	ldr	r3, [pc, #40]	@ (800182c <HAL_TIM_Base_MspInit+0x60>)
 8001804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001806:	4a09      	ldr	r2, [pc, #36]	@ (800182c <HAL_TIM_Base_MspInit+0x60>)
 8001808:	f043 0302 	orr.w	r3, r3, #2
 800180c:	6453      	str	r3, [r2, #68]	@ 0x44
 800180e:	4b07      	ldr	r3, [pc, #28]	@ (800182c <HAL_TIM_Base_MspInit+0x60>)
 8001810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
}
 800181a:	bf00      	nop
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	40010000 	.word	0x40010000
 800182c:	40023800 	.word	0x40023800
 8001830:	40010400 	.word	0x40010400

08001834 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08c      	sub	sp, #48	@ 0x30
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 031c 	add.w	r3, r7, #28
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001854:	d146      	bne.n	80018e4 <HAL_TIM_IC_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001856:	4b3c      	ldr	r3, [pc, #240]	@ (8001948 <HAL_TIM_IC_MspInit+0x114>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185a:	4a3b      	ldr	r2, [pc, #236]	@ (8001948 <HAL_TIM_IC_MspInit+0x114>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6413      	str	r3, [r2, #64]	@ 0x40
 8001862:	4b39      	ldr	r3, [pc, #228]	@ (8001948 <HAL_TIM_IC_MspInit+0x114>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	61bb      	str	r3, [r7, #24]
 800186c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800186e:	4b36      	ldr	r3, [pc, #216]	@ (8001948 <HAL_TIM_IC_MspInit+0x114>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	4a35      	ldr	r2, [pc, #212]	@ (8001948 <HAL_TIM_IC_MspInit+0x114>)
 8001874:	f043 0302 	orr.w	r3, r3, #2
 8001878:	6313      	str	r3, [r2, #48]	@ 0x30
 800187a:	4b33      	ldr	r3, [pc, #204]	@ (8001948 <HAL_TIM_IC_MspInit+0x114>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	617b      	str	r3, [r7, #20]
 8001884:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001886:	4b30      	ldr	r3, [pc, #192]	@ (8001948 <HAL_TIM_IC_MspInit+0x114>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188a:	4a2f      	ldr	r2, [pc, #188]	@ (8001948 <HAL_TIM_IC_MspInit+0x114>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6313      	str	r3, [r2, #48]	@ 0x30
 8001892:	4b2d      	ldr	r3, [pc, #180]	@ (8001948 <HAL_TIM_IC_MspInit+0x114>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = B_R_Pin|Z_R_Pin;
 800189e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80018a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a4:	2302      	movs	r3, #2
 80018a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ac:	2300      	movs	r3, #0
 80018ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018b0:	2301      	movs	r3, #1
 80018b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b4:	f107 031c 	add.w	r3, r7, #28
 80018b8:	4619      	mov	r1, r3
 80018ba:	4824      	ldr	r0, [pc, #144]	@ (800194c <HAL_TIM_IC_MspInit+0x118>)
 80018bc:	f001 ff8a 	bl	80037d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A_R_Pin;
 80018c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80018c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c6:	2302      	movs	r3, #2
 80018c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ce:	2300      	movs	r3, #0
 80018d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018d2:	2301      	movs	r3, #1
 80018d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(A_R_GPIO_Port, &GPIO_InitStruct);
 80018d6:	f107 031c 	add.w	r3, r7, #28
 80018da:	4619      	mov	r1, r3
 80018dc:	481c      	ldr	r0, [pc, #112]	@ (8001950 <HAL_TIM_IC_MspInit+0x11c>)
 80018de:	f001 ff79 	bl	80037d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80018e2:	e02d      	b.n	8001940 <HAL_TIM_IC_MspInit+0x10c>
  else if(tim_icHandle->Instance==TIM4)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a1a      	ldr	r2, [pc, #104]	@ (8001954 <HAL_TIM_IC_MspInit+0x120>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d128      	bne.n	8001940 <HAL_TIM_IC_MspInit+0x10c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018ee:	4b16      	ldr	r3, [pc, #88]	@ (8001948 <HAL_TIM_IC_MspInit+0x114>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f2:	4a15      	ldr	r2, [pc, #84]	@ (8001948 <HAL_TIM_IC_MspInit+0x114>)
 80018f4:	f043 0304 	orr.w	r3, r3, #4
 80018f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018fa:	4b13      	ldr	r3, [pc, #76]	@ (8001948 <HAL_TIM_IC_MspInit+0x114>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fe:	f003 0304 	and.w	r3, r3, #4
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001906:	4b10      	ldr	r3, [pc, #64]	@ (8001948 <HAL_TIM_IC_MspInit+0x114>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	4a0f      	ldr	r2, [pc, #60]	@ (8001948 <HAL_TIM_IC_MspInit+0x114>)
 800190c:	f043 0308 	orr.w	r3, r3, #8
 8001910:	6313      	str	r3, [r2, #48]	@ 0x30
 8001912:	4b0d      	ldr	r3, [pc, #52]	@ (8001948 <HAL_TIM_IC_MspInit+0x114>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	f003 0308 	and.w	r3, r3, #8
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = A_L_Pin|B_L_Pin|Z_L_Pin;
 800191e:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8001922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001924:	2302      	movs	r3, #2
 8001926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192c:	2300      	movs	r3, #0
 800192e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001930:	2302      	movs	r3, #2
 8001932:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001934:	f107 031c 	add.w	r3, r7, #28
 8001938:	4619      	mov	r1, r3
 800193a:	4807      	ldr	r0, [pc, #28]	@ (8001958 <HAL_TIM_IC_MspInit+0x124>)
 800193c:	f001 ff4a 	bl	80037d4 <HAL_GPIO_Init>
}
 8001940:	bf00      	nop
 8001942:	3730      	adds	r7, #48	@ 0x30
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40023800 	.word	0x40023800
 800194c:	40020400 	.word	0x40020400
 8001950:	40020000 	.word	0x40020000
 8001954:	40000800 	.word	0x40000800
 8001958:	40020c00 	.word	0x40020c00

0800195c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08c      	sub	sp, #48	@ 0x30
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001964:	f107 031c 	add.w	r3, r7, #28
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a3f      	ldr	r2, [pc, #252]	@ (8001a78 <HAL_TIM_MspPostInit+0x11c>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d11d      	bne.n	80019ba <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800197e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a7c <HAL_TIM_MspPostInit+0x120>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001982:	4a3e      	ldr	r2, [pc, #248]	@ (8001a7c <HAL_TIM_MspPostInit+0x120>)
 8001984:	f043 0310 	orr.w	r3, r3, #16
 8001988:	6313      	str	r3, [r2, #48]	@ 0x30
 800198a:	4b3c      	ldr	r3, [pc, #240]	@ (8001a7c <HAL_TIM_MspPostInit+0x120>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198e:	f003 0310 	and.w	r3, r3, #16
 8001992:	61bb      	str	r3, [r7, #24]
 8001994:	69bb      	ldr	r3, [r7, #24]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWM1_L_Pin|PWM2_L_Pin|PWM3_L_Pin|PWM4_L_Pin
 8001996:	f44f 537c 	mov.w	r3, #16128	@ 0x3f00
 800199a:	61fb      	str	r3, [r7, #28]
                          |PWM5_L_Pin|PWM6_L_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199c:	2302      	movs	r3, #2
 800199e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a4:	2300      	movs	r3, #0
 80019a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019a8:	2301      	movs	r3, #1
 80019aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019ac:	f107 031c 	add.w	r3, r7, #28
 80019b0:	4619      	mov	r1, r3
 80019b2:	4833      	ldr	r0, [pc, #204]	@ (8001a80 <HAL_TIM_MspPostInit+0x124>)
 80019b4:	f001 ff0e 	bl	80037d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80019b8:	e05a      	b.n	8001a70 <HAL_TIM_MspPostInit+0x114>
  else if(timHandle->Instance==TIM8)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a31      	ldr	r2, [pc, #196]	@ (8001a84 <HAL_TIM_MspPostInit+0x128>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d155      	bne.n	8001a70 <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c4:	4b2d      	ldr	r3, [pc, #180]	@ (8001a7c <HAL_TIM_MspPostInit+0x120>)
 80019c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c8:	4a2c      	ldr	r2, [pc, #176]	@ (8001a7c <HAL_TIM_MspPostInit+0x120>)
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d0:	4b2a      	ldr	r3, [pc, #168]	@ (8001a7c <HAL_TIM_MspPostInit+0x120>)
 80019d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	617b      	str	r3, [r7, #20]
 80019da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019dc:	4b27      	ldr	r3, [pc, #156]	@ (8001a7c <HAL_TIM_MspPostInit+0x120>)
 80019de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e0:	4a26      	ldr	r2, [pc, #152]	@ (8001a7c <HAL_TIM_MspPostInit+0x120>)
 80019e2:	f043 0302 	orr.w	r3, r3, #2
 80019e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e8:	4b24      	ldr	r3, [pc, #144]	@ (8001a7c <HAL_TIM_MspPostInit+0x120>)
 80019ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f4:	4b21      	ldr	r3, [pc, #132]	@ (8001a7c <HAL_TIM_MspPostInit+0x120>)
 80019f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f8:	4a20      	ldr	r2, [pc, #128]	@ (8001a7c <HAL_TIM_MspPostInit+0x120>)
 80019fa:	f043 0304 	orr.w	r3, r3, #4
 80019fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a00:	4b1e      	ldr	r3, [pc, #120]	@ (8001a7c <HAL_TIM_MspPostInit+0x120>)
 8001a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM1_R_Pin;
 8001a0c:	2320      	movs	r3, #32
 8001a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a10:	2302      	movs	r3, #2
 8001a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM1_R_GPIO_Port, &GPIO_InitStruct);
 8001a20:	f107 031c 	add.w	r3, r7, #28
 8001a24:	4619      	mov	r1, r3
 8001a26:	4818      	ldr	r0, [pc, #96]	@ (8001a88 <HAL_TIM_MspPostInit+0x12c>)
 8001a28:	f001 fed4 	bl	80037d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM3_R_Pin|PWM5_R_Pin;
 8001a2c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a32:	2302      	movs	r3, #2
 8001a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a42:	f107 031c 	add.w	r3, r7, #28
 8001a46:	4619      	mov	r1, r3
 8001a48:	4810      	ldr	r0, [pc, #64]	@ (8001a8c <HAL_TIM_MspPostInit+0x130>)
 8001a4a:	f001 fec3 	bl	80037d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM2_R_Pin|PWM4_R_Pin|PWM6_R_Pin;
 8001a4e:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a54:	2302      	movs	r3, #2
 8001a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001a60:	2303      	movs	r3, #3
 8001a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a64:	f107 031c 	add.w	r3, r7, #28
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4809      	ldr	r0, [pc, #36]	@ (8001a90 <HAL_TIM_MspPostInit+0x134>)
 8001a6c:	f001 feb2 	bl	80037d4 <HAL_GPIO_Init>
}
 8001a70:	bf00      	nop
 8001a72:	3730      	adds	r7, #48	@ 0x30
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40010000 	.word	0x40010000
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40021000 	.word	0x40021000
 8001a84:	40010400 	.word	0x40010400
 8001a88:	40020000 	.word	0x40020000
 8001a8c:	40020400 	.word	0x40020400
 8001a90:	40020800 	.word	0x40020800

08001a94 <MX_USB_OTG_FS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_USB_Init(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
	...

08001aa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001aa4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001adc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001aa8:	480d      	ldr	r0, [pc, #52]	@ (8001ae0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001aaa:	490e      	ldr	r1, [pc, #56]	@ (8001ae4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001aac:	4a0e      	ldr	r2, [pc, #56]	@ (8001ae8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab0:	e002      	b.n	8001ab8 <LoopCopyDataInit>

08001ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ab6:	3304      	adds	r3, #4

08001ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001abc:	d3f9      	bcc.n	8001ab2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001abe:	4a0b      	ldr	r2, [pc, #44]	@ (8001aec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ac0:	4c0b      	ldr	r4, [pc, #44]	@ (8001af0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac4:	e001      	b.n	8001aca <LoopFillZerobss>

08001ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac8:	3204      	adds	r2, #4

08001aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001acc:	d3fb      	bcc.n	8001ac6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ace:	f7ff fbfb 	bl	80012c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ad2:	f004 fd09 	bl	80064e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ad6:	f7ff fa7b 	bl	8000fd0 <main>
  bx  lr    
 8001ada:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001adc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001ae8:	08006570 	.word	0x08006570
  ldr r2, =_sbss
 8001aec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001af0:	20000404 	.word	0x20000404

08001af4 <CAN1_SCE_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001af4:	e7fe      	b.n	8001af4 <CAN1_SCE_IRQHandler>

08001af6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001afa:	2003      	movs	r0, #3
 8001afc:	f001 f9d2 	bl	8002ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b00:	200f      	movs	r0, #15
 8001b02:	f000 f805 	bl	8001b10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b06:	f7ff fb35 	bl	8001174 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b18:	4b12      	ldr	r3, [pc, #72]	@ (8001b64 <HAL_InitTick+0x54>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4b12      	ldr	r3, [pc, #72]	@ (8001b68 <HAL_InitTick+0x58>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	4619      	mov	r1, r3
 8001b22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f001 f9ed 	bl	8002f0e <HAL_SYSTICK_Config>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e00e      	b.n	8001b5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b0f      	cmp	r3, #15
 8001b42:	d80a      	bhi.n	8001b5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b44:	2200      	movs	r2, #0
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	f04f 30ff 	mov.w	r0, #4294967295
 8001b4c:	f001 f9b5 	bl	8002eba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b50:	4a06      	ldr	r2, [pc, #24]	@ (8001b6c <HAL_InitTick+0x5c>)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
 8001b58:	e000      	b.n	8001b5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000000 	.word	0x20000000
 8001b68:	20000008 	.word	0x20000008
 8001b6c:	20000004 	.word	0x20000004

08001b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b74:	4b06      	ldr	r3, [pc, #24]	@ (8001b90 <HAL_IncTick+0x20>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4b06      	ldr	r3, [pc, #24]	@ (8001b94 <HAL_IncTick+0x24>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4413      	add	r3, r2
 8001b80:	4a04      	ldr	r2, [pc, #16]	@ (8001b94 <HAL_IncTick+0x24>)
 8001b82:	6013      	str	r3, [r2, #0]
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	20000008 	.word	0x20000008
 8001b94:	20000400 	.word	0x20000400

08001b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b9c:	4b03      	ldr	r3, [pc, #12]	@ (8001bac <HAL_GetTick+0x14>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	20000400 	.word	0x20000400

08001bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bb8:	f7ff ffee 	bl	8001b98 <HAL_GetTick>
 8001bbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc8:	d005      	beq.n	8001bd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bca:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf4 <HAL_Delay+0x44>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bd6:	bf00      	nop
 8001bd8:	f7ff ffde 	bl	8001b98 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d8f7      	bhi.n	8001bd8 <HAL_Delay+0x28>
  {
  }
}
 8001be8:	bf00      	nop
 8001bea:	bf00      	nop
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000008 	.word	0x20000008

08001bf8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c00:	2300      	movs	r3, #0
 8001c02:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e031      	b.n	8001c72 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d109      	bne.n	8001c2a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7fe fdc2 	bl	80007a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2e:	f003 0310 	and.w	r3, r3, #16
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d116      	bne.n	8001c64 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c3a:	4b10      	ldr	r3, [pc, #64]	@ (8001c7c <HAL_ADC_Init+0x84>)
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	f043 0202 	orr.w	r2, r3, #2
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 fba2 	bl	8002390 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c56:	f023 0303 	bic.w	r3, r3, #3
 8001c5a:	f043 0201 	orr.w	r2, r3, #1
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c62:	e001      	b.n	8001c68 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	ffffeefd 	.word	0xffffeefd

08001c80 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	f003 0320 	and.w	r3, r3, #32
 8001cae:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d049      	beq.n	8001d4a <HAL_ADC_IRQHandler+0xca>
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d046      	beq.n	8001d4a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc0:	f003 0310 	and.w	r3, r3, #16
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d105      	bne.n	8001cd4 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ccc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d12b      	bne.n	8001d3a <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d127      	bne.n	8001d3a <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d006      	beq.n	8001d06 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d119      	bne.n	8001d3a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 0220 	bic.w	r2, r2, #32
 8001d14:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d105      	bne.n	8001d3a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d32:	f043 0201 	orr.w	r2, r3, #1
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f9aa 	bl	8002094 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f06f 0212 	mvn.w	r2, #18
 8001d48:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d58:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d057      	beq.n	8001e10 <HAL_ADC_IRQHandler+0x190>
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d054      	beq.n	8001e10 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6a:	f003 0310 	and.w	r3, r3, #16
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d105      	bne.n	8001d7e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d76:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d139      	bne.n	8001e00 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d92:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d006      	beq.n	8001da8 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d12b      	bne.n	8001e00 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d124      	bne.n	8001e00 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d11d      	bne.n	8001e00 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d119      	bne.n	8001e00 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001dda:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d105      	bne.n	8001e00 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df8:	f043 0201 	orr.w	r2, r3, #1
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 fc41 	bl	8002688 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f06f 020c 	mvn.w	r2, #12
 8001e0e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e1e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d017      	beq.n	8001e56 <HAL_ADC_IRQHandler+0x1d6>
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d014      	beq.n	8001e56 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d10d      	bne.n	8001e56 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f938 	bl	80020bc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f06f 0201 	mvn.w	r2, #1
 8001e54:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f003 0320 	and.w	r3, r3, #32
 8001e5c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e64:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d015      	beq.n	8001e98 <HAL_ADC_IRQHandler+0x218>
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d012      	beq.n	8001e98 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e76:	f043 0202 	orr.w	r2, r3, #2
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f06f 0220 	mvn.w	r2, #32
 8001e86:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 f921 	bl	80020d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f06f 0220 	mvn.w	r2, #32
 8001e96:	601a      	str	r2, [r3, #0]
  }
}
 8001e98:	bf00      	nop
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d101      	bne.n	8001ebe <HAL_ADC_Start_DMA+0x1e>
 8001eba:	2302      	movs	r3, #2
 8001ebc:	e0d4      	b.n	8002068 <HAL_ADC_Start_DMA+0x1c8>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d018      	beq.n	8001f06 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f042 0201 	orr.w	r2, r2, #1
 8001ee2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001ee4:	4b62      	ldr	r3, [pc, #392]	@ (8002070 <HAL_ADC_Start_DMA+0x1d0>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a62      	ldr	r2, [pc, #392]	@ (8002074 <HAL_ADC_Start_DMA+0x1d4>)
 8001eea:	fba2 2303 	umull	r2, r3, r2, r3
 8001eee:	0c9a      	lsrs	r2, r3, #18
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	4413      	add	r3, r2
 8001ef6:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001ef8:	e002      	b.n	8001f00 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	3b01      	subs	r3, #1
 8001efe:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f9      	bne.n	8001efa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	f040 809c 	bne.w	800204e <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f1a:	4b57      	ldr	r3, [pc, #348]	@ (8002078 <HAL_ADC_Start_DMA+0x1d8>)
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d007      	beq.n	8001f44 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f38:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f3c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f50:	d106      	bne.n	8001f60 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f56:	f023 0206 	bic.w	r2, r3, #6
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	645a      	str	r2, [r3, #68]	@ 0x44
 8001f5e:	e002      	b.n	8001f66 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f72:	4a42      	ldr	r2, [pc, #264]	@ (800207c <HAL_ADC_Start_DMA+0x1dc>)
 8001f74:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f7a:	4a41      	ldr	r2, [pc, #260]	@ (8002080 <HAL_ADC_Start_DMA+0x1e0>)
 8001f7c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f82:	4a40      	ldr	r2, [pc, #256]	@ (8002084 <HAL_ADC_Start_DMA+0x1e4>)
 8001f84:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001f8e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001f9e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fae:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	334c      	adds	r3, #76	@ 0x4c
 8001fba:	4619      	mov	r1, r3
 8001fbc:	68ba      	ldr	r2, [r7, #8]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f001 f93e 	bl	8003240 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001fc4:	4b30      	ldr	r3, [pc, #192]	@ (8002088 <HAL_ADC_Start_DMA+0x1e8>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 031f 	and.w	r3, r3, #31
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d10f      	bne.n	8001ff0 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d143      	bne.n	8002066 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001fec:	609a      	str	r2, [r3, #8]
 8001fee:	e03a      	b.n	8002066 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a25      	ldr	r2, [pc, #148]	@ (800208c <HAL_ADC_Start_DMA+0x1ec>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d10e      	bne.n	8002018 <HAL_ADC_Start_DMA+0x178>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d107      	bne.n	8002018 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002016:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002018:	4b1b      	ldr	r3, [pc, #108]	@ (8002088 <HAL_ADC_Start_DMA+0x1e8>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f003 0310 	and.w	r3, r3, #16
 8002020:	2b00      	cmp	r3, #0
 8002022:	d120      	bne.n	8002066 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a19      	ldr	r2, [pc, #100]	@ (8002090 <HAL_ADC_Start_DMA+0x1f0>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d11b      	bne.n	8002066 <HAL_ADC_Start_DMA+0x1c6>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d114      	bne.n	8002066 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	e00b      	b.n	8002066 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002052:	f043 0210 	orr.w	r2, r3, #16
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800205e:	f043 0201 	orr.w	r2, r3, #1
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	20000000 	.word	0x20000000
 8002074:	431bde83 	.word	0x431bde83
 8002078:	fffff8fe 	.word	0xfffff8fe
 800207c:	08002585 	.word	0x08002585
 8002080:	0800263f 	.word	0x0800263f
 8002084:	0800265b 	.word	0x0800265b
 8002088:	40012300 	.word	0x40012300
 800208c:	40012000 	.word	0x40012000
 8002090:	40012200 	.word	0x40012200

08002094 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d101      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x1c>
 80020fc:	2302      	movs	r3, #2
 80020fe:	e136      	b.n	800236e <HAL_ADC_ConfigChannel+0x28a>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b09      	cmp	r3, #9
 800210e:	d93a      	bls.n	8002186 <HAL_ADC_ConfigChannel+0xa2>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002118:	d035      	beq.n	8002186 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68d9      	ldr	r1, [r3, #12]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	b29b      	uxth	r3, r3
 8002126:	461a      	mov	r2, r3
 8002128:	4613      	mov	r3, r2
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	4413      	add	r3, r2
 800212e:	3b1e      	subs	r3, #30
 8002130:	2207      	movs	r2, #7
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43da      	mvns	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	400a      	ands	r2, r1
 800213e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a8d      	ldr	r2, [pc, #564]	@ (800237c <HAL_ADC_ConfigChannel+0x298>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d10a      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68d9      	ldr	r1, [r3, #12]
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	061a      	lsls	r2, r3, #24
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	430a      	orrs	r2, r1
 800215c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800215e:	e035      	b.n	80021cc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68d9      	ldr	r1, [r3, #12]
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	689a      	ldr	r2, [r3, #8]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	b29b      	uxth	r3, r3
 8002170:	4618      	mov	r0, r3
 8002172:	4603      	mov	r3, r0
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	4403      	add	r3, r0
 8002178:	3b1e      	subs	r3, #30
 800217a:	409a      	lsls	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	430a      	orrs	r2, r1
 8002182:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002184:	e022      	b.n	80021cc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6919      	ldr	r1, [r3, #16]
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	b29b      	uxth	r3, r3
 8002192:	461a      	mov	r2, r3
 8002194:	4613      	mov	r3, r2
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	4413      	add	r3, r2
 800219a:	2207      	movs	r2, #7
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43da      	mvns	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	400a      	ands	r2, r1
 80021a8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6919      	ldr	r1, [r3, #16]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	4618      	mov	r0, r3
 80021bc:	4603      	mov	r3, r0
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	4403      	add	r3, r0
 80021c2:	409a      	lsls	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	430a      	orrs	r2, r1
 80021ca:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b06      	cmp	r3, #6
 80021d2:	d824      	bhi.n	800221e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	3b05      	subs	r3, #5
 80021e6:	221f      	movs	r2, #31
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43da      	mvns	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	400a      	ands	r2, r1
 80021f4:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	b29b      	uxth	r3, r3
 8002202:	4618      	mov	r0, r3
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	4613      	mov	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	3b05      	subs	r3, #5
 8002210:	fa00 f203 	lsl.w	r2, r0, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	430a      	orrs	r2, r1
 800221a:	635a      	str	r2, [r3, #52]	@ 0x34
 800221c:	e04c      	b.n	80022b8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b0c      	cmp	r3, #12
 8002224:	d824      	bhi.n	8002270 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	4613      	mov	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	3b23      	subs	r3, #35	@ 0x23
 8002238:	221f      	movs	r2, #31
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43da      	mvns	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	400a      	ands	r2, r1
 8002246:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	b29b      	uxth	r3, r3
 8002254:	4618      	mov	r0, r3
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	3b23      	subs	r3, #35	@ 0x23
 8002262:	fa00 f203 	lsl.w	r2, r0, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	631a      	str	r2, [r3, #48]	@ 0x30
 800226e:	e023      	b.n	80022b8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	4613      	mov	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	3b41      	subs	r3, #65	@ 0x41
 8002282:	221f      	movs	r2, #31
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	43da      	mvns	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	400a      	ands	r2, r1
 8002290:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	b29b      	uxth	r3, r3
 800229e:	4618      	mov	r0, r3
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	3b41      	subs	r3, #65	@ 0x41
 80022ac:	fa00 f203 	lsl.w	r2, r0, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a30      	ldr	r2, [pc, #192]	@ (8002380 <HAL_ADC_ConfigChannel+0x29c>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d10a      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x1f4>
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80022ca:	d105      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80022cc:	4b2d      	ldr	r3, [pc, #180]	@ (8002384 <HAL_ADC_ConfigChannel+0x2a0>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	4a2c      	ldr	r2, [pc, #176]	@ (8002384 <HAL_ADC_ConfigChannel+0x2a0>)
 80022d2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80022d6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a28      	ldr	r2, [pc, #160]	@ (8002380 <HAL_ADC_ConfigChannel+0x29c>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d10f      	bne.n	8002302 <HAL_ADC_ConfigChannel+0x21e>
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2b12      	cmp	r3, #18
 80022e8:	d10b      	bne.n	8002302 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80022ea:	4b26      	ldr	r3, [pc, #152]	@ (8002384 <HAL_ADC_ConfigChannel+0x2a0>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	4a25      	ldr	r2, [pc, #148]	@ (8002384 <HAL_ADC_ConfigChannel+0x2a0>)
 80022f0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80022f4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80022f6:	4b23      	ldr	r3, [pc, #140]	@ (8002384 <HAL_ADC_ConfigChannel+0x2a0>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	4a22      	ldr	r2, [pc, #136]	@ (8002384 <HAL_ADC_ConfigChannel+0x2a0>)
 80022fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002300:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a1e      	ldr	r2, [pc, #120]	@ (8002380 <HAL_ADC_ConfigChannel+0x29c>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d12b      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x280>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a1a      	ldr	r2, [pc, #104]	@ (800237c <HAL_ADC_ConfigChannel+0x298>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d003      	beq.n	800231e <HAL_ADC_ConfigChannel+0x23a>
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2b11      	cmp	r3, #17
 800231c:	d122      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800231e:	4b19      	ldr	r3, [pc, #100]	@ (8002384 <HAL_ADC_ConfigChannel+0x2a0>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	4a18      	ldr	r2, [pc, #96]	@ (8002384 <HAL_ADC_ConfigChannel+0x2a0>)
 8002324:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002328:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800232a:	4b16      	ldr	r3, [pc, #88]	@ (8002384 <HAL_ADC_ConfigChannel+0x2a0>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	4a15      	ldr	r2, [pc, #84]	@ (8002384 <HAL_ADC_ConfigChannel+0x2a0>)
 8002330:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002334:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a10      	ldr	r2, [pc, #64]	@ (800237c <HAL_ADC_ConfigChannel+0x298>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d111      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002340:	4b11      	ldr	r3, [pc, #68]	@ (8002388 <HAL_ADC_ConfigChannel+0x2a4>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a11      	ldr	r2, [pc, #68]	@ (800238c <HAL_ADC_ConfigChannel+0x2a8>)
 8002346:	fba2 2303 	umull	r2, r3, r2, r3
 800234a:	0c9a      	lsrs	r2, r3, #18
 800234c:	4613      	mov	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4413      	add	r3, r2
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002356:	e002      	b.n	800235e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	3b01      	subs	r3, #1
 800235c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1f9      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3714      	adds	r7, #20
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	10000012 	.word	0x10000012
 8002380:	40012000 	.word	0x40012000
 8002384:	40012300 	.word	0x40012300
 8002388:	20000000 	.word	0x20000000
 800238c:	431bde83 	.word	0x431bde83

08002390 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002398:	4b78      	ldr	r3, [pc, #480]	@ (800257c <ADC_Init+0x1ec>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	4a77      	ldr	r2, [pc, #476]	@ (800257c <ADC_Init+0x1ec>)
 800239e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80023a2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80023a4:	4b75      	ldr	r3, [pc, #468]	@ (800257c <ADC_Init+0x1ec>)
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	4973      	ldr	r1, [pc, #460]	@ (800257c <ADC_Init+0x1ec>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6859      	ldr	r1, [r3, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	021a      	lsls	r2, r3, #8
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80023e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6859      	ldr	r1, [r3, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002406:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6899      	ldr	r1, [r3, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68da      	ldr	r2, [r3, #12]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	430a      	orrs	r2, r1
 8002418:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800241e:	4a58      	ldr	r2, [pc, #352]	@ (8002580 <ADC_Init+0x1f0>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d022      	beq.n	800246a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689a      	ldr	r2, [r3, #8]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002432:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6899      	ldr	r1, [r3, #8]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	430a      	orrs	r2, r1
 8002444:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002454:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6899      	ldr	r1, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	430a      	orrs	r2, r1
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	e00f      	b.n	800248a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002478:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002488:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0202 	bic.w	r2, r2, #2
 8002498:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6899      	ldr	r1, [r3, #8]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	005a      	lsls	r2, r3, #1
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d01b      	beq.n	80024f0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80024d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6859      	ldr	r1, [r3, #4]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e2:	3b01      	subs	r3, #1
 80024e4:	035a      	lsls	r2, r3, #13
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	605a      	str	r2, [r3, #4]
 80024ee:	e007      	b.n	8002500 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800250e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	3b01      	subs	r3, #1
 800251c:	051a      	lsls	r2, r3, #20
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002534:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6899      	ldr	r1, [r3, #8]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002542:	025a      	lsls	r2, r3, #9
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	430a      	orrs	r2, r1
 800254a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689a      	ldr	r2, [r3, #8]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800255a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6899      	ldr	r1, [r3, #8]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	029a      	lsls	r2, r3, #10
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	609a      	str	r2, [r3, #8]
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	40012300 	.word	0x40012300
 8002580:	0f000001 	.word	0x0f000001

08002584 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002590:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002596:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800259a:	2b00      	cmp	r3, #0
 800259c:	d13c      	bne.n	8002618 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d12b      	bne.n	8002610 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d127      	bne.n	8002610 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025c6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d006      	beq.n	80025dc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d119      	bne.n	8002610 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0220 	bic.w	r2, r2, #32
 80025ea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d105      	bne.n	8002610 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002608:	f043 0201 	orr.w	r2, r3, #1
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f7ff fd3f 	bl	8002094 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002616:	e00e      	b.n	8002636 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261c:	f003 0310 	and.w	r3, r3, #16
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f7ff fd53 	bl	80020d0 <HAL_ADC_ErrorCallback>
}
 800262a:	e004      	b.n	8002636 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	4798      	blx	r3
}
 8002636:	bf00      	nop
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b084      	sub	sp, #16
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800264a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f7ff fd2b 	bl	80020a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002652:	bf00      	nop
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b084      	sub	sp, #16
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002666:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2240      	movs	r2, #64	@ 0x40
 800266c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002672:	f043 0204 	orr.w	r2, r3, #4
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f7ff fd28 	bl	80020d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002680:	bf00      	nop
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e0ed      	b.n	800288a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d102      	bne.n	80026c0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7fe fa0e 	bl	8000adc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0201 	orr.w	r2, r2, #1
 80026ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026d0:	f7ff fa62 	bl	8001b98 <HAL_GetTick>
 80026d4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80026d6:	e012      	b.n	80026fe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026d8:	f7ff fa5e 	bl	8001b98 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b0a      	cmp	r3, #10
 80026e4:	d90b      	bls.n	80026fe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ea:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2205      	movs	r2, #5
 80026f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e0c5      	b.n	800288a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0e5      	beq.n	80026d8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 0202 	bic.w	r2, r2, #2
 800271a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800271c:	f7ff fa3c 	bl	8001b98 <HAL_GetTick>
 8002720:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002722:	e012      	b.n	800274a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002724:	f7ff fa38 	bl	8001b98 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b0a      	cmp	r3, #10
 8002730:	d90b      	bls.n	800274a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002736:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2205      	movs	r2, #5
 8002742:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e09f      	b.n	800288a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1e5      	bne.n	8002724 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	7e1b      	ldrb	r3, [r3, #24]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d108      	bne.n	8002772 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	e007      	b.n	8002782 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002780:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	7e5b      	ldrb	r3, [r3, #25]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d108      	bne.n	800279c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	e007      	b.n	80027ac <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	7e9b      	ldrb	r3, [r3, #26]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d108      	bne.n	80027c6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0220 	orr.w	r2, r2, #32
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	e007      	b.n	80027d6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0220 	bic.w	r2, r2, #32
 80027d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	7edb      	ldrb	r3, [r3, #27]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d108      	bne.n	80027f0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 0210 	bic.w	r2, r2, #16
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	e007      	b.n	8002800 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f042 0210 	orr.w	r2, r2, #16
 80027fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	7f1b      	ldrb	r3, [r3, #28]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d108      	bne.n	800281a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f042 0208 	orr.w	r2, r2, #8
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	e007      	b.n	800282a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 0208 	bic.w	r2, r2, #8
 8002828:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	7f5b      	ldrb	r3, [r3, #29]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d108      	bne.n	8002844 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f042 0204 	orr.w	r2, r2, #4
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	e007      	b.n	8002854 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 0204 	bic.w	r2, r2, #4
 8002852:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	431a      	orrs	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	431a      	orrs	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	ea42 0103 	orr.w	r1, r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	1e5a      	subs	r2, r3, #1
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	430a      	orrs	r2, r1
 8002878:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b08a      	sub	sp, #40	@ 0x28
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800289a:	2300      	movs	r3, #0
 800289c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d07c      	beq.n	80029d2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d023      	beq.n	800292a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2201      	movs	r2, #1
 80028e8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 f983 	bl	8002c00 <HAL_CAN_TxMailbox0CompleteCallback>
 80028fa:	e016      	b.n	800292a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	f003 0304 	and.w	r3, r3, #4
 8002902:	2b00      	cmp	r3, #0
 8002904:	d004      	beq.n	8002910 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002908:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800290c:	627b      	str	r3, [r7, #36]	@ 0x24
 800290e:	e00c      	b.n	800292a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	f003 0308 	and.w	r3, r3, #8
 8002916:	2b00      	cmp	r3, #0
 8002918:	d004      	beq.n	8002924 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800291a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002920:	627b      	str	r3, [r7, #36]	@ 0x24
 8002922:	e002      	b.n	800292a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 f989 	bl	8002c3c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002930:	2b00      	cmp	r3, #0
 8002932:	d024      	beq.n	800297e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800293c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f963 	bl	8002c14 <HAL_CAN_TxMailbox1CompleteCallback>
 800294e:	e016      	b.n	800297e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002956:	2b00      	cmp	r3, #0
 8002958:	d004      	beq.n	8002964 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800295a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002960:	627b      	str	r3, [r7, #36]	@ 0x24
 8002962:	e00c      	b.n	800297e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800296a:	2b00      	cmp	r3, #0
 800296c:	d004      	beq.n	8002978 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800296e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002970:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002974:	627b      	str	r3, [r7, #36]	@ 0x24
 8002976:	e002      	b.n	800297e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 f969 	bl	8002c50 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d024      	beq.n	80029d2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002990:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d003      	beq.n	80029a4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 f943 	bl	8002c28 <HAL_CAN_TxMailbox2CompleteCallback>
 80029a2:	e016      	b.n	80029d2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d004      	beq.n	80029b8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80029ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80029b6:	e00c      	b.n	80029d2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d004      	beq.n	80029cc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80029c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80029ca:	e002      	b.n	80029d2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 f949 	bl	8002c64 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80029d2:	6a3b      	ldr	r3, [r7, #32]
 80029d4:	f003 0308 	and.w	r3, r3, #8
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00c      	beq.n	80029f6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f003 0310 	and.w	r3, r3, #16
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d007      	beq.n	80029f6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80029e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029ec:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2210      	movs	r2, #16
 80029f4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00b      	beq.n	8002a18 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d006      	beq.n	8002a18 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2208      	movs	r2, #8
 8002a10:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f93a 	bl	8002c8c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002a18:	6a3b      	ldr	r3, [r7, #32]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d009      	beq.n	8002a36 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	f003 0303 	and.w	r3, r3, #3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d002      	beq.n	8002a36 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 f921 	bl	8002c78 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002a36:	6a3b      	ldr	r3, [r7, #32]
 8002a38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00c      	beq.n	8002a5a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	f003 0310 	and.w	r3, r3, #16
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d007      	beq.n	8002a5a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a50:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2210      	movs	r2, #16
 8002a58:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002a5a:	6a3b      	ldr	r3, [r7, #32]
 8002a5c:	f003 0320 	and.w	r3, r3, #32
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00b      	beq.n	8002a7c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d006      	beq.n	8002a7c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2208      	movs	r2, #8
 8002a74:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f91c 	bl	8002cb4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002a7c:	6a3b      	ldr	r3, [r7, #32]
 8002a7e:	f003 0310 	and.w	r3, r3, #16
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d009      	beq.n	8002a9a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	f003 0303 	and.w	r3, r3, #3
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d002      	beq.n	8002a9a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f903 	bl	8002ca0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002a9a:	6a3b      	ldr	r3, [r7, #32]
 8002a9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00b      	beq.n	8002abc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	f003 0310 	and.w	r3, r3, #16
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d006      	beq.n	8002abc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2210      	movs	r2, #16
 8002ab4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f906 	bl	8002cc8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002abc:	6a3b      	ldr	r3, [r7, #32]
 8002abe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00b      	beq.n	8002ade <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	f003 0308 	and.w	r3, r3, #8
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d006      	beq.n	8002ade <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2208      	movs	r2, #8
 8002ad6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f8ff 	bl	8002cdc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002ade:	6a3b      	ldr	r3, [r7, #32]
 8002ae0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d07b      	beq.n	8002be0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	f003 0304 	and.w	r3, r3, #4
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d072      	beq.n	8002bd8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002af2:	6a3b      	ldr	r3, [r7, #32]
 8002af4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d008      	beq.n	8002b0e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b0e:	6a3b      	ldr	r3, [r7, #32]
 8002b10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d008      	beq.n	8002b2a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b24:	f043 0302 	orr.w	r3, r3, #2
 8002b28:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d008      	beq.n	8002b46 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b40:	f043 0304 	orr.w	r3, r3, #4
 8002b44:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d043      	beq.n	8002bd8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d03e      	beq.n	8002bd8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b60:	2b60      	cmp	r3, #96	@ 0x60
 8002b62:	d02b      	beq.n	8002bbc <HAL_CAN_IRQHandler+0x32a>
 8002b64:	2b60      	cmp	r3, #96	@ 0x60
 8002b66:	d82e      	bhi.n	8002bc6 <HAL_CAN_IRQHandler+0x334>
 8002b68:	2b50      	cmp	r3, #80	@ 0x50
 8002b6a:	d022      	beq.n	8002bb2 <HAL_CAN_IRQHandler+0x320>
 8002b6c:	2b50      	cmp	r3, #80	@ 0x50
 8002b6e:	d82a      	bhi.n	8002bc6 <HAL_CAN_IRQHandler+0x334>
 8002b70:	2b40      	cmp	r3, #64	@ 0x40
 8002b72:	d019      	beq.n	8002ba8 <HAL_CAN_IRQHandler+0x316>
 8002b74:	2b40      	cmp	r3, #64	@ 0x40
 8002b76:	d826      	bhi.n	8002bc6 <HAL_CAN_IRQHandler+0x334>
 8002b78:	2b30      	cmp	r3, #48	@ 0x30
 8002b7a:	d010      	beq.n	8002b9e <HAL_CAN_IRQHandler+0x30c>
 8002b7c:	2b30      	cmp	r3, #48	@ 0x30
 8002b7e:	d822      	bhi.n	8002bc6 <HAL_CAN_IRQHandler+0x334>
 8002b80:	2b10      	cmp	r3, #16
 8002b82:	d002      	beq.n	8002b8a <HAL_CAN_IRQHandler+0x2f8>
 8002b84:	2b20      	cmp	r3, #32
 8002b86:	d005      	beq.n	8002b94 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002b88:	e01d      	b.n	8002bc6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8c:	f043 0308 	orr.w	r3, r3, #8
 8002b90:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002b92:	e019      	b.n	8002bc8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b96:	f043 0310 	orr.w	r3, r3, #16
 8002b9a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002b9c:	e014      	b.n	8002bc8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba0:	f043 0320 	orr.w	r3, r3, #32
 8002ba4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ba6:	e00f      	b.n	8002bc8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002baa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002bae:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002bb0:	e00a      	b.n	8002bc8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bb8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002bba:	e005      	b.n	8002bc8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bc2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002bc4:	e000      	b.n	8002bc8 <HAL_CAN_IRQHandler+0x336>
            break;
 8002bc6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	699a      	ldr	r2, [r3, #24]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002bd6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2204      	movs	r2, #4
 8002bde:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d008      	beq.n	8002bf8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bec:	431a      	orrs	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f87c 	bl	8002cf0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002bf8:	bf00      	nop
 8002bfa:	3728      	adds	r7, #40	@ 0x28
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d14:	4b0b      	ldr	r3, [pc, #44]	@ (8002d44 <__NVIC_SetPriorityGrouping+0x40>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d20:	4013      	ands	r3, r2
 8002d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d2c:	4b06      	ldr	r3, [pc, #24]	@ (8002d48 <__NVIC_SetPriorityGrouping+0x44>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d32:	4a04      	ldr	r2, [pc, #16]	@ (8002d44 <__NVIC_SetPriorityGrouping+0x40>)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	60d3      	str	r3, [r2, #12]
}
 8002d38:	bf00      	nop
 8002d3a:	3714      	adds	r7, #20
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	e000ed00 	.word	0xe000ed00
 8002d48:	05fa0000 	.word	0x05fa0000

08002d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d50:	4b04      	ldr	r3, [pc, #16]	@ (8002d64 <__NVIC_GetPriorityGrouping+0x18>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	0a1b      	lsrs	r3, r3, #8
 8002d56:	f003 0307 	and.w	r3, r3, #7
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	e000ed00 	.word	0xe000ed00

08002d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	4603      	mov	r3, r0
 8002d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	db0b      	blt.n	8002d92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d7a:	79fb      	ldrb	r3, [r7, #7]
 8002d7c:	f003 021f 	and.w	r2, r3, #31
 8002d80:	4907      	ldr	r1, [pc, #28]	@ (8002da0 <__NVIC_EnableIRQ+0x38>)
 8002d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d86:	095b      	lsrs	r3, r3, #5
 8002d88:	2001      	movs	r0, #1
 8002d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	e000e100 	.word	0xe000e100

08002da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	6039      	str	r1, [r7, #0]
 8002dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	db0a      	blt.n	8002dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	490c      	ldr	r1, [pc, #48]	@ (8002df0 <__NVIC_SetPriority+0x4c>)
 8002dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc2:	0112      	lsls	r2, r2, #4
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	440b      	add	r3, r1
 8002dc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dcc:	e00a      	b.n	8002de4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	4908      	ldr	r1, [pc, #32]	@ (8002df4 <__NVIC_SetPriority+0x50>)
 8002dd4:	79fb      	ldrb	r3, [r7, #7]
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	3b04      	subs	r3, #4
 8002ddc:	0112      	lsls	r2, r2, #4
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	440b      	add	r3, r1
 8002de2:	761a      	strb	r2, [r3, #24]
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	e000e100 	.word	0xe000e100
 8002df4:	e000ed00 	.word	0xe000ed00

08002df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b089      	sub	sp, #36	@ 0x24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	f1c3 0307 	rsb	r3, r3, #7
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	bf28      	it	cs
 8002e16:	2304      	movcs	r3, #4
 8002e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	3304      	adds	r3, #4
 8002e1e:	2b06      	cmp	r3, #6
 8002e20:	d902      	bls.n	8002e28 <NVIC_EncodePriority+0x30>
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	3b03      	subs	r3, #3
 8002e26:	e000      	b.n	8002e2a <NVIC_EncodePriority+0x32>
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	43da      	mvns	r2, r3
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	401a      	ands	r2, r3
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e40:	f04f 31ff 	mov.w	r1, #4294967295
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4a:	43d9      	mvns	r1, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e50:	4313      	orrs	r3, r2
         );
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3724      	adds	r7, #36	@ 0x24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
	...

08002e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e70:	d301      	bcc.n	8002e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e72:	2301      	movs	r3, #1
 8002e74:	e00f      	b.n	8002e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e76:	4a0a      	ldr	r2, [pc, #40]	@ (8002ea0 <SysTick_Config+0x40>)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e7e:	210f      	movs	r1, #15
 8002e80:	f04f 30ff 	mov.w	r0, #4294967295
 8002e84:	f7ff ff8e 	bl	8002da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e88:	4b05      	ldr	r3, [pc, #20]	@ (8002ea0 <SysTick_Config+0x40>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e8e:	4b04      	ldr	r3, [pc, #16]	@ (8002ea0 <SysTick_Config+0x40>)
 8002e90:	2207      	movs	r2, #7
 8002e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	e000e010 	.word	0xe000e010

08002ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7ff ff29 	bl	8002d04 <__NVIC_SetPriorityGrouping>
}
 8002eb2:	bf00      	nop
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b086      	sub	sp, #24
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	60b9      	str	r1, [r7, #8]
 8002ec4:	607a      	str	r2, [r7, #4]
 8002ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ecc:	f7ff ff3e 	bl	8002d4c <__NVIC_GetPriorityGrouping>
 8002ed0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	68b9      	ldr	r1, [r7, #8]
 8002ed6:	6978      	ldr	r0, [r7, #20]
 8002ed8:	f7ff ff8e 	bl	8002df8 <NVIC_EncodePriority>
 8002edc:	4602      	mov	r2, r0
 8002ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ee2:	4611      	mov	r1, r2
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff ff5d 	bl	8002da4 <__NVIC_SetPriority>
}
 8002eea:	bf00      	nop
 8002eec:	3718      	adds	r7, #24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b082      	sub	sp, #8
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	4603      	mov	r3, r0
 8002efa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff ff31 	bl	8002d68 <__NVIC_EnableIRQ>
}
 8002f06:	bf00      	nop
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7ff ffa2 	bl	8002e60 <SysTick_Config>
 8002f1c:	4603      	mov	r3, r0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b082      	sub	sp, #8
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e014      	b.n	8002f62 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	791b      	ldrb	r3, [r3, #4]
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d105      	bne.n	8002f4e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7fd fe45 	bl	8000bd8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2202      	movs	r2, #2
 8002f52:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f80:	d120      	bne.n	8002fc4 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f90:	d118      	bne.n	8002fc4 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2204      	movs	r2, #4
 8002f96:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	f043 0201 	orr.w	r2, r3, #1
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002fac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002fbc:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f82d 	bl	800301e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002fce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fd2:	d120      	bne.n	8003016 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fda:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002fde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fe2:	d118      	bne.n	8003016 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2204      	movs	r2, #4
 8002fe8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	f043 0202 	orr.w	r2, r3, #2
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002ffe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800300e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 f85d 	bl	80030d0 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8003016:	bf00      	nop
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003032:	b480      	push	{r7}
 8003034:	b087      	sub	sp, #28
 8003036:	af00      	add	r7, sp, #0
 8003038:	60f8      	str	r0, [r7, #12]
 800303a:	60b9      	str	r1, [r7, #8]
 800303c:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	795b      	ldrb	r3, [r3, #5]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d101      	bne.n	800304a <HAL_DAC_ConfigChannel+0x18>
 8003046:	2302      	movs	r3, #2
 8003048:	e03c      	b.n	80030c4 <HAL_DAC_ConfigChannel+0x92>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2201      	movs	r2, #1
 800304e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2202      	movs	r2, #2
 8003054:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f003 0310 	and.w	r3, r3, #16
 8003064:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	43db      	mvns	r3, r3
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	4013      	ands	r3, r2
 8003072:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	4313      	orrs	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f003 0310 	and.w	r3, r3, #16
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	4313      	orrs	r3, r2
 8003090:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6819      	ldr	r1, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f003 0310 	and.w	r3, r3, #16
 80030a6:	22c0      	movs	r2, #192	@ 0xc0
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	43da      	mvns	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	400a      	ands	r2, r1
 80030b4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2201      	movs	r2, #1
 80030ba:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	371c      	adds	r7, #28
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80030f0:	f7fe fd52 	bl	8001b98 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e099      	b.n	8003234 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 0201 	bic.w	r2, r2, #1
 800311e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003120:	e00f      	b.n	8003142 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003122:	f7fe fd39 	bl	8001b98 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b05      	cmp	r3, #5
 800312e:	d908      	bls.n	8003142 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2220      	movs	r2, #32
 8003134:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2203      	movs	r2, #3
 800313a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e078      	b.n	8003234 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1e8      	bne.n	8003122 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	4b38      	ldr	r3, [pc, #224]	@ (800323c <HAL_DMA_Init+0x158>)
 800315c:	4013      	ands	r3, r2
 800315e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800316e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800317a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003186:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	4313      	orrs	r3, r2
 8003192:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003198:	2b04      	cmp	r3, #4
 800319a:	d107      	bne.n	80031ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a4:	4313      	orrs	r3, r2
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f023 0307 	bic.w	r3, r3, #7
 80031c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d117      	bne.n	8003206 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	4313      	orrs	r3, r2
 80031de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00e      	beq.n	8003206 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 fa77 	bl	80036dc <DMA_CheckFifoParam>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d008      	beq.n	8003206 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2240      	movs	r2, #64	@ 0x40
 80031f8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003202:	2301      	movs	r3, #1
 8003204:	e016      	b.n	8003234 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 fa2e 	bl	8003670 <DMA_CalcBaseAndBitshift>
 8003214:	4603      	mov	r3, r0
 8003216:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800321c:	223f      	movs	r2, #63	@ 0x3f
 800321e:	409a      	lsls	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	e010803f 	.word	0xe010803f

08003240 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
 800324c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800324e:	2300      	movs	r3, #0
 8003250:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003256:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800325e:	2b01      	cmp	r3, #1
 8003260:	d101      	bne.n	8003266 <HAL_DMA_Start_IT+0x26>
 8003262:	2302      	movs	r3, #2
 8003264:	e048      	b.n	80032f8 <HAL_DMA_Start_IT+0xb8>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b01      	cmp	r3, #1
 8003278:	d137      	bne.n	80032ea <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2202      	movs	r2, #2
 800327e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	68b9      	ldr	r1, [r7, #8]
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 f9c0 	bl	8003614 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003298:	223f      	movs	r2, #63	@ 0x3f
 800329a:	409a      	lsls	r2, r3
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0216 	orr.w	r2, r2, #22
 80032ae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	695a      	ldr	r2, [r3, #20]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80032be:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d007      	beq.n	80032d8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0208 	orr.w	r2, r2, #8
 80032d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0201 	orr.w	r2, r2, #1
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	e005      	b.n	80032f6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80032f2:	2302      	movs	r3, #2
 80032f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80032f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3718      	adds	r7, #24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003308:	2300      	movs	r3, #0
 800330a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800330c:	4b8e      	ldr	r3, [pc, #568]	@ (8003548 <HAL_DMA_IRQHandler+0x248>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a8e      	ldr	r2, [pc, #568]	@ (800354c <HAL_DMA_IRQHandler+0x24c>)
 8003312:	fba2 2303 	umull	r2, r3, r2, r3
 8003316:	0a9b      	lsrs	r3, r3, #10
 8003318:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800331e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800332a:	2208      	movs	r2, #8
 800332c:	409a      	lsls	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	4013      	ands	r3, r2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d01a      	beq.n	800336c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b00      	cmp	r3, #0
 8003342:	d013      	beq.n	800336c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0204 	bic.w	r2, r2, #4
 8003352:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003358:	2208      	movs	r2, #8
 800335a:	409a      	lsls	r2, r3
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003364:	f043 0201 	orr.w	r2, r3, #1
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003370:	2201      	movs	r2, #1
 8003372:	409a      	lsls	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4013      	ands	r3, r2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d012      	beq.n	80033a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00b      	beq.n	80033a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800338e:	2201      	movs	r2, #1
 8003390:	409a      	lsls	r2, r3
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800339a:	f043 0202 	orr.w	r2, r3, #2
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a6:	2204      	movs	r2, #4
 80033a8:	409a      	lsls	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	4013      	ands	r3, r2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d012      	beq.n	80033d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00b      	beq.n	80033d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c4:	2204      	movs	r2, #4
 80033c6:	409a      	lsls	r2, r3
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033d0:	f043 0204 	orr.w	r2, r3, #4
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033dc:	2210      	movs	r2, #16
 80033de:	409a      	lsls	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4013      	ands	r3, r2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d043      	beq.n	8003470 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d03c      	beq.n	8003470 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033fa:	2210      	movs	r2, #16
 80033fc:	409a      	lsls	r2, r3
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d018      	beq.n	8003442 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d108      	bne.n	8003430 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003422:	2b00      	cmp	r3, #0
 8003424:	d024      	beq.n	8003470 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	4798      	blx	r3
 800342e:	e01f      	b.n	8003470 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003434:	2b00      	cmp	r3, #0
 8003436:	d01b      	beq.n	8003470 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	4798      	blx	r3
 8003440:	e016      	b.n	8003470 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800344c:	2b00      	cmp	r3, #0
 800344e:	d107      	bne.n	8003460 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 0208 	bic.w	r2, r2, #8
 800345e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003464:	2b00      	cmp	r3, #0
 8003466:	d003      	beq.n	8003470 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003474:	2220      	movs	r2, #32
 8003476:	409a      	lsls	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	4013      	ands	r3, r2
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 808f 	beq.w	80035a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0310 	and.w	r3, r3, #16
 800348c:	2b00      	cmp	r3, #0
 800348e:	f000 8087 	beq.w	80035a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003496:	2220      	movs	r2, #32
 8003498:	409a      	lsls	r2, r3
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b05      	cmp	r3, #5
 80034a8:	d136      	bne.n	8003518 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 0216 	bic.w	r2, r2, #22
 80034b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	695a      	ldr	r2, [r3, #20]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d103      	bne.n	80034da <HAL_DMA_IRQHandler+0x1da>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d007      	beq.n	80034ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 0208 	bic.w	r2, r2, #8
 80034e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ee:	223f      	movs	r2, #63	@ 0x3f
 80034f0:	409a      	lsls	r2, r3
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800350a:	2b00      	cmp	r3, #0
 800350c:	d07e      	beq.n	800360c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	4798      	blx	r3
        }
        return;
 8003516:	e079      	b.n	800360c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d01d      	beq.n	8003562 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10d      	bne.n	8003550 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003538:	2b00      	cmp	r3, #0
 800353a:	d031      	beq.n	80035a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	4798      	blx	r3
 8003544:	e02c      	b.n	80035a0 <HAL_DMA_IRQHandler+0x2a0>
 8003546:	bf00      	nop
 8003548:	20000000 	.word	0x20000000
 800354c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003554:	2b00      	cmp	r3, #0
 8003556:	d023      	beq.n	80035a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	4798      	blx	r3
 8003560:	e01e      	b.n	80035a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10f      	bne.n	8003590 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 0210 	bic.w	r2, r2, #16
 800357e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d032      	beq.n	800360e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d022      	beq.n	80035fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2205      	movs	r2, #5
 80035b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 0201 	bic.w	r2, r2, #1
 80035ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	3301      	adds	r3, #1
 80035d0:	60bb      	str	r3, [r7, #8]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d307      	bcc.n	80035e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1f2      	bne.n	80035cc <HAL_DMA_IRQHandler+0x2cc>
 80035e6:	e000      	b.n	80035ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80035e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d005      	beq.n	800360e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	4798      	blx	r3
 800360a:	e000      	b.n	800360e <HAL_DMA_IRQHandler+0x30e>
        return;
 800360c:	bf00      	nop
    }
  }
}
 800360e:	3718      	adds	r7, #24
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
 8003620:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003630:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	2b40      	cmp	r3, #64	@ 0x40
 8003640:	d108      	bne.n	8003654 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003652:	e007      	b.n	8003664 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	60da      	str	r2, [r3, #12]
}
 8003664:	bf00      	nop
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	b2db      	uxtb	r3, r3
 800367e:	3b10      	subs	r3, #16
 8003680:	4a13      	ldr	r2, [pc, #76]	@ (80036d0 <DMA_CalcBaseAndBitshift+0x60>)
 8003682:	fba2 2303 	umull	r2, r3, r2, r3
 8003686:	091b      	lsrs	r3, r3, #4
 8003688:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800368a:	4a12      	ldr	r2, [pc, #72]	@ (80036d4 <DMA_CalcBaseAndBitshift+0x64>)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4413      	add	r3, r2
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	461a      	mov	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2b03      	cmp	r3, #3
 800369c:	d908      	bls.n	80036b0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	461a      	mov	r2, r3
 80036a4:	4b0c      	ldr	r3, [pc, #48]	@ (80036d8 <DMA_CalcBaseAndBitshift+0x68>)
 80036a6:	4013      	ands	r3, r2
 80036a8:	1d1a      	adds	r2, r3, #4
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	659a      	str	r2, [r3, #88]	@ 0x58
 80036ae:	e006      	b.n	80036be <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	461a      	mov	r2, r3
 80036b6:	4b08      	ldr	r3, [pc, #32]	@ (80036d8 <DMA_CalcBaseAndBitshift+0x68>)
 80036b8:	4013      	ands	r3, r2
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	aaaaaaab 	.word	0xaaaaaaab
 80036d4:	08006558 	.word	0x08006558
 80036d8:	fffffc00 	.word	0xfffffc00

080036dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036e4:	2300      	movs	r3, #0
 80036e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d11f      	bne.n	8003736 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	2b03      	cmp	r3, #3
 80036fa:	d856      	bhi.n	80037aa <DMA_CheckFifoParam+0xce>
 80036fc:	a201      	add	r2, pc, #4	@ (adr r2, 8003704 <DMA_CheckFifoParam+0x28>)
 80036fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003702:	bf00      	nop
 8003704:	08003715 	.word	0x08003715
 8003708:	08003727 	.word	0x08003727
 800370c:	08003715 	.word	0x08003715
 8003710:	080037ab 	.word	0x080037ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003718:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d046      	beq.n	80037ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003724:	e043      	b.n	80037ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800372e:	d140      	bne.n	80037b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003734:	e03d      	b.n	80037b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800373e:	d121      	bne.n	8003784 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	2b03      	cmp	r3, #3
 8003744:	d837      	bhi.n	80037b6 <DMA_CheckFifoParam+0xda>
 8003746:	a201      	add	r2, pc, #4	@ (adr r2, 800374c <DMA_CheckFifoParam+0x70>)
 8003748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374c:	0800375d 	.word	0x0800375d
 8003750:	08003763 	.word	0x08003763
 8003754:	0800375d 	.word	0x0800375d
 8003758:	08003775 	.word	0x08003775
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	73fb      	strb	r3, [r7, #15]
      break;
 8003760:	e030      	b.n	80037c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003766:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d025      	beq.n	80037ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003772:	e022      	b.n	80037ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003778:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800377c:	d11f      	bne.n	80037be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003782:	e01c      	b.n	80037be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	2b02      	cmp	r3, #2
 8003788:	d903      	bls.n	8003792 <DMA_CheckFifoParam+0xb6>
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2b03      	cmp	r3, #3
 800378e:	d003      	beq.n	8003798 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003790:	e018      	b.n	80037c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	73fb      	strb	r3, [r7, #15]
      break;
 8003796:	e015      	b.n	80037c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800379c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00e      	beq.n	80037c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	73fb      	strb	r3, [r7, #15]
      break;
 80037a8:	e00b      	b.n	80037c2 <DMA_CheckFifoParam+0xe6>
      break;
 80037aa:	bf00      	nop
 80037ac:	e00a      	b.n	80037c4 <DMA_CheckFifoParam+0xe8>
      break;
 80037ae:	bf00      	nop
 80037b0:	e008      	b.n	80037c4 <DMA_CheckFifoParam+0xe8>
      break;
 80037b2:	bf00      	nop
 80037b4:	e006      	b.n	80037c4 <DMA_CheckFifoParam+0xe8>
      break;
 80037b6:	bf00      	nop
 80037b8:	e004      	b.n	80037c4 <DMA_CheckFifoParam+0xe8>
      break;
 80037ba:	bf00      	nop
 80037bc:	e002      	b.n	80037c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80037be:	bf00      	nop
 80037c0:	e000      	b.n	80037c4 <DMA_CheckFifoParam+0xe8>
      break;
 80037c2:	bf00      	nop
    }
  } 
  
  return status; 
 80037c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop

080037d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b089      	sub	sp, #36	@ 0x24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80037de:	2300      	movs	r3, #0
 80037e0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80037e2:	2300      	movs	r3, #0
 80037e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80037e6:	2300      	movs	r3, #0
 80037e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80037ea:	2300      	movs	r3, #0
 80037ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80037ee:	2300      	movs	r3, #0
 80037f0:	61fb      	str	r3, [r7, #28]
 80037f2:	e175      	b.n	8003ae0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80037f4:	2201      	movs	r2, #1
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	4013      	ands	r3, r2
 8003806:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	429a      	cmp	r2, r3
 800380e:	f040 8164 	bne.w	8003ada <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	2b01      	cmp	r3, #1
 800381c:	d005      	beq.n	800382a <HAL_GPIO_Init+0x56>
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f003 0303 	and.w	r3, r3, #3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d130      	bne.n	800388c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	2203      	movs	r2, #3
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	43db      	mvns	r3, r3
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	4013      	ands	r3, r2
 8003840:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	68da      	ldr	r2, [r3, #12]
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	4313      	orrs	r3, r2
 8003852:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003860:	2201      	movs	r2, #1
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	43db      	mvns	r3, r3
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	4013      	ands	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	091b      	lsrs	r3, r3, #4
 8003876:	f003 0201 	and.w	r2, r3, #1
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	4313      	orrs	r3, r2
 8003884:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f003 0303 	and.w	r3, r3, #3
 8003894:	2b03      	cmp	r3, #3
 8003896:	d017      	beq.n	80038c8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	2203      	movs	r2, #3
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	43db      	mvns	r3, r3
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	4013      	ands	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	4313      	orrs	r3, r2
 80038c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f003 0303 	and.w	r3, r3, #3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d123      	bne.n	800391c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	08da      	lsrs	r2, r3, #3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3208      	adds	r2, #8
 80038dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	220f      	movs	r2, #15
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	43db      	mvns	r3, r3
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	4013      	ands	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	691a      	ldr	r2, [r3, #16]
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	f003 0307 	and.w	r3, r3, #7
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	4313      	orrs	r3, r2
 800390c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	08da      	lsrs	r2, r3, #3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	3208      	adds	r2, #8
 8003916:	69b9      	ldr	r1, [r7, #24]
 8003918:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	2203      	movs	r2, #3
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	43db      	mvns	r3, r3
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	4013      	ands	r3, r2
 8003932:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f003 0203 	and.w	r2, r3, #3
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	4313      	orrs	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 80be 	beq.w	8003ada <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800395e:	4b66      	ldr	r3, [pc, #408]	@ (8003af8 <HAL_GPIO_Init+0x324>)
 8003960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003962:	4a65      	ldr	r2, [pc, #404]	@ (8003af8 <HAL_GPIO_Init+0x324>)
 8003964:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003968:	6453      	str	r3, [r2, #68]	@ 0x44
 800396a:	4b63      	ldr	r3, [pc, #396]	@ (8003af8 <HAL_GPIO_Init+0x324>)
 800396c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003972:	60fb      	str	r3, [r7, #12]
 8003974:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003976:	4a61      	ldr	r2, [pc, #388]	@ (8003afc <HAL_GPIO_Init+0x328>)
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	089b      	lsrs	r3, r3, #2
 800397c:	3302      	adds	r3, #2
 800397e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003982:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	220f      	movs	r2, #15
 800398e:	fa02 f303 	lsl.w	r3, r2, r3
 8003992:	43db      	mvns	r3, r3
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	4013      	ands	r3, r2
 8003998:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a58      	ldr	r2, [pc, #352]	@ (8003b00 <HAL_GPIO_Init+0x32c>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d037      	beq.n	8003a12 <HAL_GPIO_Init+0x23e>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a57      	ldr	r2, [pc, #348]	@ (8003b04 <HAL_GPIO_Init+0x330>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d031      	beq.n	8003a0e <HAL_GPIO_Init+0x23a>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a56      	ldr	r2, [pc, #344]	@ (8003b08 <HAL_GPIO_Init+0x334>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d02b      	beq.n	8003a0a <HAL_GPIO_Init+0x236>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a55      	ldr	r2, [pc, #340]	@ (8003b0c <HAL_GPIO_Init+0x338>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d025      	beq.n	8003a06 <HAL_GPIO_Init+0x232>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a54      	ldr	r2, [pc, #336]	@ (8003b10 <HAL_GPIO_Init+0x33c>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d01f      	beq.n	8003a02 <HAL_GPIO_Init+0x22e>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a53      	ldr	r2, [pc, #332]	@ (8003b14 <HAL_GPIO_Init+0x340>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d019      	beq.n	80039fe <HAL_GPIO_Init+0x22a>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a52      	ldr	r2, [pc, #328]	@ (8003b18 <HAL_GPIO_Init+0x344>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d013      	beq.n	80039fa <HAL_GPIO_Init+0x226>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a51      	ldr	r2, [pc, #324]	@ (8003b1c <HAL_GPIO_Init+0x348>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d00d      	beq.n	80039f6 <HAL_GPIO_Init+0x222>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a50      	ldr	r2, [pc, #320]	@ (8003b20 <HAL_GPIO_Init+0x34c>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d007      	beq.n	80039f2 <HAL_GPIO_Init+0x21e>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a4f      	ldr	r2, [pc, #316]	@ (8003b24 <HAL_GPIO_Init+0x350>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d101      	bne.n	80039ee <HAL_GPIO_Init+0x21a>
 80039ea:	2309      	movs	r3, #9
 80039ec:	e012      	b.n	8003a14 <HAL_GPIO_Init+0x240>
 80039ee:	230a      	movs	r3, #10
 80039f0:	e010      	b.n	8003a14 <HAL_GPIO_Init+0x240>
 80039f2:	2308      	movs	r3, #8
 80039f4:	e00e      	b.n	8003a14 <HAL_GPIO_Init+0x240>
 80039f6:	2307      	movs	r3, #7
 80039f8:	e00c      	b.n	8003a14 <HAL_GPIO_Init+0x240>
 80039fa:	2306      	movs	r3, #6
 80039fc:	e00a      	b.n	8003a14 <HAL_GPIO_Init+0x240>
 80039fe:	2305      	movs	r3, #5
 8003a00:	e008      	b.n	8003a14 <HAL_GPIO_Init+0x240>
 8003a02:	2304      	movs	r3, #4
 8003a04:	e006      	b.n	8003a14 <HAL_GPIO_Init+0x240>
 8003a06:	2303      	movs	r3, #3
 8003a08:	e004      	b.n	8003a14 <HAL_GPIO_Init+0x240>
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	e002      	b.n	8003a14 <HAL_GPIO_Init+0x240>
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e000      	b.n	8003a14 <HAL_GPIO_Init+0x240>
 8003a12:	2300      	movs	r3, #0
 8003a14:	69fa      	ldr	r2, [r7, #28]
 8003a16:	f002 0203 	and.w	r2, r2, #3
 8003a1a:	0092      	lsls	r2, r2, #2
 8003a1c:	4093      	lsls	r3, r2
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003a24:	4935      	ldr	r1, [pc, #212]	@ (8003afc <HAL_GPIO_Init+0x328>)
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	089b      	lsrs	r3, r3, #2
 8003a2a:	3302      	adds	r3, #2
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a32:	4b3d      	ldr	r3, [pc, #244]	@ (8003b28 <HAL_GPIO_Init+0x354>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	43db      	mvns	r3, r3
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a56:	4a34      	ldr	r2, [pc, #208]	@ (8003b28 <HAL_GPIO_Init+0x354>)
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a5c:	4b32      	ldr	r3, [pc, #200]	@ (8003b28 <HAL_GPIO_Init+0x354>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	43db      	mvns	r3, r3
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d003      	beq.n	8003a80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a80:	4a29      	ldr	r2, [pc, #164]	@ (8003b28 <HAL_GPIO_Init+0x354>)
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a86:	4b28      	ldr	r3, [pc, #160]	@ (8003b28 <HAL_GPIO_Init+0x354>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	43db      	mvns	r3, r3
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	4013      	ands	r3, r2
 8003a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003aaa:	4a1f      	ldr	r2, [pc, #124]	@ (8003b28 <HAL_GPIO_Init+0x354>)
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8003b28 <HAL_GPIO_Init+0x354>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	4013      	ands	r3, r2
 8003abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ad4:	4a14      	ldr	r2, [pc, #80]	@ (8003b28 <HAL_GPIO_Init+0x354>)
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	3301      	adds	r3, #1
 8003ade:	61fb      	str	r3, [r7, #28]
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	2b0f      	cmp	r3, #15
 8003ae4:	f67f ae86 	bls.w	80037f4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003ae8:	bf00      	nop
 8003aea:	bf00      	nop
 8003aec:	3724      	adds	r7, #36	@ 0x24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	40023800 	.word	0x40023800
 8003afc:	40013800 	.word	0x40013800
 8003b00:	40020000 	.word	0x40020000
 8003b04:	40020400 	.word	0x40020400
 8003b08:	40020800 	.word	0x40020800
 8003b0c:	40020c00 	.word	0x40020c00
 8003b10:	40021000 	.word	0x40021000
 8003b14:	40021400 	.word	0x40021400
 8003b18:	40021800 	.word	0x40021800
 8003b1c:	40021c00 	.word	0x40021c00
 8003b20:	40022000 	.word	0x40022000
 8003b24:	40022400 	.word	0x40022400
 8003b28:	40013c00 	.word	0x40013c00

08003b2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	460b      	mov	r3, r1
 8003b36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691a      	ldr	r2, [r3, #16]
 8003b3c:	887b      	ldrh	r3, [r7, #2]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d002      	beq.n	8003b4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b44:	2301      	movs	r3, #1
 8003b46:	73fb      	strb	r3, [r7, #15]
 8003b48:	e001      	b.n	8003b4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	460b      	mov	r3, r1
 8003b66:	807b      	strh	r3, [r7, #2]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b6c:	787b      	ldrb	r3, [r7, #1]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b72:	887a      	ldrh	r2, [r7, #2]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003b78:	e003      	b.n	8003b82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003b7a:	887b      	ldrh	r3, [r7, #2]
 8003b7c:	041a      	lsls	r2, r3, #16
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	619a      	str	r2, [r3, #24]
}
 8003b82:	bf00      	nop
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
	...

08003b90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e07f      	b.n	8003ca2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d106      	bne.n	8003bbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7fd f9ac 	bl	8000f14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2224      	movs	r2, #36	@ 0x24
 8003bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 0201 	bic.w	r2, r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003be0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bf0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d107      	bne.n	8003c0a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689a      	ldr	r2, [r3, #8]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c06:	609a      	str	r2, [r3, #8]
 8003c08:	e006      	b.n	8003c18 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689a      	ldr	r2, [r3, #8]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003c16:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d104      	bne.n	8003c2a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c28:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6859      	ldr	r1, [r3, #4]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	4b1d      	ldr	r3, [pc, #116]	@ (8003cac <HAL_I2C_Init+0x11c>)
 8003c36:	430b      	orrs	r3, r1
 8003c38:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68da      	ldr	r2, [r3, #12]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691a      	ldr	r2, [r3, #16]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	69d9      	ldr	r1, [r3, #28]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a1a      	ldr	r2, [r3, #32]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f042 0201 	orr.w	r2, r2, #1
 8003c82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	02008000 	.word	0x02008000

08003cb0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b20      	cmp	r3, #32
 8003cc4:	d138      	bne.n	8003d38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d101      	bne.n	8003cd4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	e032      	b.n	8003d3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2224      	movs	r2, #36	@ 0x24
 8003ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 0201 	bic.w	r2, r2, #1
 8003cf2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003d02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6819      	ldr	r1, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f042 0201 	orr.w	r2, r2, #1
 8003d22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2220      	movs	r2, #32
 8003d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d34:	2300      	movs	r3, #0
 8003d36:	e000      	b.n	8003d3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d38:	2302      	movs	r3, #2
  }
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d46:	b480      	push	{r7}
 8003d48:	b085      	sub	sp, #20
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
 8003d4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b20      	cmp	r3, #32
 8003d5a:	d139      	bne.n	8003dd0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d101      	bne.n	8003d6a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d66:	2302      	movs	r3, #2
 8003d68:	e033      	b.n	8003dd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2224      	movs	r2, #36	@ 0x24
 8003d76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f022 0201 	bic.w	r2, r2, #1
 8003d88:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003d98:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	021b      	lsls	r3, r3, #8
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f042 0201 	orr.w	r2, r2, #1
 8003dba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	e000      	b.n	8003dd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003dd0:	2302      	movs	r3, #2
  }
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3714      	adds	r7, #20
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
	...

08003de0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003de6:	2300      	movs	r3, #0
 8003de8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003dea:	4b23      	ldr	r3, [pc, #140]	@ (8003e78 <HAL_PWREx_EnableOverDrive+0x98>)
 8003dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dee:	4a22      	ldr	r2, [pc, #136]	@ (8003e78 <HAL_PWREx_EnableOverDrive+0x98>)
 8003df0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003df4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003df6:	4b20      	ldr	r3, [pc, #128]	@ (8003e78 <HAL_PWREx_EnableOverDrive+0x98>)
 8003df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dfe:	603b      	str	r3, [r7, #0]
 8003e00:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003e02:	4b1e      	ldr	r3, [pc, #120]	@ (8003e7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a1d      	ldr	r2, [pc, #116]	@ (8003e7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e0c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e0e:	f7fd fec3 	bl	8001b98 <HAL_GetTick>
 8003e12:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e14:	e009      	b.n	8003e2a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e16:	f7fd febf 	bl	8001b98 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003e24:	d901      	bls.n	8003e2a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e022      	b.n	8003e70 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e2a:	4b14      	ldr	r3, [pc, #80]	@ (8003e7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e36:	d1ee      	bne.n	8003e16 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003e38:	4b10      	ldr	r3, [pc, #64]	@ (8003e7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a0f      	ldr	r2, [pc, #60]	@ (8003e7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e42:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e44:	f7fd fea8 	bl	8001b98 <HAL_GetTick>
 8003e48:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e4a:	e009      	b.n	8003e60 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e4c:	f7fd fea4 	bl	8001b98 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003e5a:	d901      	bls.n	8003e60 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e007      	b.n	8003e70 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e60:	4b06      	ldr	r3, [pc, #24]	@ (8003e7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e6c:	d1ee      	bne.n	8003e4c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	40007000 	.word	0x40007000

08003e80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e29b      	b.n	80043ce <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 8087 	beq.w	8003fb2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ea4:	4b96      	ldr	r3, [pc, #600]	@ (8004100 <HAL_RCC_OscConfig+0x280>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 030c 	and.w	r3, r3, #12
 8003eac:	2b04      	cmp	r3, #4
 8003eae:	d00c      	beq.n	8003eca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eb0:	4b93      	ldr	r3, [pc, #588]	@ (8004100 <HAL_RCC_OscConfig+0x280>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f003 030c 	and.w	r3, r3, #12
 8003eb8:	2b08      	cmp	r3, #8
 8003eba:	d112      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x62>
 8003ebc:	4b90      	ldr	r3, [pc, #576]	@ (8004100 <HAL_RCC_OscConfig+0x280>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ec4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ec8:	d10b      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eca:	4b8d      	ldr	r3, [pc, #564]	@ (8004100 <HAL_RCC_OscConfig+0x280>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d06c      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x130>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d168      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e275      	b.n	80043ce <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eea:	d106      	bne.n	8003efa <HAL_RCC_OscConfig+0x7a>
 8003eec:	4b84      	ldr	r3, [pc, #528]	@ (8004100 <HAL_RCC_OscConfig+0x280>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a83      	ldr	r2, [pc, #524]	@ (8004100 <HAL_RCC_OscConfig+0x280>)
 8003ef2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ef6:	6013      	str	r3, [r2, #0]
 8003ef8:	e02e      	b.n	8003f58 <HAL_RCC_OscConfig+0xd8>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10c      	bne.n	8003f1c <HAL_RCC_OscConfig+0x9c>
 8003f02:	4b7f      	ldr	r3, [pc, #508]	@ (8004100 <HAL_RCC_OscConfig+0x280>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a7e      	ldr	r2, [pc, #504]	@ (8004100 <HAL_RCC_OscConfig+0x280>)
 8003f08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f0c:	6013      	str	r3, [r2, #0]
 8003f0e:	4b7c      	ldr	r3, [pc, #496]	@ (8004100 <HAL_RCC_OscConfig+0x280>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a7b      	ldr	r2, [pc, #492]	@ (8004100 <HAL_RCC_OscConfig+0x280>)
 8003f14:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f18:	6013      	str	r3, [r2, #0]
 8003f1a:	e01d      	b.n	8003f58 <HAL_RCC_OscConfig+0xd8>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f24:	d10c      	bne.n	8003f40 <HAL_RCC_OscConfig+0xc0>
 8003f26:	4b76      	ldr	r3, [pc, #472]	@ (8004100 <HAL_RCC_OscConfig+0x280>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a75      	ldr	r2, [pc, #468]	@ (8004100 <HAL_RCC_OscConfig+0x280>)
 8003f2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f30:	6013      	str	r3, [r2, #0]
 8003f32:	4b73      	ldr	r3, [pc, #460]	@ (8004100 <HAL_RCC_OscConfig+0x280>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a72      	ldr	r2, [pc, #456]	@ (8004100 <HAL_RCC_OscConfig+0x280>)
 8003f38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f3c:	6013      	str	r3, [r2, #0]
 8003f3e:	e00b      	b.n	8003f58 <HAL_RCC_OscConfig+0xd8>
 8003f40:	4b6f      	ldr	r3, [pc, #444]	@ (8004100 <HAL_RCC_OscConfig+0x280>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a6e      	ldr	r2, [pc, #440]	@ (8004100 <HAL_RCC_OscConfig+0x280>)
 8003f46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f4a:	6013      	str	r3, [r2, #0]
 8003f4c:	4b6c      	ldr	r3, [pc, #432]	@ (8004100 <HAL_RCC_OscConfig+0x280>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a6b      	ldr	r2, [pc, #428]	@ (8004100 <HAL_RCC_OscConfig+0x280>)
 8003f52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d013      	beq.n	8003f88 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f60:	f7fd fe1a 	bl	8001b98 <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f68:	f7fd fe16 	bl	8001b98 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b64      	cmp	r3, #100	@ 0x64
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e229      	b.n	80043ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f7a:	4b61      	ldr	r3, [pc, #388]	@ (8004100 <HAL_RCC_OscConfig+0x280>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0f0      	beq.n	8003f68 <HAL_RCC_OscConfig+0xe8>
 8003f86:	e014      	b.n	8003fb2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f88:	f7fd fe06 	bl	8001b98 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f90:	f7fd fe02 	bl	8001b98 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b64      	cmp	r3, #100	@ 0x64
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e215      	b.n	80043ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fa2:	4b57      	ldr	r3, [pc, #348]	@ (8004100 <HAL_RCC_OscConfig+0x280>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1f0      	bne.n	8003f90 <HAL_RCC_OscConfig+0x110>
 8003fae:	e000      	b.n	8003fb2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d069      	beq.n	8004092 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fbe:	4b50      	ldr	r3, [pc, #320]	@ (8004100 <HAL_RCC_OscConfig+0x280>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f003 030c 	and.w	r3, r3, #12
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00b      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fca:	4b4d      	ldr	r3, [pc, #308]	@ (8004100 <HAL_RCC_OscConfig+0x280>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f003 030c 	and.w	r3, r3, #12
 8003fd2:	2b08      	cmp	r3, #8
 8003fd4:	d11c      	bne.n	8004010 <HAL_RCC_OscConfig+0x190>
 8003fd6:	4b4a      	ldr	r3, [pc, #296]	@ (8004100 <HAL_RCC_OscConfig+0x280>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d116      	bne.n	8004010 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fe2:	4b47      	ldr	r3, [pc, #284]	@ (8004100 <HAL_RCC_OscConfig+0x280>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d005      	beq.n	8003ffa <HAL_RCC_OscConfig+0x17a>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d001      	beq.n	8003ffa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e1e9      	b.n	80043ce <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ffa:	4b41      	ldr	r3, [pc, #260]	@ (8004100 <HAL_RCC_OscConfig+0x280>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	493d      	ldr	r1, [pc, #244]	@ (8004100 <HAL_RCC_OscConfig+0x280>)
 800400a:	4313      	orrs	r3, r2
 800400c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800400e:	e040      	b.n	8004092 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d023      	beq.n	8004060 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004018:	4b39      	ldr	r3, [pc, #228]	@ (8004100 <HAL_RCC_OscConfig+0x280>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a38      	ldr	r2, [pc, #224]	@ (8004100 <HAL_RCC_OscConfig+0x280>)
 800401e:	f043 0301 	orr.w	r3, r3, #1
 8004022:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004024:	f7fd fdb8 	bl	8001b98 <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800402c:	f7fd fdb4 	bl	8001b98 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e1c7      	b.n	80043ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800403e:	4b30      	ldr	r3, [pc, #192]	@ (8004100 <HAL_RCC_OscConfig+0x280>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0f0      	beq.n	800402c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800404a:	4b2d      	ldr	r3, [pc, #180]	@ (8004100 <HAL_RCC_OscConfig+0x280>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	4929      	ldr	r1, [pc, #164]	@ (8004100 <HAL_RCC_OscConfig+0x280>)
 800405a:	4313      	orrs	r3, r2
 800405c:	600b      	str	r3, [r1, #0]
 800405e:	e018      	b.n	8004092 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004060:	4b27      	ldr	r3, [pc, #156]	@ (8004100 <HAL_RCC_OscConfig+0x280>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a26      	ldr	r2, [pc, #152]	@ (8004100 <HAL_RCC_OscConfig+0x280>)
 8004066:	f023 0301 	bic.w	r3, r3, #1
 800406a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406c:	f7fd fd94 	bl	8001b98 <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004074:	f7fd fd90 	bl	8001b98 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e1a3      	b.n	80043ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004086:	4b1e      	ldr	r3, [pc, #120]	@ (8004100 <HAL_RCC_OscConfig+0x280>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1f0      	bne.n	8004074 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0308 	and.w	r3, r3, #8
 800409a:	2b00      	cmp	r3, #0
 800409c:	d038      	beq.n	8004110 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d019      	beq.n	80040da <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040a6:	4b16      	ldr	r3, [pc, #88]	@ (8004100 <HAL_RCC_OscConfig+0x280>)
 80040a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040aa:	4a15      	ldr	r2, [pc, #84]	@ (8004100 <HAL_RCC_OscConfig+0x280>)
 80040ac:	f043 0301 	orr.w	r3, r3, #1
 80040b0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b2:	f7fd fd71 	bl	8001b98 <HAL_GetTick>
 80040b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040b8:	e008      	b.n	80040cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040ba:	f7fd fd6d 	bl	8001b98 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d901      	bls.n	80040cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e180      	b.n	80043ce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004100 <HAL_RCC_OscConfig+0x280>)
 80040ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d0f0      	beq.n	80040ba <HAL_RCC_OscConfig+0x23a>
 80040d8:	e01a      	b.n	8004110 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040da:	4b09      	ldr	r3, [pc, #36]	@ (8004100 <HAL_RCC_OscConfig+0x280>)
 80040dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040de:	4a08      	ldr	r2, [pc, #32]	@ (8004100 <HAL_RCC_OscConfig+0x280>)
 80040e0:	f023 0301 	bic.w	r3, r3, #1
 80040e4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e6:	f7fd fd57 	bl	8001b98 <HAL_GetTick>
 80040ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040ec:	e00a      	b.n	8004104 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040ee:	f7fd fd53 	bl	8001b98 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d903      	bls.n	8004104 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e166      	b.n	80043ce <HAL_RCC_OscConfig+0x54e>
 8004100:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004104:	4b92      	ldr	r3, [pc, #584]	@ (8004350 <HAL_RCC_OscConfig+0x4d0>)
 8004106:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1ee      	bne.n	80040ee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 80a4 	beq.w	8004266 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800411e:	4b8c      	ldr	r3, [pc, #560]	@ (8004350 <HAL_RCC_OscConfig+0x4d0>)
 8004120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10d      	bne.n	8004146 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800412a:	4b89      	ldr	r3, [pc, #548]	@ (8004350 <HAL_RCC_OscConfig+0x4d0>)
 800412c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412e:	4a88      	ldr	r2, [pc, #544]	@ (8004350 <HAL_RCC_OscConfig+0x4d0>)
 8004130:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004134:	6413      	str	r3, [r2, #64]	@ 0x40
 8004136:	4b86      	ldr	r3, [pc, #536]	@ (8004350 <HAL_RCC_OscConfig+0x4d0>)
 8004138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800413e:	60bb      	str	r3, [r7, #8]
 8004140:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004142:	2301      	movs	r3, #1
 8004144:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004146:	4b83      	ldr	r3, [pc, #524]	@ (8004354 <HAL_RCC_OscConfig+0x4d4>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800414e:	2b00      	cmp	r3, #0
 8004150:	d118      	bne.n	8004184 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004152:	4b80      	ldr	r3, [pc, #512]	@ (8004354 <HAL_RCC_OscConfig+0x4d4>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a7f      	ldr	r2, [pc, #508]	@ (8004354 <HAL_RCC_OscConfig+0x4d4>)
 8004158:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800415c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800415e:	f7fd fd1b 	bl	8001b98 <HAL_GetTick>
 8004162:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004164:	e008      	b.n	8004178 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004166:	f7fd fd17 	bl	8001b98 <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	2b64      	cmp	r3, #100	@ 0x64
 8004172:	d901      	bls.n	8004178 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e12a      	b.n	80043ce <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004178:	4b76      	ldr	r3, [pc, #472]	@ (8004354 <HAL_RCC_OscConfig+0x4d4>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004180:	2b00      	cmp	r3, #0
 8004182:	d0f0      	beq.n	8004166 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d106      	bne.n	800419a <HAL_RCC_OscConfig+0x31a>
 800418c:	4b70      	ldr	r3, [pc, #448]	@ (8004350 <HAL_RCC_OscConfig+0x4d0>)
 800418e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004190:	4a6f      	ldr	r2, [pc, #444]	@ (8004350 <HAL_RCC_OscConfig+0x4d0>)
 8004192:	f043 0301 	orr.w	r3, r3, #1
 8004196:	6713      	str	r3, [r2, #112]	@ 0x70
 8004198:	e02d      	b.n	80041f6 <HAL_RCC_OscConfig+0x376>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10c      	bne.n	80041bc <HAL_RCC_OscConfig+0x33c>
 80041a2:	4b6b      	ldr	r3, [pc, #428]	@ (8004350 <HAL_RCC_OscConfig+0x4d0>)
 80041a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041a6:	4a6a      	ldr	r2, [pc, #424]	@ (8004350 <HAL_RCC_OscConfig+0x4d0>)
 80041a8:	f023 0301 	bic.w	r3, r3, #1
 80041ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80041ae:	4b68      	ldr	r3, [pc, #416]	@ (8004350 <HAL_RCC_OscConfig+0x4d0>)
 80041b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041b2:	4a67      	ldr	r2, [pc, #412]	@ (8004350 <HAL_RCC_OscConfig+0x4d0>)
 80041b4:	f023 0304 	bic.w	r3, r3, #4
 80041b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80041ba:	e01c      	b.n	80041f6 <HAL_RCC_OscConfig+0x376>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	2b05      	cmp	r3, #5
 80041c2:	d10c      	bne.n	80041de <HAL_RCC_OscConfig+0x35e>
 80041c4:	4b62      	ldr	r3, [pc, #392]	@ (8004350 <HAL_RCC_OscConfig+0x4d0>)
 80041c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041c8:	4a61      	ldr	r2, [pc, #388]	@ (8004350 <HAL_RCC_OscConfig+0x4d0>)
 80041ca:	f043 0304 	orr.w	r3, r3, #4
 80041ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80041d0:	4b5f      	ldr	r3, [pc, #380]	@ (8004350 <HAL_RCC_OscConfig+0x4d0>)
 80041d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041d4:	4a5e      	ldr	r2, [pc, #376]	@ (8004350 <HAL_RCC_OscConfig+0x4d0>)
 80041d6:	f043 0301 	orr.w	r3, r3, #1
 80041da:	6713      	str	r3, [r2, #112]	@ 0x70
 80041dc:	e00b      	b.n	80041f6 <HAL_RCC_OscConfig+0x376>
 80041de:	4b5c      	ldr	r3, [pc, #368]	@ (8004350 <HAL_RCC_OscConfig+0x4d0>)
 80041e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041e2:	4a5b      	ldr	r2, [pc, #364]	@ (8004350 <HAL_RCC_OscConfig+0x4d0>)
 80041e4:	f023 0301 	bic.w	r3, r3, #1
 80041e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80041ea:	4b59      	ldr	r3, [pc, #356]	@ (8004350 <HAL_RCC_OscConfig+0x4d0>)
 80041ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ee:	4a58      	ldr	r2, [pc, #352]	@ (8004350 <HAL_RCC_OscConfig+0x4d0>)
 80041f0:	f023 0304 	bic.w	r3, r3, #4
 80041f4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d015      	beq.n	800422a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041fe:	f7fd fccb 	bl	8001b98 <HAL_GetTick>
 8004202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004204:	e00a      	b.n	800421c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004206:	f7fd fcc7 	bl	8001b98 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004214:	4293      	cmp	r3, r2
 8004216:	d901      	bls.n	800421c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e0d8      	b.n	80043ce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800421c:	4b4c      	ldr	r3, [pc, #304]	@ (8004350 <HAL_RCC_OscConfig+0x4d0>)
 800421e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d0ee      	beq.n	8004206 <HAL_RCC_OscConfig+0x386>
 8004228:	e014      	b.n	8004254 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800422a:	f7fd fcb5 	bl	8001b98 <HAL_GetTick>
 800422e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004230:	e00a      	b.n	8004248 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004232:	f7fd fcb1 	bl	8001b98 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004240:	4293      	cmp	r3, r2
 8004242:	d901      	bls.n	8004248 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e0c2      	b.n	80043ce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004248:	4b41      	ldr	r3, [pc, #260]	@ (8004350 <HAL_RCC_OscConfig+0x4d0>)
 800424a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1ee      	bne.n	8004232 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004254:	7dfb      	ldrb	r3, [r7, #23]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d105      	bne.n	8004266 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800425a:	4b3d      	ldr	r3, [pc, #244]	@ (8004350 <HAL_RCC_OscConfig+0x4d0>)
 800425c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425e:	4a3c      	ldr	r2, [pc, #240]	@ (8004350 <HAL_RCC_OscConfig+0x4d0>)
 8004260:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004264:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 80ae 	beq.w	80043cc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004270:	4b37      	ldr	r3, [pc, #220]	@ (8004350 <HAL_RCC_OscConfig+0x4d0>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f003 030c 	and.w	r3, r3, #12
 8004278:	2b08      	cmp	r3, #8
 800427a:	d06d      	beq.n	8004358 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	2b02      	cmp	r3, #2
 8004282:	d14b      	bne.n	800431c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004284:	4b32      	ldr	r3, [pc, #200]	@ (8004350 <HAL_RCC_OscConfig+0x4d0>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a31      	ldr	r2, [pc, #196]	@ (8004350 <HAL_RCC_OscConfig+0x4d0>)
 800428a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800428e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004290:	f7fd fc82 	bl	8001b98 <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004298:	f7fd fc7e 	bl	8001b98 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e091      	b.n	80043ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042aa:	4b29      	ldr	r3, [pc, #164]	@ (8004350 <HAL_RCC_OscConfig+0x4d0>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1f0      	bne.n	8004298 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	69da      	ldr	r2, [r3, #28]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	431a      	orrs	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c4:	019b      	lsls	r3, r3, #6
 80042c6:	431a      	orrs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042cc:	085b      	lsrs	r3, r3, #1
 80042ce:	3b01      	subs	r3, #1
 80042d0:	041b      	lsls	r3, r3, #16
 80042d2:	431a      	orrs	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d8:	061b      	lsls	r3, r3, #24
 80042da:	431a      	orrs	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e0:	071b      	lsls	r3, r3, #28
 80042e2:	491b      	ldr	r1, [pc, #108]	@ (8004350 <HAL_RCC_OscConfig+0x4d0>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042e8:	4b19      	ldr	r3, [pc, #100]	@ (8004350 <HAL_RCC_OscConfig+0x4d0>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a18      	ldr	r2, [pc, #96]	@ (8004350 <HAL_RCC_OscConfig+0x4d0>)
 80042ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f4:	f7fd fc50 	bl	8001b98 <HAL_GetTick>
 80042f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042fa:	e008      	b.n	800430e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042fc:	f7fd fc4c 	bl	8001b98 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b02      	cmp	r3, #2
 8004308:	d901      	bls.n	800430e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e05f      	b.n	80043ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800430e:	4b10      	ldr	r3, [pc, #64]	@ (8004350 <HAL_RCC_OscConfig+0x4d0>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d0f0      	beq.n	80042fc <HAL_RCC_OscConfig+0x47c>
 800431a:	e057      	b.n	80043cc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800431c:	4b0c      	ldr	r3, [pc, #48]	@ (8004350 <HAL_RCC_OscConfig+0x4d0>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a0b      	ldr	r2, [pc, #44]	@ (8004350 <HAL_RCC_OscConfig+0x4d0>)
 8004322:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004326:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004328:	f7fd fc36 	bl	8001b98 <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004330:	f7fd fc32 	bl	8001b98 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e045      	b.n	80043ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004342:	4b03      	ldr	r3, [pc, #12]	@ (8004350 <HAL_RCC_OscConfig+0x4d0>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1f0      	bne.n	8004330 <HAL_RCC_OscConfig+0x4b0>
 800434e:	e03d      	b.n	80043cc <HAL_RCC_OscConfig+0x54c>
 8004350:	40023800 	.word	0x40023800
 8004354:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004358:	4b1f      	ldr	r3, [pc, #124]	@ (80043d8 <HAL_RCC_OscConfig+0x558>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d030      	beq.n	80043c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004370:	429a      	cmp	r2, r3
 8004372:	d129      	bne.n	80043c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800437e:	429a      	cmp	r2, r3
 8004380:	d122      	bne.n	80043c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004388:	4013      	ands	r3, r2
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800438e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004390:	4293      	cmp	r3, r2
 8004392:	d119      	bne.n	80043c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439e:	085b      	lsrs	r3, r3, #1
 80043a0:	3b01      	subs	r3, #1
 80043a2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d10f      	bne.n	80043c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d107      	bne.n	80043c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d001      	beq.n	80043cc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e000      	b.n	80043ce <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3718      	adds	r7, #24
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	40023800 	.word	0x40023800

080043dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80043e6:	2300      	movs	r3, #0
 80043e8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d101      	bne.n	80043f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e0d0      	b.n	8004596 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043f4:	4b6a      	ldr	r3, [pc, #424]	@ (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 030f 	and.w	r3, r3, #15
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d910      	bls.n	8004424 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004402:	4b67      	ldr	r3, [pc, #412]	@ (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f023 020f 	bic.w	r2, r3, #15
 800440a:	4965      	ldr	r1, [pc, #404]	@ (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	4313      	orrs	r3, r2
 8004410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004412:	4b63      	ldr	r3, [pc, #396]	@ (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 030f 	and.w	r3, r3, #15
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	429a      	cmp	r2, r3
 800441e:	d001      	beq.n	8004424 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e0b8      	b.n	8004596 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d020      	beq.n	8004472 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0304 	and.w	r3, r3, #4
 8004438:	2b00      	cmp	r3, #0
 800443a:	d005      	beq.n	8004448 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800443c:	4b59      	ldr	r3, [pc, #356]	@ (80045a4 <HAL_RCC_ClockConfig+0x1c8>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	4a58      	ldr	r2, [pc, #352]	@ (80045a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004442:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004446:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0308 	and.w	r3, r3, #8
 8004450:	2b00      	cmp	r3, #0
 8004452:	d005      	beq.n	8004460 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004454:	4b53      	ldr	r3, [pc, #332]	@ (80045a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	4a52      	ldr	r2, [pc, #328]	@ (80045a4 <HAL_RCC_ClockConfig+0x1c8>)
 800445a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800445e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004460:	4b50      	ldr	r3, [pc, #320]	@ (80045a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	494d      	ldr	r1, [pc, #308]	@ (80045a4 <HAL_RCC_ClockConfig+0x1c8>)
 800446e:	4313      	orrs	r3, r2
 8004470:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	d040      	beq.n	8004500 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d107      	bne.n	8004496 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004486:	4b47      	ldr	r3, [pc, #284]	@ (80045a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d115      	bne.n	80044be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e07f      	b.n	8004596 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	2b02      	cmp	r3, #2
 800449c:	d107      	bne.n	80044ae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800449e:	4b41      	ldr	r3, [pc, #260]	@ (80045a4 <HAL_RCC_ClockConfig+0x1c8>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d109      	bne.n	80044be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e073      	b.n	8004596 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ae:	4b3d      	ldr	r3, [pc, #244]	@ (80045a4 <HAL_RCC_ClockConfig+0x1c8>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e06b      	b.n	8004596 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044be:	4b39      	ldr	r3, [pc, #228]	@ (80045a4 <HAL_RCC_ClockConfig+0x1c8>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f023 0203 	bic.w	r2, r3, #3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	4936      	ldr	r1, [pc, #216]	@ (80045a4 <HAL_RCC_ClockConfig+0x1c8>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044d0:	f7fd fb62 	bl	8001b98 <HAL_GetTick>
 80044d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044d6:	e00a      	b.n	80044ee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044d8:	f7fd fb5e 	bl	8001b98 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e053      	b.n	8004596 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ee:	4b2d      	ldr	r3, [pc, #180]	@ (80045a4 <HAL_RCC_ClockConfig+0x1c8>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f003 020c 	and.w	r2, r3, #12
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d1eb      	bne.n	80044d8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004500:	4b27      	ldr	r3, [pc, #156]	@ (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 030f 	and.w	r3, r3, #15
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	429a      	cmp	r2, r3
 800450c:	d210      	bcs.n	8004530 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800450e:	4b24      	ldr	r3, [pc, #144]	@ (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f023 020f 	bic.w	r2, r3, #15
 8004516:	4922      	ldr	r1, [pc, #136]	@ (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	4313      	orrs	r3, r2
 800451c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800451e:	4b20      	ldr	r3, [pc, #128]	@ (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 030f 	and.w	r3, r3, #15
 8004526:	683a      	ldr	r2, [r7, #0]
 8004528:	429a      	cmp	r2, r3
 800452a:	d001      	beq.n	8004530 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e032      	b.n	8004596 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0304 	and.w	r3, r3, #4
 8004538:	2b00      	cmp	r3, #0
 800453a:	d008      	beq.n	800454e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800453c:	4b19      	ldr	r3, [pc, #100]	@ (80045a4 <HAL_RCC_ClockConfig+0x1c8>)
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	4916      	ldr	r1, [pc, #88]	@ (80045a4 <HAL_RCC_ClockConfig+0x1c8>)
 800454a:	4313      	orrs	r3, r2
 800454c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0308 	and.w	r3, r3, #8
 8004556:	2b00      	cmp	r3, #0
 8004558:	d009      	beq.n	800456e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800455a:	4b12      	ldr	r3, [pc, #72]	@ (80045a4 <HAL_RCC_ClockConfig+0x1c8>)
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	00db      	lsls	r3, r3, #3
 8004568:	490e      	ldr	r1, [pc, #56]	@ (80045a4 <HAL_RCC_ClockConfig+0x1c8>)
 800456a:	4313      	orrs	r3, r2
 800456c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800456e:	f000 f821 	bl	80045b4 <HAL_RCC_GetSysClockFreq>
 8004572:	4602      	mov	r2, r0
 8004574:	4b0b      	ldr	r3, [pc, #44]	@ (80045a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	091b      	lsrs	r3, r3, #4
 800457a:	f003 030f 	and.w	r3, r3, #15
 800457e:	490a      	ldr	r1, [pc, #40]	@ (80045a8 <HAL_RCC_ClockConfig+0x1cc>)
 8004580:	5ccb      	ldrb	r3, [r1, r3]
 8004582:	fa22 f303 	lsr.w	r3, r2, r3
 8004586:	4a09      	ldr	r2, [pc, #36]	@ (80045ac <HAL_RCC_ClockConfig+0x1d0>)
 8004588:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800458a:	4b09      	ldr	r3, [pc, #36]	@ (80045b0 <HAL_RCC_ClockConfig+0x1d4>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4618      	mov	r0, r3
 8004590:	f7fd fabe 	bl	8001b10 <HAL_InitTick>

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	40023c00 	.word	0x40023c00
 80045a4:	40023800 	.word	0x40023800
 80045a8:	08006548 	.word	0x08006548
 80045ac:	20000000 	.word	0x20000000
 80045b0:	20000004 	.word	0x20000004

080045b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045b8:	b090      	sub	sp, #64	@ 0x40
 80045ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80045bc:	2300      	movs	r3, #0
 80045be:	637b      	str	r3, [r7, #52]	@ 0x34
 80045c0:	2300      	movs	r3, #0
 80045c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045c4:	2300      	movs	r3, #0
 80045c6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80045c8:	2300      	movs	r3, #0
 80045ca:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045cc:	4b59      	ldr	r3, [pc, #356]	@ (8004734 <HAL_RCC_GetSysClockFreq+0x180>)
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f003 030c 	and.w	r3, r3, #12
 80045d4:	2b08      	cmp	r3, #8
 80045d6:	d00d      	beq.n	80045f4 <HAL_RCC_GetSysClockFreq+0x40>
 80045d8:	2b08      	cmp	r3, #8
 80045da:	f200 80a1 	bhi.w	8004720 <HAL_RCC_GetSysClockFreq+0x16c>
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d002      	beq.n	80045e8 <HAL_RCC_GetSysClockFreq+0x34>
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	d003      	beq.n	80045ee <HAL_RCC_GetSysClockFreq+0x3a>
 80045e6:	e09b      	b.n	8004720 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045e8:	4b53      	ldr	r3, [pc, #332]	@ (8004738 <HAL_RCC_GetSysClockFreq+0x184>)
 80045ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80045ec:	e09b      	b.n	8004726 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045ee:	4b53      	ldr	r3, [pc, #332]	@ (800473c <HAL_RCC_GetSysClockFreq+0x188>)
 80045f0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80045f2:	e098      	b.n	8004726 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045f4:	4b4f      	ldr	r3, [pc, #316]	@ (8004734 <HAL_RCC_GetSysClockFreq+0x180>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045fc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80045fe:	4b4d      	ldr	r3, [pc, #308]	@ (8004734 <HAL_RCC_GetSysClockFreq+0x180>)
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d028      	beq.n	800465c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800460a:	4b4a      	ldr	r3, [pc, #296]	@ (8004734 <HAL_RCC_GetSysClockFreq+0x180>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	099b      	lsrs	r3, r3, #6
 8004610:	2200      	movs	r2, #0
 8004612:	623b      	str	r3, [r7, #32]
 8004614:	627a      	str	r2, [r7, #36]	@ 0x24
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800461c:	2100      	movs	r1, #0
 800461e:	4b47      	ldr	r3, [pc, #284]	@ (800473c <HAL_RCC_GetSysClockFreq+0x188>)
 8004620:	fb03 f201 	mul.w	r2, r3, r1
 8004624:	2300      	movs	r3, #0
 8004626:	fb00 f303 	mul.w	r3, r0, r3
 800462a:	4413      	add	r3, r2
 800462c:	4a43      	ldr	r2, [pc, #268]	@ (800473c <HAL_RCC_GetSysClockFreq+0x188>)
 800462e:	fba0 1202 	umull	r1, r2, r0, r2
 8004632:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004634:	460a      	mov	r2, r1
 8004636:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004638:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800463a:	4413      	add	r3, r2
 800463c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800463e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004640:	2200      	movs	r2, #0
 8004642:	61bb      	str	r3, [r7, #24]
 8004644:	61fa      	str	r2, [r7, #28]
 8004646:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800464a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800464e:	f7fb fdf3 	bl	8000238 <__aeabi_uldivmod>
 8004652:	4602      	mov	r2, r0
 8004654:	460b      	mov	r3, r1
 8004656:	4613      	mov	r3, r2
 8004658:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800465a:	e053      	b.n	8004704 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800465c:	4b35      	ldr	r3, [pc, #212]	@ (8004734 <HAL_RCC_GetSysClockFreq+0x180>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	099b      	lsrs	r3, r3, #6
 8004662:	2200      	movs	r2, #0
 8004664:	613b      	str	r3, [r7, #16]
 8004666:	617a      	str	r2, [r7, #20]
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800466e:	f04f 0b00 	mov.w	fp, #0
 8004672:	4652      	mov	r2, sl
 8004674:	465b      	mov	r3, fp
 8004676:	f04f 0000 	mov.w	r0, #0
 800467a:	f04f 0100 	mov.w	r1, #0
 800467e:	0159      	lsls	r1, r3, #5
 8004680:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004684:	0150      	lsls	r0, r2, #5
 8004686:	4602      	mov	r2, r0
 8004688:	460b      	mov	r3, r1
 800468a:	ebb2 080a 	subs.w	r8, r2, sl
 800468e:	eb63 090b 	sbc.w	r9, r3, fp
 8004692:	f04f 0200 	mov.w	r2, #0
 8004696:	f04f 0300 	mov.w	r3, #0
 800469a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800469e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80046a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80046a6:	ebb2 0408 	subs.w	r4, r2, r8
 80046aa:	eb63 0509 	sbc.w	r5, r3, r9
 80046ae:	f04f 0200 	mov.w	r2, #0
 80046b2:	f04f 0300 	mov.w	r3, #0
 80046b6:	00eb      	lsls	r3, r5, #3
 80046b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046bc:	00e2      	lsls	r2, r4, #3
 80046be:	4614      	mov	r4, r2
 80046c0:	461d      	mov	r5, r3
 80046c2:	eb14 030a 	adds.w	r3, r4, sl
 80046c6:	603b      	str	r3, [r7, #0]
 80046c8:	eb45 030b 	adc.w	r3, r5, fp
 80046cc:	607b      	str	r3, [r7, #4]
 80046ce:	f04f 0200 	mov.w	r2, #0
 80046d2:	f04f 0300 	mov.w	r3, #0
 80046d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046da:	4629      	mov	r1, r5
 80046dc:	028b      	lsls	r3, r1, #10
 80046de:	4621      	mov	r1, r4
 80046e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046e4:	4621      	mov	r1, r4
 80046e6:	028a      	lsls	r2, r1, #10
 80046e8:	4610      	mov	r0, r2
 80046ea:	4619      	mov	r1, r3
 80046ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046ee:	2200      	movs	r2, #0
 80046f0:	60bb      	str	r3, [r7, #8]
 80046f2:	60fa      	str	r2, [r7, #12]
 80046f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046f8:	f7fb fd9e 	bl	8000238 <__aeabi_uldivmod>
 80046fc:	4602      	mov	r2, r0
 80046fe:	460b      	mov	r3, r1
 8004700:	4613      	mov	r3, r2
 8004702:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004704:	4b0b      	ldr	r3, [pc, #44]	@ (8004734 <HAL_RCC_GetSysClockFreq+0x180>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	0c1b      	lsrs	r3, r3, #16
 800470a:	f003 0303 	and.w	r3, r3, #3
 800470e:	3301      	adds	r3, #1
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004714:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004718:	fbb2 f3f3 	udiv	r3, r2, r3
 800471c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800471e:	e002      	b.n	8004726 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004720:	4b05      	ldr	r3, [pc, #20]	@ (8004738 <HAL_RCC_GetSysClockFreq+0x184>)
 8004722:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004724:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004728:	4618      	mov	r0, r3
 800472a:	3740      	adds	r7, #64	@ 0x40
 800472c:	46bd      	mov	sp, r7
 800472e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004732:	bf00      	nop
 8004734:	40023800 	.word	0x40023800
 8004738:	00f42400 	.word	0x00f42400
 800473c:	01312d00 	.word	0x01312d00

08004740 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b088      	sub	sp, #32
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004748:	2300      	movs	r3, #0
 800474a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800474c:	2300      	movs	r3, #0
 800474e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004750:	2300      	movs	r3, #0
 8004752:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004754:	2300      	movs	r3, #0
 8004756:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004758:	2300      	movs	r3, #0
 800475a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b00      	cmp	r3, #0
 8004766:	d012      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004768:	4b69      	ldr	r3, [pc, #420]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	4a68      	ldr	r2, [pc, #416]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800476e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004772:	6093      	str	r3, [r2, #8]
 8004774:	4b66      	ldr	r3, [pc, #408]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004776:	689a      	ldr	r2, [r3, #8]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800477c:	4964      	ldr	r1, [pc, #400]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800477e:	4313      	orrs	r3, r2
 8004780:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800478a:	2301      	movs	r3, #1
 800478c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d017      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800479a:	4b5d      	ldr	r3, [pc, #372]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800479c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047a0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047a8:	4959      	ldr	r1, [pc, #356]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047b8:	d101      	bne.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80047ba:	2301      	movs	r3, #1
 80047bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80047c6:	2301      	movs	r3, #1
 80047c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d017      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80047d6:	4b4e      	ldr	r3, [pc, #312]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047dc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e4:	494a      	ldr	r1, [pc, #296]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047f4:	d101      	bne.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80047f6:	2301      	movs	r3, #1
 80047f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004802:	2301      	movs	r3, #1
 8004804:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004812:	2301      	movs	r3, #1
 8004814:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0320 	and.w	r3, r3, #32
 800481e:	2b00      	cmp	r3, #0
 8004820:	f000 808b 	beq.w	800493a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004824:	4b3a      	ldr	r3, [pc, #232]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004828:	4a39      	ldr	r2, [pc, #228]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800482a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800482e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004830:	4b37      	ldr	r3, [pc, #220]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004834:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004838:	60bb      	str	r3, [r7, #8]
 800483a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800483c:	4b35      	ldr	r3, [pc, #212]	@ (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a34      	ldr	r2, [pc, #208]	@ (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004842:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004846:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004848:	f7fd f9a6 	bl	8001b98 <HAL_GetTick>
 800484c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800484e:	e008      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004850:	f7fd f9a2 	bl	8001b98 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b64      	cmp	r3, #100	@ 0x64
 800485c:	d901      	bls.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e38f      	b.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004862:	4b2c      	ldr	r3, [pc, #176]	@ (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800486a:	2b00      	cmp	r3, #0
 800486c:	d0f0      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800486e:	4b28      	ldr	r3, [pc, #160]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004872:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004876:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d035      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004882:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	429a      	cmp	r2, r3
 800488a:	d02e      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800488c:	4b20      	ldr	r3, [pc, #128]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800488e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004890:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004894:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004896:	4b1e      	ldr	r3, [pc, #120]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800489a:	4a1d      	ldr	r2, [pc, #116]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800489c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048a0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048a2:	4b1b      	ldr	r3, [pc, #108]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048a6:	4a1a      	ldr	r2, [pc, #104]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048ac:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80048ae:	4a18      	ldr	r2, [pc, #96]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80048b4:	4b16      	ldr	r3, [pc, #88]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d114      	bne.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c0:	f7fd f96a 	bl	8001b98 <HAL_GetTick>
 80048c4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048c6:	e00a      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048c8:	f7fd f966 	bl	8001b98 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d901      	bls.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e351      	b.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048de:	4b0c      	ldr	r3, [pc, #48]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d0ee      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048f6:	d111      	bne.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80048f8:	4b05      	ldr	r3, [pc, #20]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004904:	4b04      	ldr	r3, [pc, #16]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004906:	400b      	ands	r3, r1
 8004908:	4901      	ldr	r1, [pc, #4]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800490a:	4313      	orrs	r3, r2
 800490c:	608b      	str	r3, [r1, #8]
 800490e:	e00b      	b.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004910:	40023800 	.word	0x40023800
 8004914:	40007000 	.word	0x40007000
 8004918:	0ffffcff 	.word	0x0ffffcff
 800491c:	4bac      	ldr	r3, [pc, #688]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	4aab      	ldr	r2, [pc, #684]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004922:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004926:	6093      	str	r3, [r2, #8]
 8004928:	4ba9      	ldr	r3, [pc, #676]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800492a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004934:	49a6      	ldr	r1, [pc, #664]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004936:	4313      	orrs	r3, r2
 8004938:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0310 	and.w	r3, r3, #16
 8004942:	2b00      	cmp	r3, #0
 8004944:	d010      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004946:	4ba2      	ldr	r3, [pc, #648]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004948:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800494c:	4aa0      	ldr	r2, [pc, #640]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800494e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004952:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004956:	4b9e      	ldr	r3, [pc, #632]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004958:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004960:	499b      	ldr	r1, [pc, #620]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004962:	4313      	orrs	r3, r2
 8004964:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00a      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004974:	4b96      	ldr	r3, [pc, #600]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800497a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004982:	4993      	ldr	r1, [pc, #588]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004984:	4313      	orrs	r3, r2
 8004986:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00a      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004996:	4b8e      	ldr	r3, [pc, #568]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004998:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800499c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049a4:	498a      	ldr	r1, [pc, #552]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00a      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049b8:	4b85      	ldr	r3, [pc, #532]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049c6:	4982      	ldr	r1, [pc, #520]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00a      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80049da:	4b7d      	ldr	r3, [pc, #500]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049e0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049e8:	4979      	ldr	r1, [pc, #484]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00a      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049fc:	4b74      	ldr	r3, [pc, #464]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a02:	f023 0203 	bic.w	r2, r3, #3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a0a:	4971      	ldr	r1, [pc, #452]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00a      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a1e:	4b6c      	ldr	r3, [pc, #432]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a24:	f023 020c 	bic.w	r2, r3, #12
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a2c:	4968      	ldr	r1, [pc, #416]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00a      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a40:	4b63      	ldr	r3, [pc, #396]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a46:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a4e:	4960      	ldr	r1, [pc, #384]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00a      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a62:	4b5b      	ldr	r3, [pc, #364]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a68:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a70:	4957      	ldr	r1, [pc, #348]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00a      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a84:	4b52      	ldr	r3, [pc, #328]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a8a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a92:	494f      	ldr	r1, [pc, #316]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00a      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004aa6:	4b4a      	ldr	r3, [pc, #296]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aac:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ab4:	4946      	ldr	r1, [pc, #280]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00a      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004ac8:	4b41      	ldr	r3, [pc, #260]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ace:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ad6:	493e      	ldr	r1, [pc, #248]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00a      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004aea:	4b39      	ldr	r3, [pc, #228]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004af0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004af8:	4935      	ldr	r1, [pc, #212]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00a      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b0c:	4b30      	ldr	r3, [pc, #192]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b12:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b1a:	492d      	ldr	r1, [pc, #180]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d011      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004b2e:	4b28      	ldr	r3, [pc, #160]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b34:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b3c:	4924      	ldr	r1, [pc, #144]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b4c:	d101      	bne.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0308 	and.w	r3, r3, #8
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00a      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b6e:	4b18      	ldr	r3, [pc, #96]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b74:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b7c:	4914      	ldr	r1, [pc, #80]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00b      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b90:	4b0f      	ldr	r3, [pc, #60]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b96:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ba0:	490b      	ldr	r1, [pc, #44]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00f      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004bb4:	4b06      	ldr	r3, [pc, #24]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bba:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bc4:	4902      	ldr	r1, [pc, #8]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004bcc:	e002      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004bce:	bf00      	nop
 8004bd0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00b      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004be0:	4b8a      	ldr	r3, [pc, #552]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004be2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004be6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bf0:	4986      	ldr	r1, [pc, #536]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00b      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004c04:	4b81      	ldr	r3, [pc, #516]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c0a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c14:	497d      	ldr	r1, [pc, #500]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d006      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f000 80d6 	beq.w	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c30:	4b76      	ldr	r3, [pc, #472]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a75      	ldr	r2, [pc, #468]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c36:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c3c:	f7fc ffac 	bl	8001b98 <HAL_GetTick>
 8004c40:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c42:	e008      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c44:	f7fc ffa8 	bl	8001b98 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b64      	cmp	r3, #100	@ 0x64
 8004c50:	d901      	bls.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e195      	b.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c56:	4b6d      	ldr	r3, [pc, #436]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1f0      	bne.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d021      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d11d      	bne.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004c76:	4b65      	ldr	r3, [pc, #404]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c7c:	0c1b      	lsrs	r3, r3, #16
 8004c7e:	f003 0303 	and.w	r3, r3, #3
 8004c82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c84:	4b61      	ldr	r3, [pc, #388]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c8a:	0e1b      	lsrs	r3, r3, #24
 8004c8c:	f003 030f 	and.w	r3, r3, #15
 8004c90:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	019a      	lsls	r2, r3, #6
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	041b      	lsls	r3, r3, #16
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	061b      	lsls	r3, r3, #24
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	071b      	lsls	r3, r3, #28
 8004caa:	4958      	ldr	r1, [pc, #352]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d004      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cc6:	d00a      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d02e      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cdc:	d129      	bne.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004cde:	4b4b      	ldr	r3, [pc, #300]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ce0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ce4:	0c1b      	lsrs	r3, r3, #16
 8004ce6:	f003 0303 	and.w	r3, r3, #3
 8004cea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004cec:	4b47      	ldr	r3, [pc, #284]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cf2:	0f1b      	lsrs	r3, r3, #28
 8004cf4:	f003 0307 	and.w	r3, r3, #7
 8004cf8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	019a      	lsls	r2, r3, #6
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	041b      	lsls	r3, r3, #16
 8004d04:	431a      	orrs	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	061b      	lsls	r3, r3, #24
 8004d0c:	431a      	orrs	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	071b      	lsls	r3, r3, #28
 8004d12:	493e      	ldr	r1, [pc, #248]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004d1a:	4b3c      	ldr	r3, [pc, #240]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d20:	f023 021f 	bic.w	r2, r3, #31
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	4938      	ldr	r1, [pc, #224]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d01d      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004d3e:	4b33      	ldr	r3, [pc, #204]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d44:	0e1b      	lsrs	r3, r3, #24
 8004d46:	f003 030f 	and.w	r3, r3, #15
 8004d4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d4c:	4b2f      	ldr	r3, [pc, #188]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d52:	0f1b      	lsrs	r3, r3, #28
 8004d54:	f003 0307 	and.w	r3, r3, #7
 8004d58:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	019a      	lsls	r2, r3, #6
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	041b      	lsls	r3, r3, #16
 8004d66:	431a      	orrs	r2, r3
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	061b      	lsls	r3, r3, #24
 8004d6c:	431a      	orrs	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	071b      	lsls	r3, r3, #28
 8004d72:	4926      	ldr	r1, [pc, #152]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d011      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	019a      	lsls	r2, r3, #6
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	041b      	lsls	r3, r3, #16
 8004d92:	431a      	orrs	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	061b      	lsls	r3, r3, #24
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	071b      	lsls	r3, r3, #28
 8004da2:	491a      	ldr	r1, [pc, #104]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004daa:	4b18      	ldr	r3, [pc, #96]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a17      	ldr	r2, [pc, #92]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004db0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004db4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004db6:	f7fc feef 	bl	8001b98 <HAL_GetTick>
 8004dba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004dbc:	e008      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004dbe:	f7fc feeb 	bl	8001b98 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	2b64      	cmp	r3, #100	@ 0x64
 8004dca:	d901      	bls.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e0d8      	b.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d0f0      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	f040 80ce 	bne.w	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004de4:	4b09      	ldr	r3, [pc, #36]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a08      	ldr	r2, [pc, #32]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004df0:	f7fc fed2 	bl	8001b98 <HAL_GetTick>
 8004df4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004df6:	e00b      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004df8:	f7fc fece 	bl	8001b98 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b64      	cmp	r3, #100	@ 0x64
 8004e04:	d904      	bls.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e0bb      	b.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004e0a:	bf00      	nop
 8004e0c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e10:	4b5e      	ldr	r3, [pc, #376]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e1c:	d0ec      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d009      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d02e      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d12a      	bne.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004e46:	4b51      	ldr	r3, [pc, #324]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e4c:	0c1b      	lsrs	r3, r3, #16
 8004e4e:	f003 0303 	and.w	r3, r3, #3
 8004e52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e54:	4b4d      	ldr	r3, [pc, #308]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e5a:	0f1b      	lsrs	r3, r3, #28
 8004e5c:	f003 0307 	and.w	r3, r3, #7
 8004e60:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	019a      	lsls	r2, r3, #6
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	041b      	lsls	r3, r3, #16
 8004e6c:	431a      	orrs	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	061b      	lsls	r3, r3, #24
 8004e74:	431a      	orrs	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	071b      	lsls	r3, r3, #28
 8004e7a:	4944      	ldr	r1, [pc, #272]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004e82:	4b42      	ldr	r3, [pc, #264]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e88:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e90:	3b01      	subs	r3, #1
 8004e92:	021b      	lsls	r3, r3, #8
 8004e94:	493d      	ldr	r1, [pc, #244]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d022      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004eac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004eb0:	d11d      	bne.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004eb2:	4b36      	ldr	r3, [pc, #216]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eb8:	0e1b      	lsrs	r3, r3, #24
 8004eba:	f003 030f 	and.w	r3, r3, #15
 8004ebe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ec0:	4b32      	ldr	r3, [pc, #200]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ec6:	0f1b      	lsrs	r3, r3, #28
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	019a      	lsls	r2, r3, #6
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	041b      	lsls	r3, r3, #16
 8004eda:	431a      	orrs	r2, r3
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	061b      	lsls	r3, r3, #24
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	071b      	lsls	r3, r3, #28
 8004ee6:	4929      	ldr	r1, [pc, #164]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0308 	and.w	r3, r3, #8
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d028      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004efa:	4b24      	ldr	r3, [pc, #144]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f00:	0e1b      	lsrs	r3, r3, #24
 8004f02:	f003 030f 	and.w	r3, r3, #15
 8004f06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f08:	4b20      	ldr	r3, [pc, #128]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f0e:	0c1b      	lsrs	r3, r3, #16
 8004f10:	f003 0303 	and.w	r3, r3, #3
 8004f14:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	019a      	lsls	r2, r3, #6
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	041b      	lsls	r3, r3, #16
 8004f20:	431a      	orrs	r2, r3
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	061b      	lsls	r3, r3, #24
 8004f26:	431a      	orrs	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	69db      	ldr	r3, [r3, #28]
 8004f2c:	071b      	lsls	r3, r3, #28
 8004f2e:	4917      	ldr	r1, [pc, #92]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004f36:	4b15      	ldr	r3, [pc, #84]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f3c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f44:	4911      	ldr	r1, [pc, #68]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a0e      	ldr	r2, [pc, #56]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f58:	f7fc fe1e 	bl	8001b98 <HAL_GetTick>
 8004f5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f5e:	e008      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f60:	f7fc fe1a 	bl	8001b98 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b64      	cmp	r3, #100	@ 0x64
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e007      	b.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f72:	4b06      	ldr	r3, [pc, #24]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f7e:	d1ef      	bne.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3720      	adds	r7, #32
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	40023800 	.word	0x40023800

08004f90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e049      	b.n	8005036 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d106      	bne.n	8004fbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7fc fc08 	bl	80017cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	3304      	adds	r3, #4
 8004fcc:	4619      	mov	r1, r3
 8004fce:	4610      	mov	r0, r2
 8004fd0:	f000 fcb4 	bl	800593c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
	...

08005040 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b01      	cmp	r3, #1
 8005052:	d001      	beq.n	8005058 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e04c      	b.n	80050f2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2202      	movs	r2, #2
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a26      	ldr	r2, [pc, #152]	@ (8005100 <HAL_TIM_Base_Start+0xc0>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d022      	beq.n	80050b0 <HAL_TIM_Base_Start+0x70>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005072:	d01d      	beq.n	80050b0 <HAL_TIM_Base_Start+0x70>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a22      	ldr	r2, [pc, #136]	@ (8005104 <HAL_TIM_Base_Start+0xc4>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d018      	beq.n	80050b0 <HAL_TIM_Base_Start+0x70>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a21      	ldr	r2, [pc, #132]	@ (8005108 <HAL_TIM_Base_Start+0xc8>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d013      	beq.n	80050b0 <HAL_TIM_Base_Start+0x70>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a1f      	ldr	r2, [pc, #124]	@ (800510c <HAL_TIM_Base_Start+0xcc>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d00e      	beq.n	80050b0 <HAL_TIM_Base_Start+0x70>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a1e      	ldr	r2, [pc, #120]	@ (8005110 <HAL_TIM_Base_Start+0xd0>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d009      	beq.n	80050b0 <HAL_TIM_Base_Start+0x70>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a1c      	ldr	r2, [pc, #112]	@ (8005114 <HAL_TIM_Base_Start+0xd4>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d004      	beq.n	80050b0 <HAL_TIM_Base_Start+0x70>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005118 <HAL_TIM_Base_Start+0xd8>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d115      	bne.n	80050dc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	689a      	ldr	r2, [r3, #8]
 80050b6:	4b19      	ldr	r3, [pc, #100]	@ (800511c <HAL_TIM_Base_Start+0xdc>)
 80050b8:	4013      	ands	r3, r2
 80050ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2b06      	cmp	r3, #6
 80050c0:	d015      	beq.n	80050ee <HAL_TIM_Base_Start+0xae>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050c8:	d011      	beq.n	80050ee <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f042 0201 	orr.w	r2, r2, #1
 80050d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050da:	e008      	b.n	80050ee <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f042 0201 	orr.w	r2, r2, #1
 80050ea:	601a      	str	r2, [r3, #0]
 80050ec:	e000      	b.n	80050f0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	40010000 	.word	0x40010000
 8005104:	40000400 	.word	0x40000400
 8005108:	40000800 	.word	0x40000800
 800510c:	40000c00 	.word	0x40000c00
 8005110:	40010400 	.word	0x40010400
 8005114:	40014000 	.word	0x40014000
 8005118:	40001800 	.word	0x40001800
 800511c:	00010007 	.word	0x00010007

08005120 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e049      	b.n	80051c6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005138:	b2db      	uxtb	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d106      	bne.n	800514c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f841 	bl	80051ce <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2202      	movs	r2, #2
 8005150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	3304      	adds	r3, #4
 800515c:	4619      	mov	r1, r3
 800515e:	4610      	mov	r0, r2
 8005160:	f000 fbec 	bl	800593c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80051ce:	b480      	push	{r7}
 80051d0:	b083      	sub	sp, #12
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80051d6:	bf00      	nop
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b082      	sub	sp, #8
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d101      	bne.n	80051f4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e049      	b.n	8005288 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d106      	bne.n	800520e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 f841 	bl	8005290 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2202      	movs	r2, #2
 8005212:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	3304      	adds	r3, #4
 800521e:	4619      	mov	r1, r3
 8005220:	4610      	mov	r0, r2
 8005222:	f000 fb8b 	bl	800593c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	3708      	adds	r7, #8
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e049      	b.n	800534a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d106      	bne.n	80052d0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7fc fab2 	bl	8001834 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	3304      	adds	r3, #4
 80052e0:	4619      	mov	r1, r3
 80052e2:	4610      	mov	r0, r2
 80052e4:	f000 fb2a 	bl	800593c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3708      	adds	r7, #8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
	...

08005354 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005360:	2300      	movs	r3, #0
 8005362:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800536a:	2b01      	cmp	r3, #1
 800536c:	d101      	bne.n	8005372 <HAL_TIM_OC_ConfigChannel+0x1e>
 800536e:	2302      	movs	r3, #2
 8005370:	e066      	b.n	8005440 <HAL_TIM_OC_ConfigChannel+0xec>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2b14      	cmp	r3, #20
 800537e:	d857      	bhi.n	8005430 <HAL_TIM_OC_ConfigChannel+0xdc>
 8005380:	a201      	add	r2, pc, #4	@ (adr r2, 8005388 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005386:	bf00      	nop
 8005388:	080053dd 	.word	0x080053dd
 800538c:	08005431 	.word	0x08005431
 8005390:	08005431 	.word	0x08005431
 8005394:	08005431 	.word	0x08005431
 8005398:	080053eb 	.word	0x080053eb
 800539c:	08005431 	.word	0x08005431
 80053a0:	08005431 	.word	0x08005431
 80053a4:	08005431 	.word	0x08005431
 80053a8:	080053f9 	.word	0x080053f9
 80053ac:	08005431 	.word	0x08005431
 80053b0:	08005431 	.word	0x08005431
 80053b4:	08005431 	.word	0x08005431
 80053b8:	08005407 	.word	0x08005407
 80053bc:	08005431 	.word	0x08005431
 80053c0:	08005431 	.word	0x08005431
 80053c4:	08005431 	.word	0x08005431
 80053c8:	08005415 	.word	0x08005415
 80053cc:	08005431 	.word	0x08005431
 80053d0:	08005431 	.word	0x08005431
 80053d4:	08005431 	.word	0x08005431
 80053d8:	08005423 	.word	0x08005423
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68b9      	ldr	r1, [r7, #8]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 fb4a 	bl	8005a7c <TIM_OC1_SetConfig>
      break;
 80053e8:	e025      	b.n	8005436 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68b9      	ldr	r1, [r7, #8]
 80053f0:	4618      	mov	r0, r3
 80053f2:	f000 fbb5 	bl	8005b60 <TIM_OC2_SetConfig>
      break;
 80053f6:	e01e      	b.n	8005436 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68b9      	ldr	r1, [r7, #8]
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 fc26 	bl	8005c50 <TIM_OC3_SetConfig>
      break;
 8005404:	e017      	b.n	8005436 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68b9      	ldr	r1, [r7, #8]
 800540c:	4618      	mov	r0, r3
 800540e:	f000 fc95 	bl	8005d3c <TIM_OC4_SetConfig>
      break;
 8005412:	e010      	b.n	8005436 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68b9      	ldr	r1, [r7, #8]
 800541a:	4618      	mov	r0, r3
 800541c:	f000 fce6 	bl	8005dec <TIM_OC5_SetConfig>
      break;
 8005420:	e009      	b.n	8005436 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68b9      	ldr	r1, [r7, #8]
 8005428:	4618      	mov	r0, r3
 800542a:	f000 fd31 	bl	8005e90 <TIM_OC6_SetConfig>
      break;
 800542e:	e002      	b.n	8005436 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	75fb      	strb	r3, [r7, #23]
      break;
 8005434:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800543e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005440:	4618      	mov	r0, r3
 8005442:	3718      	adds	r7, #24
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005454:	2300      	movs	r3, #0
 8005456:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800545e:	2b01      	cmp	r3, #1
 8005460:	d101      	bne.n	8005466 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005462:	2302      	movs	r3, #2
 8005464:	e088      	b.n	8005578 <HAL_TIM_IC_ConfigChannel+0x130>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d11b      	bne.n	80054ac <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005484:	f000 fd58 	bl	8005f38 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	699a      	ldr	r2, [r3, #24]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 020c 	bic.w	r2, r2, #12
 8005496:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6999      	ldr	r1, [r3, #24]
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	689a      	ldr	r2, [r3, #8]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	430a      	orrs	r2, r1
 80054a8:	619a      	str	r2, [r3, #24]
 80054aa:	e060      	b.n	800556e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b04      	cmp	r3, #4
 80054b0:	d11c      	bne.n	80054ec <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80054c2:	f000 fddc 	bl	800607e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	699a      	ldr	r2, [r3, #24]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80054d4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	6999      	ldr	r1, [r3, #24]
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	021a      	lsls	r2, r3, #8
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	430a      	orrs	r2, r1
 80054e8:	619a      	str	r2, [r3, #24]
 80054ea:	e040      	b.n	800556e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b08      	cmp	r3, #8
 80054f0:	d11b      	bne.n	800552a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005502:	f000 fe29 	bl	8006158 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	69da      	ldr	r2, [r3, #28]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 020c 	bic.w	r2, r2, #12
 8005514:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	69d9      	ldr	r1, [r3, #28]
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	689a      	ldr	r2, [r3, #8]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	430a      	orrs	r2, r1
 8005526:	61da      	str	r2, [r3, #28]
 8005528:	e021      	b.n	800556e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b0c      	cmp	r3, #12
 800552e:	d11c      	bne.n	800556a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005540:	f000 fe46 	bl	80061d0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	69da      	ldr	r2, [r3, #28]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005552:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	69d9      	ldr	r1, [r3, #28]
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	021a      	lsls	r2, r3, #8
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	430a      	orrs	r2, r1
 8005566:	61da      	str	r2, [r3, #28]
 8005568:	e001      	b.n	800556e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005576:	7dfb      	ldrb	r3, [r7, #23]
}
 8005578:	4618      	mov	r0, r3
 800557a:	3718      	adds	r7, #24
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800558c:	2300      	movs	r3, #0
 800558e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005596:	2b01      	cmp	r3, #1
 8005598:	d101      	bne.n	800559e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800559a:	2302      	movs	r3, #2
 800559c:	e0ff      	b.n	800579e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2b14      	cmp	r3, #20
 80055aa:	f200 80f0 	bhi.w	800578e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80055ae:	a201      	add	r2, pc, #4	@ (adr r2, 80055b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80055b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b4:	08005609 	.word	0x08005609
 80055b8:	0800578f 	.word	0x0800578f
 80055bc:	0800578f 	.word	0x0800578f
 80055c0:	0800578f 	.word	0x0800578f
 80055c4:	08005649 	.word	0x08005649
 80055c8:	0800578f 	.word	0x0800578f
 80055cc:	0800578f 	.word	0x0800578f
 80055d0:	0800578f 	.word	0x0800578f
 80055d4:	0800568b 	.word	0x0800568b
 80055d8:	0800578f 	.word	0x0800578f
 80055dc:	0800578f 	.word	0x0800578f
 80055e0:	0800578f 	.word	0x0800578f
 80055e4:	080056cb 	.word	0x080056cb
 80055e8:	0800578f 	.word	0x0800578f
 80055ec:	0800578f 	.word	0x0800578f
 80055f0:	0800578f 	.word	0x0800578f
 80055f4:	0800570d 	.word	0x0800570d
 80055f8:	0800578f 	.word	0x0800578f
 80055fc:	0800578f 	.word	0x0800578f
 8005600:	0800578f 	.word	0x0800578f
 8005604:	0800574d 	.word	0x0800574d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68b9      	ldr	r1, [r7, #8]
 800560e:	4618      	mov	r0, r3
 8005610:	f000 fa34 	bl	8005a7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	699a      	ldr	r2, [r3, #24]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f042 0208 	orr.w	r2, r2, #8
 8005622:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	699a      	ldr	r2, [r3, #24]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f022 0204 	bic.w	r2, r2, #4
 8005632:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6999      	ldr	r1, [r3, #24]
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	691a      	ldr	r2, [r3, #16]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	619a      	str	r2, [r3, #24]
      break;
 8005646:	e0a5      	b.n	8005794 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68b9      	ldr	r1, [r7, #8]
 800564e:	4618      	mov	r0, r3
 8005650:	f000 fa86 	bl	8005b60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	699a      	ldr	r2, [r3, #24]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005662:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	699a      	ldr	r2, [r3, #24]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005672:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6999      	ldr	r1, [r3, #24]
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	021a      	lsls	r2, r3, #8
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	430a      	orrs	r2, r1
 8005686:	619a      	str	r2, [r3, #24]
      break;
 8005688:	e084      	b.n	8005794 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68b9      	ldr	r1, [r7, #8]
 8005690:	4618      	mov	r0, r3
 8005692:	f000 fadd 	bl	8005c50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	69da      	ldr	r2, [r3, #28]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f042 0208 	orr.w	r2, r2, #8
 80056a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	69da      	ldr	r2, [r3, #28]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f022 0204 	bic.w	r2, r2, #4
 80056b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	69d9      	ldr	r1, [r3, #28]
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	691a      	ldr	r2, [r3, #16]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	430a      	orrs	r2, r1
 80056c6:	61da      	str	r2, [r3, #28]
      break;
 80056c8:	e064      	b.n	8005794 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68b9      	ldr	r1, [r7, #8]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f000 fb33 	bl	8005d3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	69da      	ldr	r2, [r3, #28]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	69da      	ldr	r2, [r3, #28]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	69d9      	ldr	r1, [r3, #28]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	021a      	lsls	r2, r3, #8
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	430a      	orrs	r2, r1
 8005708:	61da      	str	r2, [r3, #28]
      break;
 800570a:	e043      	b.n	8005794 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68b9      	ldr	r1, [r7, #8]
 8005712:	4618      	mov	r0, r3
 8005714:	f000 fb6a 	bl	8005dec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f042 0208 	orr.w	r2, r2, #8
 8005726:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 0204 	bic.w	r2, r2, #4
 8005736:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	691a      	ldr	r2, [r3, #16]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	430a      	orrs	r2, r1
 8005748:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800574a:	e023      	b.n	8005794 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68b9      	ldr	r1, [r7, #8]
 8005752:	4618      	mov	r0, r3
 8005754:	f000 fb9c 	bl	8005e90 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005766:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005776:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	021a      	lsls	r2, r3, #8
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	430a      	orrs	r2, r1
 800578a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800578c:	e002      	b.n	8005794 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	75fb      	strb	r3, [r7, #23]
      break;
 8005792:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800579c:	7dfb      	ldrb	r3, [r7, #23]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3718      	adds	r7, #24
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop

080057a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057b2:	2300      	movs	r3, #0
 80057b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d101      	bne.n	80057c4 <HAL_TIM_ConfigClockSource+0x1c>
 80057c0:	2302      	movs	r3, #2
 80057c2:	e0b4      	b.n	800592e <HAL_TIM_ConfigClockSource+0x186>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	4b56      	ldr	r3, [pc, #344]	@ (8005938 <HAL_TIM_ConfigClockSource+0x190>)
 80057e0:	4013      	ands	r3, r2
 80057e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80057ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057fc:	d03e      	beq.n	800587c <HAL_TIM_ConfigClockSource+0xd4>
 80057fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005802:	f200 8087 	bhi.w	8005914 <HAL_TIM_ConfigClockSource+0x16c>
 8005806:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800580a:	f000 8086 	beq.w	800591a <HAL_TIM_ConfigClockSource+0x172>
 800580e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005812:	d87f      	bhi.n	8005914 <HAL_TIM_ConfigClockSource+0x16c>
 8005814:	2b70      	cmp	r3, #112	@ 0x70
 8005816:	d01a      	beq.n	800584e <HAL_TIM_ConfigClockSource+0xa6>
 8005818:	2b70      	cmp	r3, #112	@ 0x70
 800581a:	d87b      	bhi.n	8005914 <HAL_TIM_ConfigClockSource+0x16c>
 800581c:	2b60      	cmp	r3, #96	@ 0x60
 800581e:	d050      	beq.n	80058c2 <HAL_TIM_ConfigClockSource+0x11a>
 8005820:	2b60      	cmp	r3, #96	@ 0x60
 8005822:	d877      	bhi.n	8005914 <HAL_TIM_ConfigClockSource+0x16c>
 8005824:	2b50      	cmp	r3, #80	@ 0x50
 8005826:	d03c      	beq.n	80058a2 <HAL_TIM_ConfigClockSource+0xfa>
 8005828:	2b50      	cmp	r3, #80	@ 0x50
 800582a:	d873      	bhi.n	8005914 <HAL_TIM_ConfigClockSource+0x16c>
 800582c:	2b40      	cmp	r3, #64	@ 0x40
 800582e:	d058      	beq.n	80058e2 <HAL_TIM_ConfigClockSource+0x13a>
 8005830:	2b40      	cmp	r3, #64	@ 0x40
 8005832:	d86f      	bhi.n	8005914 <HAL_TIM_ConfigClockSource+0x16c>
 8005834:	2b30      	cmp	r3, #48	@ 0x30
 8005836:	d064      	beq.n	8005902 <HAL_TIM_ConfigClockSource+0x15a>
 8005838:	2b30      	cmp	r3, #48	@ 0x30
 800583a:	d86b      	bhi.n	8005914 <HAL_TIM_ConfigClockSource+0x16c>
 800583c:	2b20      	cmp	r3, #32
 800583e:	d060      	beq.n	8005902 <HAL_TIM_ConfigClockSource+0x15a>
 8005840:	2b20      	cmp	r3, #32
 8005842:	d867      	bhi.n	8005914 <HAL_TIM_ConfigClockSource+0x16c>
 8005844:	2b00      	cmp	r3, #0
 8005846:	d05c      	beq.n	8005902 <HAL_TIM_ConfigClockSource+0x15a>
 8005848:	2b10      	cmp	r3, #16
 800584a:	d05a      	beq.n	8005902 <HAL_TIM_ConfigClockSource+0x15a>
 800584c:	e062      	b.n	8005914 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800585e:	f000 fd0f 	bl	8006280 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005870:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68ba      	ldr	r2, [r7, #8]
 8005878:	609a      	str	r2, [r3, #8]
      break;
 800587a:	e04f      	b.n	800591c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800588c:	f000 fcf8 	bl	8006280 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	689a      	ldr	r2, [r3, #8]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800589e:	609a      	str	r2, [r3, #8]
      break;
 80058a0:	e03c      	b.n	800591c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058ae:	461a      	mov	r2, r3
 80058b0:	f000 fbb6 	bl	8006020 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2150      	movs	r1, #80	@ 0x50
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 fcc5 	bl	800624a <TIM_ITRx_SetConfig>
      break;
 80058c0:	e02c      	b.n	800591c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058ce:	461a      	mov	r2, r3
 80058d0:	f000 fc12 	bl	80060f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2160      	movs	r1, #96	@ 0x60
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 fcb5 	bl	800624a <TIM_ITRx_SetConfig>
      break;
 80058e0:	e01c      	b.n	800591c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058ee:	461a      	mov	r2, r3
 80058f0:	f000 fb96 	bl	8006020 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2140      	movs	r1, #64	@ 0x40
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 fca5 	bl	800624a <TIM_ITRx_SetConfig>
      break;
 8005900:	e00c      	b.n	800591c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4619      	mov	r1, r3
 800590c:	4610      	mov	r0, r2
 800590e:	f000 fc9c 	bl	800624a <TIM_ITRx_SetConfig>
      break;
 8005912:	e003      	b.n	800591c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	73fb      	strb	r3, [r7, #15]
      break;
 8005918:	e000      	b.n	800591c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800591a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800592c:	7bfb      	ldrb	r3, [r7, #15]
}
 800592e:	4618      	mov	r0, r3
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	fffeff88 	.word	0xfffeff88

0800593c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800593c:	b480      	push	{r7}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a40      	ldr	r2, [pc, #256]	@ (8005a50 <TIM_Base_SetConfig+0x114>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d013      	beq.n	800597c <TIM_Base_SetConfig+0x40>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800595a:	d00f      	beq.n	800597c <TIM_Base_SetConfig+0x40>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a3d      	ldr	r2, [pc, #244]	@ (8005a54 <TIM_Base_SetConfig+0x118>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d00b      	beq.n	800597c <TIM_Base_SetConfig+0x40>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a3c      	ldr	r2, [pc, #240]	@ (8005a58 <TIM_Base_SetConfig+0x11c>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d007      	beq.n	800597c <TIM_Base_SetConfig+0x40>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a3b      	ldr	r2, [pc, #236]	@ (8005a5c <TIM_Base_SetConfig+0x120>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d003      	beq.n	800597c <TIM_Base_SetConfig+0x40>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a3a      	ldr	r2, [pc, #232]	@ (8005a60 <TIM_Base_SetConfig+0x124>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d108      	bne.n	800598e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005982:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	4313      	orrs	r3, r2
 800598c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a2f      	ldr	r2, [pc, #188]	@ (8005a50 <TIM_Base_SetConfig+0x114>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d02b      	beq.n	80059ee <TIM_Base_SetConfig+0xb2>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800599c:	d027      	beq.n	80059ee <TIM_Base_SetConfig+0xb2>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a2c      	ldr	r2, [pc, #176]	@ (8005a54 <TIM_Base_SetConfig+0x118>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d023      	beq.n	80059ee <TIM_Base_SetConfig+0xb2>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a2b      	ldr	r2, [pc, #172]	@ (8005a58 <TIM_Base_SetConfig+0x11c>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d01f      	beq.n	80059ee <TIM_Base_SetConfig+0xb2>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a2a      	ldr	r2, [pc, #168]	@ (8005a5c <TIM_Base_SetConfig+0x120>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d01b      	beq.n	80059ee <TIM_Base_SetConfig+0xb2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a29      	ldr	r2, [pc, #164]	@ (8005a60 <TIM_Base_SetConfig+0x124>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d017      	beq.n	80059ee <TIM_Base_SetConfig+0xb2>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a28      	ldr	r2, [pc, #160]	@ (8005a64 <TIM_Base_SetConfig+0x128>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d013      	beq.n	80059ee <TIM_Base_SetConfig+0xb2>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a27      	ldr	r2, [pc, #156]	@ (8005a68 <TIM_Base_SetConfig+0x12c>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d00f      	beq.n	80059ee <TIM_Base_SetConfig+0xb2>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a26      	ldr	r2, [pc, #152]	@ (8005a6c <TIM_Base_SetConfig+0x130>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d00b      	beq.n	80059ee <TIM_Base_SetConfig+0xb2>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a25      	ldr	r2, [pc, #148]	@ (8005a70 <TIM_Base_SetConfig+0x134>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d007      	beq.n	80059ee <TIM_Base_SetConfig+0xb2>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a24      	ldr	r2, [pc, #144]	@ (8005a74 <TIM_Base_SetConfig+0x138>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d003      	beq.n	80059ee <TIM_Base_SetConfig+0xb2>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a23      	ldr	r2, [pc, #140]	@ (8005a78 <TIM_Base_SetConfig+0x13c>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d108      	bne.n	8005a00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	689a      	ldr	r2, [r3, #8]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a0a      	ldr	r2, [pc, #40]	@ (8005a50 <TIM_Base_SetConfig+0x114>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d003      	beq.n	8005a34 <TIM_Base_SetConfig+0xf8>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a0c      	ldr	r2, [pc, #48]	@ (8005a60 <TIM_Base_SetConfig+0x124>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d103      	bne.n	8005a3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	691a      	ldr	r2, [r3, #16]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	615a      	str	r2, [r3, #20]
}
 8005a42:	bf00      	nop
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	40010000 	.word	0x40010000
 8005a54:	40000400 	.word	0x40000400
 8005a58:	40000800 	.word	0x40000800
 8005a5c:	40000c00 	.word	0x40000c00
 8005a60:	40010400 	.word	0x40010400
 8005a64:	40014000 	.word	0x40014000
 8005a68:	40014400 	.word	0x40014400
 8005a6c:	40014800 	.word	0x40014800
 8005a70:	40001800 	.word	0x40001800
 8005a74:	40001c00 	.word	0x40001c00
 8005a78:	40002000 	.word	0x40002000

08005a7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b087      	sub	sp, #28
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	f023 0201 	bic.w	r2, r3, #1
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	4b2b      	ldr	r3, [pc, #172]	@ (8005b54 <TIM_OC1_SetConfig+0xd8>)
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f023 0303 	bic.w	r3, r3, #3
 8005ab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f023 0302 	bic.w	r3, r3, #2
 8005ac4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a21      	ldr	r2, [pc, #132]	@ (8005b58 <TIM_OC1_SetConfig+0xdc>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d003      	beq.n	8005ae0 <TIM_OC1_SetConfig+0x64>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a20      	ldr	r2, [pc, #128]	@ (8005b5c <TIM_OC1_SetConfig+0xe0>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d10c      	bne.n	8005afa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	f023 0308 	bic.w	r3, r3, #8
 8005ae6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	f023 0304 	bic.w	r3, r3, #4
 8005af8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a16      	ldr	r2, [pc, #88]	@ (8005b58 <TIM_OC1_SetConfig+0xdc>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d003      	beq.n	8005b0a <TIM_OC1_SetConfig+0x8e>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a15      	ldr	r2, [pc, #84]	@ (8005b5c <TIM_OC1_SetConfig+0xe0>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d111      	bne.n	8005b2e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	693a      	ldr	r2, [r7, #16]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	693a      	ldr	r2, [r7, #16]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	693a      	ldr	r2, [r7, #16]
 8005b32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	685a      	ldr	r2, [r3, #4]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	621a      	str	r2, [r3, #32]
}
 8005b48:	bf00      	nop
 8005b4a:	371c      	adds	r7, #28
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr
 8005b54:	fffeff8f 	.word	0xfffeff8f
 8005b58:	40010000 	.word	0x40010000
 8005b5c:	40010400 	.word	0x40010400

08005b60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b087      	sub	sp, #28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a1b      	ldr	r3, [r3, #32]
 8005b6e:	f023 0210 	bic.w	r2, r3, #16
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	4b2e      	ldr	r3, [pc, #184]	@ (8005c44 <TIM_OC2_SetConfig+0xe4>)
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	021b      	lsls	r3, r3, #8
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	f023 0320 	bic.w	r3, r3, #32
 8005baa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	011b      	lsls	r3, r3, #4
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a23      	ldr	r2, [pc, #140]	@ (8005c48 <TIM_OC2_SetConfig+0xe8>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d003      	beq.n	8005bc8 <TIM_OC2_SetConfig+0x68>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a22      	ldr	r2, [pc, #136]	@ (8005c4c <TIM_OC2_SetConfig+0xec>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d10d      	bne.n	8005be4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	011b      	lsls	r3, r3, #4
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005be2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a18      	ldr	r2, [pc, #96]	@ (8005c48 <TIM_OC2_SetConfig+0xe8>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d003      	beq.n	8005bf4 <TIM_OC2_SetConfig+0x94>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a17      	ldr	r2, [pc, #92]	@ (8005c4c <TIM_OC2_SetConfig+0xec>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d113      	bne.n	8005c1c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005bfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	695b      	ldr	r3, [r3, #20]
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	621a      	str	r2, [r3, #32]
}
 8005c36:	bf00      	nop
 8005c38:	371c      	adds	r7, #28
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	feff8fff 	.word	0xfeff8fff
 8005c48:	40010000 	.word	0x40010000
 8005c4c:	40010400 	.word	0x40010400

08005c50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b087      	sub	sp, #28
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	69db      	ldr	r3, [r3, #28]
 8005c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	4b2d      	ldr	r3, [pc, #180]	@ (8005d30 <TIM_OC3_SetConfig+0xe0>)
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f023 0303 	bic.w	r3, r3, #3
 8005c86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	021b      	lsls	r3, r3, #8
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a22      	ldr	r2, [pc, #136]	@ (8005d34 <TIM_OC3_SetConfig+0xe4>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d003      	beq.n	8005cb6 <TIM_OC3_SetConfig+0x66>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a21      	ldr	r2, [pc, #132]	@ (8005d38 <TIM_OC3_SetConfig+0xe8>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d10d      	bne.n	8005cd2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005cbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	021b      	lsls	r3, r3, #8
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005cd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a17      	ldr	r2, [pc, #92]	@ (8005d34 <TIM_OC3_SetConfig+0xe4>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d003      	beq.n	8005ce2 <TIM_OC3_SetConfig+0x92>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a16      	ldr	r2, [pc, #88]	@ (8005d38 <TIM_OC3_SetConfig+0xe8>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d113      	bne.n	8005d0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ce8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005cf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	011b      	lsls	r3, r3, #4
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	011b      	lsls	r3, r3, #4
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	685a      	ldr	r2, [r3, #4]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	621a      	str	r2, [r3, #32]
}
 8005d24:	bf00      	nop
 8005d26:	371c      	adds	r7, #28
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr
 8005d30:	fffeff8f 	.word	0xfffeff8f
 8005d34:	40010000 	.word	0x40010000
 8005d38:	40010400 	.word	0x40010400

08005d3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b087      	sub	sp, #28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	69db      	ldr	r3, [r3, #28]
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	4b1e      	ldr	r3, [pc, #120]	@ (8005de0 <TIM_OC4_SetConfig+0xa4>)
 8005d68:	4013      	ands	r3, r2
 8005d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	021b      	lsls	r3, r3, #8
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	031b      	lsls	r3, r3, #12
 8005d8e:	693a      	ldr	r2, [r7, #16]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a13      	ldr	r2, [pc, #76]	@ (8005de4 <TIM_OC4_SetConfig+0xa8>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d003      	beq.n	8005da4 <TIM_OC4_SetConfig+0x68>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a12      	ldr	r2, [pc, #72]	@ (8005de8 <TIM_OC4_SetConfig+0xac>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d109      	bne.n	8005db8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005daa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	019b      	lsls	r3, r3, #6
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	685a      	ldr	r2, [r3, #4]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	621a      	str	r2, [r3, #32]
}
 8005dd2:	bf00      	nop
 8005dd4:	371c      	adds	r7, #28
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	feff8fff 	.word	0xfeff8fff
 8005de4:	40010000 	.word	0x40010000
 8005de8:	40010400 	.word	0x40010400

08005dec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	4b1b      	ldr	r3, [pc, #108]	@ (8005e84 <TIM_OC5_SetConfig+0x98>)
 8005e18:	4013      	ands	r3, r2
 8005e1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005e2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	041b      	lsls	r3, r3, #16
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a12      	ldr	r2, [pc, #72]	@ (8005e88 <TIM_OC5_SetConfig+0x9c>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d003      	beq.n	8005e4a <TIM_OC5_SetConfig+0x5e>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a11      	ldr	r2, [pc, #68]	@ (8005e8c <TIM_OC5_SetConfig+0xa0>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d109      	bne.n	8005e5e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e50:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	021b      	lsls	r3, r3, #8
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	685a      	ldr	r2, [r3, #4]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	621a      	str	r2, [r3, #32]
}
 8005e78:	bf00      	nop
 8005e7a:	371c      	adds	r7, #28
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr
 8005e84:	fffeff8f 	.word	0xfffeff8f
 8005e88:	40010000 	.word	0x40010000
 8005e8c:	40010400 	.word	0x40010400

08005e90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b087      	sub	sp, #28
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	4b1c      	ldr	r3, [pc, #112]	@ (8005f2c <TIM_OC6_SetConfig+0x9c>)
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	021b      	lsls	r3, r3, #8
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005ed2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	051b      	lsls	r3, r3, #20
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a13      	ldr	r2, [pc, #76]	@ (8005f30 <TIM_OC6_SetConfig+0xa0>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d003      	beq.n	8005ef0 <TIM_OC6_SetConfig+0x60>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a12      	ldr	r2, [pc, #72]	@ (8005f34 <TIM_OC6_SetConfig+0xa4>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d109      	bne.n	8005f04 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ef6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	695b      	ldr	r3, [r3, #20]
 8005efc:	029b      	lsls	r3, r3, #10
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	685a      	ldr	r2, [r3, #4]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	621a      	str	r2, [r3, #32]
}
 8005f1e:	bf00      	nop
 8005f20:	371c      	adds	r7, #28
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	feff8fff 	.word	0xfeff8fff
 8005f30:	40010000 	.word	0x40010000
 8005f34:	40010400 	.word	0x40010400

08005f38 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b087      	sub	sp, #28
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
 8005f44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	f023 0201 	bic.w	r2, r3, #1
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6a1b      	ldr	r3, [r3, #32]
 8005f5c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	4a28      	ldr	r2, [pc, #160]	@ (8006004 <TIM_TI1_SetConfig+0xcc>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d01b      	beq.n	8005f9e <TIM_TI1_SetConfig+0x66>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f6c:	d017      	beq.n	8005f9e <TIM_TI1_SetConfig+0x66>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	4a25      	ldr	r2, [pc, #148]	@ (8006008 <TIM_TI1_SetConfig+0xd0>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d013      	beq.n	8005f9e <TIM_TI1_SetConfig+0x66>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	4a24      	ldr	r2, [pc, #144]	@ (800600c <TIM_TI1_SetConfig+0xd4>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d00f      	beq.n	8005f9e <TIM_TI1_SetConfig+0x66>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	4a23      	ldr	r2, [pc, #140]	@ (8006010 <TIM_TI1_SetConfig+0xd8>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d00b      	beq.n	8005f9e <TIM_TI1_SetConfig+0x66>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	4a22      	ldr	r2, [pc, #136]	@ (8006014 <TIM_TI1_SetConfig+0xdc>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d007      	beq.n	8005f9e <TIM_TI1_SetConfig+0x66>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	4a21      	ldr	r2, [pc, #132]	@ (8006018 <TIM_TI1_SetConfig+0xe0>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d003      	beq.n	8005f9e <TIM_TI1_SetConfig+0x66>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	4a20      	ldr	r2, [pc, #128]	@ (800601c <TIM_TI1_SetConfig+0xe4>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d101      	bne.n	8005fa2 <TIM_TI1_SetConfig+0x6a>
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e000      	b.n	8005fa4 <TIM_TI1_SetConfig+0x6c>
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d008      	beq.n	8005fba <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	f023 0303 	bic.w	r3, r3, #3
 8005fae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	617b      	str	r3, [r7, #20]
 8005fb8:	e003      	b.n	8005fc2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	f043 0301 	orr.w	r3, r3, #1
 8005fc0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005fc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	011b      	lsls	r3, r3, #4
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	f023 030a 	bic.w	r3, r3, #10
 8005fdc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	f003 030a 	and.w	r3, r3, #10
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	621a      	str	r2, [r3, #32]
}
 8005ff6:	bf00      	nop
 8005ff8:	371c      	adds	r7, #28
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	40010000 	.word	0x40010000
 8006008:	40000400 	.word	0x40000400
 800600c:	40000800 	.word	0x40000800
 8006010:	40000c00 	.word	0x40000c00
 8006014:	40010400 	.word	0x40010400
 8006018:	40014000 	.word	0x40014000
 800601c:	40001800 	.word	0x40001800

08006020 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006020:	b480      	push	{r7}
 8006022:	b087      	sub	sp, #28
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6a1b      	ldr	r3, [r3, #32]
 8006030:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	f023 0201 	bic.w	r2, r3, #1
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800604a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	011b      	lsls	r3, r3, #4
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	4313      	orrs	r3, r2
 8006054:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	f023 030a 	bic.w	r3, r3, #10
 800605c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	4313      	orrs	r3, r2
 8006064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	621a      	str	r2, [r3, #32]
}
 8006072:	bf00      	nop
 8006074:	371c      	adds	r7, #28
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr

0800607e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800607e:	b480      	push	{r7}
 8006080:	b087      	sub	sp, #28
 8006082:	af00      	add	r7, sp, #0
 8006084:	60f8      	str	r0, [r7, #12]
 8006086:	60b9      	str	r1, [r7, #8]
 8006088:	607a      	str	r2, [r7, #4]
 800608a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6a1b      	ldr	r3, [r3, #32]
 8006090:	f023 0210 	bic.w	r2, r3, #16
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	021b      	lsls	r3, r3, #8
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80060bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	031b      	lsls	r3, r3, #12
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	697a      	ldr	r2, [r7, #20]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80060d0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	011b      	lsls	r3, r3, #4
 80060d6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	4313      	orrs	r3, r2
 80060de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	621a      	str	r2, [r3, #32]
}
 80060ec:	bf00      	nop
 80060ee:	371c      	adds	r7, #28
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b087      	sub	sp, #28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6a1b      	ldr	r3, [r3, #32]
 8006108:	f023 0210 	bic.w	r2, r3, #16
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006122:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	031b      	lsls	r3, r3, #12
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	4313      	orrs	r3, r2
 800612c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006134:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	011b      	lsls	r3, r3, #4
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	4313      	orrs	r3, r2
 800613e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	621a      	str	r2, [r3, #32]
}
 800614c:	bf00      	nop
 800614e:	371c      	adds	r7, #28
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006158:	b480      	push	{r7}
 800615a:	b087      	sub	sp, #28
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
 8006164:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	69db      	ldr	r3, [r3, #28]
 8006176:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6a1b      	ldr	r3, [r3, #32]
 800617c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	f023 0303 	bic.w	r3, r3, #3
 8006184:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4313      	orrs	r3, r2
 800618c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006194:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	011b      	lsls	r3, r3, #4
 800619a:	b2db      	uxtb	r3, r3
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	4313      	orrs	r3, r2
 80061a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80061a8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	021b      	lsls	r3, r3, #8
 80061ae:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	621a      	str	r2, [r3, #32]
}
 80061c4:	bf00      	nop
 80061c6:	371c      	adds	r7, #28
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b087      	sub	sp, #28
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	607a      	str	r2, [r7, #4]
 80061dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6a1b      	ldr	r3, [r3, #32]
 80061e2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	69db      	ldr	r3, [r3, #28]
 80061ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6a1b      	ldr	r3, [r3, #32]
 80061f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	021b      	lsls	r3, r3, #8
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	4313      	orrs	r3, r2
 8006206:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800620e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	031b      	lsls	r3, r3, #12
 8006214:	b29b      	uxth	r3, r3
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	4313      	orrs	r3, r2
 800621a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006222:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	031b      	lsls	r3, r3, #12
 8006228:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	4313      	orrs	r3, r2
 8006230:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	697a      	ldr	r2, [r7, #20]
 8006236:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	693a      	ldr	r2, [r7, #16]
 800623c:	621a      	str	r2, [r3, #32]
}
 800623e:	bf00      	nop
 8006240:	371c      	adds	r7, #28
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr

0800624a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800624a:	b480      	push	{r7}
 800624c:	b085      	sub	sp, #20
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
 8006252:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006260:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006262:	683a      	ldr	r2, [r7, #0]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	4313      	orrs	r3, r2
 8006268:	f043 0307 	orr.w	r3, r3, #7
 800626c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	609a      	str	r2, [r3, #8]
}
 8006274:	bf00      	nop
 8006276:	3714      	adds	r7, #20
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006280:	b480      	push	{r7}
 8006282:	b087      	sub	sp, #28
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
 800628c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800629a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	021a      	lsls	r2, r3, #8
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	431a      	orrs	r2, r3
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	609a      	str	r2, [r3, #8]
}
 80062b4:	bf00      	nop
 80062b6:	371c      	adds	r7, #28
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b085      	sub	sp, #20
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d101      	bne.n	80062d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062d4:	2302      	movs	r3, #2
 80062d6:	e06d      	b.n	80063b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2202      	movs	r2, #2
 80062e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a30      	ldr	r2, [pc, #192]	@ (80063c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d004      	beq.n	800630c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a2f      	ldr	r2, [pc, #188]	@ (80063c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d108      	bne.n	800631e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006312:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	4313      	orrs	r3, r2
 800631c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006324:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	4313      	orrs	r3, r2
 800632e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a20      	ldr	r2, [pc, #128]	@ (80063c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d022      	beq.n	8006388 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800634a:	d01d      	beq.n	8006388 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a1d      	ldr	r2, [pc, #116]	@ (80063c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d018      	beq.n	8006388 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a1c      	ldr	r2, [pc, #112]	@ (80063cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d013      	beq.n	8006388 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a1a      	ldr	r2, [pc, #104]	@ (80063d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d00e      	beq.n	8006388 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a15      	ldr	r2, [pc, #84]	@ (80063c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d009      	beq.n	8006388 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a16      	ldr	r2, [pc, #88]	@ (80063d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d004      	beq.n	8006388 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a15      	ldr	r2, [pc, #84]	@ (80063d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d10c      	bne.n	80063a2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800638e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	68ba      	ldr	r2, [r7, #8]
 8006396:	4313      	orrs	r3, r2
 8006398:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68ba      	ldr	r2, [r7, #8]
 80063a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3714      	adds	r7, #20
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr
 80063c0:	40010000 	.word	0x40010000
 80063c4:	40010400 	.word	0x40010400
 80063c8:	40000400 	.word	0x40000400
 80063cc:	40000800 	.word	0x40000800
 80063d0:	40000c00 	.word	0x40000c00
 80063d4:	40014000 	.word	0x40014000
 80063d8:	40001800 	.word	0x40001800

080063dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80063e6:	2300      	movs	r3, #0
 80063e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d101      	bne.n	80063f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80063f4:	2302      	movs	r3, #2
 80063f6:	e065      	b.n	80064c4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	4313      	orrs	r3, r2
 800640c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	4313      	orrs	r3, r2
 800641a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	4313      	orrs	r3, r2
 8006428:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4313      	orrs	r3, r2
 8006436:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	4313      	orrs	r3, r2
 8006444:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	695b      	ldr	r3, [r3, #20]
 8006450:	4313      	orrs	r3, r2
 8006452:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800645e:	4313      	orrs	r3, r2
 8006460:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	041b      	lsls	r3, r3, #16
 800646e:	4313      	orrs	r3, r2
 8006470:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a16      	ldr	r2, [pc, #88]	@ (80064d0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d004      	beq.n	8006486 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a14      	ldr	r2, [pc, #80]	@ (80064d4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d115      	bne.n	80064b2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006490:	051b      	lsls	r3, r3, #20
 8006492:	4313      	orrs	r3, r2
 8006494:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	69db      	ldr	r3, [r3, #28]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3714      	adds	r7, #20
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr
 80064d0:	40010000 	.word	0x40010000
 80064d4:	40010400 	.word	0x40010400

080064d8 <memset>:
 80064d8:	4402      	add	r2, r0
 80064da:	4603      	mov	r3, r0
 80064dc:	4293      	cmp	r3, r2
 80064de:	d100      	bne.n	80064e2 <memset+0xa>
 80064e0:	4770      	bx	lr
 80064e2:	f803 1b01 	strb.w	r1, [r3], #1
 80064e6:	e7f9      	b.n	80064dc <memset+0x4>

080064e8 <__libc_init_array>:
 80064e8:	b570      	push	{r4, r5, r6, lr}
 80064ea:	4d0d      	ldr	r5, [pc, #52]	@ (8006520 <__libc_init_array+0x38>)
 80064ec:	4c0d      	ldr	r4, [pc, #52]	@ (8006524 <__libc_init_array+0x3c>)
 80064ee:	1b64      	subs	r4, r4, r5
 80064f0:	10a4      	asrs	r4, r4, #2
 80064f2:	2600      	movs	r6, #0
 80064f4:	42a6      	cmp	r6, r4
 80064f6:	d109      	bne.n	800650c <__libc_init_array+0x24>
 80064f8:	4d0b      	ldr	r5, [pc, #44]	@ (8006528 <__libc_init_array+0x40>)
 80064fa:	4c0c      	ldr	r4, [pc, #48]	@ (800652c <__libc_init_array+0x44>)
 80064fc:	f000 f818 	bl	8006530 <_init>
 8006500:	1b64      	subs	r4, r4, r5
 8006502:	10a4      	asrs	r4, r4, #2
 8006504:	2600      	movs	r6, #0
 8006506:	42a6      	cmp	r6, r4
 8006508:	d105      	bne.n	8006516 <__libc_init_array+0x2e>
 800650a:	bd70      	pop	{r4, r5, r6, pc}
 800650c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006510:	4798      	blx	r3
 8006512:	3601      	adds	r6, #1
 8006514:	e7ee      	b.n	80064f4 <__libc_init_array+0xc>
 8006516:	f855 3b04 	ldr.w	r3, [r5], #4
 800651a:	4798      	blx	r3
 800651c:	3601      	adds	r6, #1
 800651e:	e7f2      	b.n	8006506 <__libc_init_array+0x1e>
 8006520:	08006568 	.word	0x08006568
 8006524:	08006568 	.word	0x08006568
 8006528:	08006568 	.word	0x08006568
 800652c:	0800656c 	.word	0x0800656c

08006530 <_init>:
 8006530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006532:	bf00      	nop
 8006534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006536:	bc08      	pop	{r3}
 8006538:	469e      	mov	lr, r3
 800653a:	4770      	bx	lr

0800653c <_fini>:
 800653c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800653e:	bf00      	nop
 8006540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006542:	bc08      	pop	{r3}
 8006544:	469e      	mov	lr, r3
 8006546:	4770      	bx	lr
