
Inverter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000691c  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08006b14  08006b14  00007b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b38  08006b38  00008024  2**0
                  CONTENTS
  4 .ARM          00000008  08006b38  08006b38  00007b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b40  08006b40  00008024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b40  08006b40  00007b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b44  08006b44  00007b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08006b48  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  20000024  08006b6c  00008024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  08006b6c  000084a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016358  00000000  00000000  00008052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cd4  00000000  00000000  0001e3aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c8  00000000  00000000  00022080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f17  00000000  00000000  00023448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aa7d  00000000  00000000  0002435f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c666  00000000  00000000  0004eddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001000c3  00000000  00000000  0006b442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016b505  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fc0  00000000  00000000  0016b548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00170508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000024 	.word	0x20000024
 8000214:	00000000 	.word	0x00000000
 8000218:	08006afc 	.word	0x08006afc

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000028 	.word	0x20000028
 8000234:	08006afc 	.word	0x08006afc

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <inv_init>:
 * @param inv Pointer to the inverter operation structure.
 * @param led Pointer to the LED structure.
 * @param enable_port Pointer to the GPIO port for enabling/disabling the inverter.
 * @param enable_pin Pin number for enabling/disabling the inverter.
 */
void inv_init(InverterOperation *inv, LED *led, GPIO_TypeDef *enable_port, uint16_t enable_pin) {
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
 8000534:	807b      	strh	r3, [r7, #2]
    // Initialize inverter operation structure
    inv->state = INV_STATE_STARTUP;
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	2201      	movs	r2, #1
 800053a:	729a      	strb	r2, [r3, #10]
    inv->led = led;
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	68ba      	ldr	r2, [r7, #8]
 8000540:	601a      	str	r2, [r3, #0]
    inv->enable_pin = enable_pin;
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	887a      	ldrh	r2, [r7, #2]
 8000546:	811a      	strh	r2, [r3, #8]
    inv->enable_port = enable_port;
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	605a      	str	r2, [r3, #4]
    // Add initialization of other inverter-specific variables here
}
 800054e:	bf00      	nop
 8000550:	3714      	adds	r7, #20
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
	...

0800055c <inv_FSM>:
 *
 * This function executes the finite state machine to control the inverter operation based on its current state.
 *
 * @param inv Pointer to the inverter operation structure.
 */
void inv_FSM(InverterOperation *inv) {
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
    switch (inv->state) {
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	7a9b      	ldrb	r3, [r3, #10]
 8000568:	2b03      	cmp	r3, #3
 800056a:	d81b      	bhi.n	80005a4 <inv_FSM+0x48>
 800056c:	a201      	add	r2, pc, #4	@ (adr r2, 8000574 <inv_FSM+0x18>)
 800056e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000572:	bf00      	nop
 8000574:	08000585 	.word	0x08000585
 8000578:	0800058d 	.word	0x0800058d
 800057c:	08000595 	.word	0x08000595
 8000580:	0800059d 	.word	0x0800059d
        case INV_STATE_IDLE:
            idle_handler(inv);
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f000 f813 	bl	80005b0 <idle_handler>
            break;
 800058a:	e00c      	b.n	80005a6 <inv_FSM+0x4a>
        case INV_STATE_STARTUP:
            startup_handler(inv);
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f000 f823 	bl	80005d8 <startup_handler>
            break;
 8000592:	e008      	b.n	80005a6 <inv_FSM+0x4a>
        case INV_STATE_RUNNING:
            running_handler(inv);
 8000594:	6878      	ldr	r0, [r7, #4]
 8000596:	f000 f833 	bl	8000600 <running_handler>
            break;
 800059a:	e004      	b.n	80005a6 <inv_FSM+0x4a>
        case INV_STATE_FAULT:
            fault_handler(inv);
 800059c:	6878      	ldr	r0, [r7, #4]
 800059e:	f000 f843 	bl	8000628 <fault_handler>
            break;
 80005a2:	e000      	b.n	80005a6 <inv_FSM+0x4a>
        default:
            // Invalid state, handle error
            break;
 80005a4:	bf00      	nop
    }
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop

080005b0 <idle_handler>:
 *
 * This function handles the actions and transitions for the idle state of the inverter operation.
 *
 * @param inv Pointer to the inverter operation structure.
 */
static void idle_handler(InverterOperation *inv) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
    // Perform actions required in idle state
    // Transition conditions to other states:
    // - Start startup sequence based on input condition
    // - Transition to fault state based on error conditions
    inv->led->mode = LED_MODE_OFF;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2203      	movs	r2, #3
 80005be:	719a      	strb	r2, [r3, #6]
    DISABLE(inv->enable_port, inv->enable_pin);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6858      	ldr	r0, [r3, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	891b      	ldrh	r3, [r3, #8]
 80005c8:	2200      	movs	r2, #0
 80005ca:	4619      	mov	r1, r3
 80005cc:	f003 fc36 	bl	8003e3c <HAL_GPIO_WritePin>
}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <startup_handler>:
 *
 * This function handles the actions and transitions for the startup state of the inverter operation.
 *
 * @param inv Pointer to the inverter operation structure.
 */
static void startup_handler(InverterOperation *inv) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
    // Perform actions required in startup state
    // Transition conditions to other states:
    // - Transition to running state when startup sequence completes successfully
    // - Transition to fault state based on error conditions during startup
    inv->led->mode = LED_MODE_BLINK_FAST;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2200      	movs	r2, #0
 80005e6:	719a      	strb	r2, [r3, #6]
    DISABLE(inv->enable_port, inv->enable_pin);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	6858      	ldr	r0, [r3, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	891b      	ldrh	r3, [r3, #8]
 80005f0:	2200      	movs	r2, #0
 80005f2:	4619      	mov	r1, r3
 80005f4:	f003 fc22 	bl	8003e3c <HAL_GPIO_WritePin>
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <running_handler>:
 *
 * This function handles the actions and transitions for the running state of the inverter operation.
 *
 * @param inv Pointer to the inverter operation structure.
 */
static void running_handler(InverterOperation *inv) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
    // Perform actions required in running state
    // This is where the main control loop resides
    // Monitor inverter variables, adjust control parameters, etc.
    // Transition conditions to other states:
    // - Transition to fault state based on error conditions during operation
    inv->led->mode = LED_MODE_ON;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2202      	movs	r2, #2
 800060e:	719a      	strb	r2, [r3, #6]
    ENABLE(inv->enable_port, inv->enable_pin);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	6858      	ldr	r0, [r3, #4]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	891b      	ldrh	r3, [r3, #8]
 8000618:	2201      	movs	r2, #1
 800061a:	4619      	mov	r1, r3
 800061c:	f003 fc0e 	bl	8003e3c <HAL_GPIO_WritePin>
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <fault_handler>:
 *
 * This function handles the actions and transitions for the fault state of the inverter operation.
 *
 * @param inv Pointer to the inverter operation structure.
 */
static void fault_handler(InverterOperation *inv) {
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
    // Perform actions required in fault state
    // This could involve shutting down the inverter, logging error messages, etc.
    // Transition conditions to other states:
    // - Retry startup sequence after a delay if fault condition is recoverable
    // - Transition to idle state after fault is resolved
    inv->led->mode = LED_MODE_BLINK_SLOW;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2201      	movs	r2, #1
 8000636:	719a      	strb	r2, [r3, #6]
    DISABLE(inv->enable_port, inv->enable_pin);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	6858      	ldr	r0, [r3, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	891b      	ldrh	r3, [r3, #8]
 8000640:	2200      	movs	r2, #0
 8000642:	4619      	mov	r1, r3
 8000644:	f003 fbfa 	bl	8003e3c <HAL_GPIO_WritePin>
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <getADCelec>:
  * @param  ADC_raw Pointer to the raw ADC values array.
  * @param  encoder Pointer to the encoder struct.
  * @param  measurements Pointer to the measurements struct to store the results.
  * @retval OK 0 if an error occurred, 1 if successful.
  */
uint8_t getADCelec(volatile uint32_t* ADC_raw, volatile Encoder* encoder, volatile Measurements* measurements) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af00      	add	r7, sp, #0
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	60b9      	str	r1, [r7, #8]
 800065a:	607a      	str	r2, [r7, #4]
    // Check for null pointers
    if (ADC_raw == NULL || encoder == NULL || measurements == NULL) {
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d005      	beq.n	800066e <getADCelec+0x1e>
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d002      	beq.n	800066e <getADCelec+0x1e>
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d101      	bne.n	8000672 <getADCelec+0x22>
        return 0; // Error: Null pointer detected
 800066e:	2300      	movs	r3, #0
 8000670:	e03b      	b.n	80006ea <getADCelec+0x9a>
    }

    // Calculate currents and voltage
    float ia = getLinear(ADC_raw[0], CURRENT_SLOPE, CURRENT_OFFSET);
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 80006f4 <getADCelec+0xa4>
 800067a:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 80006f8 <getADCelec+0xa8>
 800067e:	4618      	mov	r0, r3
 8000680:	f000 f840 	bl	8000704 <getLinear>
 8000684:	ed87 0a07 	vstr	s0, [r7, #28]
    float ib = getLinear(ADC_raw[1], CURRENT_SLOPE, CURRENT_OFFSET);
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	3304      	adds	r3, #4
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	eddf 0a19 	vldr	s1, [pc, #100]	@ 80006f4 <getADCelec+0xa4>
 8000692:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 80006f8 <getADCelec+0xa8>
 8000696:	4618      	mov	r0, r3
 8000698:	f000 f834 	bl	8000704 <getLinear>
 800069c:	ed87 0a06 	vstr	s0, [r7, #24]
    float ic = getLinear(ADC_raw[2], CURRENT_SLOPE, CURRENT_OFFSET);
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	3308      	adds	r3, #8
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	eddf 0a13 	vldr	s1, [pc, #76]	@ 80006f4 <getADCelec+0xa4>
 80006aa:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 80006f8 <getADCelec+0xa8>
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 f828 	bl	8000704 <getLinear>
 80006b4:	ed87 0a05 	vstr	s0, [r7, #20]
    float VDC = getLinear(ADC_raw[3], VOLTAGE_SLOPE, VOLTAGE_OFFSET);
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	330c      	adds	r3, #12
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 80006fc <getADCelec+0xac>
 80006c2:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8000700 <getADCelec+0xb0>
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 f81c 	bl	8000704 <getLinear>
 80006cc:	ed87 0a04 	vstr	s0, [r7, #16]

    // Store the measurements
    measurements->ia = ia;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	69fa      	ldr	r2, [r7, #28]
 80006d4:	601a      	str	r2, [r3, #0]
    measurements->ib = ib;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	69ba      	ldr	r2, [r7, #24]
 80006da:	605a      	str	r2, [r3, #4]
    measurements->ic = ic;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	697a      	ldr	r2, [r7, #20]
 80006e0:	609a      	str	r2, [r3, #8]
    measurements->VDC = VDC;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	693a      	ldr	r2, [r7, #16]
 80006e6:	60da      	str	r2, [r3, #12]

    return 1; // Success
 80006e8:	2301      	movs	r3, #1
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3720      	adds	r7, #32
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	3fd9afe4 	.word	0x3fd9afe4
 80006f8:	4259afe4 	.word	0x4259afe4
 80006fc:	3caaa3ad 	.word	0x3caaa3ad
 8000700:	3b78c650 	.word	0x3b78c650

08000704 <getLinear>:
  * @param  bits The ADC reading.
  * @param  slope The slope (units per volt).
  * @param  offset The offset (volts at zero).
  * @retval measurement The physical measurement.
  */
float getLinear(uint32_t bits, float slope, float offset) {
 8000704:	b480      	push	{r7}
 8000706:	b087      	sub	sp, #28
 8000708:	af00      	add	r7, sp, #0
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000710:	edc7 0a01 	vstr	s1, [r7, #4]
    // Convert ADC reading to voltage
    float voltage = (float) bits * 0.0008058608f; // Assuming 12-bit ADC and 3.3V reference (bits * (3.3 V / 4095.0 bits))
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	ee07 3a90 	vmov	s15, r3
 800071a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800071e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000758 <getLinear+0x54>
 8000722:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000726:	edc7 7a05 	vstr	s15, [r7, #20]

    // Convert voltage to physical measurement
    float measurement = (voltage - offset) * slope;
 800072a:	ed97 7a05 	vldr	s14, [r7, #20]
 800072e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000732:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000736:	ed97 7a02 	vldr	s14, [r7, #8]
 800073a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800073e:	edc7 7a04 	vstr	s15, [r7, #16]

    return measurement;
 8000742:	693b      	ldr	r3, [r7, #16]
 8000744:	ee07 3a90 	vmov	s15, r3
}
 8000748:	eeb0 0a67 	vmov.f32	s0, s15
 800074c:	371c      	adds	r7, #28
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	3a534067 	.word	0x3a534067

0800075c <LED_handler>:
 * This function handles the LED blinking modes based on the LED mode and current millisecond counter.
 *
 * @param led Pointer to the LED structure.
 * @param ms_counter Current millisecond counter.
 */
void LED_handler(LED *led, uint32_t ms_counter) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	6039      	str	r1, [r7, #0]
    switch (led->mode) {
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	799b      	ldrb	r3, [r3, #6]
 800076a:	2b03      	cmp	r3, #3
 800076c:	d858      	bhi.n	8000820 <LED_handler+0xc4>
 800076e:	a201      	add	r2, pc, #4	@ (adr r2, 8000774 <LED_handler+0x18>)
 8000770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000774:	08000785 	.word	0x08000785
 8000778:	080007bf 	.word	0x080007bf
 800077c:	080007fd 	.word	0x080007fd
 8000780:	0800080f 	.word	0x0800080f
        case LED_MODE_BLINK_FAST:
            if (ms_counter % 200 < 100) {
 8000784:	683a      	ldr	r2, [r7, #0]
 8000786:	4b29      	ldr	r3, [pc, #164]	@ (800082c <LED_handler+0xd0>)
 8000788:	fba3 1302 	umull	r1, r3, r3, r2
 800078c:	099b      	lsrs	r3, r3, #6
 800078e:	21c8      	movs	r1, #200	@ 0xc8
 8000790:	fb01 f303 	mul.w	r3, r1, r3
 8000794:	1ad3      	subs	r3, r2, r3
 8000796:	2b63      	cmp	r3, #99	@ 0x63
 8000798:	d808      	bhi.n	80007ac <LED_handler+0x50>
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_SET);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	6818      	ldr	r0, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	889b      	ldrh	r3, [r3, #4]
 80007a2:	2201      	movs	r2, #1
 80007a4:	4619      	mov	r1, r3
 80007a6:	f003 fb49 	bl	8003e3c <HAL_GPIO_WritePin>
            } else {
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
            }
            break;
 80007aa:	e03a      	b.n	8000822 <LED_handler+0xc6>
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	6818      	ldr	r0, [r3, #0]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	889b      	ldrh	r3, [r3, #4]
 80007b4:	2200      	movs	r2, #0
 80007b6:	4619      	mov	r1, r3
 80007b8:	f003 fb40 	bl	8003e3c <HAL_GPIO_WritePin>
            break;
 80007bc:	e031      	b.n	8000822 <LED_handler+0xc6>
        case LED_MODE_BLINK_SLOW:
            if (ms_counter % 1000 < 500) {
 80007be:	683a      	ldr	r2, [r7, #0]
 80007c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000830 <LED_handler+0xd4>)
 80007c2:	fba3 1302 	umull	r1, r3, r3, r2
 80007c6:	099b      	lsrs	r3, r3, #6
 80007c8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80007cc:	fb01 f303 	mul.w	r3, r1, r3
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80007d6:	d208      	bcs.n	80007ea <LED_handler+0x8e>
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_SET);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	6818      	ldr	r0, [r3, #0]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	889b      	ldrh	r3, [r3, #4]
 80007e0:	2201      	movs	r2, #1
 80007e2:	4619      	mov	r1, r3
 80007e4:	f003 fb2a 	bl	8003e3c <HAL_GPIO_WritePin>
            } else {
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
            }
            break;
 80007e8:	e01b      	b.n	8000822 <LED_handler+0xc6>
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	6818      	ldr	r0, [r3, #0]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	889b      	ldrh	r3, [r3, #4]
 80007f2:	2200      	movs	r2, #0
 80007f4:	4619      	mov	r1, r3
 80007f6:	f003 fb21 	bl	8003e3c <HAL_GPIO_WritePin>
            break;
 80007fa:	e012      	b.n	8000822 <LED_handler+0xc6>
        case LED_MODE_ON:
            HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_SET);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	6818      	ldr	r0, [r3, #0]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	889b      	ldrh	r3, [r3, #4]
 8000804:	2201      	movs	r2, #1
 8000806:	4619      	mov	r1, r3
 8000808:	f003 fb18 	bl	8003e3c <HAL_GPIO_WritePin>
            break;
 800080c:	e009      	b.n	8000822 <LED_handler+0xc6>
        case LED_MODE_OFF:
            HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	6818      	ldr	r0, [r3, #0]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	889b      	ldrh	r3, [r3, #4]
 8000816:	2200      	movs	r2, #0
 8000818:	4619      	mov	r1, r3
 800081a:	f003 fb0f 	bl	8003e3c <HAL_GPIO_WritePin>
            break;
 800081e:	e000      	b.n	8000822 <LED_handler+0xc6>
        default:
            // Invalid LED mode
            break;
 8000820:	bf00      	nop
    }
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	51eb851f 	.word	0x51eb851f
 8000830:	10624dd3 	.word	0x10624dd3

08000834 <enable_PWM>:
 *
 * This function enables PWM output for the specified timer.
 *
 * @param htim Pointer to the TIM_HandleTypeDef structure.
 */
void enable_PWM(TIM_HandleTypeDef *htim) {
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]

	//Reset the counter
//	htimX.Instance->CNT=0;

	htim->Instance->CCMR1 = 0x6868; // Set Channel 1 and Channel 2 Output Compare mode to PWM Mode
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f646 0268 	movw	r2, #26728	@ 0x6868
 8000844:	619a      	str	r2, [r3, #24]

	//	htim1.Instance->CCER = 0x888;
	htim->Instance->CCER = 0x10555;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a11      	ldr	r2, [pc, #68]	@ (8000890 <enable_PWM+0x5c>)
 800084c:	621a      	str	r2, [r3, #32]

	//Enable Main Output
	htim->Instance->BDTR |=(1<<15);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800085c:	645a      	str	r2, [r3, #68]	@ 0x44

	//Enable Counter
	htim->Instance->CR1 |=1;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f042 0201 	orr.w	r2, r2, #1
 800086c:	601a      	str	r2, [r3, #0]

    Duties duties = {0.8F,0.5F,0.2F};
 800086e:	4a09      	ldr	r2, [pc, #36]	@ (8000894 <enable_PWM+0x60>)
 8000870:	f107 030c 	add.w	r3, r7, #12
 8000874:	ca07      	ldmia	r2, {r0, r1, r2}
 8000876:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    set_PWM(htim, &duties);
 800087a:	f107 030c 	add.w	r3, r7, #12
 800087e:	4619      	mov	r1, r3
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f000 f809 	bl	8000898 <set_PWM>
}
 8000886:	bf00      	nop
 8000888:	3718      	adds	r7, #24
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	00010555 	.word	0x00010555
 8000894:	08006b14 	.word	0x08006b14

08000898 <set_PWM>:
 * This function sets the duty cycles for the PWM channels.
 *
 * @param htim Pointer to the TIM_HandleTypeDef structure.
 * @param duties Pointer to the Duties structure containing duty cycle values.
 */
void set_PWM(TIM_HandleTypeDef *htim, Duties *duties) {
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]
	htim->Instance->CCR1 = (duties->Da)*htim->Instance->ARR;
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	ed93 7a00 	vldr	s14, [r3]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008ae:	ee07 3a90 	vmov	s15, r3
 80008b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008c2:	ee17 2a90 	vmov	r2, s15
 80008c6:	635a      	str	r2, [r3, #52]	@ 0x34
	htim->Instance->CCR2 = htim->Instance->ARR - htim->Instance->CCR1;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	1a8a      	subs	r2, r1, r2
 80008da:	639a      	str	r2, [r3, #56]	@ 0x38

	htim->Instance->CCR3 = (duties->Db)*htim->Instance->ARR;
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	ed93 7a01 	vldr	s14, [r3, #4]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008e8:	ee07 3a90 	vmov	s15, r3
 80008ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008fc:	ee17 2a90 	vmov	r2, s15
 8000900:	63da      	str	r2, [r3, #60]	@ 0x3c
	htim->Instance->CCR4 = htim->Instance->ARR - htim->Instance->CCR1;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	1a8a      	subs	r2, r1, r2
 8000914:	641a      	str	r2, [r3, #64]	@ 0x40

	htim->Instance->CCR5 = (duties->Dc)*htim->Instance->ARR;
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	ed93 7a02 	vldr	s14, [r3, #8]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000922:	ee07 3a90 	vmov	s15, r3
 8000926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800092a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000936:	ee17 2a90 	vmov	r2, s15
 800093a:	659a      	str	r2, [r3, #88]	@ 0x58
	htim->Instance->CCR6 = htim->Instance->ARR - htim->Instance->CCR1;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	1a8a      	subs	r2, r1, r2
 800094e:	65da      	str	r2, [r3, #92]	@ 0x5c

}
 8000950:	bf00      	nop
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <tasks_1ms>:
 *
 * This function is called by the TIM6 IRQ handler every millisecond.
 * It increments the millisecond counter and calls the LED handler
 * for left, right, and error LEDs.
 */
void tasks_1ms(void) {
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
    // Increment millisecond counter
    ms_counter++;
 8000960:	4b0c      	ldr	r3, [pc, #48]	@ (8000994 <tasks_1ms+0x38>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	3301      	adds	r3, #1
 8000966:	4a0b      	ldr	r2, [pc, #44]	@ (8000994 <tasks_1ms+0x38>)
 8000968:	6013      	str	r3, [r2, #0]

    // Call LED handler for left, right, and error LEDs
    LED_handler(&led_left, ms_counter);
 800096a:	4b0a      	ldr	r3, [pc, #40]	@ (8000994 <tasks_1ms+0x38>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4619      	mov	r1, r3
 8000970:	4809      	ldr	r0, [pc, #36]	@ (8000998 <tasks_1ms+0x3c>)
 8000972:	f7ff fef3 	bl	800075c <LED_handler>
    LED_handler(&led_right, ms_counter);
 8000976:	4b07      	ldr	r3, [pc, #28]	@ (8000994 <tasks_1ms+0x38>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4619      	mov	r1, r3
 800097c:	4807      	ldr	r0, [pc, #28]	@ (800099c <tasks_1ms+0x40>)
 800097e:	f7ff feed 	bl	800075c <LED_handler>
    LED_handler(&led_error, ms_counter);
 8000982:	4b04      	ldr	r3, [pc, #16]	@ (8000994 <tasks_1ms+0x38>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4619      	mov	r1, r3
 8000988:	4805      	ldr	r0, [pc, #20]	@ (80009a0 <tasks_1ms+0x44>)
 800098a:	f7ff fee7 	bl	800075c <LED_handler>
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	2000007c 	.word	0x2000007c
 8000998:	20000000 	.word	0x20000000
 800099c:	20000008 	.word	0x20000008
 80009a0:	20000010 	.word	0x20000010

080009a4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009aa:	463b      	mov	r3, r7
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009b6:	4b2f      	ldr	r3, [pc, #188]	@ (8000a74 <MX_ADC1_Init+0xd0>)
 80009b8:	4a2f      	ldr	r2, [pc, #188]	@ (8000a78 <MX_ADC1_Init+0xd4>)
 80009ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009bc:	4b2d      	ldr	r3, [pc, #180]	@ (8000a74 <MX_ADC1_Init+0xd0>)
 80009be:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80009c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009c4:	4b2b      	ldr	r3, [pc, #172]	@ (8000a74 <MX_ADC1_Init+0xd0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80009ca:	4b2a      	ldr	r3, [pc, #168]	@ (8000a74 <MX_ADC1_Init+0xd0>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009d0:	4b28      	ldr	r3, [pc, #160]	@ (8000a74 <MX_ADC1_Init+0xd0>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009d6:	4b27      	ldr	r3, [pc, #156]	@ (8000a74 <MX_ADC1_Init+0xd0>)
 80009d8:	2200      	movs	r2, #0
 80009da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009de:	4b25      	ldr	r3, [pc, #148]	@ (8000a74 <MX_ADC1_Init+0xd0>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009e4:	4b23      	ldr	r3, [pc, #140]	@ (8000a74 <MX_ADC1_Init+0xd0>)
 80009e6:	4a25      	ldr	r2, [pc, #148]	@ (8000a7c <MX_ADC1_Init+0xd8>)
 80009e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009ea:	4b22      	ldr	r3, [pc, #136]	@ (8000a74 <MX_ADC1_Init+0xd0>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80009f0:	4b20      	ldr	r3, [pc, #128]	@ (8000a74 <MX_ADC1_Init+0xd0>)
 80009f2:	2203      	movs	r2, #3
 80009f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a74 <MX_ADC1_Init+0xd0>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000a74 <MX_ADC1_Init+0xd0>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a04:	481b      	ldr	r0, [pc, #108]	@ (8000a74 <MX_ADC1_Init+0xd0>)
 8000a06:	f001 fba3 	bl	8002150 <HAL_ADC_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a10:	f000 fe06 	bl	8001620 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a20:	463b      	mov	r3, r7
 8000a22:	4619      	mov	r1, r3
 8000a24:	4813      	ldr	r0, [pc, #76]	@ (8000a74 <MX_ADC1_Init+0xd0>)
 8000a26:	f001 fcef 	bl	8002408 <HAL_ADC_ConfigChannel>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a30:	f000 fdf6 	bl	8001620 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a34:	2301      	movs	r3, #1
 8000a36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a3c:	463b      	mov	r3, r7
 8000a3e:	4619      	mov	r1, r3
 8000a40:	480c      	ldr	r0, [pc, #48]	@ (8000a74 <MX_ADC1_Init+0xd0>)
 8000a42:	f001 fce1 	bl	8002408 <HAL_ADC_ConfigChannel>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000a4c:	f000 fde8 	bl	8001620 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8000a50:	2312      	movs	r3, #18
 8000a52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a54:	2303      	movs	r3, #3
 8000a56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a58:	463b      	mov	r3, r7
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <MX_ADC1_Init+0xd0>)
 8000a5e:	f001 fcd3 	bl	8002408 <HAL_ADC_ConfigChannel>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000a68:	f000 fdda 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a6c:	bf00      	nop
 8000a6e:	3710      	adds	r7, #16
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000080 	.word	0x20000080
 8000a78:	40012000 	.word	0x40012000
 8000a7c:	0f000001 	.word	0x0f000001

08000a80 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a86:	463b      	mov	r3, r7
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000a92:	4b37      	ldr	r3, [pc, #220]	@ (8000b70 <MX_ADC2_Init+0xf0>)
 8000a94:	4a37      	ldr	r2, [pc, #220]	@ (8000b74 <MX_ADC2_Init+0xf4>)
 8000a96:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a98:	4b35      	ldr	r3, [pc, #212]	@ (8000b70 <MX_ADC2_Init+0xf0>)
 8000a9a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000a9e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000aa0:	4b33      	ldr	r3, [pc, #204]	@ (8000b70 <MX_ADC2_Init+0xf0>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000aa6:	4b32      	ldr	r3, [pc, #200]	@ (8000b70 <MX_ADC2_Init+0xf0>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000aac:	4b30      	ldr	r3, [pc, #192]	@ (8000b70 <MX_ADC2_Init+0xf0>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ab2:	4b2f      	ldr	r3, [pc, #188]	@ (8000b70 <MX_ADC2_Init+0xf0>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 8000aba:	4b2d      	ldr	r3, [pc, #180]	@ (8000b70 <MX_ADC2_Init+0xf0>)
 8000abc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000ac0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000ac2:	4b2b      	ldr	r3, [pc, #172]	@ (8000b70 <MX_ADC2_Init+0xf0>)
 8000ac4:	f04f 6210 	mov.w	r2, #150994944	@ 0x9000000
 8000ac8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aca:	4b29      	ldr	r3, [pc, #164]	@ (8000b70 <MX_ADC2_Init+0xf0>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8000ad0:	4b27      	ldr	r3, [pc, #156]	@ (8000b70 <MX_ADC2_Init+0xf0>)
 8000ad2:	2204      	movs	r2, #4
 8000ad4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000ad6:	4b26      	ldr	r3, [pc, #152]	@ (8000b70 <MX_ADC2_Init+0xf0>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000ade:	4b24      	ldr	r3, [pc, #144]	@ (8000b70 <MX_ADC2_Init+0xf0>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ae4:	4822      	ldr	r0, [pc, #136]	@ (8000b70 <MX_ADC2_Init+0xf0>)
 8000ae6:	f001 fb33 	bl	8002150 <HAL_ADC_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8000af0:	f000 fd96 	bl	8001620 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000af4:	2306      	movs	r3, #6
 8000af6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000af8:	2301      	movs	r3, #1
 8000afa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000afc:	2300      	movs	r3, #0
 8000afe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b00:	463b      	mov	r3, r7
 8000b02:	4619      	mov	r1, r3
 8000b04:	481a      	ldr	r0, [pc, #104]	@ (8000b70 <MX_ADC2_Init+0xf0>)
 8000b06:	f001 fc7f 	bl	8002408 <HAL_ADC_ConfigChannel>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8000b10:	f000 fd86 	bl	8001620 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000b14:	2307      	movs	r3, #7
 8000b16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b1c:	463b      	mov	r3, r7
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4813      	ldr	r0, [pc, #76]	@ (8000b70 <MX_ADC2_Init+0xf0>)
 8000b22:	f001 fc71 	bl	8002408 <HAL_ADC_ConfigChannel>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8000b2c:	f000 fd78 	bl	8001620 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000b30:	2308      	movs	r3, #8
 8000b32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000b34:	2303      	movs	r3, #3
 8000b36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b38:	463b      	mov	r3, r7
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	480c      	ldr	r0, [pc, #48]	@ (8000b70 <MX_ADC2_Init+0xf0>)
 8000b3e:	f001 fc63 	bl	8002408 <HAL_ADC_ConfigChannel>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_ADC2_Init+0xcc>
  {
    Error_Handler();
 8000b48:	f000 fd6a 	bl	8001620 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000b4c:	2309      	movs	r3, #9
 8000b4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000b50:	2304      	movs	r3, #4
 8000b52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b54:	463b      	mov	r3, r7
 8000b56:	4619      	mov	r1, r3
 8000b58:	4805      	ldr	r0, [pc, #20]	@ (8000b70 <MX_ADC2_Init+0xf0>)
 8000b5a:	f001 fc55 	bl	8002408 <HAL_ADC_ConfigChannel>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_ADC2_Init+0xe8>
  {
    Error_Handler();
 8000b64:	f000 fd5c 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	3710      	adds	r7, #16
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	200000c8 	.word	0x200000c8
 8000b74:	40012100 	.word	0x40012100

08000b78 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b7e:	463b      	mov	r3, r7
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000b8a:	4b21      	ldr	r3, [pc, #132]	@ (8000c10 <MX_ADC3_Init+0x98>)
 8000b8c:	4a21      	ldr	r2, [pc, #132]	@ (8000c14 <MX_ADC3_Init+0x9c>)
 8000b8e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b90:	4b1f      	ldr	r3, [pc, #124]	@ (8000c10 <MX_ADC3_Init+0x98>)
 8000b92:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000b96:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000b98:	4b1d      	ldr	r3, [pc, #116]	@ (8000c10 <MX_ADC3_Init+0x98>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c10 <MX_ADC3_Init+0x98>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c10 <MX_ADC3_Init+0x98>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000baa:	4b19      	ldr	r3, [pc, #100]	@ (8000c10 <MX_ADC3_Init+0x98>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bb2:	4b17      	ldr	r3, [pc, #92]	@ (8000c10 <MX_ADC3_Init+0x98>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bb8:	4b15      	ldr	r3, [pc, #84]	@ (8000c10 <MX_ADC3_Init+0x98>)
 8000bba:	4a17      	ldr	r2, [pc, #92]	@ (8000c18 <MX_ADC3_Init+0xa0>)
 8000bbc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bbe:	4b14      	ldr	r3, [pc, #80]	@ (8000c10 <MX_ADC3_Init+0x98>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000bc4:	4b12      	ldr	r3, [pc, #72]	@ (8000c10 <MX_ADC3_Init+0x98>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000bca:	4b11      	ldr	r3, [pc, #68]	@ (8000c10 <MX_ADC3_Init+0x98>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c10 <MX_ADC3_Init+0x98>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000bd8:	480d      	ldr	r0, [pc, #52]	@ (8000c10 <MX_ADC3_Init+0x98>)
 8000bda:	f001 fab9 	bl	8002150 <HAL_ADC_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000be4:	f000 fd1c 	bl	8001620 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000be8:	230a      	movs	r3, #10
 8000bea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bec:	2301      	movs	r3, #1
 8000bee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000bf4:	463b      	mov	r3, r7
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4805      	ldr	r0, [pc, #20]	@ (8000c10 <MX_ADC3_Init+0x98>)
 8000bfa:	f001 fc05 	bl	8002408 <HAL_ADC_ConfigChannel>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000c04:	f000 fd0c 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c08:	bf00      	nop
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000110 	.word	0x20000110
 8000c14:	40012200 	.word	0x40012200
 8000c18:	0f000001 	.word	0x0f000001

08000c1c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08e      	sub	sp, #56	@ 0x38
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a93      	ldr	r2, [pc, #588]	@ (8000e88 <HAL_ADC_MspInit+0x26c>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d154      	bne.n	8000ce8 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c3e:	4b93      	ldr	r3, [pc, #588]	@ (8000e8c <HAL_ADC_MspInit+0x270>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c42:	4a92      	ldr	r2, [pc, #584]	@ (8000e8c <HAL_ADC_MspInit+0x270>)
 8000c44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c4a:	4b90      	ldr	r3, [pc, #576]	@ (8000e8c <HAL_ADC_MspInit+0x270>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c52:	623b      	str	r3, [r7, #32]
 8000c54:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	4b8d      	ldr	r3, [pc, #564]	@ (8000e8c <HAL_ADC_MspInit+0x270>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	4a8c      	ldr	r2, [pc, #560]	@ (8000e8c <HAL_ADC_MspInit+0x270>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c62:	4b8a      	ldr	r3, [pc, #552]	@ (8000e8c <HAL_ADC_MspInit+0x270>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	61fb      	str	r3, [r7, #28]
 8000c6c:	69fb      	ldr	r3, [r7, #28]
    PA0/WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ia_L_Pin|ib_L_Pin|ic_L_Pin|VDC_L_Pin;
 8000c6e:	230f      	movs	r3, #15
 8000c70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c72:	2303      	movs	r3, #3
 8000c74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4883      	ldr	r0, [pc, #524]	@ (8000e90 <HAL_ADC_MspInit+0x274>)
 8000c82:	f002 ff2f 	bl	8003ae4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c86:	4b83      	ldr	r3, [pc, #524]	@ (8000e94 <HAL_ADC_MspInit+0x278>)
 8000c88:	4a83      	ldr	r2, [pc, #524]	@ (8000e98 <HAL_ADC_MspInit+0x27c>)
 8000c8a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c8c:	4b81      	ldr	r3, [pc, #516]	@ (8000e94 <HAL_ADC_MspInit+0x278>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c92:	4b80      	ldr	r3, [pc, #512]	@ (8000e94 <HAL_ADC_MspInit+0x278>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c98:	4b7e      	ldr	r3, [pc, #504]	@ (8000e94 <HAL_ADC_MspInit+0x278>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c9e:	4b7d      	ldr	r3, [pc, #500]	@ (8000e94 <HAL_ADC_MspInit+0x278>)
 8000ca0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ca4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ca6:	4b7b      	ldr	r3, [pc, #492]	@ (8000e94 <HAL_ADC_MspInit+0x278>)
 8000ca8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000cac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000cae:	4b79      	ldr	r3, [pc, #484]	@ (8000e94 <HAL_ADC_MspInit+0x278>)
 8000cb0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000cb4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000cb6:	4b77      	ldr	r3, [pc, #476]	@ (8000e94 <HAL_ADC_MspInit+0x278>)
 8000cb8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cbc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000cbe:	4b75      	ldr	r3, [pc, #468]	@ (8000e94 <HAL_ADC_MspInit+0x278>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cc4:	4b73      	ldr	r3, [pc, #460]	@ (8000e94 <HAL_ADC_MspInit+0x278>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cca:	4872      	ldr	r0, [pc, #456]	@ (8000e94 <HAL_ADC_MspInit+0x278>)
 8000ccc:	f002 fb92 	bl	80033f4 <HAL_DMA_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000cd6:	f000 fca3 	bl	8001620 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a6d      	ldr	r2, [pc, #436]	@ (8000e94 <HAL_ADC_MspInit+0x278>)
 8000cde:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ce0:	4a6c      	ldr	r2, [pc, #432]	@ (8000e94 <HAL_ADC_MspInit+0x278>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000ce6:	e0cb      	b.n	8000e80 <HAL_ADC_MspInit+0x264>
  else if(adcHandle->Instance==ADC2)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a6b      	ldr	r2, [pc, #428]	@ (8000e9c <HAL_ADC_MspInit+0x280>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d16d      	bne.n	8000dce <HAL_ADC_MspInit+0x1b2>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000cf2:	4b66      	ldr	r3, [pc, #408]	@ (8000e8c <HAL_ADC_MspInit+0x270>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cf6:	4a65      	ldr	r2, [pc, #404]	@ (8000e8c <HAL_ADC_MspInit+0x270>)
 8000cf8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cfe:	4b63      	ldr	r3, [pc, #396]	@ (8000e8c <HAL_ADC_MspInit+0x270>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d06:	61bb      	str	r3, [r7, #24]
 8000d08:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	4b60      	ldr	r3, [pc, #384]	@ (8000e8c <HAL_ADC_MspInit+0x270>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	4a5f      	ldr	r2, [pc, #380]	@ (8000e8c <HAL_ADC_MspInit+0x270>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d16:	4b5d      	ldr	r3, [pc, #372]	@ (8000e8c <HAL_ADC_MspInit+0x270>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	617b      	str	r3, [r7, #20]
 8000d20:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d22:	4b5a      	ldr	r3, [pc, #360]	@ (8000e8c <HAL_ADC_MspInit+0x270>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	4a59      	ldr	r2, [pc, #356]	@ (8000e8c <HAL_ADC_MspInit+0x270>)
 8000d28:	f043 0302 	orr.w	r3, r3, #2
 8000d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2e:	4b57      	ldr	r3, [pc, #348]	@ (8000e8c <HAL_ADC_MspInit+0x270>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	f003 0302 	and.w	r3, r3, #2
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ia_R_Pin|ib_R_Pin;
 8000d3a:	23c0      	movs	r3, #192	@ 0xc0
 8000d3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4850      	ldr	r0, [pc, #320]	@ (8000e90 <HAL_ADC_MspInit+0x274>)
 8000d4e:	f002 fec9 	bl	8003ae4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ic_R_Pin|VDC_R_Pin;
 8000d52:	2303      	movs	r3, #3
 8000d54:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d56:	2303      	movs	r3, #3
 8000d58:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d62:	4619      	mov	r1, r3
 8000d64:	484e      	ldr	r0, [pc, #312]	@ (8000ea0 <HAL_ADC_MspInit+0x284>)
 8000d66:	f002 febd 	bl	8003ae4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8000d6a:	4b4e      	ldr	r3, [pc, #312]	@ (8000ea4 <HAL_ADC_MspInit+0x288>)
 8000d6c:	4a4e      	ldr	r2, [pc, #312]	@ (8000ea8 <HAL_ADC_MspInit+0x28c>)
 8000d6e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8000d70:	4b4c      	ldr	r3, [pc, #304]	@ (8000ea4 <HAL_ADC_MspInit+0x288>)
 8000d72:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000d76:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d78:	4b4a      	ldr	r3, [pc, #296]	@ (8000ea4 <HAL_ADC_MspInit+0x288>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d7e:	4b49      	ldr	r3, [pc, #292]	@ (8000ea4 <HAL_ADC_MspInit+0x288>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000d84:	4b47      	ldr	r3, [pc, #284]	@ (8000ea4 <HAL_ADC_MspInit+0x288>)
 8000d86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d8a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d8c:	4b45      	ldr	r3, [pc, #276]	@ (8000ea4 <HAL_ADC_MspInit+0x288>)
 8000d8e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d92:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d94:	4b43      	ldr	r3, [pc, #268]	@ (8000ea4 <HAL_ADC_MspInit+0x288>)
 8000d96:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d9a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000d9c:	4b41      	ldr	r3, [pc, #260]	@ (8000ea4 <HAL_ADC_MspInit+0x288>)
 8000d9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000da2:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000da4:	4b3f      	ldr	r3, [pc, #252]	@ (8000ea4 <HAL_ADC_MspInit+0x288>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000daa:	4b3e      	ldr	r3, [pc, #248]	@ (8000ea4 <HAL_ADC_MspInit+0x288>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000db0:	483c      	ldr	r0, [pc, #240]	@ (8000ea4 <HAL_ADC_MspInit+0x288>)
 8000db2:	f002 fb1f 	bl	80033f4 <HAL_DMA_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <HAL_ADC_MspInit+0x1a4>
      Error_Handler();
 8000dbc:	f000 fc30 	bl	8001620 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a38      	ldr	r2, [pc, #224]	@ (8000ea4 <HAL_ADC_MspInit+0x288>)
 8000dc4:	639a      	str	r2, [r3, #56]	@ 0x38
 8000dc6:	4a37      	ldr	r2, [pc, #220]	@ (8000ea4 <HAL_ADC_MspInit+0x288>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000dcc:	e058      	b.n	8000e80 <HAL_ADC_MspInit+0x264>
  else if(adcHandle->Instance==ADC3)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a36      	ldr	r2, [pc, #216]	@ (8000eac <HAL_ADC_MspInit+0x290>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d153      	bne.n	8000e80 <HAL_ADC_MspInit+0x264>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000dd8:	4b2c      	ldr	r3, [pc, #176]	@ (8000e8c <HAL_ADC_MspInit+0x270>)
 8000dda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ddc:	4a2b      	ldr	r2, [pc, #172]	@ (8000e8c <HAL_ADC_MspInit+0x270>)
 8000dde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000de2:	6453      	str	r3, [r2, #68]	@ 0x44
 8000de4:	4b29      	ldr	r3, [pc, #164]	@ (8000e8c <HAL_ADC_MspInit+0x270>)
 8000de6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df0:	4b26      	ldr	r3, [pc, #152]	@ (8000e8c <HAL_ADC_MspInit+0x270>)
 8000df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df4:	4a25      	ldr	r2, [pc, #148]	@ (8000e8c <HAL_ADC_MspInit+0x270>)
 8000df6:	f043 0304 	orr.w	r3, r3, #4
 8000dfa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfc:	4b23      	ldr	r3, [pc, #140]	@ (8000e8c <HAL_ADC_MspInit+0x270>)
 8000dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e00:	f003 0304 	and.w	r3, r3, #4
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Tinv_L_Pin|Tinv_R_Pin|Tmot_L_Pin|Tmot_R_Pin;
 8000e08:	230f      	movs	r3, #15
 8000e0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4825      	ldr	r0, [pc, #148]	@ (8000eb0 <HAL_ADC_MspInit+0x294>)
 8000e1c:	f002 fe62 	bl	8003ae4 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8000e20:	4b24      	ldr	r3, [pc, #144]	@ (8000eb4 <HAL_ADC_MspInit+0x298>)
 8000e22:	4a25      	ldr	r2, [pc, #148]	@ (8000eb8 <HAL_ADC_MspInit+0x29c>)
 8000e24:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000e26:	4b23      	ldr	r3, [pc, #140]	@ (8000eb4 <HAL_ADC_MspInit+0x298>)
 8000e28:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000e2c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e2e:	4b21      	ldr	r3, [pc, #132]	@ (8000eb4 <HAL_ADC_MspInit+0x298>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e34:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb4 <HAL_ADC_MspInit+0x298>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000e3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000eb4 <HAL_ADC_MspInit+0x298>)
 8000e3c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e40:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e42:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb4 <HAL_ADC_MspInit+0x298>)
 8000e44:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e48:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb4 <HAL_ADC_MspInit+0x298>)
 8000e4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e50:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8000e52:	4b18      	ldr	r3, [pc, #96]	@ (8000eb4 <HAL_ADC_MspInit+0x298>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000e58:	4b16      	ldr	r3, [pc, #88]	@ (8000eb4 <HAL_ADC_MspInit+0x298>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e5e:	4b15      	ldr	r3, [pc, #84]	@ (8000eb4 <HAL_ADC_MspInit+0x298>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000e64:	4813      	ldr	r0, [pc, #76]	@ (8000eb4 <HAL_ADC_MspInit+0x298>)
 8000e66:	f002 fac5 	bl	80033f4 <HAL_DMA_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <HAL_ADC_MspInit+0x258>
      Error_Handler();
 8000e70:	f000 fbd6 	bl	8001620 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a0f      	ldr	r2, [pc, #60]	@ (8000eb4 <HAL_ADC_MspInit+0x298>)
 8000e78:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e7a:	4a0e      	ldr	r2, [pc, #56]	@ (8000eb4 <HAL_ADC_MspInit+0x298>)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000e80:	bf00      	nop
 8000e82:	3738      	adds	r7, #56	@ 0x38
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40012000 	.word	0x40012000
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40020000 	.word	0x40020000
 8000e94:	20000158 	.word	0x20000158
 8000e98:	40026410 	.word	0x40026410
 8000e9c:	40012100 	.word	0x40012100
 8000ea0:	40020400 	.word	0x40020400
 8000ea4:	200001b8 	.word	0x200001b8
 8000ea8:	40026440 	.word	0x40026440
 8000eac:	40012200 	.word	0x40012200
 8000eb0:	40020800 	.word	0x40020800
 8000eb4:	20000218 	.word	0x20000218
 8000eb8:	40026428 	.word	0x40026428

08000ebc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000ec0:	4b17      	ldr	r3, [pc, #92]	@ (8000f20 <MX_CAN1_Init+0x64>)
 8000ec2:	4a18      	ldr	r2, [pc, #96]	@ (8000f24 <MX_CAN1_Init+0x68>)
 8000ec4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 8000ec6:	4b16      	ldr	r3, [pc, #88]	@ (8000f20 <MX_CAN1_Init+0x64>)
 8000ec8:	220c      	movs	r2, #12
 8000eca:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ecc:	4b14      	ldr	r3, [pc, #80]	@ (8000f20 <MX_CAN1_Init+0x64>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ed2:	4b13      	ldr	r3, [pc, #76]	@ (8000f20 <MX_CAN1_Init+0x64>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	@ (8000f20 <MX_CAN1_Init+0x64>)
 8000eda:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000ede:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f20 <MX_CAN1_Init+0x64>)
 8000ee2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000ee6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8000f20 <MX_CAN1_Init+0x64>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000eee:	4b0c      	ldr	r3, [pc, #48]	@ (8000f20 <MX_CAN1_Init+0x64>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8000f20 <MX_CAN1_Init+0x64>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000efa:	4b09      	ldr	r3, [pc, #36]	@ (8000f20 <MX_CAN1_Init+0x64>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f00:	4b07      	ldr	r3, [pc, #28]	@ (8000f20 <MX_CAN1_Init+0x64>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f06:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <MX_CAN1_Init+0x64>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f0c:	4804      	ldr	r0, [pc, #16]	@ (8000f20 <MX_CAN1_Init+0x64>)
 8000f0e:	f001 fd4d 	bl	80029ac <HAL_CAN_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000f18:	f000 fb82 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000278 	.word	0x20000278
 8000f24:	40006400 	.word	0x40006400

08000f28 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	@ 0x28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a1f      	ldr	r2, [pc, #124]	@ (8000fc4 <HAL_CAN_MspInit+0x9c>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d137      	bne.n	8000fba <HAL_CAN_MspInit+0x92>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f4a:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc8 <HAL_CAN_MspInit+0xa0>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4e:	4a1e      	ldr	r2, [pc, #120]	@ (8000fc8 <HAL_CAN_MspInit+0xa0>)
 8000f50:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f56:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc8 <HAL_CAN_MspInit+0xa0>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f62:	4b19      	ldr	r3, [pc, #100]	@ (8000fc8 <HAL_CAN_MspInit+0xa0>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	4a18      	ldr	r2, [pc, #96]	@ (8000fc8 <HAL_CAN_MspInit+0xa0>)
 8000f68:	f043 0308 	orr.w	r3, r3, #8
 8000f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6e:	4b16      	ldr	r3, [pc, #88]	@ (8000fc8 <HAL_CAN_MspInit+0xa0>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f72:	f003 0308 	and.w	r3, r3, #8
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f86:	2303      	movs	r3, #3
 8000f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f8a:	2309      	movs	r3, #9
 8000f8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	4619      	mov	r1, r3
 8000f94:	480d      	ldr	r0, [pc, #52]	@ (8000fcc <HAL_CAN_MspInit+0xa4>)
 8000f96:	f002 fda5 	bl	8003ae4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	2014      	movs	r0, #20
 8000fa0:	f002 f913 	bl	80031ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000fa4:	2014      	movs	r0, #20
 8000fa6:	f002 f92c 	bl	8003202 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2100      	movs	r1, #0
 8000fae:	2015      	movs	r0, #21
 8000fb0:	f002 f90b 	bl	80031ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000fb4:	2015      	movs	r0, #21
 8000fb6:	f002 f924 	bl	8003202 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000fba:	bf00      	nop
 8000fbc:	3728      	adds	r7, #40	@ 0x28
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40006400 	.word	0x40006400
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40020c00 	.word	0x40020c00

08000fd0 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000fde:	4b0f      	ldr	r3, [pc, #60]	@ (800101c <MX_DAC_Init+0x4c>)
 8000fe0:	4a0f      	ldr	r2, [pc, #60]	@ (8001020 <MX_DAC_Init+0x50>)
 8000fe2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000fe4:	480d      	ldr	r0, [pc, #52]	@ (800101c <MX_DAC_Init+0x4c>)
 8000fe6:	f002 f926 	bl	8003236 <HAL_DAC_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000ff0:	f000 fb16 	bl	8001620 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ffc:	463b      	mov	r3, r7
 8000ffe:	2200      	movs	r2, #0
 8001000:	4619      	mov	r1, r3
 8001002:	4806      	ldr	r0, [pc, #24]	@ (800101c <MX_DAC_Init+0x4c>)
 8001004:	f002 f99d 	bl	8003342 <HAL_DAC_ConfigChannel>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800100e:	f000 fb07 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200002a0 	.word	0x200002a0
 8001020:	40007400 	.word	0x40007400

08001024 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08a      	sub	sp, #40	@ 0x28
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a19      	ldr	r2, [pc, #100]	@ (80010a8 <HAL_DAC_MspInit+0x84>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d12b      	bne.n	800109e <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001046:	4b19      	ldr	r3, [pc, #100]	@ (80010ac <HAL_DAC_MspInit+0x88>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104a:	4a18      	ldr	r2, [pc, #96]	@ (80010ac <HAL_DAC_MspInit+0x88>)
 800104c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001050:	6413      	str	r3, [r2, #64]	@ 0x40
 8001052:	4b16      	ldr	r3, [pc, #88]	@ (80010ac <HAL_DAC_MspInit+0x88>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001056:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105e:	4b13      	ldr	r3, [pc, #76]	@ (80010ac <HAL_DAC_MspInit+0x88>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	4a12      	ldr	r2, [pc, #72]	@ (80010ac <HAL_DAC_MspInit+0x88>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6313      	str	r3, [r2, #48]	@ 0x30
 800106a:	4b10      	ldr	r3, [pc, #64]	@ (80010ac <HAL_DAC_MspInit+0x88>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = DAC_Pin;
 8001076:	2310      	movs	r3, #16
 8001078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800107a:	2303      	movs	r3, #3
 800107c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC_GPIO_Port, &GPIO_InitStruct);
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	4619      	mov	r1, r3
 8001088:	4809      	ldr	r0, [pc, #36]	@ (80010b0 <HAL_DAC_MspInit+0x8c>)
 800108a:	f002 fd2b 	bl	8003ae4 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2100      	movs	r1, #0
 8001092:	2036      	movs	r0, #54	@ 0x36
 8001094:	f002 f899 	bl	80031ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001098:	2036      	movs	r0, #54	@ 0x36
 800109a:	f002 f8b2 	bl	8003202 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800109e:	bf00      	nop
 80010a0:	3728      	adds	r7, #40	@ 0x28
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40007400 	.word	0x40007400
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40020000 	.word	0x40020000

080010b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010ba:	4b14      	ldr	r3, [pc, #80]	@ (800110c <MX_DMA_Init+0x58>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	4a13      	ldr	r2, [pc, #76]	@ (800110c <MX_DMA_Init+0x58>)
 80010c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c6:	4b11      	ldr	r3, [pc, #68]	@ (800110c <MX_DMA_Init+0x58>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2100      	movs	r1, #0
 80010d6:	2038      	movs	r0, #56	@ 0x38
 80010d8:	f002 f877 	bl	80031ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80010dc:	2038      	movs	r0, #56	@ 0x38
 80010de:	f002 f890 	bl	8003202 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2100      	movs	r1, #0
 80010e6:	2039      	movs	r0, #57	@ 0x39
 80010e8:	f002 f86f 	bl	80031ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80010ec:	2039      	movs	r0, #57	@ 0x39
 80010ee:	f002 f888 	bl	8003202 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2100      	movs	r1, #0
 80010f6:	203a      	movs	r0, #58	@ 0x3a
 80010f8:	f002 f867 	bl	80031ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80010fc:	203a      	movs	r0, #58	@ 0x3a
 80010fe:	f002 f880 	bl	8003202 <HAL_NVIC_EnableIRQ>

}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40023800 	.word	0x40023800

08001110 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08c      	sub	sp, #48	@ 0x30
 8001114:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001116:	f107 031c 	add.w	r3, r7, #28
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
 8001124:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001126:	4b87      	ldr	r3, [pc, #540]	@ (8001344 <MX_GPIO_Init+0x234>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	4a86      	ldr	r2, [pc, #536]	@ (8001344 <MX_GPIO_Init+0x234>)
 800112c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001130:	6313      	str	r3, [r2, #48]	@ 0x30
 8001132:	4b84      	ldr	r3, [pc, #528]	@ (8001344 <MX_GPIO_Init+0x234>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800113a:	61bb      	str	r3, [r7, #24]
 800113c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800113e:	4b81      	ldr	r3, [pc, #516]	@ (8001344 <MX_GPIO_Init+0x234>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	4a80      	ldr	r2, [pc, #512]	@ (8001344 <MX_GPIO_Init+0x234>)
 8001144:	f043 0304 	orr.w	r3, r3, #4
 8001148:	6313      	str	r3, [r2, #48]	@ 0x30
 800114a:	4b7e      	ldr	r3, [pc, #504]	@ (8001344 <MX_GPIO_Init+0x234>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	f003 0304 	and.w	r3, r3, #4
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	4b7b      	ldr	r3, [pc, #492]	@ (8001344 <MX_GPIO_Init+0x234>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	4a7a      	ldr	r2, [pc, #488]	@ (8001344 <MX_GPIO_Init+0x234>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6313      	str	r3, [r2, #48]	@ 0x30
 8001162:	4b78      	ldr	r3, [pc, #480]	@ (8001344 <MX_GPIO_Init+0x234>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800116e:	4b75      	ldr	r3, [pc, #468]	@ (8001344 <MX_GPIO_Init+0x234>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	4a74      	ldr	r2, [pc, #464]	@ (8001344 <MX_GPIO_Init+0x234>)
 8001174:	f043 0302 	orr.w	r3, r3, #2
 8001178:	6313      	str	r3, [r2, #48]	@ 0x30
 800117a:	4b72      	ldr	r3, [pc, #456]	@ (8001344 <MX_GPIO_Init+0x234>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001186:	4b6f      	ldr	r3, [pc, #444]	@ (8001344 <MX_GPIO_Init+0x234>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	4a6e      	ldr	r2, [pc, #440]	@ (8001344 <MX_GPIO_Init+0x234>)
 800118c:	f043 0310 	orr.w	r3, r3, #16
 8001190:	6313      	str	r3, [r2, #48]	@ 0x30
 8001192:	4b6c      	ldr	r3, [pc, #432]	@ (8001344 <MX_GPIO_Init+0x234>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	f003 0310 	and.w	r3, r3, #16
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800119e:	4b69      	ldr	r3, [pc, #420]	@ (8001344 <MX_GPIO_Init+0x234>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	4a68      	ldr	r2, [pc, #416]	@ (8001344 <MX_GPIO_Init+0x234>)
 80011a4:	f043 0308 	orr.w	r3, r3, #8
 80011a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011aa:	4b66      	ldr	r3, [pc, #408]	@ (8001344 <MX_GPIO_Init+0x234>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ae:	f003 0308 	and.w	r3, r3, #8
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_R_GPIO_Port, ENABLE_R_Pin, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2104      	movs	r1, #4
 80011ba:	4863      	ldr	r0, [pc, #396]	@ (8001348 <MX_GPIO_Init+0x238>)
 80011bc:	f002 fe3e 	bl	8003e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_L_GPIO_Port, ENABLE_L_Pin, GPIO_PIN_RESET);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2180      	movs	r1, #128	@ 0x80
 80011c4:	4861      	ldr	r0, [pc, #388]	@ (800134c <MX_GPIO_Init+0x23c>)
 80011c6:	f002 fe39 	bl	8003e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_LEFT_Pin|LED_RIGHT_Pin|LED_ERR_Pin, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2170      	movs	r1, #112	@ 0x70
 80011ce:	4860      	ldr	r0, [pc, #384]	@ (8001350 <MX_GPIO_Init+0x240>)
 80011d0:	f002 fe34 	bl	8003e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SC_det_Pin;
 80011d4:	2310      	movs	r3, #16
 80011d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d8:	2300      	movs	r3, #0
 80011da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SC_det_GPIO_Port, &GPIO_InitStruct);
 80011e0:	f107 031c 	add.w	r3, r7, #28
 80011e4:	4619      	mov	r1, r3
 80011e6:	485b      	ldr	r0, [pc, #364]	@ (8001354 <MX_GPIO_Init+0x244>)
 80011e8:	f002 fc7c 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_R_Pin;
 80011ec:	2304      	movs	r3, #4
 80011ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f0:	2301      	movs	r3, #1
 80011f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	2300      	movs	r3, #0
 80011fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ENABLE_R_GPIO_Port, &GPIO_InitStruct);
 80011fc:	f107 031c 	add.w	r3, r7, #28
 8001200:	4619      	mov	r1, r3
 8001202:	4851      	ldr	r0, [pc, #324]	@ (8001348 <MX_GPIO_Init+0x238>)
 8001204:	f002 fc6e 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_L_Pin;
 8001208:	2380      	movs	r3, #128	@ 0x80
 800120a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120c:	2301      	movs	r3, #1
 800120e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001214:	2300      	movs	r3, #0
 8001216:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ENABLE_L_GPIO_Port, &GPIO_InitStruct);
 8001218:	f107 031c 	add.w	r3, r7, #28
 800121c:	4619      	mov	r1, r3
 800121e:	484b      	ldr	r0, [pc, #300]	@ (800134c <MX_GPIO_Init+0x23c>)
 8001220:	f002 fc60 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = WRN_L_Pin|WRN_R_Pin;
 8001224:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001228:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800122a:	2300      	movs	r3, #0
 800122c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001232:	f107 031c 	add.w	r3, r7, #28
 8001236:	4619      	mov	r1, r3
 8001238:	4844      	ldr	r0, [pc, #272]	@ (800134c <MX_GPIO_Init+0x23c>)
 800123a:	f002 fc53 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Z_R_Pin;
 800123e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001242:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001244:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001248:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Z_R_GPIO_Port, &GPIO_InitStruct);
 800124e:	f107 031c 	add.w	r3, r7, #28
 8001252:	4619      	mov	r1, r3
 8001254:	483c      	ldr	r0, [pc, #240]	@ (8001348 <MX_GPIO_Init+0x238>)
 8001256:	f002 fc45 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Z_L_Pin;
 800125a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800125e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001260:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001264:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Z_L_GPIO_Port, &GPIO_InitStruct);
 800126a:	f107 031c 	add.w	r3, r7, #28
 800126e:	4619      	mov	r1, r3
 8001270:	4837      	ldr	r0, [pc, #220]	@ (8001350 <MX_GPIO_Init+0x240>)
 8001272:	f002 fc37 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIP_R_Pin;
 8001276:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800127a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800127c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001280:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TRIP_R_GPIO_Port, &GPIO_InitStruct);
 8001286:	f107 031c 	add.w	r3, r7, #28
 800128a:	4619      	mov	r1, r3
 800128c:	4831      	ldr	r0, [pc, #196]	@ (8001354 <MX_GPIO_Init+0x244>)
 800128e:	f002 fc29 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIP_L_Pin;
 8001292:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001296:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001298:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800129c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TRIP_L_GPIO_Port, &GPIO_InitStruct);
 80012a2:	f107 031c 	add.w	r3, r7, #28
 80012a6:	4619      	mov	r1, r3
 80012a8:	482b      	ldr	r0, [pc, #172]	@ (8001358 <MX_GPIO_Init+0x248>)
 80012aa:	f002 fc1b 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b4:	2300      	movs	r3, #0
 80012b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012bc:	f107 031c 	add.w	r3, r7, #28
 80012c0:	4619      	mov	r1, r3
 80012c2:	4825      	ldr	r0, [pc, #148]	@ (8001358 <MX_GPIO_Init+0x248>)
 80012c4:	f002 fc0e 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80012c8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80012cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ce:	2302      	movs	r3, #2
 80012d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d6:	2303      	movs	r3, #3
 80012d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012da:	230a      	movs	r3, #10
 80012dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012de:	f107 031c 	add.w	r3, r7, #28
 80012e2:	4619      	mov	r1, r3
 80012e4:	481c      	ldr	r0, [pc, #112]	@ (8001358 <MX_GPIO_Init+0x248>)
 80012e6:	f002 fbfd 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIR_Pin;
 80012ea:	2308      	movs	r3, #8
 80012ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ee:	2300      	movs	r3, #0
 80012f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 80012f6:	f107 031c 	add.w	r3, r7, #28
 80012fa:	4619      	mov	r1, r3
 80012fc:	4814      	ldr	r0, [pc, #80]	@ (8001350 <MX_GPIO_Init+0x240>)
 80012fe:	f002 fbf1 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LED_LEFT_Pin|LED_RIGHT_Pin;
 8001302:	2330      	movs	r3, #48	@ 0x30
 8001304:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001306:	2301      	movs	r3, #1
 8001308:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130e:	2300      	movs	r3, #0
 8001310:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001312:	f107 031c 	add.w	r3, r7, #28
 8001316:	4619      	mov	r1, r3
 8001318:	480d      	ldr	r0, [pc, #52]	@ (8001350 <MX_GPIO_Init+0x240>)
 800131a:	f002 fbe3 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_ERR_Pin;
 800131e:	2340      	movs	r3, #64	@ 0x40
 8001320:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001322:	2301      	movs	r3, #1
 8001324:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001326:	2302      	movs	r3, #2
 8001328:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132a:	2300      	movs	r3, #0
 800132c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_ERR_GPIO_Port, &GPIO_InitStruct);
 800132e:	f107 031c 	add.w	r3, r7, #28
 8001332:	4619      	mov	r1, r3
 8001334:	4806      	ldr	r0, [pc, #24]	@ (8001350 <MX_GPIO_Init+0x240>)
 8001336:	f002 fbd5 	bl	8003ae4 <HAL_GPIO_Init>

}
 800133a:	bf00      	nop
 800133c:	3730      	adds	r7, #48	@ 0x30
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40023800 	.word	0x40023800
 8001348:	40020400 	.word	0x40020400
 800134c:	40021000 	.word	0x40021000
 8001350:	40020c00 	.word	0x40020c00
 8001354:	40020800 	.word	0x40020800
 8001358:	40020000 	.word	0x40020000

0800135c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001360:	4b1b      	ldr	r3, [pc, #108]	@ (80013d0 <MX_I2C1_Init+0x74>)
 8001362:	4a1c      	ldr	r2, [pc, #112]	@ (80013d4 <MX_I2C1_Init+0x78>)
 8001364:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8001366:	4b1a      	ldr	r3, [pc, #104]	@ (80013d0 <MX_I2C1_Init+0x74>)
 8001368:	4a1b      	ldr	r2, [pc, #108]	@ (80013d8 <MX_I2C1_Init+0x7c>)
 800136a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800136c:	4b18      	ldr	r3, [pc, #96]	@ (80013d0 <MX_I2C1_Init+0x74>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001372:	4b17      	ldr	r3, [pc, #92]	@ (80013d0 <MX_I2C1_Init+0x74>)
 8001374:	2201      	movs	r2, #1
 8001376:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001378:	4b15      	ldr	r3, [pc, #84]	@ (80013d0 <MX_I2C1_Init+0x74>)
 800137a:	2200      	movs	r2, #0
 800137c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800137e:	4b14      	ldr	r3, [pc, #80]	@ (80013d0 <MX_I2C1_Init+0x74>)
 8001380:	2200      	movs	r2, #0
 8001382:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001384:	4b12      	ldr	r3, [pc, #72]	@ (80013d0 <MX_I2C1_Init+0x74>)
 8001386:	2200      	movs	r2, #0
 8001388:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800138a:	4b11      	ldr	r3, [pc, #68]	@ (80013d0 <MX_I2C1_Init+0x74>)
 800138c:	2200      	movs	r2, #0
 800138e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001390:	4b0f      	ldr	r3, [pc, #60]	@ (80013d0 <MX_I2C1_Init+0x74>)
 8001392:	2200      	movs	r2, #0
 8001394:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001396:	480e      	ldr	r0, [pc, #56]	@ (80013d0 <MX_I2C1_Init+0x74>)
 8001398:	f002 fd6a 	bl	8003e70 <HAL_I2C_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80013a2:	f000 f93d 	bl	8001620 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013a6:	2100      	movs	r1, #0
 80013a8:	4809      	ldr	r0, [pc, #36]	@ (80013d0 <MX_I2C1_Init+0x74>)
 80013aa:	f002 fdf1 	bl	8003f90 <HAL_I2CEx_ConfigAnalogFilter>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80013b4:	f000 f934 	bl	8001620 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013b8:	2100      	movs	r1, #0
 80013ba:	4805      	ldr	r0, [pc, #20]	@ (80013d0 <MX_I2C1_Init+0x74>)
 80013bc:	f002 fe33 	bl	8004026 <HAL_I2CEx_ConfigDigitalFilter>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013c6:	f000 f92b 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	200002b4 	.word	0x200002b4
 80013d4:	40005400 	.word	0x40005400
 80013d8:	20404768 	.word	0x20404768

080013dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b0ae      	sub	sp, #184	@ 0xb8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	2290      	movs	r2, #144	@ 0x90
 80013fa:	2100      	movs	r1, #0
 80013fc:	4618      	mov	r0, r3
 80013fe:	f005 fb51 	bl	8006aa4 <memset>
  if(i2cHandle->Instance==I2C1)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a21      	ldr	r2, [pc, #132]	@ (800148c <HAL_I2C_MspInit+0xb0>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d13b      	bne.n	8001484 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800140c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001410:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001412:	2300      	movs	r3, #0
 8001414:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	4618      	mov	r0, r3
 800141c:	f003 fb00 	bl	8004a20 <HAL_RCCEx_PeriphCLKConfig>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001426:	f000 f8fb 	bl	8001620 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800142a:	4b19      	ldr	r3, [pc, #100]	@ (8001490 <HAL_I2C_MspInit+0xb4>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142e:	4a18      	ldr	r2, [pc, #96]	@ (8001490 <HAL_I2C_MspInit+0xb4>)
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	6313      	str	r3, [r2, #48]	@ 0x30
 8001436:	4b16      	ldr	r3, [pc, #88]	@ (8001490 <HAL_I2C_MspInit+0xb4>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	613b      	str	r3, [r7, #16]
 8001440:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001442:	23c0      	movs	r3, #192	@ 0xc0
 8001444:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001448:	2312      	movs	r3, #18
 800144a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001454:	2303      	movs	r3, #3
 8001456:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800145a:	2304      	movs	r3, #4
 800145c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001460:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001464:	4619      	mov	r1, r3
 8001466:	480b      	ldr	r0, [pc, #44]	@ (8001494 <HAL_I2C_MspInit+0xb8>)
 8001468:	f002 fb3c 	bl	8003ae4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800146c:	4b08      	ldr	r3, [pc, #32]	@ (8001490 <HAL_I2C_MspInit+0xb4>)
 800146e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001470:	4a07      	ldr	r2, [pc, #28]	@ (8001490 <HAL_I2C_MspInit+0xb4>)
 8001472:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001476:	6413      	str	r3, [r2, #64]	@ 0x40
 8001478:	4b05      	ldr	r3, [pc, #20]	@ (8001490 <HAL_I2C_MspInit+0xb4>)
 800147a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001484:	bf00      	nop
 8001486:	37b8      	adds	r7, #184	@ 0xb8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40005400 	.word	0x40005400
 8001490:	40023800 	.word	0x40023800
 8001494:	40020400 	.word	0x40020400

08001498 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800149c:	f000 fdfb 	bl	8002096 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014a0:	f000 f850 	bl	8001544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014a4:	f7ff fe34 	bl	8001110 <MX_GPIO_Init>
  MX_DMA_Init();
 80014a8:	f7ff fe04 	bl	80010b4 <MX_DMA_Init>
  MX_ADC1_Init();
 80014ac:	f7ff fa7a 	bl	80009a4 <MX_ADC1_Init>
  MX_CAN1_Init();
 80014b0:	f7ff fd04 	bl	8000ebc <MX_CAN1_Init>
  MX_USB_OTG_FS_USB_Init();
 80014b4:	f000 fdbe 	bl	8002034 <MX_USB_OTG_FS_USB_Init>
  MX_ADC2_Init();
 80014b8:	f7ff fae2 	bl	8000a80 <MX_ADC2_Init>
  MX_ADC3_Init();
 80014bc:	f7ff fb5c 	bl	8000b78 <MX_ADC3_Init>
  MX_DAC_Init();
 80014c0:	f7ff fd86 	bl	8000fd0 <MX_DAC_Init>
  MX_I2C1_Init();
 80014c4:	f7ff ff4a 	bl	800135c <MX_I2C1_Init>
  MX_TIM1_Init();
 80014c8:	f000 f98e 	bl	80017e8 <MX_TIM1_Init>
  MX_TIM8_Init();
 80014cc:	f000 fb46 	bl	8001b5c <MX_TIM8_Init>
  MX_TIM2_Init();
 80014d0:	f000 fa50 	bl	8001974 <MX_TIM2_Init>
  MX_TIM4_Init();
 80014d4:	f000 faac 	bl	8001a30 <MX_TIM4_Init>
  MX_TIM6_Init();
 80014d8:	f000 fb0a 	bl	8001af0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim1);
 80014dc:	480f      	ldr	r0, [pc, #60]	@ (800151c <main+0x84>)
 80014de:	f003 ff1f 	bl	8005320 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Base_Start_IT(&htim6);
 80014e2:	480f      	ldr	r0, [pc, #60]	@ (8001520 <main+0x88>)
 80014e4:	f003 ff1c 	bl	8005320 <HAL_TIM_Base_Start_IT>



  HAL_ADC_Start_DMA(&hadc2, (uint32_t *) ADC_LEFT_raw,4);
 80014e8:	2204      	movs	r2, #4
 80014ea:	490e      	ldr	r1, [pc, #56]	@ (8001524 <main+0x8c>)
 80014ec:	480e      	ldr	r0, [pc, #56]	@ (8001528 <main+0x90>)
 80014ee:	f000 fe73 	bl	80021d8 <HAL_ADC_Start_DMA>

  inv_init(&invLeft, &led_left, ENABLE_L_GPIO_Port, ENABLE_L_Pin);
 80014f2:	2380      	movs	r3, #128	@ 0x80
 80014f4:	4a0d      	ldr	r2, [pc, #52]	@ (800152c <main+0x94>)
 80014f6:	490e      	ldr	r1, [pc, #56]	@ (8001530 <main+0x98>)
 80014f8:	480e      	ldr	r0, [pc, #56]	@ (8001534 <main+0x9c>)
 80014fa:	f7ff f815 	bl	8000528 <inv_init>
  inv_init(&invRight, &led_right, ENABLE_R_GPIO_Port, ENABLE_R_Pin);
 80014fe:	2304      	movs	r3, #4
 8001500:	4a0d      	ldr	r2, [pc, #52]	@ (8001538 <main+0xa0>)
 8001502:	490e      	ldr	r1, [pc, #56]	@ (800153c <main+0xa4>)
 8001504:	480e      	ldr	r0, [pc, #56]	@ (8001540 <main+0xa8>)
 8001506:	f7ff f80f 	bl	8000528 <inv_init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

      // Run FSM for left inverter
	  inv_FSM(&invLeft);
 800150a:	480a      	ldr	r0, [pc, #40]	@ (8001534 <main+0x9c>)
 800150c:	f7ff f826 	bl	800055c <inv_FSM>

      // Run FSM for right inverter
	  inv_FSM(&invRight);
 8001510:	480b      	ldr	r0, [pc, #44]	@ (8001540 <main+0xa8>)
 8001512:	f7ff f823 	bl	800055c <inv_FSM>
	  inv_FSM(&invLeft);
 8001516:	bf00      	nop
 8001518:	e7f7      	b.n	800150a <main+0x72>
 800151a:	bf00      	nop
 800151c:	20000320 	.word	0x20000320
 8001520:	20000404 	.word	0x20000404
 8001524:	20000040 	.word	0x20000040
 8001528:	200000c8 	.word	0x200000c8
 800152c:	40021000 	.word	0x40021000
 8001530:	20000000 	.word	0x20000000
 8001534:	20000308 	.word	0x20000308
 8001538:	40020400 	.word	0x40020400
 800153c:	20000008 	.word	0x20000008
 8001540:	20000314 	.word	0x20000314

08001544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b094      	sub	sp, #80	@ 0x50
 8001548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800154a:	f107 031c 	add.w	r3, r7, #28
 800154e:	2234      	movs	r2, #52	@ 0x34
 8001550:	2100      	movs	r1, #0
 8001552:	4618      	mov	r0, r3
 8001554:	f005 faa6 	bl	8006aa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001558:	f107 0308 	add.w	r3, r7, #8
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001568:	4b2b      	ldr	r3, [pc, #172]	@ (8001618 <SystemClock_Config+0xd4>)
 800156a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156c:	4a2a      	ldr	r2, [pc, #168]	@ (8001618 <SystemClock_Config+0xd4>)
 800156e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001572:	6413      	str	r3, [r2, #64]	@ 0x40
 8001574:	4b28      	ldr	r3, [pc, #160]	@ (8001618 <SystemClock_Config+0xd4>)
 8001576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001578:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001580:	4b26      	ldr	r3, [pc, #152]	@ (800161c <SystemClock_Config+0xd8>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a25      	ldr	r2, [pc, #148]	@ (800161c <SystemClock_Config+0xd8>)
 8001586:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800158a:	6013      	str	r3, [r2, #0]
 800158c:	4b23      	ldr	r3, [pc, #140]	@ (800161c <SystemClock_Config+0xd8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001594:	603b      	str	r3, [r7, #0]
 8001596:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001598:	2301      	movs	r3, #1
 800159a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800159c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a2:	2302      	movs	r3, #2
 80015a4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80015aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 10;
 80015ac:	230a      	movs	r3, #10
 80015ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80015b0:	23d8      	movs	r3, #216	@ 0xd8
 80015b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015b4:	2302      	movs	r3, #2
 80015b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80015b8:	2309      	movs	r3, #9
 80015ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015bc:	2302      	movs	r3, #2
 80015be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015c0:	f107 031c 	add.w	r3, r7, #28
 80015c4:	4618      	mov	r0, r3
 80015c6:	f002 fdcb 	bl	8004160 <HAL_RCC_OscConfig>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80015d0:	f000 f826 	bl	8001620 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80015d4:	f002 fd74 	bl	80040c0 <HAL_PWREx_EnableOverDrive>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80015de:	f000 f81f 	bl	8001620 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015e2:	230f      	movs	r3, #15
 80015e4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015e6:	2302      	movs	r3, #2
 80015e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015ee:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80015f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015f8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80015fa:	f107 0308 	add.w	r3, r7, #8
 80015fe:	2107      	movs	r1, #7
 8001600:	4618      	mov	r0, r3
 8001602:	f003 f85b 	bl	80046bc <HAL_RCC_ClockConfig>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800160c:	f000 f808 	bl	8001620 <Error_Handler>
  }
}
 8001610:	bf00      	nop
 8001612:	3750      	adds	r7, #80	@ 0x50
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40023800 	.word	0x40023800
 800161c:	40007000 	.word	0x40007000

08001620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001624:	b672      	cpsid	i
}
 8001626:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001628:	bf00      	nop
 800162a:	e7fd      	b.n	8001628 <Error_Handler+0x8>

0800162c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001632:	4b0f      	ldr	r3, [pc, #60]	@ (8001670 <HAL_MspInit+0x44>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001636:	4a0e      	ldr	r2, [pc, #56]	@ (8001670 <HAL_MspInit+0x44>)
 8001638:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800163c:	6413      	str	r3, [r2, #64]	@ 0x40
 800163e:	4b0c      	ldr	r3, [pc, #48]	@ (8001670 <HAL_MspInit+0x44>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164a:	4b09      	ldr	r3, [pc, #36]	@ (8001670 <HAL_MspInit+0x44>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164e:	4a08      	ldr	r2, [pc, #32]	@ (8001670 <HAL_MspInit+0x44>)
 8001650:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001654:	6453      	str	r3, [r2, #68]	@ 0x44
 8001656:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <HAL_MspInit+0x44>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800165a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800165e:	603b      	str	r3, [r7, #0]
 8001660:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40023800 	.word	0x40023800

08001674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001678:	bf00      	nop
 800167a:	e7fd      	b.n	8001678 <NMI_Handler+0x4>

0800167c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001680:	bf00      	nop
 8001682:	e7fd      	b.n	8001680 <HardFault_Handler+0x4>

08001684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001688:	bf00      	nop
 800168a:	e7fd      	b.n	8001688 <MemManage_Handler+0x4>

0800168c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001690:	bf00      	nop
 8001692:	e7fd      	b.n	8001690 <BusFault_Handler+0x4>

08001694 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001698:	bf00      	nop
 800169a:	e7fd      	b.n	8001698 <UsageFault_Handler+0x4>

0800169c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ca:	f000 fd21 	bl	8002110 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
	...

080016d4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80016d8:	4802      	ldr	r0, [pc, #8]	@ (80016e4 <CAN1_RX0_IRQHandler+0x10>)
 80016da:	f001 fa62 	bl	8002ba2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000278 	.word	0x20000278

080016e8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80016ec:	4802      	ldr	r0, [pc, #8]	@ (80016f8 <CAN1_RX1_IRQHandler+0x10>)
 80016ee:	f001 fa58 	bl	8002ba2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000278 	.word	0x20000278

080016fc <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001700:	4802      	ldr	r0, [pc, #8]	@ (800170c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001702:	f003 ff9e 	bl	8005642 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000320 	.word	0x20000320

08001710 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001714:	4806      	ldr	r0, [pc, #24]	@ (8001730 <TIM1_UP_TIM10_IRQHandler+0x20>)
 8001716:	f003 ff94 	bl	8005642 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  getADCelec(ADC_LEFT_raw, &encoder_LEFT, &measurements_LEFT);
 800171a:	4a06      	ldr	r2, [pc, #24]	@ (8001734 <TIM1_UP_TIM10_IRQHandler+0x24>)
 800171c:	4906      	ldr	r1, [pc, #24]	@ (8001738 <TIM1_UP_TIM10_IRQHandler+0x28>)
 800171e:	4807      	ldr	r0, [pc, #28]	@ (800173c <TIM1_UP_TIM10_IRQHandler+0x2c>)
 8001720:	f7fe ff96 	bl	8000650 <getADCelec>

  enable_PWM(&htim1);
 8001724:	4802      	ldr	r0, [pc, #8]	@ (8001730 <TIM1_UP_TIM10_IRQHandler+0x20>)
 8001726:	f7ff f885 	bl	8000834 <enable_PWM>

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000320 	.word	0x20000320
 8001734:	2000006c 	.word	0x2000006c
 8001738:	20000050 	.word	0x20000050
 800173c:	20000040 	.word	0x20000040

08001740 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001744:	4802      	ldr	r0, [pc, #8]	@ (8001750 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001746:	f003 ff7c 	bl	8005642 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000320 	.word	0x20000320

08001754 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001758:	4802      	ldr	r0, [pc, #8]	@ (8001764 <TIM1_CC_IRQHandler+0x10>)
 800175a:	f003 ff72 	bl	8005642 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000320 	.word	0x20000320

08001768 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 800176c:	4804      	ldr	r0, [pc, #16]	@ (8001780 <TIM6_DAC_IRQHandler+0x18>)
 800176e:	f001 fd84 	bl	800327a <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8001772:	4804      	ldr	r0, [pc, #16]	@ (8001784 <TIM6_DAC_IRQHandler+0x1c>)
 8001774:	f003 ff65 	bl	8005642 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  tasks_1ms();
 8001778:	f7ff f8f0 	bl	800095c <tasks_1ms>
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}
 8001780:	200002a0 	.word	0x200002a0
 8001784:	20000404 	.word	0x20000404

08001788 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800178c:	4802      	ldr	r0, [pc, #8]	@ (8001798 <DMA2_Stream0_IRQHandler+0x10>)
 800178e:	f001 ff3f 	bl	8003610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000158 	.word	0x20000158

0800179c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80017a0:	4802      	ldr	r0, [pc, #8]	@ (80017ac <DMA2_Stream1_IRQHandler+0x10>)
 80017a2:	f001 ff35 	bl	8003610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000218 	.word	0x20000218

080017b0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80017b4:	4802      	ldr	r0, [pc, #8]	@ (80017c0 <DMA2_Stream2_IRQHandler+0x10>)
 80017b6:	f001 ff2b 	bl	8003610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	200001b8 	.word	0x200001b8

080017c4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c8:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <SystemInit+0x20>)
 80017ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017ce:	4a05      	ldr	r2, [pc, #20]	@ (80017e4 <SystemInit+0x20>)
 80017d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b09a      	sub	sp, #104	@ 0x68
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ee:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017fc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001808:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]
 8001818:	615a      	str	r2, [r3, #20]
 800181a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800181c:	1d3b      	adds	r3, r7, #4
 800181e:	222c      	movs	r2, #44	@ 0x2c
 8001820:	2100      	movs	r1, #0
 8001822:	4618      	mov	r0, r3
 8001824:	f005 f93e 	bl	8006aa4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001828:	4b50      	ldr	r3, [pc, #320]	@ (800196c <MX_TIM1_Init+0x184>)
 800182a:	4a51      	ldr	r2, [pc, #324]	@ (8001970 <MX_TIM1_Init+0x188>)
 800182c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800182e:	4b4f      	ldr	r3, [pc, #316]	@ (800196c <MX_TIM1_Init+0x184>)
 8001830:	2200      	movs	r2, #0
 8001832:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001834:	4b4d      	ldr	r3, [pc, #308]	@ (800196c <MX_TIM1_Init+0x184>)
 8001836:	2220      	movs	r2, #32
 8001838:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 216000000*TS - 1;
 800183a:	4b4c      	ldr	r3, [pc, #304]	@ (800196c <MX_TIM1_Init+0x184>)
 800183c:	f241 02df 	movw	r2, #4319	@ 0x10df
 8001840:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001842:	4b4a      	ldr	r3, [pc, #296]	@ (800196c <MX_TIM1_Init+0x184>)
 8001844:	2200      	movs	r2, #0
 8001846:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001848:	4b48      	ldr	r3, [pc, #288]	@ (800196c <MX_TIM1_Init+0x184>)
 800184a:	2200      	movs	r2, #0
 800184c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800184e:	4b47      	ldr	r3, [pc, #284]	@ (800196c <MX_TIM1_Init+0x184>)
 8001850:	2280      	movs	r2, #128	@ 0x80
 8001852:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001854:	4845      	ldr	r0, [pc, #276]	@ (800196c <MX_TIM1_Init+0x184>)
 8001856:	f003 fd0b 	bl	8005270 <HAL_TIM_Base_Init>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001860:	f7ff fede 	bl	8001620 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001864:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001868:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800186a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800186e:	4619      	mov	r1, r3
 8001870:	483e      	ldr	r0, [pc, #248]	@ (800196c <MX_TIM1_Init+0x184>)
 8001872:	f004 fa2f 	bl	8005cd4 <HAL_TIM_ConfigClockSource>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800187c:	f7ff fed0 	bl	8001620 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001880:	483a      	ldr	r0, [pc, #232]	@ (800196c <MX_TIM1_Init+0x184>)
 8001882:	f003 fe26 	bl	80054d2 <HAL_TIM_PWM_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800188c:	f7ff fec8 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001890:	2320      	movs	r3, #32
 8001892:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001894:	2300      	movs	r3, #0
 8001896:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001898:	2300      	movs	r3, #0
 800189a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800189c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80018a0:	4619      	mov	r1, r3
 80018a2:	4832      	ldr	r0, [pc, #200]	@ (800196c <MX_TIM1_Init+0x184>)
 80018a4:	f004 ffd4 	bl	8006850 <HAL_TIMEx_MasterConfigSynchronization>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80018ae:	f7ff feb7 	bl	8001620 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018b2:	2360      	movs	r3, #96	@ 0x60
 80018b4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = (216000000*TS - 1)/2;
 80018b6:	f640 036f 	movw	r3, #2159	@ 0x86f
 80018ba:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018bc:	2300      	movs	r3, #0
 80018be:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80018c0:	2308      	movs	r3, #8
 80018c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018c4:	2300      	movs	r3, #0
 80018c6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 80018c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018cc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018ce:	2300      	movs	r3, #0
 80018d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018d2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80018d6:	2200      	movs	r2, #0
 80018d8:	4619      	mov	r1, r3
 80018da:	4824      	ldr	r0, [pc, #144]	@ (800196c <MX_TIM1_Init+0x184>)
 80018dc:	f004 f8e6 	bl	8005aac <HAL_TIM_PWM_ConfigChannel>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 80018e6:	f7ff fe9b 	bl	8001620 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018ea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80018ee:	2204      	movs	r2, #4
 80018f0:	4619      	mov	r1, r3
 80018f2:	481e      	ldr	r0, [pc, #120]	@ (800196c <MX_TIM1_Init+0x184>)
 80018f4:	f004 f8da 	bl	8005aac <HAL_TIM_PWM_ConfigChannel>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_TIM1_Init+0x11a>
  {
    Error_Handler();
 80018fe:	f7ff fe8f 	bl	8001620 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001902:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001906:	2208      	movs	r2, #8
 8001908:	4619      	mov	r1, r3
 800190a:	4818      	ldr	r0, [pc, #96]	@ (800196c <MX_TIM1_Init+0x184>)
 800190c:	f004 f8ce 	bl	8005aac <HAL_TIM_PWM_ConfigChannel>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_TIM1_Init+0x132>
  {
    Error_Handler();
 8001916:	f7ff fe83 	bl	8001620 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800191a:	2300      	movs	r3, #0
 800191c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800191e:	2300      	movs	r3, #0
 8001920:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800192e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001932:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001934:	2300      	movs	r3, #0
 8001936:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001938:	2300      	movs	r3, #0
 800193a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800193c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001940:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001942:	2300      	movs	r3, #0
 8001944:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001946:	2300      	movs	r3, #0
 8001948:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800194a:	1d3b      	adds	r3, r7, #4
 800194c:	4619      	mov	r1, r3
 800194e:	4807      	ldr	r0, [pc, #28]	@ (800196c <MX_TIM1_Init+0x184>)
 8001950:	f005 f80c 	bl	800696c <HAL_TIMEx_ConfigBreakDeadTime>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM1_Init+0x176>
  {
    Error_Handler();
 800195a:	f7ff fe61 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800195e:	4803      	ldr	r0, [pc, #12]	@ (800196c <MX_TIM1_Init+0x184>)
 8001960:	f000 facc 	bl	8001efc <HAL_TIM_MspPostInit>

}
 8001964:	bf00      	nop
 8001966:	3768      	adds	r7, #104	@ 0x68
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20000320 	.word	0x20000320
 8001970:	40010000 	.word	0x40010000

08001974 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b088      	sub	sp, #32
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	605a      	str	r2, [r3, #4]
 8001984:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001986:	1d3b      	adds	r3, r7, #4
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001992:	4b26      	ldr	r3, [pc, #152]	@ (8001a2c <MX_TIM2_Init+0xb8>)
 8001994:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001998:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800199a:	4b24      	ldr	r3, [pc, #144]	@ (8001a2c <MX_TIM2_Init+0xb8>)
 800199c:	2200      	movs	r2, #0
 800199e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a0:	4b22      	ldr	r3, [pc, #136]	@ (8001a2c <MX_TIM2_Init+0xb8>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80019a6:	4b21      	ldr	r3, [pc, #132]	@ (8001a2c <MX_TIM2_Init+0xb8>)
 80019a8:	f04f 32ff 	mov.w	r2, #4294967295
 80019ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ae:	4b1f      	ldr	r3, [pc, #124]	@ (8001a2c <MX_TIM2_Init+0xb8>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a2c <MX_TIM2_Init+0xb8>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80019ba:	481c      	ldr	r0, [pc, #112]	@ (8001a2c <MX_TIM2_Init+0xb8>)
 80019bc:	f003 fdea 	bl	8005594 <HAL_TIM_IC_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80019c6:	f7ff fe2b 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019d2:	f107 0314 	add.w	r3, r7, #20
 80019d6:	4619      	mov	r1, r3
 80019d8:	4814      	ldr	r0, [pc, #80]	@ (8001a2c <MX_TIM2_Init+0xb8>)
 80019da:	f004 ff39 	bl	8006850 <HAL_TIMEx_MasterConfigSynchronization>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80019e4:	f7ff fe1c 	bl	8001620 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80019e8:	2300      	movs	r3, #0
 80019ea:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80019ec:	2301      	movs	r3, #1
 80019ee:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80019f8:	1d3b      	adds	r3, r7, #4
 80019fa:	2200      	movs	r2, #0
 80019fc:	4619      	mov	r1, r3
 80019fe:	480b      	ldr	r0, [pc, #44]	@ (8001a2c <MX_TIM2_Init+0xb8>)
 8001a00:	f003 ffb8 	bl	8005974 <HAL_TIM_IC_ConfigChannel>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001a0a:	f7ff fe09 	bl	8001620 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001a0e:	1d3b      	adds	r3, r7, #4
 8001a10:	2208      	movs	r2, #8
 8001a12:	4619      	mov	r1, r3
 8001a14:	4805      	ldr	r0, [pc, #20]	@ (8001a2c <MX_TIM2_Init+0xb8>)
 8001a16:	f003 ffad 	bl	8005974 <HAL_TIM_IC_ConfigChannel>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001a20:	f7ff fdfe 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a24:	bf00      	nop
 8001a26:	3720      	adds	r7, #32
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	2000036c 	.word	0x2000036c

08001a30 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b088      	sub	sp, #32
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a42:	1d3b      	adds	r3, r7, #4
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a4e:	4b26      	ldr	r3, [pc, #152]	@ (8001ae8 <MX_TIM4_Init+0xb8>)
 8001a50:	4a26      	ldr	r2, [pc, #152]	@ (8001aec <MX_TIM4_Init+0xbc>)
 8001a52:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001a54:	4b24      	ldr	r3, [pc, #144]	@ (8001ae8 <MX_TIM4_Init+0xb8>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a5a:	4b23      	ldr	r3, [pc, #140]	@ (8001ae8 <MX_TIM4_Init+0xb8>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001a60:	4b21      	ldr	r3, [pc, #132]	@ (8001ae8 <MX_TIM4_Init+0xb8>)
 8001a62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a66:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a68:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae8 <MX_TIM4_Init+0xb8>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae8 <MX_TIM4_Init+0xb8>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001a74:	481c      	ldr	r0, [pc, #112]	@ (8001ae8 <MX_TIM4_Init+0xb8>)
 8001a76:	f003 fd8d 	bl	8005594 <HAL_TIM_IC_Init>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001a80:	f7ff fdce 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	4619      	mov	r1, r3
 8001a92:	4815      	ldr	r0, [pc, #84]	@ (8001ae8 <MX_TIM4_Init+0xb8>)
 8001a94:	f004 fedc 	bl	8006850 <HAL_TIMEx_MasterConfigSynchronization>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8001a9e:	f7ff fdbf 	bl	8001620 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001ab2:	1d3b      	adds	r3, r7, #4
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	480b      	ldr	r0, [pc, #44]	@ (8001ae8 <MX_TIM4_Init+0xb8>)
 8001aba:	f003 ff5b 	bl	8005974 <HAL_TIM_IC_ConfigChannel>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001ac4:	f7ff fdac 	bl	8001620 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001ac8:	1d3b      	adds	r3, r7, #4
 8001aca:	2208      	movs	r2, #8
 8001acc:	4619      	mov	r1, r3
 8001ace:	4806      	ldr	r0, [pc, #24]	@ (8001ae8 <MX_TIM4_Init+0xb8>)
 8001ad0:	f003 ff50 	bl	8005974 <HAL_TIM_IC_ConfigChannel>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8001ada:	f7ff fda1 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ade:	bf00      	nop
 8001ae0:	3720      	adds	r7, #32
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	200003b8 	.word	0x200003b8
 8001aec:	40000800 	.word	0x40000800

08001af0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b00:	4b14      	ldr	r3, [pc, #80]	@ (8001b54 <MX_TIM6_Init+0x64>)
 8001b02:	4a15      	ldr	r2, [pc, #84]	@ (8001b58 <MX_TIM6_Init+0x68>)
 8001b04:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1;
 8001b06:	4b13      	ldr	r3, [pc, #76]	@ (8001b54 <MX_TIM6_Init+0x64>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b0c:	4b11      	ldr	r3, [pc, #68]	@ (8001b54 <MX_TIM6_Init+0x64>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 53999;
 8001b12:	4b10      	ldr	r3, [pc, #64]	@ (8001b54 <MX_TIM6_Init+0x64>)
 8001b14:	f24d 22ef 	movw	r2, #53999	@ 0xd2ef
 8001b18:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b54 <MX_TIM6_Init+0x64>)
 8001b1c:	2280      	movs	r2, #128	@ 0x80
 8001b1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b20:	480c      	ldr	r0, [pc, #48]	@ (8001b54 <MX_TIM6_Init+0x64>)
 8001b22:	f003 fba5 	bl	8005270 <HAL_TIM_Base_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001b2c:	f7ff fd78 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b30:	2320      	movs	r3, #32
 8001b32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b34:	2300      	movs	r3, #0
 8001b36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b38:	1d3b      	adds	r3, r7, #4
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4805      	ldr	r0, [pc, #20]	@ (8001b54 <MX_TIM6_Init+0x64>)
 8001b3e:	f004 fe87 	bl	8006850 <HAL_TIMEx_MasterConfigSynchronization>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001b48:	f7ff fd6a 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b4c:	bf00      	nop
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20000404 	.word	0x20000404
 8001b58:	40001000 	.word	0x40001000

08001b5c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b09a      	sub	sp, #104	@ 0x68
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b62:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	605a      	str	r2, [r3, #4]
 8001b6c:	609a      	str	r2, [r3, #8]
 8001b6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b70:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b7c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
 8001b8c:	615a      	str	r2, [r3, #20]
 8001b8e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b90:	1d3b      	adds	r3, r7, #4
 8001b92:	222c      	movs	r2, #44	@ 0x2c
 8001b94:	2100      	movs	r1, #0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f004 ff84 	bl	8006aa4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001b9c:	4b54      	ldr	r3, [pc, #336]	@ (8001cf0 <MX_TIM8_Init+0x194>)
 8001b9e:	4a55      	ldr	r2, [pc, #340]	@ (8001cf4 <MX_TIM8_Init+0x198>)
 8001ba0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001ba2:	4b53      	ldr	r3, [pc, #332]	@ (8001cf0 <MX_TIM8_Init+0x194>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba8:	4b51      	ldr	r3, [pc, #324]	@ (8001cf0 <MX_TIM8_Init+0x194>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001bae:	4b50      	ldr	r3, [pc, #320]	@ (8001cf0 <MX_TIM8_Init+0x194>)
 8001bb0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bb4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb6:	4b4e      	ldr	r3, [pc, #312]	@ (8001cf0 <MX_TIM8_Init+0x194>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001bbc:	4b4c      	ldr	r3, [pc, #304]	@ (8001cf0 <MX_TIM8_Init+0x194>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc2:	4b4b      	ldr	r3, [pc, #300]	@ (8001cf0 <MX_TIM8_Init+0x194>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001bc8:	4849      	ldr	r0, [pc, #292]	@ (8001cf0 <MX_TIM8_Init+0x194>)
 8001bca:	f003 fb51 	bl	8005270 <HAL_TIM_Base_Init>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001bd4:	f7ff fd24 	bl	8001620 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bdc:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001bde:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001be2:	4619      	mov	r1, r3
 8001be4:	4842      	ldr	r0, [pc, #264]	@ (8001cf0 <MX_TIM8_Init+0x194>)
 8001be6:	f004 f875 	bl	8005cd4 <HAL_TIM_ConfigClockSource>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001bf0:	f7ff fd16 	bl	8001620 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001bf4:	483e      	ldr	r0, [pc, #248]	@ (8001cf0 <MX_TIM8_Init+0x194>)
 8001bf6:	f003 fc6c 	bl	80054d2 <HAL_TIM_PWM_Init>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001c00:	f7ff fd0e 	bl	8001620 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8001c04:	483a      	ldr	r0, [pc, #232]	@ (8001cf0 <MX_TIM8_Init+0x194>)
 8001c06:	f003 fc03 	bl	8005410 <HAL_TIM_OC_Init>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_TIM8_Init+0xb8>
  {
    Error_Handler();
 8001c10:	f7ff fd06 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c14:	2300      	movs	r3, #0
 8001c16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001c20:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001c24:	4619      	mov	r1, r3
 8001c26:	4832      	ldr	r0, [pc, #200]	@ (8001cf0 <MX_TIM8_Init+0x194>)
 8001c28:	f004 fe12 	bl	8006850 <HAL_TIMEx_MasterConfigSynchronization>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_TIM8_Init+0xda>
  {
    Error_Handler();
 8001c32:	f7ff fcf5 	bl	8001620 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c36:	2360      	movs	r3, #96	@ 0x60
 8001c38:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c42:	2300      	movs	r3, #0
 8001c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c46:	2300      	movs	r3, #0
 8001c48:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c52:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c56:	2200      	movs	r2, #0
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4825      	ldr	r0, [pc, #148]	@ (8001cf0 <MX_TIM8_Init+0x194>)
 8001c5c:	f003 ff26 	bl	8005aac <HAL_TIM_PWM_ConfigChannel>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8001c66:	f7ff fcdb 	bl	8001620 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c6a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c6e:	2204      	movs	r2, #4
 8001c70:	4619      	mov	r1, r3
 8001c72:	481f      	ldr	r0, [pc, #124]	@ (8001cf0 <MX_TIM8_Init+0x194>)
 8001c74:	f003 ff1a 	bl	8005aac <HAL_TIM_PWM_ConfigChannel>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 8001c7e:	f7ff fccf 	bl	8001620 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001c82:	2300      	movs	r3, #0
 8001c84:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c86:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c8a:	2208      	movs	r2, #8
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4818      	ldr	r0, [pc, #96]	@ (8001cf0 <MX_TIM8_Init+0x194>)
 8001c90:	f003 fdf6 	bl	8005880 <HAL_TIM_OC_ConfigChannel>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001c9a:	f7ff fcc1 	bl	8001620 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cb2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cb6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001cc0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001cc4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001cce:	1d3b      	adds	r3, r7, #4
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4807      	ldr	r0, [pc, #28]	@ (8001cf0 <MX_TIM8_Init+0x194>)
 8001cd4:	f004 fe4a 	bl	800696c <HAL_TIMEx_ConfigBreakDeadTime>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_TIM8_Init+0x186>
  {
    Error_Handler();
 8001cde:	f7ff fc9f 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001ce2:	4803      	ldr	r0, [pc, #12]	@ (8001cf0 <MX_TIM8_Init+0x194>)
 8001ce4:	f000 f90a 	bl	8001efc <HAL_TIM_MspPostInit>

}
 8001ce8:	bf00      	nop
 8001cea:	3768      	adds	r7, #104	@ 0x68
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20000450 	.word	0x20000450
 8001cf4:	40010400 	.word	0x40010400

08001cf8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a2f      	ldr	r2, [pc, #188]	@ (8001dc4 <HAL_TIM_Base_MspInit+0xcc>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d12c      	bne.n	8001d64 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d0a:	4b2f      	ldr	r3, [pc, #188]	@ (8001dc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0e:	4a2e      	ldr	r2, [pc, #184]	@ (8001dc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d16:	4b2c      	ldr	r3, [pc, #176]	@ (8001dc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001d22:	2200      	movs	r2, #0
 8001d24:	2100      	movs	r1, #0
 8001d26:	2018      	movs	r0, #24
 8001d28:	f001 fa4f 	bl	80031ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001d2c:	2018      	movs	r0, #24
 8001d2e:	f001 fa68 	bl	8003202 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001d32:	2200      	movs	r2, #0
 8001d34:	2100      	movs	r1, #0
 8001d36:	2019      	movs	r0, #25
 8001d38:	f001 fa47 	bl	80031ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001d3c:	2019      	movs	r0, #25
 8001d3e:	f001 fa60 	bl	8003202 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001d42:	2200      	movs	r2, #0
 8001d44:	2100      	movs	r1, #0
 8001d46:	201a      	movs	r0, #26
 8001d48:	f001 fa3f 	bl	80031ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001d4c:	201a      	movs	r0, #26
 8001d4e:	f001 fa58 	bl	8003202 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001d52:	2200      	movs	r2, #0
 8001d54:	2100      	movs	r1, #0
 8001d56:	201b      	movs	r0, #27
 8001d58:	f001 fa37 	bl	80031ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001d5c:	201b      	movs	r0, #27
 8001d5e:	f001 fa50 	bl	8003202 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001d62:	e02a      	b.n	8001dba <HAL_TIM_Base_MspInit+0xc2>
  else if(tim_baseHandle->Instance==TIM6)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a18      	ldr	r2, [pc, #96]	@ (8001dcc <HAL_TIM_Base_MspInit+0xd4>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d114      	bne.n	8001d98 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001d6e:	4b16      	ldr	r3, [pc, #88]	@ (8001dc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d72:	4a15      	ldr	r2, [pc, #84]	@ (8001dc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001d74:	f043 0310 	orr.w	r3, r3, #16
 8001d78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d7a:	4b13      	ldr	r3, [pc, #76]	@ (8001dc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7e:	f003 0310 	and.w	r3, r3, #16
 8001d82:	613b      	str	r3, [r7, #16]
 8001d84:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001d86:	2200      	movs	r2, #0
 8001d88:	2100      	movs	r1, #0
 8001d8a:	2036      	movs	r0, #54	@ 0x36
 8001d8c:	f001 fa1d 	bl	80031ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d90:	2036      	movs	r0, #54	@ 0x36
 8001d92:	f001 fa36 	bl	8003202 <HAL_NVIC_EnableIRQ>
}
 8001d96:	e010      	b.n	8001dba <HAL_TIM_Base_MspInit+0xc2>
  else if(tim_baseHandle->Instance==TIM8)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a0c      	ldr	r2, [pc, #48]	@ (8001dd0 <HAL_TIM_Base_MspInit+0xd8>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d10b      	bne.n	8001dba <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001da2:	4b09      	ldr	r3, [pc, #36]	@ (8001dc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da6:	4a08      	ldr	r2, [pc, #32]	@ (8001dc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001da8:	f043 0302 	orr.w	r3, r3, #2
 8001dac:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dae:	4b06      	ldr	r3, [pc, #24]	@ (8001dc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]
}
 8001dba:	bf00      	nop
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40010000 	.word	0x40010000
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40001000 	.word	0x40001000
 8001dd0:	40010400 	.word	0x40010400

08001dd4 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08c      	sub	sp, #48	@ 0x30
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	f107 031c 	add.w	r3, r7, #28
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001df4:	d146      	bne.n	8001e84 <HAL_TIM_IC_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001df6:	4b3c      	ldr	r3, [pc, #240]	@ (8001ee8 <HAL_TIM_IC_MspInit+0x114>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfa:	4a3b      	ldr	r2, [pc, #236]	@ (8001ee8 <HAL_TIM_IC_MspInit+0x114>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e02:	4b39      	ldr	r3, [pc, #228]	@ (8001ee8 <HAL_TIM_IC_MspInit+0x114>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	61bb      	str	r3, [r7, #24]
 8001e0c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e0e:	4b36      	ldr	r3, [pc, #216]	@ (8001ee8 <HAL_TIM_IC_MspInit+0x114>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e12:	4a35      	ldr	r2, [pc, #212]	@ (8001ee8 <HAL_TIM_IC_MspInit+0x114>)
 8001e14:	f043 0302 	orr.w	r3, r3, #2
 8001e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e1a:	4b33      	ldr	r3, [pc, #204]	@ (8001ee8 <HAL_TIM_IC_MspInit+0x114>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e26:	4b30      	ldr	r3, [pc, #192]	@ (8001ee8 <HAL_TIM_IC_MspInit+0x114>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2a:	4a2f      	ldr	r2, [pc, #188]	@ (8001ee8 <HAL_TIM_IC_MspInit+0x114>)
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e32:	4b2d      	ldr	r3, [pc, #180]	@ (8001ee8 <HAL_TIM_IC_MspInit+0x114>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = B_R_Pin;
 8001e3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e44:	2302      	movs	r3, #2
 8001e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e50:	2301      	movs	r3, #1
 8001e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(B_R_GPIO_Port, &GPIO_InitStruct);
 8001e54:	f107 031c 	add.w	r3, r7, #28
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4824      	ldr	r0, [pc, #144]	@ (8001eec <HAL_TIM_IC_MspInit+0x118>)
 8001e5c:	f001 fe42 	bl	8003ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A_R_Pin;
 8001e60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e66:	2302      	movs	r3, #2
 8001e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e72:	2301      	movs	r3, #1
 8001e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(A_R_GPIO_Port, &GPIO_InitStruct);
 8001e76:	f107 031c 	add.w	r3, r7, #28
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	481c      	ldr	r0, [pc, #112]	@ (8001ef0 <HAL_TIM_IC_MspInit+0x11c>)
 8001e7e:	f001 fe31 	bl	8003ae4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001e82:	e02d      	b.n	8001ee0 <HAL_TIM_IC_MspInit+0x10c>
  else if(tim_icHandle->Instance==TIM4)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a1a      	ldr	r2, [pc, #104]	@ (8001ef4 <HAL_TIM_IC_MspInit+0x120>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d128      	bne.n	8001ee0 <HAL_TIM_IC_MspInit+0x10c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e8e:	4b16      	ldr	r3, [pc, #88]	@ (8001ee8 <HAL_TIM_IC_MspInit+0x114>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e92:	4a15      	ldr	r2, [pc, #84]	@ (8001ee8 <HAL_TIM_IC_MspInit+0x114>)
 8001e94:	f043 0304 	orr.w	r3, r3, #4
 8001e98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e9a:	4b13      	ldr	r3, [pc, #76]	@ (8001ee8 <HAL_TIM_IC_MspInit+0x114>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9e:	f003 0304 	and.w	r3, r3, #4
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ea6:	4b10      	ldr	r3, [pc, #64]	@ (8001ee8 <HAL_TIM_IC_MspInit+0x114>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eaa:	4a0f      	ldr	r2, [pc, #60]	@ (8001ee8 <HAL_TIM_IC_MspInit+0x114>)
 8001eac:	f043 0308 	orr.w	r3, r3, #8
 8001eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee8 <HAL_TIM_IC_MspInit+0x114>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb6:	f003 0308 	and.w	r3, r3, #8
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = A_L_Pin|B_L_Pin;
 8001ebe:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8001ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ed4:	f107 031c 	add.w	r3, r7, #28
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4807      	ldr	r0, [pc, #28]	@ (8001ef8 <HAL_TIM_IC_MspInit+0x124>)
 8001edc:	f001 fe02 	bl	8003ae4 <HAL_GPIO_Init>
}
 8001ee0:	bf00      	nop
 8001ee2:	3730      	adds	r7, #48	@ 0x30
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40020400 	.word	0x40020400
 8001ef0:	40020000 	.word	0x40020000
 8001ef4:	40000800 	.word	0x40000800
 8001ef8:	40020c00 	.word	0x40020c00

08001efc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08c      	sub	sp, #48	@ 0x30
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f04:	f107 031c 	add.w	r3, r7, #28
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	60da      	str	r2, [r3, #12]
 8001f12:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a3f      	ldr	r2, [pc, #252]	@ (8002018 <HAL_TIM_MspPostInit+0x11c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d11d      	bne.n	8001f5a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f1e:	4b3f      	ldr	r3, [pc, #252]	@ (800201c <HAL_TIM_MspPostInit+0x120>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f22:	4a3e      	ldr	r2, [pc, #248]	@ (800201c <HAL_TIM_MspPostInit+0x120>)
 8001f24:	f043 0310 	orr.w	r3, r3, #16
 8001f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f2a:	4b3c      	ldr	r3, [pc, #240]	@ (800201c <HAL_TIM_MspPostInit+0x120>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2e:	f003 0310 	and.w	r3, r3, #16
 8001f32:	61bb      	str	r3, [r7, #24]
 8001f34:	69bb      	ldr	r3, [r7, #24]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWM1_L_Pin|PWM2_L_Pin|PWM3_L_Pin|PWM4_L_Pin
 8001f36:	f44f 537c 	mov.w	r3, #16128	@ 0x3f00
 8001f3a:	61fb      	str	r3, [r7, #28]
                          |PWM5_L_Pin|PWM6_L_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f44:	2300      	movs	r3, #0
 8001f46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f4c:	f107 031c 	add.w	r3, r7, #28
 8001f50:	4619      	mov	r1, r3
 8001f52:	4833      	ldr	r0, [pc, #204]	@ (8002020 <HAL_TIM_MspPostInit+0x124>)
 8001f54:	f001 fdc6 	bl	8003ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001f58:	e05a      	b.n	8002010 <HAL_TIM_MspPostInit+0x114>
  else if(timHandle->Instance==TIM8)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a31      	ldr	r2, [pc, #196]	@ (8002024 <HAL_TIM_MspPostInit+0x128>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d155      	bne.n	8002010 <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f64:	4b2d      	ldr	r3, [pc, #180]	@ (800201c <HAL_TIM_MspPostInit+0x120>)
 8001f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f68:	4a2c      	ldr	r2, [pc, #176]	@ (800201c <HAL_TIM_MspPostInit+0x120>)
 8001f6a:	f043 0301 	orr.w	r3, r3, #1
 8001f6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f70:	4b2a      	ldr	r3, [pc, #168]	@ (800201c <HAL_TIM_MspPostInit+0x120>)
 8001f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	617b      	str	r3, [r7, #20]
 8001f7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f7c:	4b27      	ldr	r3, [pc, #156]	@ (800201c <HAL_TIM_MspPostInit+0x120>)
 8001f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f80:	4a26      	ldr	r2, [pc, #152]	@ (800201c <HAL_TIM_MspPostInit+0x120>)
 8001f82:	f043 0302 	orr.w	r3, r3, #2
 8001f86:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f88:	4b24      	ldr	r3, [pc, #144]	@ (800201c <HAL_TIM_MspPostInit+0x120>)
 8001f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	613b      	str	r3, [r7, #16]
 8001f92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f94:	4b21      	ldr	r3, [pc, #132]	@ (800201c <HAL_TIM_MspPostInit+0x120>)
 8001f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f98:	4a20      	ldr	r2, [pc, #128]	@ (800201c <HAL_TIM_MspPostInit+0x120>)
 8001f9a:	f043 0304 	orr.w	r3, r3, #4
 8001f9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa0:	4b1e      	ldr	r3, [pc, #120]	@ (800201c <HAL_TIM_MspPostInit+0x120>)
 8001fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM1_R_Pin;
 8001fac:	2320      	movs	r3, #32
 8001fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM1_R_GPIO_Port, &GPIO_InitStruct);
 8001fc0:	f107 031c 	add.w	r3, r7, #28
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4818      	ldr	r0, [pc, #96]	@ (8002028 <HAL_TIM_MspPostInit+0x12c>)
 8001fc8:	f001 fd8c 	bl	8003ae4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM3_R_Pin|PWM5_R_Pin;
 8001fcc:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe2:	f107 031c 	add.w	r3, r7, #28
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4810      	ldr	r0, [pc, #64]	@ (800202c <HAL_TIM_MspPostInit+0x130>)
 8001fea:	f001 fd7b 	bl	8003ae4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM2_R_Pin|PWM4_R_Pin|PWM6_R_Pin;
 8001fee:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002000:	2303      	movs	r3, #3
 8002002:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002004:	f107 031c 	add.w	r3, r7, #28
 8002008:	4619      	mov	r1, r3
 800200a:	4809      	ldr	r0, [pc, #36]	@ (8002030 <HAL_TIM_MspPostInit+0x134>)
 800200c:	f001 fd6a 	bl	8003ae4 <HAL_GPIO_Init>
}
 8002010:	bf00      	nop
 8002012:	3730      	adds	r7, #48	@ 0x30
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40010000 	.word	0x40010000
 800201c:	40023800 	.word	0x40023800
 8002020:	40021000 	.word	0x40021000
 8002024:	40010400 	.word	0x40010400
 8002028:	40020000 	.word	0x40020000
 800202c:	40020400 	.word	0x40020400
 8002030:	40020800 	.word	0x40020800

08002034 <MX_USB_OTG_FS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_USB_Init(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
	...

08002044 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002044:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800207c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002048:	480d      	ldr	r0, [pc, #52]	@ (8002080 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800204a:	490e      	ldr	r1, [pc, #56]	@ (8002084 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800204c:	4a0e      	ldr	r2, [pc, #56]	@ (8002088 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800204e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002050:	e002      	b.n	8002058 <LoopCopyDataInit>

08002052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002056:	3304      	adds	r3, #4

08002058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800205a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800205c:	d3f9      	bcc.n	8002052 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800205e:	4a0b      	ldr	r2, [pc, #44]	@ (800208c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002060:	4c0b      	ldr	r4, [pc, #44]	@ (8002090 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002064:	e001      	b.n	800206a <LoopFillZerobss>

08002066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002068:	3204      	adds	r2, #4

0800206a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800206a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800206c:	d3fb      	bcc.n	8002066 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800206e:	f7ff fba9 	bl	80017c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002072:	f004 fd1f 	bl	8006ab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002076:	f7ff fa0f 	bl	8001498 <main>
  bx  lr    
 800207a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800207c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002080:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002084:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8002088:	08006b48 	.word	0x08006b48
  ldr r2, =_sbss
 800208c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8002090:	200004a0 	.word	0x200004a0

08002094 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002094:	e7fe      	b.n	8002094 <ADC_IRQHandler>

08002096 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800209a:	2003      	movs	r0, #3
 800209c:	f001 f88a 	bl	80031b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020a0:	200f      	movs	r0, #15
 80020a2:	f000 f805 	bl	80020b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020a6:	f7ff fac1 	bl	800162c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020b8:	4b12      	ldr	r3, [pc, #72]	@ (8002104 <HAL_InitTick+0x54>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	4b12      	ldr	r3, [pc, #72]	@ (8002108 <HAL_InitTick+0x58>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	4619      	mov	r1, r3
 80020c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ce:	4618      	mov	r0, r3
 80020d0:	f001 f8a5 	bl	800321e <HAL_SYSTICK_Config>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e00e      	b.n	80020fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b0f      	cmp	r3, #15
 80020e2:	d80a      	bhi.n	80020fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020e4:	2200      	movs	r2, #0
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	f04f 30ff 	mov.w	r0, #4294967295
 80020ec:	f001 f86d 	bl	80031ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020f0:	4a06      	ldr	r2, [pc, #24]	@ (800210c <HAL_InitTick+0x5c>)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
 80020f8:	e000      	b.n	80020fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	20000018 	.word	0x20000018
 8002108:	20000020 	.word	0x20000020
 800210c:	2000001c 	.word	0x2000001c

08002110 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002114:	4b06      	ldr	r3, [pc, #24]	@ (8002130 <HAL_IncTick+0x20>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	461a      	mov	r2, r3
 800211a:	4b06      	ldr	r3, [pc, #24]	@ (8002134 <HAL_IncTick+0x24>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4413      	add	r3, r2
 8002120:	4a04      	ldr	r2, [pc, #16]	@ (8002134 <HAL_IncTick+0x24>)
 8002122:	6013      	str	r3, [r2, #0]
}
 8002124:	bf00      	nop
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	20000020 	.word	0x20000020
 8002134:	2000049c 	.word	0x2000049c

08002138 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  return uwTick;
 800213c:	4b03      	ldr	r3, [pc, #12]	@ (800214c <HAL_GetTick+0x14>)
 800213e:	681b      	ldr	r3, [r3, #0]
}
 8002140:	4618      	mov	r0, r3
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	2000049c 	.word	0x2000049c

08002150 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002158:	2300      	movs	r3, #0
 800215a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e031      	b.n	80021ca <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216a:	2b00      	cmp	r3, #0
 800216c:	d109      	bne.n	8002182 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7fe fd54 	bl	8000c1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002186:	f003 0310 	and.w	r3, r3, #16
 800218a:	2b00      	cmp	r3, #0
 800218c:	d116      	bne.n	80021bc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002192:	4b10      	ldr	r3, [pc, #64]	@ (80021d4 <HAL_ADC_Init+0x84>)
 8002194:	4013      	ands	r3, r2
 8002196:	f043 0202 	orr.w	r2, r3, #2
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 fa88 	bl	80026b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ae:	f023 0303 	bic.w	r3, r3, #3
 80021b2:	f043 0201 	orr.w	r2, r3, #1
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	641a      	str	r2, [r3, #64]	@ 0x40
 80021ba:	e001      	b.n	80021c0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	ffffeefd 	.word	0xffffeefd

080021d8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d101      	bne.n	80021f6 <HAL_ADC_Start_DMA+0x1e>
 80021f2:	2302      	movs	r3, #2
 80021f4:	e0d4      	b.n	80023a0 <HAL_ADC_Start_DMA+0x1c8>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b01      	cmp	r3, #1
 800220a:	d018      	beq.n	800223e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689a      	ldr	r2, [r3, #8]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0201 	orr.w	r2, r2, #1
 800221a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800221c:	4b62      	ldr	r3, [pc, #392]	@ (80023a8 <HAL_ADC_Start_DMA+0x1d0>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a62      	ldr	r2, [pc, #392]	@ (80023ac <HAL_ADC_Start_DMA+0x1d4>)
 8002222:	fba2 2303 	umull	r2, r3, r2, r3
 8002226:	0c9a      	lsrs	r2, r3, #18
 8002228:	4613      	mov	r3, r2
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	4413      	add	r3, r2
 800222e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002230:	e002      	b.n	8002238 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	3b01      	subs	r3, #1
 8002236:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f9      	bne.n	8002232 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b01      	cmp	r3, #1
 800224a:	f040 809c 	bne.w	8002386 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002252:	4b57      	ldr	r3, [pc, #348]	@ (80023b0 <HAL_ADC_Start_DMA+0x1d8>)
 8002254:	4013      	ands	r3, r2
 8002256:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002268:	2b00      	cmp	r3, #0
 800226a:	d007      	beq.n	800227c <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002270:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002274:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002280:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002284:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002288:	d106      	bne.n	8002298 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800228e:	f023 0206 	bic.w	r2, r3, #6
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	645a      	str	r2, [r3, #68]	@ 0x44
 8002296:	e002      	b.n	800229e <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022aa:	4a42      	ldr	r2, [pc, #264]	@ (80023b4 <HAL_ADC_Start_DMA+0x1dc>)
 80022ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022b2:	4a41      	ldr	r2, [pc, #260]	@ (80023b8 <HAL_ADC_Start_DMA+0x1e0>)
 80022b4:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022ba:	4a40      	ldr	r2, [pc, #256]	@ (80023bc <HAL_ADC_Start_DMA+0x1e4>)
 80022bc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80022c6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80022d6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022e6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	334c      	adds	r3, #76	@ 0x4c
 80022f2:	4619      	mov	r1, r3
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f001 f92a 	bl	8003550 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80022fc:	4b30      	ldr	r3, [pc, #192]	@ (80023c0 <HAL_ADC_Start_DMA+0x1e8>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f003 031f 	and.w	r3, r3, #31
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10f      	bne.n	8002328 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d143      	bne.n	800239e <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002324:	609a      	str	r2, [r3, #8]
 8002326:	e03a      	b.n	800239e <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a25      	ldr	r2, [pc, #148]	@ (80023c4 <HAL_ADC_Start_DMA+0x1ec>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d10e      	bne.n	8002350 <HAL_ADC_Start_DMA+0x178>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d107      	bne.n	8002350 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800234e:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002350:	4b1b      	ldr	r3, [pc, #108]	@ (80023c0 <HAL_ADC_Start_DMA+0x1e8>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 0310 	and.w	r3, r3, #16
 8002358:	2b00      	cmp	r3, #0
 800235a:	d120      	bne.n	800239e <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a19      	ldr	r2, [pc, #100]	@ (80023c8 <HAL_ADC_Start_DMA+0x1f0>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d11b      	bne.n	800239e <HAL_ADC_Start_DMA+0x1c6>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d114      	bne.n	800239e <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689a      	ldr	r2, [r3, #8]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	e00b      	b.n	800239e <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238a:	f043 0210 	orr.w	r2, r3, #16
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002396:	f043 0201 	orr.w	r2, r3, #1
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3718      	adds	r7, #24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	20000018 	.word	0x20000018
 80023ac:	431bde83 	.word	0x431bde83
 80023b0:	fffff8fe 	.word	0xfffff8fe
 80023b4:	080028a9 	.word	0x080028a9
 80023b8:	08002963 	.word	0x08002963
 80023bc:	0800297f 	.word	0x0800297f
 80023c0:	40012300 	.word	0x40012300
 80023c4:	40012000 	.word	0x40012000
 80023c8:	40012200 	.word	0x40012200

080023cc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002412:	2300      	movs	r3, #0
 8002414:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800241c:	2b01      	cmp	r3, #1
 800241e:	d101      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x1c>
 8002420:	2302      	movs	r3, #2
 8002422:	e136      	b.n	8002692 <HAL_ADC_ConfigChannel+0x28a>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2b09      	cmp	r3, #9
 8002432:	d93a      	bls.n	80024aa <HAL_ADC_ConfigChannel+0xa2>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800243c:	d035      	beq.n	80024aa <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68d9      	ldr	r1, [r3, #12]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	b29b      	uxth	r3, r3
 800244a:	461a      	mov	r2, r3
 800244c:	4613      	mov	r3, r2
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	4413      	add	r3, r2
 8002452:	3b1e      	subs	r3, #30
 8002454:	2207      	movs	r2, #7
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43da      	mvns	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	400a      	ands	r2, r1
 8002462:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a8d      	ldr	r2, [pc, #564]	@ (80026a0 <HAL_ADC_ConfigChannel+0x298>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d10a      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68d9      	ldr	r1, [r3, #12]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	061a      	lsls	r2, r3, #24
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002482:	e035      	b.n	80024f0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68d9      	ldr	r1, [r3, #12]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	689a      	ldr	r2, [r3, #8]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	b29b      	uxth	r3, r3
 8002494:	4618      	mov	r0, r3
 8002496:	4603      	mov	r3, r0
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	4403      	add	r3, r0
 800249c:	3b1e      	subs	r3, #30
 800249e:	409a      	lsls	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024a8:	e022      	b.n	80024f0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6919      	ldr	r1, [r3, #16]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	461a      	mov	r2, r3
 80024b8:	4613      	mov	r3, r2
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	4413      	add	r3, r2
 80024be:	2207      	movs	r2, #7
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43da      	mvns	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	400a      	ands	r2, r1
 80024cc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6919      	ldr	r1, [r3, #16]
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	b29b      	uxth	r3, r3
 80024de:	4618      	mov	r0, r3
 80024e0:	4603      	mov	r3, r0
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	4403      	add	r3, r0
 80024e6:	409a      	lsls	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2b06      	cmp	r3, #6
 80024f6:	d824      	bhi.n	8002542 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685a      	ldr	r2, [r3, #4]
 8002502:	4613      	mov	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4413      	add	r3, r2
 8002508:	3b05      	subs	r3, #5
 800250a:	221f      	movs	r2, #31
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43da      	mvns	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	400a      	ands	r2, r1
 8002518:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	b29b      	uxth	r3, r3
 8002526:	4618      	mov	r0, r3
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	3b05      	subs	r3, #5
 8002534:	fa00 f203 	lsl.w	r2, r0, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	430a      	orrs	r2, r1
 800253e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002540:	e04c      	b.n	80025dc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b0c      	cmp	r3, #12
 8002548:	d824      	bhi.n	8002594 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	3b23      	subs	r3, #35	@ 0x23
 800255c:	221f      	movs	r2, #31
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43da      	mvns	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	400a      	ands	r2, r1
 800256a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	b29b      	uxth	r3, r3
 8002578:	4618      	mov	r0, r3
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	4613      	mov	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	3b23      	subs	r3, #35	@ 0x23
 8002586:	fa00 f203 	lsl.w	r2, r0, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	430a      	orrs	r2, r1
 8002590:	631a      	str	r2, [r3, #48]	@ 0x30
 8002592:	e023      	b.n	80025dc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685a      	ldr	r2, [r3, #4]
 800259e:	4613      	mov	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	3b41      	subs	r3, #65	@ 0x41
 80025a6:	221f      	movs	r2, #31
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43da      	mvns	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	400a      	ands	r2, r1
 80025b4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	4618      	mov	r0, r3
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	4613      	mov	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	3b41      	subs	r3, #65	@ 0x41
 80025d0:	fa00 f203 	lsl.w	r2, r0, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	430a      	orrs	r2, r1
 80025da:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a30      	ldr	r2, [pc, #192]	@ (80026a4 <HAL_ADC_ConfigChannel+0x29c>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d10a      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x1f4>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80025ee:	d105      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80025f0:	4b2d      	ldr	r3, [pc, #180]	@ (80026a8 <HAL_ADC_ConfigChannel+0x2a0>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	4a2c      	ldr	r2, [pc, #176]	@ (80026a8 <HAL_ADC_ConfigChannel+0x2a0>)
 80025f6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80025fa:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a28      	ldr	r2, [pc, #160]	@ (80026a4 <HAL_ADC_ConfigChannel+0x29c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d10f      	bne.n	8002626 <HAL_ADC_ConfigChannel+0x21e>
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2b12      	cmp	r3, #18
 800260c:	d10b      	bne.n	8002626 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800260e:	4b26      	ldr	r3, [pc, #152]	@ (80026a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	4a25      	ldr	r2, [pc, #148]	@ (80026a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002614:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002618:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800261a:	4b23      	ldr	r3, [pc, #140]	@ (80026a8 <HAL_ADC_ConfigChannel+0x2a0>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	4a22      	ldr	r2, [pc, #136]	@ (80026a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002620:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002624:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a1e      	ldr	r2, [pc, #120]	@ (80026a4 <HAL_ADC_ConfigChannel+0x29c>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d12b      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x280>
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a1a      	ldr	r2, [pc, #104]	@ (80026a0 <HAL_ADC_ConfigChannel+0x298>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d003      	beq.n	8002642 <HAL_ADC_ConfigChannel+0x23a>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b11      	cmp	r3, #17
 8002640:	d122      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002642:	4b19      	ldr	r3, [pc, #100]	@ (80026a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	4a18      	ldr	r2, [pc, #96]	@ (80026a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002648:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800264c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800264e:	4b16      	ldr	r3, [pc, #88]	@ (80026a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	4a15      	ldr	r2, [pc, #84]	@ (80026a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002654:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002658:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a10      	ldr	r2, [pc, #64]	@ (80026a0 <HAL_ADC_ConfigChannel+0x298>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d111      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002664:	4b11      	ldr	r3, [pc, #68]	@ (80026ac <HAL_ADC_ConfigChannel+0x2a4>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a11      	ldr	r2, [pc, #68]	@ (80026b0 <HAL_ADC_ConfigChannel+0x2a8>)
 800266a:	fba2 2303 	umull	r2, r3, r2, r3
 800266e:	0c9a      	lsrs	r2, r3, #18
 8002670:	4613      	mov	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800267a:	e002      	b.n	8002682 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	3b01      	subs	r3, #1
 8002680:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1f9      	bne.n	800267c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	10000012 	.word	0x10000012
 80026a4:	40012000 	.word	0x40012000
 80026a8:	40012300 	.word	0x40012300
 80026ac:	20000018 	.word	0x20000018
 80026b0:	431bde83 	.word	0x431bde83

080026b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80026bc:	4b78      	ldr	r3, [pc, #480]	@ (80028a0 <ADC_Init+0x1ec>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	4a77      	ldr	r2, [pc, #476]	@ (80028a0 <ADC_Init+0x1ec>)
 80026c2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80026c6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80026c8:	4b75      	ldr	r3, [pc, #468]	@ (80028a0 <ADC_Init+0x1ec>)
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	4973      	ldr	r1, [pc, #460]	@ (80028a0 <ADC_Init+0x1ec>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6859      	ldr	r1, [r3, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	021a      	lsls	r2, r3, #8
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002708:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6859      	ldr	r1, [r3, #4]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	430a      	orrs	r2, r1
 800271a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800272a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6899      	ldr	r1, [r3, #8]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002742:	4a58      	ldr	r2, [pc, #352]	@ (80028a4 <ADC_Init+0x1f0>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d022      	beq.n	800278e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689a      	ldr	r2, [r3, #8]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002756:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6899      	ldr	r1, [r3, #8]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002778:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6899      	ldr	r1, [r3, #8]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	e00f      	b.n	80027ae <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800279c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80027ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0202 	bic.w	r2, r2, #2
 80027bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6899      	ldr	r1, [r3, #8]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	005a      	lsls	r2, r3, #1
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d01b      	beq.n	8002814 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027ea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80027fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6859      	ldr	r1, [r3, #4]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002806:	3b01      	subs	r3, #1
 8002808:	035a      	lsls	r2, r3, #13
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	430a      	orrs	r2, r1
 8002810:	605a      	str	r2, [r3, #4]
 8002812:	e007      	b.n	8002824 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002822:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002832:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	3b01      	subs	r3, #1
 8002840:	051a      	lsls	r2, r3, #20
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	430a      	orrs	r2, r1
 8002848:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002858:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6899      	ldr	r1, [r3, #8]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002866:	025a      	lsls	r2, r3, #9
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800287e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6899      	ldr	r1, [r3, #8]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	029a      	lsls	r2, r3, #10
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	430a      	orrs	r2, r1
 8002892:	609a      	str	r2, [r3, #8]
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	40012300 	.word	0x40012300
 80028a4:	0f000001 	.word	0x0f000001

080028a8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028b4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ba:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d13c      	bne.n	800293c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d12b      	bne.n	8002934 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d127      	bne.n	8002934 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ea:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d006      	beq.n	8002900 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d119      	bne.n	8002934 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 0220 	bic.w	r2, r2, #32
 800290e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002914:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002920:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d105      	bne.n	8002934 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292c:	f043 0201 	orr.w	r2, r3, #1
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f7ff fd49 	bl	80023cc <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800293a:	e00e      	b.n	800295a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002940:	f003 0310 	and.w	r3, r3, #16
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f7ff fd53 	bl	80023f4 <HAL_ADC_ErrorCallback>
}
 800294e:	e004      	b.n	800295a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	4798      	blx	r3
}
 800295a:	bf00      	nop
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b084      	sub	sp, #16
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800296e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f7ff fd35 	bl	80023e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002976:	bf00      	nop
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b084      	sub	sp, #16
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800298a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2240      	movs	r2, #64	@ 0x40
 8002990:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002996:	f043 0204 	orr.w	r2, r3, #4
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f7ff fd28 	bl	80023f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029a4:	bf00      	nop
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e0ed      	b.n	8002b9a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d102      	bne.n	80029d0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7fe faac 	bl	8000f28 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f042 0201 	orr.w	r2, r2, #1
 80029de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029e0:	f7ff fbaa 	bl	8002138 <HAL_GetTick>
 80029e4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80029e6:	e012      	b.n	8002a0e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80029e8:	f7ff fba6 	bl	8002138 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b0a      	cmp	r3, #10
 80029f4:	d90b      	bls.n	8002a0e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2205      	movs	r2, #5
 8002a06:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e0c5      	b.n	8002b9a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0e5      	beq.n	80029e8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0202 	bic.w	r2, r2, #2
 8002a2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a2c:	f7ff fb84 	bl	8002138 <HAL_GetTick>
 8002a30:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a32:	e012      	b.n	8002a5a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a34:	f7ff fb80 	bl	8002138 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b0a      	cmp	r3, #10
 8002a40:	d90b      	bls.n	8002a5a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a46:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2205      	movs	r2, #5
 8002a52:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e09f      	b.n	8002b9a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1e5      	bne.n	8002a34 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	7e1b      	ldrb	r3, [r3, #24]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d108      	bne.n	8002a82 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	e007      	b.n	8002a92 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	7e5b      	ldrb	r3, [r3, #25]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d108      	bne.n	8002aac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	e007      	b.n	8002abc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002aba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	7e9b      	ldrb	r3, [r3, #26]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d108      	bne.n	8002ad6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 0220 	orr.w	r2, r2, #32
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	e007      	b.n	8002ae6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 0220 	bic.w	r2, r2, #32
 8002ae4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	7edb      	ldrb	r3, [r3, #27]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d108      	bne.n	8002b00 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 0210 	bic.w	r2, r2, #16
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	e007      	b.n	8002b10 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f042 0210 	orr.w	r2, r2, #16
 8002b0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	7f1b      	ldrb	r3, [r3, #28]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d108      	bne.n	8002b2a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0208 	orr.w	r2, r2, #8
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	e007      	b.n	8002b3a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 0208 	bic.w	r2, r2, #8
 8002b38:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	7f5b      	ldrb	r3, [r3, #29]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d108      	bne.n	8002b54 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f042 0204 	orr.w	r2, r2, #4
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	e007      	b.n	8002b64 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0204 	bic.w	r2, r2, #4
 8002b62:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	431a      	orrs	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	ea42 0103 	orr.w	r1, r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	1e5a      	subs	r2, r3, #1
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b08a      	sub	sp, #40	@ 0x28
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002baa:	2300      	movs	r3, #0
 8002bac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002bde:	6a3b      	ldr	r3, [r7, #32]
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d07c      	beq.n	8002ce2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d023      	beq.n	8002c3a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f983 	bl	8002f10 <HAL_CAN_TxMailbox0CompleteCallback>
 8002c0a:	e016      	b.n	8002c3a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	f003 0304 	and.w	r3, r3, #4
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d004      	beq.n	8002c20 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c18:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002c1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c1e:	e00c      	b.n	8002c3a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	f003 0308 	and.w	r3, r3, #8
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d004      	beq.n	8002c34 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c30:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c32:	e002      	b.n	8002c3a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 f989 	bl	8002f4c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d024      	beq.n	8002c8e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c4c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d003      	beq.n	8002c60 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f963 	bl	8002f24 <HAL_CAN_TxMailbox1CompleteCallback>
 8002c5e:	e016      	b.n	8002c8e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d004      	beq.n	8002c74 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c70:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c72:	e00c      	b.n	8002c8e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d004      	beq.n	8002c88 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c84:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c86:	e002      	b.n	8002c8e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 f969 	bl	8002f60 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d024      	beq.n	8002ce2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002ca0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f943 	bl	8002f38 <HAL_CAN_TxMailbox2CompleteCallback>
 8002cb2:	e016      	b.n	8002ce2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d004      	beq.n	8002cc8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cc6:	e00c      	b.n	8002ce2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d004      	beq.n	8002cdc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cda:	e002      	b.n	8002ce2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 f949 	bl	8002f74 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	f003 0308 	and.w	r3, r3, #8
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00c      	beq.n	8002d06 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	f003 0310 	and.w	r3, r3, #16
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d007      	beq.n	8002d06 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cfc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2210      	movs	r2, #16
 8002d04:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002d06:	6a3b      	ldr	r3, [r7, #32]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00b      	beq.n	8002d28 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d006      	beq.n	8002d28 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2208      	movs	r2, #8
 8002d20:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f93a 	bl	8002f9c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d009      	beq.n	8002d46 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f003 0303 	and.w	r3, r3, #3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d002      	beq.n	8002d46 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f921 	bl	8002f88 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00c      	beq.n	8002d6a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	f003 0310 	and.w	r3, r3, #16
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d007      	beq.n	8002d6a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d60:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2210      	movs	r2, #16
 8002d68:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	f003 0320 	and.w	r3, r3, #32
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00b      	beq.n	8002d8c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	f003 0308 	and.w	r3, r3, #8
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d006      	beq.n	8002d8c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2208      	movs	r2, #8
 8002d84:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 f91c 	bl	8002fc4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	f003 0310 	and.w	r3, r3, #16
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d009      	beq.n	8002daa <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	f003 0303 	and.w	r3, r3, #3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d002      	beq.n	8002daa <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 f903 	bl	8002fb0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00b      	beq.n	8002dcc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	f003 0310 	and.w	r3, r3, #16
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d006      	beq.n	8002dcc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2210      	movs	r2, #16
 8002dc4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f906 	bl	8002fd8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00b      	beq.n	8002dee <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	f003 0308 	and.w	r3, r3, #8
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d006      	beq.n	8002dee <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2208      	movs	r2, #8
 8002de6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f8ff 	bl	8002fec <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002dee:	6a3b      	ldr	r3, [r7, #32]
 8002df0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d07b      	beq.n	8002ef0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	f003 0304 	and.w	r3, r3, #4
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d072      	beq.n	8002ee8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d008      	beq.n	8002e1e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e18:	f043 0301 	orr.w	r3, r3, #1
 8002e1c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d008      	beq.n	8002e3a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e34:	f043 0302 	orr.w	r3, r3, #2
 8002e38:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e3a:	6a3b      	ldr	r3, [r7, #32]
 8002e3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d008      	beq.n	8002e56 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e50:	f043 0304 	orr.w	r3, r3, #4
 8002e54:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d043      	beq.n	8002ee8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d03e      	beq.n	8002ee8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e70:	2b60      	cmp	r3, #96	@ 0x60
 8002e72:	d02b      	beq.n	8002ecc <HAL_CAN_IRQHandler+0x32a>
 8002e74:	2b60      	cmp	r3, #96	@ 0x60
 8002e76:	d82e      	bhi.n	8002ed6 <HAL_CAN_IRQHandler+0x334>
 8002e78:	2b50      	cmp	r3, #80	@ 0x50
 8002e7a:	d022      	beq.n	8002ec2 <HAL_CAN_IRQHandler+0x320>
 8002e7c:	2b50      	cmp	r3, #80	@ 0x50
 8002e7e:	d82a      	bhi.n	8002ed6 <HAL_CAN_IRQHandler+0x334>
 8002e80:	2b40      	cmp	r3, #64	@ 0x40
 8002e82:	d019      	beq.n	8002eb8 <HAL_CAN_IRQHandler+0x316>
 8002e84:	2b40      	cmp	r3, #64	@ 0x40
 8002e86:	d826      	bhi.n	8002ed6 <HAL_CAN_IRQHandler+0x334>
 8002e88:	2b30      	cmp	r3, #48	@ 0x30
 8002e8a:	d010      	beq.n	8002eae <HAL_CAN_IRQHandler+0x30c>
 8002e8c:	2b30      	cmp	r3, #48	@ 0x30
 8002e8e:	d822      	bhi.n	8002ed6 <HAL_CAN_IRQHandler+0x334>
 8002e90:	2b10      	cmp	r3, #16
 8002e92:	d002      	beq.n	8002e9a <HAL_CAN_IRQHandler+0x2f8>
 8002e94:	2b20      	cmp	r3, #32
 8002e96:	d005      	beq.n	8002ea4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002e98:	e01d      	b.n	8002ed6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9c:	f043 0308 	orr.w	r3, r3, #8
 8002ea0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ea2:	e019      	b.n	8002ed8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea6:	f043 0310 	orr.w	r3, r3, #16
 8002eaa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002eac:	e014      	b.n	8002ed8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb0:	f043 0320 	orr.w	r3, r3, #32
 8002eb4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002eb6:	e00f      	b.n	8002ed8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ebe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ec0:	e00a      	b.n	8002ed8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ec8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002eca:	e005      	b.n	8002ed8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ece:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ed2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ed4:	e000      	b.n	8002ed8 <HAL_CAN_IRQHandler+0x336>
            break;
 8002ed6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	699a      	ldr	r2, [r3, #24]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002ee6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2204      	movs	r2, #4
 8002eee:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d008      	beq.n	8002f08 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efc:	431a      	orrs	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f87c 	bl	8003000 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002f08:	bf00      	nop
 8002f0a:	3728      	adds	r7, #40	@ 0x28
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003024:	4b0b      	ldr	r3, [pc, #44]	@ (8003054 <__NVIC_SetPriorityGrouping+0x40>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003030:	4013      	ands	r3, r2
 8003032:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800303c:	4b06      	ldr	r3, [pc, #24]	@ (8003058 <__NVIC_SetPriorityGrouping+0x44>)
 800303e:	4313      	orrs	r3, r2
 8003040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003042:	4a04      	ldr	r2, [pc, #16]	@ (8003054 <__NVIC_SetPriorityGrouping+0x40>)
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	60d3      	str	r3, [r2, #12]
}
 8003048:	bf00      	nop
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	e000ed00 	.word	0xe000ed00
 8003058:	05fa0000 	.word	0x05fa0000

0800305c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003060:	4b04      	ldr	r3, [pc, #16]	@ (8003074 <__NVIC_GetPriorityGrouping+0x18>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	0a1b      	lsrs	r3, r3, #8
 8003066:	f003 0307 	and.w	r3, r3, #7
}
 800306a:	4618      	mov	r0, r3
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	e000ed00 	.word	0xe000ed00

08003078 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003086:	2b00      	cmp	r3, #0
 8003088:	db0b      	blt.n	80030a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800308a:	79fb      	ldrb	r3, [r7, #7]
 800308c:	f003 021f 	and.w	r2, r3, #31
 8003090:	4907      	ldr	r1, [pc, #28]	@ (80030b0 <__NVIC_EnableIRQ+0x38>)
 8003092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003096:	095b      	lsrs	r3, r3, #5
 8003098:	2001      	movs	r0, #1
 800309a:	fa00 f202 	lsl.w	r2, r0, r2
 800309e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	e000e100 	.word	0xe000e100

080030b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	4603      	mov	r3, r0
 80030bc:	6039      	str	r1, [r7, #0]
 80030be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	db0a      	blt.n	80030de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	b2da      	uxtb	r2, r3
 80030cc:	490c      	ldr	r1, [pc, #48]	@ (8003100 <__NVIC_SetPriority+0x4c>)
 80030ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d2:	0112      	lsls	r2, r2, #4
 80030d4:	b2d2      	uxtb	r2, r2
 80030d6:	440b      	add	r3, r1
 80030d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030dc:	e00a      	b.n	80030f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	4908      	ldr	r1, [pc, #32]	@ (8003104 <__NVIC_SetPriority+0x50>)
 80030e4:	79fb      	ldrb	r3, [r7, #7]
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	3b04      	subs	r3, #4
 80030ec:	0112      	lsls	r2, r2, #4
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	440b      	add	r3, r1
 80030f2:	761a      	strb	r2, [r3, #24]
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	e000e100 	.word	0xe000e100
 8003104:	e000ed00 	.word	0xe000ed00

08003108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003108:	b480      	push	{r7}
 800310a:	b089      	sub	sp, #36	@ 0x24
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	f1c3 0307 	rsb	r3, r3, #7
 8003122:	2b04      	cmp	r3, #4
 8003124:	bf28      	it	cs
 8003126:	2304      	movcs	r3, #4
 8003128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	3304      	adds	r3, #4
 800312e:	2b06      	cmp	r3, #6
 8003130:	d902      	bls.n	8003138 <NVIC_EncodePriority+0x30>
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	3b03      	subs	r3, #3
 8003136:	e000      	b.n	800313a <NVIC_EncodePriority+0x32>
 8003138:	2300      	movs	r3, #0
 800313a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800313c:	f04f 32ff 	mov.w	r2, #4294967295
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43da      	mvns	r2, r3
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	401a      	ands	r2, r3
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003150:	f04f 31ff 	mov.w	r1, #4294967295
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	fa01 f303 	lsl.w	r3, r1, r3
 800315a:	43d9      	mvns	r1, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003160:	4313      	orrs	r3, r2
         );
}
 8003162:	4618      	mov	r0, r3
 8003164:	3724      	adds	r7, #36	@ 0x24
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
	...

08003170 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	3b01      	subs	r3, #1
 800317c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003180:	d301      	bcc.n	8003186 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003182:	2301      	movs	r3, #1
 8003184:	e00f      	b.n	80031a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003186:	4a0a      	ldr	r2, [pc, #40]	@ (80031b0 <SysTick_Config+0x40>)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3b01      	subs	r3, #1
 800318c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800318e:	210f      	movs	r1, #15
 8003190:	f04f 30ff 	mov.w	r0, #4294967295
 8003194:	f7ff ff8e 	bl	80030b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003198:	4b05      	ldr	r3, [pc, #20]	@ (80031b0 <SysTick_Config+0x40>)
 800319a:	2200      	movs	r2, #0
 800319c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800319e:	4b04      	ldr	r3, [pc, #16]	@ (80031b0 <SysTick_Config+0x40>)
 80031a0:	2207      	movs	r2, #7
 80031a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	e000e010 	.word	0xe000e010

080031b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f7ff ff29 	bl	8003014 <__NVIC_SetPriorityGrouping>
}
 80031c2:	bf00      	nop
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b086      	sub	sp, #24
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	4603      	mov	r3, r0
 80031d2:	60b9      	str	r1, [r7, #8]
 80031d4:	607a      	str	r2, [r7, #4]
 80031d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031d8:	2300      	movs	r3, #0
 80031da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031dc:	f7ff ff3e 	bl	800305c <__NVIC_GetPriorityGrouping>
 80031e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	68b9      	ldr	r1, [r7, #8]
 80031e6:	6978      	ldr	r0, [r7, #20]
 80031e8:	f7ff ff8e 	bl	8003108 <NVIC_EncodePriority>
 80031ec:	4602      	mov	r2, r0
 80031ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031f2:	4611      	mov	r1, r2
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff ff5d 	bl	80030b4 <__NVIC_SetPriority>
}
 80031fa:	bf00      	nop
 80031fc:	3718      	adds	r7, #24
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b082      	sub	sp, #8
 8003206:	af00      	add	r7, sp, #0
 8003208:	4603      	mov	r3, r0
 800320a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800320c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003210:	4618      	mov	r0, r3
 8003212:	f7ff ff31 	bl	8003078 <__NVIC_EnableIRQ>
}
 8003216:	bf00      	nop
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b082      	sub	sp, #8
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7ff ffa2 	bl	8003170 <SysTick_Config>
 800322c:	4603      	mov	r3, r0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b082      	sub	sp, #8
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e014      	b.n	8003272 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	791b      	ldrb	r3, [r3, #4]
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d105      	bne.n	800325e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f7fd fee3 	bl	8001024 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2202      	movs	r2, #2
 8003262:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b082      	sub	sp, #8
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800328c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003290:	d120      	bne.n	80032d4 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003298:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800329c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032a0:	d118      	bne.n	80032d4 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2204      	movs	r2, #4
 80032a6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	f043 0201 	orr.w	r2, r3, #1
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80032bc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80032cc:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 f82d 	bl	800332e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032e2:	d120      	bne.n	8003326 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032f2:	d118      	bne.n	8003326 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2204      	movs	r2, #4
 80032f8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	f043 0202 	orr.w	r2, r3, #2
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800330e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800331e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 f85d 	bl	80033e0 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8003326:	bf00      	nop
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003342:	b480      	push	{r7}
 8003344:	b087      	sub	sp, #28
 8003346:	af00      	add	r7, sp, #0
 8003348:	60f8      	str	r0, [r7, #12]
 800334a:	60b9      	str	r1, [r7, #8]
 800334c:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	795b      	ldrb	r3, [r3, #5]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d101      	bne.n	800335a <HAL_DAC_ConfigChannel+0x18>
 8003356:	2302      	movs	r3, #2
 8003358:	e03c      	b.n	80033d4 <HAL_DAC_ConfigChannel+0x92>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2201      	movs	r2, #1
 800335e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2202      	movs	r2, #2
 8003364:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f003 0310 	and.w	r3, r3, #16
 8003374:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	43db      	mvns	r3, r3
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	4013      	ands	r3, r2
 8003382:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	4313      	orrs	r3, r2
 800338e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f003 0310 	and.w	r3, r3, #16
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	4313      	orrs	r3, r2
 80033a0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6819      	ldr	r1, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f003 0310 	and.w	r3, r3, #16
 80033b6:	22c0      	movs	r2, #192	@ 0xc0
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	43da      	mvns	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	400a      	ands	r2, r1
 80033c4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2201      	movs	r2, #1
 80033ca:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	371c      	adds	r7, #28
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003400:	f7fe fe9a 	bl	8002138 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e099      	b.n	8003544 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0201 	bic.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003430:	e00f      	b.n	8003452 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003432:	f7fe fe81 	bl	8002138 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b05      	cmp	r3, #5
 800343e:	d908      	bls.n	8003452 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2220      	movs	r2, #32
 8003444:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2203      	movs	r2, #3
 800344a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e078      	b.n	8003544 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1e8      	bne.n	8003432 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	4b38      	ldr	r3, [pc, #224]	@ (800354c <HAL_DMA_Init+0x158>)
 800346c:	4013      	ands	r3, r2
 800346e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800347e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800348a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003496:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a8:	2b04      	cmp	r3, #4
 80034aa:	d107      	bne.n	80034bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b4:	4313      	orrs	r3, r2
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f023 0307 	bic.w	r3, r3, #7
 80034d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	4313      	orrs	r3, r2
 80034dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	d117      	bne.n	8003516 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00e      	beq.n	8003516 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 fa77 	bl	80039ec <DMA_CheckFifoParam>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d008      	beq.n	8003516 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2240      	movs	r2, #64	@ 0x40
 8003508:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003512:	2301      	movs	r3, #1
 8003514:	e016      	b.n	8003544 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 fa2e 	bl	8003980 <DMA_CalcBaseAndBitshift>
 8003524:	4603      	mov	r3, r0
 8003526:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800352c:	223f      	movs	r2, #63	@ 0x3f
 800352e:	409a      	lsls	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3718      	adds	r7, #24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	e010803f 	.word	0xe010803f

08003550 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
 800355c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800355e:	2300      	movs	r3, #0
 8003560:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003566:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800356e:	2b01      	cmp	r3, #1
 8003570:	d101      	bne.n	8003576 <HAL_DMA_Start_IT+0x26>
 8003572:	2302      	movs	r3, #2
 8003574:	e048      	b.n	8003608 <HAL_DMA_Start_IT+0xb8>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b01      	cmp	r3, #1
 8003588:	d137      	bne.n	80035fa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2202      	movs	r2, #2
 800358e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	68b9      	ldr	r1, [r7, #8]
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 f9c0 	bl	8003924 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a8:	223f      	movs	r2, #63	@ 0x3f
 80035aa:	409a      	lsls	r2, r3
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 0216 	orr.w	r2, r2, #22
 80035be:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	695a      	ldr	r2, [r3, #20]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80035ce:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d007      	beq.n	80035e8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f042 0208 	orr.w	r2, r2, #8
 80035e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0201 	orr.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	e005      	b.n	8003606 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003602:	2302      	movs	r3, #2
 8003604:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003606:	7dfb      	ldrb	r3, [r7, #23]
}
 8003608:	4618      	mov	r0, r3
 800360a:	3718      	adds	r7, #24
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003618:	2300      	movs	r3, #0
 800361a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800361c:	4b8e      	ldr	r3, [pc, #568]	@ (8003858 <HAL_DMA_IRQHandler+0x248>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a8e      	ldr	r2, [pc, #568]	@ (800385c <HAL_DMA_IRQHandler+0x24c>)
 8003622:	fba2 2303 	umull	r2, r3, r2, r3
 8003626:	0a9b      	lsrs	r3, r3, #10
 8003628:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800362e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800363a:	2208      	movs	r2, #8
 800363c:	409a      	lsls	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4013      	ands	r3, r2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d01a      	beq.n	800367c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	d013      	beq.n	800367c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 0204 	bic.w	r2, r2, #4
 8003662:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003668:	2208      	movs	r2, #8
 800366a:	409a      	lsls	r2, r3
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003674:	f043 0201 	orr.w	r2, r3, #1
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003680:	2201      	movs	r2, #1
 8003682:	409a      	lsls	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4013      	ands	r3, r2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d012      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00b      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800369e:	2201      	movs	r2, #1
 80036a0:	409a      	lsls	r2, r3
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036aa:	f043 0202 	orr.w	r2, r3, #2
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b6:	2204      	movs	r2, #4
 80036b8:	409a      	lsls	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	4013      	ands	r3, r2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d012      	beq.n	80036e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00b      	beq.n	80036e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d4:	2204      	movs	r2, #4
 80036d6:	409a      	lsls	r2, r3
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036e0:	f043 0204 	orr.w	r2, r3, #4
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ec:	2210      	movs	r2, #16
 80036ee:	409a      	lsls	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4013      	ands	r3, r2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d043      	beq.n	8003780 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	2b00      	cmp	r3, #0
 8003704:	d03c      	beq.n	8003780 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800370a:	2210      	movs	r2, #16
 800370c:	409a      	lsls	r2, r3
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d018      	beq.n	8003752 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d108      	bne.n	8003740 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003732:	2b00      	cmp	r3, #0
 8003734:	d024      	beq.n	8003780 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	4798      	blx	r3
 800373e:	e01f      	b.n	8003780 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003744:	2b00      	cmp	r3, #0
 8003746:	d01b      	beq.n	8003780 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	4798      	blx	r3
 8003750:	e016      	b.n	8003780 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800375c:	2b00      	cmp	r3, #0
 800375e:	d107      	bne.n	8003770 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0208 	bic.w	r2, r2, #8
 800376e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003784:	2220      	movs	r2, #32
 8003786:	409a      	lsls	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4013      	ands	r3, r2
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 808f 	beq.w	80038b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0310 	and.w	r3, r3, #16
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 8087 	beq.w	80038b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a6:	2220      	movs	r2, #32
 80037a8:	409a      	lsls	r2, r3
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b05      	cmp	r3, #5
 80037b8:	d136      	bne.n	8003828 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0216 	bic.w	r2, r2, #22
 80037c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	695a      	ldr	r2, [r3, #20]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d103      	bne.n	80037ea <HAL_DMA_IRQHandler+0x1da>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d007      	beq.n	80037fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0208 	bic.w	r2, r2, #8
 80037f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037fe:	223f      	movs	r2, #63	@ 0x3f
 8003800:	409a      	lsls	r2, r3
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800381a:	2b00      	cmp	r3, #0
 800381c:	d07e      	beq.n	800391c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	4798      	blx	r3
        }
        return;
 8003826:	e079      	b.n	800391c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d01d      	beq.n	8003872 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10d      	bne.n	8003860 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003848:	2b00      	cmp	r3, #0
 800384a:	d031      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	4798      	blx	r3
 8003854:	e02c      	b.n	80038b0 <HAL_DMA_IRQHandler+0x2a0>
 8003856:	bf00      	nop
 8003858:	20000018 	.word	0x20000018
 800385c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003864:	2b00      	cmp	r3, #0
 8003866:	d023      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	4798      	blx	r3
 8003870:	e01e      	b.n	80038b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10f      	bne.n	80038a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0210 	bic.w	r2, r2, #16
 800388e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d003      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d032      	beq.n	800391e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d022      	beq.n	800390a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2205      	movs	r2, #5
 80038c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0201 	bic.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	3301      	adds	r3, #1
 80038e0:	60bb      	str	r3, [r7, #8]
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d307      	bcc.n	80038f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1f2      	bne.n	80038dc <HAL_DMA_IRQHandler+0x2cc>
 80038f6:	e000      	b.n	80038fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80038f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800390e:	2b00      	cmp	r3, #0
 8003910:	d005      	beq.n	800391e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	4798      	blx	r3
 800391a:	e000      	b.n	800391e <HAL_DMA_IRQHandler+0x30e>
        return;
 800391c:	bf00      	nop
    }
  }
}
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
 8003930:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003940:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	2b40      	cmp	r3, #64	@ 0x40
 8003950:	d108      	bne.n	8003964 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003962:	e007      	b.n	8003974 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	60da      	str	r2, [r3, #12]
}
 8003974:	bf00      	nop
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	b2db      	uxtb	r3, r3
 800398e:	3b10      	subs	r3, #16
 8003990:	4a13      	ldr	r2, [pc, #76]	@ (80039e0 <DMA_CalcBaseAndBitshift+0x60>)
 8003992:	fba2 2303 	umull	r2, r3, r2, r3
 8003996:	091b      	lsrs	r3, r3, #4
 8003998:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800399a:	4a12      	ldr	r2, [pc, #72]	@ (80039e4 <DMA_CalcBaseAndBitshift+0x64>)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4413      	add	r3, r2
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	461a      	mov	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2b03      	cmp	r3, #3
 80039ac:	d908      	bls.n	80039c0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	461a      	mov	r2, r3
 80039b4:	4b0c      	ldr	r3, [pc, #48]	@ (80039e8 <DMA_CalcBaseAndBitshift+0x68>)
 80039b6:	4013      	ands	r3, r2
 80039b8:	1d1a      	adds	r2, r3, #4
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	659a      	str	r2, [r3, #88]	@ 0x58
 80039be:	e006      	b.n	80039ce <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	461a      	mov	r2, r3
 80039c6:	4b08      	ldr	r3, [pc, #32]	@ (80039e8 <DMA_CalcBaseAndBitshift+0x68>)
 80039c8:	4013      	ands	r3, r2
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3714      	adds	r7, #20
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	aaaaaaab 	.word	0xaaaaaaab
 80039e4:	08006b30 	.word	0x08006b30
 80039e8:	fffffc00 	.word	0xfffffc00

080039ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039f4:	2300      	movs	r3, #0
 80039f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d11f      	bne.n	8003a46 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	2b03      	cmp	r3, #3
 8003a0a:	d856      	bhi.n	8003aba <DMA_CheckFifoParam+0xce>
 8003a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a14 <DMA_CheckFifoParam+0x28>)
 8003a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a12:	bf00      	nop
 8003a14:	08003a25 	.word	0x08003a25
 8003a18:	08003a37 	.word	0x08003a37
 8003a1c:	08003a25 	.word	0x08003a25
 8003a20:	08003abb 	.word	0x08003abb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d046      	beq.n	8003abe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a34:	e043      	b.n	8003abe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a3e:	d140      	bne.n	8003ac2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a44:	e03d      	b.n	8003ac2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a4e:	d121      	bne.n	8003a94 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2b03      	cmp	r3, #3
 8003a54:	d837      	bhi.n	8003ac6 <DMA_CheckFifoParam+0xda>
 8003a56:	a201      	add	r2, pc, #4	@ (adr r2, 8003a5c <DMA_CheckFifoParam+0x70>)
 8003a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5c:	08003a6d 	.word	0x08003a6d
 8003a60:	08003a73 	.word	0x08003a73
 8003a64:	08003a6d 	.word	0x08003a6d
 8003a68:	08003a85 	.word	0x08003a85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a70:	e030      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a76:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d025      	beq.n	8003aca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a82:	e022      	b.n	8003aca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a88:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a8c:	d11f      	bne.n	8003ace <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a92:	e01c      	b.n	8003ace <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d903      	bls.n	8003aa2 <DMA_CheckFifoParam+0xb6>
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	2b03      	cmp	r3, #3
 8003a9e:	d003      	beq.n	8003aa8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003aa0:	e018      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	73fb      	strb	r3, [r7, #15]
      break;
 8003aa6:	e015      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00e      	beq.n	8003ad2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ab8:	e00b      	b.n	8003ad2 <DMA_CheckFifoParam+0xe6>
      break;
 8003aba:	bf00      	nop
 8003abc:	e00a      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
      break;
 8003abe:	bf00      	nop
 8003ac0:	e008      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ac2:	bf00      	nop
 8003ac4:	e006      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ac6:	bf00      	nop
 8003ac8:	e004      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
      break;
 8003aca:	bf00      	nop
 8003acc:	e002      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003ace:	bf00      	nop
 8003ad0:	e000      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ad2:	bf00      	nop
    }
  } 
  
  return status; 
 8003ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop

08003ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b089      	sub	sp, #36	@ 0x24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003aee:	2300      	movs	r3, #0
 8003af0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003af2:	2300      	movs	r3, #0
 8003af4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003af6:	2300      	movs	r3, #0
 8003af8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003afa:	2300      	movs	r3, #0
 8003afc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003afe:	2300      	movs	r3, #0
 8003b00:	61fb      	str	r3, [r7, #28]
 8003b02:	e175      	b.n	8003df0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003b04:	2201      	movs	r2, #1
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	4013      	ands	r3, r2
 8003b16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	f040 8164 	bne.w	8003dea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f003 0303 	and.w	r3, r3, #3
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d005      	beq.n	8003b3a <HAL_GPIO_Init+0x56>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f003 0303 	and.w	r3, r3, #3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d130      	bne.n	8003b9c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	2203      	movs	r2, #3
 8003b46:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4a:	43db      	mvns	r3, r3
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	68da      	ldr	r2, [r3, #12]
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b70:	2201      	movs	r2, #1
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	fa02 f303 	lsl.w	r3, r2, r3
 8003b78:	43db      	mvns	r3, r3
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	091b      	lsrs	r3, r3, #4
 8003b86:	f003 0201 	and.w	r2, r3, #1
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f003 0303 	and.w	r3, r3, #3
 8003ba4:	2b03      	cmp	r3, #3
 8003ba6:	d017      	beq.n	8003bd8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	2203      	movs	r2, #3
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	43db      	mvns	r3, r3
 8003bba:	69ba      	ldr	r2, [r7, #24]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f003 0303 	and.w	r3, r3, #3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d123      	bne.n	8003c2c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	08da      	lsrs	r2, r3, #3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3208      	adds	r2, #8
 8003bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	f003 0307 	and.w	r3, r3, #7
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	220f      	movs	r2, #15
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	43db      	mvns	r3, r3
 8003c02:	69ba      	ldr	r2, [r7, #24]
 8003c04:	4013      	ands	r3, r2
 8003c06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	691a      	ldr	r2, [r3, #16]
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	f003 0307 	and.w	r3, r3, #7
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	08da      	lsrs	r2, r3, #3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	3208      	adds	r2, #8
 8003c26:	69b9      	ldr	r1, [r7, #24]
 8003c28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	2203      	movs	r2, #3
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	4013      	ands	r3, r2
 8003c42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f003 0203 	and.w	r2, r3, #3
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f000 80be 	beq.w	8003dea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c6e:	4b66      	ldr	r3, [pc, #408]	@ (8003e08 <HAL_GPIO_Init+0x324>)
 8003c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c72:	4a65      	ldr	r2, [pc, #404]	@ (8003e08 <HAL_GPIO_Init+0x324>)
 8003c74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c78:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c7a:	4b63      	ldr	r3, [pc, #396]	@ (8003e08 <HAL_GPIO_Init+0x324>)
 8003c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c82:	60fb      	str	r3, [r7, #12]
 8003c84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003c86:	4a61      	ldr	r2, [pc, #388]	@ (8003e0c <HAL_GPIO_Init+0x328>)
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	089b      	lsrs	r3, r3, #2
 8003c8c:	3302      	adds	r3, #2
 8003c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	220f      	movs	r2, #15
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a58      	ldr	r2, [pc, #352]	@ (8003e10 <HAL_GPIO_Init+0x32c>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d037      	beq.n	8003d22 <HAL_GPIO_Init+0x23e>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a57      	ldr	r2, [pc, #348]	@ (8003e14 <HAL_GPIO_Init+0x330>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d031      	beq.n	8003d1e <HAL_GPIO_Init+0x23a>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a56      	ldr	r2, [pc, #344]	@ (8003e18 <HAL_GPIO_Init+0x334>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d02b      	beq.n	8003d1a <HAL_GPIO_Init+0x236>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a55      	ldr	r2, [pc, #340]	@ (8003e1c <HAL_GPIO_Init+0x338>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d025      	beq.n	8003d16 <HAL_GPIO_Init+0x232>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a54      	ldr	r2, [pc, #336]	@ (8003e20 <HAL_GPIO_Init+0x33c>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d01f      	beq.n	8003d12 <HAL_GPIO_Init+0x22e>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a53      	ldr	r2, [pc, #332]	@ (8003e24 <HAL_GPIO_Init+0x340>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d019      	beq.n	8003d0e <HAL_GPIO_Init+0x22a>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a52      	ldr	r2, [pc, #328]	@ (8003e28 <HAL_GPIO_Init+0x344>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d013      	beq.n	8003d0a <HAL_GPIO_Init+0x226>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a51      	ldr	r2, [pc, #324]	@ (8003e2c <HAL_GPIO_Init+0x348>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d00d      	beq.n	8003d06 <HAL_GPIO_Init+0x222>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a50      	ldr	r2, [pc, #320]	@ (8003e30 <HAL_GPIO_Init+0x34c>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d007      	beq.n	8003d02 <HAL_GPIO_Init+0x21e>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a4f      	ldr	r2, [pc, #316]	@ (8003e34 <HAL_GPIO_Init+0x350>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d101      	bne.n	8003cfe <HAL_GPIO_Init+0x21a>
 8003cfa:	2309      	movs	r3, #9
 8003cfc:	e012      	b.n	8003d24 <HAL_GPIO_Init+0x240>
 8003cfe:	230a      	movs	r3, #10
 8003d00:	e010      	b.n	8003d24 <HAL_GPIO_Init+0x240>
 8003d02:	2308      	movs	r3, #8
 8003d04:	e00e      	b.n	8003d24 <HAL_GPIO_Init+0x240>
 8003d06:	2307      	movs	r3, #7
 8003d08:	e00c      	b.n	8003d24 <HAL_GPIO_Init+0x240>
 8003d0a:	2306      	movs	r3, #6
 8003d0c:	e00a      	b.n	8003d24 <HAL_GPIO_Init+0x240>
 8003d0e:	2305      	movs	r3, #5
 8003d10:	e008      	b.n	8003d24 <HAL_GPIO_Init+0x240>
 8003d12:	2304      	movs	r3, #4
 8003d14:	e006      	b.n	8003d24 <HAL_GPIO_Init+0x240>
 8003d16:	2303      	movs	r3, #3
 8003d18:	e004      	b.n	8003d24 <HAL_GPIO_Init+0x240>
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	e002      	b.n	8003d24 <HAL_GPIO_Init+0x240>
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e000      	b.n	8003d24 <HAL_GPIO_Init+0x240>
 8003d22:	2300      	movs	r3, #0
 8003d24:	69fa      	ldr	r2, [r7, #28]
 8003d26:	f002 0203 	and.w	r2, r2, #3
 8003d2a:	0092      	lsls	r2, r2, #2
 8003d2c:	4093      	lsls	r3, r2
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003d34:	4935      	ldr	r1, [pc, #212]	@ (8003e0c <HAL_GPIO_Init+0x328>)
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	089b      	lsrs	r3, r3, #2
 8003d3a:	3302      	adds	r3, #2
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d42:	4b3d      	ldr	r3, [pc, #244]	@ (8003e38 <HAL_GPIO_Init+0x354>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	43db      	mvns	r3, r3
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d66:	4a34      	ldr	r2, [pc, #208]	@ (8003e38 <HAL_GPIO_Init+0x354>)
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d6c:	4b32      	ldr	r3, [pc, #200]	@ (8003e38 <HAL_GPIO_Init+0x354>)
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	43db      	mvns	r3, r3
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d003      	beq.n	8003d90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d90:	4a29      	ldr	r2, [pc, #164]	@ (8003e38 <HAL_GPIO_Init+0x354>)
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d96:	4b28      	ldr	r3, [pc, #160]	@ (8003e38 <HAL_GPIO_Init+0x354>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	43db      	mvns	r3, r3
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	4013      	ands	r3, r2
 8003da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003dba:	4a1f      	ldr	r2, [pc, #124]	@ (8003e38 <HAL_GPIO_Init+0x354>)
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003dc0:	4b1d      	ldr	r3, [pc, #116]	@ (8003e38 <HAL_GPIO_Init+0x354>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	43db      	mvns	r3, r3
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d003      	beq.n	8003de4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003de4:	4a14      	ldr	r2, [pc, #80]	@ (8003e38 <HAL_GPIO_Init+0x354>)
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	3301      	adds	r3, #1
 8003dee:	61fb      	str	r3, [r7, #28]
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	2b0f      	cmp	r3, #15
 8003df4:	f67f ae86 	bls.w	8003b04 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003df8:	bf00      	nop
 8003dfa:	bf00      	nop
 8003dfc:	3724      	adds	r7, #36	@ 0x24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	40023800 	.word	0x40023800
 8003e0c:	40013800 	.word	0x40013800
 8003e10:	40020000 	.word	0x40020000
 8003e14:	40020400 	.word	0x40020400
 8003e18:	40020800 	.word	0x40020800
 8003e1c:	40020c00 	.word	0x40020c00
 8003e20:	40021000 	.word	0x40021000
 8003e24:	40021400 	.word	0x40021400
 8003e28:	40021800 	.word	0x40021800
 8003e2c:	40021c00 	.word	0x40021c00
 8003e30:	40022000 	.word	0x40022000
 8003e34:	40022400 	.word	0x40022400
 8003e38:	40013c00 	.word	0x40013c00

08003e3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	460b      	mov	r3, r1
 8003e46:	807b      	strh	r3, [r7, #2]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e4c:	787b      	ldrb	r3, [r7, #1]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e52:	887a      	ldrh	r2, [r7, #2]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003e58:	e003      	b.n	8003e62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003e5a:	887b      	ldrh	r3, [r7, #2]
 8003e5c:	041a      	lsls	r2, r3, #16
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	619a      	str	r2, [r3, #24]
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
	...

08003e70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e07f      	b.n	8003f82 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d106      	bne.n	8003e9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7fd faa0 	bl	80013dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2224      	movs	r2, #36	@ 0x24
 8003ea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 0201 	bic.w	r2, r2, #1
 8003eb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003ec0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ed0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d107      	bne.n	8003eea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689a      	ldr	r2, [r3, #8]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ee6:	609a      	str	r2, [r3, #8]
 8003ee8:	e006      	b.n	8003ef8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689a      	ldr	r2, [r3, #8]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003ef6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d104      	bne.n	8003f0a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f08:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6859      	ldr	r1, [r3, #4]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	4b1d      	ldr	r3, [pc, #116]	@ (8003f8c <HAL_I2C_Init+0x11c>)
 8003f16:	430b      	orrs	r3, r1
 8003f18:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68da      	ldr	r2, [r3, #12]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f28:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	691a      	ldr	r2, [r3, #16]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	69d9      	ldr	r1, [r3, #28]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a1a      	ldr	r2, [r3, #32]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f042 0201 	orr.w	r2, r2, #1
 8003f62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	02008000 	.word	0x02008000

08003f90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b20      	cmp	r3, #32
 8003fa4:	d138      	bne.n	8004018 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d101      	bne.n	8003fb4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	e032      	b.n	800401a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2224      	movs	r2, #36	@ 0x24
 8003fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f022 0201 	bic.w	r2, r2, #1
 8003fd2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003fe2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6819      	ldr	r1, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f042 0201 	orr.w	r2, r2, #1
 8004002:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2220      	movs	r2, #32
 8004008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004014:	2300      	movs	r3, #0
 8004016:	e000      	b.n	800401a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004018:	2302      	movs	r3, #2
  }
}
 800401a:	4618      	mov	r0, r3
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004026:	b480      	push	{r7}
 8004028:	b085      	sub	sp, #20
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
 800402e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b20      	cmp	r3, #32
 800403a:	d139      	bne.n	80040b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004042:	2b01      	cmp	r3, #1
 8004044:	d101      	bne.n	800404a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004046:	2302      	movs	r3, #2
 8004048:	e033      	b.n	80040b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2224      	movs	r2, #36	@ 0x24
 8004056:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 0201 	bic.w	r2, r2, #1
 8004068:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004078:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	021b      	lsls	r3, r3, #8
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	4313      	orrs	r3, r2
 8004082:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 0201 	orr.w	r2, r2, #1
 800409a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2220      	movs	r2, #32
 80040a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80040ac:	2300      	movs	r3, #0
 80040ae:	e000      	b.n	80040b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80040b0:	2302      	movs	r3, #2
  }
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3714      	adds	r7, #20
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
	...

080040c0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80040c6:	2300      	movs	r3, #0
 80040c8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80040ca:	4b23      	ldr	r3, [pc, #140]	@ (8004158 <HAL_PWREx_EnableOverDrive+0x98>)
 80040cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ce:	4a22      	ldr	r2, [pc, #136]	@ (8004158 <HAL_PWREx_EnableOverDrive+0x98>)
 80040d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80040d6:	4b20      	ldr	r3, [pc, #128]	@ (8004158 <HAL_PWREx_EnableOverDrive+0x98>)
 80040d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040de:	603b      	str	r3, [r7, #0]
 80040e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80040e2:	4b1e      	ldr	r3, [pc, #120]	@ (800415c <HAL_PWREx_EnableOverDrive+0x9c>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a1d      	ldr	r2, [pc, #116]	@ (800415c <HAL_PWREx_EnableOverDrive+0x9c>)
 80040e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040ec:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040ee:	f7fe f823 	bl	8002138 <HAL_GetTick>
 80040f2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80040f4:	e009      	b.n	800410a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80040f6:	f7fe f81f 	bl	8002138 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004104:	d901      	bls.n	800410a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e022      	b.n	8004150 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800410a:	4b14      	ldr	r3, [pc, #80]	@ (800415c <HAL_PWREx_EnableOverDrive+0x9c>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004112:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004116:	d1ee      	bne.n	80040f6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004118:	4b10      	ldr	r3, [pc, #64]	@ (800415c <HAL_PWREx_EnableOverDrive+0x9c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a0f      	ldr	r2, [pc, #60]	@ (800415c <HAL_PWREx_EnableOverDrive+0x9c>)
 800411e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004122:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004124:	f7fe f808 	bl	8002138 <HAL_GetTick>
 8004128:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800412a:	e009      	b.n	8004140 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800412c:	f7fe f804 	bl	8002138 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800413a:	d901      	bls.n	8004140 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e007      	b.n	8004150 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004140:	4b06      	ldr	r3, [pc, #24]	@ (800415c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004148:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800414c:	d1ee      	bne.n	800412c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	40023800 	.word	0x40023800
 800415c:	40007000 	.word	0x40007000

08004160 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004168:	2300      	movs	r3, #0
 800416a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e29b      	b.n	80046ae <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b00      	cmp	r3, #0
 8004180:	f000 8087 	beq.w	8004292 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004184:	4b96      	ldr	r3, [pc, #600]	@ (80043e0 <HAL_RCC_OscConfig+0x280>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f003 030c 	and.w	r3, r3, #12
 800418c:	2b04      	cmp	r3, #4
 800418e:	d00c      	beq.n	80041aa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004190:	4b93      	ldr	r3, [pc, #588]	@ (80043e0 <HAL_RCC_OscConfig+0x280>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f003 030c 	and.w	r3, r3, #12
 8004198:	2b08      	cmp	r3, #8
 800419a:	d112      	bne.n	80041c2 <HAL_RCC_OscConfig+0x62>
 800419c:	4b90      	ldr	r3, [pc, #576]	@ (80043e0 <HAL_RCC_OscConfig+0x280>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041a8:	d10b      	bne.n	80041c2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041aa:	4b8d      	ldr	r3, [pc, #564]	@ (80043e0 <HAL_RCC_OscConfig+0x280>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d06c      	beq.n	8004290 <HAL_RCC_OscConfig+0x130>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d168      	bne.n	8004290 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e275      	b.n	80046ae <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041ca:	d106      	bne.n	80041da <HAL_RCC_OscConfig+0x7a>
 80041cc:	4b84      	ldr	r3, [pc, #528]	@ (80043e0 <HAL_RCC_OscConfig+0x280>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a83      	ldr	r2, [pc, #524]	@ (80043e0 <HAL_RCC_OscConfig+0x280>)
 80041d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041d6:	6013      	str	r3, [r2, #0]
 80041d8:	e02e      	b.n	8004238 <HAL_RCC_OscConfig+0xd8>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10c      	bne.n	80041fc <HAL_RCC_OscConfig+0x9c>
 80041e2:	4b7f      	ldr	r3, [pc, #508]	@ (80043e0 <HAL_RCC_OscConfig+0x280>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a7e      	ldr	r2, [pc, #504]	@ (80043e0 <HAL_RCC_OscConfig+0x280>)
 80041e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041ec:	6013      	str	r3, [r2, #0]
 80041ee:	4b7c      	ldr	r3, [pc, #496]	@ (80043e0 <HAL_RCC_OscConfig+0x280>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a7b      	ldr	r2, [pc, #492]	@ (80043e0 <HAL_RCC_OscConfig+0x280>)
 80041f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	e01d      	b.n	8004238 <HAL_RCC_OscConfig+0xd8>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004204:	d10c      	bne.n	8004220 <HAL_RCC_OscConfig+0xc0>
 8004206:	4b76      	ldr	r3, [pc, #472]	@ (80043e0 <HAL_RCC_OscConfig+0x280>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a75      	ldr	r2, [pc, #468]	@ (80043e0 <HAL_RCC_OscConfig+0x280>)
 800420c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004210:	6013      	str	r3, [r2, #0]
 8004212:	4b73      	ldr	r3, [pc, #460]	@ (80043e0 <HAL_RCC_OscConfig+0x280>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a72      	ldr	r2, [pc, #456]	@ (80043e0 <HAL_RCC_OscConfig+0x280>)
 8004218:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	e00b      	b.n	8004238 <HAL_RCC_OscConfig+0xd8>
 8004220:	4b6f      	ldr	r3, [pc, #444]	@ (80043e0 <HAL_RCC_OscConfig+0x280>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a6e      	ldr	r2, [pc, #440]	@ (80043e0 <HAL_RCC_OscConfig+0x280>)
 8004226:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800422a:	6013      	str	r3, [r2, #0]
 800422c:	4b6c      	ldr	r3, [pc, #432]	@ (80043e0 <HAL_RCC_OscConfig+0x280>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a6b      	ldr	r2, [pc, #428]	@ (80043e0 <HAL_RCC_OscConfig+0x280>)
 8004232:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004236:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d013      	beq.n	8004268 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004240:	f7fd ff7a 	bl	8002138 <HAL_GetTick>
 8004244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004246:	e008      	b.n	800425a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004248:	f7fd ff76 	bl	8002138 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b64      	cmp	r3, #100	@ 0x64
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e229      	b.n	80046ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800425a:	4b61      	ldr	r3, [pc, #388]	@ (80043e0 <HAL_RCC_OscConfig+0x280>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d0f0      	beq.n	8004248 <HAL_RCC_OscConfig+0xe8>
 8004266:	e014      	b.n	8004292 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004268:	f7fd ff66 	bl	8002138 <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004270:	f7fd ff62 	bl	8002138 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b64      	cmp	r3, #100	@ 0x64
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e215      	b.n	80046ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004282:	4b57      	ldr	r3, [pc, #348]	@ (80043e0 <HAL_RCC_OscConfig+0x280>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1f0      	bne.n	8004270 <HAL_RCC_OscConfig+0x110>
 800428e:	e000      	b.n	8004292 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d069      	beq.n	8004372 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800429e:	4b50      	ldr	r3, [pc, #320]	@ (80043e0 <HAL_RCC_OscConfig+0x280>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 030c 	and.w	r3, r3, #12
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00b      	beq.n	80042c2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042aa:	4b4d      	ldr	r3, [pc, #308]	@ (80043e0 <HAL_RCC_OscConfig+0x280>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f003 030c 	and.w	r3, r3, #12
 80042b2:	2b08      	cmp	r3, #8
 80042b4:	d11c      	bne.n	80042f0 <HAL_RCC_OscConfig+0x190>
 80042b6:	4b4a      	ldr	r3, [pc, #296]	@ (80043e0 <HAL_RCC_OscConfig+0x280>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d116      	bne.n	80042f0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042c2:	4b47      	ldr	r3, [pc, #284]	@ (80043e0 <HAL_RCC_OscConfig+0x280>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d005      	beq.n	80042da <HAL_RCC_OscConfig+0x17a>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d001      	beq.n	80042da <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e1e9      	b.n	80046ae <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042da:	4b41      	ldr	r3, [pc, #260]	@ (80043e0 <HAL_RCC_OscConfig+0x280>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	00db      	lsls	r3, r3, #3
 80042e8:	493d      	ldr	r1, [pc, #244]	@ (80043e0 <HAL_RCC_OscConfig+0x280>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ee:	e040      	b.n	8004372 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d023      	beq.n	8004340 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042f8:	4b39      	ldr	r3, [pc, #228]	@ (80043e0 <HAL_RCC_OscConfig+0x280>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a38      	ldr	r2, [pc, #224]	@ (80043e0 <HAL_RCC_OscConfig+0x280>)
 80042fe:	f043 0301 	orr.w	r3, r3, #1
 8004302:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004304:	f7fd ff18 	bl	8002138 <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800430a:	e008      	b.n	800431e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800430c:	f7fd ff14 	bl	8002138 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b02      	cmp	r3, #2
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e1c7      	b.n	80046ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800431e:	4b30      	ldr	r3, [pc, #192]	@ (80043e0 <HAL_RCC_OscConfig+0x280>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d0f0      	beq.n	800430c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800432a:	4b2d      	ldr	r3, [pc, #180]	@ (80043e0 <HAL_RCC_OscConfig+0x280>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	4929      	ldr	r1, [pc, #164]	@ (80043e0 <HAL_RCC_OscConfig+0x280>)
 800433a:	4313      	orrs	r3, r2
 800433c:	600b      	str	r3, [r1, #0]
 800433e:	e018      	b.n	8004372 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004340:	4b27      	ldr	r3, [pc, #156]	@ (80043e0 <HAL_RCC_OscConfig+0x280>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a26      	ldr	r2, [pc, #152]	@ (80043e0 <HAL_RCC_OscConfig+0x280>)
 8004346:	f023 0301 	bic.w	r3, r3, #1
 800434a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434c:	f7fd fef4 	bl	8002138 <HAL_GetTick>
 8004350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004352:	e008      	b.n	8004366 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004354:	f7fd fef0 	bl	8002138 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b02      	cmp	r3, #2
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e1a3      	b.n	80046ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004366:	4b1e      	ldr	r3, [pc, #120]	@ (80043e0 <HAL_RCC_OscConfig+0x280>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1f0      	bne.n	8004354 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0308 	and.w	r3, r3, #8
 800437a:	2b00      	cmp	r3, #0
 800437c:	d038      	beq.n	80043f0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d019      	beq.n	80043ba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004386:	4b16      	ldr	r3, [pc, #88]	@ (80043e0 <HAL_RCC_OscConfig+0x280>)
 8004388:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800438a:	4a15      	ldr	r2, [pc, #84]	@ (80043e0 <HAL_RCC_OscConfig+0x280>)
 800438c:	f043 0301 	orr.w	r3, r3, #1
 8004390:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004392:	f7fd fed1 	bl	8002138 <HAL_GetTick>
 8004396:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004398:	e008      	b.n	80043ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800439a:	f7fd fecd 	bl	8002138 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d901      	bls.n	80043ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e180      	b.n	80046ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ac:	4b0c      	ldr	r3, [pc, #48]	@ (80043e0 <HAL_RCC_OscConfig+0x280>)
 80043ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0f0      	beq.n	800439a <HAL_RCC_OscConfig+0x23a>
 80043b8:	e01a      	b.n	80043f0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043ba:	4b09      	ldr	r3, [pc, #36]	@ (80043e0 <HAL_RCC_OscConfig+0x280>)
 80043bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043be:	4a08      	ldr	r2, [pc, #32]	@ (80043e0 <HAL_RCC_OscConfig+0x280>)
 80043c0:	f023 0301 	bic.w	r3, r3, #1
 80043c4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c6:	f7fd feb7 	bl	8002138 <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043cc:	e00a      	b.n	80043e4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043ce:	f7fd feb3 	bl	8002138 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d903      	bls.n	80043e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e166      	b.n	80046ae <HAL_RCC_OscConfig+0x54e>
 80043e0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043e4:	4b92      	ldr	r3, [pc, #584]	@ (8004630 <HAL_RCC_OscConfig+0x4d0>)
 80043e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1ee      	bne.n	80043ce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0304 	and.w	r3, r3, #4
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f000 80a4 	beq.w	8004546 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043fe:	4b8c      	ldr	r3, [pc, #560]	@ (8004630 <HAL_RCC_OscConfig+0x4d0>)
 8004400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10d      	bne.n	8004426 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800440a:	4b89      	ldr	r3, [pc, #548]	@ (8004630 <HAL_RCC_OscConfig+0x4d0>)
 800440c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440e:	4a88      	ldr	r2, [pc, #544]	@ (8004630 <HAL_RCC_OscConfig+0x4d0>)
 8004410:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004414:	6413      	str	r3, [r2, #64]	@ 0x40
 8004416:	4b86      	ldr	r3, [pc, #536]	@ (8004630 <HAL_RCC_OscConfig+0x4d0>)
 8004418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800441e:	60bb      	str	r3, [r7, #8]
 8004420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004422:	2301      	movs	r3, #1
 8004424:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004426:	4b83      	ldr	r3, [pc, #524]	@ (8004634 <HAL_RCC_OscConfig+0x4d4>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800442e:	2b00      	cmp	r3, #0
 8004430:	d118      	bne.n	8004464 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004432:	4b80      	ldr	r3, [pc, #512]	@ (8004634 <HAL_RCC_OscConfig+0x4d4>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a7f      	ldr	r2, [pc, #508]	@ (8004634 <HAL_RCC_OscConfig+0x4d4>)
 8004438:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800443c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800443e:	f7fd fe7b 	bl	8002138 <HAL_GetTick>
 8004442:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004444:	e008      	b.n	8004458 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004446:	f7fd fe77 	bl	8002138 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b64      	cmp	r3, #100	@ 0x64
 8004452:	d901      	bls.n	8004458 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e12a      	b.n	80046ae <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004458:	4b76      	ldr	r3, [pc, #472]	@ (8004634 <HAL_RCC_OscConfig+0x4d4>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004460:	2b00      	cmp	r3, #0
 8004462:	d0f0      	beq.n	8004446 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d106      	bne.n	800447a <HAL_RCC_OscConfig+0x31a>
 800446c:	4b70      	ldr	r3, [pc, #448]	@ (8004630 <HAL_RCC_OscConfig+0x4d0>)
 800446e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004470:	4a6f      	ldr	r2, [pc, #444]	@ (8004630 <HAL_RCC_OscConfig+0x4d0>)
 8004472:	f043 0301 	orr.w	r3, r3, #1
 8004476:	6713      	str	r3, [r2, #112]	@ 0x70
 8004478:	e02d      	b.n	80044d6 <HAL_RCC_OscConfig+0x376>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10c      	bne.n	800449c <HAL_RCC_OscConfig+0x33c>
 8004482:	4b6b      	ldr	r3, [pc, #428]	@ (8004630 <HAL_RCC_OscConfig+0x4d0>)
 8004484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004486:	4a6a      	ldr	r2, [pc, #424]	@ (8004630 <HAL_RCC_OscConfig+0x4d0>)
 8004488:	f023 0301 	bic.w	r3, r3, #1
 800448c:	6713      	str	r3, [r2, #112]	@ 0x70
 800448e:	4b68      	ldr	r3, [pc, #416]	@ (8004630 <HAL_RCC_OscConfig+0x4d0>)
 8004490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004492:	4a67      	ldr	r2, [pc, #412]	@ (8004630 <HAL_RCC_OscConfig+0x4d0>)
 8004494:	f023 0304 	bic.w	r3, r3, #4
 8004498:	6713      	str	r3, [r2, #112]	@ 0x70
 800449a:	e01c      	b.n	80044d6 <HAL_RCC_OscConfig+0x376>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	2b05      	cmp	r3, #5
 80044a2:	d10c      	bne.n	80044be <HAL_RCC_OscConfig+0x35e>
 80044a4:	4b62      	ldr	r3, [pc, #392]	@ (8004630 <HAL_RCC_OscConfig+0x4d0>)
 80044a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044a8:	4a61      	ldr	r2, [pc, #388]	@ (8004630 <HAL_RCC_OscConfig+0x4d0>)
 80044aa:	f043 0304 	orr.w	r3, r3, #4
 80044ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80044b0:	4b5f      	ldr	r3, [pc, #380]	@ (8004630 <HAL_RCC_OscConfig+0x4d0>)
 80044b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044b4:	4a5e      	ldr	r2, [pc, #376]	@ (8004630 <HAL_RCC_OscConfig+0x4d0>)
 80044b6:	f043 0301 	orr.w	r3, r3, #1
 80044ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80044bc:	e00b      	b.n	80044d6 <HAL_RCC_OscConfig+0x376>
 80044be:	4b5c      	ldr	r3, [pc, #368]	@ (8004630 <HAL_RCC_OscConfig+0x4d0>)
 80044c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044c2:	4a5b      	ldr	r2, [pc, #364]	@ (8004630 <HAL_RCC_OscConfig+0x4d0>)
 80044c4:	f023 0301 	bic.w	r3, r3, #1
 80044c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80044ca:	4b59      	ldr	r3, [pc, #356]	@ (8004630 <HAL_RCC_OscConfig+0x4d0>)
 80044cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ce:	4a58      	ldr	r2, [pc, #352]	@ (8004630 <HAL_RCC_OscConfig+0x4d0>)
 80044d0:	f023 0304 	bic.w	r3, r3, #4
 80044d4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d015      	beq.n	800450a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044de:	f7fd fe2b 	bl	8002138 <HAL_GetTick>
 80044e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044e4:	e00a      	b.n	80044fc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044e6:	f7fd fe27 	bl	8002138 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d901      	bls.n	80044fc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e0d8      	b.n	80046ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044fc:	4b4c      	ldr	r3, [pc, #304]	@ (8004630 <HAL_RCC_OscConfig+0x4d0>)
 80044fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b00      	cmp	r3, #0
 8004506:	d0ee      	beq.n	80044e6 <HAL_RCC_OscConfig+0x386>
 8004508:	e014      	b.n	8004534 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450a:	f7fd fe15 	bl	8002138 <HAL_GetTick>
 800450e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004510:	e00a      	b.n	8004528 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004512:	f7fd fe11 	bl	8002138 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004520:	4293      	cmp	r3, r2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e0c2      	b.n	80046ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004528:	4b41      	ldr	r3, [pc, #260]	@ (8004630 <HAL_RCC_OscConfig+0x4d0>)
 800452a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1ee      	bne.n	8004512 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004534:	7dfb      	ldrb	r3, [r7, #23]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d105      	bne.n	8004546 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800453a:	4b3d      	ldr	r3, [pc, #244]	@ (8004630 <HAL_RCC_OscConfig+0x4d0>)
 800453c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453e:	4a3c      	ldr	r2, [pc, #240]	@ (8004630 <HAL_RCC_OscConfig+0x4d0>)
 8004540:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004544:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	2b00      	cmp	r3, #0
 800454c:	f000 80ae 	beq.w	80046ac <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004550:	4b37      	ldr	r3, [pc, #220]	@ (8004630 <HAL_RCC_OscConfig+0x4d0>)
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f003 030c 	and.w	r3, r3, #12
 8004558:	2b08      	cmp	r3, #8
 800455a:	d06d      	beq.n	8004638 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	2b02      	cmp	r3, #2
 8004562:	d14b      	bne.n	80045fc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004564:	4b32      	ldr	r3, [pc, #200]	@ (8004630 <HAL_RCC_OscConfig+0x4d0>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a31      	ldr	r2, [pc, #196]	@ (8004630 <HAL_RCC_OscConfig+0x4d0>)
 800456a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800456e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004570:	f7fd fde2 	bl	8002138 <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004576:	e008      	b.n	800458a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004578:	f7fd fdde 	bl	8002138 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b02      	cmp	r3, #2
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e091      	b.n	80046ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800458a:	4b29      	ldr	r3, [pc, #164]	@ (8004630 <HAL_RCC_OscConfig+0x4d0>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1f0      	bne.n	8004578 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	69da      	ldr	r2, [r3, #28]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	431a      	orrs	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a4:	019b      	lsls	r3, r3, #6
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ac:	085b      	lsrs	r3, r3, #1
 80045ae:	3b01      	subs	r3, #1
 80045b0:	041b      	lsls	r3, r3, #16
 80045b2:	431a      	orrs	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b8:	061b      	lsls	r3, r3, #24
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c0:	071b      	lsls	r3, r3, #28
 80045c2:	491b      	ldr	r1, [pc, #108]	@ (8004630 <HAL_RCC_OscConfig+0x4d0>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045c8:	4b19      	ldr	r3, [pc, #100]	@ (8004630 <HAL_RCC_OscConfig+0x4d0>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a18      	ldr	r2, [pc, #96]	@ (8004630 <HAL_RCC_OscConfig+0x4d0>)
 80045ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d4:	f7fd fdb0 	bl	8002138 <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045da:	e008      	b.n	80045ee <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045dc:	f7fd fdac 	bl	8002138 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e05f      	b.n	80046ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ee:	4b10      	ldr	r3, [pc, #64]	@ (8004630 <HAL_RCC_OscConfig+0x4d0>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d0f0      	beq.n	80045dc <HAL_RCC_OscConfig+0x47c>
 80045fa:	e057      	b.n	80046ac <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004630 <HAL_RCC_OscConfig+0x4d0>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a0b      	ldr	r2, [pc, #44]	@ (8004630 <HAL_RCC_OscConfig+0x4d0>)
 8004602:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004606:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004608:	f7fd fd96 	bl	8002138 <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004610:	f7fd fd92 	bl	8002138 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e045      	b.n	80046ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004622:	4b03      	ldr	r3, [pc, #12]	@ (8004630 <HAL_RCC_OscConfig+0x4d0>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1f0      	bne.n	8004610 <HAL_RCC_OscConfig+0x4b0>
 800462e:	e03d      	b.n	80046ac <HAL_RCC_OscConfig+0x54c>
 8004630:	40023800 	.word	0x40023800
 8004634:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004638:	4b1f      	ldr	r3, [pc, #124]	@ (80046b8 <HAL_RCC_OscConfig+0x558>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d030      	beq.n	80046a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004650:	429a      	cmp	r2, r3
 8004652:	d129      	bne.n	80046a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800465e:	429a      	cmp	r2, r3
 8004660:	d122      	bne.n	80046a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004668:	4013      	ands	r3, r2
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800466e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004670:	4293      	cmp	r3, r2
 8004672:	d119      	bne.n	80046a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800467e:	085b      	lsrs	r3, r3, #1
 8004680:	3b01      	subs	r3, #1
 8004682:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004684:	429a      	cmp	r2, r3
 8004686:	d10f      	bne.n	80046a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004692:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004694:	429a      	cmp	r2, r3
 8004696:	d107      	bne.n	80046a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d001      	beq.n	80046ac <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e000      	b.n	80046ae <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3718      	adds	r7, #24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	40023800 	.word	0x40023800

080046bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80046c6:	2300      	movs	r3, #0
 80046c8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e0d0      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046d4:	4b6a      	ldr	r3, [pc, #424]	@ (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 030f 	and.w	r3, r3, #15
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d910      	bls.n	8004704 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046e2:	4b67      	ldr	r3, [pc, #412]	@ (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f023 020f 	bic.w	r2, r3, #15
 80046ea:	4965      	ldr	r1, [pc, #404]	@ (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f2:	4b63      	ldr	r3, [pc, #396]	@ (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 030f 	and.w	r3, r3, #15
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d001      	beq.n	8004704 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e0b8      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d020      	beq.n	8004752 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b00      	cmp	r3, #0
 800471a:	d005      	beq.n	8004728 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800471c:	4b59      	ldr	r3, [pc, #356]	@ (8004884 <HAL_RCC_ClockConfig+0x1c8>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	4a58      	ldr	r2, [pc, #352]	@ (8004884 <HAL_RCC_ClockConfig+0x1c8>)
 8004722:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004726:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0308 	and.w	r3, r3, #8
 8004730:	2b00      	cmp	r3, #0
 8004732:	d005      	beq.n	8004740 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004734:	4b53      	ldr	r3, [pc, #332]	@ (8004884 <HAL_RCC_ClockConfig+0x1c8>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	4a52      	ldr	r2, [pc, #328]	@ (8004884 <HAL_RCC_ClockConfig+0x1c8>)
 800473a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800473e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004740:	4b50      	ldr	r3, [pc, #320]	@ (8004884 <HAL_RCC_ClockConfig+0x1c8>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	494d      	ldr	r1, [pc, #308]	@ (8004884 <HAL_RCC_ClockConfig+0x1c8>)
 800474e:	4313      	orrs	r3, r2
 8004750:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d040      	beq.n	80047e0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d107      	bne.n	8004776 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004766:	4b47      	ldr	r3, [pc, #284]	@ (8004884 <HAL_RCC_ClockConfig+0x1c8>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d115      	bne.n	800479e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e07f      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	2b02      	cmp	r3, #2
 800477c:	d107      	bne.n	800478e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800477e:	4b41      	ldr	r3, [pc, #260]	@ (8004884 <HAL_RCC_ClockConfig+0x1c8>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d109      	bne.n	800479e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e073      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800478e:	4b3d      	ldr	r3, [pc, #244]	@ (8004884 <HAL_RCC_ClockConfig+0x1c8>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e06b      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800479e:	4b39      	ldr	r3, [pc, #228]	@ (8004884 <HAL_RCC_ClockConfig+0x1c8>)
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f023 0203 	bic.w	r2, r3, #3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	4936      	ldr	r1, [pc, #216]	@ (8004884 <HAL_RCC_ClockConfig+0x1c8>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047b0:	f7fd fcc2 	bl	8002138 <HAL_GetTick>
 80047b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047b6:	e00a      	b.n	80047ce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047b8:	f7fd fcbe 	bl	8002138 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e053      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ce:	4b2d      	ldr	r3, [pc, #180]	@ (8004884 <HAL_RCC_ClockConfig+0x1c8>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 020c 	and.w	r2, r3, #12
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	429a      	cmp	r2, r3
 80047de:	d1eb      	bne.n	80047b8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047e0:	4b27      	ldr	r3, [pc, #156]	@ (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 030f 	and.w	r3, r3, #15
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d210      	bcs.n	8004810 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ee:	4b24      	ldr	r3, [pc, #144]	@ (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f023 020f 	bic.w	r2, r3, #15
 80047f6:	4922      	ldr	r1, [pc, #136]	@ (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047fe:	4b20      	ldr	r3, [pc, #128]	@ (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 030f 	and.w	r3, r3, #15
 8004806:	683a      	ldr	r2, [r7, #0]
 8004808:	429a      	cmp	r2, r3
 800480a:	d001      	beq.n	8004810 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e032      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b00      	cmp	r3, #0
 800481a:	d008      	beq.n	800482e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800481c:	4b19      	ldr	r3, [pc, #100]	@ (8004884 <HAL_RCC_ClockConfig+0x1c8>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	4916      	ldr	r1, [pc, #88]	@ (8004884 <HAL_RCC_ClockConfig+0x1c8>)
 800482a:	4313      	orrs	r3, r2
 800482c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0308 	and.w	r3, r3, #8
 8004836:	2b00      	cmp	r3, #0
 8004838:	d009      	beq.n	800484e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800483a:	4b12      	ldr	r3, [pc, #72]	@ (8004884 <HAL_RCC_ClockConfig+0x1c8>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	490e      	ldr	r1, [pc, #56]	@ (8004884 <HAL_RCC_ClockConfig+0x1c8>)
 800484a:	4313      	orrs	r3, r2
 800484c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800484e:	f000 f821 	bl	8004894 <HAL_RCC_GetSysClockFreq>
 8004852:	4602      	mov	r2, r0
 8004854:	4b0b      	ldr	r3, [pc, #44]	@ (8004884 <HAL_RCC_ClockConfig+0x1c8>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	091b      	lsrs	r3, r3, #4
 800485a:	f003 030f 	and.w	r3, r3, #15
 800485e:	490a      	ldr	r1, [pc, #40]	@ (8004888 <HAL_RCC_ClockConfig+0x1cc>)
 8004860:	5ccb      	ldrb	r3, [r1, r3]
 8004862:	fa22 f303 	lsr.w	r3, r2, r3
 8004866:	4a09      	ldr	r2, [pc, #36]	@ (800488c <HAL_RCC_ClockConfig+0x1d0>)
 8004868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800486a:	4b09      	ldr	r3, [pc, #36]	@ (8004890 <HAL_RCC_ClockConfig+0x1d4>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4618      	mov	r0, r3
 8004870:	f7fd fc1e 	bl	80020b0 <HAL_InitTick>

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	40023c00 	.word	0x40023c00
 8004884:	40023800 	.word	0x40023800
 8004888:	08006b20 	.word	0x08006b20
 800488c:	20000018 	.word	0x20000018
 8004890:	2000001c 	.word	0x2000001c

08004894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004894:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004898:	b090      	sub	sp, #64	@ 0x40
 800489a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800489c:	2300      	movs	r3, #0
 800489e:	637b      	str	r3, [r7, #52]	@ 0x34
 80048a0:	2300      	movs	r3, #0
 80048a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048a4:	2300      	movs	r3, #0
 80048a6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80048a8:	2300      	movs	r3, #0
 80048aa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048ac:	4b59      	ldr	r3, [pc, #356]	@ (8004a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f003 030c 	and.w	r3, r3, #12
 80048b4:	2b08      	cmp	r3, #8
 80048b6:	d00d      	beq.n	80048d4 <HAL_RCC_GetSysClockFreq+0x40>
 80048b8:	2b08      	cmp	r3, #8
 80048ba:	f200 80a1 	bhi.w	8004a00 <HAL_RCC_GetSysClockFreq+0x16c>
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d002      	beq.n	80048c8 <HAL_RCC_GetSysClockFreq+0x34>
 80048c2:	2b04      	cmp	r3, #4
 80048c4:	d003      	beq.n	80048ce <HAL_RCC_GetSysClockFreq+0x3a>
 80048c6:	e09b      	b.n	8004a00 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048c8:	4b53      	ldr	r3, [pc, #332]	@ (8004a18 <HAL_RCC_GetSysClockFreq+0x184>)
 80048ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80048cc:	e09b      	b.n	8004a06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048ce:	4b53      	ldr	r3, [pc, #332]	@ (8004a1c <HAL_RCC_GetSysClockFreq+0x188>)
 80048d0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80048d2:	e098      	b.n	8004a06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048d4:	4b4f      	ldr	r3, [pc, #316]	@ (8004a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048dc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80048de:	4b4d      	ldr	r3, [pc, #308]	@ (8004a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d028      	beq.n	800493c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048ea:	4b4a      	ldr	r3, [pc, #296]	@ (8004a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	099b      	lsrs	r3, r3, #6
 80048f0:	2200      	movs	r2, #0
 80048f2:	623b      	str	r3, [r7, #32]
 80048f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80048f6:	6a3b      	ldr	r3, [r7, #32]
 80048f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80048fc:	2100      	movs	r1, #0
 80048fe:	4b47      	ldr	r3, [pc, #284]	@ (8004a1c <HAL_RCC_GetSysClockFreq+0x188>)
 8004900:	fb03 f201 	mul.w	r2, r3, r1
 8004904:	2300      	movs	r3, #0
 8004906:	fb00 f303 	mul.w	r3, r0, r3
 800490a:	4413      	add	r3, r2
 800490c:	4a43      	ldr	r2, [pc, #268]	@ (8004a1c <HAL_RCC_GetSysClockFreq+0x188>)
 800490e:	fba0 1202 	umull	r1, r2, r0, r2
 8004912:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004914:	460a      	mov	r2, r1
 8004916:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004918:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800491a:	4413      	add	r3, r2
 800491c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800491e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004920:	2200      	movs	r2, #0
 8004922:	61bb      	str	r3, [r7, #24]
 8004924:	61fa      	str	r2, [r7, #28]
 8004926:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800492a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800492e:	f7fb fc83 	bl	8000238 <__aeabi_uldivmod>
 8004932:	4602      	mov	r2, r0
 8004934:	460b      	mov	r3, r1
 8004936:	4613      	mov	r3, r2
 8004938:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800493a:	e053      	b.n	80049e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800493c:	4b35      	ldr	r3, [pc, #212]	@ (8004a14 <HAL_RCC_GetSysClockFreq+0x180>)
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	099b      	lsrs	r3, r3, #6
 8004942:	2200      	movs	r2, #0
 8004944:	613b      	str	r3, [r7, #16]
 8004946:	617a      	str	r2, [r7, #20]
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800494e:	f04f 0b00 	mov.w	fp, #0
 8004952:	4652      	mov	r2, sl
 8004954:	465b      	mov	r3, fp
 8004956:	f04f 0000 	mov.w	r0, #0
 800495a:	f04f 0100 	mov.w	r1, #0
 800495e:	0159      	lsls	r1, r3, #5
 8004960:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004964:	0150      	lsls	r0, r2, #5
 8004966:	4602      	mov	r2, r0
 8004968:	460b      	mov	r3, r1
 800496a:	ebb2 080a 	subs.w	r8, r2, sl
 800496e:	eb63 090b 	sbc.w	r9, r3, fp
 8004972:	f04f 0200 	mov.w	r2, #0
 8004976:	f04f 0300 	mov.w	r3, #0
 800497a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800497e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004982:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004986:	ebb2 0408 	subs.w	r4, r2, r8
 800498a:	eb63 0509 	sbc.w	r5, r3, r9
 800498e:	f04f 0200 	mov.w	r2, #0
 8004992:	f04f 0300 	mov.w	r3, #0
 8004996:	00eb      	lsls	r3, r5, #3
 8004998:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800499c:	00e2      	lsls	r2, r4, #3
 800499e:	4614      	mov	r4, r2
 80049a0:	461d      	mov	r5, r3
 80049a2:	eb14 030a 	adds.w	r3, r4, sl
 80049a6:	603b      	str	r3, [r7, #0]
 80049a8:	eb45 030b 	adc.w	r3, r5, fp
 80049ac:	607b      	str	r3, [r7, #4]
 80049ae:	f04f 0200 	mov.w	r2, #0
 80049b2:	f04f 0300 	mov.w	r3, #0
 80049b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049ba:	4629      	mov	r1, r5
 80049bc:	028b      	lsls	r3, r1, #10
 80049be:	4621      	mov	r1, r4
 80049c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049c4:	4621      	mov	r1, r4
 80049c6:	028a      	lsls	r2, r1, #10
 80049c8:	4610      	mov	r0, r2
 80049ca:	4619      	mov	r1, r3
 80049cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049ce:	2200      	movs	r2, #0
 80049d0:	60bb      	str	r3, [r7, #8]
 80049d2:	60fa      	str	r2, [r7, #12]
 80049d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049d8:	f7fb fc2e 	bl	8000238 <__aeabi_uldivmod>
 80049dc:	4602      	mov	r2, r0
 80049de:	460b      	mov	r3, r1
 80049e0:	4613      	mov	r3, r2
 80049e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80049e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	0c1b      	lsrs	r3, r3, #16
 80049ea:	f003 0303 	and.w	r3, r3, #3
 80049ee:	3301      	adds	r3, #1
 80049f0:	005b      	lsls	r3, r3, #1
 80049f2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80049f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80049f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80049fe:	e002      	b.n	8004a06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a00:	4b05      	ldr	r3, [pc, #20]	@ (8004a18 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a02:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004a04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3740      	adds	r7, #64	@ 0x40
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a12:	bf00      	nop
 8004a14:	40023800 	.word	0x40023800
 8004a18:	00f42400 	.word	0x00f42400
 8004a1c:	01312d00 	.word	0x01312d00

08004a20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b088      	sub	sp, #32
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004a30:	2300      	movs	r3, #0
 8004a32:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004a34:	2300      	movs	r3, #0
 8004a36:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0301 	and.w	r3, r3, #1
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d012      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a48:	4b69      	ldr	r3, [pc, #420]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	4a68      	ldr	r2, [pc, #416]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a4e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004a52:	6093      	str	r3, [r2, #8]
 8004a54:	4b66      	ldr	r3, [pc, #408]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a56:	689a      	ldr	r2, [r3, #8]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a5c:	4964      	ldr	r1, [pc, #400]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d017      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a7a:	4b5d      	ldr	r3, [pc, #372]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a80:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a88:	4959      	ldr	r1, [pc, #356]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a98:	d101      	bne.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d017      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ab6:	4b4e      	ldr	r3, [pc, #312]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004abc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac4:	494a      	ldr	r1, [pc, #296]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ad4:	d101      	bne.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d001      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004af2:	2301      	movs	r3, #1
 8004af4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0320 	and.w	r3, r3, #32
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f000 808b 	beq.w	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b04:	4b3a      	ldr	r3, [pc, #232]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b08:	4a39      	ldr	r2, [pc, #228]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b10:	4b37      	ldr	r3, [pc, #220]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b18:	60bb      	str	r3, [r7, #8]
 8004b1a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004b1c:	4b35      	ldr	r3, [pc, #212]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a34      	ldr	r2, [pc, #208]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b28:	f7fd fb06 	bl	8002138 <HAL_GetTick>
 8004b2c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004b2e:	e008      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b30:	f7fd fb02 	bl	8002138 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b64      	cmp	r3, #100	@ 0x64
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e38f      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004b42:	4b2c      	ldr	r3, [pc, #176]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d0f0      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b4e:	4b28      	ldr	r3, [pc, #160]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b56:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d035      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d02e      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b6c:	4b20      	ldr	r3, [pc, #128]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b74:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b76:	4b1e      	ldr	r3, [pc, #120]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b7a:	4a1d      	ldr	r2, [pc, #116]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b80:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b82:	4b1b      	ldr	r3, [pc, #108]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b86:	4a1a      	ldr	r2, [pc, #104]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b8c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004b8e:	4a18      	ldr	r2, [pc, #96]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b94:	4b16      	ldr	r3, [pc, #88]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d114      	bne.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba0:	f7fd faca 	bl	8002138 <HAL_GetTick>
 8004ba4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ba6:	e00a      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ba8:	f7fd fac6 	bl	8002138 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e351      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d0ee      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bd6:	d111      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004bd8:	4b05      	ldr	r3, [pc, #20]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004be4:	4b04      	ldr	r3, [pc, #16]	@ (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004be6:	400b      	ands	r3, r1
 8004be8:	4901      	ldr	r1, [pc, #4]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	608b      	str	r3, [r1, #8]
 8004bee:	e00b      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004bf0:	40023800 	.word	0x40023800
 8004bf4:	40007000 	.word	0x40007000
 8004bf8:	0ffffcff 	.word	0x0ffffcff
 8004bfc:	4bac      	ldr	r3, [pc, #688]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	4aab      	ldr	r2, [pc, #684]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c02:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004c06:	6093      	str	r3, [r2, #8]
 8004c08:	4ba9      	ldr	r3, [pc, #676]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c0a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c14:	49a6      	ldr	r1, [pc, #664]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0310 	and.w	r3, r3, #16
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d010      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c26:	4ba2      	ldr	r3, [pc, #648]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c2c:	4aa0      	ldr	r2, [pc, #640]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c32:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004c36:	4b9e      	ldr	r3, [pc, #632]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c38:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c40:	499b      	ldr	r1, [pc, #620]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00a      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c54:	4b96      	ldr	r3, [pc, #600]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c5a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c62:	4993      	ldr	r1, [pc, #588]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00a      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c76:	4b8e      	ldr	r3, [pc, #568]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c7c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c84:	498a      	ldr	r1, [pc, #552]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00a      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c98:	4b85      	ldr	r3, [pc, #532]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c9e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ca6:	4982      	ldr	r1, [pc, #520]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00a      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004cba:	4b7d      	ldr	r3, [pc, #500]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cc0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cc8:	4979      	ldr	r1, [pc, #484]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00a      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cdc:	4b74      	ldr	r3, [pc, #464]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ce2:	f023 0203 	bic.w	r2, r3, #3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cea:	4971      	ldr	r1, [pc, #452]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00a      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cfe:	4b6c      	ldr	r3, [pc, #432]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d04:	f023 020c 	bic.w	r2, r3, #12
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d0c:	4968      	ldr	r1, [pc, #416]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00a      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d20:	4b63      	ldr	r3, [pc, #396]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d26:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d2e:	4960      	ldr	r1, [pc, #384]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00a      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d42:	4b5b      	ldr	r3, [pc, #364]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d48:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d50:	4957      	ldr	r1, [pc, #348]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00a      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d64:	4b52      	ldr	r3, [pc, #328]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d6a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d72:	494f      	ldr	r1, [pc, #316]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00a      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004d86:	4b4a      	ldr	r3, [pc, #296]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d8c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d94:	4946      	ldr	r1, [pc, #280]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00a      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004da8:	4b41      	ldr	r3, [pc, #260]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dae:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004db6:	493e      	ldr	r1, [pc, #248]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00a      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004dca:	4b39      	ldr	r3, [pc, #228]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dd0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dd8:	4935      	ldr	r1, [pc, #212]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00a      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004dec:	4b30      	ldr	r3, [pc, #192]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004df2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004dfa:	492d      	ldr	r1, [pc, #180]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d011      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004e0e:	4b28      	ldr	r3, [pc, #160]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e14:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e1c:	4924      	ldr	r1, [pc, #144]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e2c:	d101      	bne.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0308 	and.w	r3, r3, #8
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00a      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e4e:	4b18      	ldr	r3, [pc, #96]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e54:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e5c:	4914      	ldr	r1, [pc, #80]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00b      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e70:	4b0f      	ldr	r3, [pc, #60]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e76:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e80:	490b      	ldr	r1, [pc, #44]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00f      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004e94:	4b06      	ldr	r3, [pc, #24]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e9a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ea4:	4902      	ldr	r1, [pc, #8]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004eac:	e002      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004eae:	bf00      	nop
 8004eb0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00b      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ec0:	4b8a      	ldr	r3, [pc, #552]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ec2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ec6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ed0:	4986      	ldr	r1, [pc, #536]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00b      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004ee4:	4b81      	ldr	r3, [pc, #516]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ee6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004eea:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ef4:	497d      	ldr	r1, [pc, #500]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d006      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f000 80d6 	beq.w	80050bc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f10:	4b76      	ldr	r3, [pc, #472]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a75      	ldr	r2, [pc, #468]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f1c:	f7fd f90c 	bl	8002138 <HAL_GetTick>
 8004f20:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f22:	e008      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f24:	f7fd f908 	bl	8002138 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	2b64      	cmp	r3, #100	@ 0x64
 8004f30:	d901      	bls.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e195      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f36:	4b6d      	ldr	r3, [pc, #436]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1f0      	bne.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d021      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d11d      	bne.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f56:	4b65      	ldr	r3, [pc, #404]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f5c:	0c1b      	lsrs	r3, r3, #16
 8004f5e:	f003 0303 	and.w	r3, r3, #3
 8004f62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f64:	4b61      	ldr	r3, [pc, #388]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f6a:	0e1b      	lsrs	r3, r3, #24
 8004f6c:	f003 030f 	and.w	r3, r3, #15
 8004f70:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	019a      	lsls	r2, r3, #6
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	041b      	lsls	r3, r3, #16
 8004f7c:	431a      	orrs	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	061b      	lsls	r3, r3, #24
 8004f82:	431a      	orrs	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	071b      	lsls	r3, r3, #28
 8004f8a:	4958      	ldr	r1, [pc, #352]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d004      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fa2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fa6:	d00a      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d02e      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fbc:	d129      	bne.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004fbe:	4b4b      	ldr	r3, [pc, #300]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fc4:	0c1b      	lsrs	r3, r3, #16
 8004fc6:	f003 0303 	and.w	r3, r3, #3
 8004fca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004fcc:	4b47      	ldr	r3, [pc, #284]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fd2:	0f1b      	lsrs	r3, r3, #28
 8004fd4:	f003 0307 	and.w	r3, r3, #7
 8004fd8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	019a      	lsls	r2, r3, #6
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	041b      	lsls	r3, r3, #16
 8004fe4:	431a      	orrs	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	061b      	lsls	r3, r3, #24
 8004fec:	431a      	orrs	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	071b      	lsls	r3, r3, #28
 8004ff2:	493e      	ldr	r1, [pc, #248]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004ffa:	4b3c      	ldr	r3, [pc, #240]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005000:	f023 021f 	bic.w	r2, r3, #31
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005008:	3b01      	subs	r3, #1
 800500a:	4938      	ldr	r1, [pc, #224]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800500c:	4313      	orrs	r3, r2
 800500e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d01d      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800501e:	4b33      	ldr	r3, [pc, #204]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005020:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005024:	0e1b      	lsrs	r3, r3, #24
 8005026:	f003 030f 	and.w	r3, r3, #15
 800502a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800502c:	4b2f      	ldr	r3, [pc, #188]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800502e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005032:	0f1b      	lsrs	r3, r3, #28
 8005034:	f003 0307 	and.w	r3, r3, #7
 8005038:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	019a      	lsls	r2, r3, #6
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	041b      	lsls	r3, r3, #16
 8005046:	431a      	orrs	r2, r3
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	061b      	lsls	r3, r3, #24
 800504c:	431a      	orrs	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	071b      	lsls	r3, r3, #28
 8005052:	4926      	ldr	r1, [pc, #152]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005054:	4313      	orrs	r3, r2
 8005056:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d011      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	019a      	lsls	r2, r3, #6
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	041b      	lsls	r3, r3, #16
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	061b      	lsls	r3, r3, #24
 800507a:	431a      	orrs	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	071b      	lsls	r3, r3, #28
 8005082:	491a      	ldr	r1, [pc, #104]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005084:	4313      	orrs	r3, r2
 8005086:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800508a:	4b18      	ldr	r3, [pc, #96]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a17      	ldr	r2, [pc, #92]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005090:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005094:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005096:	f7fd f84f 	bl	8002138 <HAL_GetTick>
 800509a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800509c:	e008      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800509e:	f7fd f84b 	bl	8002138 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	2b64      	cmp	r3, #100	@ 0x64
 80050aa:	d901      	bls.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e0d8      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050b0:	4b0e      	ldr	r3, [pc, #56]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d0f0      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	f040 80ce 	bne.w	8005260 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80050c4:	4b09      	ldr	r3, [pc, #36]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a08      	ldr	r2, [pc, #32]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050d0:	f7fd f832 	bl	8002138 <HAL_GetTick>
 80050d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80050d6:	e00b      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80050d8:	f7fd f82e 	bl	8002138 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b64      	cmp	r3, #100	@ 0x64
 80050e4:	d904      	bls.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e0bb      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80050ea:	bf00      	nop
 80050ec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80050f0:	4b5e      	ldr	r3, [pc, #376]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80050fc:	d0ec      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d003      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800510e:	2b00      	cmp	r3, #0
 8005110:	d009      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800511a:	2b00      	cmp	r3, #0
 800511c:	d02e      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005122:	2b00      	cmp	r3, #0
 8005124:	d12a      	bne.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005126:	4b51      	ldr	r3, [pc, #324]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800512c:	0c1b      	lsrs	r3, r3, #16
 800512e:	f003 0303 	and.w	r3, r3, #3
 8005132:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005134:	4b4d      	ldr	r3, [pc, #308]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800513a:	0f1b      	lsrs	r3, r3, #28
 800513c:	f003 0307 	and.w	r3, r3, #7
 8005140:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	019a      	lsls	r2, r3, #6
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	041b      	lsls	r3, r3, #16
 800514c:	431a      	orrs	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	061b      	lsls	r3, r3, #24
 8005154:	431a      	orrs	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	071b      	lsls	r3, r3, #28
 800515a:	4944      	ldr	r1, [pc, #272]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800515c:	4313      	orrs	r3, r2
 800515e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005162:	4b42      	ldr	r3, [pc, #264]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005164:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005168:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005170:	3b01      	subs	r3, #1
 8005172:	021b      	lsls	r3, r3, #8
 8005174:	493d      	ldr	r1, [pc, #244]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005176:	4313      	orrs	r3, r2
 8005178:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d022      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800518c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005190:	d11d      	bne.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005192:	4b36      	ldr	r3, [pc, #216]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005194:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005198:	0e1b      	lsrs	r3, r3, #24
 800519a:	f003 030f 	and.w	r3, r3, #15
 800519e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80051a0:	4b32      	ldr	r3, [pc, #200]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051a6:	0f1b      	lsrs	r3, r3, #28
 80051a8:	f003 0307 	and.w	r3, r3, #7
 80051ac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	019a      	lsls	r2, r3, #6
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	041b      	lsls	r3, r3, #16
 80051ba:	431a      	orrs	r2, r3
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	061b      	lsls	r3, r3, #24
 80051c0:	431a      	orrs	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	071b      	lsls	r3, r3, #28
 80051c6:	4929      	ldr	r1, [pc, #164]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0308 	and.w	r3, r3, #8
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d028      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80051da:	4b24      	ldr	r3, [pc, #144]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051e0:	0e1b      	lsrs	r3, r3, #24
 80051e2:	f003 030f 	and.w	r3, r3, #15
 80051e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80051e8:	4b20      	ldr	r3, [pc, #128]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ee:	0c1b      	lsrs	r3, r3, #16
 80051f0:	f003 0303 	and.w	r3, r3, #3
 80051f4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	019a      	lsls	r2, r3, #6
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	041b      	lsls	r3, r3, #16
 8005200:	431a      	orrs	r2, r3
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	061b      	lsls	r3, r3, #24
 8005206:	431a      	orrs	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	69db      	ldr	r3, [r3, #28]
 800520c:	071b      	lsls	r3, r3, #28
 800520e:	4917      	ldr	r1, [pc, #92]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005210:	4313      	orrs	r3, r2
 8005212:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005216:	4b15      	ldr	r3, [pc, #84]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005218:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800521c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005224:	4911      	ldr	r1, [pc, #68]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005226:	4313      	orrs	r3, r2
 8005228:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800522c:	4b0f      	ldr	r3, [pc, #60]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a0e      	ldr	r2, [pc, #56]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005232:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005236:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005238:	f7fc ff7e 	bl	8002138 <HAL_GetTick>
 800523c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800523e:	e008      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005240:	f7fc ff7a 	bl	8002138 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	2b64      	cmp	r3, #100	@ 0x64
 800524c:	d901      	bls.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e007      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005252:	4b06      	ldr	r3, [pc, #24]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800525a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800525e:	d1ef      	bne.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3720      	adds	r7, #32
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	40023800 	.word	0x40023800

08005270 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e049      	b.n	8005316 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d106      	bne.n	800529c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f7fc fd2e 	bl	8001cf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2202      	movs	r2, #2
 80052a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	3304      	adds	r3, #4
 80052ac:	4619      	mov	r1, r3
 80052ae:	4610      	mov	r0, r2
 80052b0:	f000 fe0c 	bl	8005ecc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
	...

08005320 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b01      	cmp	r3, #1
 8005332:	d001      	beq.n	8005338 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e054      	b.n	80053e2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2202      	movs	r2, #2
 800533c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68da      	ldr	r2, [r3, #12]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 0201 	orr.w	r2, r2, #1
 800534e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a26      	ldr	r2, [pc, #152]	@ (80053f0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d022      	beq.n	80053a0 <HAL_TIM_Base_Start_IT+0x80>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005362:	d01d      	beq.n	80053a0 <HAL_TIM_Base_Start_IT+0x80>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a22      	ldr	r2, [pc, #136]	@ (80053f4 <HAL_TIM_Base_Start_IT+0xd4>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d018      	beq.n	80053a0 <HAL_TIM_Base_Start_IT+0x80>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a21      	ldr	r2, [pc, #132]	@ (80053f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d013      	beq.n	80053a0 <HAL_TIM_Base_Start_IT+0x80>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a1f      	ldr	r2, [pc, #124]	@ (80053fc <HAL_TIM_Base_Start_IT+0xdc>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d00e      	beq.n	80053a0 <HAL_TIM_Base_Start_IT+0x80>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a1e      	ldr	r2, [pc, #120]	@ (8005400 <HAL_TIM_Base_Start_IT+0xe0>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d009      	beq.n	80053a0 <HAL_TIM_Base_Start_IT+0x80>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a1c      	ldr	r2, [pc, #112]	@ (8005404 <HAL_TIM_Base_Start_IT+0xe4>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d004      	beq.n	80053a0 <HAL_TIM_Base_Start_IT+0x80>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a1b      	ldr	r2, [pc, #108]	@ (8005408 <HAL_TIM_Base_Start_IT+0xe8>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d115      	bne.n	80053cc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689a      	ldr	r2, [r3, #8]
 80053a6:	4b19      	ldr	r3, [pc, #100]	@ (800540c <HAL_TIM_Base_Start_IT+0xec>)
 80053a8:	4013      	ands	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2b06      	cmp	r3, #6
 80053b0:	d015      	beq.n	80053de <HAL_TIM_Base_Start_IT+0xbe>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053b8:	d011      	beq.n	80053de <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f042 0201 	orr.w	r2, r2, #1
 80053c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ca:	e008      	b.n	80053de <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f042 0201 	orr.w	r2, r2, #1
 80053da:	601a      	str	r2, [r3, #0]
 80053dc:	e000      	b.n	80053e0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	40010000 	.word	0x40010000
 80053f4:	40000400 	.word	0x40000400
 80053f8:	40000800 	.word	0x40000800
 80053fc:	40000c00 	.word	0x40000c00
 8005400:	40010400 	.word	0x40010400
 8005404:	40014000 	.word	0x40014000
 8005408:	40001800 	.word	0x40001800
 800540c:	00010007 	.word	0x00010007

08005410 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e049      	b.n	80054b6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d106      	bne.n	800543c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f841 	bl	80054be <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2202      	movs	r2, #2
 8005440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	3304      	adds	r3, #4
 800544c:	4619      	mov	r1, r3
 800544e:	4610      	mov	r0, r2
 8005450:	f000 fd3c 	bl	8005ecc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80054be:	b480      	push	{r7}
 80054c0:	b083      	sub	sp, #12
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80054c6:	bf00      	nop
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b082      	sub	sp, #8
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d101      	bne.n	80054e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e049      	b.n	8005578 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d106      	bne.n	80054fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 f841 	bl	8005580 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2202      	movs	r2, #2
 8005502:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	3304      	adds	r3, #4
 800550e:	4619      	mov	r1, r3
 8005510:	4610      	mov	r0, r2
 8005512:	f000 fcdb 	bl	8005ecc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2201      	movs	r2, #1
 800552a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2201      	movs	r2, #1
 8005532:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2201      	movs	r2, #1
 8005542:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2201      	movs	r2, #1
 800554a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3708      	adds	r7, #8
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e049      	b.n	800563a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d106      	bne.n	80055c0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7fc fc0a 	bl	8001dd4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2202      	movs	r2, #2
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	3304      	adds	r3, #4
 80055d0:	4619      	mov	r1, r3
 80055d2:	4610      	mov	r0, r2
 80055d4:	f000 fc7a 	bl	8005ecc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3708      	adds	r7, #8
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005642:	b580      	push	{r7, lr}
 8005644:	b082      	sub	sp, #8
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	f003 0302 	and.w	r3, r3, #2
 8005654:	2b02      	cmp	r3, #2
 8005656:	d122      	bne.n	800569e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	f003 0302 	and.w	r3, r3, #2
 8005662:	2b02      	cmp	r3, #2
 8005664:	d11b      	bne.n	800569e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f06f 0202 	mvn.w	r2, #2
 800566e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	f003 0303 	and.w	r3, r3, #3
 8005680:	2b00      	cmp	r3, #0
 8005682:	d003      	beq.n	800568c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 fc03 	bl	8005e90 <HAL_TIM_IC_CaptureCallback>
 800568a:	e005      	b.n	8005698 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 fbf5 	bl	8005e7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 fc06 	bl	8005ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	f003 0304 	and.w	r3, r3, #4
 80056a8:	2b04      	cmp	r3, #4
 80056aa:	d122      	bne.n	80056f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	f003 0304 	and.w	r3, r3, #4
 80056b6:	2b04      	cmp	r3, #4
 80056b8:	d11b      	bne.n	80056f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f06f 0204 	mvn.w	r2, #4
 80056c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2202      	movs	r2, #2
 80056c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	699b      	ldr	r3, [r3, #24]
 80056d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d003      	beq.n	80056e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 fbd9 	bl	8005e90 <HAL_TIM_IC_CaptureCallback>
 80056de:	e005      	b.n	80056ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 fbcb 	bl	8005e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 fbdc 	bl	8005ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	f003 0308 	and.w	r3, r3, #8
 80056fc:	2b08      	cmp	r3, #8
 80056fe:	d122      	bne.n	8005746 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	f003 0308 	and.w	r3, r3, #8
 800570a:	2b08      	cmp	r3, #8
 800570c:	d11b      	bne.n	8005746 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f06f 0208 	mvn.w	r2, #8
 8005716:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2204      	movs	r2, #4
 800571c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	69db      	ldr	r3, [r3, #28]
 8005724:	f003 0303 	and.w	r3, r3, #3
 8005728:	2b00      	cmp	r3, #0
 800572a:	d003      	beq.n	8005734 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 fbaf 	bl	8005e90 <HAL_TIM_IC_CaptureCallback>
 8005732:	e005      	b.n	8005740 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 fba1 	bl	8005e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 fbb2 	bl	8005ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	f003 0310 	and.w	r3, r3, #16
 8005750:	2b10      	cmp	r3, #16
 8005752:	d122      	bne.n	800579a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	f003 0310 	and.w	r3, r3, #16
 800575e:	2b10      	cmp	r3, #16
 8005760:	d11b      	bne.n	800579a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f06f 0210 	mvn.w	r2, #16
 800576a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2208      	movs	r2, #8
 8005770:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	69db      	ldr	r3, [r3, #28]
 8005778:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800577c:	2b00      	cmp	r3, #0
 800577e:	d003      	beq.n	8005788 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 fb85 	bl	8005e90 <HAL_TIM_IC_CaptureCallback>
 8005786:	e005      	b.n	8005794 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 fb77 	bl	8005e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 fb88 	bl	8005ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	f003 0301 	and.w	r3, r3, #1
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d10e      	bne.n	80057c6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	f003 0301 	and.w	r3, r3, #1
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d107      	bne.n	80057c6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f06f 0201 	mvn.w	r2, #1
 80057be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 fb51 	bl	8005e68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057d0:	2b80      	cmp	r3, #128	@ 0x80
 80057d2:	d10e      	bne.n	80057f2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057de:	2b80      	cmp	r3, #128	@ 0x80
 80057e0:	d107      	bne.n	80057f2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80057ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f001 f945 	bl	8006a7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005800:	d10e      	bne.n	8005820 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800580c:	2b80      	cmp	r3, #128	@ 0x80
 800580e:	d107      	bne.n	8005820 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f001 f938 	bl	8006a90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800582a:	2b40      	cmp	r3, #64	@ 0x40
 800582c:	d10e      	bne.n	800584c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005838:	2b40      	cmp	r3, #64	@ 0x40
 800583a:	d107      	bne.n	800584c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 fb36 	bl	8005eb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	f003 0320 	and.w	r3, r3, #32
 8005856:	2b20      	cmp	r3, #32
 8005858:	d10e      	bne.n	8005878 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	f003 0320 	and.w	r3, r3, #32
 8005864:	2b20      	cmp	r3, #32
 8005866:	d107      	bne.n	8005878 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f06f 0220 	mvn.w	r2, #32
 8005870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f001 f8f8 	bl	8006a68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005878:	bf00      	nop
 800587a:	3708      	adds	r7, #8
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800588c:	2300      	movs	r3, #0
 800588e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005896:	2b01      	cmp	r3, #1
 8005898:	d101      	bne.n	800589e <HAL_TIM_OC_ConfigChannel+0x1e>
 800589a:	2302      	movs	r3, #2
 800589c:	e066      	b.n	800596c <HAL_TIM_OC_ConfigChannel+0xec>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2b14      	cmp	r3, #20
 80058aa:	d857      	bhi.n	800595c <HAL_TIM_OC_ConfigChannel+0xdc>
 80058ac:	a201      	add	r2, pc, #4	@ (adr r2, 80058b4 <HAL_TIM_OC_ConfigChannel+0x34>)
 80058ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b2:	bf00      	nop
 80058b4:	08005909 	.word	0x08005909
 80058b8:	0800595d 	.word	0x0800595d
 80058bc:	0800595d 	.word	0x0800595d
 80058c0:	0800595d 	.word	0x0800595d
 80058c4:	08005917 	.word	0x08005917
 80058c8:	0800595d 	.word	0x0800595d
 80058cc:	0800595d 	.word	0x0800595d
 80058d0:	0800595d 	.word	0x0800595d
 80058d4:	08005925 	.word	0x08005925
 80058d8:	0800595d 	.word	0x0800595d
 80058dc:	0800595d 	.word	0x0800595d
 80058e0:	0800595d 	.word	0x0800595d
 80058e4:	08005933 	.word	0x08005933
 80058e8:	0800595d 	.word	0x0800595d
 80058ec:	0800595d 	.word	0x0800595d
 80058f0:	0800595d 	.word	0x0800595d
 80058f4:	08005941 	.word	0x08005941
 80058f8:	0800595d 	.word	0x0800595d
 80058fc:	0800595d 	.word	0x0800595d
 8005900:	0800595d 	.word	0x0800595d
 8005904:	0800594f 	.word	0x0800594f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68b9      	ldr	r1, [r7, #8]
 800590e:	4618      	mov	r0, r3
 8005910:	f000 fb7c 	bl	800600c <TIM_OC1_SetConfig>
      break;
 8005914:	e025      	b.n	8005962 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68b9      	ldr	r1, [r7, #8]
 800591c:	4618      	mov	r0, r3
 800591e:	f000 fbe7 	bl	80060f0 <TIM_OC2_SetConfig>
      break;
 8005922:	e01e      	b.n	8005962 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68b9      	ldr	r1, [r7, #8]
 800592a:	4618      	mov	r0, r3
 800592c:	f000 fc58 	bl	80061e0 <TIM_OC3_SetConfig>
      break;
 8005930:	e017      	b.n	8005962 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68b9      	ldr	r1, [r7, #8]
 8005938:	4618      	mov	r0, r3
 800593a:	f000 fcc7 	bl	80062cc <TIM_OC4_SetConfig>
      break;
 800593e:	e010      	b.n	8005962 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68b9      	ldr	r1, [r7, #8]
 8005946:	4618      	mov	r0, r3
 8005948:	f000 fd18 	bl	800637c <TIM_OC5_SetConfig>
      break;
 800594c:	e009      	b.n	8005962 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68b9      	ldr	r1, [r7, #8]
 8005954:	4618      	mov	r0, r3
 8005956:	f000 fd63 	bl	8006420 <TIM_OC6_SetConfig>
      break;
 800595a:	e002      	b.n	8005962 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	75fb      	strb	r3, [r7, #23]
      break;
 8005960:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800596a:	7dfb      	ldrb	r3, [r7, #23]
}
 800596c:	4618      	mov	r0, r3
 800596e:	3718      	adds	r7, #24
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005980:	2300      	movs	r3, #0
 8005982:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800598a:	2b01      	cmp	r3, #1
 800598c:	d101      	bne.n	8005992 <HAL_TIM_IC_ConfigChannel+0x1e>
 800598e:	2302      	movs	r3, #2
 8005990:	e088      	b.n	8005aa4 <HAL_TIM_IC_ConfigChannel+0x130>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d11b      	bne.n	80059d8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80059b0:	f000 fd8a 	bl	80064c8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	699a      	ldr	r2, [r3, #24]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f022 020c 	bic.w	r2, r2, #12
 80059c2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6999      	ldr	r1, [r3, #24]
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	689a      	ldr	r2, [r3, #8]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	619a      	str	r2, [r3, #24]
 80059d6:	e060      	b.n	8005a9a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b04      	cmp	r3, #4
 80059dc:	d11c      	bne.n	8005a18 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80059ee:	f000 fe0e 	bl	800660e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	699a      	ldr	r2, [r3, #24]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005a00:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	6999      	ldr	r1, [r3, #24]
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	021a      	lsls	r2, r3, #8
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	430a      	orrs	r2, r1
 8005a14:	619a      	str	r2, [r3, #24]
 8005a16:	e040      	b.n	8005a9a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b08      	cmp	r3, #8
 8005a1c:	d11b      	bne.n	8005a56 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005a2e:	f000 fe5b 	bl	80066e8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	69da      	ldr	r2, [r3, #28]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f022 020c 	bic.w	r2, r2, #12
 8005a40:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	69d9      	ldr	r1, [r3, #28]
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	689a      	ldr	r2, [r3, #8]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	430a      	orrs	r2, r1
 8005a52:	61da      	str	r2, [r3, #28]
 8005a54:	e021      	b.n	8005a9a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2b0c      	cmp	r3, #12
 8005a5a:	d11c      	bne.n	8005a96 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005a6c:	f000 fe78 	bl	8006760 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	69da      	ldr	r2, [r3, #28]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005a7e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	69d9      	ldr	r1, [r3, #28]
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	021a      	lsls	r2, r3, #8
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	430a      	orrs	r2, r1
 8005a92:	61da      	str	r2, [r3, #28]
 8005a94:	e001      	b.n	8005a9a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3718      	adds	r7, #24
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b086      	sub	sp, #24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d101      	bne.n	8005aca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ac6:	2302      	movs	r3, #2
 8005ac8:	e0ff      	b.n	8005cca <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2b14      	cmp	r3, #20
 8005ad6:	f200 80f0 	bhi.w	8005cba <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005ada:	a201      	add	r2, pc, #4	@ (adr r2, 8005ae0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae0:	08005b35 	.word	0x08005b35
 8005ae4:	08005cbb 	.word	0x08005cbb
 8005ae8:	08005cbb 	.word	0x08005cbb
 8005aec:	08005cbb 	.word	0x08005cbb
 8005af0:	08005b75 	.word	0x08005b75
 8005af4:	08005cbb 	.word	0x08005cbb
 8005af8:	08005cbb 	.word	0x08005cbb
 8005afc:	08005cbb 	.word	0x08005cbb
 8005b00:	08005bb7 	.word	0x08005bb7
 8005b04:	08005cbb 	.word	0x08005cbb
 8005b08:	08005cbb 	.word	0x08005cbb
 8005b0c:	08005cbb 	.word	0x08005cbb
 8005b10:	08005bf7 	.word	0x08005bf7
 8005b14:	08005cbb 	.word	0x08005cbb
 8005b18:	08005cbb 	.word	0x08005cbb
 8005b1c:	08005cbb 	.word	0x08005cbb
 8005b20:	08005c39 	.word	0x08005c39
 8005b24:	08005cbb 	.word	0x08005cbb
 8005b28:	08005cbb 	.word	0x08005cbb
 8005b2c:	08005cbb 	.word	0x08005cbb
 8005b30:	08005c79 	.word	0x08005c79
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68b9      	ldr	r1, [r7, #8]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 fa66 	bl	800600c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	699a      	ldr	r2, [r3, #24]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f042 0208 	orr.w	r2, r2, #8
 8005b4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	699a      	ldr	r2, [r3, #24]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f022 0204 	bic.w	r2, r2, #4
 8005b5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6999      	ldr	r1, [r3, #24]
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	691a      	ldr	r2, [r3, #16]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	619a      	str	r2, [r3, #24]
      break;
 8005b72:	e0a5      	b.n	8005cc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68b9      	ldr	r1, [r7, #8]
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f000 fab8 	bl	80060f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	699a      	ldr	r2, [r3, #24]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	699a      	ldr	r2, [r3, #24]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	6999      	ldr	r1, [r3, #24]
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	021a      	lsls	r2, r3, #8
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	430a      	orrs	r2, r1
 8005bb2:	619a      	str	r2, [r3, #24]
      break;
 8005bb4:	e084      	b.n	8005cc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68b9      	ldr	r1, [r7, #8]
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f000 fb0f 	bl	80061e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	69da      	ldr	r2, [r3, #28]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f042 0208 	orr.w	r2, r2, #8
 8005bd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	69da      	ldr	r2, [r3, #28]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f022 0204 	bic.w	r2, r2, #4
 8005be0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	69d9      	ldr	r1, [r3, #28]
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	691a      	ldr	r2, [r3, #16]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	61da      	str	r2, [r3, #28]
      break;
 8005bf4:	e064      	b.n	8005cc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68b9      	ldr	r1, [r7, #8]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f000 fb65 	bl	80062cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	69da      	ldr	r2, [r3, #28]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	69da      	ldr	r2, [r3, #28]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	69d9      	ldr	r1, [r3, #28]
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	021a      	lsls	r2, r3, #8
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	430a      	orrs	r2, r1
 8005c34:	61da      	str	r2, [r3, #28]
      break;
 8005c36:	e043      	b.n	8005cc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68b9      	ldr	r1, [r7, #8]
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f000 fb9c 	bl	800637c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f042 0208 	orr.w	r2, r2, #8
 8005c52:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f022 0204 	bic.w	r2, r2, #4
 8005c62:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	691a      	ldr	r2, [r3, #16]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	430a      	orrs	r2, r1
 8005c74:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005c76:	e023      	b.n	8005cc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68b9      	ldr	r1, [r7, #8]
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f000 fbce 	bl	8006420 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c92:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ca2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	021a      	lsls	r2, r3, #8
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005cb8:	e002      	b.n	8005cc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	75fb      	strb	r3, [r7, #23]
      break;
 8005cbe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005cc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3718      	adds	r7, #24
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop

08005cd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d101      	bne.n	8005cf0 <HAL_TIM_ConfigClockSource+0x1c>
 8005cec:	2302      	movs	r3, #2
 8005cee:	e0b4      	b.n	8005e5a <HAL_TIM_ConfigClockSource+0x186>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d08:	68ba      	ldr	r2, [r7, #8]
 8005d0a:	4b56      	ldr	r3, [pc, #344]	@ (8005e64 <HAL_TIM_ConfigClockSource+0x190>)
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d28:	d03e      	beq.n	8005da8 <HAL_TIM_ConfigClockSource+0xd4>
 8005d2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d2e:	f200 8087 	bhi.w	8005e40 <HAL_TIM_ConfigClockSource+0x16c>
 8005d32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d36:	f000 8086 	beq.w	8005e46 <HAL_TIM_ConfigClockSource+0x172>
 8005d3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d3e:	d87f      	bhi.n	8005e40 <HAL_TIM_ConfigClockSource+0x16c>
 8005d40:	2b70      	cmp	r3, #112	@ 0x70
 8005d42:	d01a      	beq.n	8005d7a <HAL_TIM_ConfigClockSource+0xa6>
 8005d44:	2b70      	cmp	r3, #112	@ 0x70
 8005d46:	d87b      	bhi.n	8005e40 <HAL_TIM_ConfigClockSource+0x16c>
 8005d48:	2b60      	cmp	r3, #96	@ 0x60
 8005d4a:	d050      	beq.n	8005dee <HAL_TIM_ConfigClockSource+0x11a>
 8005d4c:	2b60      	cmp	r3, #96	@ 0x60
 8005d4e:	d877      	bhi.n	8005e40 <HAL_TIM_ConfigClockSource+0x16c>
 8005d50:	2b50      	cmp	r3, #80	@ 0x50
 8005d52:	d03c      	beq.n	8005dce <HAL_TIM_ConfigClockSource+0xfa>
 8005d54:	2b50      	cmp	r3, #80	@ 0x50
 8005d56:	d873      	bhi.n	8005e40 <HAL_TIM_ConfigClockSource+0x16c>
 8005d58:	2b40      	cmp	r3, #64	@ 0x40
 8005d5a:	d058      	beq.n	8005e0e <HAL_TIM_ConfigClockSource+0x13a>
 8005d5c:	2b40      	cmp	r3, #64	@ 0x40
 8005d5e:	d86f      	bhi.n	8005e40 <HAL_TIM_ConfigClockSource+0x16c>
 8005d60:	2b30      	cmp	r3, #48	@ 0x30
 8005d62:	d064      	beq.n	8005e2e <HAL_TIM_ConfigClockSource+0x15a>
 8005d64:	2b30      	cmp	r3, #48	@ 0x30
 8005d66:	d86b      	bhi.n	8005e40 <HAL_TIM_ConfigClockSource+0x16c>
 8005d68:	2b20      	cmp	r3, #32
 8005d6a:	d060      	beq.n	8005e2e <HAL_TIM_ConfigClockSource+0x15a>
 8005d6c:	2b20      	cmp	r3, #32
 8005d6e:	d867      	bhi.n	8005e40 <HAL_TIM_ConfigClockSource+0x16c>
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d05c      	beq.n	8005e2e <HAL_TIM_ConfigClockSource+0x15a>
 8005d74:	2b10      	cmp	r3, #16
 8005d76:	d05a      	beq.n	8005e2e <HAL_TIM_ConfigClockSource+0x15a>
 8005d78:	e062      	b.n	8005e40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d8a:	f000 fd41 	bl	8006810 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005d9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	609a      	str	r2, [r3, #8]
      break;
 8005da6:	e04f      	b.n	8005e48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005db8:	f000 fd2a 	bl	8006810 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	689a      	ldr	r2, [r3, #8]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005dca:	609a      	str	r2, [r3, #8]
      break;
 8005dcc:	e03c      	b.n	8005e48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dda:	461a      	mov	r2, r3
 8005ddc:	f000 fbe8 	bl	80065b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2150      	movs	r1, #80	@ 0x50
 8005de6:	4618      	mov	r0, r3
 8005de8:	f000 fcf7 	bl	80067da <TIM_ITRx_SetConfig>
      break;
 8005dec:	e02c      	b.n	8005e48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	f000 fc44 	bl	8006688 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2160      	movs	r1, #96	@ 0x60
 8005e06:	4618      	mov	r0, r3
 8005e08:	f000 fce7 	bl	80067da <TIM_ITRx_SetConfig>
      break;
 8005e0c:	e01c      	b.n	8005e48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	f000 fbc8 	bl	80065b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2140      	movs	r1, #64	@ 0x40
 8005e26:	4618      	mov	r0, r3
 8005e28:	f000 fcd7 	bl	80067da <TIM_ITRx_SetConfig>
      break;
 8005e2c:	e00c      	b.n	8005e48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4619      	mov	r1, r3
 8005e38:	4610      	mov	r0, r2
 8005e3a:	f000 fcce 	bl	80067da <TIM_ITRx_SetConfig>
      break;
 8005e3e:	e003      	b.n	8005e48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	73fb      	strb	r3, [r7, #15]
      break;
 8005e44:	e000      	b.n	8005e48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	fffeff88 	.word	0xfffeff88

08005e68 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e98:	bf00      	nop
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a40      	ldr	r2, [pc, #256]	@ (8005fe0 <TIM_Base_SetConfig+0x114>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d013      	beq.n	8005f0c <TIM_Base_SetConfig+0x40>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eea:	d00f      	beq.n	8005f0c <TIM_Base_SetConfig+0x40>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a3d      	ldr	r2, [pc, #244]	@ (8005fe4 <TIM_Base_SetConfig+0x118>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d00b      	beq.n	8005f0c <TIM_Base_SetConfig+0x40>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a3c      	ldr	r2, [pc, #240]	@ (8005fe8 <TIM_Base_SetConfig+0x11c>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d007      	beq.n	8005f0c <TIM_Base_SetConfig+0x40>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a3b      	ldr	r2, [pc, #236]	@ (8005fec <TIM_Base_SetConfig+0x120>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d003      	beq.n	8005f0c <TIM_Base_SetConfig+0x40>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a3a      	ldr	r2, [pc, #232]	@ (8005ff0 <TIM_Base_SetConfig+0x124>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d108      	bne.n	8005f1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a2f      	ldr	r2, [pc, #188]	@ (8005fe0 <TIM_Base_SetConfig+0x114>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d02b      	beq.n	8005f7e <TIM_Base_SetConfig+0xb2>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f2c:	d027      	beq.n	8005f7e <TIM_Base_SetConfig+0xb2>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a2c      	ldr	r2, [pc, #176]	@ (8005fe4 <TIM_Base_SetConfig+0x118>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d023      	beq.n	8005f7e <TIM_Base_SetConfig+0xb2>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a2b      	ldr	r2, [pc, #172]	@ (8005fe8 <TIM_Base_SetConfig+0x11c>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d01f      	beq.n	8005f7e <TIM_Base_SetConfig+0xb2>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a2a      	ldr	r2, [pc, #168]	@ (8005fec <TIM_Base_SetConfig+0x120>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d01b      	beq.n	8005f7e <TIM_Base_SetConfig+0xb2>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a29      	ldr	r2, [pc, #164]	@ (8005ff0 <TIM_Base_SetConfig+0x124>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d017      	beq.n	8005f7e <TIM_Base_SetConfig+0xb2>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a28      	ldr	r2, [pc, #160]	@ (8005ff4 <TIM_Base_SetConfig+0x128>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d013      	beq.n	8005f7e <TIM_Base_SetConfig+0xb2>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a27      	ldr	r2, [pc, #156]	@ (8005ff8 <TIM_Base_SetConfig+0x12c>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d00f      	beq.n	8005f7e <TIM_Base_SetConfig+0xb2>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a26      	ldr	r2, [pc, #152]	@ (8005ffc <TIM_Base_SetConfig+0x130>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d00b      	beq.n	8005f7e <TIM_Base_SetConfig+0xb2>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a25      	ldr	r2, [pc, #148]	@ (8006000 <TIM_Base_SetConfig+0x134>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d007      	beq.n	8005f7e <TIM_Base_SetConfig+0xb2>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a24      	ldr	r2, [pc, #144]	@ (8006004 <TIM_Base_SetConfig+0x138>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d003      	beq.n	8005f7e <TIM_Base_SetConfig+0xb2>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a23      	ldr	r2, [pc, #140]	@ (8006008 <TIM_Base_SetConfig+0x13c>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d108      	bne.n	8005f90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	689a      	ldr	r2, [r3, #8]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8005fe0 <TIM_Base_SetConfig+0x114>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d003      	beq.n	8005fc4 <TIM_Base_SetConfig+0xf8>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a0c      	ldr	r2, [pc, #48]	@ (8005ff0 <TIM_Base_SetConfig+0x124>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d103      	bne.n	8005fcc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	691a      	ldr	r2, [r3, #16]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	615a      	str	r2, [r3, #20]
}
 8005fd2:	bf00      	nop
 8005fd4:	3714      	adds	r7, #20
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	40010000 	.word	0x40010000
 8005fe4:	40000400 	.word	0x40000400
 8005fe8:	40000800 	.word	0x40000800
 8005fec:	40000c00 	.word	0x40000c00
 8005ff0:	40010400 	.word	0x40010400
 8005ff4:	40014000 	.word	0x40014000
 8005ff8:	40014400 	.word	0x40014400
 8005ffc:	40014800 	.word	0x40014800
 8006000:	40001800 	.word	0x40001800
 8006004:	40001c00 	.word	0x40001c00
 8006008:	40002000 	.word	0x40002000

0800600c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800600c:	b480      	push	{r7}
 800600e:	b087      	sub	sp, #28
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	f023 0201 	bic.w	r2, r3, #1
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	4b2b      	ldr	r3, [pc, #172]	@ (80060e4 <TIM_OC1_SetConfig+0xd8>)
 8006038:	4013      	ands	r3, r2
 800603a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f023 0303 	bic.w	r3, r3, #3
 8006042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	4313      	orrs	r3, r2
 800604c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	f023 0302 	bic.w	r3, r3, #2
 8006054:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	4313      	orrs	r3, r2
 800605e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a21      	ldr	r2, [pc, #132]	@ (80060e8 <TIM_OC1_SetConfig+0xdc>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d003      	beq.n	8006070 <TIM_OC1_SetConfig+0x64>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a20      	ldr	r2, [pc, #128]	@ (80060ec <TIM_OC1_SetConfig+0xe0>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d10c      	bne.n	800608a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	f023 0308 	bic.w	r3, r3, #8
 8006076:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	697a      	ldr	r2, [r7, #20]
 800607e:	4313      	orrs	r3, r2
 8006080:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	f023 0304 	bic.w	r3, r3, #4
 8006088:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a16      	ldr	r2, [pc, #88]	@ (80060e8 <TIM_OC1_SetConfig+0xdc>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d003      	beq.n	800609a <TIM_OC1_SetConfig+0x8e>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a15      	ldr	r2, [pc, #84]	@ (80060ec <TIM_OC1_SetConfig+0xe0>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d111      	bne.n	80060be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80060a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	699b      	ldr	r3, [r3, #24]
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	685a      	ldr	r2, [r3, #4]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	621a      	str	r2, [r3, #32]
}
 80060d8:	bf00      	nop
 80060da:	371c      	adds	r7, #28
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr
 80060e4:	fffeff8f 	.word	0xfffeff8f
 80060e8:	40010000 	.word	0x40010000
 80060ec:	40010400 	.word	0x40010400

080060f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b087      	sub	sp, #28
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	f023 0210 	bic.w	r2, r3, #16
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	4b2e      	ldr	r3, [pc, #184]	@ (80061d4 <TIM_OC2_SetConfig+0xe4>)
 800611c:	4013      	ands	r3, r2
 800611e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006126:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	021b      	lsls	r3, r3, #8
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	4313      	orrs	r3, r2
 8006132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	f023 0320 	bic.w	r3, r3, #32
 800613a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	011b      	lsls	r3, r3, #4
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	4313      	orrs	r3, r2
 8006146:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a23      	ldr	r2, [pc, #140]	@ (80061d8 <TIM_OC2_SetConfig+0xe8>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d003      	beq.n	8006158 <TIM_OC2_SetConfig+0x68>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a22      	ldr	r2, [pc, #136]	@ (80061dc <TIM_OC2_SetConfig+0xec>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d10d      	bne.n	8006174 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800615e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	011b      	lsls	r3, r3, #4
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	4313      	orrs	r3, r2
 800616a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006172:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a18      	ldr	r2, [pc, #96]	@ (80061d8 <TIM_OC2_SetConfig+0xe8>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d003      	beq.n	8006184 <TIM_OC2_SetConfig+0x94>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a17      	ldr	r2, [pc, #92]	@ (80061dc <TIM_OC2_SetConfig+0xec>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d113      	bne.n	80061ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800618a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006192:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	695b      	ldr	r3, [r3, #20]
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	693a      	ldr	r2, [r7, #16]
 800619c:	4313      	orrs	r3, r2
 800619e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	685a      	ldr	r2, [r3, #4]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	621a      	str	r2, [r3, #32]
}
 80061c6:	bf00      	nop
 80061c8:	371c      	adds	r7, #28
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	feff8fff 	.word	0xfeff8fff
 80061d8:	40010000 	.word	0x40010000
 80061dc:	40010400 	.word	0x40010400

080061e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b087      	sub	sp, #28
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a1b      	ldr	r3, [r3, #32]
 80061fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	69db      	ldr	r3, [r3, #28]
 8006206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	4b2d      	ldr	r3, [pc, #180]	@ (80062c0 <TIM_OC3_SetConfig+0xe0>)
 800620c:	4013      	ands	r3, r2
 800620e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f023 0303 	bic.w	r3, r3, #3
 8006216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	4313      	orrs	r3, r2
 8006220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006228:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	021b      	lsls	r3, r3, #8
 8006230:	697a      	ldr	r2, [r7, #20]
 8006232:	4313      	orrs	r3, r2
 8006234:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a22      	ldr	r2, [pc, #136]	@ (80062c4 <TIM_OC3_SetConfig+0xe4>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d003      	beq.n	8006246 <TIM_OC3_SetConfig+0x66>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a21      	ldr	r2, [pc, #132]	@ (80062c8 <TIM_OC3_SetConfig+0xe8>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d10d      	bne.n	8006262 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800624c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	021b      	lsls	r3, r3, #8
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	4313      	orrs	r3, r2
 8006258:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006260:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a17      	ldr	r2, [pc, #92]	@ (80062c4 <TIM_OC3_SetConfig+0xe4>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d003      	beq.n	8006272 <TIM_OC3_SetConfig+0x92>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a16      	ldr	r2, [pc, #88]	@ (80062c8 <TIM_OC3_SetConfig+0xe8>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d113      	bne.n	800629a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006278:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006280:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	011b      	lsls	r3, r3, #4
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	4313      	orrs	r3, r2
 800628c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	011b      	lsls	r3, r3, #4
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	4313      	orrs	r3, r2
 8006298:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	685a      	ldr	r2, [r3, #4]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	621a      	str	r2, [r3, #32]
}
 80062b4:	bf00      	nop
 80062b6:	371c      	adds	r7, #28
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	fffeff8f 	.word	0xfffeff8f
 80062c4:	40010000 	.word	0x40010000
 80062c8:	40010400 	.word	0x40010400

080062cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b087      	sub	sp, #28
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	4b1e      	ldr	r3, [pc, #120]	@ (8006370 <TIM_OC4_SetConfig+0xa4>)
 80062f8:	4013      	ands	r3, r2
 80062fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006302:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	021b      	lsls	r3, r3, #8
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	4313      	orrs	r3, r2
 800630e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006316:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	031b      	lsls	r3, r3, #12
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	4313      	orrs	r3, r2
 8006322:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a13      	ldr	r2, [pc, #76]	@ (8006374 <TIM_OC4_SetConfig+0xa8>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d003      	beq.n	8006334 <TIM_OC4_SetConfig+0x68>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a12      	ldr	r2, [pc, #72]	@ (8006378 <TIM_OC4_SetConfig+0xac>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d109      	bne.n	8006348 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800633a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	695b      	ldr	r3, [r3, #20]
 8006340:	019b      	lsls	r3, r3, #6
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	4313      	orrs	r3, r2
 8006346:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	697a      	ldr	r2, [r7, #20]
 800634c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	685a      	ldr	r2, [r3, #4]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	621a      	str	r2, [r3, #32]
}
 8006362:	bf00      	nop
 8006364:	371c      	adds	r7, #28
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop
 8006370:	feff8fff 	.word	0xfeff8fff
 8006374:	40010000 	.word	0x40010000
 8006378:	40010400 	.word	0x40010400

0800637c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800637c:	b480      	push	{r7}
 800637e:	b087      	sub	sp, #28
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a1b      	ldr	r3, [r3, #32]
 800638a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	4b1b      	ldr	r3, [pc, #108]	@ (8006414 <TIM_OC5_SetConfig+0x98>)
 80063a8:	4013      	ands	r3, r2
 80063aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80063bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	041b      	lsls	r3, r3, #16
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a12      	ldr	r2, [pc, #72]	@ (8006418 <TIM_OC5_SetConfig+0x9c>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d003      	beq.n	80063da <TIM_OC5_SetConfig+0x5e>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a11      	ldr	r2, [pc, #68]	@ (800641c <TIM_OC5_SetConfig+0xa0>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d109      	bne.n	80063ee <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	021b      	lsls	r3, r3, #8
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	685a      	ldr	r2, [r3, #4]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	621a      	str	r2, [r3, #32]
}
 8006408:	bf00      	nop
 800640a:	371c      	adds	r7, #28
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr
 8006414:	fffeff8f 	.word	0xfffeff8f
 8006418:	40010000 	.word	0x40010000
 800641c:	40010400 	.word	0x40010400

08006420 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006420:	b480      	push	{r7}
 8006422:	b087      	sub	sp, #28
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	4b1c      	ldr	r3, [pc, #112]	@ (80064bc <TIM_OC6_SetConfig+0x9c>)
 800644c:	4013      	ands	r3, r2
 800644e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	021b      	lsls	r3, r3, #8
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	4313      	orrs	r3, r2
 800645a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006462:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	051b      	lsls	r3, r3, #20
 800646a:	693a      	ldr	r2, [r7, #16]
 800646c:	4313      	orrs	r3, r2
 800646e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a13      	ldr	r2, [pc, #76]	@ (80064c0 <TIM_OC6_SetConfig+0xa0>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d003      	beq.n	8006480 <TIM_OC6_SetConfig+0x60>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a12      	ldr	r2, [pc, #72]	@ (80064c4 <TIM_OC6_SetConfig+0xa4>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d109      	bne.n	8006494 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006486:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	695b      	ldr	r3, [r3, #20]
 800648c:	029b      	lsls	r3, r3, #10
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	4313      	orrs	r3, r2
 8006492:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	685a      	ldr	r2, [r3, #4]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	621a      	str	r2, [r3, #32]
}
 80064ae:	bf00      	nop
 80064b0:	371c      	adds	r7, #28
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	feff8fff 	.word	0xfeff8fff
 80064c0:	40010000 	.word	0x40010000
 80064c4:	40010400 	.word	0x40010400

080064c8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b087      	sub	sp, #28
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
 80064d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	f023 0201 	bic.w	r2, r3, #1
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6a1b      	ldr	r3, [r3, #32]
 80064ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	4a28      	ldr	r2, [pc, #160]	@ (8006594 <TIM_TI1_SetConfig+0xcc>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d01b      	beq.n	800652e <TIM_TI1_SetConfig+0x66>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064fc:	d017      	beq.n	800652e <TIM_TI1_SetConfig+0x66>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	4a25      	ldr	r2, [pc, #148]	@ (8006598 <TIM_TI1_SetConfig+0xd0>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d013      	beq.n	800652e <TIM_TI1_SetConfig+0x66>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	4a24      	ldr	r2, [pc, #144]	@ (800659c <TIM_TI1_SetConfig+0xd4>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d00f      	beq.n	800652e <TIM_TI1_SetConfig+0x66>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	4a23      	ldr	r2, [pc, #140]	@ (80065a0 <TIM_TI1_SetConfig+0xd8>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d00b      	beq.n	800652e <TIM_TI1_SetConfig+0x66>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	4a22      	ldr	r2, [pc, #136]	@ (80065a4 <TIM_TI1_SetConfig+0xdc>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d007      	beq.n	800652e <TIM_TI1_SetConfig+0x66>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	4a21      	ldr	r2, [pc, #132]	@ (80065a8 <TIM_TI1_SetConfig+0xe0>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d003      	beq.n	800652e <TIM_TI1_SetConfig+0x66>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	4a20      	ldr	r2, [pc, #128]	@ (80065ac <TIM_TI1_SetConfig+0xe4>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d101      	bne.n	8006532 <TIM_TI1_SetConfig+0x6a>
 800652e:	2301      	movs	r3, #1
 8006530:	e000      	b.n	8006534 <TIM_TI1_SetConfig+0x6c>
 8006532:	2300      	movs	r3, #0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d008      	beq.n	800654a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	f023 0303 	bic.w	r3, r3, #3
 800653e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4313      	orrs	r3, r2
 8006546:	617b      	str	r3, [r7, #20]
 8006548:	e003      	b.n	8006552 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	f043 0301 	orr.w	r3, r3, #1
 8006550:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006558:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	011b      	lsls	r3, r3, #4
 800655e:	b2db      	uxtb	r3, r3
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	4313      	orrs	r3, r2
 8006564:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	f023 030a 	bic.w	r3, r3, #10
 800656c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	f003 030a 	and.w	r3, r3, #10
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	4313      	orrs	r3, r2
 8006578:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	693a      	ldr	r2, [r7, #16]
 8006584:	621a      	str	r2, [r3, #32]
}
 8006586:	bf00      	nop
 8006588:	371c      	adds	r7, #28
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	40010000 	.word	0x40010000
 8006598:	40000400 	.word	0x40000400
 800659c:	40000800 	.word	0x40000800
 80065a0:	40000c00 	.word	0x40000c00
 80065a4:	40010400 	.word	0x40010400
 80065a8:	40014000 	.word	0x40014000
 80065ac:	40001800 	.word	0x40001800

080065b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b087      	sub	sp, #28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6a1b      	ldr	r3, [r3, #32]
 80065c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	f023 0201 	bic.w	r2, r3, #1
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80065da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	011b      	lsls	r3, r3, #4
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	f023 030a 	bic.w	r3, r3, #10
 80065ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065ee:	697a      	ldr	r2, [r7, #20]
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	621a      	str	r2, [r3, #32]
}
 8006602:	bf00      	nop
 8006604:	371c      	adds	r7, #28
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr

0800660e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800660e:	b480      	push	{r7}
 8006610:	b087      	sub	sp, #28
 8006612:	af00      	add	r7, sp, #0
 8006614:	60f8      	str	r0, [r7, #12]
 8006616:	60b9      	str	r1, [r7, #8]
 8006618:	607a      	str	r2, [r7, #4]
 800661a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6a1b      	ldr	r3, [r3, #32]
 8006620:	f023 0210 	bic.w	r2, r3, #16
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6a1b      	ldr	r3, [r3, #32]
 8006632:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800663a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	021b      	lsls	r3, r3, #8
 8006640:	697a      	ldr	r2, [r7, #20]
 8006642:	4313      	orrs	r3, r2
 8006644:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800664c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	031b      	lsls	r3, r3, #12
 8006652:	b29b      	uxth	r3, r3
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	4313      	orrs	r3, r2
 8006658:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006660:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	011b      	lsls	r3, r3, #4
 8006666:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800666a:	693a      	ldr	r2, [r7, #16]
 800666c:	4313      	orrs	r3, r2
 800666e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	621a      	str	r2, [r3, #32]
}
 800667c:	bf00      	nop
 800667e:	371c      	adds	r7, #28
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006688:	b480      	push	{r7}
 800668a:	b087      	sub	sp, #28
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6a1b      	ldr	r3, [r3, #32]
 8006698:	f023 0210 	bic.w	r2, r3, #16
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80066b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	031b      	lsls	r3, r3, #12
 80066b8:	697a      	ldr	r2, [r7, #20]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80066c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	011b      	lsls	r3, r3, #4
 80066ca:	693a      	ldr	r2, [r7, #16]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	693a      	ldr	r2, [r7, #16]
 80066da:	621a      	str	r2, [r3, #32]
}
 80066dc:	bf00      	nop
 80066de:	371c      	adds	r7, #28
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b087      	sub	sp, #28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
 80066f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6a1b      	ldr	r3, [r3, #32]
 80066fa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	69db      	ldr	r3, [r3, #28]
 8006706:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6a1b      	ldr	r3, [r3, #32]
 800670c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	f023 0303 	bic.w	r3, r3, #3
 8006714:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006716:	697a      	ldr	r2, [r7, #20]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4313      	orrs	r3, r2
 800671c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006724:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	011b      	lsls	r3, r3, #4
 800672a:	b2db      	uxtb	r3, r3
 800672c:	697a      	ldr	r2, [r7, #20]
 800672e:	4313      	orrs	r3, r2
 8006730:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006738:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	021b      	lsls	r3, r3, #8
 800673e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	4313      	orrs	r3, r2
 8006746:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	697a      	ldr	r2, [r7, #20]
 800674c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	693a      	ldr	r2, [r7, #16]
 8006752:	621a      	str	r2, [r3, #32]
}
 8006754:	bf00      	nop
 8006756:	371c      	adds	r7, #28
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006760:	b480      	push	{r7}
 8006762:	b087      	sub	sp, #28
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	607a      	str	r2, [r7, #4]
 800676c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6a1b      	ldr	r3, [r3, #32]
 8006772:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	69db      	ldr	r3, [r3, #28]
 800677e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6a1b      	ldr	r3, [r3, #32]
 8006784:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800678c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	021b      	lsls	r3, r3, #8
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	4313      	orrs	r3, r2
 8006796:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800679e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	031b      	lsls	r3, r3, #12
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	697a      	ldr	r2, [r7, #20]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80067b2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	031b      	lsls	r3, r3, #12
 80067b8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	4313      	orrs	r3, r2
 80067c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	697a      	ldr	r2, [r7, #20]
 80067c6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	693a      	ldr	r2, [r7, #16]
 80067cc:	621a      	str	r2, [r3, #32]
}
 80067ce:	bf00      	nop
 80067d0:	371c      	adds	r7, #28
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr

080067da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067da:	b480      	push	{r7}
 80067dc:	b085      	sub	sp, #20
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
 80067e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067f2:	683a      	ldr	r2, [r7, #0]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	f043 0307 	orr.w	r3, r3, #7
 80067fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	609a      	str	r2, [r3, #8]
}
 8006804:	bf00      	nop
 8006806:	3714      	adds	r7, #20
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006810:	b480      	push	{r7}
 8006812:	b087      	sub	sp, #28
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]
 800681c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800682a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	021a      	lsls	r2, r3, #8
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	431a      	orrs	r2, r3
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	4313      	orrs	r3, r2
 8006838:	697a      	ldr	r2, [r7, #20]
 800683a:	4313      	orrs	r3, r2
 800683c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	697a      	ldr	r2, [r7, #20]
 8006842:	609a      	str	r2, [r3, #8]
}
 8006844:	bf00      	nop
 8006846:	371c      	adds	r7, #28
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006860:	2b01      	cmp	r3, #1
 8006862:	d101      	bne.n	8006868 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006864:	2302      	movs	r3, #2
 8006866:	e06d      	b.n	8006944 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2202      	movs	r2, #2
 8006874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a30      	ldr	r2, [pc, #192]	@ (8006950 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d004      	beq.n	800689c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a2f      	ldr	r2, [pc, #188]	@ (8006954 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d108      	bne.n	80068ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80068a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	4313      	orrs	r3, r2
 80068be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a20      	ldr	r2, [pc, #128]	@ (8006950 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d022      	beq.n	8006918 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068da:	d01d      	beq.n	8006918 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a1d      	ldr	r2, [pc, #116]	@ (8006958 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d018      	beq.n	8006918 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a1c      	ldr	r2, [pc, #112]	@ (800695c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d013      	beq.n	8006918 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a1a      	ldr	r2, [pc, #104]	@ (8006960 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d00e      	beq.n	8006918 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a15      	ldr	r2, [pc, #84]	@ (8006954 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d009      	beq.n	8006918 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a16      	ldr	r2, [pc, #88]	@ (8006964 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d004      	beq.n	8006918 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a15      	ldr	r2, [pc, #84]	@ (8006968 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d10c      	bne.n	8006932 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800691e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	68ba      	ldr	r2, [r7, #8]
 8006926:	4313      	orrs	r3, r2
 8006928:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2201      	movs	r2, #1
 8006936:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3714      	adds	r7, #20
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr
 8006950:	40010000 	.word	0x40010000
 8006954:	40010400 	.word	0x40010400
 8006958:	40000400 	.word	0x40000400
 800695c:	40000800 	.word	0x40000800
 8006960:	40000c00 	.word	0x40000c00
 8006964:	40014000 	.word	0x40014000
 8006968:	40001800 	.word	0x40001800

0800696c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800696c:	b480      	push	{r7}
 800696e:	b085      	sub	sp, #20
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006976:	2300      	movs	r3, #0
 8006978:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006980:	2b01      	cmp	r3, #1
 8006982:	d101      	bne.n	8006988 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006984:	2302      	movs	r3, #2
 8006986:	e065      	b.n	8006a54 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	4313      	orrs	r3, r2
 800699c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	695b      	ldr	r3, [r3, #20]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ee:	4313      	orrs	r3, r2
 80069f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	699b      	ldr	r3, [r3, #24]
 80069fc:	041b      	lsls	r3, r3, #16
 80069fe:	4313      	orrs	r3, r2
 8006a00:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a16      	ldr	r2, [pc, #88]	@ (8006a60 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d004      	beq.n	8006a16 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a14      	ldr	r2, [pc, #80]	@ (8006a64 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d115      	bne.n	8006a42 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a20:	051b      	lsls	r3, r3, #20
 8006a22:	4313      	orrs	r3, r2
 8006a24:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	69db      	ldr	r3, [r3, #28]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	6a1b      	ldr	r3, [r3, #32]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3714      	adds	r7, #20
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr
 8006a60:	40010000 	.word	0x40010000
 8006a64:	40010400 	.word	0x40010400

08006a68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a70:	bf00      	nop
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a84:	bf00      	nop
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a98:	bf00      	nop
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <memset>:
 8006aa4:	4402      	add	r2, r0
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d100      	bne.n	8006aae <memset+0xa>
 8006aac:	4770      	bx	lr
 8006aae:	f803 1b01 	strb.w	r1, [r3], #1
 8006ab2:	e7f9      	b.n	8006aa8 <memset+0x4>

08006ab4 <__libc_init_array>:
 8006ab4:	b570      	push	{r4, r5, r6, lr}
 8006ab6:	4d0d      	ldr	r5, [pc, #52]	@ (8006aec <__libc_init_array+0x38>)
 8006ab8:	4c0d      	ldr	r4, [pc, #52]	@ (8006af0 <__libc_init_array+0x3c>)
 8006aba:	1b64      	subs	r4, r4, r5
 8006abc:	10a4      	asrs	r4, r4, #2
 8006abe:	2600      	movs	r6, #0
 8006ac0:	42a6      	cmp	r6, r4
 8006ac2:	d109      	bne.n	8006ad8 <__libc_init_array+0x24>
 8006ac4:	4d0b      	ldr	r5, [pc, #44]	@ (8006af4 <__libc_init_array+0x40>)
 8006ac6:	4c0c      	ldr	r4, [pc, #48]	@ (8006af8 <__libc_init_array+0x44>)
 8006ac8:	f000 f818 	bl	8006afc <_init>
 8006acc:	1b64      	subs	r4, r4, r5
 8006ace:	10a4      	asrs	r4, r4, #2
 8006ad0:	2600      	movs	r6, #0
 8006ad2:	42a6      	cmp	r6, r4
 8006ad4:	d105      	bne.n	8006ae2 <__libc_init_array+0x2e>
 8006ad6:	bd70      	pop	{r4, r5, r6, pc}
 8006ad8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006adc:	4798      	blx	r3
 8006ade:	3601      	adds	r6, #1
 8006ae0:	e7ee      	b.n	8006ac0 <__libc_init_array+0xc>
 8006ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ae6:	4798      	blx	r3
 8006ae8:	3601      	adds	r6, #1
 8006aea:	e7f2      	b.n	8006ad2 <__libc_init_array+0x1e>
 8006aec:	08006b40 	.word	0x08006b40
 8006af0:	08006b40 	.word	0x08006b40
 8006af4:	08006b40 	.word	0x08006b40
 8006af8:	08006b44 	.word	0x08006b44

08006afc <_init>:
 8006afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006afe:	bf00      	nop
 8006b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b02:	bc08      	pop	{r3}
 8006b04:	469e      	mov	lr, r3
 8006b06:	4770      	bx	lr

08006b08 <_fini>:
 8006b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b0a:	bf00      	nop
 8006b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b0e:	bc08      	pop	{r3}
 8006b10:	469e      	mov	lr, r3
 8006b12:	4770      	bx	lr
