
Inverter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077b0  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ccmram       00000868  080079a8  080079a8  000089a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001f0  08008210  08008210  00009210  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08008400  08008400  0000a08c  2**0
                  CONTENTS
  5 .ARM          00000008  08008400  08008400  00009400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08008408  08008408  0000a08c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08008408  08008408  00009408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800840c  0800840c  0000940c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000008c  20000000  08008410  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000063c  2000008c  0800849c  0000a08c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200006c8  0800849c  0000a6c8  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0000a08c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019ff6  00000000  00000000  0000a0ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000434e  00000000  00000000  000240b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014b8  00000000  00000000  00028400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fc3  00000000  00000000  000298b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002be12  00000000  00000000  0002a87b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001eac4  00000000  00000000  0005668d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00103d45  00000000  00000000  00075151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00178e96  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005694  00000000  00000000  00178edc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  0017e570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000008c 	.word	0x2000008c
 8000214:	00000000 	.word	0x00000000
 8000218:	08007990 	.word	0x08007990

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000090 	.word	0x20000090
 8000234:	08007990 	.word	0x08007990

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <calc_duties>:
 * @param[in] vq Voltage in the q-axis.
 * @param[in] vDC DC voltage.
 * @param[in] theta_e Electrical angle in radians (-pi..pi).
 * @param[out] duties Pointer to the duties structure.
 */
void calc_duties(float vd, float vq, float vDC, float theta_e, volatile Duties *duties) {
 8000528:	b580      	push	{r7, lr}
 800052a:	ed2d 8b04 	vpush	{d8-d9}
 800052e:	b08e      	sub	sp, #56	@ 0x38
 8000530:	af00      	add	r7, sp, #0
 8000532:	ed87 0a05 	vstr	s0, [r7, #20]
 8000536:	edc7 0a04 	vstr	s1, [r7, #16]
 800053a:	ed87 1a03 	vstr	s2, [r7, #12]
 800053e:	edc7 1a02 	vstr	s3, [r7, #8]
 8000542:	6078      	str	r0, [r7, #4]


  // inverse Park transform
  float alpha = (vd/vDC)*cos(theta_e) - (vq/vDC)*sin(theta_e);              // Alpha(D) = d*cos(Fi) - q*sin(Fi)
 8000544:	edd7 6a05 	vldr	s13, [r7, #20]
 8000548:	ed97 7a03 	vldr	s14, [r7, #12]
 800054c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000550:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8000554:	edd7 7a02 	vldr	s15, [r7, #8]
 8000558:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800055c:	eeb0 0b47 	vmov.f64	d0, d7
 8000560:	f006 fbda 	bl	8006d18 <cos>
 8000564:	eeb0 7b40 	vmov.f64	d7, d0
 8000568:	ee28 8b07 	vmul.f64	d8, d8, d7
 800056c:	edd7 6a04 	vldr	s13, [r7, #16]
 8000570:	ed97 7a03 	vldr	s14, [r7, #12]
 8000574:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000578:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800057c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000580:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000584:	eeb0 0b47 	vmov.f64	d0, d7
 8000588:	f006 fc12 	bl	8006db0 <sin>
 800058c:	eeb0 7b40 	vmov.f64	d7, d0
 8000590:	ee29 7b07 	vmul.f64	d7, d9, d7
 8000594:	ee38 7b47 	vsub.f64	d7, d8, d7
 8000598:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800059c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
  float beta = (vd/vDC)*sin(theta_e) + (vq/vDC)*cos(theta_e);              // Beta(Q) = d*sin(Fi) + q*cos(Fi)
 80005a0:	edd7 6a05 	vldr	s13, [r7, #20]
 80005a4:	ed97 7a03 	vldr	s14, [r7, #12]
 80005a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005ac:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80005b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80005b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80005b8:	eeb0 0b47 	vmov.f64	d0, d7
 80005bc:	f006 fbf8 	bl	8006db0 <sin>
 80005c0:	eeb0 7b40 	vmov.f64	d7, d0
 80005c4:	ee28 8b07 	vmul.f64	d8, d8, d7
 80005c8:	edd7 6a04 	vldr	s13, [r7, #16]
 80005cc:	ed97 7a03 	vldr	s14, [r7, #12]
 80005d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005d4:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80005d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80005dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80005e0:	eeb0 0b47 	vmov.f64	d0, d7
 80005e4:	f006 fb98 	bl	8006d18 <cos>
 80005e8:	eeb0 7b40 	vmov.f64	d7, d0
 80005ec:	ee29 7b07 	vmul.f64	d7, d9, d7
 80005f0:	ee38 7b07 	vadd.f64	d7, d8, d7
 80005f4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80005f8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30


  svpwm_struct svpwm;

  // Assign values to SVPWM structure, works with alpha/beta not a/b/c
  svpwm.alpha = alpha;
 80005fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005fe:	61bb      	str	r3, [r7, #24]
  svpwm.beta = beta;
 8000600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000602:	61fb      	str	r3, [r7, #28]
  svpwm_calc(&svpwm);
 8000604:	f107 0318 	add.w	r3, r7, #24
 8000608:	4618      	mov	r0, r3
 800060a:	f007 fbb1 	bl	8007d70 <svpwm_calc>

  // Assign SVPWM duties (0 to 1, high side)
  duties->Da = svpwm.Da;
 800060e:	6a3a      	ldr	r2, [r7, #32]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	601a      	str	r2, [r3, #0]
  duties->Db = svpwm.Db;
 8000614:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	605a      	str	r2, [r3, #4]
  duties->Dc = svpwm.Dc;
 800061a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	609a      	str	r2, [r3, #8]

}
 8000620:	bf00      	nop
 8000622:	3738      	adds	r7, #56	@ 0x38
 8000624:	46bd      	mov	sp, r7
 8000626:	ecbd 8b04 	vpop	{d8-d9}
 800062a:	bd80      	pop	{r7, pc}

0800062c <eval_inv_FSM>:
 *
 * This function executes the finite state machine to control the inverter based on its current state.
 *
 * @param inv Pointer to the inverter structure.
 */
void eval_inv_FSM(volatile inverterStruct *inv) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
    switch (inv->state) {
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	7d1b      	ldrb	r3, [r3, #20]
 8000638:	b2db      	uxtb	r3, r3
 800063a:	2b03      	cmp	r3, #3
 800063c:	d81a      	bhi.n	8000674 <eval_inv_FSM+0x48>
 800063e:	a201      	add	r2, pc, #4	@ (adr r2, 8000644 <eval_inv_FSM+0x18>)
 8000640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000644:	08000655 	.word	0x08000655
 8000648:	0800065d 	.word	0x0800065d
 800064c:	08000665 	.word	0x08000665
 8000650:	0800066d 	.word	0x0800066d
        case INV_STATE_IDLE:
        	handle_idle(inv);
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f000 f813 	bl	8000680 <handle_idle>
            break;
 800065a:	e00c      	b.n	8000676 <eval_inv_FSM+0x4a>
        case INV_STATE_STARTUP:
        	handle_startup(inv);
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f000 f829 	bl	80006b4 <handle_startup>
            break;
 8000662:	e008      	b.n	8000676 <eval_inv_FSM+0x4a>
        case INV_STATE_RUNNING:
        	handle_running(inv);
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f000 f83f 	bl	80006e8 <handle_running>
            break;
 800066a:	e004      	b.n	8000676 <eval_inv_FSM+0x4a>
        case INV_STATE_FAULT:
        	handle_fault(inv);
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f000 f855 	bl	800071c <handle_fault>
            break;
 8000672:	e000      	b.n	8000676 <eval_inv_FSM+0x4a>
        default:
            // Invalid state, handle error
            break;
 8000674:	bf00      	nop
    }
}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop

08000680 <handle_idle>:
 *
 * This function handles the actions and transitions for the idle state of the inverter.
 *
 * @param inv Pointer to the inverter structure.
 */
void handle_idle(volatile inverterStruct *inv) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
    // Perform actions required in idle state
    // Transition conditions to other states:
    // - Start startup sequence based on input condition
    // - Transition to fault state based on error conditions
    inv->led->mode = LED_MODE_OFF;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2203      	movs	r2, #3
 800068e:	719a      	strb	r2, [r3, #6]
    DISABLE(inv->enable_port, inv->enable_pin);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	6858      	ldr	r0, [r3, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	891b      	ldrh	r3, [r3, #8]
 8000698:	b29b      	uxth	r3, r3
 800069a:	2200      	movs	r2, #0
 800069c:	4619      	mov	r1, r3
 800069e:	f003 fcd5 	bl	800404c <HAL_GPIO_WritePin>
    disable_PWM(inv->htim);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	68db      	ldr	r3, [r3, #12]
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 f9ae 	bl	8000a08 <disable_PWM>

}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <handle_startup>:
 *
 * This function handles the actions and transitions for the startup state of the inverter.
 *
 * @param inv Pointer to the inverter structure.
 */
void handle_startup(volatile inverterStruct *inv) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
    // Perform actions required in startup state
    // Transition conditions to other states:
    // - Transition to running state when startup sequence completes successfully
    // - Transition to fault state based on error conditions during startup
    inv->led->mode = LED_MODE_BLINK_FAST;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2200      	movs	r2, #0
 80006c2:	719a      	strb	r2, [r3, #6]
    DISABLE(inv->enable_port, inv->enable_pin);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	6858      	ldr	r0, [r3, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	891b      	ldrh	r3, [r3, #8]
 80006cc:	b29b      	uxth	r3, r3
 80006ce:	2200      	movs	r2, #0
 80006d0:	4619      	mov	r1, r3
 80006d2:	f003 fcbb 	bl	800404c <HAL_GPIO_WritePin>
    enable_PWM(inv->htim);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	68db      	ldr	r3, [r3, #12]
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 f96e 	bl	80009bc <enable_PWM>

}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <handle_running>:
 *
 * This function handles the actions and transitions for the running state of the inverter.
 *
 * @param inv Pointer to the inverter structure.
 */
void handle_running(volatile inverterStruct *inv) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
    // Perform actions required in running state
    // This is where the main control loop resides
    // Monitor inverter variables, adjust control parameters, etc.
    // Transition conditions to other states:
    // - Transition to fault state based on error conditions during operation
    inv->led->mode = LED_MODE_ON;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2202      	movs	r2, #2
 80006f6:	719a      	strb	r2, [r3, #6]
    ENABLE(inv->enable_port, inv->enable_pin);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	6858      	ldr	r0, [r3, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	891b      	ldrh	r3, [r3, #8]
 8000700:	b29b      	uxth	r3, r3
 8000702:	2201      	movs	r2, #1
 8000704:	4619      	mov	r1, r3
 8000706:	f003 fca1 	bl	800404c <HAL_GPIO_WritePin>
    enable_PWM(inv->htim);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	68db      	ldr	r3, [r3, #12]
 800070e:	4618      	mov	r0, r3
 8000710:	f000 f954 	bl	80009bc <enable_PWM>

}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <handle_fault>:
 *
 * This function handles the actions and transitions for the fault state of the inverter.
 *
 * @param inv Pointer to the inverter structure.
 */
void handle_fault(volatile inverterStruct *inv) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
    // Perform actions required in fault state
    // This could involve shutting down the inverter, logging error messages, etc.
    // Transition conditions to other states:
    // - Retry startup sequence after a delay if fault condition is recoverable
    // - Transition to idle state after fault is resolved
    inv->led->mode = LED_MODE_BLINK_SLOW;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2201      	movs	r2, #1
 800072a:	719a      	strb	r2, [r3, #6]
    DISABLE(inv->enable_port, inv->enable_pin);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	6858      	ldr	r0, [r3, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	891b      	ldrh	r3, [r3, #8]
 8000734:	b29b      	uxth	r3, r3
 8000736:	2200      	movs	r2, #0
 8000738:	4619      	mov	r1, r3
 800073a:	f003 fc87 	bl	800404c <HAL_GPIO_WritePin>
    disable_PWM(inv->htim);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	68db      	ldr	r3, [r3, #12]
 8000742:	4618      	mov	r0, r3
 8000744:	f000 f960 	bl	8000a08 <disable_PWM>
}
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <initialize_inverter>:
 * @param enable_port Pointer to the GPIO port for enabling/disabling the inverter.
 * @param enable_pin Pin number for enabling/disabling the inverter.
 * @param htim Timer peripheral for the PWM output.
 * @param hadc ADC peripheral for the current phase current and DC voltage sensing.
 */
void initialize_inverter(volatile inverterStruct *inv, LED *led, GPIO_TypeDef *enable_port, uint16_t enable_pin, TIM_HandleTypeDef *htim, ADC_HandleTypeDef *hadc) {
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
 800075c:	807b      	strh	r3, [r7, #2]
    // Initialize inverter structure
    inv->state = INV_STATE_STARTUP;
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	2201      	movs	r2, #1
 8000762:	751a      	strb	r2, [r3, #20]
    inv->led = led;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	68ba      	ldr	r2, [r7, #8]
 8000768:	601a      	str	r2, [r3, #0]
    inv->enable_pin = enable_pin;
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	887a      	ldrh	r2, [r7, #2]
 800076e:	811a      	strh	r2, [r3, #8]
    inv->enable_port = enable_port;
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	605a      	str	r2, [r3, #4]
    inv->htim = htim;
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	69ba      	ldr	r2, [r7, #24]
 800077a:	60da      	str	r2, [r3, #12]
    inv->hadc = hadc;
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	69fa      	ldr	r2, [r7, #28]
 8000780:	611a      	str	r2, [r3, #16]
    inv->duties.Da = 0.5;
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8000788:	64da      	str	r2, [r3, #76]	@ 0x4c
    inv->duties.Db = 0.5;
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8000790:	651a      	str	r2, [r3, #80]	@ 0x50
    inv->duties.Dc = 0.5;
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8000798:	655a      	str	r2, [r3, #84]	@ 0x54

    HAL_TIM_Base_Start_IT(inv->htim);
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	68db      	ldr	r3, [r3, #12]
 800079e:	4618      	mov	r0, r3
 80007a0:	f004 fec6 	bl	8005530 <HAL_TIM_Base_Start_IT>

}
 80007a4:	bf00      	nop
 80007a6:	3710      	adds	r7, #16
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <get_ADC>:
  * @brief  Get electrical ADC measurements.
  * @param[in]  ADC_raw Pointer to the raw ADC values array.
  * @param[out]  analog Pointer to the ADC struct to store the results.
  * @retval OK 0 if an error occurred, 1 if successful.
  */
uint8_t get_ADC(volatile uint32_t ADC_raw[], volatile Analog* analog) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]

    // Calculate currents and voltage
    float ia = get_linear(ADC_raw[0], CURRENT_SLOPE, CURRENT_OFFSET);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 8000838 <get_ADC+0x8c>
 80007be:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 800083c <get_ADC+0x90>
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 f840 	bl	8000848 <get_linear>
 80007c8:	ed87 0a05 	vstr	s0, [r7, #20]
    float ib = get_linear(ADC_raw[1], CURRENT_SLOPE, CURRENT_OFFSET);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	3304      	adds	r3, #4
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	eddf 0a19 	vldr	s1, [pc, #100]	@ 8000838 <get_ADC+0x8c>
 80007d6:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 800083c <get_ADC+0x90>
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 f834 	bl	8000848 <get_linear>
 80007e0:	ed87 0a04 	vstr	s0, [r7, #16]
    float ic = get_linear(ADC_raw[2], CURRENT_SLOPE, CURRENT_OFFSET);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	3308      	adds	r3, #8
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8000838 <get_ADC+0x8c>
 80007ee:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 800083c <get_ADC+0x90>
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 f828 	bl	8000848 <get_linear>
 80007f8:	ed87 0a03 	vstr	s0, [r7, #12]
    float vDC = get_linear(ADC_raw[3], VOLTAGE_SLOPE, VOLTAGE_OFFSET);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	330c      	adds	r3, #12
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 8000840 <get_ADC+0x94>
 8000806:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8000844 <get_ADC+0x98>
 800080a:	4618      	mov	r0, r3
 800080c:	f000 f81c 	bl	8000848 <get_linear>
 8000810:	ed87 0a02 	vstr	s0, [r7, #8]

    // Store the measurements
    analog->ia = ia;
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	697a      	ldr	r2, [r7, #20]
 8000818:	601a      	str	r2, [r3, #0]
    analog->ib = ib;
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	693a      	ldr	r2, [r7, #16]
 800081e:	605a      	str	r2, [r3, #4]
    analog->ic = ic;
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	68fa      	ldr	r2, [r7, #12]
 8000824:	609a      	str	r2, [r3, #8]
    analog->vDC = vDC;
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	68ba      	ldr	r2, [r7, #8]
 800082a:	60da      	str	r2, [r3, #12]

    return 1; // Success
 800082c:	2301      	movs	r3, #1
}
 800082e:	4618      	mov	r0, r3
 8000830:	3718      	adds	r7, #24
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	3fd9afe4 	.word	0x3fd9afe4
 800083c:	4259afe4 	.word	0x4259afe4
 8000840:	3caaa3ad 	.word	0x3caaa3ad
 8000844:	4383b7ae 	.word	0x4383b7ae

08000848 <get_linear>:
  * @param[in]  bits The ADC reading.
  * @param[in]  slope The slope (units per volt).
  * @param[in]  offset The offset (volts at zero).
  * @retval measurement The physical measurement.
  */
float get_linear(uint32_t bits, float slope, float offset) {
 8000848:	b480      	push	{r7}
 800084a:	b087      	sub	sp, #28
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	ed87 0a02 	vstr	s0, [r7, #8]
 8000854:	edc7 0a01 	vstr	s1, [r7, #4]
    // Convert ADC reading to voltage
    float voltage = (float) bits * 0.0008058608f; // Assuming 12-bit ADC and 3.3V reference (bits * (3.3 V / 4095.0 bits))
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	ee07 3a90 	vmov	s15, r3
 800085e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000862:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800089c <get_linear+0x54>
 8000866:	ee67 7a87 	vmul.f32	s15, s15, s14
 800086a:	edc7 7a05 	vstr	s15, [r7, #20]

    // Convert voltage to physical measurement
    float measurement = (voltage - offset) * slope;
 800086e:	ed97 7a05 	vldr	s14, [r7, #20]
 8000872:	edd7 7a01 	vldr	s15, [r7, #4]
 8000876:	ee77 7a67 	vsub.f32	s15, s14, s15
 800087a:	ed97 7a02 	vldr	s14, [r7, #8]
 800087e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000882:	edc7 7a04 	vstr	s15, [r7, #16]

    return measurement;
 8000886:	693b      	ldr	r3, [r7, #16]
 8000888:	ee07 3a90 	vmov	s15, r3
}
 800088c:	eeb0 0a67 	vmov.f32	s0, s15
 8000890:	371c      	adds	r7, #28
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	3a534067 	.word	0x3a534067

080008a0 <handle_LED>:
 * This function handles the LED blinking modes based on the LED mode and current millisecond counter.
 *
 * @param led Pointer to the LED structure.
 * @param ms_counter Current millisecond counter.
 */
void handle_LED(LED *led, uint32_t ms_counter) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	6039      	str	r1, [r7, #0]
    switch (led->mode) {
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	799b      	ldrb	r3, [r3, #6]
 80008ae:	2b03      	cmp	r3, #3
 80008b0:	d858      	bhi.n	8000964 <handle_LED+0xc4>
 80008b2:	a201      	add	r2, pc, #4	@ (adr r2, 80008b8 <handle_LED+0x18>)
 80008b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b8:	080008c9 	.word	0x080008c9
 80008bc:	08000903 	.word	0x08000903
 80008c0:	08000941 	.word	0x08000941
 80008c4:	08000953 	.word	0x08000953
        case LED_MODE_BLINK_FAST:
            if (ms_counter % 200 < 100) {
 80008c8:	683a      	ldr	r2, [r7, #0]
 80008ca:	4b29      	ldr	r3, [pc, #164]	@ (8000970 <handle_LED+0xd0>)
 80008cc:	fba3 1302 	umull	r1, r3, r3, r2
 80008d0:	099b      	lsrs	r3, r3, #6
 80008d2:	21c8      	movs	r1, #200	@ 0xc8
 80008d4:	fb01 f303 	mul.w	r3, r1, r3
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	2b63      	cmp	r3, #99	@ 0x63
 80008dc:	d808      	bhi.n	80008f0 <handle_LED+0x50>
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_SET);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6818      	ldr	r0, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	889b      	ldrh	r3, [r3, #4]
 80008e6:	2201      	movs	r2, #1
 80008e8:	4619      	mov	r1, r3
 80008ea:	f003 fbaf 	bl	800404c <HAL_GPIO_WritePin>
            } else {
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
            }
            break;
 80008ee:	e03a      	b.n	8000966 <handle_LED+0xc6>
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	6818      	ldr	r0, [r3, #0]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	889b      	ldrh	r3, [r3, #4]
 80008f8:	2200      	movs	r2, #0
 80008fa:	4619      	mov	r1, r3
 80008fc:	f003 fba6 	bl	800404c <HAL_GPIO_WritePin>
            break;
 8000900:	e031      	b.n	8000966 <handle_LED+0xc6>
        case LED_MODE_BLINK_SLOW:
            if (ms_counter % 1000 < 500) {
 8000902:	683a      	ldr	r2, [r7, #0]
 8000904:	4b1b      	ldr	r3, [pc, #108]	@ (8000974 <handle_LED+0xd4>)
 8000906:	fba3 1302 	umull	r1, r3, r3, r2
 800090a:	099b      	lsrs	r3, r3, #6
 800090c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000910:	fb01 f303 	mul.w	r3, r1, r3
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800091a:	d208      	bcs.n	800092e <handle_LED+0x8e>
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_SET);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6818      	ldr	r0, [r3, #0]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	889b      	ldrh	r3, [r3, #4]
 8000924:	2201      	movs	r2, #1
 8000926:	4619      	mov	r1, r3
 8000928:	f003 fb90 	bl	800404c <HAL_GPIO_WritePin>
            } else {
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
            }
            break;
 800092c:	e01b      	b.n	8000966 <handle_LED+0xc6>
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6818      	ldr	r0, [r3, #0]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	889b      	ldrh	r3, [r3, #4]
 8000936:	2200      	movs	r2, #0
 8000938:	4619      	mov	r1, r3
 800093a:	f003 fb87 	bl	800404c <HAL_GPIO_WritePin>
            break;
 800093e:	e012      	b.n	8000966 <handle_LED+0xc6>
        case LED_MODE_ON:
            HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_SET);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	6818      	ldr	r0, [r3, #0]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	889b      	ldrh	r3, [r3, #4]
 8000948:	2201      	movs	r2, #1
 800094a:	4619      	mov	r1, r3
 800094c:	f003 fb7e 	bl	800404c <HAL_GPIO_WritePin>
            break;
 8000950:	e009      	b.n	8000966 <handle_LED+0xc6>
        case LED_MODE_OFF:
            HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6818      	ldr	r0, [r3, #0]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	889b      	ldrh	r3, [r3, #4]
 800095a:	2200      	movs	r2, #0
 800095c:	4619      	mov	r1, r3
 800095e:	f003 fb75 	bl	800404c <HAL_GPIO_WritePin>
            break;
 8000962:	e000      	b.n	8000966 <handle_LED+0xc6>
        default:
            // Invalid LED mode
            break;
 8000964:	bf00      	nop
    }
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	51eb851f 	.word	0x51eb851f
 8000974:	10624dd3 	.word	0x10624dd3

08000978 <handle_direction>:
 * and vice versa.
 *
 * @param invLeft Pointer to the left inverter structure.
 * @param invRight Pointer to the right inverter structure.
 */
void handle_direction(volatile int8_t *dirLeft, volatile int8_t *dirRight){
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
	// Read the state of the DIR switch
    GPIO_PinState dirState = HAL_GPIO_ReadPin(DIR_GPIO_Port, DIR_Pin);
 8000982:	2108      	movs	r1, #8
 8000984:	480c      	ldr	r0, [pc, #48]	@ (80009b8 <handle_direction+0x40>)
 8000986:	f003 fb49 	bl	800401c <HAL_GPIO_ReadPin>
 800098a:	4603      	mov	r3, r0
 800098c:	73fb      	strb	r3, [r7, #15]

    // Update the directions of the inverters based on the DIR switch state
    if (dirState == GPIO_PIN_SET) {
 800098e:	7bfb      	ldrb	r3, [r7, #15]
 8000990:	2b01      	cmp	r3, #1
 8000992:	d106      	bne.n	80009a2 <handle_direction+0x2a>
    	*dirLeft = 1;  // CW
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2201      	movs	r2, #1
 8000998:	701a      	strb	r2, [r3, #0]
    	*dirRight = -1;  // CCW
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	22ff      	movs	r2, #255	@ 0xff
 800099e:	701a      	strb	r2, [r3, #0]
    } else {
    	*dirLeft = -1;  // CCW
    	*dirRight = 1;  // CW
    }
}
 80009a0:	e005      	b.n	80009ae <handle_direction+0x36>
    	*dirLeft = -1;  // CCW
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	22ff      	movs	r2, #255	@ 0xff
 80009a6:	701a      	strb	r2, [r3, #0]
    	*dirRight = 1;  // CW
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	2201      	movs	r2, #1
 80009ac:	701a      	strb	r2, [r3, #0]
}
 80009ae:	bf00      	nop
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40020c00 	.word	0x40020c00

080009bc <enable_PWM>:
 *
 * This function enables PWM output for the specified timer.
 *
 * @param htim Pointer to the TIM_HandleTypeDef structure.
 */
void enable_PWM(TIM_HandleTypeDef *htim) {
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]

//	Reset the counter
//	htim->Instance->CNT=0;
	htim->Instance->CCMR1 = 0x6868; // Set Channel 1 and Channel 2 Output Compare mode to PWM Mode
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f646 0268 	movw	r2, #26728	@ 0x6868
 80009cc:	619a      	str	r2, [r3, #24]

//	htim1.Instance->CCER = 0x888;
	htim->Instance->CCER = 0x10555;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a0c      	ldr	r2, [pc, #48]	@ (8000a04 <enable_PWM+0x48>)
 80009d4:	621a      	str	r2, [r3, #32]

//	Enable Main Output
	htim->Instance->BDTR |=(1<<15);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80009e4:	645a      	str	r2, [r3, #68]	@ 0x44

//	Enable Counter
	htim->Instance->CR1 |=1;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f042 0201 	orr.w	r2, r2, #1
 80009f4:	601a      	str	r2, [r3, #0]

}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	00010555 	.word	0x00010555

08000a08 <disable_PWM>:
 *
 * This function disables PWM output for the specified timer.
 *
 * @param htim Pointer to the TIM_HandleTypeDef structure.
 */
void disable_PWM(TIM_HandleTypeDef *htim) {
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]

	//Disable outputs and select the polarity of each output
	htim->Instance->CNT=0;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2200      	movs	r2, #0
 8000a16:	625a      	str	r2, [r3, #36]	@ 0x24


	htim->Instance->CCER = 0xCCC;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f640 42cc 	movw	r2, #3276	@ 0xccc
 8000a20:	621a      	str	r2, [r3, #32]
	//	htim1.Instance->CCER |= 0x555;

		//Disable Main Output
	htim->Instance->BDTR &= 0xFFFF7FFF;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000a30:	645a      	str	r2, [r3, #68]	@ 0x44
	//	htim1.Instance->BDTR &=(0<<15);
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <update_PWM>:
 * This function sets the duty cycles for the PWM channels.
 *
 * @param htim Pointer to the TIM_HandleTypeDef structure.
 * @param duties Duties structure containing duty cycle values.
 */
void update_PWM(TIM_HandleTypeDef *htim, Duties duties) {
 8000a3e:	b480      	push	{r7}
 8000a40:	b085      	sub	sp, #20
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	60f8      	str	r0, [r7, #12]
 8000a46:	eef0 6a40 	vmov.f32	s13, s0
 8000a4a:	eeb0 7a60 	vmov.f32	s14, s1
 8000a4e:	eef0 7a41 	vmov.f32	s15, s2
 8000a52:	edc7 6a00 	vstr	s13, [r7]
 8000a56:	ed87 7a01 	vstr	s14, [r7, #4]
 8000a5a:	edc7 7a02 	vstr	s15, [r7, #8]


	htim->Instance->CCR1 = ((int32_t)(htim->Instance->ARR) * (1.0F-duties.Da));
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a64:	ee07 3a90 	vmov	s15, r3
 8000a68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a6c:	edd7 7a00 	vldr	s15, [r7]
 8000a70:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000a74:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000a78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a84:	ee17 2a90 	vmov	r2, s15
 8000a88:	635a      	str	r2, [r3, #52]	@ 0x34
	htim->Instance->CCR2 = ((int32_t)(htim->Instance->ARR) * (1.0F-duties.Db));
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a90:	ee07 3a90 	vmov	s15, r3
 8000a94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a98:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a9c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000aa0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000aa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ab0:	ee17 2a90 	vmov	r2, s15
 8000ab4:	639a      	str	r2, [r3, #56]	@ 0x38
	htim->Instance->CCR3 = ((int32_t)(htim->Instance->ARR) * (1.0F-duties.Dc));
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000abc:	ee07 3a90 	vmov	s15, r3
 8000ac0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ac4:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ac8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000acc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000ad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000adc:	ee17 2a90 	vmov	r2, s15
 8000ae0:	63da      	str	r2, [r3, #60]	@ 0x3c

}
 8000ae2:	bf00      	nop
 8000ae4:	3714      	adds	r7, #20
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
	...

08000af0 <tasks_1ms>:
 *
 * This function is called by the TIM6 IRQ handler every millisecond.
 * It increments the millisecond counter and calls the LED handler
 * for left, right, and error LEDs.
 */
void tasks_1ms(void) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
    // Increment millisecond counter
    ms_counter++;
 8000af4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b30 <tasks_1ms+0x40>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	3301      	adds	r3, #1
 8000afa:	4a0d      	ldr	r2, [pc, #52]	@ (8000b30 <tasks_1ms+0x40>)
 8000afc:	6013      	str	r3, [r2, #0]

    // Call LED handler for left, right, and error LEDs
    handle_LED(&ledLeft, ms_counter);
 8000afe:	4b0c      	ldr	r3, [pc, #48]	@ (8000b30 <tasks_1ms+0x40>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4619      	mov	r1, r3
 8000b04:	480b      	ldr	r0, [pc, #44]	@ (8000b34 <tasks_1ms+0x44>)
 8000b06:	f7ff fecb 	bl	80008a0 <handle_LED>
    handle_LED(&ledRight, ms_counter);
 8000b0a:	4b09      	ldr	r3, [pc, #36]	@ (8000b30 <tasks_1ms+0x40>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4809      	ldr	r0, [pc, #36]	@ (8000b38 <tasks_1ms+0x48>)
 8000b12:	f7ff fec5 	bl	80008a0 <handle_LED>
    handle_LED(&ledError, ms_counter);
 8000b16:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <tasks_1ms+0x40>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4807      	ldr	r0, [pc, #28]	@ (8000b3c <tasks_1ms+0x4c>)
 8000b1e:	f7ff febf 	bl	80008a0 <handle_LED>

    // Read direction switch
    handle_direction(&invLeft.direction, &invRight.direction);
 8000b22:	4907      	ldr	r1, [pc, #28]	@ (8000b40 <tasks_1ms+0x50>)
 8000b24:	4807      	ldr	r0, [pc, #28]	@ (8000b44 <tasks_1ms+0x54>)
 8000b26:	f7ff ff27 	bl	8000978 <handle_direction>
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000180 	.word	0x20000180
 8000b34:	20000000 	.word	0x20000000
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	20000010 	.word	0x20000010
 8000b40:	2000015c 	.word	0x2000015c
 8000b44:	20000100 	.word	0x20000100

08000b48 <tasks_20us_LEFT>:

angle_struct angle = {
    .freq = 0.2F,
    .Ts = TS,
};
void tasks_20us_LEFT(void){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0


  angle_calc(&angle);
 8000b4c:	481d      	ldr	r0, [pc, #116]	@ (8000bc4 <tasks_20us_LEFT+0x7c>)
 8000b4e:	f007 f8db 	bl	8007d08 <angle_calc>

  invLeft.encoder.theta_e = angle.angle*PI;
 8000b52:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc4 <tasks_20us_LEFT+0x7c>)
 8000b54:	edd3 7a02 	vldr	s15, [r3, #8]
 8000b58:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8000bc8 <tasks_20us_LEFT+0x80>
 8000b5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b60:	4b1a      	ldr	r3, [pc, #104]	@ (8000bcc <tasks_20us_LEFT+0x84>)
 8000b62:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

  get_ADC(ADC_raw_L, &invLeft.analog);
 8000b66:	491a      	ldr	r1, [pc, #104]	@ (8000bd0 <tasks_20us_LEFT+0x88>)
 8000b68:	481a      	ldr	r0, [pc, #104]	@ (8000bd4 <tasks_20us_LEFT+0x8c>)
 8000b6a:	f7ff fe1f 	bl	80007ac <get_ADC>

  calc_duties(vd_L, vq_L, vDC_L, invLeft.encoder.theta_e, &invLeft.duties);
 8000b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd8 <tasks_20us_LEFT+0x90>)
 8000b70:	edd3 7a00 	vldr	s15, [r3]
 8000b74:	4b19      	ldr	r3, [pc, #100]	@ (8000bdc <tasks_20us_LEFT+0x94>)
 8000b76:	ed93 7a00 	vldr	s14, [r3]
 8000b7a:	4b19      	ldr	r3, [pc, #100]	@ (8000be0 <tasks_20us_LEFT+0x98>)
 8000b7c:	edd3 6a00 	vldr	s13, [r3]
 8000b80:	4b12      	ldr	r3, [pc, #72]	@ (8000bcc <tasks_20us_LEFT+0x84>)
 8000b82:	ed93 6a0d 	vldr	s12, [r3, #52]	@ 0x34
 8000b86:	4817      	ldr	r0, [pc, #92]	@ (8000be4 <tasks_20us_LEFT+0x9c>)
 8000b88:	eef0 1a46 	vmov.f32	s3, s12
 8000b8c:	eeb0 1a66 	vmov.f32	s2, s13
 8000b90:	eef0 0a47 	vmov.f32	s1, s14
 8000b94:	eeb0 0a67 	vmov.f32	s0, s15
 8000b98:	f7ff fcc6 	bl	8000528 <calc_duties>

  update_PWM(invLeft.htim, invLeft.duties);
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <tasks_20us_LEFT+0x84>)
 8000b9e:	68da      	ldr	r2, [r3, #12]
 8000ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bcc <tasks_20us_LEFT+0x84>)
 8000ba2:	edd3 6a13 	vldr	s13, [r3, #76]	@ 0x4c
 8000ba6:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8000baa:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8000bae:	eeb0 0a66 	vmov.f32	s0, s13
 8000bb2:	eef0 0a47 	vmov.f32	s1, s14
 8000bb6:	eeb0 1a67 	vmov.f32	s2, s15
 8000bba:	4610      	mov	r0, r2
 8000bbc:	f7ff ff3f 	bl	8000a3e <update_PWM>

}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000020 	.word	0x20000020
 8000bc8:	40490fdb 	.word	0x40490fdb
 8000bcc:	200000a8 	.word	0x200000a8
 8000bd0:	200000c0 	.word	0x200000c0
 8000bd4:	20000160 	.word	0x20000160
 8000bd8:	20000184 	.word	0x20000184
 8000bdc:	20000018 	.word	0x20000018
 8000be0:	2000001c 	.word	0x2000001c
 8000be4:	200000f4 	.word	0x200000f4

08000be8 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bee:	463b      	mov	r3, r7
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000bfa:	4b37      	ldr	r3, [pc, #220]	@ (8000cd8 <MX_ADC1_Init+0xf0>)
 8000bfc:	4a37      	ldr	r2, [pc, #220]	@ (8000cdc <MX_ADC1_Init+0xf4>)
 8000bfe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c00:	4b35      	ldr	r3, [pc, #212]	@ (8000cd8 <MX_ADC1_Init+0xf0>)
 8000c02:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000c06:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c08:	4b33      	ldr	r3, [pc, #204]	@ (8000cd8 <MX_ADC1_Init+0xf0>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c0e:	4b32      	ldr	r3, [pc, #200]	@ (8000cd8 <MX_ADC1_Init+0xf0>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c14:	4b30      	ldr	r3, [pc, #192]	@ (8000cd8 <MX_ADC1_Init+0xf0>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c1a:	4b2f      	ldr	r3, [pc, #188]	@ (8000cd8 <MX_ADC1_Init+0xf0>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000c22:	4b2d      	ldr	r3, [pc, #180]	@ (8000cd8 <MX_ADC1_Init+0xf0>)
 8000c24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000c28:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000c2a:	4b2b      	ldr	r3, [pc, #172]	@ (8000cd8 <MX_ADC1_Init+0xf0>)
 8000c2c:	f04f 6210 	mov.w	r2, #150994944	@ 0x9000000
 8000c30:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c32:	4b29      	ldr	r3, [pc, #164]	@ (8000cd8 <MX_ADC1_Init+0xf0>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000c38:	4b27      	ldr	r3, [pc, #156]	@ (8000cd8 <MX_ADC1_Init+0xf0>)
 8000c3a:	2204      	movs	r2, #4
 8000c3c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000c3e:	4b26      	ldr	r3, [pc, #152]	@ (8000cd8 <MX_ADC1_Init+0xf0>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000c46:	4b24      	ldr	r3, [pc, #144]	@ (8000cd8 <MX_ADC1_Init+0xf0>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c4c:	4822      	ldr	r0, [pc, #136]	@ (8000cd8 <MX_ADC1_Init+0xf0>)
 8000c4e:	f001 fb6f 	bl	8002330 <HAL_ADC_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000c58:	f000 fe1a 	bl	8001890 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c60:	2301      	movs	r3, #1
 8000c62:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c68:	463b      	mov	r3, r7
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	481a      	ldr	r0, [pc, #104]	@ (8000cd8 <MX_ADC1_Init+0xf0>)
 8000c6e:	f001 fcbb 	bl	80025e8 <HAL_ADC_ConfigChannel>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000c78:	f000 fe0a 	bl	8001890 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c80:	2302      	movs	r3, #2
 8000c82:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c84:	463b      	mov	r3, r7
 8000c86:	4619      	mov	r1, r3
 8000c88:	4813      	ldr	r0, [pc, #76]	@ (8000cd8 <MX_ADC1_Init+0xf0>)
 8000c8a:	f001 fcad 	bl	80025e8 <HAL_ADC_ConfigChannel>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000c94:	f000 fdfc 	bl	8001890 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ca0:	463b      	mov	r3, r7
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	480c      	ldr	r0, [pc, #48]	@ (8000cd8 <MX_ADC1_Init+0xf0>)
 8000ca6:	f001 fc9f 	bl	80025e8 <HAL_ADC_ConfigChannel>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000cb0:	f000 fdee 	bl	8001890 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000cb8:	2304      	movs	r3, #4
 8000cba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cbc:	463b      	mov	r3, r7
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4805      	ldr	r0, [pc, #20]	@ (8000cd8 <MX_ADC1_Init+0xf0>)
 8000cc2:	f001 fc91 	bl	80025e8 <HAL_ADC_ConfigChannel>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8000ccc:	f000 fde0 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cd0:	bf00      	nop
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000188 	.word	0x20000188
 8000cdc:	40012000 	.word	0x40012000

08000ce0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ce6:	463b      	mov	r3, r7
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000cf2:	4b37      	ldr	r3, [pc, #220]	@ (8000dd0 <MX_ADC2_Init+0xf0>)
 8000cf4:	4a37      	ldr	r2, [pc, #220]	@ (8000dd4 <MX_ADC2_Init+0xf4>)
 8000cf6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cf8:	4b35      	ldr	r3, [pc, #212]	@ (8000dd0 <MX_ADC2_Init+0xf0>)
 8000cfa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000cfe:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000d00:	4b33      	ldr	r3, [pc, #204]	@ (8000dd0 <MX_ADC2_Init+0xf0>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d06:	4b32      	ldr	r3, [pc, #200]	@ (8000dd0 <MX_ADC2_Init+0xf0>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d0c:	4b30      	ldr	r3, [pc, #192]	@ (8000dd0 <MX_ADC2_Init+0xf0>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d12:	4b2f      	ldr	r3, [pc, #188]	@ (8000dd0 <MX_ADC2_Init+0xf0>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000dd0 <MX_ADC2_Init+0xf0>)
 8000d1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000d20:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000d22:	4b2b      	ldr	r3, [pc, #172]	@ (8000dd0 <MX_ADC2_Init+0xf0>)
 8000d24:	f04f 6210 	mov.w	r2, #150994944	@ 0x9000000
 8000d28:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d2a:	4b29      	ldr	r3, [pc, #164]	@ (8000dd0 <MX_ADC2_Init+0xf0>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8000d30:	4b27      	ldr	r3, [pc, #156]	@ (8000dd0 <MX_ADC2_Init+0xf0>)
 8000d32:	2204      	movs	r2, #4
 8000d34:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000d36:	4b26      	ldr	r3, [pc, #152]	@ (8000dd0 <MX_ADC2_Init+0xf0>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000d3e:	4b24      	ldr	r3, [pc, #144]	@ (8000dd0 <MX_ADC2_Init+0xf0>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d44:	4822      	ldr	r0, [pc, #136]	@ (8000dd0 <MX_ADC2_Init+0xf0>)
 8000d46:	f001 faf3 	bl	8002330 <HAL_ADC_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8000d50:	f000 fd9e 	bl	8001890 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000d54:	2306      	movs	r3, #6
 8000d56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d60:	463b      	mov	r3, r7
 8000d62:	4619      	mov	r1, r3
 8000d64:	481a      	ldr	r0, [pc, #104]	@ (8000dd0 <MX_ADC2_Init+0xf0>)
 8000d66:	f001 fc3f 	bl	80025e8 <HAL_ADC_ConfigChannel>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8000d70:	f000 fd8e 	bl	8001890 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000d74:	2307      	movs	r3, #7
 8000d76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d7c:	463b      	mov	r3, r7
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4813      	ldr	r0, [pc, #76]	@ (8000dd0 <MX_ADC2_Init+0xf0>)
 8000d82:	f001 fc31 	bl	80025e8 <HAL_ADC_ConfigChannel>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8000d8c:	f000 fd80 	bl	8001890 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000d90:	2308      	movs	r3, #8
 8000d92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000d94:	2303      	movs	r3, #3
 8000d96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d98:	463b      	mov	r3, r7
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	480c      	ldr	r0, [pc, #48]	@ (8000dd0 <MX_ADC2_Init+0xf0>)
 8000d9e:	f001 fc23 	bl	80025e8 <HAL_ADC_ConfigChannel>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_ADC2_Init+0xcc>
  {
    Error_Handler();
 8000da8:	f000 fd72 	bl	8001890 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000dac:	2309      	movs	r3, #9
 8000dae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000db0:	2304      	movs	r3, #4
 8000db2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000db4:	463b      	mov	r3, r7
 8000db6:	4619      	mov	r1, r3
 8000db8:	4805      	ldr	r0, [pc, #20]	@ (8000dd0 <MX_ADC2_Init+0xf0>)
 8000dba:	f001 fc15 	bl	80025e8 <HAL_ADC_ConfigChannel>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_ADC2_Init+0xe8>
  {
    Error_Handler();
 8000dc4:	f000 fd64 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000dc8:	bf00      	nop
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	200001d0 	.word	0x200001d0
 8000dd4:	40012100 	.word	0x40012100

08000dd8 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dde:	463b      	mov	r3, r7
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000dea:	4b21      	ldr	r3, [pc, #132]	@ (8000e70 <MX_ADC3_Init+0x98>)
 8000dec:	4a21      	ldr	r2, [pc, #132]	@ (8000e74 <MX_ADC3_Init+0x9c>)
 8000dee:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000df0:	4b1f      	ldr	r3, [pc, #124]	@ (8000e70 <MX_ADC3_Init+0x98>)
 8000df2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000df6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000df8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e70 <MX_ADC3_Init+0x98>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dfe:	4b1c      	ldr	r3, [pc, #112]	@ (8000e70 <MX_ADC3_Init+0x98>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000e04:	4b1a      	ldr	r3, [pc, #104]	@ (8000e70 <MX_ADC3_Init+0x98>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e0a:	4b19      	ldr	r3, [pc, #100]	@ (8000e70 <MX_ADC3_Init+0x98>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e12:	4b17      	ldr	r3, [pc, #92]	@ (8000e70 <MX_ADC3_Init+0x98>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e18:	4b15      	ldr	r3, [pc, #84]	@ (8000e70 <MX_ADC3_Init+0x98>)
 8000e1a:	4a17      	ldr	r2, [pc, #92]	@ (8000e78 <MX_ADC3_Init+0xa0>)
 8000e1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e1e:	4b14      	ldr	r3, [pc, #80]	@ (8000e70 <MX_ADC3_Init+0x98>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000e24:	4b12      	ldr	r3, [pc, #72]	@ (8000e70 <MX_ADC3_Init+0x98>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000e2a:	4b11      	ldr	r3, [pc, #68]	@ (8000e70 <MX_ADC3_Init+0x98>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e32:	4b0f      	ldr	r3, [pc, #60]	@ (8000e70 <MX_ADC3_Init+0x98>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e38:	480d      	ldr	r0, [pc, #52]	@ (8000e70 <MX_ADC3_Init+0x98>)
 8000e3a:	f001 fa79 	bl	8002330 <HAL_ADC_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000e44:	f000 fd24 	bl	8001890 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e48:	230a      	movs	r3, #10
 8000e4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e50:	2300      	movs	r3, #0
 8000e52:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e54:	463b      	mov	r3, r7
 8000e56:	4619      	mov	r1, r3
 8000e58:	4805      	ldr	r0, [pc, #20]	@ (8000e70 <MX_ADC3_Init+0x98>)
 8000e5a:	f001 fbc5 	bl	80025e8 <HAL_ADC_ConfigChannel>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000e64:	f000 fd14 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000e68:	bf00      	nop
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000218 	.word	0x20000218
 8000e74:	40012200 	.word	0x40012200
 8000e78:	0f000001 	.word	0x0f000001

08000e7c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08e      	sub	sp, #56	@ 0x38
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a93      	ldr	r2, [pc, #588]	@ (80010e8 <HAL_ADC_MspInit+0x26c>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d153      	bne.n	8000f46 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e9e:	4b93      	ldr	r3, [pc, #588]	@ (80010ec <HAL_ADC_MspInit+0x270>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ea2:	4a92      	ldr	r2, [pc, #584]	@ (80010ec <HAL_ADC_MspInit+0x270>)
 8000ea4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ea8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eaa:	4b90      	ldr	r3, [pc, #576]	@ (80010ec <HAL_ADC_MspInit+0x270>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000eb2:	623b      	str	r3, [r7, #32]
 8000eb4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	4b8d      	ldr	r3, [pc, #564]	@ (80010ec <HAL_ADC_MspInit+0x270>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	4a8c      	ldr	r2, [pc, #560]	@ (80010ec <HAL_ADC_MspInit+0x270>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec2:	4b8a      	ldr	r3, [pc, #552]	@ (80010ec <HAL_ADC_MspInit+0x270>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	61fb      	str	r3, [r7, #28]
 8000ecc:	69fb      	ldr	r3, [r7, #28]
    PA0/WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ia_L_Pin|ib_L_Pin|ic_L_Pin|VDC_L_Pin;
 8000ece:	230f      	movs	r3, #15
 8000ed0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4883      	ldr	r0, [pc, #524]	@ (80010f0 <HAL_ADC_MspInit+0x274>)
 8000ee2:	f002 feef 	bl	8003cc4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000ee6:	4b83      	ldr	r3, [pc, #524]	@ (80010f4 <HAL_ADC_MspInit+0x278>)
 8000ee8:	4a83      	ldr	r2, [pc, #524]	@ (80010f8 <HAL_ADC_MspInit+0x27c>)
 8000eea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000eec:	4b81      	ldr	r3, [pc, #516]	@ (80010f4 <HAL_ADC_MspInit+0x278>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ef2:	4b80      	ldr	r3, [pc, #512]	@ (80010f4 <HAL_ADC_MspInit+0x278>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ef8:	4b7e      	ldr	r3, [pc, #504]	@ (80010f4 <HAL_ADC_MspInit+0x278>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000efe:	4b7d      	ldr	r3, [pc, #500]	@ (80010f4 <HAL_ADC_MspInit+0x278>)
 8000f00:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f04:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f06:	4b7b      	ldr	r3, [pc, #492]	@ (80010f4 <HAL_ADC_MspInit+0x278>)
 8000f08:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f0c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f0e:	4b79      	ldr	r3, [pc, #484]	@ (80010f4 <HAL_ADC_MspInit+0x278>)
 8000f10:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f14:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000f16:	4b77      	ldr	r3, [pc, #476]	@ (80010f4 <HAL_ADC_MspInit+0x278>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f1c:	4b75      	ldr	r3, [pc, #468]	@ (80010f4 <HAL_ADC_MspInit+0x278>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f22:	4b74      	ldr	r3, [pc, #464]	@ (80010f4 <HAL_ADC_MspInit+0x278>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f28:	4872      	ldr	r0, [pc, #456]	@ (80010f4 <HAL_ADC_MspInit+0x278>)
 8000f2a:	f002 fb53 	bl	80035d4 <HAL_DMA_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8000f34:	f000 fcac 	bl	8001890 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a6e      	ldr	r2, [pc, #440]	@ (80010f4 <HAL_ADC_MspInit+0x278>)
 8000f3c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f3e:	4a6d      	ldr	r2, [pc, #436]	@ (80010f4 <HAL_ADC_MspInit+0x278>)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000f44:	e0cc      	b.n	80010e0 <HAL_ADC_MspInit+0x264>
  else if(adcHandle->Instance==ADC2)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a6c      	ldr	r2, [pc, #432]	@ (80010fc <HAL_ADC_MspInit+0x280>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d16e      	bne.n	800102e <HAL_ADC_MspInit+0x1b2>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000f50:	4b66      	ldr	r3, [pc, #408]	@ (80010ec <HAL_ADC_MspInit+0x270>)
 8000f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f54:	4a65      	ldr	r2, [pc, #404]	@ (80010ec <HAL_ADC_MspInit+0x270>)
 8000f56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f5a:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f5c:	4b63      	ldr	r3, [pc, #396]	@ (80010ec <HAL_ADC_MspInit+0x270>)
 8000f5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f64:	61bb      	str	r3, [r7, #24]
 8000f66:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f68:	4b60      	ldr	r3, [pc, #384]	@ (80010ec <HAL_ADC_MspInit+0x270>)
 8000f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6c:	4a5f      	ldr	r2, [pc, #380]	@ (80010ec <HAL_ADC_MspInit+0x270>)
 8000f6e:	f043 0301 	orr.w	r3, r3, #1
 8000f72:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f74:	4b5d      	ldr	r3, [pc, #372]	@ (80010ec <HAL_ADC_MspInit+0x270>)
 8000f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	617b      	str	r3, [r7, #20]
 8000f7e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f80:	4b5a      	ldr	r3, [pc, #360]	@ (80010ec <HAL_ADC_MspInit+0x270>)
 8000f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f84:	4a59      	ldr	r2, [pc, #356]	@ (80010ec <HAL_ADC_MspInit+0x270>)
 8000f86:	f043 0302 	orr.w	r3, r3, #2
 8000f8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8c:	4b57      	ldr	r3, [pc, #348]	@ (80010ec <HAL_ADC_MspInit+0x270>)
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f90:	f003 0302 	and.w	r3, r3, #2
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ia_R_Pin|ib_R_Pin;
 8000f98:	23c0      	movs	r3, #192	@ 0xc0
 8000f9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4851      	ldr	r0, [pc, #324]	@ (80010f0 <HAL_ADC_MspInit+0x274>)
 8000fac:	f002 fe8a 	bl	8003cc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ic_R_Pin|VDC_R_Pin;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	484f      	ldr	r0, [pc, #316]	@ (8001100 <HAL_ADC_MspInit+0x284>)
 8000fc4:	f002 fe7e 	bl	8003cc4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8000fc8:	4b4e      	ldr	r3, [pc, #312]	@ (8001104 <HAL_ADC_MspInit+0x288>)
 8000fca:	4a4f      	ldr	r2, [pc, #316]	@ (8001108 <HAL_ADC_MspInit+0x28c>)
 8000fcc:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8000fce:	4b4d      	ldr	r3, [pc, #308]	@ (8001104 <HAL_ADC_MspInit+0x288>)
 8000fd0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000fd4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fd6:	4b4b      	ldr	r3, [pc, #300]	@ (8001104 <HAL_ADC_MspInit+0x288>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fdc:	4b49      	ldr	r3, [pc, #292]	@ (8001104 <HAL_ADC_MspInit+0x288>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000fe2:	4b48      	ldr	r3, [pc, #288]	@ (8001104 <HAL_ADC_MspInit+0x288>)
 8000fe4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fe8:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000fea:	4b46      	ldr	r3, [pc, #280]	@ (8001104 <HAL_ADC_MspInit+0x288>)
 8000fec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ff0:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ff2:	4b44      	ldr	r3, [pc, #272]	@ (8001104 <HAL_ADC_MspInit+0x288>)
 8000ff4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ff8:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000ffa:	4b42      	ldr	r3, [pc, #264]	@ (8001104 <HAL_ADC_MspInit+0x288>)
 8000ffc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001000:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001002:	4b40      	ldr	r3, [pc, #256]	@ (8001104 <HAL_ADC_MspInit+0x288>)
 8001004:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001008:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800100a:	4b3e      	ldr	r3, [pc, #248]	@ (8001104 <HAL_ADC_MspInit+0x288>)
 800100c:	2200      	movs	r2, #0
 800100e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001010:	483c      	ldr	r0, [pc, #240]	@ (8001104 <HAL_ADC_MspInit+0x288>)
 8001012:	f002 fadf 	bl	80035d4 <HAL_DMA_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <HAL_ADC_MspInit+0x1a4>
      Error_Handler();
 800101c:	f000 fc38 	bl	8001890 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a38      	ldr	r2, [pc, #224]	@ (8001104 <HAL_ADC_MspInit+0x288>)
 8001024:	639a      	str	r2, [r3, #56]	@ 0x38
 8001026:	4a37      	ldr	r2, [pc, #220]	@ (8001104 <HAL_ADC_MspInit+0x288>)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800102c:	e058      	b.n	80010e0 <HAL_ADC_MspInit+0x264>
  else if(adcHandle->Instance==ADC3)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a36      	ldr	r2, [pc, #216]	@ (800110c <HAL_ADC_MspInit+0x290>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d153      	bne.n	80010e0 <HAL_ADC_MspInit+0x264>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001038:	4b2c      	ldr	r3, [pc, #176]	@ (80010ec <HAL_ADC_MspInit+0x270>)
 800103a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800103c:	4a2b      	ldr	r2, [pc, #172]	@ (80010ec <HAL_ADC_MspInit+0x270>)
 800103e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001042:	6453      	str	r3, [r2, #68]	@ 0x44
 8001044:	4b29      	ldr	r3, [pc, #164]	@ (80010ec <HAL_ADC_MspInit+0x270>)
 8001046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001048:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001050:	4b26      	ldr	r3, [pc, #152]	@ (80010ec <HAL_ADC_MspInit+0x270>)
 8001052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001054:	4a25      	ldr	r2, [pc, #148]	@ (80010ec <HAL_ADC_MspInit+0x270>)
 8001056:	f043 0304 	orr.w	r3, r3, #4
 800105a:	6313      	str	r3, [r2, #48]	@ 0x30
 800105c:	4b23      	ldr	r3, [pc, #140]	@ (80010ec <HAL_ADC_MspInit+0x270>)
 800105e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001060:	f003 0304 	and.w	r3, r3, #4
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Tinv_L_Pin|Tinv_R_Pin|Tmot_L_Pin|Tmot_R_Pin;
 8001068:	230f      	movs	r3, #15
 800106a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800106c:	2303      	movs	r3, #3
 800106e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001074:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001078:	4619      	mov	r1, r3
 800107a:	4825      	ldr	r0, [pc, #148]	@ (8001110 <HAL_ADC_MspInit+0x294>)
 800107c:	f002 fe22 	bl	8003cc4 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8001080:	4b24      	ldr	r3, [pc, #144]	@ (8001114 <HAL_ADC_MspInit+0x298>)
 8001082:	4a25      	ldr	r2, [pc, #148]	@ (8001118 <HAL_ADC_MspInit+0x29c>)
 8001084:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8001086:	4b23      	ldr	r3, [pc, #140]	@ (8001114 <HAL_ADC_MspInit+0x298>)
 8001088:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800108c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800108e:	4b21      	ldr	r3, [pc, #132]	@ (8001114 <HAL_ADC_MspInit+0x298>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001094:	4b1f      	ldr	r3, [pc, #124]	@ (8001114 <HAL_ADC_MspInit+0x298>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800109a:	4b1e      	ldr	r3, [pc, #120]	@ (8001114 <HAL_ADC_MspInit+0x298>)
 800109c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010a0:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001114 <HAL_ADC_MspInit+0x298>)
 80010a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010a8:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001114 <HAL_ADC_MspInit+0x298>)
 80010ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010b0:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 80010b2:	4b18      	ldr	r3, [pc, #96]	@ (8001114 <HAL_ADC_MspInit+0x298>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80010b8:	4b16      	ldr	r3, [pc, #88]	@ (8001114 <HAL_ADC_MspInit+0x298>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010be:	4b15      	ldr	r3, [pc, #84]	@ (8001114 <HAL_ADC_MspInit+0x298>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80010c4:	4813      	ldr	r0, [pc, #76]	@ (8001114 <HAL_ADC_MspInit+0x298>)
 80010c6:	f002 fa85 	bl	80035d4 <HAL_DMA_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <HAL_ADC_MspInit+0x258>
      Error_Handler();
 80010d0:	f000 fbde 	bl	8001890 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001114 <HAL_ADC_MspInit+0x298>)
 80010d8:	639a      	str	r2, [r3, #56]	@ 0x38
 80010da:	4a0e      	ldr	r2, [pc, #56]	@ (8001114 <HAL_ADC_MspInit+0x298>)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80010e0:	bf00      	nop
 80010e2:	3738      	adds	r7, #56	@ 0x38
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40012000 	.word	0x40012000
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40020000 	.word	0x40020000
 80010f4:	20000260 	.word	0x20000260
 80010f8:	40026410 	.word	0x40026410
 80010fc:	40012100 	.word	0x40012100
 8001100:	40020400 	.word	0x40020400
 8001104:	200002c0 	.word	0x200002c0
 8001108:	40026440 	.word	0x40026440
 800110c:	40012200 	.word	0x40012200
 8001110:	40020800 	.word	0x40020800
 8001114:	20000320 	.word	0x20000320
 8001118:	40026428 	.word	0x40026428

0800111c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001120:	4b17      	ldr	r3, [pc, #92]	@ (8001180 <MX_CAN1_Init+0x64>)
 8001122:	4a18      	ldr	r2, [pc, #96]	@ (8001184 <MX_CAN1_Init+0x68>)
 8001124:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 27;
 8001126:	4b16      	ldr	r3, [pc, #88]	@ (8001180 <MX_CAN1_Init+0x64>)
 8001128:	221b      	movs	r2, #27
 800112a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800112c:	4b14      	ldr	r3, [pc, #80]	@ (8001180 <MX_CAN1_Init+0x64>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001132:	4b13      	ldr	r3, [pc, #76]	@ (8001180 <MX_CAN1_Init+0x64>)
 8001134:	2200      	movs	r2, #0
 8001136:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001138:	4b11      	ldr	r3, [pc, #68]	@ (8001180 <MX_CAN1_Init+0x64>)
 800113a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800113e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001140:	4b0f      	ldr	r3, [pc, #60]	@ (8001180 <MX_CAN1_Init+0x64>)
 8001142:	2200      	movs	r2, #0
 8001144:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001146:	4b0e      	ldr	r3, [pc, #56]	@ (8001180 <MX_CAN1_Init+0x64>)
 8001148:	2200      	movs	r2, #0
 800114a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800114c:	4b0c      	ldr	r3, [pc, #48]	@ (8001180 <MX_CAN1_Init+0x64>)
 800114e:	2200      	movs	r2, #0
 8001150:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001152:	4b0b      	ldr	r3, [pc, #44]	@ (8001180 <MX_CAN1_Init+0x64>)
 8001154:	2200      	movs	r2, #0
 8001156:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001158:	4b09      	ldr	r3, [pc, #36]	@ (8001180 <MX_CAN1_Init+0x64>)
 800115a:	2200      	movs	r2, #0
 800115c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800115e:	4b08      	ldr	r3, [pc, #32]	@ (8001180 <MX_CAN1_Init+0x64>)
 8001160:	2200      	movs	r2, #0
 8001162:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001164:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <MX_CAN1_Init+0x64>)
 8001166:	2200      	movs	r2, #0
 8001168:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800116a:	4805      	ldr	r0, [pc, #20]	@ (8001180 <MX_CAN1_Init+0x64>)
 800116c:	f001 fd0e 	bl	8002b8c <HAL_CAN_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001176:	f000 fb8b 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000380 	.word	0x20000380
 8001184:	40006400 	.word	0x40006400

08001188 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	@ 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001214 <HAL_CAN_MspInit+0x8c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d12f      	bne.n	800120a <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80011aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001218 <HAL_CAN_MspInit+0x90>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ae:	4a1a      	ldr	r2, [pc, #104]	@ (8001218 <HAL_CAN_MspInit+0x90>)
 80011b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011b6:	4b18      	ldr	r3, [pc, #96]	@ (8001218 <HAL_CAN_MspInit+0x90>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c2:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <HAL_CAN_MspInit+0x90>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	4a14      	ldr	r2, [pc, #80]	@ (8001218 <HAL_CAN_MspInit+0x90>)
 80011c8:	f043 0308 	orr.w	r3, r3, #8
 80011cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ce:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <HAL_CAN_MspInit+0x90>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	f003 0308 	and.w	r3, r3, #8
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011da:	2303      	movs	r3, #3
 80011dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011de:	2302      	movs	r3, #2
 80011e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e6:	2303      	movs	r3, #3
 80011e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80011ea:	2309      	movs	r3, #9
 80011ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	4809      	ldr	r0, [pc, #36]	@ (800121c <HAL_CAN_MspInit+0x94>)
 80011f6:	f002 fd65 	bl	8003cc4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	2014      	movs	r0, #20
 8001200:	f002 f8d3 	bl	80033aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001204:	2014      	movs	r0, #20
 8001206:	f002 f8ec 	bl	80033e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800120a:	bf00      	nop
 800120c:	3728      	adds	r7, #40	@ 0x28
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40006400 	.word	0x40006400
 8001218:	40023800 	.word	0x40023800
 800121c:	40020c00 	.word	0x40020c00

08001220 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001226:	463b      	mov	r3, r7
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800122e:	4b0f      	ldr	r3, [pc, #60]	@ (800126c <MX_DAC_Init+0x4c>)
 8001230:	4a0f      	ldr	r2, [pc, #60]	@ (8001270 <MX_DAC_Init+0x50>)
 8001232:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001234:	480d      	ldr	r0, [pc, #52]	@ (800126c <MX_DAC_Init+0x4c>)
 8001236:	f002 f8ee 	bl	8003416 <HAL_DAC_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001240:	f000 fb26 	bl	8001890 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001244:	2300      	movs	r3, #0
 8001246:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001248:	2300      	movs	r3, #0
 800124a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800124c:	463b      	mov	r3, r7
 800124e:	2200      	movs	r2, #0
 8001250:	4619      	mov	r1, r3
 8001252:	4806      	ldr	r0, [pc, #24]	@ (800126c <MX_DAC_Init+0x4c>)
 8001254:	f002 f965 	bl	8003522 <HAL_DAC_ConfigChannel>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800125e:	f000 fb17 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	200003a8 	.word	0x200003a8
 8001270:	40007400 	.word	0x40007400

08001274 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	@ 0x28
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a19      	ldr	r2, [pc, #100]	@ (80012f8 <HAL_DAC_MspInit+0x84>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d12b      	bne.n	80012ee <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001296:	4b19      	ldr	r3, [pc, #100]	@ (80012fc <HAL_DAC_MspInit+0x88>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129a:	4a18      	ldr	r2, [pc, #96]	@ (80012fc <HAL_DAC_MspInit+0x88>)
 800129c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80012a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012a2:	4b16      	ldr	r3, [pc, #88]	@ (80012fc <HAL_DAC_MspInit+0x88>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	4b13      	ldr	r3, [pc, #76]	@ (80012fc <HAL_DAC_MspInit+0x88>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	4a12      	ldr	r2, [pc, #72]	@ (80012fc <HAL_DAC_MspInit+0x88>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ba:	4b10      	ldr	r3, [pc, #64]	@ (80012fc <HAL_DAC_MspInit+0x88>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = DAC_Pin;
 80012c6:	2310      	movs	r3, #16
 80012c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ca:	2303      	movs	r3, #3
 80012cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC_GPIO_Port, &GPIO_InitStruct);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4619      	mov	r1, r3
 80012d8:	4809      	ldr	r0, [pc, #36]	@ (8001300 <HAL_DAC_MspInit+0x8c>)
 80012da:	f002 fcf3 	bl	8003cc4 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80012de:	2200      	movs	r2, #0
 80012e0:	2100      	movs	r1, #0
 80012e2:	2036      	movs	r0, #54	@ 0x36
 80012e4:	f002 f861 	bl	80033aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012e8:	2036      	movs	r0, #54	@ 0x36
 80012ea:	f002 f87a 	bl	80033e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80012ee:	bf00      	nop
 80012f0:	3728      	adds	r7, #40	@ 0x28
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40007400 	.word	0x40007400
 80012fc:	40023800 	.word	0x40023800
 8001300:	40020000 	.word	0x40020000

08001304 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800130a:	4b14      	ldr	r3, [pc, #80]	@ (800135c <MX_DMA_Init+0x58>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	4a13      	ldr	r2, [pc, #76]	@ (800135c <MX_DMA_Init+0x58>)
 8001310:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001314:	6313      	str	r3, [r2, #48]	@ 0x30
 8001316:	4b11      	ldr	r3, [pc, #68]	@ (800135c <MX_DMA_Init+0x58>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001322:	2200      	movs	r2, #0
 8001324:	2100      	movs	r1, #0
 8001326:	2038      	movs	r0, #56	@ 0x38
 8001328:	f002 f83f 	bl	80033aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800132c:	2038      	movs	r0, #56	@ 0x38
 800132e:	f002 f858 	bl	80033e2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001332:	2200      	movs	r2, #0
 8001334:	2100      	movs	r1, #0
 8001336:	2039      	movs	r0, #57	@ 0x39
 8001338:	f002 f837 	bl	80033aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800133c:	2039      	movs	r0, #57	@ 0x39
 800133e:	f002 f850 	bl	80033e2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001342:	2200      	movs	r2, #0
 8001344:	2100      	movs	r1, #0
 8001346:	203a      	movs	r0, #58	@ 0x3a
 8001348:	f002 f82f 	bl	80033aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800134c:	203a      	movs	r0, #58	@ 0x3a
 800134e:	f002 f848 	bl	80033e2 <HAL_NVIC_EnableIRQ>

}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800

08001360 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08c      	sub	sp, #48	@ 0x30
 8001364:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001366:	f107 031c 	add.w	r3, r7, #28
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
 8001374:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001376:	4b87      	ldr	r3, [pc, #540]	@ (8001594 <MX_GPIO_Init+0x234>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	4a86      	ldr	r2, [pc, #536]	@ (8001594 <MX_GPIO_Init+0x234>)
 800137c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001380:	6313      	str	r3, [r2, #48]	@ 0x30
 8001382:	4b84      	ldr	r3, [pc, #528]	@ (8001594 <MX_GPIO_Init+0x234>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800138a:	61bb      	str	r3, [r7, #24]
 800138c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800138e:	4b81      	ldr	r3, [pc, #516]	@ (8001594 <MX_GPIO_Init+0x234>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	4a80      	ldr	r2, [pc, #512]	@ (8001594 <MX_GPIO_Init+0x234>)
 8001394:	f043 0304 	orr.w	r3, r3, #4
 8001398:	6313      	str	r3, [r2, #48]	@ 0x30
 800139a:	4b7e      	ldr	r3, [pc, #504]	@ (8001594 <MX_GPIO_Init+0x234>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	f003 0304 	and.w	r3, r3, #4
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a6:	4b7b      	ldr	r3, [pc, #492]	@ (8001594 <MX_GPIO_Init+0x234>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013aa:	4a7a      	ldr	r2, [pc, #488]	@ (8001594 <MX_GPIO_Init+0x234>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b2:	4b78      	ldr	r3, [pc, #480]	@ (8001594 <MX_GPIO_Init+0x234>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	613b      	str	r3, [r7, #16]
 80013bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013be:	4b75      	ldr	r3, [pc, #468]	@ (8001594 <MX_GPIO_Init+0x234>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	4a74      	ldr	r2, [pc, #464]	@ (8001594 <MX_GPIO_Init+0x234>)
 80013c4:	f043 0302 	orr.w	r3, r3, #2
 80013c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ca:	4b72      	ldr	r3, [pc, #456]	@ (8001594 <MX_GPIO_Init+0x234>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013d6:	4b6f      	ldr	r3, [pc, #444]	@ (8001594 <MX_GPIO_Init+0x234>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	4a6e      	ldr	r2, [pc, #440]	@ (8001594 <MX_GPIO_Init+0x234>)
 80013dc:	f043 0310 	orr.w	r3, r3, #16
 80013e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e2:	4b6c      	ldr	r3, [pc, #432]	@ (8001594 <MX_GPIO_Init+0x234>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e6:	f003 0310 	and.w	r3, r3, #16
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ee:	4b69      	ldr	r3, [pc, #420]	@ (8001594 <MX_GPIO_Init+0x234>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f2:	4a68      	ldr	r2, [pc, #416]	@ (8001594 <MX_GPIO_Init+0x234>)
 80013f4:	f043 0308 	orr.w	r3, r3, #8
 80013f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fa:	4b66      	ldr	r3, [pc, #408]	@ (8001594 <MX_GPIO_Init+0x234>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	f003 0308 	and.w	r3, r3, #8
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_R_GPIO_Port, ENABLE_R_Pin, GPIO_PIN_RESET);
 8001406:	2200      	movs	r2, #0
 8001408:	2104      	movs	r1, #4
 800140a:	4863      	ldr	r0, [pc, #396]	@ (8001598 <MX_GPIO_Init+0x238>)
 800140c:	f002 fe1e 	bl	800404c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_L_GPIO_Port, ENABLE_L_Pin, GPIO_PIN_RESET);
 8001410:	2200      	movs	r2, #0
 8001412:	2180      	movs	r1, #128	@ 0x80
 8001414:	4861      	ldr	r0, [pc, #388]	@ (800159c <MX_GPIO_Init+0x23c>)
 8001416:	f002 fe19 	bl	800404c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_LEFT_Pin|LED_RIGHT_Pin|LED_ERR_Pin, GPIO_PIN_RESET);
 800141a:	2200      	movs	r2, #0
 800141c:	2170      	movs	r1, #112	@ 0x70
 800141e:	4860      	ldr	r0, [pc, #384]	@ (80015a0 <MX_GPIO_Init+0x240>)
 8001420:	f002 fe14 	bl	800404c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SC_det_Pin;
 8001424:	2310      	movs	r3, #16
 8001426:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001428:	2300      	movs	r3, #0
 800142a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SC_det_GPIO_Port, &GPIO_InitStruct);
 8001430:	f107 031c 	add.w	r3, r7, #28
 8001434:	4619      	mov	r1, r3
 8001436:	485b      	ldr	r0, [pc, #364]	@ (80015a4 <MX_GPIO_Init+0x244>)
 8001438:	f002 fc44 	bl	8003cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_R_Pin;
 800143c:	2304      	movs	r3, #4
 800143e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001440:	2301      	movs	r3, #1
 8001442:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001448:	2300      	movs	r3, #0
 800144a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ENABLE_R_GPIO_Port, &GPIO_InitStruct);
 800144c:	f107 031c 	add.w	r3, r7, #28
 8001450:	4619      	mov	r1, r3
 8001452:	4851      	ldr	r0, [pc, #324]	@ (8001598 <MX_GPIO_Init+0x238>)
 8001454:	f002 fc36 	bl	8003cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_L_Pin;
 8001458:	2380      	movs	r3, #128	@ 0x80
 800145a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145c:	2301      	movs	r3, #1
 800145e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001464:	2300      	movs	r3, #0
 8001466:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ENABLE_L_GPIO_Port, &GPIO_InitStruct);
 8001468:	f107 031c 	add.w	r3, r7, #28
 800146c:	4619      	mov	r1, r3
 800146e:	484b      	ldr	r0, [pc, #300]	@ (800159c <MX_GPIO_Init+0x23c>)
 8001470:	f002 fc28 	bl	8003cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = WRN_L_Pin|WRN_R_Pin;
 8001474:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001478:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147a:	2300      	movs	r3, #0
 800147c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001482:	f107 031c 	add.w	r3, r7, #28
 8001486:	4619      	mov	r1, r3
 8001488:	4844      	ldr	r0, [pc, #272]	@ (800159c <MX_GPIO_Init+0x23c>)
 800148a:	f002 fc1b 	bl	8003cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Z_R_Pin;
 800148e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001492:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001494:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001498:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Z_R_GPIO_Port, &GPIO_InitStruct);
 800149e:	f107 031c 	add.w	r3, r7, #28
 80014a2:	4619      	mov	r1, r3
 80014a4:	483c      	ldr	r0, [pc, #240]	@ (8001598 <MX_GPIO_Init+0x238>)
 80014a6:	f002 fc0d 	bl	8003cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Z_L_Pin;
 80014aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014b0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Z_L_GPIO_Port, &GPIO_InitStruct);
 80014ba:	f107 031c 	add.w	r3, r7, #28
 80014be:	4619      	mov	r1, r3
 80014c0:	4837      	ldr	r0, [pc, #220]	@ (80015a0 <MX_GPIO_Init+0x240>)
 80014c2:	f002 fbff 	bl	8003cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIP_R_Pin;
 80014c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014cc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TRIP_R_GPIO_Port, &GPIO_InitStruct);
 80014d6:	f107 031c 	add.w	r3, r7, #28
 80014da:	4619      	mov	r1, r3
 80014dc:	4831      	ldr	r0, [pc, #196]	@ (80015a4 <MX_GPIO_Init+0x244>)
 80014de:	f002 fbf1 	bl	8003cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIP_L_Pin;
 80014e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014e8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TRIP_L_GPIO_Port, &GPIO_InitStruct);
 80014f2:	f107 031c 	add.w	r3, r7, #28
 80014f6:	4619      	mov	r1, r3
 80014f8:	482b      	ldr	r0, [pc, #172]	@ (80015a8 <MX_GPIO_Init+0x248>)
 80014fa:	f002 fbe3 	bl	8003cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001502:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150c:	f107 031c 	add.w	r3, r7, #28
 8001510:	4619      	mov	r1, r3
 8001512:	4825      	ldr	r0, [pc, #148]	@ (80015a8 <MX_GPIO_Init+0x248>)
 8001514:	f002 fbd6 	bl	8003cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001518:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800151c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	2302      	movs	r3, #2
 8001520:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001526:	2303      	movs	r3, #3
 8001528:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800152a:	230a      	movs	r3, #10
 800152c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152e:	f107 031c 	add.w	r3, r7, #28
 8001532:	4619      	mov	r1, r3
 8001534:	481c      	ldr	r0, [pc, #112]	@ (80015a8 <MX_GPIO_Init+0x248>)
 8001536:	f002 fbc5 	bl	8003cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIR_Pin;
 800153a:	2308      	movs	r3, #8
 800153c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800153e:	2300      	movs	r3, #0
 8001540:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 8001546:	f107 031c 	add.w	r3, r7, #28
 800154a:	4619      	mov	r1, r3
 800154c:	4814      	ldr	r0, [pc, #80]	@ (80015a0 <MX_GPIO_Init+0x240>)
 800154e:	f002 fbb9 	bl	8003cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LED_LEFT_Pin|LED_RIGHT_Pin;
 8001552:	2330      	movs	r3, #48	@ 0x30
 8001554:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001556:	2301      	movs	r3, #1
 8001558:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2300      	movs	r3, #0
 8001560:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001562:	f107 031c 	add.w	r3, r7, #28
 8001566:	4619      	mov	r1, r3
 8001568:	480d      	ldr	r0, [pc, #52]	@ (80015a0 <MX_GPIO_Init+0x240>)
 800156a:	f002 fbab 	bl	8003cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_ERR_Pin;
 800156e:	2340      	movs	r3, #64	@ 0x40
 8001570:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001572:	2301      	movs	r3, #1
 8001574:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001576:	2302      	movs	r3, #2
 8001578:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2300      	movs	r3, #0
 800157c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_ERR_GPIO_Port, &GPIO_InitStruct);
 800157e:	f107 031c 	add.w	r3, r7, #28
 8001582:	4619      	mov	r1, r3
 8001584:	4806      	ldr	r0, [pc, #24]	@ (80015a0 <MX_GPIO_Init+0x240>)
 8001586:	f002 fb9d 	bl	8003cc4 <HAL_GPIO_Init>

}
 800158a:	bf00      	nop
 800158c:	3730      	adds	r7, #48	@ 0x30
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40023800 	.word	0x40023800
 8001598:	40020400 	.word	0x40020400
 800159c:	40021000 	.word	0x40021000
 80015a0:	40020c00 	.word	0x40020c00
 80015a4:	40020800 	.word	0x40020800
 80015a8:	40020000 	.word	0x40020000

080015ac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001620 <MX_I2C1_Init+0x74>)
 80015b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001624 <MX_I2C1_Init+0x78>)
 80015b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80015b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001620 <MX_I2C1_Init+0x74>)
 80015b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001628 <MX_I2C1_Init+0x7c>)
 80015ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80015bc:	4b18      	ldr	r3, [pc, #96]	@ (8001620 <MX_I2C1_Init+0x74>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015c2:	4b17      	ldr	r3, [pc, #92]	@ (8001620 <MX_I2C1_Init+0x74>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015c8:	4b15      	ldr	r3, [pc, #84]	@ (8001620 <MX_I2C1_Init+0x74>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80015ce:	4b14      	ldr	r3, [pc, #80]	@ (8001620 <MX_I2C1_Init+0x74>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015d4:	4b12      	ldr	r3, [pc, #72]	@ (8001620 <MX_I2C1_Init+0x74>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015da:	4b11      	ldr	r3, [pc, #68]	@ (8001620 <MX_I2C1_Init+0x74>)
 80015dc:	2200      	movs	r2, #0
 80015de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001620 <MX_I2C1_Init+0x74>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015e6:	480e      	ldr	r0, [pc, #56]	@ (8001620 <MX_I2C1_Init+0x74>)
 80015e8:	f002 fd4a 	bl	8004080 <HAL_I2C_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80015f2:	f000 f94d 	bl	8001890 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015f6:	2100      	movs	r1, #0
 80015f8:	4809      	ldr	r0, [pc, #36]	@ (8001620 <MX_I2C1_Init+0x74>)
 80015fa:	f002 fdd1 	bl	80041a0 <HAL_I2CEx_ConfigAnalogFilter>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001604:	f000 f944 	bl	8001890 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001608:	2100      	movs	r1, #0
 800160a:	4805      	ldr	r0, [pc, #20]	@ (8001620 <MX_I2C1_Init+0x74>)
 800160c:	f002 fe13 	bl	8004236 <HAL_I2CEx_ConfigDigitalFilter>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001616:	f000 f93b 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	200003bc 	.word	0x200003bc
 8001624:	40005400 	.word	0x40005400
 8001628:	20404768 	.word	0x20404768

0800162c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b0ae      	sub	sp, #184	@ 0xb8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	2290      	movs	r2, #144	@ 0x90
 800164a:	2100      	movs	r1, #0
 800164c:	4618      	mov	r0, r3
 800164e:	f005 fb31 	bl	8006cb4 <memset>
  if(i2cHandle->Instance==I2C1)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a21      	ldr	r2, [pc, #132]	@ (80016dc <HAL_I2C_MspInit+0xb0>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d13b      	bne.n	80016d4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800165c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001660:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001662:	2300      	movs	r3, #0
 8001664:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	4618      	mov	r0, r3
 800166c:	f003 fae0 	bl	8004c30 <HAL_RCCEx_PeriphCLKConfig>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001676:	f000 f90b 	bl	8001890 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800167a:	4b19      	ldr	r3, [pc, #100]	@ (80016e0 <HAL_I2C_MspInit+0xb4>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	4a18      	ldr	r2, [pc, #96]	@ (80016e0 <HAL_I2C_MspInit+0xb4>)
 8001680:	f043 0302 	orr.w	r3, r3, #2
 8001684:	6313      	str	r3, [r2, #48]	@ 0x30
 8001686:	4b16      	ldr	r3, [pc, #88]	@ (80016e0 <HAL_I2C_MspInit+0xb4>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001692:	23c0      	movs	r3, #192	@ 0xc0
 8001694:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001698:	2312      	movs	r3, #18
 800169a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a4:	2303      	movs	r3, #3
 80016a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016aa:	2304      	movs	r3, #4
 80016ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80016b4:	4619      	mov	r1, r3
 80016b6:	480b      	ldr	r0, [pc, #44]	@ (80016e4 <HAL_I2C_MspInit+0xb8>)
 80016b8:	f002 fb04 	bl	8003cc4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016bc:	4b08      	ldr	r3, [pc, #32]	@ (80016e0 <HAL_I2C_MspInit+0xb4>)
 80016be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c0:	4a07      	ldr	r2, [pc, #28]	@ (80016e0 <HAL_I2C_MspInit+0xb4>)
 80016c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80016c8:	4b05      	ldr	r3, [pc, #20]	@ (80016e0 <HAL_I2C_MspInit+0xb4>)
 80016ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80016d4:	bf00      	nop
 80016d6:	37b8      	adds	r7, #184	@ 0xb8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40005400 	.word	0x40005400
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40020400 	.word	0x40020400

080016e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016ee:	f000 fdc2 	bl	8002276 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016f2:	f000 f85f 	bl	80017b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016f6:	f7ff fe33 	bl	8001360 <MX_GPIO_Init>
  MX_DMA_Init();
 80016fa:	f7ff fe03 	bl	8001304 <MX_DMA_Init>
  MX_ADC1_Init();
 80016fe:	f7ff fa73 	bl	8000be8 <MX_ADC1_Init>
  MX_CAN1_Init();
 8001702:	f7ff fd0b 	bl	800111c <MX_CAN1_Init>
  MX_USB_OTG_FS_USB_Init();
 8001706:	f000 fd85 	bl	8002214 <MX_USB_OTG_FS_USB_Init>
  MX_ADC2_Init();
 800170a:	f7ff fae9 	bl	8000ce0 <MX_ADC2_Init>
  MX_ADC3_Init();
 800170e:	f7ff fb63 	bl	8000dd8 <MX_ADC3_Init>
  MX_DAC_Init();
 8001712:	f7ff fd85 	bl	8001220 <MX_DAC_Init>
  MX_I2C1_Init();
 8001716:	f7ff ff49 	bl	80015ac <MX_I2C1_Init>
  MX_TIM1_Init();
 800171a:	f000 f969 	bl	80019f0 <MX_TIM1_Init>
  MX_TIM8_Init();
 800171e:	f000 fb25 	bl	8001d6c <MX_TIM8_Init>
  MX_TIM2_Init();
 8001722:	f000 fa2f 	bl	8001b84 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001726:	f000 fa8b 	bl	8001c40 <MX_TIM4_Init>
  MX_TIM6_Init();
 800172a:	f000 fae9 	bl	8001d00 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  // Initialize inverters
  initialize_inverter(&invLeft, &ledLeft, ENABLE_L_GPIO_Port, ENABLE_L_Pin, &htim1, &hadc2);
 800172e:	4b14      	ldr	r3, [pc, #80]	@ (8001780 <main+0x98>)
 8001730:	9301      	str	r3, [sp, #4]
 8001732:	4b14      	ldr	r3, [pc, #80]	@ (8001784 <main+0x9c>)
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	2380      	movs	r3, #128	@ 0x80
 8001738:	4a13      	ldr	r2, [pc, #76]	@ (8001788 <main+0xa0>)
 800173a:	4914      	ldr	r1, [pc, #80]	@ (800178c <main+0xa4>)
 800173c:	4814      	ldr	r0, [pc, #80]	@ (8001790 <main+0xa8>)
 800173e:	f7ff f807 	bl	8000750 <initialize_inverter>
  initialize_inverter(&invRight, &ledRight, ENABLE_R_GPIO_Port, ENABLE_R_Pin, &htim8, &hadc1);
 8001742:	4b14      	ldr	r3, [pc, #80]	@ (8001794 <main+0xac>)
 8001744:	9301      	str	r3, [sp, #4]
 8001746:	4b14      	ldr	r3, [pc, #80]	@ (8001798 <main+0xb0>)
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	2304      	movs	r3, #4
 800174c:	4a13      	ldr	r2, [pc, #76]	@ (800179c <main+0xb4>)
 800174e:	4914      	ldr	r1, [pc, #80]	@ (80017a0 <main+0xb8>)
 8001750:	4814      	ldr	r0, [pc, #80]	@ (80017a4 <main+0xbc>)
 8001752:	f7fe fffd 	bl	8000750 <initialize_inverter>

  HAL_ADC_Start_DMA(&hadc2, (uint32_t *) ADC_raw_L,4); // Starts ADC DMA
 8001756:	2204      	movs	r2, #4
 8001758:	4913      	ldr	r1, [pc, #76]	@ (80017a8 <main+0xc0>)
 800175a:	4809      	ldr	r0, [pc, #36]	@ (8001780 <main+0x98>)
 800175c:	f000 fe2c 	bl	80023b8 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) ADC_raw_R,4); // Starts ADC DMA
 8001760:	2204      	movs	r2, #4
 8001762:	4912      	ldr	r1, [pc, #72]	@ (80017ac <main+0xc4>)
 8001764:	480b      	ldr	r0, [pc, #44]	@ (8001794 <main+0xac>)
 8001766:	f000 fe27 	bl	80023b8 <HAL_ADC_Start_DMA>

  // 1ms timer
  HAL_TIM_Base_Start_IT(&htim6);
 800176a:	4811      	ldr	r0, [pc, #68]	@ (80017b0 <main+0xc8>)
 800176c:	f003 fee0 	bl	8005530 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

      // Run FSM for left inverter
	  eval_inv_FSM(&invLeft);
 8001770:	4807      	ldr	r0, [pc, #28]	@ (8001790 <main+0xa8>)
 8001772:	f7fe ff5b 	bl	800062c <eval_inv_FSM>

      // Run FSM for right inverter
	  eval_inv_FSM(&invRight);
 8001776:	480b      	ldr	r0, [pc, #44]	@ (80017a4 <main+0xbc>)
 8001778:	f7fe ff58 	bl	800062c <eval_inv_FSM>
	  eval_inv_FSM(&invLeft);
 800177c:	bf00      	nop
 800177e:	e7f7      	b.n	8001770 <main+0x88>
 8001780:	200001d0 	.word	0x200001d0
 8001784:	20000410 	.word	0x20000410
 8001788:	40021000 	.word	0x40021000
 800178c:	20000000 	.word	0x20000000
 8001790:	200000a8 	.word	0x200000a8
 8001794:	20000188 	.word	0x20000188
 8001798:	20000540 	.word	0x20000540
 800179c:	40020400 	.word	0x40020400
 80017a0:	20000008 	.word	0x20000008
 80017a4:	20000104 	.word	0x20000104
 80017a8:	20000160 	.word	0x20000160
 80017ac:	20000170 	.word	0x20000170
 80017b0:	200004f4 	.word	0x200004f4

080017b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b094      	sub	sp, #80	@ 0x50
 80017b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ba:	f107 031c 	add.w	r3, r7, #28
 80017be:	2234      	movs	r2, #52	@ 0x34
 80017c0:	2100      	movs	r1, #0
 80017c2:	4618      	mov	r0, r3
 80017c4:	f005 fa76 	bl	8006cb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017c8:	f107 0308 	add.w	r3, r7, #8
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001888 <SystemClock_Config+0xd4>)
 80017da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017dc:	4a2a      	ldr	r2, [pc, #168]	@ (8001888 <SystemClock_Config+0xd4>)
 80017de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80017e4:	4b28      	ldr	r3, [pc, #160]	@ (8001888 <SystemClock_Config+0xd4>)
 80017e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ec:	607b      	str	r3, [r7, #4]
 80017ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017f0:	4b26      	ldr	r3, [pc, #152]	@ (800188c <SystemClock_Config+0xd8>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a25      	ldr	r2, [pc, #148]	@ (800188c <SystemClock_Config+0xd8>)
 80017f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80017fa:	6013      	str	r3, [r2, #0]
 80017fc:	4b23      	ldr	r3, [pc, #140]	@ (800188c <SystemClock_Config+0xd8>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001804:	603b      	str	r3, [r7, #0]
 8001806:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001808:	2301      	movs	r3, #1
 800180a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800180c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001810:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001812:	2302      	movs	r3, #2
 8001814:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001816:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800181a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 10;
 800181c:	230a      	movs	r3, #10
 800181e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001820:	23d8      	movs	r3, #216	@ 0xd8
 8001822:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001824:	2302      	movs	r3, #2
 8001826:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001828:	2309      	movs	r3, #9
 800182a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800182c:	2302      	movs	r3, #2
 800182e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001830:	f107 031c 	add.w	r3, r7, #28
 8001834:	4618      	mov	r0, r3
 8001836:	f002 fd9b 	bl	8004370 <HAL_RCC_OscConfig>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001840:	f000 f826 	bl	8001890 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001844:	f002 fd44 	bl	80042d0 <HAL_PWREx_EnableOverDrive>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800184e:	f000 f81f 	bl	8001890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001852:	230f      	movs	r3, #15
 8001854:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001856:	2302      	movs	r3, #2
 8001858:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800185e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001862:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001864:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001868:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800186a:	f107 0308 	add.w	r3, r7, #8
 800186e:	2107      	movs	r1, #7
 8001870:	4618      	mov	r0, r3
 8001872:	f003 f82b 	bl	80048cc <HAL_RCC_ClockConfig>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800187c:	f000 f808 	bl	8001890 <Error_Handler>
  }
}
 8001880:	bf00      	nop
 8001882:	3750      	adds	r7, #80	@ 0x50
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40023800 	.word	0x40023800
 800188c:	40007000 	.word	0x40007000

08001890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001894:	b672      	cpsid	i
}
 8001896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001898:	bf00      	nop
 800189a:	e7fd      	b.n	8001898 <Error_Handler+0x8>

0800189c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80018a2:	4b0f      	ldr	r3, [pc, #60]	@ (80018e0 <HAL_MspInit+0x44>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a6:	4a0e      	ldr	r2, [pc, #56]	@ (80018e0 <HAL_MspInit+0x44>)
 80018a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ae:	4b0c      	ldr	r3, [pc, #48]	@ (80018e0 <HAL_MspInit+0x44>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ba:	4b09      	ldr	r3, [pc, #36]	@ (80018e0 <HAL_MspInit+0x44>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018be:	4a08      	ldr	r2, [pc, #32]	@ (80018e0 <HAL_MspInit+0x44>)
 80018c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018c6:	4b06      	ldr	r3, [pc, #24]	@ (80018e0 <HAL_MspInit+0x44>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018ce:	603b      	str	r3, [r7, #0]
 80018d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	40023800 	.word	0x40023800

080018e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018e8:	bf00      	nop
 80018ea:	e7fd      	b.n	80018e8 <NMI_Handler+0x4>

080018ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018f0:	bf00      	nop
 80018f2:	e7fd      	b.n	80018f0 <HardFault_Handler+0x4>

080018f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f8:	bf00      	nop
 80018fa:	e7fd      	b.n	80018f8 <MemManage_Handler+0x4>

080018fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001900:	bf00      	nop
 8001902:	e7fd      	b.n	8001900 <BusFault_Handler+0x4>

08001904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001908:	bf00      	nop
 800190a:	e7fd      	b.n	8001908 <UsageFault_Handler+0x4>

0800190c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800193a:	f000 fcd9 	bl	80022f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
	...

08001944 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001948:	4802      	ldr	r0, [pc, #8]	@ (8001954 <CAN1_RX0_IRQHandler+0x10>)
 800194a:	f001 fa1a 	bl	8002d82 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000380 	.word	0x20000380

08001958 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800195c:	4803      	ldr	r0, [pc, #12]	@ (800196c <TIM1_UP_TIM10_IRQHandler+0x14>)
 800195e:	f003 ff78 	bl	8005852 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  tasks_20us_LEFT();
 8001962:	f7ff f8f1 	bl	8000b48 <tasks_20us_LEFT>
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000410 	.word	0x20000410

08001970 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001974:	4804      	ldr	r0, [pc, #16]	@ (8001988 <TIM6_DAC_IRQHandler+0x18>)
 8001976:	f001 fd70 	bl	800345a <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 800197a:	4804      	ldr	r0, [pc, #16]	@ (800198c <TIM6_DAC_IRQHandler+0x1c>)
 800197c:	f003 ff69 	bl	8005852 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  tasks_1ms();
 8001980:	f7ff f8b6 	bl	8000af0 <tasks_1ms>
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}
 8001988:	200003a8 	.word	0x200003a8
 800198c:	200004f4 	.word	0x200004f4

08001990 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001994:	4802      	ldr	r0, [pc, #8]	@ (80019a0 <DMA2_Stream0_IRQHandler+0x10>)
 8001996:	f001 ff2b 	bl	80037f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000260 	.word	0x20000260

080019a4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80019a8:	4802      	ldr	r0, [pc, #8]	@ (80019b4 <DMA2_Stream1_IRQHandler+0x10>)
 80019aa:	f001 ff21 	bl	80037f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000320 	.word	0x20000320

080019b8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80019bc:	4802      	ldr	r0, [pc, #8]	@ (80019c8 <DMA2_Stream2_IRQHandler+0x10>)
 80019be:	f001 ff17 	bl	80037f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	200002c0 	.word	0x200002c0

080019cc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019d0:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <SystemInit+0x20>)
 80019d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019d6:	4a05      	ldr	r2, [pc, #20]	@ (80019ec <SystemInit+0x20>)
 80019d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b09a      	sub	sp, #104	@ 0x68
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019f6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	605a      	str	r2, [r3, #4]
 8001a00:	609a      	str	r2, [r3, #8]
 8001a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a04:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a10:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
 8001a20:	615a      	str	r2, [r3, #20]
 8001a22:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a24:	1d3b      	adds	r3, r7, #4
 8001a26:	222c      	movs	r2, #44	@ 0x2c
 8001a28:	2100      	movs	r1, #0
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f005 f942 	bl	8006cb4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a30:	4b52      	ldr	r3, [pc, #328]	@ (8001b7c <MX_TIM1_Init+0x18c>)
 8001a32:	4a53      	ldr	r2, [pc, #332]	@ (8001b80 <MX_TIM1_Init+0x190>)
 8001a34:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a36:	4b51      	ldr	r3, [pc, #324]	@ (8001b7c <MX_TIM1_Init+0x18c>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001a3c:	4b4f      	ldr	r3, [pc, #316]	@ (8001b7c <MX_TIM1_Init+0x18c>)
 8001a3e:	2220      	movs	r2, #32
 8001a40:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = (216000000*TS)/2;
 8001a42:	4b4e      	ldr	r3, [pc, #312]	@ (8001b7c <MX_TIM1_Init+0x18c>)
 8001a44:	f245 4260 	movw	r2, #21600	@ 0x5460
 8001a48:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a4a:	4b4c      	ldr	r3, [pc, #304]	@ (8001b7c <MX_TIM1_Init+0x18c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8001a50:	4b4a      	ldr	r3, [pc, #296]	@ (8001b7c <MX_TIM1_Init+0x18c>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a56:	4b49      	ldr	r3, [pc, #292]	@ (8001b7c <MX_TIM1_Init+0x18c>)
 8001a58:	2280      	movs	r2, #128	@ 0x80
 8001a5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a5c:	4847      	ldr	r0, [pc, #284]	@ (8001b7c <MX_TIM1_Init+0x18c>)
 8001a5e:	f003 fd0f 	bl	8005480 <HAL_TIM_Base_Init>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001a68:	f7ff ff12 	bl	8001890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a70:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a72:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001a76:	4619      	mov	r1, r3
 8001a78:	4840      	ldr	r0, [pc, #256]	@ (8001b7c <MX_TIM1_Init+0x18c>)
 8001a7a:	f004 fa33 	bl	8005ee4 <HAL_TIM_ConfigClockSource>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001a84:	f7ff ff04 	bl	8001890 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a88:	483c      	ldr	r0, [pc, #240]	@ (8001b7c <MX_TIM1_Init+0x18c>)
 8001a8a:	f003 fe2a 	bl	80056e2 <HAL_TIM_PWM_Init>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001a94:	f7ff fefc 	bl	8001890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a98:	2320      	movs	r3, #32
 8001a9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001aa4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4834      	ldr	r0, [pc, #208]	@ (8001b7c <MX_TIM1_Init+0x18c>)
 8001aac:	f004 ffd8 	bl	8006a60 <HAL_TIMEx_MasterConfigSynchronization>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001ab6:	f7ff feeb 	bl	8001890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aba:	2360      	movs	r3, #96	@ 0x60
 8001abc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8001ac6:	2308      	movs	r3, #8
 8001ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aca:	2300      	movs	r3, #0
 8001acc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8001ad2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ad6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ad8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001adc:	2200      	movs	r2, #0
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4826      	ldr	r0, [pc, #152]	@ (8001b7c <MX_TIM1_Init+0x18c>)
 8001ae2:	f004 f8eb 	bl	8005cbc <HAL_TIM_PWM_ConfigChannel>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001aec:	f7ff fed0 	bl	8001890 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001af0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001af4:	2204      	movs	r2, #4
 8001af6:	4619      	mov	r1, r3
 8001af8:	4820      	ldr	r0, [pc, #128]	@ (8001b7c <MX_TIM1_Init+0x18c>)
 8001afa:	f004 f8df 	bl	8005cbc <HAL_TIM_PWM_ConfigChannel>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001b04:	f7ff fec4 	bl	8001890 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b08:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b0c:	2208      	movs	r2, #8
 8001b0e:	4619      	mov	r1, r3
 8001b10:	481a      	ldr	r0, [pc, #104]	@ (8001b7c <MX_TIM1_Init+0x18c>)
 8001b12:	f004 f8d3 	bl	8005cbc <HAL_TIM_PWM_ConfigChannel>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8001b1c:	f7ff feb8 	bl	8001890 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001b20:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b24:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001b26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b2a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 8001b2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b30:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = DT*216000000;
 8001b32:	2320      	movs	r3, #32
 8001b34:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b3e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8001b44:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b48:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b4a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b4e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b58:	1d3b      	adds	r3, r7, #4
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4807      	ldr	r0, [pc, #28]	@ (8001b7c <MX_TIM1_Init+0x18c>)
 8001b5e:	f005 f80d 	bl	8006b7c <HAL_TIMEx_ConfigBreakDeadTime>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM1_Init+0x17c>
  {
    Error_Handler();
 8001b68:	f7ff fe92 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b6c:	4803      	ldr	r0, [pc, #12]	@ (8001b7c <MX_TIM1_Init+0x18c>)
 8001b6e:	f000 fab5 	bl	80020dc <HAL_TIM_MspPostInit>

}
 8001b72:	bf00      	nop
 8001b74:	3768      	adds	r7, #104	@ 0x68
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000410 	.word	0x20000410
 8001b80:	40010000 	.word	0x40010000

08001b84 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b088      	sub	sp, #32
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b8a:	f107 0314 	add.w	r3, r7, #20
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b96:	1d3b      	adds	r3, r7, #4
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ba2:	4b26      	ldr	r3, [pc, #152]	@ (8001c3c <MX_TIM2_Init+0xb8>)
 8001ba4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ba8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001baa:	4b24      	ldr	r3, [pc, #144]	@ (8001c3c <MX_TIM2_Init+0xb8>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb0:	4b22      	ldr	r3, [pc, #136]	@ (8001c3c <MX_TIM2_Init+0xb8>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001bb6:	4b21      	ldr	r3, [pc, #132]	@ (8001c3c <MX_TIM2_Init+0xb8>)
 8001bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bbc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bbe:	4b1f      	ldr	r3, [pc, #124]	@ (8001c3c <MX_TIM2_Init+0xb8>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c3c <MX_TIM2_Init+0xb8>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001bca:	481c      	ldr	r0, [pc, #112]	@ (8001c3c <MX_TIM2_Init+0xb8>)
 8001bcc:	f003 fdea 	bl	80057a4 <HAL_TIM_IC_Init>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001bd6:	f7ff fe5b 	bl	8001890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001be2:	f107 0314 	add.w	r3, r7, #20
 8001be6:	4619      	mov	r1, r3
 8001be8:	4814      	ldr	r0, [pc, #80]	@ (8001c3c <MX_TIM2_Init+0xb8>)
 8001bea:	f004 ff39 	bl	8006a60 <HAL_TIMEx_MasterConfigSynchronization>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001bf4:	f7ff fe4c 	bl	8001890 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001c08:	1d3b      	adds	r3, r7, #4
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	480b      	ldr	r0, [pc, #44]	@ (8001c3c <MX_TIM2_Init+0xb8>)
 8001c10:	f003 ffb8 	bl	8005b84 <HAL_TIM_IC_ConfigChannel>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001c1a:	f7ff fe39 	bl	8001890 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001c1e:	1d3b      	adds	r3, r7, #4
 8001c20:	2208      	movs	r2, #8
 8001c22:	4619      	mov	r1, r3
 8001c24:	4805      	ldr	r0, [pc, #20]	@ (8001c3c <MX_TIM2_Init+0xb8>)
 8001c26:	f003 ffad 	bl	8005b84 <HAL_TIM_IC_ConfigChannel>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001c30:	f7ff fe2e 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c34:	bf00      	nop
 8001c36:	3720      	adds	r7, #32
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	2000045c 	.word	0x2000045c

08001c40 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b088      	sub	sp, #32
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c46:	f107 0314 	add.w	r3, r7, #20
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	605a      	str	r2, [r3, #4]
 8001c50:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c52:	1d3b      	adds	r3, r7, #4
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c5e:	4b26      	ldr	r3, [pc, #152]	@ (8001cf8 <MX_TIM4_Init+0xb8>)
 8001c60:	4a26      	ldr	r2, [pc, #152]	@ (8001cfc <MX_TIM4_Init+0xbc>)
 8001c62:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001c64:	4b24      	ldr	r3, [pc, #144]	@ (8001cf8 <MX_TIM4_Init+0xb8>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c6a:	4b23      	ldr	r3, [pc, #140]	@ (8001cf8 <MX_TIM4_Init+0xb8>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001c70:	4b21      	ldr	r3, [pc, #132]	@ (8001cf8 <MX_TIM4_Init+0xb8>)
 8001c72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c76:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c78:	4b1f      	ldr	r3, [pc, #124]	@ (8001cf8 <MX_TIM4_Init+0xb8>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf8 <MX_TIM4_Init+0xb8>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001c84:	481c      	ldr	r0, [pc, #112]	@ (8001cf8 <MX_TIM4_Init+0xb8>)
 8001c86:	f003 fd8d 	bl	80057a4 <HAL_TIM_IC_Init>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001c90:	f7ff fdfe 	bl	8001890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4815      	ldr	r0, [pc, #84]	@ (8001cf8 <MX_TIM4_Init+0xb8>)
 8001ca4:	f004 fedc 	bl	8006a60 <HAL_TIMEx_MasterConfigSynchronization>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8001cae:	f7ff fdef 	bl	8001890 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001cc2:	1d3b      	adds	r3, r7, #4
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	480b      	ldr	r0, [pc, #44]	@ (8001cf8 <MX_TIM4_Init+0xb8>)
 8001cca:	f003 ff5b 	bl	8005b84 <HAL_TIM_IC_ConfigChannel>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001cd4:	f7ff fddc 	bl	8001890 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001cd8:	1d3b      	adds	r3, r7, #4
 8001cda:	2208      	movs	r2, #8
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4806      	ldr	r0, [pc, #24]	@ (8001cf8 <MX_TIM4_Init+0xb8>)
 8001ce0:	f003 ff50 	bl	8005b84 <HAL_TIM_IC_ConfigChannel>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8001cea:	f7ff fdd1 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001cee:	bf00      	nop
 8001cf0:	3720      	adds	r7, #32
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	200004a8 	.word	0x200004a8
 8001cfc:	40000800 	.word	0x40000800

08001d00 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d06:	1d3b      	adds	r3, r7, #4
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001d10:	4b14      	ldr	r3, [pc, #80]	@ (8001d64 <MX_TIM6_Init+0x64>)
 8001d12:	4a15      	ldr	r2, [pc, #84]	@ (8001d68 <MX_TIM6_Init+0x68>)
 8001d14:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1;
 8001d16:	4b13      	ldr	r3, [pc, #76]	@ (8001d64 <MX_TIM6_Init+0x64>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d1c:	4b11      	ldr	r3, [pc, #68]	@ (8001d64 <MX_TIM6_Init+0x64>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 53999;
 8001d22:	4b10      	ldr	r3, [pc, #64]	@ (8001d64 <MX_TIM6_Init+0x64>)
 8001d24:	f24d 22ef 	movw	r2, #53999	@ 0xd2ef
 8001d28:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d64 <MX_TIM6_Init+0x64>)
 8001d2c:	2280      	movs	r2, #128	@ 0x80
 8001d2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001d30:	480c      	ldr	r0, [pc, #48]	@ (8001d64 <MX_TIM6_Init+0x64>)
 8001d32:	f003 fba5 	bl	8005480 <HAL_TIM_Base_Init>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001d3c:	f7ff fda8 	bl	8001890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d40:	2320      	movs	r3, #32
 8001d42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d44:	2300      	movs	r3, #0
 8001d46:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d48:	1d3b      	adds	r3, r7, #4
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4805      	ldr	r0, [pc, #20]	@ (8001d64 <MX_TIM6_Init+0x64>)
 8001d4e:	f004 fe87 	bl	8006a60 <HAL_TIMEx_MasterConfigSynchronization>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001d58:	f7ff fd9a 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001d5c:	bf00      	nop
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	200004f4 	.word	0x200004f4
 8001d68:	40001000 	.word	0x40001000

08001d6c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b09a      	sub	sp, #104	@ 0x68
 8001d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d72:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	605a      	str	r2, [r3, #4]
 8001d7c:	609a      	str	r2, [r3, #8]
 8001d7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d80:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d8c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
 8001d9c:	615a      	str	r2, [r3, #20]
 8001d9e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001da0:	1d3b      	adds	r3, r7, #4
 8001da2:	222c      	movs	r2, #44	@ 0x2c
 8001da4:	2100      	movs	r1, #0
 8001da6:	4618      	mov	r0, r3
 8001da8:	f004 ff84 	bl	8006cb4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001dac:	4b54      	ldr	r3, [pc, #336]	@ (8001f00 <MX_TIM8_Init+0x194>)
 8001dae:	4a55      	ldr	r2, [pc, #340]	@ (8001f04 <MX_TIM8_Init+0x198>)
 8001db0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001db2:	4b53      	ldr	r3, [pc, #332]	@ (8001f00 <MX_TIM8_Init+0x194>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db8:	4b51      	ldr	r3, [pc, #324]	@ (8001f00 <MX_TIM8_Init+0x194>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001dbe:	4b50      	ldr	r3, [pc, #320]	@ (8001f00 <MX_TIM8_Init+0x194>)
 8001dc0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dc4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc6:	4b4e      	ldr	r3, [pc, #312]	@ (8001f00 <MX_TIM8_Init+0x194>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001dcc:	4b4c      	ldr	r3, [pc, #304]	@ (8001f00 <MX_TIM8_Init+0x194>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd2:	4b4b      	ldr	r3, [pc, #300]	@ (8001f00 <MX_TIM8_Init+0x194>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001dd8:	4849      	ldr	r0, [pc, #292]	@ (8001f00 <MX_TIM8_Init+0x194>)
 8001dda:	f003 fb51 	bl	8005480 <HAL_TIM_Base_Init>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001de4:	f7ff fd54 	bl	8001890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001de8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dec:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001dee:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001df2:	4619      	mov	r1, r3
 8001df4:	4842      	ldr	r0, [pc, #264]	@ (8001f00 <MX_TIM8_Init+0x194>)
 8001df6:	f004 f875 	bl	8005ee4 <HAL_TIM_ConfigClockSource>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001e00:	f7ff fd46 	bl	8001890 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001e04:	483e      	ldr	r0, [pc, #248]	@ (8001f00 <MX_TIM8_Init+0x194>)
 8001e06:	f003 fc6c 	bl	80056e2 <HAL_TIM_PWM_Init>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001e10:	f7ff fd3e 	bl	8001890 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8001e14:	483a      	ldr	r0, [pc, #232]	@ (8001f00 <MX_TIM8_Init+0x194>)
 8001e16:	f003 fc03 	bl	8005620 <HAL_TIM_OC_Init>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_TIM8_Init+0xb8>
  {
    Error_Handler();
 8001e20:	f7ff fd36 	bl	8001890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e24:	2300      	movs	r3, #0
 8001e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001e30:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001e34:	4619      	mov	r1, r3
 8001e36:	4832      	ldr	r0, [pc, #200]	@ (8001f00 <MX_TIM8_Init+0x194>)
 8001e38:	f004 fe12 	bl	8006a60 <HAL_TIMEx_MasterConfigSynchronization>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_TIM8_Init+0xda>
  {
    Error_Handler();
 8001e42:	f7ff fd25 	bl	8001890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e46:	2360      	movs	r3, #96	@ 0x60
 8001e48:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e52:	2300      	movs	r3, #0
 8001e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e56:	2300      	movs	r3, #0
 8001e58:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e62:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e66:	2200      	movs	r2, #0
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4825      	ldr	r0, [pc, #148]	@ (8001f00 <MX_TIM8_Init+0x194>)
 8001e6c:	f003 ff26 	bl	8005cbc <HAL_TIM_PWM_ConfigChannel>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8001e76:	f7ff fd0b 	bl	8001890 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e7a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e7e:	2204      	movs	r2, #4
 8001e80:	4619      	mov	r1, r3
 8001e82:	481f      	ldr	r0, [pc, #124]	@ (8001f00 <MX_TIM8_Init+0x194>)
 8001e84:	f003 ff1a 	bl	8005cbc <HAL_TIM_PWM_ConfigChannel>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 8001e8e:	f7ff fcff 	bl	8001890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001e92:	2300      	movs	r3, #0
 8001e94:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e96:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e9a:	2208      	movs	r2, #8
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4818      	ldr	r0, [pc, #96]	@ (8001f00 <MX_TIM8_Init+0x194>)
 8001ea0:	f003 fdf6 	bl	8005a90 <HAL_TIM_OC_ConfigChannel>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001eaa:	f7ff fcf1 	bl	8001890 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ec2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ec6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ed0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ed4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001eda:	2300      	movs	r3, #0
 8001edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001ede:	1d3b      	adds	r3, r7, #4
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4807      	ldr	r0, [pc, #28]	@ (8001f00 <MX_TIM8_Init+0x194>)
 8001ee4:	f004 fe4a 	bl	8006b7c <HAL_TIMEx_ConfigBreakDeadTime>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_TIM8_Init+0x186>
  {
    Error_Handler();
 8001eee:	f7ff fccf 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001ef2:	4803      	ldr	r0, [pc, #12]	@ (8001f00 <MX_TIM8_Init+0x194>)
 8001ef4:	f000 f8f2 	bl	80020dc <HAL_TIM_MspPostInit>

}
 8001ef8:	bf00      	nop
 8001efa:	3768      	adds	r7, #104	@ 0x68
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000540 	.word	0x20000540
 8001f04:	40010400 	.word	0x40010400

08001f08 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a23      	ldr	r2, [pc, #140]	@ (8001fa4 <HAL_TIM_Base_MspInit+0x9c>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d114      	bne.n	8001f44 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f1a:	4b23      	ldr	r3, [pc, #140]	@ (8001fa8 <HAL_TIM_Base_MspInit+0xa0>)
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1e:	4a22      	ldr	r2, [pc, #136]	@ (8001fa8 <HAL_TIM_Base_MspInit+0xa0>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f26:	4b20      	ldr	r3, [pc, #128]	@ (8001fa8 <HAL_TIM_Base_MspInit+0xa0>)
 8001f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001f32:	2200      	movs	r2, #0
 8001f34:	2100      	movs	r1, #0
 8001f36:	2019      	movs	r0, #25
 8001f38:	f001 fa37 	bl	80033aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f3c:	2019      	movs	r0, #25
 8001f3e:	f001 fa50 	bl	80033e2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001f42:	e02a      	b.n	8001f9a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM6)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a18      	ldr	r2, [pc, #96]	@ (8001fac <HAL_TIM_Base_MspInit+0xa4>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d114      	bne.n	8001f78 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f4e:	4b16      	ldr	r3, [pc, #88]	@ (8001fa8 <HAL_TIM_Base_MspInit+0xa0>)
 8001f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f52:	4a15      	ldr	r2, [pc, #84]	@ (8001fa8 <HAL_TIM_Base_MspInit+0xa0>)
 8001f54:	f043 0310 	orr.w	r3, r3, #16
 8001f58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f5a:	4b13      	ldr	r3, [pc, #76]	@ (8001fa8 <HAL_TIM_Base_MspInit+0xa0>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5e:	f003 0310 	and.w	r3, r3, #16
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001f66:	2200      	movs	r2, #0
 8001f68:	2100      	movs	r1, #0
 8001f6a:	2036      	movs	r0, #54	@ 0x36
 8001f6c:	f001 fa1d 	bl	80033aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f70:	2036      	movs	r0, #54	@ 0x36
 8001f72:	f001 fa36 	bl	80033e2 <HAL_NVIC_EnableIRQ>
}
 8001f76:	e010      	b.n	8001f9a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM8)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a0c      	ldr	r2, [pc, #48]	@ (8001fb0 <HAL_TIM_Base_MspInit+0xa8>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d10b      	bne.n	8001f9a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001f82:	4b09      	ldr	r3, [pc, #36]	@ (8001fa8 <HAL_TIM_Base_MspInit+0xa0>)
 8001f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f86:	4a08      	ldr	r2, [pc, #32]	@ (8001fa8 <HAL_TIM_Base_MspInit+0xa0>)
 8001f88:	f043 0302 	orr.w	r3, r3, #2
 8001f8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f8e:	4b06      	ldr	r3, [pc, #24]	@ (8001fa8 <HAL_TIM_Base_MspInit+0xa0>)
 8001f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
}
 8001f9a:	bf00      	nop
 8001f9c:	3718      	adds	r7, #24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40010000 	.word	0x40010000
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	40001000 	.word	0x40001000
 8001fb0:	40010400 	.word	0x40010400

08001fb4 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08c      	sub	sp, #48	@ 0x30
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fbc:	f107 031c 	add.w	r3, r7, #28
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	60da      	str	r2, [r3, #12]
 8001fca:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fd4:	d146      	bne.n	8002064 <HAL_TIM_IC_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fd6:	4b3c      	ldr	r3, [pc, #240]	@ (80020c8 <HAL_TIM_IC_MspInit+0x114>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fda:	4a3b      	ldr	r2, [pc, #236]	@ (80020c8 <HAL_TIM_IC_MspInit+0x114>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fe2:	4b39      	ldr	r3, [pc, #228]	@ (80020c8 <HAL_TIM_IC_MspInit+0x114>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	61bb      	str	r3, [r7, #24]
 8001fec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fee:	4b36      	ldr	r3, [pc, #216]	@ (80020c8 <HAL_TIM_IC_MspInit+0x114>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff2:	4a35      	ldr	r2, [pc, #212]	@ (80020c8 <HAL_TIM_IC_MspInit+0x114>)
 8001ff4:	f043 0302 	orr.w	r3, r3, #2
 8001ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ffa:	4b33      	ldr	r3, [pc, #204]	@ (80020c8 <HAL_TIM_IC_MspInit+0x114>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	617b      	str	r3, [r7, #20]
 8002004:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002006:	4b30      	ldr	r3, [pc, #192]	@ (80020c8 <HAL_TIM_IC_MspInit+0x114>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200a:	4a2f      	ldr	r2, [pc, #188]	@ (80020c8 <HAL_TIM_IC_MspInit+0x114>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	6313      	str	r3, [r2, #48]	@ 0x30
 8002012:	4b2d      	ldr	r3, [pc, #180]	@ (80020c8 <HAL_TIM_IC_MspInit+0x114>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = B_R_Pin;
 800201e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002024:	2302      	movs	r3, #2
 8002026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202c:	2300      	movs	r3, #0
 800202e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002030:	2301      	movs	r3, #1
 8002032:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(B_R_GPIO_Port, &GPIO_InitStruct);
 8002034:	f107 031c 	add.w	r3, r7, #28
 8002038:	4619      	mov	r1, r3
 800203a:	4824      	ldr	r0, [pc, #144]	@ (80020cc <HAL_TIM_IC_MspInit+0x118>)
 800203c:	f001 fe42 	bl	8003cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A_R_Pin;
 8002040:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002044:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002046:	2302      	movs	r3, #2
 8002048:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	2300      	movs	r3, #0
 800204c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204e:	2300      	movs	r3, #0
 8002050:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002052:	2301      	movs	r3, #1
 8002054:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(A_R_GPIO_Port, &GPIO_InitStruct);
 8002056:	f107 031c 	add.w	r3, r7, #28
 800205a:	4619      	mov	r1, r3
 800205c:	481c      	ldr	r0, [pc, #112]	@ (80020d0 <HAL_TIM_IC_MspInit+0x11c>)
 800205e:	f001 fe31 	bl	8003cc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002062:	e02d      	b.n	80020c0 <HAL_TIM_IC_MspInit+0x10c>
  else if(tim_icHandle->Instance==TIM4)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a1a      	ldr	r2, [pc, #104]	@ (80020d4 <HAL_TIM_IC_MspInit+0x120>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d128      	bne.n	80020c0 <HAL_TIM_IC_MspInit+0x10c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800206e:	4b16      	ldr	r3, [pc, #88]	@ (80020c8 <HAL_TIM_IC_MspInit+0x114>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002072:	4a15      	ldr	r2, [pc, #84]	@ (80020c8 <HAL_TIM_IC_MspInit+0x114>)
 8002074:	f043 0304 	orr.w	r3, r3, #4
 8002078:	6413      	str	r3, [r2, #64]	@ 0x40
 800207a:	4b13      	ldr	r3, [pc, #76]	@ (80020c8 <HAL_TIM_IC_MspInit+0x114>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002086:	4b10      	ldr	r3, [pc, #64]	@ (80020c8 <HAL_TIM_IC_MspInit+0x114>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208a:	4a0f      	ldr	r2, [pc, #60]	@ (80020c8 <HAL_TIM_IC_MspInit+0x114>)
 800208c:	f043 0308 	orr.w	r3, r3, #8
 8002090:	6313      	str	r3, [r2, #48]	@ 0x30
 8002092:	4b0d      	ldr	r3, [pc, #52]	@ (80020c8 <HAL_TIM_IC_MspInit+0x114>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	60bb      	str	r3, [r7, #8]
 800209c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = A_L_Pin|B_L_Pin;
 800209e:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80020a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a4:	2302      	movs	r3, #2
 80020a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ac:	2300      	movs	r3, #0
 80020ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80020b0:	2302      	movs	r3, #2
 80020b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020b4:	f107 031c 	add.w	r3, r7, #28
 80020b8:	4619      	mov	r1, r3
 80020ba:	4807      	ldr	r0, [pc, #28]	@ (80020d8 <HAL_TIM_IC_MspInit+0x124>)
 80020bc:	f001 fe02 	bl	8003cc4 <HAL_GPIO_Init>
}
 80020c0:	bf00      	nop
 80020c2:	3730      	adds	r7, #48	@ 0x30
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40020400 	.word	0x40020400
 80020d0:	40020000 	.word	0x40020000
 80020d4:	40000800 	.word	0x40000800
 80020d8:	40020c00 	.word	0x40020c00

080020dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08c      	sub	sp, #48	@ 0x30
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e4:	f107 031c 	add.w	r3, r7, #28
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a3f      	ldr	r2, [pc, #252]	@ (80021f8 <HAL_TIM_MspPostInit+0x11c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d11d      	bne.n	800213a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020fe:	4b3f      	ldr	r3, [pc, #252]	@ (80021fc <HAL_TIM_MspPostInit+0x120>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002102:	4a3e      	ldr	r2, [pc, #248]	@ (80021fc <HAL_TIM_MspPostInit+0x120>)
 8002104:	f043 0310 	orr.w	r3, r3, #16
 8002108:	6313      	str	r3, [r2, #48]	@ 0x30
 800210a:	4b3c      	ldr	r3, [pc, #240]	@ (80021fc <HAL_TIM_MspPostInit+0x120>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210e:	f003 0310 	and.w	r3, r3, #16
 8002112:	61bb      	str	r3, [r7, #24]
 8002114:	69bb      	ldr	r3, [r7, #24]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWM1_L_Pin|PWM2_L_Pin|PWM3_L_Pin|PWM4_L_Pin
 8002116:	f44f 537c 	mov.w	r3, #16128	@ 0x3f00
 800211a:	61fb      	str	r3, [r7, #28]
                          |PWM5_L_Pin|PWM6_L_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211c:	2302      	movs	r3, #2
 800211e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002124:	2300      	movs	r3, #0
 8002126:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002128:	2301      	movs	r3, #1
 800212a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800212c:	f107 031c 	add.w	r3, r7, #28
 8002130:	4619      	mov	r1, r3
 8002132:	4833      	ldr	r0, [pc, #204]	@ (8002200 <HAL_TIM_MspPostInit+0x124>)
 8002134:	f001 fdc6 	bl	8003cc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002138:	e05a      	b.n	80021f0 <HAL_TIM_MspPostInit+0x114>
  else if(timHandle->Instance==TIM8)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a31      	ldr	r2, [pc, #196]	@ (8002204 <HAL_TIM_MspPostInit+0x128>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d155      	bne.n	80021f0 <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002144:	4b2d      	ldr	r3, [pc, #180]	@ (80021fc <HAL_TIM_MspPostInit+0x120>)
 8002146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002148:	4a2c      	ldr	r2, [pc, #176]	@ (80021fc <HAL_TIM_MspPostInit+0x120>)
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002150:	4b2a      	ldr	r3, [pc, #168]	@ (80021fc <HAL_TIM_MspPostInit+0x120>)
 8002152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	617b      	str	r3, [r7, #20]
 800215a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800215c:	4b27      	ldr	r3, [pc, #156]	@ (80021fc <HAL_TIM_MspPostInit+0x120>)
 800215e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002160:	4a26      	ldr	r2, [pc, #152]	@ (80021fc <HAL_TIM_MspPostInit+0x120>)
 8002162:	f043 0302 	orr.w	r3, r3, #2
 8002166:	6313      	str	r3, [r2, #48]	@ 0x30
 8002168:	4b24      	ldr	r3, [pc, #144]	@ (80021fc <HAL_TIM_MspPostInit+0x120>)
 800216a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002174:	4b21      	ldr	r3, [pc, #132]	@ (80021fc <HAL_TIM_MspPostInit+0x120>)
 8002176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002178:	4a20      	ldr	r2, [pc, #128]	@ (80021fc <HAL_TIM_MspPostInit+0x120>)
 800217a:	f043 0304 	orr.w	r3, r3, #4
 800217e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002180:	4b1e      	ldr	r3, [pc, #120]	@ (80021fc <HAL_TIM_MspPostInit+0x120>)
 8002182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM1_R_Pin;
 800218c:	2320      	movs	r3, #32
 800218e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002190:	2302      	movs	r3, #2
 8002192:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002198:	2300      	movs	r3, #0
 800219a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800219c:	2303      	movs	r3, #3
 800219e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM1_R_GPIO_Port, &GPIO_InitStruct);
 80021a0:	f107 031c 	add.w	r3, r7, #28
 80021a4:	4619      	mov	r1, r3
 80021a6:	4818      	ldr	r0, [pc, #96]	@ (8002208 <HAL_TIM_MspPostInit+0x12c>)
 80021a8:	f001 fd8c 	bl	8003cc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM3_R_Pin|PWM5_R_Pin;
 80021ac:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80021b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b2:	2302      	movs	r3, #2
 80021b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ba:	2300      	movs	r3, #0
 80021bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80021be:	2303      	movs	r3, #3
 80021c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c2:	f107 031c 	add.w	r3, r7, #28
 80021c6:	4619      	mov	r1, r3
 80021c8:	4810      	ldr	r0, [pc, #64]	@ (800220c <HAL_TIM_MspPostInit+0x130>)
 80021ca:	f001 fd7b 	bl	8003cc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM2_R_Pin|PWM4_R_Pin|PWM6_R_Pin;
 80021ce:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80021d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d4:	2302      	movs	r3, #2
 80021d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021dc:	2300      	movs	r3, #0
 80021de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80021e0:	2303      	movs	r3, #3
 80021e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021e4:	f107 031c 	add.w	r3, r7, #28
 80021e8:	4619      	mov	r1, r3
 80021ea:	4809      	ldr	r0, [pc, #36]	@ (8002210 <HAL_TIM_MspPostInit+0x134>)
 80021ec:	f001 fd6a 	bl	8003cc4 <HAL_GPIO_Init>
}
 80021f0:	bf00      	nop
 80021f2:	3730      	adds	r7, #48	@ 0x30
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40010000 	.word	0x40010000
 80021fc:	40023800 	.word	0x40023800
 8002200:	40021000 	.word	0x40021000
 8002204:	40010400 	.word	0x40010400
 8002208:	40020000 	.word	0x40020000
 800220c:	40020400 	.word	0x40020400
 8002210:	40020800 	.word	0x40020800

08002214 <MX_USB_OTG_FS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_USB_Init(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
	...

08002224 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002224:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800225c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002228:	480d      	ldr	r0, [pc, #52]	@ (8002260 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800222a:	490e      	ldr	r1, [pc, #56]	@ (8002264 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800222c:	4a0e      	ldr	r2, [pc, #56]	@ (8002268 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800222e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002230:	e002      	b.n	8002238 <LoopCopyDataInit>

08002232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002236:	3304      	adds	r3, #4

08002238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800223a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800223c:	d3f9      	bcc.n	8002232 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800223e:	4a0b      	ldr	r2, [pc, #44]	@ (800226c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002240:	4c0b      	ldr	r4, [pc, #44]	@ (8002270 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002244:	e001      	b.n	800224a <LoopFillZerobss>

08002246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002248:	3204      	adds	r2, #4

0800224a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800224a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800224c:	d3fb      	bcc.n	8002246 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800224e:	f7ff fbbd 	bl	80019cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002252:	f004 fd3d 	bl	8006cd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002256:	f7ff fa47 	bl	80016e8 <main>
  bx  lr    
 800225a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800225c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002264:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002268:	08008410 	.word	0x08008410
  ldr r2, =_sbss
 800226c:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8002270:	200006c8 	.word	0x200006c8

08002274 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002274:	e7fe      	b.n	8002274 <ADC_IRQHandler>

08002276 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800227a:	2003      	movs	r0, #3
 800227c:	f001 f88a 	bl	8003394 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002280:	200f      	movs	r0, #15
 8002282:	f000 f805 	bl	8002290 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002286:	f7ff fb09 	bl	800189c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002298:	4b12      	ldr	r3, [pc, #72]	@ (80022e4 <HAL_InitTick+0x54>)
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	4b12      	ldr	r3, [pc, #72]	@ (80022e8 <HAL_InitTick+0x58>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	4619      	mov	r1, r3
 80022a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ae:	4618      	mov	r0, r3
 80022b0:	f001 f8a5 	bl	80033fe <HAL_SYSTICK_Config>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e00e      	b.n	80022dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b0f      	cmp	r3, #15
 80022c2:	d80a      	bhi.n	80022da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022c4:	2200      	movs	r2, #0
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	f04f 30ff 	mov.w	r0, #4294967295
 80022cc:	f001 f86d 	bl	80033aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022d0:	4a06      	ldr	r2, [pc, #24]	@ (80022ec <HAL_InitTick+0x5c>)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
 80022d8:	e000      	b.n	80022dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	20000030 	.word	0x20000030
 80022e8:	20000038 	.word	0x20000038
 80022ec:	20000034 	.word	0x20000034

080022f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022f4:	4b06      	ldr	r3, [pc, #24]	@ (8002310 <HAL_IncTick+0x20>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	461a      	mov	r2, r3
 80022fa:	4b06      	ldr	r3, [pc, #24]	@ (8002314 <HAL_IncTick+0x24>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4413      	add	r3, r2
 8002300:	4a04      	ldr	r2, [pc, #16]	@ (8002314 <HAL_IncTick+0x24>)
 8002302:	6013      	str	r3, [r2, #0]
}
 8002304:	bf00      	nop
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	20000038 	.word	0x20000038
 8002314:	2000058c 	.word	0x2000058c

08002318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  return uwTick;
 800231c:	4b03      	ldr	r3, [pc, #12]	@ (800232c <HAL_GetTick+0x14>)
 800231e:	681b      	ldr	r3, [r3, #0]
}
 8002320:	4618      	mov	r0, r3
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	2000058c 	.word	0x2000058c

08002330 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002338:	2300      	movs	r3, #0
 800233a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e031      	b.n	80023aa <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234a:	2b00      	cmp	r3, #0
 800234c:	d109      	bne.n	8002362 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7fe fd94 	bl	8000e7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002366:	f003 0310 	and.w	r3, r3, #16
 800236a:	2b00      	cmp	r3, #0
 800236c:	d116      	bne.n	800239c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002372:	4b10      	ldr	r3, [pc, #64]	@ (80023b4 <HAL_ADC_Init+0x84>)
 8002374:	4013      	ands	r3, r2
 8002376:	f043 0202 	orr.w	r2, r3, #2
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 fa88 	bl	8002894 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238e:	f023 0303 	bic.w	r3, r3, #3
 8002392:	f043 0201 	orr.w	r2, r3, #1
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	641a      	str	r2, [r3, #64]	@ 0x40
 800239a:	e001      	b.n	80023a0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80023a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	ffffeefd 	.word	0xffffeefd

080023b8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d101      	bne.n	80023d6 <HAL_ADC_Start_DMA+0x1e>
 80023d2:	2302      	movs	r3, #2
 80023d4:	e0d4      	b.n	8002580 <HAL_ADC_Start_DMA+0x1c8>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d018      	beq.n	800241e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0201 	orr.w	r2, r2, #1
 80023fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80023fc:	4b62      	ldr	r3, [pc, #392]	@ (8002588 <HAL_ADC_Start_DMA+0x1d0>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a62      	ldr	r2, [pc, #392]	@ (800258c <HAL_ADC_Start_DMA+0x1d4>)
 8002402:	fba2 2303 	umull	r2, r3, r2, r3
 8002406:	0c9a      	lsrs	r2, r3, #18
 8002408:	4613      	mov	r3, r2
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	4413      	add	r3, r2
 800240e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002410:	e002      	b.n	8002418 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	3b01      	subs	r3, #1
 8002416:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1f9      	bne.n	8002412 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	2b01      	cmp	r3, #1
 800242a:	f040 809c 	bne.w	8002566 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002432:	4b57      	ldr	r3, [pc, #348]	@ (8002590 <HAL_ADC_Start_DMA+0x1d8>)
 8002434:	4013      	ands	r3, r2
 8002436:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002448:	2b00      	cmp	r3, #0
 800244a:	d007      	beq.n	800245c <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002450:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002454:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002460:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002464:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002468:	d106      	bne.n	8002478 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246e:	f023 0206 	bic.w	r2, r3, #6
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	645a      	str	r2, [r3, #68]	@ 0x44
 8002476:	e002      	b.n	800247e <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800248a:	4a42      	ldr	r2, [pc, #264]	@ (8002594 <HAL_ADC_Start_DMA+0x1dc>)
 800248c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002492:	4a41      	ldr	r2, [pc, #260]	@ (8002598 <HAL_ADC_Start_DMA+0x1e0>)
 8002494:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800249a:	4a40      	ldr	r2, [pc, #256]	@ (800259c <HAL_ADC_Start_DMA+0x1e4>)
 800249c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80024a6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80024b6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689a      	ldr	r2, [r3, #8]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024c6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	334c      	adds	r3, #76	@ 0x4c
 80024d2:	4619      	mov	r1, r3
 80024d4:	68ba      	ldr	r2, [r7, #8]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f001 f92a 	bl	8003730 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80024dc:	4b30      	ldr	r3, [pc, #192]	@ (80025a0 <HAL_ADC_Start_DMA+0x1e8>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 031f 	and.w	r3, r3, #31
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10f      	bne.n	8002508 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d143      	bne.n	800257e <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002504:	609a      	str	r2, [r3, #8]
 8002506:	e03a      	b.n	800257e <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a25      	ldr	r2, [pc, #148]	@ (80025a4 <HAL_ADC_Start_DMA+0x1ec>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d10e      	bne.n	8002530 <HAL_ADC_Start_DMA+0x178>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d107      	bne.n	8002530 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800252e:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002530:	4b1b      	ldr	r3, [pc, #108]	@ (80025a0 <HAL_ADC_Start_DMA+0x1e8>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f003 0310 	and.w	r3, r3, #16
 8002538:	2b00      	cmp	r3, #0
 800253a:	d120      	bne.n	800257e <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a19      	ldr	r2, [pc, #100]	@ (80025a8 <HAL_ADC_Start_DMA+0x1f0>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d11b      	bne.n	800257e <HAL_ADC_Start_DMA+0x1c6>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d114      	bne.n	800257e <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689a      	ldr	r2, [r3, #8]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002562:	609a      	str	r2, [r3, #8]
 8002564:	e00b      	b.n	800257e <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256a:	f043 0210 	orr.w	r2, r3, #16
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002576:	f043 0201 	orr.w	r2, r3, #1
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	20000030 	.word	0x20000030
 800258c:	431bde83 	.word	0x431bde83
 8002590:	fffff8fe 	.word	0xfffff8fe
 8002594:	08002a89 	.word	0x08002a89
 8002598:	08002b43 	.word	0x08002b43
 800259c:	08002b5f 	.word	0x08002b5f
 80025a0:	40012300 	.word	0x40012300
 80025a4:	40012000 	.word	0x40012000
 80025a8:	40012200 	.word	0x40012200

080025ac <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d101      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x1c>
 8002600:	2302      	movs	r3, #2
 8002602:	e136      	b.n	8002872 <HAL_ADC_ConfigChannel+0x28a>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2b09      	cmp	r3, #9
 8002612:	d93a      	bls.n	800268a <HAL_ADC_ConfigChannel+0xa2>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800261c:	d035      	beq.n	800268a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68d9      	ldr	r1, [r3, #12]
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	b29b      	uxth	r3, r3
 800262a:	461a      	mov	r2, r3
 800262c:	4613      	mov	r3, r2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	4413      	add	r3, r2
 8002632:	3b1e      	subs	r3, #30
 8002634:	2207      	movs	r2, #7
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43da      	mvns	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	400a      	ands	r2, r1
 8002642:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a8d      	ldr	r2, [pc, #564]	@ (8002880 <HAL_ADC_ConfigChannel+0x298>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d10a      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68d9      	ldr	r1, [r3, #12]
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	061a      	lsls	r2, r3, #24
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002662:	e035      	b.n	80026d0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68d9      	ldr	r1, [r3, #12]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	b29b      	uxth	r3, r3
 8002674:	4618      	mov	r0, r3
 8002676:	4603      	mov	r3, r0
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	4403      	add	r3, r0
 800267c:	3b1e      	subs	r3, #30
 800267e:	409a      	lsls	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002688:	e022      	b.n	80026d0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6919      	ldr	r1, [r3, #16]
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	b29b      	uxth	r3, r3
 8002696:	461a      	mov	r2, r3
 8002698:	4613      	mov	r3, r2
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	4413      	add	r3, r2
 800269e:	2207      	movs	r2, #7
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43da      	mvns	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	400a      	ands	r2, r1
 80026ac:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6919      	ldr	r1, [r3, #16]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	b29b      	uxth	r3, r3
 80026be:	4618      	mov	r0, r3
 80026c0:	4603      	mov	r3, r0
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	4403      	add	r3, r0
 80026c6:	409a      	lsls	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b06      	cmp	r3, #6
 80026d6:	d824      	bhi.n	8002722 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685a      	ldr	r2, [r3, #4]
 80026e2:	4613      	mov	r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	4413      	add	r3, r2
 80026e8:	3b05      	subs	r3, #5
 80026ea:	221f      	movs	r2, #31
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	43da      	mvns	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	400a      	ands	r2, r1
 80026f8:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	b29b      	uxth	r3, r3
 8002706:	4618      	mov	r0, r3
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	4613      	mov	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	3b05      	subs	r3, #5
 8002714:	fa00 f203 	lsl.w	r2, r0, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	430a      	orrs	r2, r1
 800271e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002720:	e04c      	b.n	80027bc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2b0c      	cmp	r3, #12
 8002728:	d824      	bhi.n	8002774 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	4613      	mov	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4413      	add	r3, r2
 800273a:	3b23      	subs	r3, #35	@ 0x23
 800273c:	221f      	movs	r2, #31
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43da      	mvns	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	400a      	ands	r2, r1
 800274a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	b29b      	uxth	r3, r3
 8002758:	4618      	mov	r0, r3
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	4613      	mov	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	3b23      	subs	r3, #35	@ 0x23
 8002766:	fa00 f203 	lsl.w	r2, r0, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	631a      	str	r2, [r3, #48]	@ 0x30
 8002772:	e023      	b.n	80027bc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	4613      	mov	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4413      	add	r3, r2
 8002784:	3b41      	subs	r3, #65	@ 0x41
 8002786:	221f      	movs	r2, #31
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	43da      	mvns	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	400a      	ands	r2, r1
 8002794:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	4618      	mov	r0, r3
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	4613      	mov	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	3b41      	subs	r3, #65	@ 0x41
 80027b0:	fa00 f203 	lsl.w	r2, r0, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a30      	ldr	r2, [pc, #192]	@ (8002884 <HAL_ADC_ConfigChannel+0x29c>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d10a      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x1f4>
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80027ce:	d105      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80027d0:	4b2d      	ldr	r3, [pc, #180]	@ (8002888 <HAL_ADC_ConfigChannel+0x2a0>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	4a2c      	ldr	r2, [pc, #176]	@ (8002888 <HAL_ADC_ConfigChannel+0x2a0>)
 80027d6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80027da:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a28      	ldr	r2, [pc, #160]	@ (8002884 <HAL_ADC_ConfigChannel+0x29c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d10f      	bne.n	8002806 <HAL_ADC_ConfigChannel+0x21e>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2b12      	cmp	r3, #18
 80027ec:	d10b      	bne.n	8002806 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80027ee:	4b26      	ldr	r3, [pc, #152]	@ (8002888 <HAL_ADC_ConfigChannel+0x2a0>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	4a25      	ldr	r2, [pc, #148]	@ (8002888 <HAL_ADC_ConfigChannel+0x2a0>)
 80027f4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80027f8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80027fa:	4b23      	ldr	r3, [pc, #140]	@ (8002888 <HAL_ADC_ConfigChannel+0x2a0>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	4a22      	ldr	r2, [pc, #136]	@ (8002888 <HAL_ADC_ConfigChannel+0x2a0>)
 8002800:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002804:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a1e      	ldr	r2, [pc, #120]	@ (8002884 <HAL_ADC_ConfigChannel+0x29c>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d12b      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x280>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a1a      	ldr	r2, [pc, #104]	@ (8002880 <HAL_ADC_ConfigChannel+0x298>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d003      	beq.n	8002822 <HAL_ADC_ConfigChannel+0x23a>
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2b11      	cmp	r3, #17
 8002820:	d122      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002822:	4b19      	ldr	r3, [pc, #100]	@ (8002888 <HAL_ADC_ConfigChannel+0x2a0>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	4a18      	ldr	r2, [pc, #96]	@ (8002888 <HAL_ADC_ConfigChannel+0x2a0>)
 8002828:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800282c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800282e:	4b16      	ldr	r3, [pc, #88]	@ (8002888 <HAL_ADC_ConfigChannel+0x2a0>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	4a15      	ldr	r2, [pc, #84]	@ (8002888 <HAL_ADC_ConfigChannel+0x2a0>)
 8002834:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002838:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a10      	ldr	r2, [pc, #64]	@ (8002880 <HAL_ADC_ConfigChannel+0x298>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d111      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002844:	4b11      	ldr	r3, [pc, #68]	@ (800288c <HAL_ADC_ConfigChannel+0x2a4>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a11      	ldr	r2, [pc, #68]	@ (8002890 <HAL_ADC_ConfigChannel+0x2a8>)
 800284a:	fba2 2303 	umull	r2, r3, r2, r3
 800284e:	0c9a      	lsrs	r2, r3, #18
 8002850:	4613      	mov	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800285a:	e002      	b.n	8002862 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	3b01      	subs	r3, #1
 8002860:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1f9      	bne.n	800285c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	10000012 	.word	0x10000012
 8002884:	40012000 	.word	0x40012000
 8002888:	40012300 	.word	0x40012300
 800288c:	20000030 	.word	0x20000030
 8002890:	431bde83 	.word	0x431bde83

08002894 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800289c:	4b78      	ldr	r3, [pc, #480]	@ (8002a80 <ADC_Init+0x1ec>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	4a77      	ldr	r2, [pc, #476]	@ (8002a80 <ADC_Init+0x1ec>)
 80028a2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80028a6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80028a8:	4b75      	ldr	r3, [pc, #468]	@ (8002a80 <ADC_Init+0x1ec>)
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	4973      	ldr	r1, [pc, #460]	@ (8002a80 <ADC_Init+0x1ec>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6859      	ldr	r1, [r3, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	021a      	lsls	r2, r3, #8
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	430a      	orrs	r2, r1
 80028d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80028e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6859      	ldr	r1, [r3, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800290a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6899      	ldr	r1, [r3, #8]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002922:	4a58      	ldr	r2, [pc, #352]	@ (8002a84 <ADC_Init+0x1f0>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d022      	beq.n	800296e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002936:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6899      	ldr	r1, [r3, #8]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	430a      	orrs	r2, r1
 8002948:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002958:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6899      	ldr	r1, [r3, #8]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	430a      	orrs	r2, r1
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	e00f      	b.n	800298e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800297c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800298c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 0202 	bic.w	r2, r2, #2
 800299c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6899      	ldr	r1, [r3, #8]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	005a      	lsls	r2, r3, #1
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d01b      	beq.n	80029f4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	685a      	ldr	r2, [r3, #4]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029ca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685a      	ldr	r2, [r3, #4]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80029da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6859      	ldr	r1, [r3, #4]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e6:	3b01      	subs	r3, #1
 80029e8:	035a      	lsls	r2, r3, #13
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	e007      	b.n	8002a04 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a02:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002a12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	051a      	lsls	r2, r3, #20
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002a38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6899      	ldr	r1, [r3, #8]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a46:	025a      	lsls	r2, r3, #9
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6899      	ldr	r1, [r3, #8]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	029a      	lsls	r2, r3, #10
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	609a      	str	r2, [r3, #8]
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	40012300 	.word	0x40012300
 8002a84:	0f000001 	.word	0x0f000001

08002a88 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a94:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d13c      	bne.n	8002b1c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d12b      	bne.n	8002b14 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d127      	bne.n	8002b14 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aca:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d006      	beq.n	8002ae0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d119      	bne.n	8002b14 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685a      	ldr	r2, [r3, #4]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0220 	bic.w	r2, r2, #32
 8002aee:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d105      	bne.n	8002b14 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0c:	f043 0201 	orr.w	r2, r3, #1
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f7ff fd49 	bl	80025ac <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b1a:	e00e      	b.n	8002b3a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b20:	f003 0310 	and.w	r3, r3, #16
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d003      	beq.n	8002b30 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f7ff fd53 	bl	80025d4 <HAL_ADC_ErrorCallback>
}
 8002b2e:	e004      	b.n	8002b3a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	4798      	blx	r3
}
 8002b3a:	bf00      	nop
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b084      	sub	sp, #16
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b4e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f7ff fd35 	bl	80025c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b56:	bf00      	nop
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b084      	sub	sp, #16
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b6a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2240      	movs	r2, #64	@ 0x40
 8002b70:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b76:	f043 0204 	orr.w	r2, r3, #4
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f7ff fd28 	bl	80025d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b84:	bf00      	nop
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e0ed      	b.n	8002d7a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d102      	bne.n	8002bb0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7fe faec 	bl	8001188 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0201 	orr.w	r2, r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bc0:	f7ff fbaa 	bl	8002318 <HAL_GetTick>
 8002bc4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002bc6:	e012      	b.n	8002bee <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002bc8:	f7ff fba6 	bl	8002318 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b0a      	cmp	r3, #10
 8002bd4:	d90b      	bls.n	8002bee <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bda:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2205      	movs	r2, #5
 8002be6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e0c5      	b.n	8002d7a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0e5      	beq.n	8002bc8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0202 	bic.w	r2, r2, #2
 8002c0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c0c:	f7ff fb84 	bl	8002318 <HAL_GetTick>
 8002c10:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c12:	e012      	b.n	8002c3a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c14:	f7ff fb80 	bl	8002318 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b0a      	cmp	r3, #10
 8002c20:	d90b      	bls.n	8002c3a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c26:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2205      	movs	r2, #5
 8002c32:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e09f      	b.n	8002d7a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1e5      	bne.n	8002c14 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	7e1b      	ldrb	r3, [r3, #24]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d108      	bne.n	8002c62 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	e007      	b.n	8002c72 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c70:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	7e5b      	ldrb	r3, [r3, #25]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d108      	bne.n	8002c8c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	e007      	b.n	8002c9c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	7e9b      	ldrb	r3, [r3, #26]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d108      	bne.n	8002cb6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0220 	orr.w	r2, r2, #32
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	e007      	b.n	8002cc6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0220 	bic.w	r2, r2, #32
 8002cc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	7edb      	ldrb	r3, [r3, #27]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d108      	bne.n	8002ce0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 0210 	bic.w	r2, r2, #16
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	e007      	b.n	8002cf0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0210 	orr.w	r2, r2, #16
 8002cee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	7f1b      	ldrb	r3, [r3, #28]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d108      	bne.n	8002d0a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0208 	orr.w	r2, r2, #8
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	e007      	b.n	8002d1a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 0208 	bic.w	r2, r2, #8
 8002d18:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	7f5b      	ldrb	r3, [r3, #29]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d108      	bne.n	8002d34 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f042 0204 	orr.w	r2, r2, #4
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	e007      	b.n	8002d44 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 0204 	bic.w	r2, r2, #4
 8002d42:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	431a      	orrs	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	ea42 0103 	orr.w	r1, r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	1e5a      	subs	r2, r3, #1
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b08a      	sub	sp, #40	@ 0x28
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002dbe:	6a3b      	ldr	r3, [r7, #32]
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d07c      	beq.n	8002ec2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d023      	beq.n	8002e1a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d003      	beq.n	8002dec <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 f983 	bl	80030f0 <HAL_CAN_TxMailbox0CompleteCallback>
 8002dea:	e016      	b.n	8002e1a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	f003 0304 	and.w	r3, r3, #4
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d004      	beq.n	8002e00 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002dfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dfe:	e00c      	b.n	8002e1a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d004      	beq.n	8002e14 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e10:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e12:	e002      	b.n	8002e1a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 f989 	bl	800312c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d024      	beq.n	8002e6e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e2c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d003      	beq.n	8002e40 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 f963 	bl	8003104 <HAL_CAN_TxMailbox1CompleteCallback>
 8002e3e:	e016      	b.n	8002e6e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d004      	beq.n	8002e54 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002e50:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e52:	e00c      	b.n	8002e6e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d004      	beq.n	8002e68 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e64:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e66:	e002      	b.n	8002e6e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 f969 	bl	8003140 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d024      	beq.n	8002ec2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002e80:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d003      	beq.n	8002e94 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 f943 	bl	8003118 <HAL_CAN_TxMailbox2CompleteCallback>
 8002e92:	e016      	b.n	8002ec2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d004      	beq.n	8002ea8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ea4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ea6:	e00c      	b.n	8002ec2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d004      	beq.n	8002ebc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eba:	e002      	b.n	8002ec2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 f949 	bl	8003154 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	f003 0308 	and.w	r3, r3, #8
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00c      	beq.n	8002ee6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	f003 0310 	and.w	r3, r3, #16
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d007      	beq.n	8002ee6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002edc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2210      	movs	r2, #16
 8002ee4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00b      	beq.n	8002f08 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d006      	beq.n	8002f08 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2208      	movs	r2, #8
 8002f00:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f93a 	bl	800317c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002f08:	6a3b      	ldr	r3, [r7, #32]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d009      	beq.n	8002f26 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	f003 0303 	and.w	r3, r3, #3
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d002      	beq.n	8002f26 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 f921 	bl	8003168 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002f26:	6a3b      	ldr	r3, [r7, #32]
 8002f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00c      	beq.n	8002f4a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	f003 0310 	and.w	r3, r3, #16
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d007      	beq.n	8002f4a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f40:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2210      	movs	r2, #16
 8002f48:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	f003 0320 	and.w	r3, r3, #32
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00b      	beq.n	8002f6c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	f003 0308 	and.w	r3, r3, #8
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d006      	beq.n	8002f6c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2208      	movs	r2, #8
 8002f64:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f91c 	bl	80031a4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	f003 0310 	and.w	r3, r3, #16
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d009      	beq.n	8002f8a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	f003 0303 	and.w	r3, r3, #3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d002      	beq.n	8002f8a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 f903 	bl	8003190 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002f8a:	6a3b      	ldr	r3, [r7, #32]
 8002f8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00b      	beq.n	8002fac <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f003 0310 	and.w	r3, r3, #16
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d006      	beq.n	8002fac <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2210      	movs	r2, #16
 8002fa4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f906 	bl	80031b8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00b      	beq.n	8002fce <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	f003 0308 	and.w	r3, r3, #8
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d006      	beq.n	8002fce <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2208      	movs	r2, #8
 8002fc6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f8ff 	bl	80031cc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d07b      	beq.n	80030d0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	f003 0304 	and.w	r3, r3, #4
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d072      	beq.n	80030c8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d008      	beq.n	8002ffe <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff8:	f043 0301 	orr.w	r3, r3, #1
 8002ffc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003004:	2b00      	cmp	r3, #0
 8003006:	d008      	beq.n	800301a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800300e:	2b00      	cmp	r3, #0
 8003010:	d003      	beq.n	800301a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003014:	f043 0302 	orr.w	r3, r3, #2
 8003018:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800301a:	6a3b      	ldr	r3, [r7, #32]
 800301c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003020:	2b00      	cmp	r3, #0
 8003022:	d008      	beq.n	8003036 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800302e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003030:	f043 0304 	orr.w	r3, r3, #4
 8003034:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003036:	6a3b      	ldr	r3, [r7, #32]
 8003038:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800303c:	2b00      	cmp	r3, #0
 800303e:	d043      	beq.n	80030c8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003046:	2b00      	cmp	r3, #0
 8003048:	d03e      	beq.n	80030c8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003050:	2b60      	cmp	r3, #96	@ 0x60
 8003052:	d02b      	beq.n	80030ac <HAL_CAN_IRQHandler+0x32a>
 8003054:	2b60      	cmp	r3, #96	@ 0x60
 8003056:	d82e      	bhi.n	80030b6 <HAL_CAN_IRQHandler+0x334>
 8003058:	2b50      	cmp	r3, #80	@ 0x50
 800305a:	d022      	beq.n	80030a2 <HAL_CAN_IRQHandler+0x320>
 800305c:	2b50      	cmp	r3, #80	@ 0x50
 800305e:	d82a      	bhi.n	80030b6 <HAL_CAN_IRQHandler+0x334>
 8003060:	2b40      	cmp	r3, #64	@ 0x40
 8003062:	d019      	beq.n	8003098 <HAL_CAN_IRQHandler+0x316>
 8003064:	2b40      	cmp	r3, #64	@ 0x40
 8003066:	d826      	bhi.n	80030b6 <HAL_CAN_IRQHandler+0x334>
 8003068:	2b30      	cmp	r3, #48	@ 0x30
 800306a:	d010      	beq.n	800308e <HAL_CAN_IRQHandler+0x30c>
 800306c:	2b30      	cmp	r3, #48	@ 0x30
 800306e:	d822      	bhi.n	80030b6 <HAL_CAN_IRQHandler+0x334>
 8003070:	2b10      	cmp	r3, #16
 8003072:	d002      	beq.n	800307a <HAL_CAN_IRQHandler+0x2f8>
 8003074:	2b20      	cmp	r3, #32
 8003076:	d005      	beq.n	8003084 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003078:	e01d      	b.n	80030b6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800307a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307c:	f043 0308 	orr.w	r3, r3, #8
 8003080:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003082:	e019      	b.n	80030b8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003086:	f043 0310 	orr.w	r3, r3, #16
 800308a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800308c:	e014      	b.n	80030b8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800308e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003090:	f043 0320 	orr.w	r3, r3, #32
 8003094:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003096:	e00f      	b.n	80030b8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800309e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80030a0:	e00a      	b.n	80030b8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80030a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030a8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80030aa:	e005      	b.n	80030b8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80030ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030b2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80030b4:	e000      	b.n	80030b8 <HAL_CAN_IRQHandler+0x336>
            break;
 80030b6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	699a      	ldr	r2, [r3, #24]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80030c6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2204      	movs	r2, #4
 80030ce:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80030d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d008      	beq.n	80030e8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030dc:	431a      	orrs	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f87c 	bl	80031e0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80030e8:	bf00      	nop
 80030ea:	3728      	adds	r7, #40	@ 0x28
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003204:	4b0b      	ldr	r3, [pc, #44]	@ (8003234 <__NVIC_SetPriorityGrouping+0x40>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003210:	4013      	ands	r3, r2
 8003212:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800321c:	4b06      	ldr	r3, [pc, #24]	@ (8003238 <__NVIC_SetPriorityGrouping+0x44>)
 800321e:	4313      	orrs	r3, r2
 8003220:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003222:	4a04      	ldr	r2, [pc, #16]	@ (8003234 <__NVIC_SetPriorityGrouping+0x40>)
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	60d3      	str	r3, [r2, #12]
}
 8003228:	bf00      	nop
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	e000ed00 	.word	0xe000ed00
 8003238:	05fa0000 	.word	0x05fa0000

0800323c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003240:	4b04      	ldr	r3, [pc, #16]	@ (8003254 <__NVIC_GetPriorityGrouping+0x18>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	0a1b      	lsrs	r3, r3, #8
 8003246:	f003 0307 	and.w	r3, r3, #7
}
 800324a:	4618      	mov	r0, r3
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	e000ed00 	.word	0xe000ed00

08003258 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	4603      	mov	r3, r0
 8003260:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003266:	2b00      	cmp	r3, #0
 8003268:	db0b      	blt.n	8003282 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800326a:	79fb      	ldrb	r3, [r7, #7]
 800326c:	f003 021f 	and.w	r2, r3, #31
 8003270:	4907      	ldr	r1, [pc, #28]	@ (8003290 <__NVIC_EnableIRQ+0x38>)
 8003272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003276:	095b      	lsrs	r3, r3, #5
 8003278:	2001      	movs	r0, #1
 800327a:	fa00 f202 	lsl.w	r2, r0, r2
 800327e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	e000e100 	.word	0xe000e100

08003294 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	4603      	mov	r3, r0
 800329c:	6039      	str	r1, [r7, #0]
 800329e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	db0a      	blt.n	80032be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	b2da      	uxtb	r2, r3
 80032ac:	490c      	ldr	r1, [pc, #48]	@ (80032e0 <__NVIC_SetPriority+0x4c>)
 80032ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b2:	0112      	lsls	r2, r2, #4
 80032b4:	b2d2      	uxtb	r2, r2
 80032b6:	440b      	add	r3, r1
 80032b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032bc:	e00a      	b.n	80032d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	4908      	ldr	r1, [pc, #32]	@ (80032e4 <__NVIC_SetPriority+0x50>)
 80032c4:	79fb      	ldrb	r3, [r7, #7]
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	3b04      	subs	r3, #4
 80032cc:	0112      	lsls	r2, r2, #4
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	440b      	add	r3, r1
 80032d2:	761a      	strb	r2, [r3, #24]
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	e000e100 	.word	0xe000e100
 80032e4:	e000ed00 	.word	0xe000ed00

080032e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b089      	sub	sp, #36	@ 0x24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	f1c3 0307 	rsb	r3, r3, #7
 8003302:	2b04      	cmp	r3, #4
 8003304:	bf28      	it	cs
 8003306:	2304      	movcs	r3, #4
 8003308:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	3304      	adds	r3, #4
 800330e:	2b06      	cmp	r3, #6
 8003310:	d902      	bls.n	8003318 <NVIC_EncodePriority+0x30>
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	3b03      	subs	r3, #3
 8003316:	e000      	b.n	800331a <NVIC_EncodePriority+0x32>
 8003318:	2300      	movs	r3, #0
 800331a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800331c:	f04f 32ff 	mov.w	r2, #4294967295
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	43da      	mvns	r2, r3
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	401a      	ands	r2, r3
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003330:	f04f 31ff 	mov.w	r1, #4294967295
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	fa01 f303 	lsl.w	r3, r1, r3
 800333a:	43d9      	mvns	r1, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003340:	4313      	orrs	r3, r2
         );
}
 8003342:	4618      	mov	r0, r3
 8003344:	3724      	adds	r7, #36	@ 0x24
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
	...

08003350 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3b01      	subs	r3, #1
 800335c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003360:	d301      	bcc.n	8003366 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003362:	2301      	movs	r3, #1
 8003364:	e00f      	b.n	8003386 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003366:	4a0a      	ldr	r2, [pc, #40]	@ (8003390 <SysTick_Config+0x40>)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3b01      	subs	r3, #1
 800336c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800336e:	210f      	movs	r1, #15
 8003370:	f04f 30ff 	mov.w	r0, #4294967295
 8003374:	f7ff ff8e 	bl	8003294 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003378:	4b05      	ldr	r3, [pc, #20]	@ (8003390 <SysTick_Config+0x40>)
 800337a:	2200      	movs	r2, #0
 800337c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800337e:	4b04      	ldr	r3, [pc, #16]	@ (8003390 <SysTick_Config+0x40>)
 8003380:	2207      	movs	r2, #7
 8003382:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	e000e010 	.word	0xe000e010

08003394 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f7ff ff29 	bl	80031f4 <__NVIC_SetPriorityGrouping>
}
 80033a2:	bf00      	nop
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b086      	sub	sp, #24
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	4603      	mov	r3, r0
 80033b2:	60b9      	str	r1, [r7, #8]
 80033b4:	607a      	str	r2, [r7, #4]
 80033b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80033b8:	2300      	movs	r3, #0
 80033ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033bc:	f7ff ff3e 	bl	800323c <__NVIC_GetPriorityGrouping>
 80033c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	68b9      	ldr	r1, [r7, #8]
 80033c6:	6978      	ldr	r0, [r7, #20]
 80033c8:	f7ff ff8e 	bl	80032e8 <NVIC_EncodePriority>
 80033cc:	4602      	mov	r2, r0
 80033ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033d2:	4611      	mov	r1, r2
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff ff5d 	bl	8003294 <__NVIC_SetPriority>
}
 80033da:	bf00      	nop
 80033dc:	3718      	adds	r7, #24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b082      	sub	sp, #8
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	4603      	mov	r3, r0
 80033ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff ff31 	bl	8003258 <__NVIC_EnableIRQ>
}
 80033f6:	bf00      	nop
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b082      	sub	sp, #8
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7ff ffa2 	bl	8003350 <SysTick_Config>
 800340c:	4603      	mov	r3, r0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b082      	sub	sp, #8
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e014      	b.n	8003452 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	791b      	ldrb	r3, [r3, #4]
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d105      	bne.n	800343e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f7fd ff1b 	bl	8001274 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2202      	movs	r2, #2
 8003442:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b082      	sub	sp, #8
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800346c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003470:	d120      	bne.n	80034b4 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003478:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800347c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003480:	d118      	bne.n	80034b4 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2204      	movs	r2, #4
 8003486:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	f043 0201 	orr.w	r2, r3, #1
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800349c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80034ac:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f82d 	bl	800350e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80034be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034c2:	d120      	bne.n	8003506 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80034ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034d2:	d118      	bne.n	8003506 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2204      	movs	r2, #4
 80034d8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	f043 0202 	orr.w	r2, r3, #2
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80034ee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80034fe:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 f85d 	bl	80035c0 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8003506:	bf00      	nop
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800350e:	b480      	push	{r7}
 8003510:	b083      	sub	sp, #12
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003522:	b480      	push	{r7}
 8003524:	b087      	sub	sp, #28
 8003526:	af00      	add	r7, sp, #0
 8003528:	60f8      	str	r0, [r7, #12]
 800352a:	60b9      	str	r1, [r7, #8]
 800352c:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	795b      	ldrb	r3, [r3, #5]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d101      	bne.n	800353a <HAL_DAC_ConfigChannel+0x18>
 8003536:	2302      	movs	r3, #2
 8003538:	e03c      	b.n	80035b4 <HAL_DAC_ConfigChannel+0x92>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2201      	movs	r2, #1
 800353e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2202      	movs	r2, #2
 8003544:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f003 0310 	and.w	r3, r3, #16
 8003554:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	43db      	mvns	r3, r3
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	4013      	ands	r3, r2
 8003562:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	4313      	orrs	r3, r2
 800356e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f003 0310 	and.w	r3, r3, #16
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	4313      	orrs	r3, r2
 8003580:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6819      	ldr	r1, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f003 0310 	and.w	r3, r3, #16
 8003596:	22c0      	movs	r2, #192	@ 0xc0
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	43da      	mvns	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	400a      	ands	r2, r1
 80035a4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2201      	movs	r2, #1
 80035aa:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	371c      	adds	r7, #28
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035dc:	2300      	movs	r3, #0
 80035de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80035e0:	f7fe fe9a 	bl	8002318 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e099      	b.n	8003724 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2202      	movs	r2, #2
 80035f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0201 	bic.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003610:	e00f      	b.n	8003632 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003612:	f7fe fe81 	bl	8002318 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b05      	cmp	r3, #5
 800361e:	d908      	bls.n	8003632 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2220      	movs	r2, #32
 8003624:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2203      	movs	r2, #3
 800362a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e078      	b.n	8003724 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1e8      	bne.n	8003612 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	4b38      	ldr	r3, [pc, #224]	@ (800372c <HAL_DMA_Init+0x158>)
 800364c:	4013      	ands	r3, r2
 800364e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800365e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800366a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003676:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	4313      	orrs	r3, r2
 8003682:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003688:	2b04      	cmp	r3, #4
 800368a:	d107      	bne.n	800369c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003694:	4313      	orrs	r3, r2
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	4313      	orrs	r3, r2
 800369a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f023 0307 	bic.w	r3, r3, #7
 80036b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	d117      	bne.n	80036f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00e      	beq.n	80036f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 fa77 	bl	8003bcc <DMA_CheckFifoParam>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d008      	beq.n	80036f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2240      	movs	r2, #64	@ 0x40
 80036e8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80036f2:	2301      	movs	r3, #1
 80036f4:	e016      	b.n	8003724 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 fa2e 	bl	8003b60 <DMA_CalcBaseAndBitshift>
 8003704:	4603      	mov	r3, r0
 8003706:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800370c:	223f      	movs	r2, #63	@ 0x3f
 800370e:	409a      	lsls	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3718      	adds	r7, #24
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	e010803f 	.word	0xe010803f

08003730 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
 800373c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800373e:	2300      	movs	r3, #0
 8003740:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003746:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800374e:	2b01      	cmp	r3, #1
 8003750:	d101      	bne.n	8003756 <HAL_DMA_Start_IT+0x26>
 8003752:	2302      	movs	r3, #2
 8003754:	e048      	b.n	80037e8 <HAL_DMA_Start_IT+0xb8>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b01      	cmp	r3, #1
 8003768:	d137      	bne.n	80037da <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2202      	movs	r2, #2
 800376e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	68b9      	ldr	r1, [r7, #8]
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 f9c0 	bl	8003b04 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003788:	223f      	movs	r2, #63	@ 0x3f
 800378a:	409a      	lsls	r2, r3
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f042 0216 	orr.w	r2, r2, #22
 800379e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	695a      	ldr	r2, [r3, #20]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80037ae:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d007      	beq.n	80037c8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 0208 	orr.w	r2, r2, #8
 80037c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0201 	orr.w	r2, r2, #1
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	e005      	b.n	80037e6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80037e2:	2302      	movs	r3, #2
 80037e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80037e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3718      	adds	r7, #24
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80037f8:	2300      	movs	r3, #0
 80037fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80037fc:	4b8e      	ldr	r3, [pc, #568]	@ (8003a38 <HAL_DMA_IRQHandler+0x248>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a8e      	ldr	r2, [pc, #568]	@ (8003a3c <HAL_DMA_IRQHandler+0x24c>)
 8003802:	fba2 2303 	umull	r2, r3, r2, r3
 8003806:	0a9b      	lsrs	r3, r3, #10
 8003808:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800380e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800381a:	2208      	movs	r2, #8
 800381c:	409a      	lsls	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	4013      	ands	r3, r2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d01a      	beq.n	800385c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b00      	cmp	r3, #0
 8003832:	d013      	beq.n	800385c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 0204 	bic.w	r2, r2, #4
 8003842:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003848:	2208      	movs	r2, #8
 800384a:	409a      	lsls	r2, r3
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003854:	f043 0201 	orr.w	r2, r3, #1
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003860:	2201      	movs	r2, #1
 8003862:	409a      	lsls	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	4013      	ands	r3, r2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d012      	beq.n	8003892 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00b      	beq.n	8003892 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800387e:	2201      	movs	r2, #1
 8003880:	409a      	lsls	r2, r3
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800388a:	f043 0202 	orr.w	r2, r3, #2
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003896:	2204      	movs	r2, #4
 8003898:	409a      	lsls	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	4013      	ands	r3, r2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d012      	beq.n	80038c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00b      	beq.n	80038c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b4:	2204      	movs	r2, #4
 80038b6:	409a      	lsls	r2, r3
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038c0:	f043 0204 	orr.w	r2, r3, #4
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038cc:	2210      	movs	r2, #16
 80038ce:	409a      	lsls	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4013      	ands	r3, r2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d043      	beq.n	8003960 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0308 	and.w	r3, r3, #8
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d03c      	beq.n	8003960 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ea:	2210      	movs	r2, #16
 80038ec:	409a      	lsls	r2, r3
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d018      	beq.n	8003932 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d108      	bne.n	8003920 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003912:	2b00      	cmp	r3, #0
 8003914:	d024      	beq.n	8003960 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	4798      	blx	r3
 800391e:	e01f      	b.n	8003960 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003924:	2b00      	cmp	r3, #0
 8003926:	d01b      	beq.n	8003960 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	4798      	blx	r3
 8003930:	e016      	b.n	8003960 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800393c:	2b00      	cmp	r3, #0
 800393e:	d107      	bne.n	8003950 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 0208 	bic.w	r2, r2, #8
 800394e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003964:	2220      	movs	r2, #32
 8003966:	409a      	lsls	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4013      	ands	r3, r2
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 808f 	beq.w	8003a90 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0310 	and.w	r3, r3, #16
 800397c:	2b00      	cmp	r3, #0
 800397e:	f000 8087 	beq.w	8003a90 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003986:	2220      	movs	r2, #32
 8003988:	409a      	lsls	r2, r3
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b05      	cmp	r3, #5
 8003998:	d136      	bne.n	8003a08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0216 	bic.w	r2, r2, #22
 80039a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	695a      	ldr	r2, [r3, #20]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80039b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d103      	bne.n	80039ca <HAL_DMA_IRQHandler+0x1da>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d007      	beq.n	80039da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 0208 	bic.w	r2, r2, #8
 80039d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039de:	223f      	movs	r2, #63	@ 0x3f
 80039e0:	409a      	lsls	r2, r3
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d07e      	beq.n	8003afc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	4798      	blx	r3
        }
        return;
 8003a06:	e079      	b.n	8003afc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d01d      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10d      	bne.n	8003a40 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d031      	beq.n	8003a90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	4798      	blx	r3
 8003a34:	e02c      	b.n	8003a90 <HAL_DMA_IRQHandler+0x2a0>
 8003a36:	bf00      	nop
 8003a38:	20000030 	.word	0x20000030
 8003a3c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d023      	beq.n	8003a90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	4798      	blx	r3
 8003a50:	e01e      	b.n	8003a90 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d10f      	bne.n	8003a80 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0210 	bic.w	r2, r2, #16
 8003a6e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d032      	beq.n	8003afe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d022      	beq.n	8003aea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2205      	movs	r2, #5
 8003aa8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0201 	bic.w	r2, r2, #1
 8003aba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	60bb      	str	r3, [r7, #8]
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d307      	bcc.n	8003ad8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1f2      	bne.n	8003abc <HAL_DMA_IRQHandler+0x2cc>
 8003ad6:	e000      	b.n	8003ada <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003ad8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d005      	beq.n	8003afe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	4798      	blx	r3
 8003afa:	e000      	b.n	8003afe <HAL_DMA_IRQHandler+0x30e>
        return;
 8003afc:	bf00      	nop
    }
  }
}
 8003afe:	3718      	adds	r7, #24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
 8003b10:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003b20:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	2b40      	cmp	r3, #64	@ 0x40
 8003b30:	d108      	bne.n	8003b44 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003b42:	e007      	b.n	8003b54 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	60da      	str	r2, [r3, #12]
}
 8003b54:	bf00      	nop
 8003b56:	3714      	adds	r7, #20
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	3b10      	subs	r3, #16
 8003b70:	4a13      	ldr	r2, [pc, #76]	@ (8003bc0 <DMA_CalcBaseAndBitshift+0x60>)
 8003b72:	fba2 2303 	umull	r2, r3, r2, r3
 8003b76:	091b      	lsrs	r3, r3, #4
 8003b78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b7a:	4a12      	ldr	r2, [pc, #72]	@ (8003bc4 <DMA_CalcBaseAndBitshift+0x64>)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4413      	add	r3, r2
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	461a      	mov	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2b03      	cmp	r3, #3
 8003b8c:	d908      	bls.n	8003ba0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	461a      	mov	r2, r3
 8003b94:	4b0c      	ldr	r3, [pc, #48]	@ (8003bc8 <DMA_CalcBaseAndBitshift+0x68>)
 8003b96:	4013      	ands	r3, r2
 8003b98:	1d1a      	adds	r2, r3, #4
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	659a      	str	r2, [r3, #88]	@ 0x58
 8003b9e:	e006      	b.n	8003bae <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	4b08      	ldr	r3, [pc, #32]	@ (8003bc8 <DMA_CalcBaseAndBitshift+0x68>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3714      	adds	r7, #20
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	aaaaaaab 	.word	0xaaaaaaab
 8003bc4:	08008220 	.word	0x08008220
 8003bc8:	fffffc00 	.word	0xfffffc00

08003bcc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bdc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d11f      	bne.n	8003c26 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	2b03      	cmp	r3, #3
 8003bea:	d856      	bhi.n	8003c9a <DMA_CheckFifoParam+0xce>
 8003bec:	a201      	add	r2, pc, #4	@ (adr r2, 8003bf4 <DMA_CheckFifoParam+0x28>)
 8003bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf2:	bf00      	nop
 8003bf4:	08003c05 	.word	0x08003c05
 8003bf8:	08003c17 	.word	0x08003c17
 8003bfc:	08003c05 	.word	0x08003c05
 8003c00:	08003c9b 	.word	0x08003c9b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d046      	beq.n	8003c9e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c14:	e043      	b.n	8003c9e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c1a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003c1e:	d140      	bne.n	8003ca2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c24:	e03d      	b.n	8003ca2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c2e:	d121      	bne.n	8003c74 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	2b03      	cmp	r3, #3
 8003c34:	d837      	bhi.n	8003ca6 <DMA_CheckFifoParam+0xda>
 8003c36:	a201      	add	r2, pc, #4	@ (adr r2, 8003c3c <DMA_CheckFifoParam+0x70>)
 8003c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3c:	08003c4d 	.word	0x08003c4d
 8003c40:	08003c53 	.word	0x08003c53
 8003c44:	08003c4d 	.word	0x08003c4d
 8003c48:	08003c65 	.word	0x08003c65
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c50:	e030      	b.n	8003cb4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c56:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d025      	beq.n	8003caa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c62:	e022      	b.n	8003caa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c68:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003c6c:	d11f      	bne.n	8003cae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c72:	e01c      	b.n	8003cae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d903      	bls.n	8003c82 <DMA_CheckFifoParam+0xb6>
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	2b03      	cmp	r3, #3
 8003c7e:	d003      	beq.n	8003c88 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c80:	e018      	b.n	8003cb4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	73fb      	strb	r3, [r7, #15]
      break;
 8003c86:	e015      	b.n	8003cb4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00e      	beq.n	8003cb2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	73fb      	strb	r3, [r7, #15]
      break;
 8003c98:	e00b      	b.n	8003cb2 <DMA_CheckFifoParam+0xe6>
      break;
 8003c9a:	bf00      	nop
 8003c9c:	e00a      	b.n	8003cb4 <DMA_CheckFifoParam+0xe8>
      break;
 8003c9e:	bf00      	nop
 8003ca0:	e008      	b.n	8003cb4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ca2:	bf00      	nop
 8003ca4:	e006      	b.n	8003cb4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ca6:	bf00      	nop
 8003ca8:	e004      	b.n	8003cb4 <DMA_CheckFifoParam+0xe8>
      break;
 8003caa:	bf00      	nop
 8003cac:	e002      	b.n	8003cb4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003cae:	bf00      	nop
 8003cb0:	e000      	b.n	8003cb4 <DMA_CheckFifoParam+0xe8>
      break;
 8003cb2:	bf00      	nop
    }
  } 
  
  return status; 
 8003cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3714      	adds	r7, #20
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop

08003cc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b089      	sub	sp, #36	@ 0x24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003cde:	2300      	movs	r3, #0
 8003ce0:	61fb      	str	r3, [r7, #28]
 8003ce2:	e175      	b.n	8003fd0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	f040 8164 	bne.w	8003fca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f003 0303 	and.w	r3, r3, #3
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d005      	beq.n	8003d1a <HAL_GPIO_Init+0x56>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d130      	bne.n	8003d7c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	2203      	movs	r2, #3
 8003d26:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2a:	43db      	mvns	r3, r3
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	68da      	ldr	r2, [r3, #12]
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d50:	2201      	movs	r2, #1
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	091b      	lsrs	r3, r3, #4
 8003d66:	f003 0201 	and.w	r2, r3, #1
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f003 0303 	and.w	r3, r3, #3
 8003d84:	2b03      	cmp	r3, #3
 8003d86:	d017      	beq.n	8003db8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	2203      	movs	r2, #3
 8003d94:	fa02 f303 	lsl.w	r3, r2, r3
 8003d98:	43db      	mvns	r3, r3
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f003 0303 	and.w	r3, r3, #3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d123      	bne.n	8003e0c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	08da      	lsrs	r2, r3, #3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	3208      	adds	r2, #8
 8003dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	220f      	movs	r2, #15
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	43db      	mvns	r3, r3
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	4013      	ands	r3, r2
 8003de6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	691a      	ldr	r2, [r3, #16]
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	f003 0307 	and.w	r3, r3, #7
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	fa02 f303 	lsl.w	r3, r2, r3
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	08da      	lsrs	r2, r3, #3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	3208      	adds	r2, #8
 8003e06:	69b9      	ldr	r1, [r7, #24]
 8003e08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	2203      	movs	r2, #3
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	43db      	mvns	r3, r3
 8003e1e:	69ba      	ldr	r2, [r7, #24]
 8003e20:	4013      	ands	r3, r2
 8003e22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f003 0203 	and.w	r2, r3, #3
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 80be 	beq.w	8003fca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e4e:	4b66      	ldr	r3, [pc, #408]	@ (8003fe8 <HAL_GPIO_Init+0x324>)
 8003e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e52:	4a65      	ldr	r2, [pc, #404]	@ (8003fe8 <HAL_GPIO_Init+0x324>)
 8003e54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e58:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e5a:	4b63      	ldr	r3, [pc, #396]	@ (8003fe8 <HAL_GPIO_Init+0x324>)
 8003e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e62:	60fb      	str	r3, [r7, #12]
 8003e64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003e66:	4a61      	ldr	r2, [pc, #388]	@ (8003fec <HAL_GPIO_Init+0x328>)
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	089b      	lsrs	r3, r3, #2
 8003e6c:	3302      	adds	r3, #2
 8003e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	f003 0303 	and.w	r3, r3, #3
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	220f      	movs	r2, #15
 8003e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e82:	43db      	mvns	r3, r3
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	4013      	ands	r3, r2
 8003e88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a58      	ldr	r2, [pc, #352]	@ (8003ff0 <HAL_GPIO_Init+0x32c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d037      	beq.n	8003f02 <HAL_GPIO_Init+0x23e>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a57      	ldr	r2, [pc, #348]	@ (8003ff4 <HAL_GPIO_Init+0x330>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d031      	beq.n	8003efe <HAL_GPIO_Init+0x23a>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a56      	ldr	r2, [pc, #344]	@ (8003ff8 <HAL_GPIO_Init+0x334>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d02b      	beq.n	8003efa <HAL_GPIO_Init+0x236>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a55      	ldr	r2, [pc, #340]	@ (8003ffc <HAL_GPIO_Init+0x338>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d025      	beq.n	8003ef6 <HAL_GPIO_Init+0x232>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a54      	ldr	r2, [pc, #336]	@ (8004000 <HAL_GPIO_Init+0x33c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d01f      	beq.n	8003ef2 <HAL_GPIO_Init+0x22e>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a53      	ldr	r2, [pc, #332]	@ (8004004 <HAL_GPIO_Init+0x340>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d019      	beq.n	8003eee <HAL_GPIO_Init+0x22a>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a52      	ldr	r2, [pc, #328]	@ (8004008 <HAL_GPIO_Init+0x344>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d013      	beq.n	8003eea <HAL_GPIO_Init+0x226>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a51      	ldr	r2, [pc, #324]	@ (800400c <HAL_GPIO_Init+0x348>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d00d      	beq.n	8003ee6 <HAL_GPIO_Init+0x222>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a50      	ldr	r2, [pc, #320]	@ (8004010 <HAL_GPIO_Init+0x34c>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d007      	beq.n	8003ee2 <HAL_GPIO_Init+0x21e>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a4f      	ldr	r2, [pc, #316]	@ (8004014 <HAL_GPIO_Init+0x350>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d101      	bne.n	8003ede <HAL_GPIO_Init+0x21a>
 8003eda:	2309      	movs	r3, #9
 8003edc:	e012      	b.n	8003f04 <HAL_GPIO_Init+0x240>
 8003ede:	230a      	movs	r3, #10
 8003ee0:	e010      	b.n	8003f04 <HAL_GPIO_Init+0x240>
 8003ee2:	2308      	movs	r3, #8
 8003ee4:	e00e      	b.n	8003f04 <HAL_GPIO_Init+0x240>
 8003ee6:	2307      	movs	r3, #7
 8003ee8:	e00c      	b.n	8003f04 <HAL_GPIO_Init+0x240>
 8003eea:	2306      	movs	r3, #6
 8003eec:	e00a      	b.n	8003f04 <HAL_GPIO_Init+0x240>
 8003eee:	2305      	movs	r3, #5
 8003ef0:	e008      	b.n	8003f04 <HAL_GPIO_Init+0x240>
 8003ef2:	2304      	movs	r3, #4
 8003ef4:	e006      	b.n	8003f04 <HAL_GPIO_Init+0x240>
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e004      	b.n	8003f04 <HAL_GPIO_Init+0x240>
 8003efa:	2302      	movs	r3, #2
 8003efc:	e002      	b.n	8003f04 <HAL_GPIO_Init+0x240>
 8003efe:	2301      	movs	r3, #1
 8003f00:	e000      	b.n	8003f04 <HAL_GPIO_Init+0x240>
 8003f02:	2300      	movs	r3, #0
 8003f04:	69fa      	ldr	r2, [r7, #28]
 8003f06:	f002 0203 	and.w	r2, r2, #3
 8003f0a:	0092      	lsls	r2, r2, #2
 8003f0c:	4093      	lsls	r3, r2
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003f14:	4935      	ldr	r1, [pc, #212]	@ (8003fec <HAL_GPIO_Init+0x328>)
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	089b      	lsrs	r3, r3, #2
 8003f1a:	3302      	adds	r3, #2
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f22:	4b3d      	ldr	r3, [pc, #244]	@ (8004018 <HAL_GPIO_Init+0x354>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	43db      	mvns	r3, r3
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f46:	4a34      	ldr	r2, [pc, #208]	@ (8004018 <HAL_GPIO_Init+0x354>)
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f4c:	4b32      	ldr	r3, [pc, #200]	@ (8004018 <HAL_GPIO_Init+0x354>)
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	43db      	mvns	r3, r3
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d003      	beq.n	8003f70 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f70:	4a29      	ldr	r2, [pc, #164]	@ (8004018 <HAL_GPIO_Init+0x354>)
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f76:	4b28      	ldr	r3, [pc, #160]	@ (8004018 <HAL_GPIO_Init+0x354>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	43db      	mvns	r3, r3
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	4013      	ands	r3, r2
 8003f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f9a:	4a1f      	ldr	r2, [pc, #124]	@ (8004018 <HAL_GPIO_Init+0x354>)
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8004018 <HAL_GPIO_Init+0x354>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	43db      	mvns	r3, r3
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	4013      	ands	r3, r2
 8003fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d003      	beq.n	8003fc4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fc4:	4a14      	ldr	r2, [pc, #80]	@ (8004018 <HAL_GPIO_Init+0x354>)
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	61fb      	str	r3, [r7, #28]
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	2b0f      	cmp	r3, #15
 8003fd4:	f67f ae86 	bls.w	8003ce4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003fd8:	bf00      	nop
 8003fda:	bf00      	nop
 8003fdc:	3724      	adds	r7, #36	@ 0x24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	40013800 	.word	0x40013800
 8003ff0:	40020000 	.word	0x40020000
 8003ff4:	40020400 	.word	0x40020400
 8003ff8:	40020800 	.word	0x40020800
 8003ffc:	40020c00 	.word	0x40020c00
 8004000:	40021000 	.word	0x40021000
 8004004:	40021400 	.word	0x40021400
 8004008:	40021800 	.word	0x40021800
 800400c:	40021c00 	.word	0x40021c00
 8004010:	40022000 	.word	0x40022000
 8004014:	40022400 	.word	0x40022400
 8004018:	40013c00 	.word	0x40013c00

0800401c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	460b      	mov	r3, r1
 8004026:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691a      	ldr	r2, [r3, #16]
 800402c:	887b      	ldrh	r3, [r7, #2]
 800402e:	4013      	ands	r3, r2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d002      	beq.n	800403a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004034:	2301      	movs	r3, #1
 8004036:	73fb      	strb	r3, [r7, #15]
 8004038:	e001      	b.n	800403e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800403a:	2300      	movs	r3, #0
 800403c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800403e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004040:	4618      	mov	r0, r3
 8004042:	3714      	adds	r7, #20
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	460b      	mov	r3, r1
 8004056:	807b      	strh	r3, [r7, #2]
 8004058:	4613      	mov	r3, r2
 800405a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800405c:	787b      	ldrb	r3, [r7, #1]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004062:	887a      	ldrh	r2, [r7, #2]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004068:	e003      	b.n	8004072 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800406a:	887b      	ldrh	r3, [r7, #2]
 800406c:	041a      	lsls	r2, r3, #16
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	619a      	str	r2, [r3, #24]
}
 8004072:	bf00      	nop
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
	...

08004080 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e07f      	b.n	8004192 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d106      	bne.n	80040ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7fd fac0 	bl	800162c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2224      	movs	r2, #36	@ 0x24
 80040b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 0201 	bic.w	r2, r2, #1
 80040c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80040d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80040e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d107      	bne.n	80040fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	689a      	ldr	r2, [r3, #8]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80040f6:	609a      	str	r2, [r3, #8]
 80040f8:	e006      	b.n	8004108 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689a      	ldr	r2, [r3, #8]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004106:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	2b02      	cmp	r3, #2
 800410e:	d104      	bne.n	800411a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004118:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	6859      	ldr	r1, [r3, #4]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	4b1d      	ldr	r3, [pc, #116]	@ (800419c <HAL_I2C_Init+0x11c>)
 8004126:	430b      	orrs	r3, r1
 8004128:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68da      	ldr	r2, [r3, #12]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004138:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	691a      	ldr	r2, [r3, #16]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	430a      	orrs	r2, r1
 8004152:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	69d9      	ldr	r1, [r3, #28]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a1a      	ldr	r2, [r3, #32]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	430a      	orrs	r2, r1
 8004162:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0201 	orr.w	r2, r2, #1
 8004172:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2220      	movs	r2, #32
 800417e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3708      	adds	r7, #8
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	02008000 	.word	0x02008000

080041a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b20      	cmp	r3, #32
 80041b4:	d138      	bne.n	8004228 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d101      	bne.n	80041c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80041c0:	2302      	movs	r3, #2
 80041c2:	e032      	b.n	800422a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2224      	movs	r2, #36	@ 0x24
 80041d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0201 	bic.w	r2, r2, #1
 80041e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80041f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6819      	ldr	r1, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	430a      	orrs	r2, r1
 8004202:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f042 0201 	orr.w	r2, r2, #1
 8004212:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2220      	movs	r2, #32
 8004218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004224:	2300      	movs	r3, #0
 8004226:	e000      	b.n	800422a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004228:	2302      	movs	r3, #2
  }
}
 800422a:	4618      	mov	r0, r3
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004236:	b480      	push	{r7}
 8004238:	b085      	sub	sp, #20
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
 800423e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b20      	cmp	r3, #32
 800424a:	d139      	bne.n	80042c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004252:	2b01      	cmp	r3, #1
 8004254:	d101      	bne.n	800425a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004256:	2302      	movs	r3, #2
 8004258:	e033      	b.n	80042c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2224      	movs	r2, #36	@ 0x24
 8004266:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 0201 	bic.w	r2, r2, #1
 8004278:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004288:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	021b      	lsls	r3, r3, #8
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	4313      	orrs	r3, r2
 8004292:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f042 0201 	orr.w	r2, r2, #1
 80042aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2220      	movs	r2, #32
 80042b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80042bc:	2300      	movs	r3, #0
 80042be:	e000      	b.n	80042c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80042c0:	2302      	movs	r3, #2
  }
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
	...

080042d0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80042d6:	2300      	movs	r3, #0
 80042d8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80042da:	4b23      	ldr	r3, [pc, #140]	@ (8004368 <HAL_PWREx_EnableOverDrive+0x98>)
 80042dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042de:	4a22      	ldr	r2, [pc, #136]	@ (8004368 <HAL_PWREx_EnableOverDrive+0x98>)
 80042e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80042e6:	4b20      	ldr	r3, [pc, #128]	@ (8004368 <HAL_PWREx_EnableOverDrive+0x98>)
 80042e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042ee:	603b      	str	r3, [r7, #0]
 80042f0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80042f2:	4b1e      	ldr	r3, [pc, #120]	@ (800436c <HAL_PWREx_EnableOverDrive+0x9c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a1d      	ldr	r2, [pc, #116]	@ (800436c <HAL_PWREx_EnableOverDrive+0x9c>)
 80042f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042fc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042fe:	f7fe f80b 	bl	8002318 <HAL_GetTick>
 8004302:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004304:	e009      	b.n	800431a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004306:	f7fe f807 	bl	8002318 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004314:	d901      	bls.n	800431a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e022      	b.n	8004360 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800431a:	4b14      	ldr	r3, [pc, #80]	@ (800436c <HAL_PWREx_EnableOverDrive+0x9c>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004322:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004326:	d1ee      	bne.n	8004306 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004328:	4b10      	ldr	r3, [pc, #64]	@ (800436c <HAL_PWREx_EnableOverDrive+0x9c>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a0f      	ldr	r2, [pc, #60]	@ (800436c <HAL_PWREx_EnableOverDrive+0x9c>)
 800432e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004332:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004334:	f7fd fff0 	bl	8002318 <HAL_GetTick>
 8004338:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800433a:	e009      	b.n	8004350 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800433c:	f7fd ffec 	bl	8002318 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800434a:	d901      	bls.n	8004350 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e007      	b.n	8004360 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004350:	4b06      	ldr	r3, [pc, #24]	@ (800436c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004358:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800435c:	d1ee      	bne.n	800433c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3708      	adds	r7, #8
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	40023800 	.word	0x40023800
 800436c:	40007000 	.word	0x40007000

08004370 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004378:	2300      	movs	r3, #0
 800437a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e29b      	b.n	80048be <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	f000 8087 	beq.w	80044a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004394:	4b96      	ldr	r3, [pc, #600]	@ (80045f0 <HAL_RCC_OscConfig+0x280>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f003 030c 	and.w	r3, r3, #12
 800439c:	2b04      	cmp	r3, #4
 800439e:	d00c      	beq.n	80043ba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043a0:	4b93      	ldr	r3, [pc, #588]	@ (80045f0 <HAL_RCC_OscConfig+0x280>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f003 030c 	and.w	r3, r3, #12
 80043a8:	2b08      	cmp	r3, #8
 80043aa:	d112      	bne.n	80043d2 <HAL_RCC_OscConfig+0x62>
 80043ac:	4b90      	ldr	r3, [pc, #576]	@ (80045f0 <HAL_RCC_OscConfig+0x280>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043b8:	d10b      	bne.n	80043d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043ba:	4b8d      	ldr	r3, [pc, #564]	@ (80045f0 <HAL_RCC_OscConfig+0x280>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d06c      	beq.n	80044a0 <HAL_RCC_OscConfig+0x130>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d168      	bne.n	80044a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e275      	b.n	80048be <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043da:	d106      	bne.n	80043ea <HAL_RCC_OscConfig+0x7a>
 80043dc:	4b84      	ldr	r3, [pc, #528]	@ (80045f0 <HAL_RCC_OscConfig+0x280>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a83      	ldr	r2, [pc, #524]	@ (80045f0 <HAL_RCC_OscConfig+0x280>)
 80043e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043e6:	6013      	str	r3, [r2, #0]
 80043e8:	e02e      	b.n	8004448 <HAL_RCC_OscConfig+0xd8>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10c      	bne.n	800440c <HAL_RCC_OscConfig+0x9c>
 80043f2:	4b7f      	ldr	r3, [pc, #508]	@ (80045f0 <HAL_RCC_OscConfig+0x280>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a7e      	ldr	r2, [pc, #504]	@ (80045f0 <HAL_RCC_OscConfig+0x280>)
 80043f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043fc:	6013      	str	r3, [r2, #0]
 80043fe:	4b7c      	ldr	r3, [pc, #496]	@ (80045f0 <HAL_RCC_OscConfig+0x280>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a7b      	ldr	r2, [pc, #492]	@ (80045f0 <HAL_RCC_OscConfig+0x280>)
 8004404:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004408:	6013      	str	r3, [r2, #0]
 800440a:	e01d      	b.n	8004448 <HAL_RCC_OscConfig+0xd8>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004414:	d10c      	bne.n	8004430 <HAL_RCC_OscConfig+0xc0>
 8004416:	4b76      	ldr	r3, [pc, #472]	@ (80045f0 <HAL_RCC_OscConfig+0x280>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a75      	ldr	r2, [pc, #468]	@ (80045f0 <HAL_RCC_OscConfig+0x280>)
 800441c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004420:	6013      	str	r3, [r2, #0]
 8004422:	4b73      	ldr	r3, [pc, #460]	@ (80045f0 <HAL_RCC_OscConfig+0x280>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a72      	ldr	r2, [pc, #456]	@ (80045f0 <HAL_RCC_OscConfig+0x280>)
 8004428:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800442c:	6013      	str	r3, [r2, #0]
 800442e:	e00b      	b.n	8004448 <HAL_RCC_OscConfig+0xd8>
 8004430:	4b6f      	ldr	r3, [pc, #444]	@ (80045f0 <HAL_RCC_OscConfig+0x280>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a6e      	ldr	r2, [pc, #440]	@ (80045f0 <HAL_RCC_OscConfig+0x280>)
 8004436:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800443a:	6013      	str	r3, [r2, #0]
 800443c:	4b6c      	ldr	r3, [pc, #432]	@ (80045f0 <HAL_RCC_OscConfig+0x280>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a6b      	ldr	r2, [pc, #428]	@ (80045f0 <HAL_RCC_OscConfig+0x280>)
 8004442:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d013      	beq.n	8004478 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004450:	f7fd ff62 	bl	8002318 <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004458:	f7fd ff5e 	bl	8002318 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b64      	cmp	r3, #100	@ 0x64
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e229      	b.n	80048be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800446a:	4b61      	ldr	r3, [pc, #388]	@ (80045f0 <HAL_RCC_OscConfig+0x280>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0f0      	beq.n	8004458 <HAL_RCC_OscConfig+0xe8>
 8004476:	e014      	b.n	80044a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004478:	f7fd ff4e 	bl	8002318 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004480:	f7fd ff4a 	bl	8002318 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b64      	cmp	r3, #100	@ 0x64
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e215      	b.n	80048be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004492:	4b57      	ldr	r3, [pc, #348]	@ (80045f0 <HAL_RCC_OscConfig+0x280>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1f0      	bne.n	8004480 <HAL_RCC_OscConfig+0x110>
 800449e:	e000      	b.n	80044a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d069      	beq.n	8004582 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044ae:	4b50      	ldr	r3, [pc, #320]	@ (80045f0 <HAL_RCC_OscConfig+0x280>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f003 030c 	and.w	r3, r3, #12
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00b      	beq.n	80044d2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044ba:	4b4d      	ldr	r3, [pc, #308]	@ (80045f0 <HAL_RCC_OscConfig+0x280>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 030c 	and.w	r3, r3, #12
 80044c2:	2b08      	cmp	r3, #8
 80044c4:	d11c      	bne.n	8004500 <HAL_RCC_OscConfig+0x190>
 80044c6:	4b4a      	ldr	r3, [pc, #296]	@ (80045f0 <HAL_RCC_OscConfig+0x280>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d116      	bne.n	8004500 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044d2:	4b47      	ldr	r3, [pc, #284]	@ (80045f0 <HAL_RCC_OscConfig+0x280>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d005      	beq.n	80044ea <HAL_RCC_OscConfig+0x17a>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d001      	beq.n	80044ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e1e9      	b.n	80048be <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ea:	4b41      	ldr	r3, [pc, #260]	@ (80045f0 <HAL_RCC_OscConfig+0x280>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	493d      	ldr	r1, [pc, #244]	@ (80045f0 <HAL_RCC_OscConfig+0x280>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044fe:	e040      	b.n	8004582 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d023      	beq.n	8004550 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004508:	4b39      	ldr	r3, [pc, #228]	@ (80045f0 <HAL_RCC_OscConfig+0x280>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a38      	ldr	r2, [pc, #224]	@ (80045f0 <HAL_RCC_OscConfig+0x280>)
 800450e:	f043 0301 	orr.w	r3, r3, #1
 8004512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004514:	f7fd ff00 	bl	8002318 <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800451a:	e008      	b.n	800452e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800451c:	f7fd fefc 	bl	8002318 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e1c7      	b.n	80048be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800452e:	4b30      	ldr	r3, [pc, #192]	@ (80045f0 <HAL_RCC_OscConfig+0x280>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d0f0      	beq.n	800451c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800453a:	4b2d      	ldr	r3, [pc, #180]	@ (80045f0 <HAL_RCC_OscConfig+0x280>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	4929      	ldr	r1, [pc, #164]	@ (80045f0 <HAL_RCC_OscConfig+0x280>)
 800454a:	4313      	orrs	r3, r2
 800454c:	600b      	str	r3, [r1, #0]
 800454e:	e018      	b.n	8004582 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004550:	4b27      	ldr	r3, [pc, #156]	@ (80045f0 <HAL_RCC_OscConfig+0x280>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a26      	ldr	r2, [pc, #152]	@ (80045f0 <HAL_RCC_OscConfig+0x280>)
 8004556:	f023 0301 	bic.w	r3, r3, #1
 800455a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455c:	f7fd fedc 	bl	8002318 <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004564:	f7fd fed8 	bl	8002318 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e1a3      	b.n	80048be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004576:	4b1e      	ldr	r3, [pc, #120]	@ (80045f0 <HAL_RCC_OscConfig+0x280>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1f0      	bne.n	8004564 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0308 	and.w	r3, r3, #8
 800458a:	2b00      	cmp	r3, #0
 800458c:	d038      	beq.n	8004600 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d019      	beq.n	80045ca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004596:	4b16      	ldr	r3, [pc, #88]	@ (80045f0 <HAL_RCC_OscConfig+0x280>)
 8004598:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800459a:	4a15      	ldr	r2, [pc, #84]	@ (80045f0 <HAL_RCC_OscConfig+0x280>)
 800459c:	f043 0301 	orr.w	r3, r3, #1
 80045a0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a2:	f7fd feb9 	bl	8002318 <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045a8:	e008      	b.n	80045bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045aa:	f7fd feb5 	bl	8002318 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e180      	b.n	80048be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045bc:	4b0c      	ldr	r3, [pc, #48]	@ (80045f0 <HAL_RCC_OscConfig+0x280>)
 80045be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0f0      	beq.n	80045aa <HAL_RCC_OscConfig+0x23a>
 80045c8:	e01a      	b.n	8004600 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045ca:	4b09      	ldr	r3, [pc, #36]	@ (80045f0 <HAL_RCC_OscConfig+0x280>)
 80045cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045ce:	4a08      	ldr	r2, [pc, #32]	@ (80045f0 <HAL_RCC_OscConfig+0x280>)
 80045d0:	f023 0301 	bic.w	r3, r3, #1
 80045d4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d6:	f7fd fe9f 	bl	8002318 <HAL_GetTick>
 80045da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045dc:	e00a      	b.n	80045f4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045de:	f7fd fe9b 	bl	8002318 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d903      	bls.n	80045f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e166      	b.n	80048be <HAL_RCC_OscConfig+0x54e>
 80045f0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045f4:	4b92      	ldr	r3, [pc, #584]	@ (8004840 <HAL_RCC_OscConfig+0x4d0>)
 80045f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1ee      	bne.n	80045de <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b00      	cmp	r3, #0
 800460a:	f000 80a4 	beq.w	8004756 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800460e:	4b8c      	ldr	r3, [pc, #560]	@ (8004840 <HAL_RCC_OscConfig+0x4d0>)
 8004610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10d      	bne.n	8004636 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800461a:	4b89      	ldr	r3, [pc, #548]	@ (8004840 <HAL_RCC_OscConfig+0x4d0>)
 800461c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461e:	4a88      	ldr	r2, [pc, #544]	@ (8004840 <HAL_RCC_OscConfig+0x4d0>)
 8004620:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004624:	6413      	str	r3, [r2, #64]	@ 0x40
 8004626:	4b86      	ldr	r3, [pc, #536]	@ (8004840 <HAL_RCC_OscConfig+0x4d0>)
 8004628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800462e:	60bb      	str	r3, [r7, #8]
 8004630:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004632:	2301      	movs	r3, #1
 8004634:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004636:	4b83      	ldr	r3, [pc, #524]	@ (8004844 <HAL_RCC_OscConfig+0x4d4>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800463e:	2b00      	cmp	r3, #0
 8004640:	d118      	bne.n	8004674 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004642:	4b80      	ldr	r3, [pc, #512]	@ (8004844 <HAL_RCC_OscConfig+0x4d4>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a7f      	ldr	r2, [pc, #508]	@ (8004844 <HAL_RCC_OscConfig+0x4d4>)
 8004648:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800464c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800464e:	f7fd fe63 	bl	8002318 <HAL_GetTick>
 8004652:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004654:	e008      	b.n	8004668 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004656:	f7fd fe5f 	bl	8002318 <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b64      	cmp	r3, #100	@ 0x64
 8004662:	d901      	bls.n	8004668 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e12a      	b.n	80048be <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004668:	4b76      	ldr	r3, [pc, #472]	@ (8004844 <HAL_RCC_OscConfig+0x4d4>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004670:	2b00      	cmp	r3, #0
 8004672:	d0f0      	beq.n	8004656 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d106      	bne.n	800468a <HAL_RCC_OscConfig+0x31a>
 800467c:	4b70      	ldr	r3, [pc, #448]	@ (8004840 <HAL_RCC_OscConfig+0x4d0>)
 800467e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004680:	4a6f      	ldr	r2, [pc, #444]	@ (8004840 <HAL_RCC_OscConfig+0x4d0>)
 8004682:	f043 0301 	orr.w	r3, r3, #1
 8004686:	6713      	str	r3, [r2, #112]	@ 0x70
 8004688:	e02d      	b.n	80046e6 <HAL_RCC_OscConfig+0x376>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10c      	bne.n	80046ac <HAL_RCC_OscConfig+0x33c>
 8004692:	4b6b      	ldr	r3, [pc, #428]	@ (8004840 <HAL_RCC_OscConfig+0x4d0>)
 8004694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004696:	4a6a      	ldr	r2, [pc, #424]	@ (8004840 <HAL_RCC_OscConfig+0x4d0>)
 8004698:	f023 0301 	bic.w	r3, r3, #1
 800469c:	6713      	str	r3, [r2, #112]	@ 0x70
 800469e:	4b68      	ldr	r3, [pc, #416]	@ (8004840 <HAL_RCC_OscConfig+0x4d0>)
 80046a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046a2:	4a67      	ldr	r2, [pc, #412]	@ (8004840 <HAL_RCC_OscConfig+0x4d0>)
 80046a4:	f023 0304 	bic.w	r3, r3, #4
 80046a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80046aa:	e01c      	b.n	80046e6 <HAL_RCC_OscConfig+0x376>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	2b05      	cmp	r3, #5
 80046b2:	d10c      	bne.n	80046ce <HAL_RCC_OscConfig+0x35e>
 80046b4:	4b62      	ldr	r3, [pc, #392]	@ (8004840 <HAL_RCC_OscConfig+0x4d0>)
 80046b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046b8:	4a61      	ldr	r2, [pc, #388]	@ (8004840 <HAL_RCC_OscConfig+0x4d0>)
 80046ba:	f043 0304 	orr.w	r3, r3, #4
 80046be:	6713      	str	r3, [r2, #112]	@ 0x70
 80046c0:	4b5f      	ldr	r3, [pc, #380]	@ (8004840 <HAL_RCC_OscConfig+0x4d0>)
 80046c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046c4:	4a5e      	ldr	r2, [pc, #376]	@ (8004840 <HAL_RCC_OscConfig+0x4d0>)
 80046c6:	f043 0301 	orr.w	r3, r3, #1
 80046ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80046cc:	e00b      	b.n	80046e6 <HAL_RCC_OscConfig+0x376>
 80046ce:	4b5c      	ldr	r3, [pc, #368]	@ (8004840 <HAL_RCC_OscConfig+0x4d0>)
 80046d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046d2:	4a5b      	ldr	r2, [pc, #364]	@ (8004840 <HAL_RCC_OscConfig+0x4d0>)
 80046d4:	f023 0301 	bic.w	r3, r3, #1
 80046d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80046da:	4b59      	ldr	r3, [pc, #356]	@ (8004840 <HAL_RCC_OscConfig+0x4d0>)
 80046dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046de:	4a58      	ldr	r2, [pc, #352]	@ (8004840 <HAL_RCC_OscConfig+0x4d0>)
 80046e0:	f023 0304 	bic.w	r3, r3, #4
 80046e4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d015      	beq.n	800471a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ee:	f7fd fe13 	bl	8002318 <HAL_GetTick>
 80046f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f4:	e00a      	b.n	800470c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046f6:	f7fd fe0f 	bl	8002318 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004704:	4293      	cmp	r3, r2
 8004706:	d901      	bls.n	800470c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e0d8      	b.n	80048be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800470c:	4b4c      	ldr	r3, [pc, #304]	@ (8004840 <HAL_RCC_OscConfig+0x4d0>)
 800470e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d0ee      	beq.n	80046f6 <HAL_RCC_OscConfig+0x386>
 8004718:	e014      	b.n	8004744 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800471a:	f7fd fdfd 	bl	8002318 <HAL_GetTick>
 800471e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004720:	e00a      	b.n	8004738 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004722:	f7fd fdf9 	bl	8002318 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004730:	4293      	cmp	r3, r2
 8004732:	d901      	bls.n	8004738 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e0c2      	b.n	80048be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004738:	4b41      	ldr	r3, [pc, #260]	@ (8004840 <HAL_RCC_OscConfig+0x4d0>)
 800473a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800473c:	f003 0302 	and.w	r3, r3, #2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1ee      	bne.n	8004722 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004744:	7dfb      	ldrb	r3, [r7, #23]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d105      	bne.n	8004756 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800474a:	4b3d      	ldr	r3, [pc, #244]	@ (8004840 <HAL_RCC_OscConfig+0x4d0>)
 800474c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474e:	4a3c      	ldr	r2, [pc, #240]	@ (8004840 <HAL_RCC_OscConfig+0x4d0>)
 8004750:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004754:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	2b00      	cmp	r3, #0
 800475c:	f000 80ae 	beq.w	80048bc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004760:	4b37      	ldr	r3, [pc, #220]	@ (8004840 <HAL_RCC_OscConfig+0x4d0>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f003 030c 	and.w	r3, r3, #12
 8004768:	2b08      	cmp	r3, #8
 800476a:	d06d      	beq.n	8004848 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	2b02      	cmp	r3, #2
 8004772:	d14b      	bne.n	800480c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004774:	4b32      	ldr	r3, [pc, #200]	@ (8004840 <HAL_RCC_OscConfig+0x4d0>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a31      	ldr	r2, [pc, #196]	@ (8004840 <HAL_RCC_OscConfig+0x4d0>)
 800477a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800477e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004780:	f7fd fdca 	bl	8002318 <HAL_GetTick>
 8004784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004786:	e008      	b.n	800479a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004788:	f7fd fdc6 	bl	8002318 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b02      	cmp	r3, #2
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e091      	b.n	80048be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800479a:	4b29      	ldr	r3, [pc, #164]	@ (8004840 <HAL_RCC_OscConfig+0x4d0>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1f0      	bne.n	8004788 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	69da      	ldr	r2, [r3, #28]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	431a      	orrs	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b4:	019b      	lsls	r3, r3, #6
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047bc:	085b      	lsrs	r3, r3, #1
 80047be:	3b01      	subs	r3, #1
 80047c0:	041b      	lsls	r3, r3, #16
 80047c2:	431a      	orrs	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c8:	061b      	lsls	r3, r3, #24
 80047ca:	431a      	orrs	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d0:	071b      	lsls	r3, r3, #28
 80047d2:	491b      	ldr	r1, [pc, #108]	@ (8004840 <HAL_RCC_OscConfig+0x4d0>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047d8:	4b19      	ldr	r3, [pc, #100]	@ (8004840 <HAL_RCC_OscConfig+0x4d0>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a18      	ldr	r2, [pc, #96]	@ (8004840 <HAL_RCC_OscConfig+0x4d0>)
 80047de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e4:	f7fd fd98 	bl	8002318 <HAL_GetTick>
 80047e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ec:	f7fd fd94 	bl	8002318 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e05f      	b.n	80048be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047fe:	4b10      	ldr	r3, [pc, #64]	@ (8004840 <HAL_RCC_OscConfig+0x4d0>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d0f0      	beq.n	80047ec <HAL_RCC_OscConfig+0x47c>
 800480a:	e057      	b.n	80048bc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800480c:	4b0c      	ldr	r3, [pc, #48]	@ (8004840 <HAL_RCC_OscConfig+0x4d0>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a0b      	ldr	r2, [pc, #44]	@ (8004840 <HAL_RCC_OscConfig+0x4d0>)
 8004812:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004818:	f7fd fd7e 	bl	8002318 <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800481e:	e008      	b.n	8004832 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004820:	f7fd fd7a 	bl	8002318 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e045      	b.n	80048be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004832:	4b03      	ldr	r3, [pc, #12]	@ (8004840 <HAL_RCC_OscConfig+0x4d0>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1f0      	bne.n	8004820 <HAL_RCC_OscConfig+0x4b0>
 800483e:	e03d      	b.n	80048bc <HAL_RCC_OscConfig+0x54c>
 8004840:	40023800 	.word	0x40023800
 8004844:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004848:	4b1f      	ldr	r3, [pc, #124]	@ (80048c8 <HAL_RCC_OscConfig+0x558>)
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d030      	beq.n	80048b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004860:	429a      	cmp	r2, r3
 8004862:	d129      	bne.n	80048b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800486e:	429a      	cmp	r2, r3
 8004870:	d122      	bne.n	80048b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004878:	4013      	ands	r3, r2
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800487e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004880:	4293      	cmp	r3, r2
 8004882:	d119      	bne.n	80048b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800488e:	085b      	lsrs	r3, r3, #1
 8004890:	3b01      	subs	r3, #1
 8004892:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004894:	429a      	cmp	r2, r3
 8004896:	d10f      	bne.n	80048b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d107      	bne.n	80048b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d001      	beq.n	80048bc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e000      	b.n	80048be <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3718      	adds	r7, #24
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	40023800 	.word	0x40023800

080048cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80048d6:	2300      	movs	r3, #0
 80048d8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e0d0      	b.n	8004a86 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048e4:	4b6a      	ldr	r3, [pc, #424]	@ (8004a90 <HAL_RCC_ClockConfig+0x1c4>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 030f 	and.w	r3, r3, #15
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d910      	bls.n	8004914 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048f2:	4b67      	ldr	r3, [pc, #412]	@ (8004a90 <HAL_RCC_ClockConfig+0x1c4>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f023 020f 	bic.w	r2, r3, #15
 80048fa:	4965      	ldr	r1, [pc, #404]	@ (8004a90 <HAL_RCC_ClockConfig+0x1c4>)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	4313      	orrs	r3, r2
 8004900:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004902:	4b63      	ldr	r3, [pc, #396]	@ (8004a90 <HAL_RCC_ClockConfig+0x1c4>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 030f 	and.w	r3, r3, #15
 800490a:	683a      	ldr	r2, [r7, #0]
 800490c:	429a      	cmp	r2, r3
 800490e:	d001      	beq.n	8004914 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e0b8      	b.n	8004a86 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d020      	beq.n	8004962 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	2b00      	cmp	r3, #0
 800492a:	d005      	beq.n	8004938 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800492c:	4b59      	ldr	r3, [pc, #356]	@ (8004a94 <HAL_RCC_ClockConfig+0x1c8>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	4a58      	ldr	r2, [pc, #352]	@ (8004a94 <HAL_RCC_ClockConfig+0x1c8>)
 8004932:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004936:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0308 	and.w	r3, r3, #8
 8004940:	2b00      	cmp	r3, #0
 8004942:	d005      	beq.n	8004950 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004944:	4b53      	ldr	r3, [pc, #332]	@ (8004a94 <HAL_RCC_ClockConfig+0x1c8>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	4a52      	ldr	r2, [pc, #328]	@ (8004a94 <HAL_RCC_ClockConfig+0x1c8>)
 800494a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800494e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004950:	4b50      	ldr	r3, [pc, #320]	@ (8004a94 <HAL_RCC_ClockConfig+0x1c8>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	494d      	ldr	r1, [pc, #308]	@ (8004a94 <HAL_RCC_ClockConfig+0x1c8>)
 800495e:	4313      	orrs	r3, r2
 8004960:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	d040      	beq.n	80049f0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d107      	bne.n	8004986 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004976:	4b47      	ldr	r3, [pc, #284]	@ (8004a94 <HAL_RCC_ClockConfig+0x1c8>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d115      	bne.n	80049ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e07f      	b.n	8004a86 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	2b02      	cmp	r3, #2
 800498c:	d107      	bne.n	800499e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800498e:	4b41      	ldr	r3, [pc, #260]	@ (8004a94 <HAL_RCC_ClockConfig+0x1c8>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d109      	bne.n	80049ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e073      	b.n	8004a86 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800499e:	4b3d      	ldr	r3, [pc, #244]	@ (8004a94 <HAL_RCC_ClockConfig+0x1c8>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e06b      	b.n	8004a86 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049ae:	4b39      	ldr	r3, [pc, #228]	@ (8004a94 <HAL_RCC_ClockConfig+0x1c8>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f023 0203 	bic.w	r2, r3, #3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	4936      	ldr	r1, [pc, #216]	@ (8004a94 <HAL_RCC_ClockConfig+0x1c8>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049c0:	f7fd fcaa 	bl	8002318 <HAL_GetTick>
 80049c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049c6:	e00a      	b.n	80049de <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049c8:	f7fd fca6 	bl	8002318 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e053      	b.n	8004a86 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049de:	4b2d      	ldr	r3, [pc, #180]	@ (8004a94 <HAL_RCC_ClockConfig+0x1c8>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 020c 	and.w	r2, r3, #12
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d1eb      	bne.n	80049c8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049f0:	4b27      	ldr	r3, [pc, #156]	@ (8004a90 <HAL_RCC_ClockConfig+0x1c4>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 030f 	and.w	r3, r3, #15
 80049f8:	683a      	ldr	r2, [r7, #0]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d210      	bcs.n	8004a20 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049fe:	4b24      	ldr	r3, [pc, #144]	@ (8004a90 <HAL_RCC_ClockConfig+0x1c4>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f023 020f 	bic.w	r2, r3, #15
 8004a06:	4922      	ldr	r1, [pc, #136]	@ (8004a90 <HAL_RCC_ClockConfig+0x1c4>)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a0e:	4b20      	ldr	r3, [pc, #128]	@ (8004a90 <HAL_RCC_ClockConfig+0x1c4>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 030f 	and.w	r3, r3, #15
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d001      	beq.n	8004a20 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e032      	b.n	8004a86 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0304 	and.w	r3, r3, #4
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d008      	beq.n	8004a3e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a2c:	4b19      	ldr	r3, [pc, #100]	@ (8004a94 <HAL_RCC_ClockConfig+0x1c8>)
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	4916      	ldr	r1, [pc, #88]	@ (8004a94 <HAL_RCC_ClockConfig+0x1c8>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0308 	and.w	r3, r3, #8
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d009      	beq.n	8004a5e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a4a:	4b12      	ldr	r3, [pc, #72]	@ (8004a94 <HAL_RCC_ClockConfig+0x1c8>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	00db      	lsls	r3, r3, #3
 8004a58:	490e      	ldr	r1, [pc, #56]	@ (8004a94 <HAL_RCC_ClockConfig+0x1c8>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a5e:	f000 f821 	bl	8004aa4 <HAL_RCC_GetSysClockFreq>
 8004a62:	4602      	mov	r2, r0
 8004a64:	4b0b      	ldr	r3, [pc, #44]	@ (8004a94 <HAL_RCC_ClockConfig+0x1c8>)
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	091b      	lsrs	r3, r3, #4
 8004a6a:	f003 030f 	and.w	r3, r3, #15
 8004a6e:	490a      	ldr	r1, [pc, #40]	@ (8004a98 <HAL_RCC_ClockConfig+0x1cc>)
 8004a70:	5ccb      	ldrb	r3, [r1, r3]
 8004a72:	fa22 f303 	lsr.w	r3, r2, r3
 8004a76:	4a09      	ldr	r2, [pc, #36]	@ (8004a9c <HAL_RCC_ClockConfig+0x1d0>)
 8004a78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a7a:	4b09      	ldr	r3, [pc, #36]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1d4>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7fd fc06 	bl	8002290 <HAL_InitTick>

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	40023c00 	.word	0x40023c00
 8004a94:	40023800 	.word	0x40023800
 8004a98:	08008210 	.word	0x08008210
 8004a9c:	20000030 	.word	0x20000030
 8004aa0:	20000034 	.word	0x20000034

08004aa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004aa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004aa8:	b090      	sub	sp, #64	@ 0x40
 8004aaa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004aac:	2300      	movs	r3, #0
 8004aae:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004abc:	4b59      	ldr	r3, [pc, #356]	@ (8004c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f003 030c 	and.w	r3, r3, #12
 8004ac4:	2b08      	cmp	r3, #8
 8004ac6:	d00d      	beq.n	8004ae4 <HAL_RCC_GetSysClockFreq+0x40>
 8004ac8:	2b08      	cmp	r3, #8
 8004aca:	f200 80a1 	bhi.w	8004c10 <HAL_RCC_GetSysClockFreq+0x16c>
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d002      	beq.n	8004ad8 <HAL_RCC_GetSysClockFreq+0x34>
 8004ad2:	2b04      	cmp	r3, #4
 8004ad4:	d003      	beq.n	8004ade <HAL_RCC_GetSysClockFreq+0x3a>
 8004ad6:	e09b      	b.n	8004c10 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ad8:	4b53      	ldr	r3, [pc, #332]	@ (8004c28 <HAL_RCC_GetSysClockFreq+0x184>)
 8004ada:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004adc:	e09b      	b.n	8004c16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ade:	4b53      	ldr	r3, [pc, #332]	@ (8004c2c <HAL_RCC_GetSysClockFreq+0x188>)
 8004ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004ae2:	e098      	b.n	8004c16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ae4:	4b4f      	ldr	r3, [pc, #316]	@ (8004c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004aec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004aee:	4b4d      	ldr	r3, [pc, #308]	@ (8004c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d028      	beq.n	8004b4c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004afa:	4b4a      	ldr	r3, [pc, #296]	@ (8004c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	099b      	lsrs	r3, r3, #6
 8004b00:	2200      	movs	r2, #0
 8004b02:	623b      	str	r3, [r7, #32]
 8004b04:	627a      	str	r2, [r7, #36]	@ 0x24
 8004b06:	6a3b      	ldr	r3, [r7, #32]
 8004b08:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	4b47      	ldr	r3, [pc, #284]	@ (8004c2c <HAL_RCC_GetSysClockFreq+0x188>)
 8004b10:	fb03 f201 	mul.w	r2, r3, r1
 8004b14:	2300      	movs	r3, #0
 8004b16:	fb00 f303 	mul.w	r3, r0, r3
 8004b1a:	4413      	add	r3, r2
 8004b1c:	4a43      	ldr	r2, [pc, #268]	@ (8004c2c <HAL_RCC_GetSysClockFreq+0x188>)
 8004b1e:	fba0 1202 	umull	r1, r2, r0, r2
 8004b22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b24:	460a      	mov	r2, r1
 8004b26:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004b28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b2a:	4413      	add	r3, r2
 8004b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b30:	2200      	movs	r2, #0
 8004b32:	61bb      	str	r3, [r7, #24]
 8004b34:	61fa      	str	r2, [r7, #28]
 8004b36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004b3e:	f7fb fb7b 	bl	8000238 <__aeabi_uldivmod>
 8004b42:	4602      	mov	r2, r0
 8004b44:	460b      	mov	r3, r1
 8004b46:	4613      	mov	r3, r2
 8004b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b4a:	e053      	b.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b4c:	4b35      	ldr	r3, [pc, #212]	@ (8004c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	099b      	lsrs	r3, r3, #6
 8004b52:	2200      	movs	r2, #0
 8004b54:	613b      	str	r3, [r7, #16]
 8004b56:	617a      	str	r2, [r7, #20]
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004b5e:	f04f 0b00 	mov.w	fp, #0
 8004b62:	4652      	mov	r2, sl
 8004b64:	465b      	mov	r3, fp
 8004b66:	f04f 0000 	mov.w	r0, #0
 8004b6a:	f04f 0100 	mov.w	r1, #0
 8004b6e:	0159      	lsls	r1, r3, #5
 8004b70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b74:	0150      	lsls	r0, r2, #5
 8004b76:	4602      	mov	r2, r0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	ebb2 080a 	subs.w	r8, r2, sl
 8004b7e:	eb63 090b 	sbc.w	r9, r3, fp
 8004b82:	f04f 0200 	mov.w	r2, #0
 8004b86:	f04f 0300 	mov.w	r3, #0
 8004b8a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004b8e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004b92:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004b96:	ebb2 0408 	subs.w	r4, r2, r8
 8004b9a:	eb63 0509 	sbc.w	r5, r3, r9
 8004b9e:	f04f 0200 	mov.w	r2, #0
 8004ba2:	f04f 0300 	mov.w	r3, #0
 8004ba6:	00eb      	lsls	r3, r5, #3
 8004ba8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bac:	00e2      	lsls	r2, r4, #3
 8004bae:	4614      	mov	r4, r2
 8004bb0:	461d      	mov	r5, r3
 8004bb2:	eb14 030a 	adds.w	r3, r4, sl
 8004bb6:	603b      	str	r3, [r7, #0]
 8004bb8:	eb45 030b 	adc.w	r3, r5, fp
 8004bbc:	607b      	str	r3, [r7, #4]
 8004bbe:	f04f 0200 	mov.w	r2, #0
 8004bc2:	f04f 0300 	mov.w	r3, #0
 8004bc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bca:	4629      	mov	r1, r5
 8004bcc:	028b      	lsls	r3, r1, #10
 8004bce:	4621      	mov	r1, r4
 8004bd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bd4:	4621      	mov	r1, r4
 8004bd6:	028a      	lsls	r2, r1, #10
 8004bd8:	4610      	mov	r0, r2
 8004bda:	4619      	mov	r1, r3
 8004bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bde:	2200      	movs	r2, #0
 8004be0:	60bb      	str	r3, [r7, #8]
 8004be2:	60fa      	str	r2, [r7, #12]
 8004be4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004be8:	f7fb fb26 	bl	8000238 <__aeabi_uldivmod>
 8004bec:	4602      	mov	r2, r0
 8004bee:	460b      	mov	r3, r1
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8004c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	0c1b      	lsrs	r3, r3, #16
 8004bfa:	f003 0303 	and.w	r3, r3, #3
 8004bfe:	3301      	adds	r3, #1
 8004c00:	005b      	lsls	r3, r3, #1
 8004c02:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004c04:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c0e:	e002      	b.n	8004c16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c10:	4b05      	ldr	r3, [pc, #20]	@ (8004c28 <HAL_RCC_GetSysClockFreq+0x184>)
 8004c12:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3740      	adds	r7, #64	@ 0x40
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c22:	bf00      	nop
 8004c24:	40023800 	.word	0x40023800
 8004c28:	00f42400 	.word	0x00f42400
 8004c2c:	01312d00 	.word	0x01312d00

08004c30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b088      	sub	sp, #32
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004c40:	2300      	movs	r3, #0
 8004c42:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004c44:	2300      	movs	r3, #0
 8004c46:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d012      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c58:	4b69      	ldr	r3, [pc, #420]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	4a68      	ldr	r2, [pc, #416]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c5e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004c62:	6093      	str	r3, [r2, #8]
 8004c64:	4b66      	ldr	r3, [pc, #408]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c66:	689a      	ldr	r2, [r3, #8]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c6c:	4964      	ldr	r1, [pc, #400]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d017      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c8a:	4b5d      	ldr	r3, [pc, #372]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c90:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c98:	4959      	ldr	r1, [pc, #356]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ca4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ca8:	d101      	bne.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004caa:	2301      	movs	r3, #1
 8004cac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d017      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004cc6:	4b4e      	ldr	r3, [pc, #312]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ccc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd4:	494a      	ldr	r1, [pc, #296]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ce4:	d101      	bne.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d001      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004d02:	2301      	movs	r3, #1
 8004d04:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0320 	and.w	r3, r3, #32
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f000 808b 	beq.w	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d14:	4b3a      	ldr	r3, [pc, #232]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d18:	4a39      	ldr	r2, [pc, #228]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d20:	4b37      	ldr	r3, [pc, #220]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d28:	60bb      	str	r3, [r7, #8]
 8004d2a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004d2c:	4b35      	ldr	r3, [pc, #212]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a34      	ldr	r2, [pc, #208]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d38:	f7fd faee 	bl	8002318 <HAL_GetTick>
 8004d3c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d3e:	e008      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d40:	f7fd faea 	bl	8002318 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b64      	cmp	r3, #100	@ 0x64
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e38f      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d52:	4b2c      	ldr	r3, [pc, #176]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d0f0      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d5e:	4b28      	ldr	r3, [pc, #160]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d66:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d035      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d02e      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d7c:	4b20      	ldr	r3, [pc, #128]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d84:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d86:	4b1e      	ldr	r3, [pc, #120]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d8a:	4a1d      	ldr	r2, [pc, #116]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d90:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d92:	4b1b      	ldr	r3, [pc, #108]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d96:	4a1a      	ldr	r2, [pc, #104]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d9c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004d9e:	4a18      	ldr	r2, [pc, #96]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004da4:	4b16      	ldr	r3, [pc, #88]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004da6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d114      	bne.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db0:	f7fd fab2 	bl	8002318 <HAL_GetTick>
 8004db4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004db6:	e00a      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004db8:	f7fd faae 	bl	8002318 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d901      	bls.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e351      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dce:	4b0c      	ldr	r3, [pc, #48]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d0ee      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004de2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004de6:	d111      	bne.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004de8:	4b05      	ldr	r3, [pc, #20]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004df4:	4b04      	ldr	r3, [pc, #16]	@ (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004df6:	400b      	ands	r3, r1
 8004df8:	4901      	ldr	r1, [pc, #4]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	608b      	str	r3, [r1, #8]
 8004dfe:	e00b      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004e00:	40023800 	.word	0x40023800
 8004e04:	40007000 	.word	0x40007000
 8004e08:	0ffffcff 	.word	0x0ffffcff
 8004e0c:	4bac      	ldr	r3, [pc, #688]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	4aab      	ldr	r2, [pc, #684]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e12:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004e16:	6093      	str	r3, [r2, #8]
 8004e18:	4ba9      	ldr	r3, [pc, #676]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e1a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e24:	49a6      	ldr	r1, [pc, #664]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0310 	and.w	r3, r3, #16
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d010      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e36:	4ba2      	ldr	r3, [pc, #648]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e3c:	4aa0      	ldr	r2, [pc, #640]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e42:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004e46:	4b9e      	ldr	r3, [pc, #632]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e48:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e50:	499b      	ldr	r1, [pc, #620]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00a      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e64:	4b96      	ldr	r3, [pc, #600]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e6a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e72:	4993      	ldr	r1, [pc, #588]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00a      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e86:	4b8e      	ldr	r3, [pc, #568]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e8c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e94:	498a      	ldr	r1, [pc, #552]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00a      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ea8:	4b85      	ldr	r3, [pc, #532]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004eb6:	4982      	ldr	r1, [pc, #520]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00a      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004eca:	4b7d      	ldr	r3, [pc, #500]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ed0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ed8:	4979      	ldr	r1, [pc, #484]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00a      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004eec:	4b74      	ldr	r3, [pc, #464]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ef2:	f023 0203 	bic.w	r2, r3, #3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004efa:	4971      	ldr	r1, [pc, #452]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00a      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f0e:	4b6c      	ldr	r3, [pc, #432]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f14:	f023 020c 	bic.w	r2, r3, #12
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f1c:	4968      	ldr	r1, [pc, #416]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00a      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f30:	4b63      	ldr	r3, [pc, #396]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f36:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f3e:	4960      	ldr	r1, [pc, #384]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00a      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f52:	4b5b      	ldr	r3, [pc, #364]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f58:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f60:	4957      	ldr	r1, [pc, #348]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00a      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f74:	4b52      	ldr	r3, [pc, #328]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f7a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f82:	494f      	ldr	r1, [pc, #316]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00a      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004f96:	4b4a      	ldr	r3, [pc, #296]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f9c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fa4:	4946      	ldr	r1, [pc, #280]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00a      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004fb8:	4b41      	ldr	r3, [pc, #260]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fbe:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fc6:	493e      	ldr	r1, [pc, #248]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00a      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004fda:	4b39      	ldr	r3, [pc, #228]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fe0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fe8:	4935      	ldr	r1, [pc, #212]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00a      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ffc:	4b30      	ldr	r3, [pc, #192]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005002:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800500a:	492d      	ldr	r1, [pc, #180]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800500c:	4313      	orrs	r3, r2
 800500e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d011      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800501e:	4b28      	ldr	r3, [pc, #160]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005020:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005024:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800502c:	4924      	ldr	r1, [pc, #144]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800502e:	4313      	orrs	r3, r2
 8005030:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005038:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800503c:	d101      	bne.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800503e:	2301      	movs	r3, #1
 8005040:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0308 	and.w	r3, r3, #8
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800504e:	2301      	movs	r3, #1
 8005050:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00a      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800505e:	4b18      	ldr	r3, [pc, #96]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005060:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005064:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800506c:	4914      	ldr	r1, [pc, #80]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800506e:	4313      	orrs	r3, r2
 8005070:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00b      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005080:	4b0f      	ldr	r3, [pc, #60]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005086:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005090:	490b      	ldr	r1, [pc, #44]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005092:	4313      	orrs	r3, r2
 8005094:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00f      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80050a4:	4b06      	ldr	r3, [pc, #24]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050aa:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050b4:	4902      	ldr	r1, [pc, #8]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80050bc:	e002      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80050be:	bf00      	nop
 80050c0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00b      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80050d0:	4b8a      	ldr	r3, [pc, #552]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80050d6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050e0:	4986      	ldr	r1, [pc, #536]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00b      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80050f4:	4b81      	ldr	r3, [pc, #516]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80050fa:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005104:	497d      	ldr	r1, [pc, #500]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005106:	4313      	orrs	r3, r2
 8005108:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d006      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 80d6 	beq.w	80052cc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005120:	4b76      	ldr	r3, [pc, #472]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a75      	ldr	r2, [pc, #468]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005126:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800512a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800512c:	f7fd f8f4 	bl	8002318 <HAL_GetTick>
 8005130:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005132:	e008      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005134:	f7fd f8f0 	bl	8002318 <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	2b64      	cmp	r3, #100	@ 0x64
 8005140:	d901      	bls.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e195      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005146:	4b6d      	ldr	r3, [pc, #436]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1f0      	bne.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b00      	cmp	r3, #0
 800515c:	d021      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005162:	2b00      	cmp	r3, #0
 8005164:	d11d      	bne.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005166:	4b65      	ldr	r3, [pc, #404]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005168:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800516c:	0c1b      	lsrs	r3, r3, #16
 800516e:	f003 0303 	and.w	r3, r3, #3
 8005172:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005174:	4b61      	ldr	r3, [pc, #388]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005176:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800517a:	0e1b      	lsrs	r3, r3, #24
 800517c:	f003 030f 	and.w	r3, r3, #15
 8005180:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	019a      	lsls	r2, r3, #6
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	041b      	lsls	r3, r3, #16
 800518c:	431a      	orrs	r2, r3
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	061b      	lsls	r3, r3, #24
 8005192:	431a      	orrs	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	071b      	lsls	r3, r3, #28
 800519a:	4958      	ldr	r1, [pc, #352]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800519c:	4313      	orrs	r3, r2
 800519e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d004      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051b6:	d00a      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d02e      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80051cc:	d129      	bne.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80051ce:	4b4b      	ldr	r3, [pc, #300]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051d4:	0c1b      	lsrs	r3, r3, #16
 80051d6:	f003 0303 	and.w	r3, r3, #3
 80051da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80051dc:	4b47      	ldr	r3, [pc, #284]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051e2:	0f1b      	lsrs	r3, r3, #28
 80051e4:	f003 0307 	and.w	r3, r3, #7
 80051e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	019a      	lsls	r2, r3, #6
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	041b      	lsls	r3, r3, #16
 80051f4:	431a      	orrs	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	061b      	lsls	r3, r3, #24
 80051fc:	431a      	orrs	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	071b      	lsls	r3, r3, #28
 8005202:	493e      	ldr	r1, [pc, #248]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005204:	4313      	orrs	r3, r2
 8005206:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800520a:	4b3c      	ldr	r3, [pc, #240]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800520c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005210:	f023 021f 	bic.w	r2, r3, #31
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005218:	3b01      	subs	r3, #1
 800521a:	4938      	ldr	r1, [pc, #224]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800521c:	4313      	orrs	r3, r2
 800521e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d01d      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800522e:	4b33      	ldr	r3, [pc, #204]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005230:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005234:	0e1b      	lsrs	r3, r3, #24
 8005236:	f003 030f 	and.w	r3, r3, #15
 800523a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800523c:	4b2f      	ldr	r3, [pc, #188]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800523e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005242:	0f1b      	lsrs	r3, r3, #28
 8005244:	f003 0307 	and.w	r3, r3, #7
 8005248:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	019a      	lsls	r2, r3, #6
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	041b      	lsls	r3, r3, #16
 8005256:	431a      	orrs	r2, r3
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	061b      	lsls	r3, r3, #24
 800525c:	431a      	orrs	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	071b      	lsls	r3, r3, #28
 8005262:	4926      	ldr	r1, [pc, #152]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005264:	4313      	orrs	r3, r2
 8005266:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d011      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	019a      	lsls	r2, r3, #6
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	041b      	lsls	r3, r3, #16
 8005282:	431a      	orrs	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	061b      	lsls	r3, r3, #24
 800528a:	431a      	orrs	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	071b      	lsls	r3, r3, #28
 8005292:	491a      	ldr	r1, [pc, #104]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005294:	4313      	orrs	r3, r2
 8005296:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800529a:	4b18      	ldr	r3, [pc, #96]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a17      	ldr	r2, [pc, #92]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052a0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80052a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052a6:	f7fd f837 	bl	8002318 <HAL_GetTick>
 80052aa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052ac:	e008      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80052ae:	f7fd f833 	bl	8002318 <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	2b64      	cmp	r3, #100	@ 0x64
 80052ba:	d901      	bls.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e0d8      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052c0:	4b0e      	ldr	r3, [pc, #56]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d0f0      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	f040 80ce 	bne.w	8005470 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80052d4:	4b09      	ldr	r3, [pc, #36]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a08      	ldr	r2, [pc, #32]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052e0:	f7fd f81a 	bl	8002318 <HAL_GetTick>
 80052e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80052e6:	e00b      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80052e8:	f7fd f816 	bl	8002318 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b64      	cmp	r3, #100	@ 0x64
 80052f4:	d904      	bls.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e0bb      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80052fa:	bf00      	nop
 80052fc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005300:	4b5e      	ldr	r3, [pc, #376]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005308:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800530c:	d0ec      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d003      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800531e:	2b00      	cmp	r3, #0
 8005320:	d009      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800532a:	2b00      	cmp	r3, #0
 800532c:	d02e      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005332:	2b00      	cmp	r3, #0
 8005334:	d12a      	bne.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005336:	4b51      	ldr	r3, [pc, #324]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005338:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800533c:	0c1b      	lsrs	r3, r3, #16
 800533e:	f003 0303 	and.w	r3, r3, #3
 8005342:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005344:	4b4d      	ldr	r3, [pc, #308]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005346:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800534a:	0f1b      	lsrs	r3, r3, #28
 800534c:	f003 0307 	and.w	r3, r3, #7
 8005350:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	019a      	lsls	r2, r3, #6
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	041b      	lsls	r3, r3, #16
 800535c:	431a      	orrs	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	061b      	lsls	r3, r3, #24
 8005364:	431a      	orrs	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	071b      	lsls	r3, r3, #28
 800536a:	4944      	ldr	r1, [pc, #272]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800536c:	4313      	orrs	r3, r2
 800536e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005372:	4b42      	ldr	r3, [pc, #264]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005374:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005378:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005380:	3b01      	subs	r3, #1
 8005382:	021b      	lsls	r3, r3, #8
 8005384:	493d      	ldr	r1, [pc, #244]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005386:	4313      	orrs	r3, r2
 8005388:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d022      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800539c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053a0:	d11d      	bne.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80053a2:	4b36      	ldr	r3, [pc, #216]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053a8:	0e1b      	lsrs	r3, r3, #24
 80053aa:	f003 030f 	and.w	r3, r3, #15
 80053ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80053b0:	4b32      	ldr	r3, [pc, #200]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053b6:	0f1b      	lsrs	r3, r3, #28
 80053b8:	f003 0307 	and.w	r3, r3, #7
 80053bc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	019a      	lsls	r2, r3, #6
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a1b      	ldr	r3, [r3, #32]
 80053c8:	041b      	lsls	r3, r3, #16
 80053ca:	431a      	orrs	r2, r3
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	061b      	lsls	r3, r3, #24
 80053d0:	431a      	orrs	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	071b      	lsls	r3, r3, #28
 80053d6:	4929      	ldr	r1, [pc, #164]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0308 	and.w	r3, r3, #8
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d028      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80053ea:	4b24      	ldr	r3, [pc, #144]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053f0:	0e1b      	lsrs	r3, r3, #24
 80053f2:	f003 030f 	and.w	r3, r3, #15
 80053f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80053f8:	4b20      	ldr	r3, [pc, #128]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053fe:	0c1b      	lsrs	r3, r3, #16
 8005400:	f003 0303 	and.w	r3, r3, #3
 8005404:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	019a      	lsls	r2, r3, #6
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	041b      	lsls	r3, r3, #16
 8005410:	431a      	orrs	r2, r3
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	061b      	lsls	r3, r3, #24
 8005416:	431a      	orrs	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	69db      	ldr	r3, [r3, #28]
 800541c:	071b      	lsls	r3, r3, #28
 800541e:	4917      	ldr	r1, [pc, #92]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005420:	4313      	orrs	r3, r2
 8005422:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005426:	4b15      	ldr	r3, [pc, #84]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005428:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800542c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005434:	4911      	ldr	r1, [pc, #68]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005436:	4313      	orrs	r3, r2
 8005438:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800543c:	4b0f      	ldr	r3, [pc, #60]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a0e      	ldr	r2, [pc, #56]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005442:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005446:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005448:	f7fc ff66 	bl	8002318 <HAL_GetTick>
 800544c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800544e:	e008      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005450:	f7fc ff62 	bl	8002318 <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	2b64      	cmp	r3, #100	@ 0x64
 800545c:	d901      	bls.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e007      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005462:	4b06      	ldr	r3, [pc, #24]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800546a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800546e:	d1ef      	bne.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3720      	adds	r7, #32
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	40023800 	.word	0x40023800

08005480 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e049      	b.n	8005526 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d106      	bne.n	80054ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f7fc fd2e 	bl	8001f08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2202      	movs	r2, #2
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	3304      	adds	r3, #4
 80054bc:	4619      	mov	r1, r3
 80054be:	4610      	mov	r0, r2
 80054c0:	f000 fe0c 	bl	80060dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3708      	adds	r7, #8
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
	...

08005530 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800553e:	b2db      	uxtb	r3, r3
 8005540:	2b01      	cmp	r3, #1
 8005542:	d001      	beq.n	8005548 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e054      	b.n	80055f2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2202      	movs	r2, #2
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68da      	ldr	r2, [r3, #12]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f042 0201 	orr.w	r2, r2, #1
 800555e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a26      	ldr	r2, [pc, #152]	@ (8005600 <HAL_TIM_Base_Start_IT+0xd0>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d022      	beq.n	80055b0 <HAL_TIM_Base_Start_IT+0x80>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005572:	d01d      	beq.n	80055b0 <HAL_TIM_Base_Start_IT+0x80>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a22      	ldr	r2, [pc, #136]	@ (8005604 <HAL_TIM_Base_Start_IT+0xd4>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d018      	beq.n	80055b0 <HAL_TIM_Base_Start_IT+0x80>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a21      	ldr	r2, [pc, #132]	@ (8005608 <HAL_TIM_Base_Start_IT+0xd8>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d013      	beq.n	80055b0 <HAL_TIM_Base_Start_IT+0x80>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a1f      	ldr	r2, [pc, #124]	@ (800560c <HAL_TIM_Base_Start_IT+0xdc>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d00e      	beq.n	80055b0 <HAL_TIM_Base_Start_IT+0x80>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a1e      	ldr	r2, [pc, #120]	@ (8005610 <HAL_TIM_Base_Start_IT+0xe0>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d009      	beq.n	80055b0 <HAL_TIM_Base_Start_IT+0x80>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a1c      	ldr	r2, [pc, #112]	@ (8005614 <HAL_TIM_Base_Start_IT+0xe4>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d004      	beq.n	80055b0 <HAL_TIM_Base_Start_IT+0x80>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005618 <HAL_TIM_Base_Start_IT+0xe8>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d115      	bne.n	80055dc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	689a      	ldr	r2, [r3, #8]
 80055b6:	4b19      	ldr	r3, [pc, #100]	@ (800561c <HAL_TIM_Base_Start_IT+0xec>)
 80055b8:	4013      	ands	r3, r2
 80055ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2b06      	cmp	r3, #6
 80055c0:	d015      	beq.n	80055ee <HAL_TIM_Base_Start_IT+0xbe>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055c8:	d011      	beq.n	80055ee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f042 0201 	orr.w	r2, r2, #1
 80055d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055da:	e008      	b.n	80055ee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f042 0201 	orr.w	r2, r2, #1
 80055ea:	601a      	str	r2, [r3, #0]
 80055ec:	e000      	b.n	80055f0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	40010000 	.word	0x40010000
 8005604:	40000400 	.word	0x40000400
 8005608:	40000800 	.word	0x40000800
 800560c:	40000c00 	.word	0x40000c00
 8005610:	40010400 	.word	0x40010400
 8005614:	40014000 	.word	0x40014000
 8005618:	40001800 	.word	0x40001800
 800561c:	00010007 	.word	0x00010007

08005620 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e049      	b.n	80056c6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d106      	bne.n	800564c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f841 	bl	80056ce <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2202      	movs	r2, #2
 8005650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	3304      	adds	r3, #4
 800565c:	4619      	mov	r1, r3
 800565e:	4610      	mov	r0, r2
 8005660:	f000 fd3c 	bl	80060dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3708      	adds	r7, #8
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80056ce:	b480      	push	{r7}
 80056d0:	b083      	sub	sp, #12
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80056d6:	bf00      	nop
 80056d8:	370c      	adds	r7, #12
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr

080056e2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b082      	sub	sp, #8
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d101      	bne.n	80056f4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e049      	b.n	8005788 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d106      	bne.n	800570e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 f841 	bl	8005790 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2202      	movs	r2, #2
 8005712:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	3304      	adds	r3, #4
 800571e:	4619      	mov	r1, r3
 8005720:	4610      	mov	r0, r2
 8005722:	f000 fcdb 	bl	80060dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2201      	movs	r2, #1
 800572a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2201      	movs	r2, #1
 8005732:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3708      	adds	r7, #8
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005798:	bf00      	nop
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e049      	b.n	800584a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d106      	bne.n	80057d0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f7fc fbf2 	bl	8001fb4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2202      	movs	r2, #2
 80057d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	3304      	adds	r3, #4
 80057e0:	4619      	mov	r1, r3
 80057e2:	4610      	mov	r0, r2
 80057e4:	f000 fc7a 	bl	80060dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3708      	adds	r7, #8
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b082      	sub	sp, #8
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	f003 0302 	and.w	r3, r3, #2
 8005864:	2b02      	cmp	r3, #2
 8005866:	d122      	bne.n	80058ae <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	2b02      	cmp	r3, #2
 8005874:	d11b      	bne.n	80058ae <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f06f 0202 	mvn.w	r2, #2
 800587e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	f003 0303 	and.w	r3, r3, #3
 8005890:	2b00      	cmp	r3, #0
 8005892:	d003      	beq.n	800589c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 fc03 	bl	80060a0 <HAL_TIM_IC_CaptureCallback>
 800589a:	e005      	b.n	80058a8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 fbf5 	bl	800608c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 fc06 	bl	80060b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	f003 0304 	and.w	r3, r3, #4
 80058b8:	2b04      	cmp	r3, #4
 80058ba:	d122      	bne.n	8005902 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	f003 0304 	and.w	r3, r3, #4
 80058c6:	2b04      	cmp	r3, #4
 80058c8:	d11b      	bne.n	8005902 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f06f 0204 	mvn.w	r2, #4
 80058d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2202      	movs	r2, #2
 80058d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d003      	beq.n	80058f0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fbd9 	bl	80060a0 <HAL_TIM_IC_CaptureCallback>
 80058ee:	e005      	b.n	80058fc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 fbcb 	bl	800608c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 fbdc 	bl	80060b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	f003 0308 	and.w	r3, r3, #8
 800590c:	2b08      	cmp	r3, #8
 800590e:	d122      	bne.n	8005956 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	f003 0308 	and.w	r3, r3, #8
 800591a:	2b08      	cmp	r3, #8
 800591c:	d11b      	bne.n	8005956 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f06f 0208 	mvn.w	r2, #8
 8005926:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2204      	movs	r2, #4
 800592c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	69db      	ldr	r3, [r3, #28]
 8005934:	f003 0303 	and.w	r3, r3, #3
 8005938:	2b00      	cmp	r3, #0
 800593a:	d003      	beq.n	8005944 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 fbaf 	bl	80060a0 <HAL_TIM_IC_CaptureCallback>
 8005942:	e005      	b.n	8005950 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 fba1 	bl	800608c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 fbb2 	bl	80060b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	f003 0310 	and.w	r3, r3, #16
 8005960:	2b10      	cmp	r3, #16
 8005962:	d122      	bne.n	80059aa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	f003 0310 	and.w	r3, r3, #16
 800596e:	2b10      	cmp	r3, #16
 8005970:	d11b      	bne.n	80059aa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f06f 0210 	mvn.w	r2, #16
 800597a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2208      	movs	r2, #8
 8005980:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	69db      	ldr	r3, [r3, #28]
 8005988:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800598c:	2b00      	cmp	r3, #0
 800598e:	d003      	beq.n	8005998 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 fb85 	bl	80060a0 <HAL_TIM_IC_CaptureCallback>
 8005996:	e005      	b.n	80059a4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 fb77 	bl	800608c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 fb88 	bl	80060b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d10e      	bne.n	80059d6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d107      	bne.n	80059d6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f06f 0201 	mvn.w	r2, #1
 80059ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 fb51 	bl	8006078 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059e0:	2b80      	cmp	r3, #128	@ 0x80
 80059e2:	d10e      	bne.n	8005a02 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059ee:	2b80      	cmp	r3, #128	@ 0x80
 80059f0:	d107      	bne.n	8005a02 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80059fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f001 f945 	bl	8006c8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a10:	d10e      	bne.n	8005a30 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a1c:	2b80      	cmp	r3, #128	@ 0x80
 8005a1e:	d107      	bne.n	8005a30 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f001 f938 	bl	8006ca0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a3a:	2b40      	cmp	r3, #64	@ 0x40
 8005a3c:	d10e      	bne.n	8005a5c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a48:	2b40      	cmp	r3, #64	@ 0x40
 8005a4a:	d107      	bne.n	8005a5c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 fb36 	bl	80060c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	f003 0320 	and.w	r3, r3, #32
 8005a66:	2b20      	cmp	r3, #32
 8005a68:	d10e      	bne.n	8005a88 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	f003 0320 	and.w	r3, r3, #32
 8005a74:	2b20      	cmp	r3, #32
 8005a76:	d107      	bne.n	8005a88 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f06f 0220 	mvn.w	r2, #32
 8005a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f001 f8f8 	bl	8006c78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a88:	bf00      	nop
 8005a8a:	3708      	adds	r7, #8
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d101      	bne.n	8005aae <HAL_TIM_OC_ConfigChannel+0x1e>
 8005aaa:	2302      	movs	r3, #2
 8005aac:	e066      	b.n	8005b7c <HAL_TIM_OC_ConfigChannel+0xec>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2b14      	cmp	r3, #20
 8005aba:	d857      	bhi.n	8005b6c <HAL_TIM_OC_ConfigChannel+0xdc>
 8005abc:	a201      	add	r2, pc, #4	@ (adr r2, 8005ac4 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac2:	bf00      	nop
 8005ac4:	08005b19 	.word	0x08005b19
 8005ac8:	08005b6d 	.word	0x08005b6d
 8005acc:	08005b6d 	.word	0x08005b6d
 8005ad0:	08005b6d 	.word	0x08005b6d
 8005ad4:	08005b27 	.word	0x08005b27
 8005ad8:	08005b6d 	.word	0x08005b6d
 8005adc:	08005b6d 	.word	0x08005b6d
 8005ae0:	08005b6d 	.word	0x08005b6d
 8005ae4:	08005b35 	.word	0x08005b35
 8005ae8:	08005b6d 	.word	0x08005b6d
 8005aec:	08005b6d 	.word	0x08005b6d
 8005af0:	08005b6d 	.word	0x08005b6d
 8005af4:	08005b43 	.word	0x08005b43
 8005af8:	08005b6d 	.word	0x08005b6d
 8005afc:	08005b6d 	.word	0x08005b6d
 8005b00:	08005b6d 	.word	0x08005b6d
 8005b04:	08005b51 	.word	0x08005b51
 8005b08:	08005b6d 	.word	0x08005b6d
 8005b0c:	08005b6d 	.word	0x08005b6d
 8005b10:	08005b6d 	.word	0x08005b6d
 8005b14:	08005b5f 	.word	0x08005b5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68b9      	ldr	r1, [r7, #8]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f000 fb7c 	bl	800621c <TIM_OC1_SetConfig>
      break;
 8005b24:	e025      	b.n	8005b72 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68b9      	ldr	r1, [r7, #8]
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f000 fbe7 	bl	8006300 <TIM_OC2_SetConfig>
      break;
 8005b32:	e01e      	b.n	8005b72 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68b9      	ldr	r1, [r7, #8]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 fc58 	bl	80063f0 <TIM_OC3_SetConfig>
      break;
 8005b40:	e017      	b.n	8005b72 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68b9      	ldr	r1, [r7, #8]
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f000 fcc7 	bl	80064dc <TIM_OC4_SetConfig>
      break;
 8005b4e:	e010      	b.n	8005b72 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68b9      	ldr	r1, [r7, #8]
 8005b56:	4618      	mov	r0, r3
 8005b58:	f000 fd18 	bl	800658c <TIM_OC5_SetConfig>
      break;
 8005b5c:	e009      	b.n	8005b72 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68b9      	ldr	r1, [r7, #8]
 8005b64:	4618      	mov	r0, r3
 8005b66:	f000 fd63 	bl	8006630 <TIM_OC6_SetConfig>
      break;
 8005b6a:	e002      	b.n	8005b72 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b70:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3718      	adds	r7, #24
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b086      	sub	sp, #24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b90:	2300      	movs	r3, #0
 8005b92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d101      	bne.n	8005ba2 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005b9e:	2302      	movs	r3, #2
 8005ba0:	e088      	b.n	8005cb4 <HAL_TIM_IC_ConfigChannel+0x130>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d11b      	bne.n	8005be8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005bc0:	f000 fd8a 	bl	80066d8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	699a      	ldr	r2, [r3, #24]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f022 020c 	bic.w	r2, r2, #12
 8005bd2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6999      	ldr	r1, [r3, #24]
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	689a      	ldr	r2, [r3, #8]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	430a      	orrs	r2, r1
 8005be4:	619a      	str	r2, [r3, #24]
 8005be6:	e060      	b.n	8005caa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2b04      	cmp	r3, #4
 8005bec:	d11c      	bne.n	8005c28 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005bfe:	f000 fe0e 	bl	800681e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	699a      	ldr	r2, [r3, #24]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005c10:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	6999      	ldr	r1, [r3, #24]
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	021a      	lsls	r2, r3, #8
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	430a      	orrs	r2, r1
 8005c24:	619a      	str	r2, [r3, #24]
 8005c26:	e040      	b.n	8005caa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b08      	cmp	r3, #8
 8005c2c:	d11b      	bne.n	8005c66 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005c3e:	f000 fe5b 	bl	80068f8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	69da      	ldr	r2, [r3, #28]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f022 020c 	bic.w	r2, r2, #12
 8005c50:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	69d9      	ldr	r1, [r3, #28]
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	689a      	ldr	r2, [r3, #8]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	430a      	orrs	r2, r1
 8005c62:	61da      	str	r2, [r3, #28]
 8005c64:	e021      	b.n	8005caa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2b0c      	cmp	r3, #12
 8005c6a:	d11c      	bne.n	8005ca6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005c7c:	f000 fe78 	bl	8006970 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	69da      	ldr	r2, [r3, #28]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005c8e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	69d9      	ldr	r1, [r3, #28]
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	021a      	lsls	r2, r3, #8
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	61da      	str	r2, [r3, #28]
 8005ca4:	e001      	b.n	8005caa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005cb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3718      	adds	r7, #24
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d101      	bne.n	8005cda <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005cd6:	2302      	movs	r3, #2
 8005cd8:	e0ff      	b.n	8005eda <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2b14      	cmp	r3, #20
 8005ce6:	f200 80f0 	bhi.w	8005eca <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005cea:	a201      	add	r2, pc, #4	@ (adr r2, 8005cf0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf0:	08005d45 	.word	0x08005d45
 8005cf4:	08005ecb 	.word	0x08005ecb
 8005cf8:	08005ecb 	.word	0x08005ecb
 8005cfc:	08005ecb 	.word	0x08005ecb
 8005d00:	08005d85 	.word	0x08005d85
 8005d04:	08005ecb 	.word	0x08005ecb
 8005d08:	08005ecb 	.word	0x08005ecb
 8005d0c:	08005ecb 	.word	0x08005ecb
 8005d10:	08005dc7 	.word	0x08005dc7
 8005d14:	08005ecb 	.word	0x08005ecb
 8005d18:	08005ecb 	.word	0x08005ecb
 8005d1c:	08005ecb 	.word	0x08005ecb
 8005d20:	08005e07 	.word	0x08005e07
 8005d24:	08005ecb 	.word	0x08005ecb
 8005d28:	08005ecb 	.word	0x08005ecb
 8005d2c:	08005ecb 	.word	0x08005ecb
 8005d30:	08005e49 	.word	0x08005e49
 8005d34:	08005ecb 	.word	0x08005ecb
 8005d38:	08005ecb 	.word	0x08005ecb
 8005d3c:	08005ecb 	.word	0x08005ecb
 8005d40:	08005e89 	.word	0x08005e89
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68b9      	ldr	r1, [r7, #8]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f000 fa66 	bl	800621c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	699a      	ldr	r2, [r3, #24]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f042 0208 	orr.w	r2, r2, #8
 8005d5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	699a      	ldr	r2, [r3, #24]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f022 0204 	bic.w	r2, r2, #4
 8005d6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6999      	ldr	r1, [r3, #24]
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	691a      	ldr	r2, [r3, #16]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	619a      	str	r2, [r3, #24]
      break;
 8005d82:	e0a5      	b.n	8005ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68b9      	ldr	r1, [r7, #8]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 fab8 	bl	8006300 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	699a      	ldr	r2, [r3, #24]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	699a      	ldr	r2, [r3, #24]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6999      	ldr	r1, [r3, #24]
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	021a      	lsls	r2, r3, #8
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	430a      	orrs	r2, r1
 8005dc2:	619a      	str	r2, [r3, #24]
      break;
 8005dc4:	e084      	b.n	8005ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68b9      	ldr	r1, [r7, #8]
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f000 fb0f 	bl	80063f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	69da      	ldr	r2, [r3, #28]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f042 0208 	orr.w	r2, r2, #8
 8005de0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	69da      	ldr	r2, [r3, #28]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f022 0204 	bic.w	r2, r2, #4
 8005df0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	69d9      	ldr	r1, [r3, #28]
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	691a      	ldr	r2, [r3, #16]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	430a      	orrs	r2, r1
 8005e02:	61da      	str	r2, [r3, #28]
      break;
 8005e04:	e064      	b.n	8005ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68b9      	ldr	r1, [r7, #8]
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f000 fb65 	bl	80064dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	69da      	ldr	r2, [r3, #28]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	69da      	ldr	r2, [r3, #28]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	69d9      	ldr	r1, [r3, #28]
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	021a      	lsls	r2, r3, #8
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	61da      	str	r2, [r3, #28]
      break;
 8005e46:	e043      	b.n	8005ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68b9      	ldr	r1, [r7, #8]
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 fb9c 	bl	800658c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f042 0208 	orr.w	r2, r2, #8
 8005e62:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f022 0204 	bic.w	r2, r2, #4
 8005e72:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	691a      	ldr	r2, [r3, #16]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	430a      	orrs	r2, r1
 8005e84:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005e86:	e023      	b.n	8005ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68b9      	ldr	r1, [r7, #8]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f000 fbce 	bl	8006630 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ea2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005eb2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	021a      	lsls	r2, r3, #8
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005ec8:	e002      	b.n	8005ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	75fb      	strb	r3, [r7, #23]
      break;
 8005ece:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3718      	adds	r7, #24
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop

08005ee4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d101      	bne.n	8005f00 <HAL_TIM_ConfigClockSource+0x1c>
 8005efc:	2302      	movs	r3, #2
 8005efe:	e0b4      	b.n	800606a <HAL_TIM_ConfigClockSource+0x186>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	4b56      	ldr	r3, [pc, #344]	@ (8006074 <HAL_TIM_ConfigClockSource+0x190>)
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f38:	d03e      	beq.n	8005fb8 <HAL_TIM_ConfigClockSource+0xd4>
 8005f3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f3e:	f200 8087 	bhi.w	8006050 <HAL_TIM_ConfigClockSource+0x16c>
 8005f42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f46:	f000 8086 	beq.w	8006056 <HAL_TIM_ConfigClockSource+0x172>
 8005f4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f4e:	d87f      	bhi.n	8006050 <HAL_TIM_ConfigClockSource+0x16c>
 8005f50:	2b70      	cmp	r3, #112	@ 0x70
 8005f52:	d01a      	beq.n	8005f8a <HAL_TIM_ConfigClockSource+0xa6>
 8005f54:	2b70      	cmp	r3, #112	@ 0x70
 8005f56:	d87b      	bhi.n	8006050 <HAL_TIM_ConfigClockSource+0x16c>
 8005f58:	2b60      	cmp	r3, #96	@ 0x60
 8005f5a:	d050      	beq.n	8005ffe <HAL_TIM_ConfigClockSource+0x11a>
 8005f5c:	2b60      	cmp	r3, #96	@ 0x60
 8005f5e:	d877      	bhi.n	8006050 <HAL_TIM_ConfigClockSource+0x16c>
 8005f60:	2b50      	cmp	r3, #80	@ 0x50
 8005f62:	d03c      	beq.n	8005fde <HAL_TIM_ConfigClockSource+0xfa>
 8005f64:	2b50      	cmp	r3, #80	@ 0x50
 8005f66:	d873      	bhi.n	8006050 <HAL_TIM_ConfigClockSource+0x16c>
 8005f68:	2b40      	cmp	r3, #64	@ 0x40
 8005f6a:	d058      	beq.n	800601e <HAL_TIM_ConfigClockSource+0x13a>
 8005f6c:	2b40      	cmp	r3, #64	@ 0x40
 8005f6e:	d86f      	bhi.n	8006050 <HAL_TIM_ConfigClockSource+0x16c>
 8005f70:	2b30      	cmp	r3, #48	@ 0x30
 8005f72:	d064      	beq.n	800603e <HAL_TIM_ConfigClockSource+0x15a>
 8005f74:	2b30      	cmp	r3, #48	@ 0x30
 8005f76:	d86b      	bhi.n	8006050 <HAL_TIM_ConfigClockSource+0x16c>
 8005f78:	2b20      	cmp	r3, #32
 8005f7a:	d060      	beq.n	800603e <HAL_TIM_ConfigClockSource+0x15a>
 8005f7c:	2b20      	cmp	r3, #32
 8005f7e:	d867      	bhi.n	8006050 <HAL_TIM_ConfigClockSource+0x16c>
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d05c      	beq.n	800603e <HAL_TIM_ConfigClockSource+0x15a>
 8005f84:	2b10      	cmp	r3, #16
 8005f86:	d05a      	beq.n	800603e <HAL_TIM_ConfigClockSource+0x15a>
 8005f88:	e062      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f9a:	f000 fd41 	bl	8006a20 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005fac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	609a      	str	r2, [r3, #8]
      break;
 8005fb6:	e04f      	b.n	8006058 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fc8:	f000 fd2a 	bl	8006a20 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	689a      	ldr	r2, [r3, #8]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fda:	609a      	str	r2, [r3, #8]
      break;
 8005fdc:	e03c      	b.n	8006058 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fea:	461a      	mov	r2, r3
 8005fec:	f000 fbe8 	bl	80067c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2150      	movs	r1, #80	@ 0x50
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f000 fcf7 	bl	80069ea <TIM_ITRx_SetConfig>
      break;
 8005ffc:	e02c      	b.n	8006058 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800600a:	461a      	mov	r2, r3
 800600c:	f000 fc44 	bl	8006898 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2160      	movs	r1, #96	@ 0x60
 8006016:	4618      	mov	r0, r3
 8006018:	f000 fce7 	bl	80069ea <TIM_ITRx_SetConfig>
      break;
 800601c:	e01c      	b.n	8006058 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800602a:	461a      	mov	r2, r3
 800602c:	f000 fbc8 	bl	80067c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2140      	movs	r1, #64	@ 0x40
 8006036:	4618      	mov	r0, r3
 8006038:	f000 fcd7 	bl	80069ea <TIM_ITRx_SetConfig>
      break;
 800603c:	e00c      	b.n	8006058 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4619      	mov	r1, r3
 8006048:	4610      	mov	r0, r2
 800604a:	f000 fcce 	bl	80069ea <TIM_ITRx_SetConfig>
      break;
 800604e:	e003      	b.n	8006058 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	73fb      	strb	r3, [r7, #15]
      break;
 8006054:	e000      	b.n	8006058 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006056:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006068:	7bfb      	ldrb	r3, [r7, #15]
}
 800606a:	4618      	mov	r0, r3
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	fffeff88 	.word	0xfffeff88

08006078 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006094:	bf00      	nop
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060a8:	bf00      	nop
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060bc:	bf00      	nop
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060dc:	b480      	push	{r7}
 80060de:	b085      	sub	sp, #20
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a40      	ldr	r2, [pc, #256]	@ (80061f0 <TIM_Base_SetConfig+0x114>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d013      	beq.n	800611c <TIM_Base_SetConfig+0x40>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060fa:	d00f      	beq.n	800611c <TIM_Base_SetConfig+0x40>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a3d      	ldr	r2, [pc, #244]	@ (80061f4 <TIM_Base_SetConfig+0x118>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d00b      	beq.n	800611c <TIM_Base_SetConfig+0x40>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a3c      	ldr	r2, [pc, #240]	@ (80061f8 <TIM_Base_SetConfig+0x11c>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d007      	beq.n	800611c <TIM_Base_SetConfig+0x40>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a3b      	ldr	r2, [pc, #236]	@ (80061fc <TIM_Base_SetConfig+0x120>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d003      	beq.n	800611c <TIM_Base_SetConfig+0x40>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a3a      	ldr	r2, [pc, #232]	@ (8006200 <TIM_Base_SetConfig+0x124>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d108      	bne.n	800612e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006122:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	4313      	orrs	r3, r2
 800612c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a2f      	ldr	r2, [pc, #188]	@ (80061f0 <TIM_Base_SetConfig+0x114>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d02b      	beq.n	800618e <TIM_Base_SetConfig+0xb2>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800613c:	d027      	beq.n	800618e <TIM_Base_SetConfig+0xb2>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a2c      	ldr	r2, [pc, #176]	@ (80061f4 <TIM_Base_SetConfig+0x118>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d023      	beq.n	800618e <TIM_Base_SetConfig+0xb2>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a2b      	ldr	r2, [pc, #172]	@ (80061f8 <TIM_Base_SetConfig+0x11c>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d01f      	beq.n	800618e <TIM_Base_SetConfig+0xb2>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a2a      	ldr	r2, [pc, #168]	@ (80061fc <TIM_Base_SetConfig+0x120>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d01b      	beq.n	800618e <TIM_Base_SetConfig+0xb2>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a29      	ldr	r2, [pc, #164]	@ (8006200 <TIM_Base_SetConfig+0x124>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d017      	beq.n	800618e <TIM_Base_SetConfig+0xb2>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a28      	ldr	r2, [pc, #160]	@ (8006204 <TIM_Base_SetConfig+0x128>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d013      	beq.n	800618e <TIM_Base_SetConfig+0xb2>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a27      	ldr	r2, [pc, #156]	@ (8006208 <TIM_Base_SetConfig+0x12c>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d00f      	beq.n	800618e <TIM_Base_SetConfig+0xb2>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a26      	ldr	r2, [pc, #152]	@ (800620c <TIM_Base_SetConfig+0x130>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d00b      	beq.n	800618e <TIM_Base_SetConfig+0xb2>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a25      	ldr	r2, [pc, #148]	@ (8006210 <TIM_Base_SetConfig+0x134>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d007      	beq.n	800618e <TIM_Base_SetConfig+0xb2>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a24      	ldr	r2, [pc, #144]	@ (8006214 <TIM_Base_SetConfig+0x138>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d003      	beq.n	800618e <TIM_Base_SetConfig+0xb2>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a23      	ldr	r2, [pc, #140]	@ (8006218 <TIM_Base_SetConfig+0x13c>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d108      	bne.n	80061a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	4313      	orrs	r3, r2
 800619e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	689a      	ldr	r2, [r3, #8]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a0a      	ldr	r2, [pc, #40]	@ (80061f0 <TIM_Base_SetConfig+0x114>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d003      	beq.n	80061d4 <TIM_Base_SetConfig+0xf8>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a0c      	ldr	r2, [pc, #48]	@ (8006200 <TIM_Base_SetConfig+0x124>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d103      	bne.n	80061dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	691a      	ldr	r2, [r3, #16]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	615a      	str	r2, [r3, #20]
}
 80061e2:	bf00      	nop
 80061e4:	3714      	adds	r7, #20
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	40010000 	.word	0x40010000
 80061f4:	40000400 	.word	0x40000400
 80061f8:	40000800 	.word	0x40000800
 80061fc:	40000c00 	.word	0x40000c00
 8006200:	40010400 	.word	0x40010400
 8006204:	40014000 	.word	0x40014000
 8006208:	40014400 	.word	0x40014400
 800620c:	40014800 	.word	0x40014800
 8006210:	40001800 	.word	0x40001800
 8006214:	40001c00 	.word	0x40001c00
 8006218:	40002000 	.word	0x40002000

0800621c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800621c:	b480      	push	{r7}
 800621e:	b087      	sub	sp, #28
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	f023 0201 	bic.w	r2, r3, #1
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	4b2b      	ldr	r3, [pc, #172]	@ (80062f4 <TIM_OC1_SetConfig+0xd8>)
 8006248:	4013      	ands	r3, r2
 800624a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f023 0303 	bic.w	r3, r3, #3
 8006252:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	4313      	orrs	r3, r2
 800625c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	f023 0302 	bic.w	r3, r3, #2
 8006264:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	4313      	orrs	r3, r2
 800626e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a21      	ldr	r2, [pc, #132]	@ (80062f8 <TIM_OC1_SetConfig+0xdc>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d003      	beq.n	8006280 <TIM_OC1_SetConfig+0x64>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a20      	ldr	r2, [pc, #128]	@ (80062fc <TIM_OC1_SetConfig+0xe0>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d10c      	bne.n	800629a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	f023 0308 	bic.w	r3, r3, #8
 8006286:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	697a      	ldr	r2, [r7, #20]
 800628e:	4313      	orrs	r3, r2
 8006290:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	f023 0304 	bic.w	r3, r3, #4
 8006298:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a16      	ldr	r2, [pc, #88]	@ (80062f8 <TIM_OC1_SetConfig+0xdc>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d003      	beq.n	80062aa <TIM_OC1_SetConfig+0x8e>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a15      	ldr	r2, [pc, #84]	@ (80062fc <TIM_OC1_SetConfig+0xe0>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d111      	bne.n	80062ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80062b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	699b      	ldr	r3, [r3, #24]
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	621a      	str	r2, [r3, #32]
}
 80062e8:	bf00      	nop
 80062ea:	371c      	adds	r7, #28
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr
 80062f4:	fffeff8f 	.word	0xfffeff8f
 80062f8:	40010000 	.word	0x40010000
 80062fc:	40010400 	.word	0x40010400

08006300 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006300:	b480      	push	{r7}
 8006302:	b087      	sub	sp, #28
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a1b      	ldr	r3, [r3, #32]
 800630e:	f023 0210 	bic.w	r2, r3, #16
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	4b2e      	ldr	r3, [pc, #184]	@ (80063e4 <TIM_OC2_SetConfig+0xe4>)
 800632c:	4013      	ands	r3, r2
 800632e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006336:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	021b      	lsls	r3, r3, #8
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	4313      	orrs	r3, r2
 8006342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	f023 0320 	bic.w	r3, r3, #32
 800634a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	011b      	lsls	r3, r3, #4
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	4313      	orrs	r3, r2
 8006356:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a23      	ldr	r2, [pc, #140]	@ (80063e8 <TIM_OC2_SetConfig+0xe8>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d003      	beq.n	8006368 <TIM_OC2_SetConfig+0x68>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a22      	ldr	r2, [pc, #136]	@ (80063ec <TIM_OC2_SetConfig+0xec>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d10d      	bne.n	8006384 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800636e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	011b      	lsls	r3, r3, #4
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	4313      	orrs	r3, r2
 800637a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006382:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a18      	ldr	r2, [pc, #96]	@ (80063e8 <TIM_OC2_SetConfig+0xe8>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d003      	beq.n	8006394 <TIM_OC2_SetConfig+0x94>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a17      	ldr	r2, [pc, #92]	@ (80063ec <TIM_OC2_SetConfig+0xec>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d113      	bne.n	80063bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800639a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80063a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	695b      	ldr	r3, [r3, #20]
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	693a      	ldr	r2, [r7, #16]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	685a      	ldr	r2, [r3, #4]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	621a      	str	r2, [r3, #32]
}
 80063d6:	bf00      	nop
 80063d8:	371c      	adds	r7, #28
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	feff8fff 	.word	0xfeff8fff
 80063e8:	40010000 	.word	0x40010000
 80063ec:	40010400 	.word	0x40010400

080063f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b087      	sub	sp, #28
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	69db      	ldr	r3, [r3, #28]
 8006416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	4b2d      	ldr	r3, [pc, #180]	@ (80064d0 <TIM_OC3_SetConfig+0xe0>)
 800641c:	4013      	ands	r3, r2
 800641e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f023 0303 	bic.w	r3, r3, #3
 8006426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	4313      	orrs	r3, r2
 8006430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006438:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	021b      	lsls	r3, r3, #8
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	4313      	orrs	r3, r2
 8006444:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a22      	ldr	r2, [pc, #136]	@ (80064d4 <TIM_OC3_SetConfig+0xe4>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d003      	beq.n	8006456 <TIM_OC3_SetConfig+0x66>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a21      	ldr	r2, [pc, #132]	@ (80064d8 <TIM_OC3_SetConfig+0xe8>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d10d      	bne.n	8006472 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800645c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	021b      	lsls	r3, r3, #8
 8006464:	697a      	ldr	r2, [r7, #20]
 8006466:	4313      	orrs	r3, r2
 8006468:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006470:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a17      	ldr	r2, [pc, #92]	@ (80064d4 <TIM_OC3_SetConfig+0xe4>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d003      	beq.n	8006482 <TIM_OC3_SetConfig+0x92>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a16      	ldr	r2, [pc, #88]	@ (80064d8 <TIM_OC3_SetConfig+0xe8>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d113      	bne.n	80064aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006488:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006490:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	695b      	ldr	r3, [r3, #20]
 8006496:	011b      	lsls	r3, r3, #4
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	4313      	orrs	r3, r2
 800649c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	699b      	ldr	r3, [r3, #24]
 80064a2:	011b      	lsls	r3, r3, #4
 80064a4:	693a      	ldr	r2, [r7, #16]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	693a      	ldr	r2, [r7, #16]
 80064ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	685a      	ldr	r2, [r3, #4]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	697a      	ldr	r2, [r7, #20]
 80064c2:	621a      	str	r2, [r3, #32]
}
 80064c4:	bf00      	nop
 80064c6:	371c      	adds	r7, #28
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr
 80064d0:	fffeff8f 	.word	0xfffeff8f
 80064d4:	40010000 	.word	0x40010000
 80064d8:	40010400 	.word	0x40010400

080064dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064dc:	b480      	push	{r7}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	69db      	ldr	r3, [r3, #28]
 8006502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	4b1e      	ldr	r3, [pc, #120]	@ (8006580 <TIM_OC4_SetConfig+0xa4>)
 8006508:	4013      	ands	r3, r2
 800650a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006512:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	021b      	lsls	r3, r3, #8
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	4313      	orrs	r3, r2
 800651e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006526:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	031b      	lsls	r3, r3, #12
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	4313      	orrs	r3, r2
 8006532:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a13      	ldr	r2, [pc, #76]	@ (8006584 <TIM_OC4_SetConfig+0xa8>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d003      	beq.n	8006544 <TIM_OC4_SetConfig+0x68>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a12      	ldr	r2, [pc, #72]	@ (8006588 <TIM_OC4_SetConfig+0xac>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d109      	bne.n	8006558 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800654a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	695b      	ldr	r3, [r3, #20]
 8006550:	019b      	lsls	r3, r3, #6
 8006552:	697a      	ldr	r2, [r7, #20]
 8006554:	4313      	orrs	r3, r2
 8006556:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	693a      	ldr	r2, [r7, #16]
 8006570:	621a      	str	r2, [r3, #32]
}
 8006572:	bf00      	nop
 8006574:	371c      	adds	r7, #28
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	feff8fff 	.word	0xfeff8fff
 8006584:	40010000 	.word	0x40010000
 8006588:	40010400 	.word	0x40010400

0800658c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800658c:	b480      	push	{r7}
 800658e:	b087      	sub	sp, #28
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a1b      	ldr	r3, [r3, #32]
 800659a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	4b1b      	ldr	r3, [pc, #108]	@ (8006624 <TIM_OC5_SetConfig+0x98>)
 80065b8:	4013      	ands	r3, r2
 80065ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80065cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	041b      	lsls	r3, r3, #16
 80065d4:	693a      	ldr	r2, [r7, #16]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a12      	ldr	r2, [pc, #72]	@ (8006628 <TIM_OC5_SetConfig+0x9c>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d003      	beq.n	80065ea <TIM_OC5_SetConfig+0x5e>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a11      	ldr	r2, [pc, #68]	@ (800662c <TIM_OC5_SetConfig+0xa0>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d109      	bne.n	80065fe <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	021b      	lsls	r3, r3, #8
 80065f8:	697a      	ldr	r2, [r7, #20]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	697a      	ldr	r2, [r7, #20]
 8006602:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	693a      	ldr	r2, [r7, #16]
 8006616:	621a      	str	r2, [r3, #32]
}
 8006618:	bf00      	nop
 800661a:	371c      	adds	r7, #28
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr
 8006624:	fffeff8f 	.word	0xfffeff8f
 8006628:	40010000 	.word	0x40010000
 800662c:	40010400 	.word	0x40010400

08006630 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006630:	b480      	push	{r7}
 8006632:	b087      	sub	sp, #28
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	4b1c      	ldr	r3, [pc, #112]	@ (80066cc <TIM_OC6_SetConfig+0x9c>)
 800665c:	4013      	ands	r3, r2
 800665e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	021b      	lsls	r3, r3, #8
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	4313      	orrs	r3, r2
 800666a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006672:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	051b      	lsls	r3, r3, #20
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	4313      	orrs	r3, r2
 800667e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a13      	ldr	r2, [pc, #76]	@ (80066d0 <TIM_OC6_SetConfig+0xa0>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d003      	beq.n	8006690 <TIM_OC6_SetConfig+0x60>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a12      	ldr	r2, [pc, #72]	@ (80066d4 <TIM_OC6_SetConfig+0xa4>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d109      	bne.n	80066a4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006696:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	695b      	ldr	r3, [r3, #20]
 800669c:	029b      	lsls	r3, r3, #10
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	697a      	ldr	r2, [r7, #20]
 80066a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	685a      	ldr	r2, [r3, #4]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	621a      	str	r2, [r3, #32]
}
 80066be:	bf00      	nop
 80066c0:	371c      	adds	r7, #28
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	feff8fff 	.word	0xfeff8fff
 80066d0:	40010000 	.word	0x40010000
 80066d4:	40010400 	.word	0x40010400

080066d8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80066d8:	b480      	push	{r7}
 80066da:	b087      	sub	sp, #28
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
 80066e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6a1b      	ldr	r3, [r3, #32]
 80066ea:	f023 0201 	bic.w	r2, r3, #1
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6a1b      	ldr	r3, [r3, #32]
 80066fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	4a28      	ldr	r2, [pc, #160]	@ (80067a4 <TIM_TI1_SetConfig+0xcc>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d01b      	beq.n	800673e <TIM_TI1_SetConfig+0x66>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800670c:	d017      	beq.n	800673e <TIM_TI1_SetConfig+0x66>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	4a25      	ldr	r2, [pc, #148]	@ (80067a8 <TIM_TI1_SetConfig+0xd0>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d013      	beq.n	800673e <TIM_TI1_SetConfig+0x66>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	4a24      	ldr	r2, [pc, #144]	@ (80067ac <TIM_TI1_SetConfig+0xd4>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d00f      	beq.n	800673e <TIM_TI1_SetConfig+0x66>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	4a23      	ldr	r2, [pc, #140]	@ (80067b0 <TIM_TI1_SetConfig+0xd8>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d00b      	beq.n	800673e <TIM_TI1_SetConfig+0x66>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	4a22      	ldr	r2, [pc, #136]	@ (80067b4 <TIM_TI1_SetConfig+0xdc>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d007      	beq.n	800673e <TIM_TI1_SetConfig+0x66>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	4a21      	ldr	r2, [pc, #132]	@ (80067b8 <TIM_TI1_SetConfig+0xe0>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d003      	beq.n	800673e <TIM_TI1_SetConfig+0x66>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	4a20      	ldr	r2, [pc, #128]	@ (80067bc <TIM_TI1_SetConfig+0xe4>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d101      	bne.n	8006742 <TIM_TI1_SetConfig+0x6a>
 800673e:	2301      	movs	r3, #1
 8006740:	e000      	b.n	8006744 <TIM_TI1_SetConfig+0x6c>
 8006742:	2300      	movs	r3, #0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d008      	beq.n	800675a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	f023 0303 	bic.w	r3, r3, #3
 800674e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4313      	orrs	r3, r2
 8006756:	617b      	str	r3, [r7, #20]
 8006758:	e003      	b.n	8006762 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	f043 0301 	orr.w	r3, r3, #1
 8006760:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006768:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	011b      	lsls	r3, r3, #4
 800676e:	b2db      	uxtb	r3, r3
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	4313      	orrs	r3, r2
 8006774:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	f023 030a 	bic.w	r3, r3, #10
 800677c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	f003 030a 	and.w	r3, r3, #10
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	4313      	orrs	r3, r2
 8006788:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	697a      	ldr	r2, [r7, #20]
 800678e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	693a      	ldr	r2, [r7, #16]
 8006794:	621a      	str	r2, [r3, #32]
}
 8006796:	bf00      	nop
 8006798:	371c      	adds	r7, #28
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop
 80067a4:	40010000 	.word	0x40010000
 80067a8:	40000400 	.word	0x40000400
 80067ac:	40000800 	.word	0x40000800
 80067b0:	40000c00 	.word	0x40000c00
 80067b4:	40010400 	.word	0x40010400
 80067b8:	40014000 	.word	0x40014000
 80067bc:	40001800 	.word	0x40001800

080067c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b087      	sub	sp, #28
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6a1b      	ldr	r3, [r3, #32]
 80067d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	f023 0201 	bic.w	r2, r3, #1
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	011b      	lsls	r3, r3, #4
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f023 030a 	bic.w	r3, r3, #10
 80067fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	4313      	orrs	r3, r2
 8006804:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	693a      	ldr	r2, [r7, #16]
 800680a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	697a      	ldr	r2, [r7, #20]
 8006810:	621a      	str	r2, [r3, #32]
}
 8006812:	bf00      	nop
 8006814:	371c      	adds	r7, #28
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr

0800681e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800681e:	b480      	push	{r7}
 8006820:	b087      	sub	sp, #28
 8006822:	af00      	add	r7, sp, #0
 8006824:	60f8      	str	r0, [r7, #12]
 8006826:	60b9      	str	r1, [r7, #8]
 8006828:	607a      	str	r2, [r7, #4]
 800682a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6a1b      	ldr	r3, [r3, #32]
 8006830:	f023 0210 	bic.w	r2, r3, #16
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	699b      	ldr	r3, [r3, #24]
 800683c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800684a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	021b      	lsls	r3, r3, #8
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	4313      	orrs	r3, r2
 8006854:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800685c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	031b      	lsls	r3, r3, #12
 8006862:	b29b      	uxth	r3, r3
 8006864:	697a      	ldr	r2, [r7, #20]
 8006866:	4313      	orrs	r3, r2
 8006868:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006870:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	011b      	lsls	r3, r3, #4
 8006876:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	4313      	orrs	r3, r2
 800687e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	621a      	str	r2, [r3, #32]
}
 800688c:	bf00      	nop
 800688e:	371c      	adds	r7, #28
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006898:	b480      	push	{r7}
 800689a:	b087      	sub	sp, #28
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6a1b      	ldr	r3, [r3, #32]
 80068a8:	f023 0210 	bic.w	r2, r3, #16
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80068c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	031b      	lsls	r3, r3, #12
 80068c8:	697a      	ldr	r2, [r7, #20]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80068d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	011b      	lsls	r3, r3, #4
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	4313      	orrs	r3, r2
 80068de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	693a      	ldr	r2, [r7, #16]
 80068ea:	621a      	str	r2, [r3, #32]
}
 80068ec:	bf00      	nop
 80068ee:	371c      	adds	r7, #28
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b087      	sub	sp, #28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
 8006904:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	69db      	ldr	r3, [r3, #28]
 8006916:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6a1b      	ldr	r3, [r3, #32]
 800691c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	f023 0303 	bic.w	r3, r3, #3
 8006924:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006926:	697a      	ldr	r2, [r7, #20]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4313      	orrs	r3, r2
 800692c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006934:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	011b      	lsls	r3, r3, #4
 800693a:	b2db      	uxtb	r3, r3
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	4313      	orrs	r3, r2
 8006940:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006948:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	021b      	lsls	r3, r3, #8
 800694e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006952:	693a      	ldr	r2, [r7, #16]
 8006954:	4313      	orrs	r3, r2
 8006956:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	693a      	ldr	r2, [r7, #16]
 8006962:	621a      	str	r2, [r3, #32]
}
 8006964:	bf00      	nop
 8006966:	371c      	adds	r7, #28
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006970:	b480      	push	{r7}
 8006972:	b087      	sub	sp, #28
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
 800697c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6a1b      	ldr	r3, [r3, #32]
 8006982:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	69db      	ldr	r3, [r3, #28]
 800698e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6a1b      	ldr	r3, [r3, #32]
 8006994:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800699c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	021b      	lsls	r3, r3, #8
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80069ae:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	031b      	lsls	r3, r3, #12
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80069c2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	031b      	lsls	r3, r3, #12
 80069c8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	697a      	ldr	r2, [r7, #20]
 80069d6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	693a      	ldr	r2, [r7, #16]
 80069dc:	621a      	str	r2, [r3, #32]
}
 80069de:	bf00      	nop
 80069e0:	371c      	adds	r7, #28
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr

080069ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069ea:	b480      	push	{r7}
 80069ec:	b085      	sub	sp, #20
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a02:	683a      	ldr	r2, [r7, #0]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	f043 0307 	orr.w	r3, r3, #7
 8006a0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	609a      	str	r2, [r3, #8]
}
 8006a14:	bf00      	nop
 8006a16:	3714      	adds	r7, #20
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b087      	sub	sp, #28
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	607a      	str	r2, [r7, #4]
 8006a2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	021a      	lsls	r2, r3, #8
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	431a      	orrs	r2, r3
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	697a      	ldr	r2, [r7, #20]
 8006a52:	609a      	str	r2, [r3, #8]
}
 8006a54:	bf00      	nop
 8006a56:	371c      	adds	r7, #28
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d101      	bne.n	8006a78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a74:	2302      	movs	r3, #2
 8006a76:	e06d      	b.n	8006b54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2202      	movs	r2, #2
 8006a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a30      	ldr	r2, [pc, #192]	@ (8006b60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d004      	beq.n	8006aac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a2f      	ldr	r2, [pc, #188]	@ (8006b64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d108      	bne.n	8006abe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006ab2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ac4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a20      	ldr	r2, [pc, #128]	@ (8006b60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d022      	beq.n	8006b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006aea:	d01d      	beq.n	8006b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a1d      	ldr	r2, [pc, #116]	@ (8006b68 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d018      	beq.n	8006b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a1c      	ldr	r2, [pc, #112]	@ (8006b6c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d013      	beq.n	8006b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a1a      	ldr	r2, [pc, #104]	@ (8006b70 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d00e      	beq.n	8006b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a15      	ldr	r2, [pc, #84]	@ (8006b64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d009      	beq.n	8006b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a16      	ldr	r2, [pc, #88]	@ (8006b74 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d004      	beq.n	8006b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a15      	ldr	r2, [pc, #84]	@ (8006b78 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d10c      	bne.n	8006b42 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b2e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	68ba      	ldr	r2, [r7, #8]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68ba      	ldr	r2, [r7, #8]
 8006b40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2201      	movs	r2, #1
 8006b46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3714      	adds	r7, #20
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr
 8006b60:	40010000 	.word	0x40010000
 8006b64:	40010400 	.word	0x40010400
 8006b68:	40000400 	.word	0x40000400
 8006b6c:	40000800 	.word	0x40000800
 8006b70:	40000c00 	.word	0x40000c00
 8006b74:	40014000 	.word	0x40014000
 8006b78:	40001800 	.word	0x40001800

08006b7c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b86:	2300      	movs	r3, #0
 8006b88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d101      	bne.n	8006b98 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b94:	2302      	movs	r3, #2
 8006b96:	e065      	b.n	8006c64 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	695b      	ldr	r3, [r3, #20]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	699b      	ldr	r3, [r3, #24]
 8006c0c:	041b      	lsls	r3, r3, #16
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a16      	ldr	r2, [pc, #88]	@ (8006c70 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d004      	beq.n	8006c26 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a14      	ldr	r2, [pc, #80]	@ (8006c74 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d115      	bne.n	8006c52 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c30:	051b      	lsls	r3, r3, #20
 8006c32:	4313      	orrs	r3, r2
 8006c34:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	69db      	ldr	r3, [r3, #28]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3714      	adds	r7, #20
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr
 8006c70:	40010000 	.word	0x40010000
 8006c74:	40010400 	.word	0x40010400

08006c78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c80:	bf00      	nop
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <memset>:
 8006cb4:	4402      	add	r2, r0
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d100      	bne.n	8006cbe <memset+0xa>
 8006cbc:	4770      	bx	lr
 8006cbe:	f803 1b01 	strb.w	r1, [r3], #1
 8006cc2:	e7f9      	b.n	8006cb8 <memset+0x4>

08006cc4 <__errno>:
 8006cc4:	4b01      	ldr	r3, [pc, #4]	@ (8006ccc <__errno+0x8>)
 8006cc6:	6818      	ldr	r0, [r3, #0]
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop
 8006ccc:	2000003c 	.word	0x2000003c

08006cd0 <__libc_init_array>:
 8006cd0:	b570      	push	{r4, r5, r6, lr}
 8006cd2:	4d0d      	ldr	r5, [pc, #52]	@ (8006d08 <__libc_init_array+0x38>)
 8006cd4:	4c0d      	ldr	r4, [pc, #52]	@ (8006d0c <__libc_init_array+0x3c>)
 8006cd6:	1b64      	subs	r4, r4, r5
 8006cd8:	10a4      	asrs	r4, r4, #2
 8006cda:	2600      	movs	r6, #0
 8006cdc:	42a6      	cmp	r6, r4
 8006cde:	d109      	bne.n	8006cf4 <__libc_init_array+0x24>
 8006ce0:	4d0b      	ldr	r5, [pc, #44]	@ (8006d10 <__libc_init_array+0x40>)
 8006ce2:	4c0c      	ldr	r4, [pc, #48]	@ (8006d14 <__libc_init_array+0x44>)
 8006ce4:	f000 fe54 	bl	8007990 <_init>
 8006ce8:	1b64      	subs	r4, r4, r5
 8006cea:	10a4      	asrs	r4, r4, #2
 8006cec:	2600      	movs	r6, #0
 8006cee:	42a6      	cmp	r6, r4
 8006cf0:	d105      	bne.n	8006cfe <__libc_init_array+0x2e>
 8006cf2:	bd70      	pop	{r4, r5, r6, pc}
 8006cf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cf8:	4798      	blx	r3
 8006cfa:	3601      	adds	r6, #1
 8006cfc:	e7ee      	b.n	8006cdc <__libc_init_array+0xc>
 8006cfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d02:	4798      	blx	r3
 8006d04:	3601      	adds	r6, #1
 8006d06:	e7f2      	b.n	8006cee <__libc_init_array+0x1e>
 8006d08:	08008408 	.word	0x08008408
 8006d0c:	08008408 	.word	0x08008408
 8006d10:	08008408 	.word	0x08008408
 8006d14:	0800840c 	.word	0x0800840c

08006d18 <cos>:
 8006d18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006d1a:	eeb0 7b40 	vmov.f64	d7, d0
 8006d1e:	ee17 3a90 	vmov	r3, s15
 8006d22:	4a21      	ldr	r2, [pc, #132]	@ (8006da8 <cos+0x90>)
 8006d24:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d806      	bhi.n	8006d3a <cos+0x22>
 8006d2c:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8006da0 <cos+0x88>
 8006d30:	b005      	add	sp, #20
 8006d32:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d36:	f000 b8ab 	b.w	8006e90 <__kernel_cos>
 8006d3a:	4a1c      	ldr	r2, [pc, #112]	@ (8006dac <cos+0x94>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d904      	bls.n	8006d4a <cos+0x32>
 8006d40:	ee30 0b40 	vsub.f64	d0, d0, d0
 8006d44:	b005      	add	sp, #20
 8006d46:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d4a:	4668      	mov	r0, sp
 8006d4c:	f000 f960 	bl	8007010 <__ieee754_rem_pio2>
 8006d50:	f000 0003 	and.w	r0, r0, #3
 8006d54:	2801      	cmp	r0, #1
 8006d56:	d009      	beq.n	8006d6c <cos+0x54>
 8006d58:	2802      	cmp	r0, #2
 8006d5a:	d010      	beq.n	8006d7e <cos+0x66>
 8006d5c:	b9b0      	cbnz	r0, 8006d8c <cos+0x74>
 8006d5e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006d62:	ed9d 0b00 	vldr	d0, [sp]
 8006d66:	f000 f893 	bl	8006e90 <__kernel_cos>
 8006d6a:	e7eb      	b.n	8006d44 <cos+0x2c>
 8006d6c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006d70:	ed9d 0b00 	vldr	d0, [sp]
 8006d74:	f000 f8f4 	bl	8006f60 <__kernel_sin>
 8006d78:	eeb1 0b40 	vneg.f64	d0, d0
 8006d7c:	e7e2      	b.n	8006d44 <cos+0x2c>
 8006d7e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006d82:	ed9d 0b00 	vldr	d0, [sp]
 8006d86:	f000 f883 	bl	8006e90 <__kernel_cos>
 8006d8a:	e7f5      	b.n	8006d78 <cos+0x60>
 8006d8c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006d90:	ed9d 0b00 	vldr	d0, [sp]
 8006d94:	2001      	movs	r0, #1
 8006d96:	f000 f8e3 	bl	8006f60 <__kernel_sin>
 8006d9a:	e7d3      	b.n	8006d44 <cos+0x2c>
 8006d9c:	f3af 8000 	nop.w
	...
 8006da8:	3fe921fb 	.word	0x3fe921fb
 8006dac:	7fefffff 	.word	0x7fefffff

08006db0 <sin>:
 8006db0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006db2:	eeb0 7b40 	vmov.f64	d7, d0
 8006db6:	ee17 3a90 	vmov	r3, s15
 8006dba:	4a21      	ldr	r2, [pc, #132]	@ (8006e40 <sin+0x90>)
 8006dbc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d807      	bhi.n	8006dd4 <sin+0x24>
 8006dc4:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8006e38 <sin+0x88>
 8006dc8:	2000      	movs	r0, #0
 8006dca:	b005      	add	sp, #20
 8006dcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006dd0:	f000 b8c6 	b.w	8006f60 <__kernel_sin>
 8006dd4:	4a1b      	ldr	r2, [pc, #108]	@ (8006e44 <sin+0x94>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d904      	bls.n	8006de4 <sin+0x34>
 8006dda:	ee30 0b40 	vsub.f64	d0, d0, d0
 8006dde:	b005      	add	sp, #20
 8006de0:	f85d fb04 	ldr.w	pc, [sp], #4
 8006de4:	4668      	mov	r0, sp
 8006de6:	f000 f913 	bl	8007010 <__ieee754_rem_pio2>
 8006dea:	f000 0003 	and.w	r0, r0, #3
 8006dee:	2801      	cmp	r0, #1
 8006df0:	d00a      	beq.n	8006e08 <sin+0x58>
 8006df2:	2802      	cmp	r0, #2
 8006df4:	d00f      	beq.n	8006e16 <sin+0x66>
 8006df6:	b9c0      	cbnz	r0, 8006e2a <sin+0x7a>
 8006df8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006dfc:	ed9d 0b00 	vldr	d0, [sp]
 8006e00:	2001      	movs	r0, #1
 8006e02:	f000 f8ad 	bl	8006f60 <__kernel_sin>
 8006e06:	e7ea      	b.n	8006dde <sin+0x2e>
 8006e08:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006e0c:	ed9d 0b00 	vldr	d0, [sp]
 8006e10:	f000 f83e 	bl	8006e90 <__kernel_cos>
 8006e14:	e7e3      	b.n	8006dde <sin+0x2e>
 8006e16:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006e1a:	ed9d 0b00 	vldr	d0, [sp]
 8006e1e:	2001      	movs	r0, #1
 8006e20:	f000 f89e 	bl	8006f60 <__kernel_sin>
 8006e24:	eeb1 0b40 	vneg.f64	d0, d0
 8006e28:	e7d9      	b.n	8006dde <sin+0x2e>
 8006e2a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006e2e:	ed9d 0b00 	vldr	d0, [sp]
 8006e32:	f000 f82d 	bl	8006e90 <__kernel_cos>
 8006e36:	e7f5      	b.n	8006e24 <sin+0x74>
	...
 8006e40:	3fe921fb 	.word	0x3fe921fb
 8006e44:	7fefffff 	.word	0x7fefffff

08006e48 <sqrtf>:
 8006e48:	b508      	push	{r3, lr}
 8006e4a:	ed2d 8b02 	vpush	{d8}
 8006e4e:	eeb0 8a40 	vmov.f32	s16, s0
 8006e52:	f000 f817 	bl	8006e84 <__ieee754_sqrtf>
 8006e56:	eeb4 8a48 	vcmp.f32	s16, s16
 8006e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e5e:	d60c      	bvs.n	8006e7a <sqrtf+0x32>
 8006e60:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8006e80 <sqrtf+0x38>
 8006e64:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e6c:	d505      	bpl.n	8006e7a <sqrtf+0x32>
 8006e6e:	f7ff ff29 	bl	8006cc4 <__errno>
 8006e72:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006e76:	2321      	movs	r3, #33	@ 0x21
 8006e78:	6003      	str	r3, [r0, #0]
 8006e7a:	ecbd 8b02 	vpop	{d8}
 8006e7e:	bd08      	pop	{r3, pc}
 8006e80:	00000000 	.word	0x00000000

08006e84 <__ieee754_sqrtf>:
 8006e84:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006e88:	4770      	bx	lr
 8006e8a:	0000      	movs	r0, r0
 8006e8c:	0000      	movs	r0, r0
	...

08006e90 <__kernel_cos>:
 8006e90:	eeb0 5b40 	vmov.f64	d5, d0
 8006e94:	ee15 1a90 	vmov	r1, s11
 8006e98:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8006e9c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8006ea0:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 8006ea4:	d204      	bcs.n	8006eb0 <__kernel_cos+0x20>
 8006ea6:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 8006eaa:	ee17 3a90 	vmov	r3, s15
 8006eae:	b343      	cbz	r3, 8006f02 <__kernel_cos+0x72>
 8006eb0:	ee25 6b05 	vmul.f64	d6, d5, d5
 8006eb4:	ee21 1b45 	vnmul.f64	d1, d1, d5
 8006eb8:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8006f28 <__kernel_cos+0x98>
 8006ebc:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8006f30 <__kernel_cos+0xa0>
 8006ec0:	eea6 4b07 	vfma.f64	d4, d6, d7
 8006ec4:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8006f38 <__kernel_cos+0xa8>
 8006ec8:	eea4 7b06 	vfma.f64	d7, d4, d6
 8006ecc:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8006f40 <__kernel_cos+0xb0>
 8006ed0:	eea7 4b06 	vfma.f64	d4, d7, d6
 8006ed4:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8006f48 <__kernel_cos+0xb8>
 8006ed8:	4b1f      	ldr	r3, [pc, #124]	@ (8006f58 <__kernel_cos+0xc8>)
 8006eda:	eea4 7b06 	vfma.f64	d7, d4, d6
 8006ede:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8006f50 <__kernel_cos+0xc0>
 8006ee2:	4299      	cmp	r1, r3
 8006ee4:	eea7 4b06 	vfma.f64	d4, d7, d6
 8006ee8:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8006eec:	ee24 4b06 	vmul.f64	d4, d4, d6
 8006ef0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006ef4:	eea6 1b04 	vfma.f64	d1, d6, d4
 8006ef8:	d804      	bhi.n	8006f04 <__kernel_cos+0x74>
 8006efa:	ee37 7b41 	vsub.f64	d7, d7, d1
 8006efe:	ee30 0b47 	vsub.f64	d0, d0, d7
 8006f02:	4770      	bx	lr
 8006f04:	4b15      	ldr	r3, [pc, #84]	@ (8006f5c <__kernel_cos+0xcc>)
 8006f06:	4299      	cmp	r1, r3
 8006f08:	d809      	bhi.n	8006f1e <__kernel_cos+0x8e>
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 8006f10:	ec43 2b16 	vmov	d6, r2, r3
 8006f14:	ee30 0b46 	vsub.f64	d0, d0, d6
 8006f18:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006f1c:	e7ed      	b.n	8006efa <__kernel_cos+0x6a>
 8006f1e:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 8006f22:	e7f7      	b.n	8006f14 <__kernel_cos+0x84>
 8006f24:	f3af 8000 	nop.w
 8006f28:	be8838d4 	.word	0xbe8838d4
 8006f2c:	bda8fae9 	.word	0xbda8fae9
 8006f30:	bdb4b1c4 	.word	0xbdb4b1c4
 8006f34:	3e21ee9e 	.word	0x3e21ee9e
 8006f38:	809c52ad 	.word	0x809c52ad
 8006f3c:	be927e4f 	.word	0xbe927e4f
 8006f40:	19cb1590 	.word	0x19cb1590
 8006f44:	3efa01a0 	.word	0x3efa01a0
 8006f48:	16c15177 	.word	0x16c15177
 8006f4c:	bf56c16c 	.word	0xbf56c16c
 8006f50:	5555554c 	.word	0x5555554c
 8006f54:	3fa55555 	.word	0x3fa55555
 8006f58:	3fd33332 	.word	0x3fd33332
 8006f5c:	3fe90000 	.word	0x3fe90000

08006f60 <__kernel_sin>:
 8006f60:	ee10 3a90 	vmov	r3, s1
 8006f64:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006f68:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8006f6c:	d204      	bcs.n	8006f78 <__kernel_sin+0x18>
 8006f6e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8006f72:	ee17 3a90 	vmov	r3, s15
 8006f76:	b35b      	cbz	r3, 8006fd0 <__kernel_sin+0x70>
 8006f78:	ee20 6b00 	vmul.f64	d6, d0, d0
 8006f7c:	ee20 5b06 	vmul.f64	d5, d0, d6
 8006f80:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8006fd8 <__kernel_sin+0x78>
 8006f84:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8006fe0 <__kernel_sin+0x80>
 8006f88:	eea6 4b07 	vfma.f64	d4, d6, d7
 8006f8c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8006fe8 <__kernel_sin+0x88>
 8006f90:	eea4 7b06 	vfma.f64	d7, d4, d6
 8006f94:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8006ff0 <__kernel_sin+0x90>
 8006f98:	eea7 4b06 	vfma.f64	d4, d7, d6
 8006f9c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8006ff8 <__kernel_sin+0x98>
 8006fa0:	eea4 7b06 	vfma.f64	d7, d4, d6
 8006fa4:	b930      	cbnz	r0, 8006fb4 <__kernel_sin+0x54>
 8006fa6:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8007000 <__kernel_sin+0xa0>
 8006faa:	eea6 4b07 	vfma.f64	d4, d6, d7
 8006fae:	eea4 0b05 	vfma.f64	d0, d4, d5
 8006fb2:	4770      	bx	lr
 8006fb4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8006fb8:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 8006fbc:	eea1 7b04 	vfma.f64	d7, d1, d4
 8006fc0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8006fc4:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8007008 <__kernel_sin+0xa8>
 8006fc8:	eea5 1b07 	vfma.f64	d1, d5, d7
 8006fcc:	ee30 0b41 	vsub.f64	d0, d0, d1
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	f3af 8000 	nop.w
 8006fd8:	5acfd57c 	.word	0x5acfd57c
 8006fdc:	3de5d93a 	.word	0x3de5d93a
 8006fe0:	8a2b9ceb 	.word	0x8a2b9ceb
 8006fe4:	be5ae5e6 	.word	0xbe5ae5e6
 8006fe8:	57b1fe7d 	.word	0x57b1fe7d
 8006fec:	3ec71de3 	.word	0x3ec71de3
 8006ff0:	19c161d5 	.word	0x19c161d5
 8006ff4:	bf2a01a0 	.word	0xbf2a01a0
 8006ff8:	1110f8a6 	.word	0x1110f8a6
 8006ffc:	3f811111 	.word	0x3f811111
 8007000:	55555549 	.word	0x55555549
 8007004:	bfc55555 	.word	0xbfc55555
 8007008:	55555549 	.word	0x55555549
 800700c:	3fc55555 	.word	0x3fc55555

08007010 <__ieee754_rem_pio2>:
 8007010:	b570      	push	{r4, r5, r6, lr}
 8007012:	eeb0 7b40 	vmov.f64	d7, d0
 8007016:	ee17 5a90 	vmov	r5, s15
 800701a:	4b99      	ldr	r3, [pc, #612]	@ (8007280 <__ieee754_rem_pio2+0x270>)
 800701c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8007020:	429e      	cmp	r6, r3
 8007022:	b088      	sub	sp, #32
 8007024:	4604      	mov	r4, r0
 8007026:	d807      	bhi.n	8007038 <__ieee754_rem_pio2+0x28>
 8007028:	2200      	movs	r2, #0
 800702a:	2300      	movs	r3, #0
 800702c:	ed84 0b00 	vstr	d0, [r4]
 8007030:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007034:	2000      	movs	r0, #0
 8007036:	e01b      	b.n	8007070 <__ieee754_rem_pio2+0x60>
 8007038:	4b92      	ldr	r3, [pc, #584]	@ (8007284 <__ieee754_rem_pio2+0x274>)
 800703a:	429e      	cmp	r6, r3
 800703c:	d83b      	bhi.n	80070b6 <__ieee754_rem_pio2+0xa6>
 800703e:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 8007042:	2d00      	cmp	r5, #0
 8007044:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 8007240 <__ieee754_rem_pio2+0x230>
 8007048:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 800704c:	dd19      	ble.n	8007082 <__ieee754_rem_pio2+0x72>
 800704e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8007052:	429e      	cmp	r6, r3
 8007054:	d00e      	beq.n	8007074 <__ieee754_rem_pio2+0x64>
 8007056:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 8007248 <__ieee754_rem_pio2+0x238>
 800705a:	ee37 6b45 	vsub.f64	d6, d7, d5
 800705e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007062:	ed84 6b00 	vstr	d6, [r4]
 8007066:	ee37 7b45 	vsub.f64	d7, d7, d5
 800706a:	ed84 7b02 	vstr	d7, [r4, #8]
 800706e:	2001      	movs	r0, #1
 8007070:	b008      	add	sp, #32
 8007072:	bd70      	pop	{r4, r5, r6, pc}
 8007074:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8007250 <__ieee754_rem_pio2+0x240>
 8007078:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 8007258 <__ieee754_rem_pio2+0x248>
 800707c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007080:	e7eb      	b.n	800705a <__ieee754_rem_pio2+0x4a>
 8007082:	429e      	cmp	r6, r3
 8007084:	ee30 7b06 	vadd.f64	d7, d0, d6
 8007088:	d00e      	beq.n	80070a8 <__ieee754_rem_pio2+0x98>
 800708a:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 8007248 <__ieee754_rem_pio2+0x238>
 800708e:	ee37 6b05 	vadd.f64	d6, d7, d5
 8007092:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007096:	ed84 6b00 	vstr	d6, [r4]
 800709a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800709e:	f04f 30ff 	mov.w	r0, #4294967295
 80070a2:	ed84 7b02 	vstr	d7, [r4, #8]
 80070a6:	e7e3      	b.n	8007070 <__ieee754_rem_pio2+0x60>
 80070a8:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8007250 <__ieee754_rem_pio2+0x240>
 80070ac:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 8007258 <__ieee754_rem_pio2+0x248>
 80070b0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80070b4:	e7eb      	b.n	800708e <__ieee754_rem_pio2+0x7e>
 80070b6:	4b74      	ldr	r3, [pc, #464]	@ (8007288 <__ieee754_rem_pio2+0x278>)
 80070b8:	429e      	cmp	r6, r3
 80070ba:	d870      	bhi.n	800719e <__ieee754_rem_pio2+0x18e>
 80070bc:	f000 f8ec 	bl	8007298 <fabs>
 80070c0:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 80070c4:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8007260 <__ieee754_rem_pio2+0x250>
 80070c8:	eea0 7b06 	vfma.f64	d7, d0, d6
 80070cc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80070d0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80070d4:	ee17 0a90 	vmov	r0, s15
 80070d8:	eeb1 4b45 	vneg.f64	d4, d5
 80070dc:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8007240 <__ieee754_rem_pio2+0x230>
 80070e0:	eea5 0b47 	vfms.f64	d0, d5, d7
 80070e4:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8007248 <__ieee754_rem_pio2+0x238>
 80070e8:	281f      	cmp	r0, #31
 80070ea:	ee25 7b07 	vmul.f64	d7, d5, d7
 80070ee:	ee30 6b47 	vsub.f64	d6, d0, d7
 80070f2:	dc05      	bgt.n	8007100 <__ieee754_rem_pio2+0xf0>
 80070f4:	4b65      	ldr	r3, [pc, #404]	@ (800728c <__ieee754_rem_pio2+0x27c>)
 80070f6:	1e42      	subs	r2, r0, #1
 80070f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070fc:	42b3      	cmp	r3, r6
 80070fe:	d109      	bne.n	8007114 <__ieee754_rem_pio2+0x104>
 8007100:	ee16 3a90 	vmov	r3, s13
 8007104:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8007108:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800710c:	2b10      	cmp	r3, #16
 800710e:	ea4f 5226 	mov.w	r2, r6, asr #20
 8007112:	dc02      	bgt.n	800711a <__ieee754_rem_pio2+0x10a>
 8007114:	ed84 6b00 	vstr	d6, [r4]
 8007118:	e01a      	b.n	8007150 <__ieee754_rem_pio2+0x140>
 800711a:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 8007250 <__ieee754_rem_pio2+0x240>
 800711e:	eeb0 6b40 	vmov.f64	d6, d0
 8007122:	eea4 6b03 	vfma.f64	d6, d4, d3
 8007126:	ee30 7b46 	vsub.f64	d7, d0, d6
 800712a:	eea4 7b03 	vfma.f64	d7, d4, d3
 800712e:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 8007258 <__ieee754_rem_pio2+0x248>
 8007132:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8007136:	ee36 3b47 	vsub.f64	d3, d6, d7
 800713a:	ee13 3a90 	vmov	r3, s7
 800713e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8007142:	1ad3      	subs	r3, r2, r3
 8007144:	2b31      	cmp	r3, #49	@ 0x31
 8007146:	dc17      	bgt.n	8007178 <__ieee754_rem_pio2+0x168>
 8007148:	eeb0 0b46 	vmov.f64	d0, d6
 800714c:	ed84 3b00 	vstr	d3, [r4]
 8007150:	ed94 6b00 	vldr	d6, [r4]
 8007154:	2d00      	cmp	r5, #0
 8007156:	ee30 0b46 	vsub.f64	d0, d0, d6
 800715a:	ee30 0b47 	vsub.f64	d0, d0, d7
 800715e:	ed84 0b02 	vstr	d0, [r4, #8]
 8007162:	da85      	bge.n	8007070 <__ieee754_rem_pio2+0x60>
 8007164:	eeb1 6b46 	vneg.f64	d6, d6
 8007168:	eeb1 0b40 	vneg.f64	d0, d0
 800716c:	ed84 6b00 	vstr	d6, [r4]
 8007170:	ed84 0b02 	vstr	d0, [r4, #8]
 8007174:	4240      	negs	r0, r0
 8007176:	e77b      	b.n	8007070 <__ieee754_rem_pio2+0x60>
 8007178:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8007268 <__ieee754_rem_pio2+0x258>
 800717c:	eeb0 0b46 	vmov.f64	d0, d6
 8007180:	eea4 0b07 	vfma.f64	d0, d4, d7
 8007184:	ee36 6b40 	vsub.f64	d6, d6, d0
 8007188:	eea4 6b07 	vfma.f64	d6, d4, d7
 800718c:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 8007270 <__ieee754_rem_pio2+0x260>
 8007190:	eeb0 7b46 	vmov.f64	d7, d6
 8007194:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8007198:	ee30 6b47 	vsub.f64	d6, d0, d7
 800719c:	e7ba      	b.n	8007114 <__ieee754_rem_pio2+0x104>
 800719e:	4b3c      	ldr	r3, [pc, #240]	@ (8007290 <__ieee754_rem_pio2+0x280>)
 80071a0:	429e      	cmp	r6, r3
 80071a2:	d906      	bls.n	80071b2 <__ieee754_rem_pio2+0x1a2>
 80071a4:	ee30 7b40 	vsub.f64	d7, d0, d0
 80071a8:	ed80 7b02 	vstr	d7, [r0, #8]
 80071ac:	ed80 7b00 	vstr	d7, [r0]
 80071b0:	e740      	b.n	8007034 <__ieee754_rem_pio2+0x24>
 80071b2:	ee10 3a10 	vmov	r3, s0
 80071b6:	1532      	asrs	r2, r6, #20
 80071b8:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 80071bc:	4618      	mov	r0, r3
 80071be:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80071c2:	ec41 0b17 	vmov	d7, r0, r1
 80071c6:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80071ca:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8007278 <__ieee754_rem_pio2+0x268>
 80071ce:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80071d2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80071d6:	ed8d 6b02 	vstr	d6, [sp, #8]
 80071da:	ee27 7b05 	vmul.f64	d7, d7, d5
 80071de:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80071e2:	a808      	add	r0, sp, #32
 80071e4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80071e8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80071ec:	ed8d 6b04 	vstr	d6, [sp, #16]
 80071f0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80071f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80071f8:	2103      	movs	r1, #3
 80071fa:	ed30 7b02 	vldmdb	r0!, {d7}
 80071fe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007206:	460b      	mov	r3, r1
 8007208:	f101 31ff 	add.w	r1, r1, #4294967295
 800720c:	d0f5      	beq.n	80071fa <__ieee754_rem_pio2+0x1ea>
 800720e:	4921      	ldr	r1, [pc, #132]	@ (8007294 <__ieee754_rem_pio2+0x284>)
 8007210:	9101      	str	r1, [sp, #4]
 8007212:	2102      	movs	r1, #2
 8007214:	9100      	str	r1, [sp, #0]
 8007216:	a802      	add	r0, sp, #8
 8007218:	4621      	mov	r1, r4
 800721a:	f000 f845 	bl	80072a8 <__kernel_rem_pio2>
 800721e:	2d00      	cmp	r5, #0
 8007220:	f6bf af26 	bge.w	8007070 <__ieee754_rem_pio2+0x60>
 8007224:	ed94 7b00 	vldr	d7, [r4]
 8007228:	eeb1 7b47 	vneg.f64	d7, d7
 800722c:	ed84 7b00 	vstr	d7, [r4]
 8007230:	ed94 7b02 	vldr	d7, [r4, #8]
 8007234:	eeb1 7b47 	vneg.f64	d7, d7
 8007238:	ed84 7b02 	vstr	d7, [r4, #8]
 800723c:	e79a      	b.n	8007174 <__ieee754_rem_pio2+0x164>
 800723e:	bf00      	nop
 8007240:	54400000 	.word	0x54400000
 8007244:	3ff921fb 	.word	0x3ff921fb
 8007248:	1a626331 	.word	0x1a626331
 800724c:	3dd0b461 	.word	0x3dd0b461
 8007250:	1a600000 	.word	0x1a600000
 8007254:	3dd0b461 	.word	0x3dd0b461
 8007258:	2e037073 	.word	0x2e037073
 800725c:	3ba3198a 	.word	0x3ba3198a
 8007260:	6dc9c883 	.word	0x6dc9c883
 8007264:	3fe45f30 	.word	0x3fe45f30
 8007268:	2e000000 	.word	0x2e000000
 800726c:	3ba3198a 	.word	0x3ba3198a
 8007270:	252049c1 	.word	0x252049c1
 8007274:	397b839a 	.word	0x397b839a
 8007278:	00000000 	.word	0x00000000
 800727c:	41700000 	.word	0x41700000
 8007280:	3fe921fb 	.word	0x3fe921fb
 8007284:	4002d97b 	.word	0x4002d97b
 8007288:	413921fb 	.word	0x413921fb
 800728c:	08008228 	.word	0x08008228
 8007290:	7fefffff 	.word	0x7fefffff
 8007294:	080082a8 	.word	0x080082a8

08007298 <fabs>:
 8007298:	ec51 0b10 	vmov	r0, r1, d0
 800729c:	4602      	mov	r2, r0
 800729e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80072a2:	ec43 2b10 	vmov	d0, r2, r3
 80072a6:	4770      	bx	lr

080072a8 <__kernel_rem_pio2>:
 80072a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ac:	ed2d 8b06 	vpush	{d8-d10}
 80072b0:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 80072b4:	469b      	mov	fp, r3
 80072b6:	9001      	str	r0, [sp, #4]
 80072b8:	4bbb      	ldr	r3, [pc, #748]	@ (80075a8 <__kernel_rem_pio2+0x300>)
 80072ba:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 80072bc:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 80072c0:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 80072c4:	f112 0f14 	cmn.w	r2, #20
 80072c8:	bfa8      	it	ge
 80072ca:	1ed3      	subge	r3, r2, #3
 80072cc:	f10b 3aff 	add.w	sl, fp, #4294967295
 80072d0:	bfb8      	it	lt
 80072d2:	2300      	movlt	r3, #0
 80072d4:	f06f 0517 	mvn.w	r5, #23
 80072d8:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 8007590 <__kernel_rem_pio2+0x2e8>
 80072dc:	bfa4      	itt	ge
 80072de:	2018      	movge	r0, #24
 80072e0:	fb93 f3f0 	sdivge	r3, r3, r0
 80072e4:	fb03 5505 	mla	r5, r3, r5, r5
 80072e8:	eba3 040a 	sub.w	r4, r3, sl
 80072ec:	4415      	add	r5, r2
 80072ee:	460f      	mov	r7, r1
 80072f0:	eb09 060a 	add.w	r6, r9, sl
 80072f4:	a81a      	add	r0, sp, #104	@ 0x68
 80072f6:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 80072fa:	2200      	movs	r2, #0
 80072fc:	42b2      	cmp	r2, r6
 80072fe:	dd0e      	ble.n	800731e <__kernel_rem_pio2+0x76>
 8007300:	aa1a      	add	r2, sp, #104	@ 0x68
 8007302:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8007306:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 800730a:	2600      	movs	r6, #0
 800730c:	454e      	cmp	r6, r9
 800730e:	dc25      	bgt.n	800735c <__kernel_rem_pio2+0xb4>
 8007310:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 8007590 <__kernel_rem_pio2+0x2e8>
 8007314:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007318:	4614      	mov	r4, r2
 800731a:	2000      	movs	r0, #0
 800731c:	e015      	b.n	800734a <__kernel_rem_pio2+0xa2>
 800731e:	42d4      	cmn	r4, r2
 8007320:	d409      	bmi.n	8007336 <__kernel_rem_pio2+0x8e>
 8007322:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 8007326:	ee07 1a90 	vmov	s15, r1
 800732a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800732e:	eca0 7b02 	vstmia	r0!, {d7}
 8007332:	3201      	adds	r2, #1
 8007334:	e7e2      	b.n	80072fc <__kernel_rem_pio2+0x54>
 8007336:	eeb0 7b46 	vmov.f64	d7, d6
 800733a:	e7f8      	b.n	800732e <__kernel_rem_pio2+0x86>
 800733c:	ecbc 5b02 	vldmia	ip!, {d5}
 8007340:	ed94 6b00 	vldr	d6, [r4]
 8007344:	3001      	adds	r0, #1
 8007346:	eea5 7b06 	vfma.f64	d7, d5, d6
 800734a:	4550      	cmp	r0, sl
 800734c:	f1a4 0408 	sub.w	r4, r4, #8
 8007350:	ddf4      	ble.n	800733c <__kernel_rem_pio2+0x94>
 8007352:	ecae 7b02 	vstmia	lr!, {d7}
 8007356:	3601      	adds	r6, #1
 8007358:	3208      	adds	r2, #8
 800735a:	e7d7      	b.n	800730c <__kernel_rem_pio2+0x64>
 800735c:	aa06      	add	r2, sp, #24
 800735e:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 8007598 <__kernel_rem_pio2+0x2f0>
 8007362:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 80075a0 <__kernel_rem_pio2+0x2f8>
 8007366:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800736a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800736e:	9203      	str	r2, [sp, #12]
 8007370:	9302      	str	r3, [sp, #8]
 8007372:	464c      	mov	r4, r9
 8007374:	00e3      	lsls	r3, r4, #3
 8007376:	9304      	str	r3, [sp, #16]
 8007378:	ab92      	add	r3, sp, #584	@ 0x248
 800737a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800737e:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 8007382:	aa6a      	add	r2, sp, #424	@ 0x1a8
 8007384:	ab06      	add	r3, sp, #24
 8007386:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800738a:	461e      	mov	r6, r3
 800738c:	4620      	mov	r0, r4
 800738e:	2800      	cmp	r0, #0
 8007390:	f1a2 0208 	sub.w	r2, r2, #8
 8007394:	dc4a      	bgt.n	800742c <__kernel_rem_pio2+0x184>
 8007396:	4628      	mov	r0, r5
 8007398:	9305      	str	r3, [sp, #20]
 800739a:	f000 fa01 	bl	80077a0 <scalbn>
 800739e:	eeb0 8b40 	vmov.f64	d8, d0
 80073a2:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 80073a6:	ee28 0b00 	vmul.f64	d0, d8, d0
 80073aa:	f000 fa79 	bl	80078a0 <floor>
 80073ae:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 80073b2:	eea0 8b47 	vfms.f64	d8, d0, d7
 80073b6:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80073ba:	2d00      	cmp	r5, #0
 80073bc:	ee17 8a90 	vmov	r8, s15
 80073c0:	9b05      	ldr	r3, [sp, #20]
 80073c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80073c6:	ee38 8b47 	vsub.f64	d8, d8, d7
 80073ca:	dd41      	ble.n	8007450 <__kernel_rem_pio2+0x1a8>
 80073cc:	1e60      	subs	r0, r4, #1
 80073ce:	aa06      	add	r2, sp, #24
 80073d0:	f1c5 0c18 	rsb	ip, r5, #24
 80073d4:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 80073d8:	fa46 f20c 	asr.w	r2, r6, ip
 80073dc:	4490      	add	r8, r2
 80073de:	fa02 f20c 	lsl.w	r2, r2, ip
 80073e2:	1ab6      	subs	r6, r6, r2
 80073e4:	aa06      	add	r2, sp, #24
 80073e6:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 80073ea:	f1c5 0217 	rsb	r2, r5, #23
 80073ee:	4116      	asrs	r6, r2
 80073f0:	2e00      	cmp	r6, #0
 80073f2:	dd3c      	ble.n	800746e <__kernel_rem_pio2+0x1c6>
 80073f4:	f04f 0c00 	mov.w	ip, #0
 80073f8:	f108 0801 	add.w	r8, r8, #1
 80073fc:	4660      	mov	r0, ip
 80073fe:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 8007402:	4564      	cmp	r4, ip
 8007404:	dc66      	bgt.n	80074d4 <__kernel_rem_pio2+0x22c>
 8007406:	2d00      	cmp	r5, #0
 8007408:	dd03      	ble.n	8007412 <__kernel_rem_pio2+0x16a>
 800740a:	2d01      	cmp	r5, #1
 800740c:	d072      	beq.n	80074f4 <__kernel_rem_pio2+0x24c>
 800740e:	2d02      	cmp	r5, #2
 8007410:	d07a      	beq.n	8007508 <__kernel_rem_pio2+0x260>
 8007412:	2e02      	cmp	r6, #2
 8007414:	d12b      	bne.n	800746e <__kernel_rem_pio2+0x1c6>
 8007416:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800741a:	ee30 8b48 	vsub.f64	d8, d0, d8
 800741e:	b330      	cbz	r0, 800746e <__kernel_rem_pio2+0x1c6>
 8007420:	4628      	mov	r0, r5
 8007422:	f000 f9bd 	bl	80077a0 <scalbn>
 8007426:	ee38 8b40 	vsub.f64	d8, d8, d0
 800742a:	e020      	b.n	800746e <__kernel_rem_pio2+0x1c6>
 800742c:	ee20 7b09 	vmul.f64	d7, d0, d9
 8007430:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8007434:	3801      	subs	r0, #1
 8007436:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800743a:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800743e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8007442:	eca6 0a01 	vstmia	r6!, {s0}
 8007446:	ed92 0b00 	vldr	d0, [r2]
 800744a:	ee37 0b00 	vadd.f64	d0, d7, d0
 800744e:	e79e      	b.n	800738e <__kernel_rem_pio2+0xe6>
 8007450:	d105      	bne.n	800745e <__kernel_rem_pio2+0x1b6>
 8007452:	1e62      	subs	r2, r4, #1
 8007454:	a906      	add	r1, sp, #24
 8007456:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800745a:	15f6      	asrs	r6, r6, #23
 800745c:	e7c8      	b.n	80073f0 <__kernel_rem_pio2+0x148>
 800745e:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8007462:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800746a:	da31      	bge.n	80074d0 <__kernel_rem_pio2+0x228>
 800746c:	2600      	movs	r6, #0
 800746e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007476:	f040 809b 	bne.w	80075b0 <__kernel_rem_pio2+0x308>
 800747a:	1e62      	subs	r2, r4, #1
 800747c:	2000      	movs	r0, #0
 800747e:	454a      	cmp	r2, r9
 8007480:	da49      	bge.n	8007516 <__kernel_rem_pio2+0x26e>
 8007482:	2800      	cmp	r0, #0
 8007484:	d062      	beq.n	800754c <__kernel_rem_pio2+0x2a4>
 8007486:	3c01      	subs	r4, #1
 8007488:	ab06      	add	r3, sp, #24
 800748a:	3d18      	subs	r5, #24
 800748c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d0f8      	beq.n	8007486 <__kernel_rem_pio2+0x1de>
 8007494:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8007498:	4628      	mov	r0, r5
 800749a:	f000 f981 	bl	80077a0 <scalbn>
 800749e:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8007598 <__kernel_rem_pio2+0x2f0>
 80074a2:	1c62      	adds	r2, r4, #1
 80074a4:	a96a      	add	r1, sp, #424	@ 0x1a8
 80074a6:	00d3      	lsls	r3, r2, #3
 80074a8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80074ac:	4622      	mov	r2, r4
 80074ae:	2a00      	cmp	r2, #0
 80074b0:	f280 80a8 	bge.w	8007604 <__kernel_rem_pio2+0x35c>
 80074b4:	4622      	mov	r2, r4
 80074b6:	2a00      	cmp	r2, #0
 80074b8:	f2c0 80c6 	blt.w	8007648 <__kernel_rem_pio2+0x3a0>
 80074bc:	a96a      	add	r1, sp, #424	@ 0x1a8
 80074be:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80074c2:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 8007590 <__kernel_rem_pio2+0x2e8>
 80074c6:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 80075ac <__kernel_rem_pio2+0x304>
 80074ca:	2000      	movs	r0, #0
 80074cc:	1aa1      	subs	r1, r4, r2
 80074ce:	e0b0      	b.n	8007632 <__kernel_rem_pio2+0x38a>
 80074d0:	2602      	movs	r6, #2
 80074d2:	e78f      	b.n	80073f4 <__kernel_rem_pio2+0x14c>
 80074d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80074d8:	b948      	cbnz	r0, 80074ee <__kernel_rem_pio2+0x246>
 80074da:	b122      	cbz	r2, 80074e6 <__kernel_rem_pio2+0x23e>
 80074dc:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 80074e0:	f843 2c04 	str.w	r2, [r3, #-4]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f10c 0c01 	add.w	ip, ip, #1
 80074ea:	4610      	mov	r0, r2
 80074ec:	e789      	b.n	8007402 <__kernel_rem_pio2+0x15a>
 80074ee:	ebae 0202 	sub.w	r2, lr, r2
 80074f2:	e7f5      	b.n	80074e0 <__kernel_rem_pio2+0x238>
 80074f4:	1e62      	subs	r2, r4, #1
 80074f6:	ab06      	add	r3, sp, #24
 80074f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074fc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007500:	a906      	add	r1, sp, #24
 8007502:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007506:	e784      	b.n	8007412 <__kernel_rem_pio2+0x16a>
 8007508:	1e62      	subs	r2, r4, #1
 800750a:	ab06      	add	r3, sp, #24
 800750c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007510:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007514:	e7f4      	b.n	8007500 <__kernel_rem_pio2+0x258>
 8007516:	ab06      	add	r3, sp, #24
 8007518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800751c:	3a01      	subs	r2, #1
 800751e:	4318      	orrs	r0, r3
 8007520:	e7ad      	b.n	800747e <__kernel_rem_pio2+0x1d6>
 8007522:	3301      	adds	r3, #1
 8007524:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8007528:	2800      	cmp	r0, #0
 800752a:	d0fa      	beq.n	8007522 <__kernel_rem_pio2+0x27a>
 800752c:	9a04      	ldr	r2, [sp, #16]
 800752e:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 8007532:	446a      	add	r2, sp
 8007534:	eb04 000b 	add.w	r0, r4, fp
 8007538:	a91a      	add	r1, sp, #104	@ 0x68
 800753a:	1c66      	adds	r6, r4, #1
 800753c:	3a98      	subs	r2, #152	@ 0x98
 800753e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8007542:	4423      	add	r3, r4
 8007544:	42b3      	cmp	r3, r6
 8007546:	da04      	bge.n	8007552 <__kernel_rem_pio2+0x2aa>
 8007548:	461c      	mov	r4, r3
 800754a:	e713      	b.n	8007374 <__kernel_rem_pio2+0xcc>
 800754c:	9a03      	ldr	r2, [sp, #12]
 800754e:	2301      	movs	r3, #1
 8007550:	e7e8      	b.n	8007524 <__kernel_rem_pio2+0x27c>
 8007552:	9902      	ldr	r1, [sp, #8]
 8007554:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007558:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800755c:	9104      	str	r1, [sp, #16]
 800755e:	ee07 1a90 	vmov	s15, r1
 8007562:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007566:	2400      	movs	r4, #0
 8007568:	eca0 7b02 	vstmia	r0!, {d7}
 800756c:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8007590 <__kernel_rem_pio2+0x2e8>
 8007570:	4686      	mov	lr, r0
 8007572:	4554      	cmp	r4, sl
 8007574:	dd03      	ble.n	800757e <__kernel_rem_pio2+0x2d6>
 8007576:	eca2 7b02 	vstmia	r2!, {d7}
 800757a:	3601      	adds	r6, #1
 800757c:	e7e2      	b.n	8007544 <__kernel_rem_pio2+0x29c>
 800757e:	ecbc 5b02 	vldmia	ip!, {d5}
 8007582:	ed3e 6b02 	vldmdb	lr!, {d6}
 8007586:	3401      	adds	r4, #1
 8007588:	eea5 7b06 	vfma.f64	d7, d5, d6
 800758c:	e7f1      	b.n	8007572 <__kernel_rem_pio2+0x2ca>
 800758e:	bf00      	nop
	...
 800759c:	3e700000 	.word	0x3e700000
 80075a0:	00000000 	.word	0x00000000
 80075a4:	41700000 	.word	0x41700000
 80075a8:	080083f0 	.word	0x080083f0
 80075ac:	080083b0 	.word	0x080083b0
 80075b0:	4268      	negs	r0, r5
 80075b2:	eeb0 0b48 	vmov.f64	d0, d8
 80075b6:	f000 f8f3 	bl	80077a0 <scalbn>
 80075ba:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 8007788 <__kernel_rem_pio2+0x4e0>
 80075be:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80075c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075c6:	db17      	blt.n	80075f8 <__kernel_rem_pio2+0x350>
 80075c8:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 8007790 <__kernel_rem_pio2+0x4e8>
 80075cc:	ee20 7b07 	vmul.f64	d7, d0, d7
 80075d0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80075d4:	aa06      	add	r2, sp, #24
 80075d6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 80075da:	eea5 0b46 	vfms.f64	d0, d5, d6
 80075de:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80075e2:	3518      	adds	r5, #24
 80075e4:	ee10 3a10 	vmov	r3, s0
 80075e8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80075ec:	ee17 3a10 	vmov	r3, s14
 80075f0:	3401      	adds	r4, #1
 80075f2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80075f6:	e74d      	b.n	8007494 <__kernel_rem_pio2+0x1ec>
 80075f8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80075fc:	aa06      	add	r2, sp, #24
 80075fe:	ee10 3a10 	vmov	r3, s0
 8007602:	e7f6      	b.n	80075f2 <__kernel_rem_pio2+0x34a>
 8007604:	a806      	add	r0, sp, #24
 8007606:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800760a:	9001      	str	r0, [sp, #4]
 800760c:	ee07 0a90 	vmov	s15, r0
 8007610:	3a01      	subs	r2, #1
 8007612:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007616:	ee27 7b00 	vmul.f64	d7, d7, d0
 800761a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800761e:	ed21 7b02 	vstmdb	r1!, {d7}
 8007622:	e744      	b.n	80074ae <__kernel_rem_pio2+0x206>
 8007624:	ecbc 5b02 	vldmia	ip!, {d5}
 8007628:	ecb5 6b02 	vldmia	r5!, {d6}
 800762c:	3001      	adds	r0, #1
 800762e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8007632:	4548      	cmp	r0, r9
 8007634:	dc01      	bgt.n	800763a <__kernel_rem_pio2+0x392>
 8007636:	4281      	cmp	r1, r0
 8007638:	daf4      	bge.n	8007624 <__kernel_rem_pio2+0x37c>
 800763a:	a842      	add	r0, sp, #264	@ 0x108
 800763c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8007640:	ed81 7b00 	vstr	d7, [r1]
 8007644:	3a01      	subs	r2, #1
 8007646:	e736      	b.n	80074b6 <__kernel_rem_pio2+0x20e>
 8007648:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800764a:	2a02      	cmp	r2, #2
 800764c:	dc0a      	bgt.n	8007664 <__kernel_rem_pio2+0x3bc>
 800764e:	2a00      	cmp	r2, #0
 8007650:	dc2d      	bgt.n	80076ae <__kernel_rem_pio2+0x406>
 8007652:	d046      	beq.n	80076e2 <__kernel_rem_pio2+0x43a>
 8007654:	f008 0007 	and.w	r0, r8, #7
 8007658:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 800765c:	ecbd 8b06 	vpop	{d8-d10}
 8007660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007664:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8007666:	2a03      	cmp	r2, #3
 8007668:	d1f4      	bne.n	8007654 <__kernel_rem_pio2+0x3ac>
 800766a:	a942      	add	r1, sp, #264	@ 0x108
 800766c:	f1a3 0208 	sub.w	r2, r3, #8
 8007670:	440a      	add	r2, r1
 8007672:	4611      	mov	r1, r2
 8007674:	4620      	mov	r0, r4
 8007676:	2800      	cmp	r0, #0
 8007678:	f1a1 0108 	sub.w	r1, r1, #8
 800767c:	dc52      	bgt.n	8007724 <__kernel_rem_pio2+0x47c>
 800767e:	4621      	mov	r1, r4
 8007680:	2901      	cmp	r1, #1
 8007682:	f1a2 0208 	sub.w	r2, r2, #8
 8007686:	dc5d      	bgt.n	8007744 <__kernel_rem_pio2+0x49c>
 8007688:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 8007798 <__kernel_rem_pio2+0x4f0>
 800768c:	aa42      	add	r2, sp, #264	@ 0x108
 800768e:	4413      	add	r3, r2
 8007690:	2c01      	cmp	r4, #1
 8007692:	dc67      	bgt.n	8007764 <__kernel_rem_pio2+0x4bc>
 8007694:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 8007698:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 800769c:	2e00      	cmp	r6, #0
 800769e:	d167      	bne.n	8007770 <__kernel_rem_pio2+0x4c8>
 80076a0:	ed87 5b00 	vstr	d5, [r7]
 80076a4:	ed87 6b02 	vstr	d6, [r7, #8]
 80076a8:	ed87 7b04 	vstr	d7, [r7, #16]
 80076ac:	e7d2      	b.n	8007654 <__kernel_rem_pio2+0x3ac>
 80076ae:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 8007798 <__kernel_rem_pio2+0x4f0>
 80076b2:	aa42      	add	r2, sp, #264	@ 0x108
 80076b4:	4413      	add	r3, r2
 80076b6:	4622      	mov	r2, r4
 80076b8:	2a00      	cmp	r2, #0
 80076ba:	da24      	bge.n	8007706 <__kernel_rem_pio2+0x45e>
 80076bc:	b34e      	cbz	r6, 8007712 <__kernel_rem_pio2+0x46a>
 80076be:	eeb1 7b46 	vneg.f64	d7, d6
 80076c2:	ed87 7b00 	vstr	d7, [r7]
 80076c6:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 80076ca:	aa44      	add	r2, sp, #272	@ 0x110
 80076cc:	2301      	movs	r3, #1
 80076ce:	ee37 7b46 	vsub.f64	d7, d7, d6
 80076d2:	429c      	cmp	r4, r3
 80076d4:	da20      	bge.n	8007718 <__kernel_rem_pio2+0x470>
 80076d6:	b10e      	cbz	r6, 80076dc <__kernel_rem_pio2+0x434>
 80076d8:	eeb1 7b47 	vneg.f64	d7, d7
 80076dc:	ed87 7b02 	vstr	d7, [r7, #8]
 80076e0:	e7b8      	b.n	8007654 <__kernel_rem_pio2+0x3ac>
 80076e2:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8007798 <__kernel_rem_pio2+0x4f0>
 80076e6:	aa42      	add	r2, sp, #264	@ 0x108
 80076e8:	4413      	add	r3, r2
 80076ea:	2c00      	cmp	r4, #0
 80076ec:	da05      	bge.n	80076fa <__kernel_rem_pio2+0x452>
 80076ee:	b10e      	cbz	r6, 80076f4 <__kernel_rem_pio2+0x44c>
 80076f0:	eeb1 7b47 	vneg.f64	d7, d7
 80076f4:	ed87 7b00 	vstr	d7, [r7]
 80076f8:	e7ac      	b.n	8007654 <__kernel_rem_pio2+0x3ac>
 80076fa:	ed33 6b02 	vldmdb	r3!, {d6}
 80076fe:	3c01      	subs	r4, #1
 8007700:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007704:	e7f1      	b.n	80076ea <__kernel_rem_pio2+0x442>
 8007706:	ed33 7b02 	vldmdb	r3!, {d7}
 800770a:	3a01      	subs	r2, #1
 800770c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007710:	e7d2      	b.n	80076b8 <__kernel_rem_pio2+0x410>
 8007712:	eeb0 7b46 	vmov.f64	d7, d6
 8007716:	e7d4      	b.n	80076c2 <__kernel_rem_pio2+0x41a>
 8007718:	ecb2 6b02 	vldmia	r2!, {d6}
 800771c:	3301      	adds	r3, #1
 800771e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007722:	e7d6      	b.n	80076d2 <__kernel_rem_pio2+0x42a>
 8007724:	ed91 7b00 	vldr	d7, [r1]
 8007728:	ed91 5b02 	vldr	d5, [r1, #8]
 800772c:	3801      	subs	r0, #1
 800772e:	ee37 6b05 	vadd.f64	d6, d7, d5
 8007732:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007736:	ed81 6b00 	vstr	d6, [r1]
 800773a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800773e:	ed81 7b02 	vstr	d7, [r1, #8]
 8007742:	e798      	b.n	8007676 <__kernel_rem_pio2+0x3ce>
 8007744:	ed92 7b00 	vldr	d7, [r2]
 8007748:	ed92 5b02 	vldr	d5, [r2, #8]
 800774c:	3901      	subs	r1, #1
 800774e:	ee37 6b05 	vadd.f64	d6, d7, d5
 8007752:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007756:	ed82 6b00 	vstr	d6, [r2]
 800775a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800775e:	ed82 7b02 	vstr	d7, [r2, #8]
 8007762:	e78d      	b.n	8007680 <__kernel_rem_pio2+0x3d8>
 8007764:	ed33 6b02 	vldmdb	r3!, {d6}
 8007768:	3c01      	subs	r4, #1
 800776a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800776e:	e78f      	b.n	8007690 <__kernel_rem_pio2+0x3e8>
 8007770:	eeb1 5b45 	vneg.f64	d5, d5
 8007774:	eeb1 6b46 	vneg.f64	d6, d6
 8007778:	ed87 5b00 	vstr	d5, [r7]
 800777c:	eeb1 7b47 	vneg.f64	d7, d7
 8007780:	ed87 6b02 	vstr	d6, [r7, #8]
 8007784:	e790      	b.n	80076a8 <__kernel_rem_pio2+0x400>
 8007786:	bf00      	nop
 8007788:	00000000 	.word	0x00000000
 800778c:	41700000 	.word	0x41700000
 8007790:	00000000 	.word	0x00000000
 8007794:	3e700000 	.word	0x3e700000
	...

080077a0 <scalbn>:
 80077a0:	ee10 1a90 	vmov	r1, s1
 80077a4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80077a8:	b98b      	cbnz	r3, 80077ce <scalbn+0x2e>
 80077aa:	ee10 3a10 	vmov	r3, s0
 80077ae:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80077b2:	4319      	orrs	r1, r3
 80077b4:	d00a      	beq.n	80077cc <scalbn+0x2c>
 80077b6:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8007868 <scalbn+0xc8>
 80077ba:	4b37      	ldr	r3, [pc, #220]	@ (8007898 <scalbn+0xf8>)
 80077bc:	ee20 0b07 	vmul.f64	d0, d0, d7
 80077c0:	4298      	cmp	r0, r3
 80077c2:	da0b      	bge.n	80077dc <scalbn+0x3c>
 80077c4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8007870 <scalbn+0xd0>
 80077c8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80077cc:	4770      	bx	lr
 80077ce:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d107      	bne.n	80077e6 <scalbn+0x46>
 80077d6:	ee30 0b00 	vadd.f64	d0, d0, d0
 80077da:	4770      	bx	lr
 80077dc:	ee10 1a90 	vmov	r1, s1
 80077e0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80077e4:	3b36      	subs	r3, #54	@ 0x36
 80077e6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80077ea:	4290      	cmp	r0, r2
 80077ec:	dd0d      	ble.n	800780a <scalbn+0x6a>
 80077ee:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8007878 <scalbn+0xd8>
 80077f2:	ee10 3a90 	vmov	r3, s1
 80077f6:	eeb0 6b47 	vmov.f64	d6, d7
 80077fa:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 8007880 <scalbn+0xe0>
 80077fe:	2b00      	cmp	r3, #0
 8007800:	fe27 7b05 	vselge.f64	d7, d7, d5
 8007804:	ee27 0b06 	vmul.f64	d0, d7, d6
 8007808:	4770      	bx	lr
 800780a:	4418      	add	r0, r3
 800780c:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 8007810:	4298      	cmp	r0, r3
 8007812:	dcec      	bgt.n	80077ee <scalbn+0x4e>
 8007814:	2800      	cmp	r0, #0
 8007816:	dd0a      	ble.n	800782e <scalbn+0x8e>
 8007818:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800781c:	ec53 2b10 	vmov	r2, r3, d0
 8007820:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8007824:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8007828:	ec43 2b10 	vmov	d0, r2, r3
 800782c:	4770      	bx	lr
 800782e:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 8007832:	da09      	bge.n	8007848 <scalbn+0xa8>
 8007834:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 8007870 <scalbn+0xd0>
 8007838:	ee10 3a90 	vmov	r3, s1
 800783c:	eeb0 6b47 	vmov.f64	d6, d7
 8007840:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8007888 <scalbn+0xe8>
 8007844:	2b00      	cmp	r3, #0
 8007846:	e7db      	b.n	8007800 <scalbn+0x60>
 8007848:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800784c:	ec53 2b10 	vmov	r2, r3, d0
 8007850:	3036      	adds	r0, #54	@ 0x36
 8007852:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8007856:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800785a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8007890 <scalbn+0xf0>
 800785e:	ec43 2b10 	vmov	d0, r2, r3
 8007862:	e7b1      	b.n	80077c8 <scalbn+0x28>
 8007864:	f3af 8000 	nop.w
 8007868:	00000000 	.word	0x00000000
 800786c:	43500000 	.word	0x43500000
 8007870:	c2f8f359 	.word	0xc2f8f359
 8007874:	01a56e1f 	.word	0x01a56e1f
 8007878:	8800759c 	.word	0x8800759c
 800787c:	7e37e43c 	.word	0x7e37e43c
 8007880:	8800759c 	.word	0x8800759c
 8007884:	fe37e43c 	.word	0xfe37e43c
 8007888:	c2f8f359 	.word	0xc2f8f359
 800788c:	81a56e1f 	.word	0x81a56e1f
 8007890:	00000000 	.word	0x00000000
 8007894:	3c900000 	.word	0x3c900000
 8007898:	ffff3cb0 	.word	0xffff3cb0
 800789c:	00000000 	.word	0x00000000

080078a0 <floor>:
 80078a0:	ee10 3a90 	vmov	r3, s1
 80078a4:	f3c3 500a 	ubfx	r0, r3, #20, #11
 80078a8:	ee10 2a10 	vmov	r2, s0
 80078ac:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 80078b0:	2913      	cmp	r1, #19
 80078b2:	b530      	push	{r4, r5, lr}
 80078b4:	4615      	mov	r5, r2
 80078b6:	dc33      	bgt.n	8007920 <floor+0x80>
 80078b8:	2900      	cmp	r1, #0
 80078ba:	da18      	bge.n	80078ee <floor+0x4e>
 80078bc:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 8007980 <floor+0xe0>
 80078c0:	ee30 0b07 	vadd.f64	d0, d0, d7
 80078c4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80078c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078cc:	dd0a      	ble.n	80078e4 <floor+0x44>
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	da50      	bge.n	8007974 <floor+0xd4>
 80078d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80078d6:	4313      	orrs	r3, r2
 80078d8:	2200      	movs	r2, #0
 80078da:	4293      	cmp	r3, r2
 80078dc:	4b2a      	ldr	r3, [pc, #168]	@ (8007988 <floor+0xe8>)
 80078de:	bf08      	it	eq
 80078e0:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80078e4:	4619      	mov	r1, r3
 80078e6:	4610      	mov	r0, r2
 80078e8:	ec41 0b10 	vmov	d0, r0, r1
 80078ec:	e01f      	b.n	800792e <floor+0x8e>
 80078ee:	4827      	ldr	r0, [pc, #156]	@ (800798c <floor+0xec>)
 80078f0:	4108      	asrs	r0, r1
 80078f2:	ea03 0400 	and.w	r4, r3, r0
 80078f6:	4314      	orrs	r4, r2
 80078f8:	d019      	beq.n	800792e <floor+0x8e>
 80078fa:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007980 <floor+0xe0>
 80078fe:	ee30 0b07 	vadd.f64	d0, d0, d7
 8007902:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800790a:	ddeb      	ble.n	80078e4 <floor+0x44>
 800790c:	2b00      	cmp	r3, #0
 800790e:	bfbe      	ittt	lt
 8007910:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 8007914:	410a      	asrlt	r2, r1
 8007916:	189b      	addlt	r3, r3, r2
 8007918:	ea23 0300 	bic.w	r3, r3, r0
 800791c:	2200      	movs	r2, #0
 800791e:	e7e1      	b.n	80078e4 <floor+0x44>
 8007920:	2933      	cmp	r1, #51	@ 0x33
 8007922:	dd05      	ble.n	8007930 <floor+0x90>
 8007924:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007928:	d101      	bne.n	800792e <floor+0x8e>
 800792a:	ee30 0b00 	vadd.f64	d0, d0, d0
 800792e:	bd30      	pop	{r4, r5, pc}
 8007930:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 8007934:	f04f 30ff 	mov.w	r0, #4294967295
 8007938:	40e0      	lsrs	r0, r4
 800793a:	4210      	tst	r0, r2
 800793c:	d0f7      	beq.n	800792e <floor+0x8e>
 800793e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8007980 <floor+0xe0>
 8007942:	ee30 0b07 	vadd.f64	d0, d0, d7
 8007946:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800794a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800794e:	ddc9      	ble.n	80078e4 <floor+0x44>
 8007950:	2b00      	cmp	r3, #0
 8007952:	da02      	bge.n	800795a <floor+0xba>
 8007954:	2914      	cmp	r1, #20
 8007956:	d103      	bne.n	8007960 <floor+0xc0>
 8007958:	3301      	adds	r3, #1
 800795a:	ea22 0200 	bic.w	r2, r2, r0
 800795e:	e7c1      	b.n	80078e4 <floor+0x44>
 8007960:	2401      	movs	r4, #1
 8007962:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 8007966:	fa04 f101 	lsl.w	r1, r4, r1
 800796a:	440a      	add	r2, r1
 800796c:	42aa      	cmp	r2, r5
 800796e:	bf38      	it	cc
 8007970:	191b      	addcc	r3, r3, r4
 8007972:	e7f2      	b.n	800795a <floor+0xba>
 8007974:	2200      	movs	r2, #0
 8007976:	4613      	mov	r3, r2
 8007978:	e7b4      	b.n	80078e4 <floor+0x44>
 800797a:	bf00      	nop
 800797c:	f3af 8000 	nop.w
 8007980:	8800759c 	.word	0x8800759c
 8007984:	7e37e43c 	.word	0x7e37e43c
 8007988:	bff00000 	.word	0xbff00000
 800798c:	000fffff 	.word	0x000fffff

08007990 <_init>:
 8007990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007992:	bf00      	nop
 8007994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007996:	bc08      	pop	{r3}
 8007998:	469e      	mov	lr, r3
 800799a:	4770      	bx	lr

0800799c <_fini>:
 800799c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800799e:	bf00      	nop
 80079a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079a2:	bc08      	pop	{r3}
 80079a4:	469e      	mov	lr, r3
 80079a6:	4770      	bx	lr

Disassembly of section .ccmram:

080079a8 <pi_aw_calc>:
 * @param v Pointer to the PI control structure.
 *
 * @note This function computes the PI control action with anti-windup.
 */
void pi_aw_calc(volatile pi_aw_struct *v)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
    if(v->enable)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	881b      	ldrh	r3, [r3, #0]
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d063      	beq.n	8007a82 <pi_aw_calc+0xda>
    {
        v->e[0] = v->pi_consig - v->pi_fdb; // Calculate error
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	ed93 7a07 	vldr	s14, [r3, #28]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	edd3 7a08 	vldr	s15, [r3, #32]
 80079c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	edc3 7a05 	vstr	s15, [r3, #20]

        // PI trapezoidal with feedforward
        v->pi_int[0] =  v->Ki * v->e[0] * v->Ts + v->pi_int[1] + (v->pi_out_postsat - v->pi_out_presat) * v->Kaw * v->Ts;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	ed93 7a03 	vldr	s14, [r3, #12]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	edd3 7a05 	vldr	s15, [r3, #20]
 80079dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80079e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80079f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8007a00:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	edd3 7a04 	vldr	s15, [r3, #16]
 8007a0a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	edd3 7a01 	vldr	s15, [r3, #4]
 8007a14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007a18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

        v->pi_out_presat = v->pi_out;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	62da      	str	r2, [r3, #44]	@ 0x2c

        // Output voltage saturation
        if (v->pi_out > v->pi_out_max)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8007a36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a3e:	dd04      	ble.n	8007a4a <pi_aw_calc+0xa2>
            v->pi_out = v->pi_out_max;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	635a      	str	r2, [r3, #52]	@ 0x34
 8007a48:	e00e      	b.n	8007a68 <pi_aw_calc+0xc0>
        else if (v->pi_out < v->pi_out_min)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8007a56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a5e:	d503      	bpl.n	8007a68 <pi_aw_calc+0xc0>
            v->pi_out = v->pi_out_min;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	635a      	str	r2, [r3, #52]	@ 0x34
        else;

        // Copy previous values
        v->e[1] = v->e[0];                      // Copy previous error
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	695a      	ldr	r2, [r3, #20]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	619a      	str	r2, [r3, #24]
        v->pi_ffw[1] = v->pi_ffw[0];            // Copy previous feedforward
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	645a      	str	r2, [r3, #68]	@ 0x44
        v->pi_int[1] = v->pi_int[0];			// Copy previous integrator
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	63da      	str	r2, [r3, #60]	@ 0x3c
        v->e[1] = 0.0F;
        v->pi_ffw[1] = 0.0F;
        v->pi_int[1] = 0.0F;
        v->pi_out = 0.0F;
    }
}
 8007a80:	e00f      	b.n	8007aa2 <pi_aw_calc+0xfa>
        v->e[1] = 0.0F;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f04f 0200 	mov.w	r2, #0
 8007a88:	619a      	str	r2, [r3, #24]
        v->pi_ffw[1] = 0.0F;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f04f 0200 	mov.w	r2, #0
 8007a90:	645a      	str	r2, [r3, #68]	@ 0x44
        v->pi_int[1] = 0.0F;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f04f 0200 	mov.w	r2, #0
 8007a98:	63da      	str	r2, [r3, #60]	@ 0x3c
        v->pi_out = 0.0F;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f04f 0200 	mov.w	r2, #0
 8007aa0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8007aa2:	bf00      	nop
 8007aa4:	370c      	adds	r7, #12
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr

08007aae <pi_init>:
 *
 * @param v Pointer to the PI structure.
 *
 * @note This function initializes the constants used in the PI controller.
 */
void pi_init(volatile pi_struct *v){
 8007aae:	b480      	push	{r7}
 8007ab0:	b083      	sub	sp, #12
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
    v->K0 = v->Kp + v->Ki * v->Ts * 0.5F;   // K0 = Kp + Ki*Ts/2
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	ed93 7a02 	vldr	s14, [r3, #8]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	edd3 6a03 	vldr	s13, [r3, #12]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	edd3 7a01 	vldr	s15, [r3, #4]
 8007ac8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007acc:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8007ad0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007ad4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	edc3 7a04 	vstr	s15, [r3, #16]
    v->K1 = -v->Kp + v->Ki * v->Ts * 0.5F;  // K1 = -Kp + Ki*Ts/2
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	ed93 7a03 	vldr	s14, [r3, #12]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	edd3 7a01 	vldr	s15, [r3, #4]
 8007aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aee:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007af2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	edd3 7a02 	vldr	s15, [r3, #8]
 8007afc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8007b06:	bf00      	nop
 8007b08:	370c      	adds	r7, #12
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr

08007b12 <pi_calc>:
 * @param v Pointer to the PI structure.
 *
 * @note This function computes the PI control action with feedforward and saturation.
 */
void pi_calc(volatile pi_struct *v)
{
 8007b12:	b480      	push	{r7}
 8007b14:	b083      	sub	sp, #12
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
    if(v->enable)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	881b      	ldrh	r3, [r3, #0]
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d056      	beq.n	8007bd2 <pi_calc+0xc0>
    {
        v->e[0] = v->pi_consig - v->pi_fdb; // Calculate error
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	ed93 7a08 	vldr	s14, [r3, #32]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8007b30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	edc3 7a06 	vstr	s15, [r3, #24]
        v->pi_out += v->K0 * v->e[0] + v->K1 * v->e[1] + v->pi_ffw[0] - v->pi_ffw[1];   // PI trapezoidal with feedforward
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	ed93 7a04 	vldr	s14, [r3, #16]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	edd3 7a06 	vldr	s15, [r3, #24]
 8007b46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	edd3 6a05 	vldr	s13, [r3, #20]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	edd3 7a07 	vldr	s15, [r3, #28]
 8007b56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007b5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8007b64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8007b6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8007b78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        // Output voltage saturation
        if (v->pi_out > v->pi_out_max)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8007b8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b96:	dd04      	ble.n	8007ba2 <pi_calc+0x90>
            v->pi_out = v->pi_out_max;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007ba0:	e00e      	b.n	8007bc0 <pi_calc+0xae>
        else if (v->pi_out < v->pi_out_min)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8007bae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bb6:	d503      	bpl.n	8007bc0 <pi_calc+0xae>
            v->pi_out = v->pi_out_min;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	631a      	str	r2, [r3, #48]	@ 0x30
        else;
        // Copy previous values
        v->e[1] = v->e[0];                      // Copy previous error
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	699a      	ldr	r2, [r3, #24]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	61da      	str	r2, [r3, #28]
        v->pi_ffw[1] = v->pi_ffw[0];            // Copy previous feedforward
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	639a      	str	r2, [r3, #56]	@ 0x38
        // Reset previous control variables
        v->e[1] = 0.0F;
        v->pi_ffw[1] = 0.0F;
        v->pi_out = 0.0F;
    }
}
 8007bd0:	e00b      	b.n	8007bea <pi_calc+0xd8>
        v->e[1] = 0.0F;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f04f 0200 	mov.w	r2, #0
 8007bd8:	61da      	str	r2, [r3, #28]
        v->pi_ffw[1] = 0.0F;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f04f 0200 	mov.w	r2, #0
 8007be0:	639a      	str	r2, [r3, #56]	@ 0x38
        v->pi_out = 0.0F;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f04f 0200 	mov.w	r2, #0
 8007be8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007bea:	bf00      	nop
 8007bec:	370c      	adds	r7, #12
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr

08007bf6 <clarke3F_calc>:
 * @param v Pointer to the Clarke transformation structure.
 *
 * @note This function computes the Clarke transformation for three-phase signals.
 */
void clarke3F_calc(volatile clarke3F_struct *v)
{
 8007bf6:	b480      	push	{r7}
 8007bf8:	b083      	sub	sp, #12
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
    v->D = v->a;                                       // Alfa = A
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	609a      	str	r2, [r3, #8]
    v->Q = ISQ3*( v->a + 2.0F * v->b );              // Beta = 1/sqrt(3)*(A + 2*B) = 1/sqrt(3)*(B - C)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	ed93 7a00 	vldr	s14, [r3]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	edd3 7a01 	vldr	s15, [r3, #4]
 8007c12:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007c16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c1a:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8007c34 <clarke3F_calc+0x3e>
 8007c1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8007c28:	bf00      	nop
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr
 8007c34:	3f13cd3a 	.word	0x3f13cd3a

08007c38 <rot_calc>:
 * @param v Pointer to the rotation transformation structure.
 *
 * @note This function computes the rotation transformation (clockwise).
 */
void rot_calc(volatile rot_struct *v)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
    v->d = v->D*v->cosFi + v->Q*v->sinFi;              // d = Alfa(D)*cos(Fi) + Beta(Q)*sin(Fi)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	ed93 7a00 	vldr	s14, [r3]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	edd3 7a03 	vldr	s15, [r3, #12]
 8007c4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	edd3 6a01 	vldr	s13, [r3, #4]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	edd3 7a02 	vldr	s15, [r3, #8]
 8007c5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007c60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	edc3 7a04 	vstr	s15, [r3, #16]
    v->q = v->Q*v->cosFi - v->D*v->sinFi ;             // q = -Alfa(D)*sin(Fi) + Beta(Q)*cos(Fi)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	ed93 7a01 	vldr	s14, [r3, #4]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	edd3 7a03 	vldr	s15, [r3, #12]
 8007c76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	edd3 6a00 	vldr	s13, [r3]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	edd3 7a02 	vldr	s15, [r3, #8]
 8007c86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007c8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <irot_calc>:
 * @param v Pointer to the inverse rotation transformation structure.
 *
 * @note This function computes the inverse rotation transformation (counterclockwise).
 */
void irot_calc(volatile irot_struct *v)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
    v->alpha = v->d*v->cosFi - v->q*v->sinFi;              // Alfa(D) = d*cos(Fi) - q*sin(Fi)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	ed93 7a00 	vldr	s14, [r3]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	edd3 7a03 	vldr	s15, [r3, #12]
 8007cb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	edd3 6a01 	vldr	s13, [r3, #4]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	edd3 7a02 	vldr	s15, [r3, #8]
 8007cc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007cc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	edc3 7a04 	vstr	s15, [r3, #16]
    v->beta = v->d*v->sinFi + v->q*v->cosFi;              // Beta(Q) = d*sin(Fi) + q*cos(Fi)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	ed93 7a00 	vldr	s14, [r3]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	edd3 7a02 	vldr	s15, [r3, #8]
 8007cde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	edd3 6a01 	vldr	s13, [r3, #4]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	edd3 7a03 	vldr	s15, [r3, #12]
 8007cee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007cf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8007cfc:	bf00      	nop
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <angle_calc>:
 * @param v Pointer to the angle generation structure.
 *
 * @note This function generates the angle.
 */
void angle_calc(volatile angle_struct *v)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
    // Integrator
    v->angle += v->freq*v->Ts*2;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	ed93 7a00 	vldr	s14, [r3]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	edd3 7a01 	vldr	s15, [r3, #4]
 8007d1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d20:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	edd3 7a02 	vldr	s15, [r3, #8]
 8007d2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	edc3 7a02 	vstr	s15, [r3, #8]
    v->angle = (v->angle > 1) ? (v->angle - 2) : v->angle;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	edd3 7a02 	vldr	s15, [r3, #8]
 8007d3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d46:	dd07      	ble.n	8007d58 <angle_calc+0x50>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	edd3 7a02 	vldr	s15, [r3, #8]
 8007d4e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8007d52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007d56:	e002      	b.n	8007d5e <angle_calc+0x56>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	edd3 7a02 	vldr	s15, [r3, #8]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8007d64:	bf00      	nop
 8007d66:	370c      	adds	r7, #12
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <svpwm_calc>:
 * @param v Pointer to the SVPWM structure.
 *
 * @note This function calculates the Space Vector Pulse Width Modulation (SVPWM).
 */
void svpwm_calc(volatile svpwm_struct *v)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b089      	sub	sp, #36	@ 0x24
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]

    // Auxiliary variables for SVPWM
    float Va, Vb, Vc, max, min, h;

    // Calculate Va, Vb, and Vc for three-phase system without neutral
    Va = v->alpha;                                      // A = Alfa
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	61fb      	str	r3, [r7, #28]
    //Vb = (- v->valfa + SQ3*v->vbeta)*0.5;              // B = -1/2*Alfa + sqrt(3)/2*Beta
    Vb = (- v->alpha + SQ3*v->beta)*DIV2;              // B = -1/2*Alfa + sqrt(3)/2*Beta
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	edd3 7a01 	vldr	s15, [r3, #4]
 8007d84:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8007e98 <svpwm_calc+0x128>
 8007d88:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	edd3 7a00 	vldr	s15, [r3]
 8007d92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d96:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007d9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007d9e:	edc7 7a06 	vstr	s15, [r7, #24]
    Vc = - Va - Vb;                                     // C = - A - B
 8007da2:	edd7 7a07 	vldr	s15, [r7, #28]
 8007da6:	eeb1 7a67 	vneg.f32	s14, s15
 8007daa:	edd7 7a06 	vldr	s15, [r7, #24]
 8007dae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007db2:	edc7 7a05 	vstr	s15, [r7, #20]

    // Homopolar addition
    // Select maximum
    max = Va;
 8007db6:	69fb      	ldr	r3, [r7, #28]
 8007db8:	613b      	str	r3, [r7, #16]
    max = (Vb >= max) ? Vb : max;
 8007dba:	ed97 7a06 	vldr	s14, [r7, #24]
 8007dbe:	edd7 7a04 	vldr	s15, [r7, #16]
 8007dc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dca:	db01      	blt.n	8007dd0 <svpwm_calc+0x60>
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	e000      	b.n	8007dd2 <svpwm_calc+0x62>
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	613b      	str	r3, [r7, #16]
    max = (Vc >= max) ? Vc : max;
 8007dd4:	ed97 7a05 	vldr	s14, [r7, #20]
 8007dd8:	edd7 7a04 	vldr	s15, [r7, #16]
 8007ddc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007de4:	db01      	blt.n	8007dea <svpwm_calc+0x7a>
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	e000      	b.n	8007dec <svpwm_calc+0x7c>
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	613b      	str	r3, [r7, #16]
    // Select minimum
    min = Va;
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	60fb      	str	r3, [r7, #12]
    min = (Vb <= min) ? Vb : min;
 8007df2:	ed97 7a06 	vldr	s14, [r7, #24]
 8007df6:	edd7 7a03 	vldr	s15, [r7, #12]
 8007dfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e02:	d801      	bhi.n	8007e08 <svpwm_calc+0x98>
 8007e04:	69bb      	ldr	r3, [r7, #24]
 8007e06:	e000      	b.n	8007e0a <svpwm_calc+0x9a>
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	60fb      	str	r3, [r7, #12]
    min = (Vc <= min) ? Vc : min;
 8007e0c:	ed97 7a05 	vldr	s14, [r7, #20]
 8007e10:	edd7 7a03 	vldr	s15, [r7, #12]
 8007e14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e1c:	d801      	bhi.n	8007e22 <svpwm_calc+0xb2>
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	e000      	b.n	8007e24 <svpwm_calc+0xb4>
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	60fb      	str	r3, [r7, #12]
    // Calculate homopolar component
    h = (max + min)*DIV2;
 8007e26:	ed97 7a04 	vldr	s14, [r7, #16]
 8007e2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8007e2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e32:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007e36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007e3a:	edc7 7a02 	vstr	s15, [r7, #8]

    // Generate duty cycles (range from 0 to 1)
    // Convert sinusoids ranging up to 0.5 to sinusoids ranging from 0 to 1
    v->Da = (Va - h + 0.5F);
 8007e3e:	ed97 7a07 	vldr	s14, [r7, #28]
 8007e42:	edd7 7a02 	vldr	s15, [r7, #8]
 8007e46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e4a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007e4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	edc3 7a02 	vstr	s15, [r3, #8]
    v->Db = (Vb - h + 0.5F);
 8007e58:	ed97 7a06 	vldr	s14, [r7, #24]
 8007e5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8007e60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e64:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007e68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	edc3 7a03 	vstr	s15, [r3, #12]
    v->Dc = (Vc - h + 0.5F);
 8007e72:	ed97 7a05 	vldr	s14, [r7, #20]
 8007e76:	edd7 7a02 	vldr	s15, [r7, #8]
 8007e7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e7e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007e82:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8007e8c:	bf00      	nop
 8007e8e:	3724      	adds	r7, #36	@ 0x24
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr
 8007e98:	3fddb3d7 	.word	0x3fddb3d7

08007e9c <rampa_calc>:
 * @param v Pointer to the ramp structure.
 *
 * @note This function calculates the ramp.
 */
void rampa_calc(volatile rampa_struct *v)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
    if (v->enable)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	7b1b      	ldrb	r3, [r3, #12]
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d04e      	beq.n	8007f4c <rampa_calc+0xb0>
    {
        if(v->out < v->in)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	ed93 7a01 	vldr	s14, [r3, #4]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	edd3 7a00 	vldr	s15, [r3]
 8007eba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ec2:	d51b      	bpl.n	8007efc <rampa_calc+0x60>
        {
            v->out += v->Incr;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	ed93 7a02 	vldr	s14, [r3, #8]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	edd3 7a01 	vldr	s15, [r3, #4]
 8007ed0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	edc3 7a01 	vstr	s15, [r3, #4]
            if(v->out > v->in)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	ed93 7a01 	vldr	s14, [r3, #4]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	edd3 7a00 	vldr	s15, [r3]
 8007ee6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eee:	dc00      	bgt.n	8007ef2 <rampa_calc+0x56>
    }
    else
    {
        v->out = 0.0F;
    }
}
 8007ef0:	e030      	b.n	8007f54 <rampa_calc+0xb8>
                v->out = v->in;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	605a      	str	r2, [r3, #4]
}
 8007efa:	e02b      	b.n	8007f54 <rampa_calc+0xb8>
        else if(v->out > v->in)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	ed93 7a01 	vldr	s14, [r3, #4]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	edd3 7a00 	vldr	s15, [r3]
 8007f08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f10:	dc00      	bgt.n	8007f14 <rampa_calc+0x78>
}
 8007f12:	e01f      	b.n	8007f54 <rampa_calc+0xb8>
            v->out -= v->Incr;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	edd3 7a02 	vldr	s15, [r3, #8]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	ed93 7a01 	vldr	s14, [r3, #4]
 8007f20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	edc3 7a01 	vstr	s15, [r3, #4]
            if(v->out < v->in)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	ed93 7a01 	vldr	s14, [r3, #4]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	edd3 7a00 	vldr	s15, [r3]
 8007f36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f3e:	d400      	bmi.n	8007f42 <rampa_calc+0xa6>
}
 8007f40:	e008      	b.n	8007f54 <rampa_calc+0xb8>
                v->out = v->in;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	605a      	str	r2, [r3, #4]
}
 8007f4a:	e003      	b.n	8007f54 <rampa_calc+0xb8>
        v->out = 0.0F;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f04f 0200 	mov.w	r2, #0
 8007f52:	605a      	str	r2, [r3, #4]
}
 8007f54:	bf00      	nop
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <rampa_dual_calc>:
 * @param v Pointer to the dual ramp structure.
 *
 * @note This function calculates the dual ramp.
 */
void rampa_dual_calc(volatile rampa_dual_struct *v)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
    if (v->enable)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	7c1b      	ldrb	r3, [r3, #16]
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d04e      	beq.n	8008010 <rampa_dual_calc+0xb0>
    {
        if(v->out < v->in)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	ed93 7a01 	vldr	s14, [r3, #4]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	edd3 7a00 	vldr	s15, [r3]
 8007f7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f86:	d51b      	bpl.n	8007fc0 <rampa_dual_calc+0x60>
        {
            v->out += v->Incr;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	ed93 7a02 	vldr	s14, [r3, #8]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	edd3 7a01 	vldr	s15, [r3, #4]
 8007f94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	edc3 7a01 	vstr	s15, [r3, #4]
            if(v->out > v->in)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	ed93 7a01 	vldr	s14, [r3, #4]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	edd3 7a00 	vldr	s15, [r3]
 8007faa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fb2:	dc00      	bgt.n	8007fb6 <rampa_dual_calc+0x56>
    }
    else
    {
        v->out = 0;
    }
}
 8007fb4:	e030      	b.n	8008018 <rampa_dual_calc+0xb8>
                v->out = v->in;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	605a      	str	r2, [r3, #4]
}
 8007fbe:	e02b      	b.n	8008018 <rampa_dual_calc+0xb8>
        else if(v->out > v->in)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	ed93 7a01 	vldr	s14, [r3, #4]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	edd3 7a00 	vldr	s15, [r3]
 8007fcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fd4:	dc00      	bgt.n	8007fd8 <rampa_dual_calc+0x78>
}
 8007fd6:	e01f      	b.n	8008018 <rampa_dual_calc+0xb8>
            v->out -= v->Decr;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	edd3 7a03 	vldr	s15, [r3, #12]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	ed93 7a01 	vldr	s14, [r3, #4]
 8007fe4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	edc3 7a01 	vstr	s15, [r3, #4]
            if(v->out < v->in)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	ed93 7a01 	vldr	s14, [r3, #4]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	edd3 7a00 	vldr	s15, [r3]
 8007ffa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008002:	d400      	bmi.n	8008006 <rampa_dual_calc+0xa6>
}
 8008004:	e008      	b.n	8008018 <rampa_dual_calc+0xb8>
                v->out = v->in;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	605a      	str	r2, [r3, #4]
}
 800800e:	e003      	b.n	8008018 <rampa_dual_calc+0xb8>
        v->out = 0;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f04f 0200 	mov.w	r2, #0
 8008016:	605a      	str	r2, [r3, #4]
}
 8008018:	bf00      	nop
 800801a:	370c      	adds	r7, #12
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <RMS_calc>:
 *
 * @param v Pointer to the RMS structure.
 *
 * @note This function calculates the Root Mean Square (RMS).
 */
void RMS_calc(volatile RMS_struct *v){
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
    // Calculate RMS output current.
    //-----------------------------------------------------------------------------------------
    v->Sq_Sum += (float) (v->Measure * v->Measure)* v->T_exec;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	ed93 7a01 	vldr	s14, [r3, #4]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	edd3 7a01 	vldr	s15, [r3, #4]
 8008038:	ee27 7a27 	vmul.f32	s14, s14, s15
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	edd3 7a00 	vldr	s15, [r3]
 8008042:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	edd3 7a02 	vldr	s15, [r3, #8]
 800804c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	edc3 7a02 	vstr	s15, [r3, #8]
    // Execute calculation at the zero crossing of the angle
    //
    if (v->Freq > 0.0F) {
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	edd3 7a04 	vldr	s15, [r3, #16]
 800805c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008064:	dd25      	ble.n	80080b2 <RMS_calc+0x8e>
        if (v->Angle_ant < 0.0F && v->Angle >= 0.0F) {
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	edd3 7a06 	vldr	s15, [r3, #24]
 800806c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008074:	d54c      	bpl.n	8008110 <RMS_calc+0xec>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	edd3 7a05 	vldr	s15, [r3, #20]
 800807c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008084:	db44      	blt.n	8008110 <RMS_calc+0xec>
           // Calculate RMS
            v->Out_RMS = sqrtf((float) v->Sq_Sum * v->Freq);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	ed93 7a02 	vldr	s14, [r3, #8]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	edd3 7a04 	vldr	s15, [r3, #16]
 8008092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008096:	eeb0 0a67 	vmov.f32	s0, s15
 800809a:	f7fe fed5 	bl	8006e48 <sqrtf>
 800809e:	eef0 7a40 	vmov.f32	s15, s0
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	edc3 7a03 	vstr	s15, [r3, #12]
            v->Sq_Sum = 0;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f04f 0200 	mov.w	r2, #0
 80080ae:	609a      	str	r2, [r3, #8]
 80080b0:	e02e      	b.n	8008110 <RMS_calc+0xec>
        }
        else;
    }
    else if (v->Freq < 0.0F){
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	edd3 7a04 	vldr	s15, [r3, #16]
 80080b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80080bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080c0:	d526      	bpl.n	8008110 <RMS_calc+0xec>
        if (v->Angle_ant > 0.0F && v->Angle <= 0.0F) {
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	edd3 7a06 	vldr	s15, [r3, #24]
 80080c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80080cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080d0:	dd1e      	ble.n	8008110 <RMS_calc+0xec>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	edd3 7a05 	vldr	s15, [r3, #20]
 80080d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80080dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080e0:	d816      	bhi.n	8008110 <RMS_calc+0xec>
            // Calculate RMS
            v->Out_RMS = sqrtf((float) v->Sq_Sum * v->Freq * (-1.0F));
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	ed93 7a02 	vldr	s14, [r3, #8]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	edd3 7a04 	vldr	s15, [r3, #16]
 80080ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080f2:	eef1 7a67 	vneg.f32	s15, s15
 80080f6:	eeb0 0a67 	vmov.f32	s0, s15
 80080fa:	f7fe fea5 	bl	8006e48 <sqrtf>
 80080fe:	eef0 7a40 	vmov.f32	s15, s0
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	edc3 7a03 	vstr	s15, [r3, #12]
            v->Sq_Sum = 0;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f04f 0200 	mov.w	r2, #0
 800810e:	609a      	str	r2, [r3, #8]
        }
        else;
        //do nothing
    }
    else;
    v->Angle_ant = v->Angle;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	695a      	ldr	r2, [r3, #20]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	619a      	str	r2, [r3, #24]
}
 8008118:	bf00      	nop
 800811a:	3708      	adds	r7, #8
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <filtreLP_calc>:
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
    if (v->enable)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	8a9b      	ldrh	r3, [r3, #20]
 800812c:	b29b      	uxth	r3, r3
 800812e:	2b00      	cmp	r3, #0
 8008130:	d015      	beq.n	800815e <filtreLP_calc+0x3e>
        v->out = (v->alfa * (v->in - v->out)) + v->out;    // Filter out(k) = alfa*in(k) + (1-alfa)*out(k-1)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	ed93 7a02 	vldr	s14, [r3, #8]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	edd3 6a00 	vldr	s13, [r3]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	edd3 7a01 	vldr	s15, [r3, #4]
 8008144:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008148:	ee27 7a27 	vmul.f32	s14, s14, s15
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	edd3 7a01 	vldr	s15, [r3, #4]
 8008152:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800815c:	e003      	b.n	8008166 <filtreLP_calc+0x46>
        v->out = v->in;        // Without filter. Out(k) = In(k)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	605a      	str	r2, [r3, #4]
}
 8008166:	bf00      	nop
 8008168:	370c      	adds	r7, #12
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr

08008172 <step_calc>:
 * @param v Pointer to the step structure.
 *
 * @note This function calculates the step function.
 */
void step_calc(volatile step_struct *v)
{
 8008172:	b480      	push	{r7}
 8008174:	b083      	sub	sp, #12
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
    // Calculate step width in pulses to count
    v->Pulses = (uint32_t)((v->fs) * (v->t_step));
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	ed93 7a00 	vldr	s14, [r3]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	edd3 7a04 	vldr	s15, [r3, #16]
 8008186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800818a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800818e:	ee17 2a90 	vmov	r2, s15
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	615a      	str	r2, [r3, #20]

    // If enabled, perform the step and start counting
    if (v->enable == 1 && v->Counter < v->Pulses){
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	8b9b      	ldrh	r3, [r3, #28]
 800819a:	b29b      	uxth	r3, r3
 800819c:	2b01      	cmp	r3, #1
 800819e:	d116      	bne.n	80081ce <step_calc+0x5c>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	699a      	ldr	r2, [r3, #24]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	695b      	ldr	r3, [r3, #20]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d210      	bcs.n	80081ce <step_calc+0x5c>
        v->Out = v->In + v->Step;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	ed93 7a01 	vldr	s14, [r3, #4]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	edd3 7a03 	vldr	s15, [r3, #12]
 80081b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	edc3 7a02 	vstr	s15, [r3, #8]
        v->Counter++;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	699b      	ldr	r3, [r3, #24]
 80081c6:	1c5a      	adds	r2, r3, #1
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	619a      	str	r2, [r3, #24]
 80081cc:	e01a      	b.n	8008204 <step_calc+0x92>
    }
    // When reaching the time limit, remove step and reset the counter
    else if (v->enable == 1 && v->Counter >= v->Pulses){
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	8b9b      	ldrh	r3, [r3, #28]
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d110      	bne.n	80081fa <step_calc+0x88>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	699a      	ldr	r2, [r3, #24]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	695b      	ldr	r3, [r3, #20]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d30a      	bcc.n	80081fa <step_calc+0x88>
        v->Out = v->In;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	685a      	ldr	r2, [r3, #4]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	609a      	str	r2, [r3, #8]
        v->Counter = 0;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	619a      	str	r2, [r3, #24]
        v->enable = 0;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	839a      	strh	r2, [r3, #28]
 80081f8:	e004      	b.n	8008204 <step_calc+0x92>
    }
    // If not enabled
    else v->Out = v->In;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	685a      	ldr	r2, [r3, #4]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	609a      	str	r2, [r3, #8]
}
 8008202:	bf00      	nop
 8008204:	bf00      	nop
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr
