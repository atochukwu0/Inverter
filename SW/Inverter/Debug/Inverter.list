
Inverter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009218  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08009418  08009418  00019418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009670  08009670  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08009670  08009670  00019670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009678  08009678  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009678  08009678  00019678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800967c  0800967c  0001967c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08009680  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f78  20000060  080096e0  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004fd8  080096e0  00024fd8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 13 .debug_info   000217c3  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005085  00000000  00000000  00041894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b20  00000000  00000000  00046920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014de  00000000  00000000  00048440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b680  00000000  00000000  0004991e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002444d  00000000  00000000  00074f9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010de37  00000000  00000000  000993eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000072ac  00000000  00000000  001a7224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  001ae4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000060 	.word	0x20000060
 800021c:	00000000 	.word	0x00000000
 8000220:	08009400 	.word	0x08009400

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000064 	.word	0x20000064
 800023c:	08009400 	.word	0x08009400

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b970 	b.w	8000538 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	460d      	mov	r5, r1
 8000278:	4604      	mov	r4, r0
 800027a:	460f      	mov	r7, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14a      	bne.n	8000316 <__udivmoddi4+0xa6>
 8000280:	428a      	cmp	r2, r1
 8000282:	4694      	mov	ip, r2
 8000284:	d965      	bls.n	8000352 <__udivmoddi4+0xe2>
 8000286:	fab2 f382 	clz	r3, r2
 800028a:	b143      	cbz	r3, 800029e <__udivmoddi4+0x2e>
 800028c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000290:	f1c3 0220 	rsb	r2, r3, #32
 8000294:	409f      	lsls	r7, r3
 8000296:	fa20 f202 	lsr.w	r2, r0, r2
 800029a:	4317      	orrs	r7, r2
 800029c:	409c      	lsls	r4, r3
 800029e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002a2:	fa1f f58c 	uxth.w	r5, ip
 80002a6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002aa:	0c22      	lsrs	r2, r4, #16
 80002ac:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002b4:	fb01 f005 	mul.w	r0, r1, r5
 80002b8:	4290      	cmp	r0, r2
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x62>
 80002bc:	eb1c 0202 	adds.w	r2, ip, r2
 80002c0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002c4:	f080 811c 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002c8:	4290      	cmp	r0, r2
 80002ca:	f240 8119 	bls.w	8000500 <__udivmoddi4+0x290>
 80002ce:	3902      	subs	r1, #2
 80002d0:	4462      	add	r2, ip
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002da:	fb0e 2210 	mls	r2, lr, r0, r2
 80002de:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e2:	fb00 f505 	mul.w	r5, r0, r5
 80002e6:	42a5      	cmp	r5, r4
 80002e8:	d90a      	bls.n	8000300 <__udivmoddi4+0x90>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f2:	f080 8107 	bcs.w	8000504 <__udivmoddi4+0x294>
 80002f6:	42a5      	cmp	r5, r4
 80002f8:	f240 8104 	bls.w	8000504 <__udivmoddi4+0x294>
 80002fc:	4464      	add	r4, ip
 80002fe:	3802      	subs	r0, #2
 8000300:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000304:	1b64      	subs	r4, r4, r5
 8000306:	2100      	movs	r1, #0
 8000308:	b11e      	cbz	r6, 8000312 <__udivmoddi4+0xa2>
 800030a:	40dc      	lsrs	r4, r3
 800030c:	2300      	movs	r3, #0
 800030e:	e9c6 4300 	strd	r4, r3, [r6]
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0xbc>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80ed 	beq.w	80004fa <__udivmoddi4+0x28a>
 8000320:	2100      	movs	r1, #0
 8000322:	e9c6 0500 	strd	r0, r5, [r6]
 8000326:	4608      	mov	r0, r1
 8000328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032c:	fab3 f183 	clz	r1, r3
 8000330:	2900      	cmp	r1, #0
 8000332:	d149      	bne.n	80003c8 <__udivmoddi4+0x158>
 8000334:	42ab      	cmp	r3, r5
 8000336:	d302      	bcc.n	800033e <__udivmoddi4+0xce>
 8000338:	4282      	cmp	r2, r0
 800033a:	f200 80f8 	bhi.w	800052e <__udivmoddi4+0x2be>
 800033e:	1a84      	subs	r4, r0, r2
 8000340:	eb65 0203 	sbc.w	r2, r5, r3
 8000344:	2001      	movs	r0, #1
 8000346:	4617      	mov	r7, r2
 8000348:	2e00      	cmp	r6, #0
 800034a:	d0e2      	beq.n	8000312 <__udivmoddi4+0xa2>
 800034c:	e9c6 4700 	strd	r4, r7, [r6]
 8000350:	e7df      	b.n	8000312 <__udivmoddi4+0xa2>
 8000352:	b902      	cbnz	r2, 8000356 <__udivmoddi4+0xe6>
 8000354:	deff      	udf	#255	; 0xff
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8090 	bne.w	8000480 <__udivmoddi4+0x210>
 8000360:	1a8a      	subs	r2, r1, r2
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2101      	movs	r1, #1
 800036c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000370:	fb07 2015 	mls	r0, r7, r5, r2
 8000374:	0c22      	lsrs	r2, r4, #16
 8000376:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800037a:	fb0e f005 	mul.w	r0, lr, r5
 800037e:	4290      	cmp	r0, r2
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x124>
 8000382:	eb1c 0202 	adds.w	r2, ip, r2
 8000386:	f105 38ff 	add.w	r8, r5, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4290      	cmp	r0, r2
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2b8>
 8000392:	4645      	mov	r5, r8
 8000394:	1a12      	subs	r2, r2, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb2 f0f7 	udiv	r0, r2, r7
 800039c:	fb07 2210 	mls	r2, r7, r0, r2
 80003a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x14e>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x14c>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2c2>
 80003bc:	4610      	mov	r0, r2
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003c6:	e79f      	b.n	8000308 <__udivmoddi4+0x98>
 80003c8:	f1c1 0720 	rsb	r7, r1, #32
 80003cc:	408b      	lsls	r3, r1
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa05 f401 	lsl.w	r4, r5, r1
 80003da:	fa20 f307 	lsr.w	r3, r0, r7
 80003de:	40fd      	lsrs	r5, r7
 80003e0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e4:	4323      	orrs	r3, r4
 80003e6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ea:	fa1f fe8c 	uxth.w	lr, ip
 80003ee:	fb09 5518 	mls	r5, r9, r8, r5
 80003f2:	0c1c      	lsrs	r4, r3, #16
 80003f4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f8:	fb08 f50e 	mul.w	r5, r8, lr
 80003fc:	42a5      	cmp	r5, r4
 80003fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000402:	fa00 f001 	lsl.w	r0, r0, r1
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2b4>
 8000414:	42a5      	cmp	r5, r4
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2b4>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4464      	add	r4, ip
 8000420:	1b64      	subs	r4, r4, r5
 8000422:	b29d      	uxth	r5, r3
 8000424:	fbb4 f3f9 	udiv	r3, r4, r9
 8000428:	fb09 4413 	mls	r4, r9, r3, r4
 800042c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000430:	fb03 fe0e 	mul.w	lr, r3, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2ac>
 8000442:	45a6      	cmp	lr, r4
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2ac>
 8000446:	3b02      	subs	r3, #2
 8000448:	4464      	add	r4, ip
 800044a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800044e:	fba3 9502 	umull	r9, r5, r3, r2
 8000452:	eba4 040e 	sub.w	r4, r4, lr
 8000456:	42ac      	cmp	r4, r5
 8000458:	46c8      	mov	r8, r9
 800045a:	46ae      	mov	lr, r5
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x29c>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x298>
 8000460:	b156      	cbz	r6, 8000478 <__udivmoddi4+0x208>
 8000462:	ebb0 0208 	subs.w	r2, r0, r8
 8000466:	eb64 040e 	sbc.w	r4, r4, lr
 800046a:	fa04 f707 	lsl.w	r7, r4, r7
 800046e:	40ca      	lsrs	r2, r1
 8000470:	40cc      	lsrs	r4, r1
 8000472:	4317      	orrs	r7, r2
 8000474:	e9c6 7400 	strd	r7, r4, [r6]
 8000478:	4618      	mov	r0, r3
 800047a:	2100      	movs	r1, #0
 800047c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000480:	f1c3 0120 	rsb	r1, r3, #32
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	fa20 f201 	lsr.w	r2, r0, r1
 800048c:	fa25 f101 	lsr.w	r1, r5, r1
 8000490:	409d      	lsls	r5, r3
 8000492:	432a      	orrs	r2, r5
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a0:	fb07 1510 	mls	r5, r7, r0, r1
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004aa:	fb00 f50e 	mul.w	r5, r0, lr
 80004ae:	428d      	cmp	r5, r1
 80004b0:	fa04 f403 	lsl.w	r4, r4, r3
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x258>
 80004b6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004c0:	428d      	cmp	r5, r1
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1b49      	subs	r1, r1, r5
 80004ca:	b292      	uxth	r2, r2
 80004cc:	fbb1 f5f7 	udiv	r5, r1, r7
 80004d0:	fb07 1115 	mls	r1, r7, r5, r1
 80004d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d8:	fb05 f10e 	mul.w	r1, r5, lr
 80004dc:	4291      	cmp	r1, r2
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x282>
 80004e0:	eb1c 0202 	adds.w	r2, ip, r2
 80004e4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2a8>
 80004ea:	4291      	cmp	r1, r2
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2a8>
 80004ee:	3d02      	subs	r5, #2
 80004f0:	4462      	add	r2, ip
 80004f2:	1a52      	subs	r2, r2, r1
 80004f4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0xfc>
 80004fa:	4631      	mov	r1, r6
 80004fc:	4630      	mov	r0, r6
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xa2>
 8000500:	4639      	mov	r1, r7
 8000502:	e6e6      	b.n	80002d2 <__udivmoddi4+0x62>
 8000504:	4610      	mov	r0, r2
 8000506:	e6fb      	b.n	8000300 <__udivmoddi4+0x90>
 8000508:	4548      	cmp	r0, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000514:	3b01      	subs	r3, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000518:	4645      	mov	r5, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x282>
 800051c:	462b      	mov	r3, r5
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1da>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x258>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000528:	3d02      	subs	r5, #2
 800052a:	4462      	add	r2, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x124>
 800052e:	4608      	mov	r0, r1
 8000530:	e70a      	b.n	8000348 <__udivmoddi4+0xd8>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x14e>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000542:	463b      	mov	r3, r7
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800054e:	4b2f      	ldr	r3, [pc, #188]	; (800060c <MX_ADC1_Init+0xd0>)
 8000550:	4a2f      	ldr	r2, [pc, #188]	; (8000610 <MX_ADC1_Init+0xd4>)
 8000552:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000554:	4b2d      	ldr	r3, [pc, #180]	; (800060c <MX_ADC1_Init+0xd0>)
 8000556:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800055a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800055c:	4b2b      	ldr	r3, [pc, #172]	; (800060c <MX_ADC1_Init+0xd0>)
 800055e:	2200      	movs	r2, #0
 8000560:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000562:	4b2a      	ldr	r3, [pc, #168]	; (800060c <MX_ADC1_Init+0xd0>)
 8000564:	2201      	movs	r2, #1
 8000566:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000568:	4b28      	ldr	r3, [pc, #160]	; (800060c <MX_ADC1_Init+0xd0>)
 800056a:	2201      	movs	r2, #1
 800056c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800056e:	4b27      	ldr	r3, [pc, #156]	; (800060c <MX_ADC1_Init+0xd0>)
 8000570:	2200      	movs	r2, #0
 8000572:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000576:	4b25      	ldr	r3, [pc, #148]	; (800060c <MX_ADC1_Init+0xd0>)
 8000578:	2200      	movs	r2, #0
 800057a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800057c:	4b23      	ldr	r3, [pc, #140]	; (800060c <MX_ADC1_Init+0xd0>)
 800057e:	4a25      	ldr	r2, [pc, #148]	; (8000614 <MX_ADC1_Init+0xd8>)
 8000580:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000582:	4b22      	ldr	r3, [pc, #136]	; (800060c <MX_ADC1_Init+0xd0>)
 8000584:	2200      	movs	r2, #0
 8000586:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000588:	4b20      	ldr	r3, [pc, #128]	; (800060c <MX_ADC1_Init+0xd0>)
 800058a:	2203      	movs	r2, #3
 800058c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800058e:	4b1f      	ldr	r3, [pc, #124]	; (800060c <MX_ADC1_Init+0xd0>)
 8000590:	2201      	movs	r2, #1
 8000592:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000596:	4b1d      	ldr	r3, [pc, #116]	; (800060c <MX_ADC1_Init+0xd0>)
 8000598:	2201      	movs	r2, #1
 800059a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800059c:	481b      	ldr	r0, [pc, #108]	; (800060c <MX_ADC1_Init+0xd0>)
 800059e:	f001 fbaf 	bl	8001d00 <HAL_ADC_Init>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005a8:	f000 fe4e 	bl	8001248 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005b0:	2301      	movs	r3, #1
 80005b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005b8:	463b      	mov	r3, r7
 80005ba:	4619      	mov	r1, r3
 80005bc:	4813      	ldr	r0, [pc, #76]	; (800060c <MX_ADC1_Init+0xd0>)
 80005be:	f001 fd11 	bl	8001fe4 <HAL_ADC_ConfigChannel>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005c8:	f000 fe3e 	bl	8001248 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005cc:	2301      	movs	r3, #1
 80005ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005d0:	2302      	movs	r3, #2
 80005d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005d4:	463b      	mov	r3, r7
 80005d6:	4619      	mov	r1, r3
 80005d8:	480c      	ldr	r0, [pc, #48]	; (800060c <MX_ADC1_Init+0xd0>)
 80005da:	f001 fd03 	bl	8001fe4 <HAL_ADC_ConfigChannel>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80005e4:	f000 fe30 	bl	8001248 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 80005e8:	2312      	movs	r3, #18
 80005ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80005ec:	2303      	movs	r3, #3
 80005ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f0:	463b      	mov	r3, r7
 80005f2:	4619      	mov	r1, r3
 80005f4:	4805      	ldr	r0, [pc, #20]	; (800060c <MX_ADC1_Init+0xd0>)
 80005f6:	f001 fcf5 	bl	8001fe4 <HAL_ADC_ConfigChannel>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000600:	f000 fe22 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000604:	bf00      	nop
 8000606:	3710      	adds	r7, #16
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	2000007c 	.word	0x2000007c
 8000610:	40012000 	.word	0x40012000
 8000614:	0f000001 	.word	0x0f000001

08000618 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800061e:	463b      	mov	r3, r7
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800062a:	4b21      	ldr	r3, [pc, #132]	; (80006b0 <MX_ADC2_Init+0x98>)
 800062c:	4a21      	ldr	r2, [pc, #132]	; (80006b4 <MX_ADC2_Init+0x9c>)
 800062e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000630:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <MX_ADC2_Init+0x98>)
 8000632:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000636:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000638:	4b1d      	ldr	r3, [pc, #116]	; (80006b0 <MX_ADC2_Init+0x98>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800063e:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <MX_ADC2_Init+0x98>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000644:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <MX_ADC2_Init+0x98>)
 8000646:	2200      	movs	r2, #0
 8000648:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800064a:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <MX_ADC2_Init+0x98>)
 800064c:	2200      	movs	r2, #0
 800064e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000652:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <MX_ADC2_Init+0x98>)
 8000654:	2200      	movs	r2, #0
 8000656:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000658:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <MX_ADC2_Init+0x98>)
 800065a:	4a17      	ldr	r2, [pc, #92]	; (80006b8 <MX_ADC2_Init+0xa0>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800065e:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <MX_ADC2_Init+0x98>)
 8000660:	2200      	movs	r2, #0
 8000662:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000664:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <MX_ADC2_Init+0x98>)
 8000666:	2201      	movs	r2, #1
 8000668:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_ADC2_Init+0x98>)
 800066c:	2200      	movs	r2, #0
 800066e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000672:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <MX_ADC2_Init+0x98>)
 8000674:	2201      	movs	r2, #1
 8000676:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000678:	480d      	ldr	r0, [pc, #52]	; (80006b0 <MX_ADC2_Init+0x98>)
 800067a:	f001 fb41 	bl	8001d00 <HAL_ADC_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000684:	f000 fde0 	bl	8001248 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000688:	2306      	movs	r3, #6
 800068a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800068c:	2301      	movs	r3, #1
 800068e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000694:	463b      	mov	r3, r7
 8000696:	4619      	mov	r1, r3
 8000698:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_ADC2_Init+0x98>)
 800069a:	f001 fca3 	bl	8001fe4 <HAL_ADC_ConfigChannel>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80006a4:	f000 fdd0 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80006a8:	bf00      	nop
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	200000c4 	.word	0x200000c4
 80006b4:	40012100 	.word	0x40012100
 80006b8:	0f000001 	.word	0x0f000001

080006bc <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006c2:	463b      	mov	r3, r7
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80006ce:	4b21      	ldr	r3, [pc, #132]	; (8000754 <MX_ADC3_Init+0x98>)
 80006d0:	4a21      	ldr	r2, [pc, #132]	; (8000758 <MX_ADC3_Init+0x9c>)
 80006d2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006d4:	4b1f      	ldr	r3, [pc, #124]	; (8000754 <MX_ADC3_Init+0x98>)
 80006d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006da:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80006dc:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <MX_ADC3_Init+0x98>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006e2:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <MX_ADC3_Init+0x98>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80006e8:	4b1a      	ldr	r3, [pc, #104]	; (8000754 <MX_ADC3_Init+0x98>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80006ee:	4b19      	ldr	r3, [pc, #100]	; (8000754 <MX_ADC3_Init+0x98>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006f6:	4b17      	ldr	r3, [pc, #92]	; (8000754 <MX_ADC3_Init+0x98>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006fc:	4b15      	ldr	r3, [pc, #84]	; (8000754 <MX_ADC3_Init+0x98>)
 80006fe:	4a17      	ldr	r2, [pc, #92]	; (800075c <MX_ADC3_Init+0xa0>)
 8000700:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000702:	4b14      	ldr	r3, [pc, #80]	; (8000754 <MX_ADC3_Init+0x98>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MX_ADC3_Init+0x98>)
 800070a:	2201      	movs	r2, #1
 800070c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_ADC3_Init+0x98>)
 8000710:	2200      	movs	r2, #0
 8000712:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000716:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_ADC3_Init+0x98>)
 8000718:	2201      	movs	r2, #1
 800071a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800071c:	480d      	ldr	r0, [pc, #52]	; (8000754 <MX_ADC3_Init+0x98>)
 800071e:	f001 faef 	bl	8001d00 <HAL_ADC_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000728:	f000 fd8e 	bl	8001248 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800072c:	230a      	movs	r3, #10
 800072e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000730:	2301      	movs	r3, #1
 8000732:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000734:	2300      	movs	r3, #0
 8000736:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000738:	463b      	mov	r3, r7
 800073a:	4619      	mov	r1, r3
 800073c:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_ADC3_Init+0x98>)
 800073e:	f001 fc51 	bl	8001fe4 <HAL_ADC_ConfigChannel>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000748:	f000 fd7e 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	2000010c 	.word	0x2000010c
 8000758:	40012200 	.word	0x40012200
 800075c:	0f000001 	.word	0x0f000001

08000760 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08e      	sub	sp, #56	; 0x38
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a9f      	ldr	r2, [pc, #636]	; (80009fc <HAL_ADC_MspInit+0x29c>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d15c      	bne.n	800083c <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000782:	4b9f      	ldr	r3, [pc, #636]	; (8000a00 <HAL_ADC_MspInit+0x2a0>)
 8000784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000786:	4a9e      	ldr	r2, [pc, #632]	; (8000a00 <HAL_ADC_MspInit+0x2a0>)
 8000788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800078c:	6453      	str	r3, [r2, #68]	; 0x44
 800078e:	4b9c      	ldr	r3, [pc, #624]	; (8000a00 <HAL_ADC_MspInit+0x2a0>)
 8000790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000796:	623b      	str	r3, [r7, #32]
 8000798:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	4b99      	ldr	r3, [pc, #612]	; (8000a00 <HAL_ADC_MspInit+0x2a0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a98      	ldr	r2, [pc, #608]	; (8000a00 <HAL_ADC_MspInit+0x2a0>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b96      	ldr	r3, [pc, #600]	; (8000a00 <HAL_ADC_MspInit+0x2a0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	61fb      	str	r3, [r7, #28]
 80007b0:	69fb      	ldr	r3, [r7, #28]
    PA0/WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ia_L_Pin|ib_L_Pin|ic_L_Pin|VDC_L_Pin;
 80007b2:	230f      	movs	r3, #15
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007b6:	2303      	movs	r3, #3
 80007b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c2:	4619      	mov	r1, r3
 80007c4:	488f      	ldr	r0, [pc, #572]	; (8000a04 <HAL_ADC_MspInit+0x2a4>)
 80007c6:	f002 fe47 	bl	8003458 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80007ca:	4b8f      	ldr	r3, [pc, #572]	; (8000a08 <HAL_ADC_MspInit+0x2a8>)
 80007cc:	4a8f      	ldr	r2, [pc, #572]	; (8000a0c <HAL_ADC_MspInit+0x2ac>)
 80007ce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80007d0:	4b8d      	ldr	r3, [pc, #564]	; (8000a08 <HAL_ADC_MspInit+0x2a8>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007d6:	4b8c      	ldr	r3, [pc, #560]	; (8000a08 <HAL_ADC_MspInit+0x2a8>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007dc:	4b8a      	ldr	r3, [pc, #552]	; (8000a08 <HAL_ADC_MspInit+0x2a8>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007e2:	4b89      	ldr	r3, [pc, #548]	; (8000a08 <HAL_ADC_MspInit+0x2a8>)
 80007e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007e8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007ea:	4b87      	ldr	r3, [pc, #540]	; (8000a08 <HAL_ADC_MspInit+0x2a8>)
 80007ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007f0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80007f2:	4b85      	ldr	r3, [pc, #532]	; (8000a08 <HAL_ADC_MspInit+0x2a8>)
 80007f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007f8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80007fa:	4b83      	ldr	r3, [pc, #524]	; (8000a08 <HAL_ADC_MspInit+0x2a8>)
 80007fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000800:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000802:	4b81      	ldr	r3, [pc, #516]	; (8000a08 <HAL_ADC_MspInit+0x2a8>)
 8000804:	2200      	movs	r2, #0
 8000806:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000808:	4b7f      	ldr	r3, [pc, #508]	; (8000a08 <HAL_ADC_MspInit+0x2a8>)
 800080a:	2200      	movs	r2, #0
 800080c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800080e:	487e      	ldr	r0, [pc, #504]	; (8000a08 <HAL_ADC_MspInit+0x2a8>)
 8000810:	f002 fb38 	bl	8002e84 <HAL_DMA_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 800081a:	f000 fd15 	bl	8001248 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4a79      	ldr	r2, [pc, #484]	; (8000a08 <HAL_ADC_MspInit+0x2a8>)
 8000822:	639a      	str	r2, [r3, #56]	; 0x38
 8000824:	4a78      	ldr	r2, [pc, #480]	; (8000a08 <HAL_ADC_MspInit+0x2a8>)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	2105      	movs	r1, #5
 800082e:	2012      	movs	r0, #18
 8000830:	f002 fa1e 	bl	8002c70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000834:	2012      	movs	r0, #18
 8000836:	f002 fa37 	bl	8002ca8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800083a:	e0da      	b.n	80009f2 <HAL_ADC_MspInit+0x292>
  else if(adcHandle->Instance==ADC2)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a73      	ldr	r2, [pc, #460]	; (8000a10 <HAL_ADC_MspInit+0x2b0>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d174      	bne.n	8000930 <HAL_ADC_MspInit+0x1d0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000846:	4b6e      	ldr	r3, [pc, #440]	; (8000a00 <HAL_ADC_MspInit+0x2a0>)
 8000848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084a:	4a6d      	ldr	r2, [pc, #436]	; (8000a00 <HAL_ADC_MspInit+0x2a0>)
 800084c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000850:	6453      	str	r3, [r2, #68]	; 0x44
 8000852:	4b6b      	ldr	r3, [pc, #428]	; (8000a00 <HAL_ADC_MspInit+0x2a0>)
 8000854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000856:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800085a:	61bb      	str	r3, [r7, #24]
 800085c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4b68      	ldr	r3, [pc, #416]	; (8000a00 <HAL_ADC_MspInit+0x2a0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a67      	ldr	r2, [pc, #412]	; (8000a00 <HAL_ADC_MspInit+0x2a0>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b65      	ldr	r3, [pc, #404]	; (8000a00 <HAL_ADC_MspInit+0x2a0>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	617b      	str	r3, [r7, #20]
 8000874:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	4b62      	ldr	r3, [pc, #392]	; (8000a00 <HAL_ADC_MspInit+0x2a0>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a61      	ldr	r2, [pc, #388]	; (8000a00 <HAL_ADC_MspInit+0x2a0>)
 800087c:	f043 0302 	orr.w	r3, r3, #2
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b5f      	ldr	r3, [pc, #380]	; (8000a00 <HAL_ADC_MspInit+0x2a0>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ia_R_Pin|ib_R_Pin;
 800088e:	23c0      	movs	r3, #192	; 0xc0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000892:	2303      	movs	r3, #3
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089e:	4619      	mov	r1, r3
 80008a0:	4858      	ldr	r0, [pc, #352]	; (8000a04 <HAL_ADC_MspInit+0x2a4>)
 80008a2:	f002 fdd9 	bl	8003458 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ic_R_Pin|VDC_R_Pin;
 80008a6:	2303      	movs	r3, #3
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008aa:	2303      	movs	r3, #3
 80008ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b6:	4619      	mov	r1, r3
 80008b8:	4856      	ldr	r0, [pc, #344]	; (8000a14 <HAL_ADC_MspInit+0x2b4>)
 80008ba:	f002 fdcd 	bl	8003458 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80008be:	4b56      	ldr	r3, [pc, #344]	; (8000a18 <HAL_ADC_MspInit+0x2b8>)
 80008c0:	4a56      	ldr	r2, [pc, #344]	; (8000a1c <HAL_ADC_MspInit+0x2bc>)
 80008c2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80008c4:	4b54      	ldr	r3, [pc, #336]	; (8000a18 <HAL_ADC_MspInit+0x2b8>)
 80008c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80008ca:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008cc:	4b52      	ldr	r3, [pc, #328]	; (8000a18 <HAL_ADC_MspInit+0x2b8>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80008d2:	4b51      	ldr	r3, [pc, #324]	; (8000a18 <HAL_ADC_MspInit+0x2b8>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80008d8:	4b4f      	ldr	r3, [pc, #316]	; (8000a18 <HAL_ADC_MspInit+0x2b8>)
 80008da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008de:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008e0:	4b4d      	ldr	r3, [pc, #308]	; (8000a18 <HAL_ADC_MspInit+0x2b8>)
 80008e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008e6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008e8:	4b4b      	ldr	r3, [pc, #300]	; (8000a18 <HAL_ADC_MspInit+0x2b8>)
 80008ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008ee:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 80008f0:	4b49      	ldr	r3, [pc, #292]	; (8000a18 <HAL_ADC_MspInit+0x2b8>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80008f6:	4b48      	ldr	r3, [pc, #288]	; (8000a18 <HAL_ADC_MspInit+0x2b8>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008fc:	4b46      	ldr	r3, [pc, #280]	; (8000a18 <HAL_ADC_MspInit+0x2b8>)
 80008fe:	2200      	movs	r2, #0
 8000900:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000902:	4845      	ldr	r0, [pc, #276]	; (8000a18 <HAL_ADC_MspInit+0x2b8>)
 8000904:	f002 fabe 	bl	8002e84 <HAL_DMA_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <HAL_ADC_MspInit+0x1b2>
      Error_Handler();
 800090e:	f000 fc9b 	bl	8001248 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4a40      	ldr	r2, [pc, #256]	; (8000a18 <HAL_ADC_MspInit+0x2b8>)
 8000916:	639a      	str	r2, [r3, #56]	; 0x38
 8000918:	4a3f      	ldr	r2, [pc, #252]	; (8000a18 <HAL_ADC_MspInit+0x2b8>)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	2105      	movs	r1, #5
 8000922:	2012      	movs	r0, #18
 8000924:	f002 f9a4 	bl	8002c70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000928:	2012      	movs	r0, #18
 800092a:	f002 f9bd 	bl	8002ca8 <HAL_NVIC_EnableIRQ>
}
 800092e:	e060      	b.n	80009f2 <HAL_ADC_MspInit+0x292>
  else if(adcHandle->Instance==ADC3)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a3a      	ldr	r2, [pc, #232]	; (8000a20 <HAL_ADC_MspInit+0x2c0>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d15b      	bne.n	80009f2 <HAL_ADC_MspInit+0x292>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800093a:	4b31      	ldr	r3, [pc, #196]	; (8000a00 <HAL_ADC_MspInit+0x2a0>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093e:	4a30      	ldr	r2, [pc, #192]	; (8000a00 <HAL_ADC_MspInit+0x2a0>)
 8000940:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000944:	6453      	str	r3, [r2, #68]	; 0x44
 8000946:	4b2e      	ldr	r3, [pc, #184]	; (8000a00 <HAL_ADC_MspInit+0x2a0>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000952:	4b2b      	ldr	r3, [pc, #172]	; (8000a00 <HAL_ADC_MspInit+0x2a0>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a2a      	ldr	r2, [pc, #168]	; (8000a00 <HAL_ADC_MspInit+0x2a0>)
 8000958:	f043 0304 	orr.w	r3, r3, #4
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b28      	ldr	r3, [pc, #160]	; (8000a00 <HAL_ADC_MspInit+0x2a0>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0304 	and.w	r3, r3, #4
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Tinv_L_Pin|Tinv_R_Pin|Tmot_L_Pin|Tmot_R_Pin;
 800096a:	230f      	movs	r3, #15
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800096e:	2303      	movs	r3, #3
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000976:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097a:	4619      	mov	r1, r3
 800097c:	4829      	ldr	r0, [pc, #164]	; (8000a24 <HAL_ADC_MspInit+0x2c4>)
 800097e:	f002 fd6b 	bl	8003458 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8000982:	4b29      	ldr	r3, [pc, #164]	; (8000a28 <HAL_ADC_MspInit+0x2c8>)
 8000984:	4a29      	ldr	r2, [pc, #164]	; (8000a2c <HAL_ADC_MspInit+0x2cc>)
 8000986:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000988:	4b27      	ldr	r3, [pc, #156]	; (8000a28 <HAL_ADC_MspInit+0x2c8>)
 800098a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800098e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000990:	4b25      	ldr	r3, [pc, #148]	; (8000a28 <HAL_ADC_MspInit+0x2c8>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000996:	4b24      	ldr	r3, [pc, #144]	; (8000a28 <HAL_ADC_MspInit+0x2c8>)
 8000998:	2200      	movs	r2, #0
 800099a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800099c:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <HAL_ADC_MspInit+0x2c8>)
 800099e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009a2:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009a4:	4b20      	ldr	r3, [pc, #128]	; (8000a28 <HAL_ADC_MspInit+0x2c8>)
 80009a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009aa:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009ac:	4b1e      	ldr	r3, [pc, #120]	; (8000a28 <HAL_ADC_MspInit+0x2c8>)
 80009ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009b2:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 80009b4:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <HAL_ADC_MspInit+0x2c8>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80009ba:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <HAL_ADC_MspInit+0x2c8>)
 80009bc:	2200      	movs	r2, #0
 80009be:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009c0:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <HAL_ADC_MspInit+0x2c8>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80009c6:	4818      	ldr	r0, [pc, #96]	; (8000a28 <HAL_ADC_MspInit+0x2c8>)
 80009c8:	f002 fa5c 	bl	8002e84 <HAL_DMA_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <HAL_ADC_MspInit+0x276>
      Error_Handler();
 80009d2:	f000 fc39 	bl	8001248 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a13      	ldr	r2, [pc, #76]	; (8000a28 <HAL_ADC_MspInit+0x2c8>)
 80009da:	639a      	str	r2, [r3, #56]	; 0x38
 80009dc:	4a12      	ldr	r2, [pc, #72]	; (8000a28 <HAL_ADC_MspInit+0x2c8>)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2105      	movs	r1, #5
 80009e6:	2012      	movs	r0, #18
 80009e8:	f002 f942 	bl	8002c70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80009ec:	2012      	movs	r0, #18
 80009ee:	f002 f95b 	bl	8002ca8 <HAL_NVIC_EnableIRQ>
}
 80009f2:	bf00      	nop
 80009f4:	3738      	adds	r7, #56	; 0x38
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40012000 	.word	0x40012000
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40020000 	.word	0x40020000
 8000a08:	20000154 	.word	0x20000154
 8000a0c:	40026410 	.word	0x40026410
 8000a10:	40012100 	.word	0x40012100
 8000a14:	40020400 	.word	0x40020400
 8000a18:	200001b4 	.word	0x200001b4
 8000a1c:	40026440 	.word	0x40026440
 8000a20:	40012200 	.word	0x40012200
 8000a24:	40020800 	.word	0x40020800
 8000a28:	20000214 	.word	0x20000214
 8000a2c:	40026428 	.word	0x40026428

08000a30 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a34:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <MX_CAN1_Init+0x64>)
 8000a36:	4a18      	ldr	r2, [pc, #96]	; (8000a98 <MX_CAN1_Init+0x68>)
 8000a38:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 8000a3a:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <MX_CAN1_Init+0x64>)
 8000a3c:	220c      	movs	r2, #12
 8000a3e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a40:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <MX_CAN1_Init+0x64>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a46:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <MX_CAN1_Init+0x64>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <MX_CAN1_Init+0x64>)
 8000a4e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a52:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_CAN1_Init+0x64>)
 8000a56:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a5a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a5c:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <MX_CAN1_Init+0x64>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <MX_CAN1_Init+0x64>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a68:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <MX_CAN1_Init+0x64>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_CAN1_Init+0x64>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a74:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <MX_CAN1_Init+0x64>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_CAN1_Init+0x64>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a80:	4804      	ldr	r0, [pc, #16]	; (8000a94 <MX_CAN1_Init+0x64>)
 8000a82:	f001 fd09 	bl	8002498 <HAL_CAN_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000a8c:	f000 fbdc 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000274 	.word	0x20000274
 8000a98:	40006400 	.word	0x40006400

08000a9c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	; 0x28
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a1f      	ldr	r2, [pc, #124]	; (8000b38 <HAL_CAN_MspInit+0x9c>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d137      	bne.n	8000b2e <HAL_CAN_MspInit+0x92>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000abe:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <HAL_CAN_MspInit+0xa0>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	4a1e      	ldr	r2, [pc, #120]	; (8000b3c <HAL_CAN_MspInit+0xa0>)
 8000ac4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aca:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <HAL_CAN_MspInit+0xa0>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ad6:	4b19      	ldr	r3, [pc, #100]	; (8000b3c <HAL_CAN_MspInit+0xa0>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a18      	ldr	r2, [pc, #96]	; (8000b3c <HAL_CAN_MspInit+0xa0>)
 8000adc:	f043 0308 	orr.w	r3, r3, #8
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <HAL_CAN_MspInit+0xa0>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0308 	and.w	r3, r3, #8
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000aee:	2303      	movs	r3, #3
 8000af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afa:	2303      	movs	r3, #3
 8000afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000afe:	2309      	movs	r3, #9
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4619      	mov	r1, r3
 8000b08:	480d      	ldr	r0, [pc, #52]	; (8000b40 <HAL_CAN_MspInit+0xa4>)
 8000b0a:	f002 fca5 	bl	8003458 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2105      	movs	r1, #5
 8000b12:	2014      	movs	r0, #20
 8000b14:	f002 f8ac 	bl	8002c70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000b18:	2014      	movs	r0, #20
 8000b1a:	f002 f8c5 	bl	8002ca8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2105      	movs	r1, #5
 8000b22:	2015      	movs	r0, #21
 8000b24:	f002 f8a4 	bl	8002c70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000b28:	2015      	movs	r0, #21
 8000b2a:	f002 f8bd 	bl	8002ca8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000b2e:	bf00      	nop
 8000b30:	3728      	adds	r7, #40	; 0x28
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40006400 	.word	0x40006400
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40020c00 	.word	0x40020c00

08000b44 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b4a:	463b      	mov	r3, r7
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <MX_DAC_Init+0x4c>)
 8000b54:	4a0f      	ldr	r2, [pc, #60]	; (8000b94 <MX_DAC_Init+0x50>)
 8000b56:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000b58:	480d      	ldr	r0, [pc, #52]	; (8000b90 <MX_DAC_Init+0x4c>)
 8000b5a:	f002 f8b3 	bl	8002cc4 <HAL_DAC_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000b64:	f000 fb70 	bl	8001248 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b70:	463b      	mov	r3, r7
 8000b72:	2200      	movs	r2, #0
 8000b74:	4619      	mov	r1, r3
 8000b76:	4806      	ldr	r0, [pc, #24]	; (8000b90 <MX_DAC_Init+0x4c>)
 8000b78:	f002 f92a 	bl	8002dd0 <HAL_DAC_ConfigChannel>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000b82:	f000 fb61 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	2000029c 	.word	0x2000029c
 8000b94:	40007400 	.word	0x40007400

08000b98 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	; 0x28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a19      	ldr	r2, [pc, #100]	; (8000c1c <HAL_DAC_MspInit+0x84>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d12b      	bne.n	8000c12 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000bba:	4b19      	ldr	r3, [pc, #100]	; (8000c20 <HAL_DAC_MspInit+0x88>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	4a18      	ldr	r2, [pc, #96]	; (8000c20 <HAL_DAC_MspInit+0x88>)
 8000bc0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc6:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <HAL_DAC_MspInit+0x88>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	4b13      	ldr	r3, [pc, #76]	; (8000c20 <HAL_DAC_MspInit+0x88>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a12      	ldr	r2, [pc, #72]	; (8000c20 <HAL_DAC_MspInit+0x88>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <HAL_DAC_MspInit+0x88>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = DAC_Pin;
 8000bea:	2310      	movs	r3, #16
 8000bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC_GPIO_Port, &GPIO_InitStruct);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4809      	ldr	r0, [pc, #36]	; (8000c24 <HAL_DAC_MspInit+0x8c>)
 8000bfe:	f002 fc2b 	bl	8003458 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2105      	movs	r1, #5
 8000c06:	2036      	movs	r0, #54	; 0x36
 8000c08:	f002 f832 	bl	8002c70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c0c:	2036      	movs	r0, #54	; 0x36
 8000c0e:	f002 f84b 	bl	8002ca8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000c12:	bf00      	nop
 8000c14:	3728      	adds	r7, #40	; 0x28
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40007400 	.word	0x40007400
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40020000 	.word	0x40020000

08000c28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c2e:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <MX_DMA_Init+0x58>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <MX_DMA_Init+0x58>)
 8000c34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <MX_DMA_Init+0x58>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2105      	movs	r1, #5
 8000c4a:	2038      	movs	r0, #56	; 0x38
 8000c4c:	f002 f810 	bl	8002c70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c50:	2038      	movs	r0, #56	; 0x38
 8000c52:	f002 f829 	bl	8002ca8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2105      	movs	r1, #5
 8000c5a:	2039      	movs	r0, #57	; 0x39
 8000c5c:	f002 f808 	bl	8002c70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000c60:	2039      	movs	r0, #57	; 0x39
 8000c62:	f002 f821 	bl	8002ca8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2105      	movs	r1, #5
 8000c6a:	203a      	movs	r0, #58	; 0x3a
 8000c6c:	f002 f800 	bl	8002c70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000c70:	203a      	movs	r0, #58	; 0x3a
 8000c72:	f002 f819 	bl	8002ca8 <HAL_NVIC_EnableIRQ>

}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40023800 	.word	0x40023800

08000c84 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of qMeasurements_L */
  qMeasurements_LHandle = osMessageQueueNew (16, sizeof(float), &qMeasurements_L_attributes);
 8000c88:	4a34      	ldr	r2, [pc, #208]	; (8000d5c <MX_FREERTOS_Init+0xd8>)
 8000c8a:	2104      	movs	r1, #4
 8000c8c:	2010      	movs	r0, #16
 8000c8e:	f005 fd51 	bl	8006734 <osMessageQueueNew>
 8000c92:	4603      	mov	r3, r0
 8000c94:	4a32      	ldr	r2, [pc, #200]	; (8000d60 <MX_FREERTOS_Init+0xdc>)
 8000c96:	6013      	str	r3, [r2, #0]

  /* creation of qMeasurements_R */
  qMeasurements_RHandle = osMessageQueueNew (16, sizeof(float), &qMeasurements_R_attributes);
 8000c98:	4a32      	ldr	r2, [pc, #200]	; (8000d64 <MX_FREERTOS_Init+0xe0>)
 8000c9a:	2104      	movs	r1, #4
 8000c9c:	2010      	movs	r0, #16
 8000c9e:	f005 fd49 	bl	8006734 <osMessageQueueNew>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	4a30      	ldr	r2, [pc, #192]	; (8000d68 <MX_FREERTOS_Init+0xe4>)
 8000ca6:	6013      	str	r3, [r2, #0]

  /* creation of qControl_L */
  qControl_LHandle = osMessageQueueNew (16, sizeof(float), &qControl_L_attributes);
 8000ca8:	4a30      	ldr	r2, [pc, #192]	; (8000d6c <MX_FREERTOS_Init+0xe8>)
 8000caa:	2104      	movs	r1, #4
 8000cac:	2010      	movs	r0, #16
 8000cae:	f005 fd41 	bl	8006734 <osMessageQueueNew>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	4a2e      	ldr	r2, [pc, #184]	; (8000d70 <MX_FREERTOS_Init+0xec>)
 8000cb6:	6013      	str	r3, [r2, #0]

  /* creation of qControl_R */
  qControl_RHandle = osMessageQueueNew (16, sizeof(float), &qControl_R_attributes);
 8000cb8:	4a2e      	ldr	r2, [pc, #184]	; (8000d74 <MX_FREERTOS_Init+0xf0>)
 8000cba:	2104      	movs	r1, #4
 8000cbc:	2010      	movs	r0, #16
 8000cbe:	f005 fd39 	bl	8006734 <osMessageQueueNew>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	4a2c      	ldr	r2, [pc, #176]	; (8000d78 <MX_FREERTOS_Init+0xf4>)
 8000cc6:	6013      	str	r3, [r2, #0]

  /* creation of qTorqueRef_L */
  qTorqueRef_LHandle = osMessageQueueNew (16, sizeof(float), &qTorqueRef_L_attributes);
 8000cc8:	4a2c      	ldr	r2, [pc, #176]	; (8000d7c <MX_FREERTOS_Init+0xf8>)
 8000cca:	2104      	movs	r1, #4
 8000ccc:	2010      	movs	r0, #16
 8000cce:	f005 fd31 	bl	8006734 <osMessageQueueNew>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	4a2a      	ldr	r2, [pc, #168]	; (8000d80 <MX_FREERTOS_Init+0xfc>)
 8000cd6:	6013      	str	r3, [r2, #0]

  /* creation of qTorqueRef_R */
  qTorqueRef_RHandle = osMessageQueueNew (16, sizeof(float), &qTorqueRef_R_attributes);
 8000cd8:	4a2a      	ldr	r2, [pc, #168]	; (8000d84 <MX_FREERTOS_Init+0x100>)
 8000cda:	2104      	movs	r1, #4
 8000cdc:	2010      	movs	r0, #16
 8000cde:	f005 fd29 	bl	8006734 <osMessageQueueNew>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	4a28      	ldr	r2, [pc, #160]	; (8000d88 <MX_FREERTOS_Init+0x104>)
 8000ce6:	6013      	str	r3, [r2, #0]

  /* creation of qStatus_L */
  qStatus_LHandle = osMessageQueueNew (16, sizeof(float), &qStatus_L_attributes);
 8000ce8:	4a28      	ldr	r2, [pc, #160]	; (8000d8c <MX_FREERTOS_Init+0x108>)
 8000cea:	2104      	movs	r1, #4
 8000cec:	2010      	movs	r0, #16
 8000cee:	f005 fd21 	bl	8006734 <osMessageQueueNew>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	4a26      	ldr	r2, [pc, #152]	; (8000d90 <MX_FREERTOS_Init+0x10c>)
 8000cf6:	6013      	str	r3, [r2, #0]

  /* creation of qStatus_R */
  qStatus_RHandle = osMessageQueueNew (16, sizeof(float), &qStatus_R_attributes);
 8000cf8:	4a26      	ldr	r2, [pc, #152]	; (8000d94 <MX_FREERTOS_Init+0x110>)
 8000cfa:	2104      	movs	r1, #4
 8000cfc:	2010      	movs	r0, #16
 8000cfe:	f005 fd19 	bl	8006734 <osMessageQueueNew>
 8000d02:	4603      	mov	r3, r0
 8000d04:	4a24      	ldr	r2, [pc, #144]	; (8000d98 <MX_FREERTOS_Init+0x114>)
 8000d06:	6013      	str	r3, [r2, #0]

  /* creation of qTemperatures */
  qTemperaturesHandle = osMessageQueueNew (16, sizeof(float), &qTemperatures_attributes);
 8000d08:	4a24      	ldr	r2, [pc, #144]	; (8000d9c <MX_FREERTOS_Init+0x118>)
 8000d0a:	2104      	movs	r1, #4
 8000d0c:	2010      	movs	r0, #16
 8000d0e:	f005 fd11 	bl	8006734 <osMessageQueueNew>
 8000d12:	4603      	mov	r3, r0
 8000d14:	4a22      	ldr	r2, [pc, #136]	; (8000da0 <MX_FREERTOS_Init+0x11c>)
 8000d16:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Measurements_L */
  Measurements_LHandle = osThreadNew(startMeasurements, NULL, &Measurements_L_attributes);
 8000d18:	4a22      	ldr	r2, [pc, #136]	; (8000da4 <MX_FREERTOS_Init+0x120>)
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4822      	ldr	r0, [pc, #136]	; (8000da8 <MX_FREERTOS_Init+0x124>)
 8000d1e:	f005 fc35 	bl	800658c <osThreadNew>
 8000d22:	4603      	mov	r3, r0
 8000d24:	4a21      	ldr	r2, [pc, #132]	; (8000dac <MX_FREERTOS_Init+0x128>)
 8000d26:	6013      	str	r3, [r2, #0]

  /* creation of Measurements_R */
  Measurements_RHandle = osThreadNew(startMeasurements, NULL, &Measurements_R_attributes);
 8000d28:	4a21      	ldr	r2, [pc, #132]	; (8000db0 <MX_FREERTOS_Init+0x12c>)
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	481e      	ldr	r0, [pc, #120]	; (8000da8 <MX_FREERTOS_Init+0x124>)
 8000d2e:	f005 fc2d 	bl	800658c <osThreadNew>
 8000d32:	4603      	mov	r3, r0
 8000d34:	4a1f      	ldr	r2, [pc, #124]	; (8000db4 <MX_FREERTOS_Init+0x130>)
 8000d36:	6013      	str	r3, [r2, #0]

  /* creation of Control_L */
  Control_LHandle = osThreadNew(startControl, NULL, &Control_L_attributes);
 8000d38:	4a1f      	ldr	r2, [pc, #124]	; (8000db8 <MX_FREERTOS_Init+0x134>)
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	481f      	ldr	r0, [pc, #124]	; (8000dbc <MX_FREERTOS_Init+0x138>)
 8000d3e:	f005 fc25 	bl	800658c <osThreadNew>
 8000d42:	4603      	mov	r3, r0
 8000d44:	4a1e      	ldr	r2, [pc, #120]	; (8000dc0 <MX_FREERTOS_Init+0x13c>)
 8000d46:	6013      	str	r3, [r2, #0]

  /* creation of Control_R */
  Control_RHandle = osThreadNew(startControl, NULL, &Control_R_attributes);
 8000d48:	4a1e      	ldr	r2, [pc, #120]	; (8000dc4 <MX_FREERTOS_Init+0x140>)
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	481b      	ldr	r0, [pc, #108]	; (8000dbc <MX_FREERTOS_Init+0x138>)
 8000d4e:	f005 fc1d 	bl	800658c <osThreadNew>
 8000d52:	4603      	mov	r3, r0
 8000d54:	4a1c      	ldr	r2, [pc, #112]	; (8000dc8 <MX_FREERTOS_Init+0x144>)
 8000d56:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	08009578 	.word	0x08009578
 8000d60:	200002c0 	.word	0x200002c0
 8000d64:	08009590 	.word	0x08009590
 8000d68:	200002c4 	.word	0x200002c4
 8000d6c:	080095a8 	.word	0x080095a8
 8000d70:	200002c8 	.word	0x200002c8
 8000d74:	080095c0 	.word	0x080095c0
 8000d78:	200002cc 	.word	0x200002cc
 8000d7c:	080095d8 	.word	0x080095d8
 8000d80:	200002d0 	.word	0x200002d0
 8000d84:	080095f0 	.word	0x080095f0
 8000d88:	200002d4 	.word	0x200002d4
 8000d8c:	08009608 	.word	0x08009608
 8000d90:	200002d8 	.word	0x200002d8
 8000d94:	08009620 	.word	0x08009620
 8000d98:	200002dc 	.word	0x200002dc
 8000d9c:	08009638 	.word	0x08009638
 8000da0:	200002e0 	.word	0x200002e0
 8000da4:	080094e8 	.word	0x080094e8
 8000da8:	08000dcd 	.word	0x08000dcd
 8000dac:	200002b0 	.word	0x200002b0
 8000db0:	0800950c 	.word	0x0800950c
 8000db4:	200002b4 	.word	0x200002b4
 8000db8:	08009530 	.word	0x08009530
 8000dbc:	08000ddd 	.word	0x08000ddd
 8000dc0:	200002b8 	.word	0x200002b8
 8000dc4:	08009554 	.word	0x08009554
 8000dc8:	200002bc 	.word	0x200002bc

08000dcc <startMeasurements>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startMeasurements */
void startMeasurements(void *argument)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startMeasurements */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	f005 fc7f 	bl	80066d8 <osDelay>
 8000dda:	e7fb      	b.n	8000dd4 <startMeasurements+0x8>

08000ddc <startControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startControl */
void startControl(void *argument)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startControl */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000de4:	2001      	movs	r0, #1
 8000de6:	f005 fc77 	bl	80066d8 <osDelay>
 8000dea:	e7fb      	b.n	8000de4 <startControl+0x8>

08000dec <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08c      	sub	sp, #48	; 0x30
 8000df0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	60da      	str	r2, [r3, #12]
 8000e00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e02:	4b68      	ldr	r3, [pc, #416]	; (8000fa4 <MX_GPIO_Init+0x1b8>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a67      	ldr	r2, [pc, #412]	; (8000fa4 <MX_GPIO_Init+0x1b8>)
 8000e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b65      	ldr	r3, [pc, #404]	; (8000fa4 <MX_GPIO_Init+0x1b8>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e16:	61bb      	str	r3, [r7, #24]
 8000e18:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1a:	4b62      	ldr	r3, [pc, #392]	; (8000fa4 <MX_GPIO_Init+0x1b8>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a61      	ldr	r2, [pc, #388]	; (8000fa4 <MX_GPIO_Init+0x1b8>)
 8000e20:	f043 0304 	orr.w	r3, r3, #4
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b5f      	ldr	r3, [pc, #380]	; (8000fa4 <MX_GPIO_Init+0x1b8>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0304 	and.w	r3, r3, #4
 8000e2e:	617b      	str	r3, [r7, #20]
 8000e30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	4b5c      	ldr	r3, [pc, #368]	; (8000fa4 <MX_GPIO_Init+0x1b8>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a5b      	ldr	r2, [pc, #364]	; (8000fa4 <MX_GPIO_Init+0x1b8>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b59      	ldr	r3, [pc, #356]	; (8000fa4 <MX_GPIO_Init+0x1b8>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4a:	4b56      	ldr	r3, [pc, #344]	; (8000fa4 <MX_GPIO_Init+0x1b8>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a55      	ldr	r2, [pc, #340]	; (8000fa4 <MX_GPIO_Init+0x1b8>)
 8000e50:	f043 0302 	orr.w	r3, r3, #2
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b53      	ldr	r3, [pc, #332]	; (8000fa4 <MX_GPIO_Init+0x1b8>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e62:	4b50      	ldr	r3, [pc, #320]	; (8000fa4 <MX_GPIO_Init+0x1b8>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a4f      	ldr	r2, [pc, #316]	; (8000fa4 <MX_GPIO_Init+0x1b8>)
 8000e68:	f043 0310 	orr.w	r3, r3, #16
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b4d      	ldr	r3, [pc, #308]	; (8000fa4 <MX_GPIO_Init+0x1b8>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0310 	and.w	r3, r3, #16
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e7a:	4b4a      	ldr	r3, [pc, #296]	; (8000fa4 <MX_GPIO_Init+0x1b8>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a49      	ldr	r2, [pc, #292]	; (8000fa4 <MX_GPIO_Init+0x1b8>)
 8000e80:	f043 0308 	orr.w	r3, r3, #8
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b47      	ldr	r3, [pc, #284]	; (8000fa4 <MX_GPIO_Init+0x1b8>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0308 	and.w	r3, r3, #8
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_R_GPIO_Port, ENABLE_R_Pin, GPIO_PIN_RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2104      	movs	r1, #4
 8000e96:	4844      	ldr	r0, [pc, #272]	; (8000fa8 <MX_GPIO_Init+0x1bc>)
 8000e98:	f002 fc8a 	bl	80037b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_B_Pin|LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2170      	movs	r1, #112	; 0x70
 8000ea0:	4842      	ldr	r0, [pc, #264]	; (8000fac <MX_GPIO_Init+0x1c0>)
 8000ea2:	f002 fc85 	bl	80037b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SC_det_Pin;
 8000ea6:	2310      	movs	r3, #16
 8000ea8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SC_det_GPIO_Port, &GPIO_InitStruct);
 8000eb2:	f107 031c 	add.w	r3, r7, #28
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	483d      	ldr	r0, [pc, #244]	; (8000fb0 <MX_GPIO_Init+0x1c4>)
 8000eba:	f002 facd 	bl	8003458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_R_Pin;
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ENABLE_R_GPIO_Port, &GPIO_InitStruct);
 8000ece:	f107 031c 	add.w	r3, r7, #28
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4834      	ldr	r0, [pc, #208]	; (8000fa8 <MX_GPIO_Init+0x1bc>)
 8000ed6:	f002 fabf 	bl	8003458 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ENABLE_L_Pin|WRN_L_Pin|WRN_R_Pin;
 8000eda:	f24c 0380 	movw	r3, #49280	; 0xc080
 8000ede:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ee8:	f107 031c 	add.w	r3, r7, #28
 8000eec:	4619      	mov	r1, r3
 8000eee:	4831      	ldr	r0, [pc, #196]	; (8000fb4 <MX_GPIO_Init+0x1c8>)
 8000ef0:	f002 fab2 	bl	8003458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIP_R_Pin;
 8000ef4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ef8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000efa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000efe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TRIP_R_GPIO_Port, &GPIO_InitStruct);
 8000f04:	f107 031c 	add.w	r3, r7, #28
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4829      	ldr	r0, [pc, #164]	; (8000fb0 <MX_GPIO_Init+0x1c4>)
 8000f0c:	f002 faa4 	bl	8003458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIP_L_Pin;
 8000f10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f16:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TRIP_L_GPIO_Port, &GPIO_InitStruct);
 8000f20:	f107 031c 	add.w	r3, r7, #28
 8000f24:	4619      	mov	r1, r3
 8000f26:	4824      	ldr	r0, [pc, #144]	; (8000fb8 <MX_GPIO_Init+0x1cc>)
 8000f28:	f002 fa96 	bl	8003458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f32:	2300      	movs	r3, #0
 8000f34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3a:	f107 031c 	add.w	r3, r7, #28
 8000f3e:	4619      	mov	r1, r3
 8000f40:	481d      	ldr	r0, [pc, #116]	; (8000fb8 <MX_GPIO_Init+0x1cc>)
 8000f42:	f002 fa89 	bl	8003458 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000f46:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f54:	2303      	movs	r3, #3
 8000f56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f58:	230a      	movs	r3, #10
 8000f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5c:	f107 031c 	add.w	r3, r7, #28
 8000f60:	4619      	mov	r1, r3
 8000f62:	4815      	ldr	r0, [pc, #84]	; (8000fb8 <MX_GPIO_Init+0x1cc>)
 8000f64:	f002 fa78 	bl	8003458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIR_Pin;
 8000f68:	2308      	movs	r3, #8
 8000f6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	4619      	mov	r1, r3
 8000f7a:	480c      	ldr	r0, [pc, #48]	; (8000fac <MX_GPIO_Init+0x1c0>)
 8000f7c:	f002 fa6c 	bl	8003458 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_B_Pin|LED_G_Pin|LED_R_Pin;
 8000f80:	2370      	movs	r3, #112	; 0x70
 8000f82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f84:	2301      	movs	r3, #1
 8000f86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f90:	f107 031c 	add.w	r3, r7, #28
 8000f94:	4619      	mov	r1, r3
 8000f96:	4805      	ldr	r0, [pc, #20]	; (8000fac <MX_GPIO_Init+0x1c0>)
 8000f98:	f002 fa5e 	bl	8003458 <HAL_GPIO_Init>

}
 8000f9c:	bf00      	nop
 8000f9e:	3730      	adds	r7, #48	; 0x30
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40020400 	.word	0x40020400
 8000fac:	40020c00 	.word	0x40020c00
 8000fb0:	40020800 	.word	0x40020800
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	40020000 	.word	0x40020000

08000fbc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fc0:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <MX_I2C1_Init+0x74>)
 8000fc2:	4a1c      	ldr	r2, [pc, #112]	; (8001034 <MX_I2C1_Init+0x78>)
 8000fc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000fc6:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <MX_I2C1_Init+0x74>)
 8000fc8:	4a1b      	ldr	r2, [pc, #108]	; (8001038 <MX_I2C1_Init+0x7c>)
 8000fca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fcc:	4b18      	ldr	r3, [pc, #96]	; (8001030 <MX_I2C1_Init+0x74>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fd2:	4b17      	ldr	r3, [pc, #92]	; (8001030 <MX_I2C1_Init+0x74>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fd8:	4b15      	ldr	r3, [pc, #84]	; (8001030 <MX_I2C1_Init+0x74>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fde:	4b14      	ldr	r3, [pc, #80]	; (8001030 <MX_I2C1_Init+0x74>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <MX_I2C1_Init+0x74>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fea:	4b11      	ldr	r3, [pc, #68]	; (8001030 <MX_I2C1_Init+0x74>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <MX_I2C1_Init+0x74>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ff6:	480e      	ldr	r0, [pc, #56]	; (8001030 <MX_I2C1_Init+0x74>)
 8000ff8:	f002 fbf4 	bl	80037e4 <HAL_I2C_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001002:	f000 f921 	bl	8001248 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001006:	2100      	movs	r1, #0
 8001008:	4809      	ldr	r0, [pc, #36]	; (8001030 <MX_I2C1_Init+0x74>)
 800100a:	f002 fc7b 	bl	8003904 <HAL_I2CEx_ConfigAnalogFilter>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001014:	f000 f918 	bl	8001248 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001018:	2100      	movs	r1, #0
 800101a:	4805      	ldr	r0, [pc, #20]	; (8001030 <MX_I2C1_Init+0x74>)
 800101c:	f002 fcbd 	bl	800399a <HAL_I2CEx_ConfigDigitalFilter>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001026:	f000 f90f 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200002e4 	.word	0x200002e4
 8001034:	40005400 	.word	0x40005400
 8001038:	20404768 	.word	0x20404768

0800103c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b0ae      	sub	sp, #184	; 0xb8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	2290      	movs	r2, #144	; 0x90
 800105a:	2100      	movs	r1, #0
 800105c:	4618      	mov	r0, r3
 800105e:	f008 f8e5 	bl	800922c <memset>
  if(i2cHandle->Instance==I2C1)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a21      	ldr	r2, [pc, #132]	; (80010ec <HAL_I2C_MspInit+0xb0>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d13b      	bne.n	80010e4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800106c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001070:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001072:	2300      	movs	r3, #0
 8001074:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	4618      	mov	r0, r3
 800107c:	f003 f9dc 	bl	8004438 <HAL_RCCEx_PeriphCLKConfig>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001086:	f000 f8df 	bl	8001248 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800108a:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <HAL_I2C_MspInit+0xb4>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a18      	ldr	r2, [pc, #96]	; (80010f0 <HAL_I2C_MspInit+0xb4>)
 8001090:	f043 0302 	orr.w	r3, r3, #2
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <HAL_I2C_MspInit+0xb4>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010a2:	23c0      	movs	r3, #192	; 0xc0
 80010a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010a8:	2312      	movs	r3, #18
 80010aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b4:	2303      	movs	r3, #3
 80010b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010ba:	2304      	movs	r3, #4
 80010bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010c4:	4619      	mov	r1, r3
 80010c6:	480b      	ldr	r0, [pc, #44]	; (80010f4 <HAL_I2C_MspInit+0xb8>)
 80010c8:	f002 f9c6 	bl	8003458 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <HAL_I2C_MspInit+0xb4>)
 80010ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d0:	4a07      	ldr	r2, [pc, #28]	; (80010f0 <HAL_I2C_MspInit+0xb4>)
 80010d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010d6:	6413      	str	r3, [r2, #64]	; 0x40
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <HAL_I2C_MspInit+0xb4>)
 80010da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010e4:	bf00      	nop
 80010e6:	37b8      	adds	r7, #184	; 0xb8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40005400 	.word	0x40005400
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40020400 	.word	0x40020400

080010f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010fc:	f000 fdd3 	bl	8001ca6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001100:	f000 f822 	bl	8001148 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001104:	f7ff fe72 	bl	8000dec <MX_GPIO_Init>
  MX_DMA_Init();
 8001108:	f7ff fd8e 	bl	8000c28 <MX_DMA_Init>
  MX_ADC1_Init();
 800110c:	f7ff fa16 	bl	800053c <MX_ADC1_Init>
  MX_CAN1_Init();
 8001110:	f7ff fc8e 	bl	8000a30 <MX_CAN1_Init>
  MX_USB_OTG_FS_USB_Init();
 8001114:	f000 fd96 	bl	8001c44 <MX_USB_OTG_FS_USB_Init>
  MX_ADC2_Init();
 8001118:	f7ff fa7e 	bl	8000618 <MX_ADC2_Init>
  MX_ADC3_Init();
 800111c:	f7ff face 	bl	80006bc <MX_ADC3_Init>
  MX_DAC_Init();
 8001120:	f7ff fd10 	bl	8000b44 <MX_DAC_Init>
  MX_I2C1_Init();
 8001124:	f7ff ff4a 	bl	8000fbc <MX_I2C1_Init>
  MX_TIM1_Init();
 8001128:	f000 f9b8 	bl	800149c <MX_TIM1_Init>
  MX_TIM8_Init();
 800112c:	f000 fb58 	bl	80017e0 <MX_TIM8_Init>
  MX_TIM2_Init();
 8001130:	f000 fa82 	bl	8001638 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001134:	f000 faea 	bl	800170c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001138:	f005 f9be 	bl	80064b8 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800113c:	f7ff fda2 	bl	8000c84 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001140:	f005 f9ee 	bl	8006520 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001144:	e7fe      	b.n	8001144 <main+0x4c>
	...

08001148 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b094      	sub	sp, #80	; 0x50
 800114c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	2234      	movs	r2, #52	; 0x34
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f008 f868 	bl	800922c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800115c:	f107 0308 	add.w	r3, r7, #8
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800116c:	4b2b      	ldr	r3, [pc, #172]	; (800121c <SystemClock_Config+0xd4>)
 800116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001170:	4a2a      	ldr	r2, [pc, #168]	; (800121c <SystemClock_Config+0xd4>)
 8001172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001176:	6413      	str	r3, [r2, #64]	; 0x40
 8001178:	4b28      	ldr	r3, [pc, #160]	; (800121c <SystemClock_Config+0xd4>)
 800117a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001184:	4b26      	ldr	r3, [pc, #152]	; (8001220 <SystemClock_Config+0xd8>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a25      	ldr	r2, [pc, #148]	; (8001220 <SystemClock_Config+0xd8>)
 800118a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	4b23      	ldr	r3, [pc, #140]	; (8001220 <SystemClock_Config+0xd8>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001198:	603b      	str	r3, [r7, #0]
 800119a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800119c:	2301      	movs	r3, #1
 800119e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a6:	2302      	movs	r3, #2
 80011a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 10;
 80011b0:	230a      	movs	r3, #10
 80011b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80011b4:	23d8      	movs	r3, #216	; 0xd8
 80011b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011b8:	2302      	movs	r3, #2
 80011ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80011bc:	2309      	movs	r3, #9
 80011be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011c0:	2302      	movs	r3, #2
 80011c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c4:	f107 031c 	add.w	r3, r7, #28
 80011c8:	4618      	mov	r0, r3
 80011ca:	f002 fc83 	bl	8003ad4 <HAL_RCC_OscConfig>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80011d4:	f000 f838 	bl	8001248 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011d8:	f002 fc2c 	bl	8003a34 <HAL_PWREx_EnableOverDrive>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80011e2:	f000 f831 	bl	8001248 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e6:	230f      	movs	r3, #15
 80011e8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ea:	2302      	movs	r3, #2
 80011ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011fc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80011fe:	f107 0308 	add.w	r3, r7, #8
 8001202:	2107      	movs	r1, #7
 8001204:	4618      	mov	r0, r3
 8001206:	f002 ff13 	bl	8004030 <HAL_RCC_ClockConfig>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001210:	f000 f81a 	bl	8001248 <Error_Handler>
  }
}
 8001214:	bf00      	nop
 8001216:	3750      	adds	r7, #80	; 0x50
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40023800 	.word	0x40023800
 8001220:	40007000 	.word	0x40007000

08001224 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a04      	ldr	r2, [pc, #16]	; (8001244 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d101      	bne.n	800123a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001236:	f000 fd43 	bl	8001cc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40001400 	.word	0x40001400

08001248 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800124c:	b672      	cpsid	i
}
 800124e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001250:	e7fe      	b.n	8001250 <Error_Handler+0x8>
	...

08001254 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800125a:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <HAL_MspInit+0x4c>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	4a10      	ldr	r2, [pc, #64]	; (80012a0 <HAL_MspInit+0x4c>)
 8001260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001264:	6413      	str	r3, [r2, #64]	; 0x40
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <HAL_MspInit+0x4c>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001272:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <HAL_MspInit+0x4c>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	4a0a      	ldr	r2, [pc, #40]	; (80012a0 <HAL_MspInit+0x4c>)
 8001278:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800127c:	6453      	str	r3, [r2, #68]	; 0x44
 800127e:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <HAL_MspInit+0x4c>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	210f      	movs	r1, #15
 800128e:	f06f 0001 	mvn.w	r0, #1
 8001292:	f001 fced 	bl	8002c70 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40023800 	.word	0x40023800

080012a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08e      	sub	sp, #56	; 0x38
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80012ac:	2300      	movs	r3, #0
 80012ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80012b0:	2300      	movs	r3, #0
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80012b4:	4b33      	ldr	r3, [pc, #204]	; (8001384 <HAL_InitTick+0xe0>)
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	4a32      	ldr	r2, [pc, #200]	; (8001384 <HAL_InitTick+0xe0>)
 80012ba:	f043 0320 	orr.w	r3, r3, #32
 80012be:	6413      	str	r3, [r2, #64]	; 0x40
 80012c0:	4b30      	ldr	r3, [pc, #192]	; (8001384 <HAL_InitTick+0xe0>)
 80012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c4:	f003 0320 	and.w	r3, r3, #32
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012cc:	f107 0210 	add.w	r2, r7, #16
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	4611      	mov	r1, r2
 80012d6:	4618      	mov	r0, r3
 80012d8:	f003 f87c 	bl	80043d4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80012dc:	6a3b      	ldr	r3, [r7, #32]
 80012de:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80012e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d103      	bne.n	80012ee <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80012e6:	f003 f861 	bl	80043ac <HAL_RCC_GetPCLK1Freq>
 80012ea:	6378      	str	r0, [r7, #52]	; 0x34
 80012ec:	e004      	b.n	80012f8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80012ee:	f003 f85d 	bl	80043ac <HAL_RCC_GetPCLK1Freq>
 80012f2:	4603      	mov	r3, r0
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012fa:	4a23      	ldr	r2, [pc, #140]	; (8001388 <HAL_InitTick+0xe4>)
 80012fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001300:	0c9b      	lsrs	r3, r3, #18
 8001302:	3b01      	subs	r3, #1
 8001304:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001306:	4b21      	ldr	r3, [pc, #132]	; (800138c <HAL_InitTick+0xe8>)
 8001308:	4a21      	ldr	r2, [pc, #132]	; (8001390 <HAL_InitTick+0xec>)
 800130a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800130c:	4b1f      	ldr	r3, [pc, #124]	; (800138c <HAL_InitTick+0xe8>)
 800130e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001312:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001314:	4a1d      	ldr	r2, [pc, #116]	; (800138c <HAL_InitTick+0xe8>)
 8001316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001318:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800131a:	4b1c      	ldr	r3, [pc, #112]	; (800138c <HAL_InitTick+0xe8>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001320:	4b1a      	ldr	r3, [pc, #104]	; (800138c <HAL_InitTick+0xe8>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001326:	4b19      	ldr	r3, [pc, #100]	; (800138c <HAL_InitTick+0xe8>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 800132c:	4817      	ldr	r0, [pc, #92]	; (800138c <HAL_InitTick+0xe8>)
 800132e:	f003 fcab 	bl	8004c88 <HAL_TIM_Base_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001338:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800133c:	2b00      	cmp	r3, #0
 800133e:	d11b      	bne.n	8001378 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001340:	4812      	ldr	r0, [pc, #72]	; (800138c <HAL_InitTick+0xe8>)
 8001342:	f003 fcf9 	bl	8004d38 <HAL_TIM_Base_Start_IT>
 8001346:	4603      	mov	r3, r0
 8001348:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800134c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001350:	2b00      	cmp	r3, #0
 8001352:	d111      	bne.n	8001378 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001354:	2037      	movs	r0, #55	; 0x37
 8001356:	f001 fca7 	bl	8002ca8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2b0f      	cmp	r3, #15
 800135e:	d808      	bhi.n	8001372 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001360:	2200      	movs	r2, #0
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	2037      	movs	r0, #55	; 0x37
 8001366:	f001 fc83 	bl	8002c70 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800136a:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <HAL_InitTick+0xf0>)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6013      	str	r3, [r2, #0]
 8001370:	e002      	b.n	8001378 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001378:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800137c:	4618      	mov	r0, r3
 800137e:	3738      	adds	r7, #56	; 0x38
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40023800 	.word	0x40023800
 8001388:	431bde83 	.word	0x431bde83
 800138c:	20000338 	.word	0x20000338
 8001390:	40001400 	.word	0x40001400
 8001394:	20000004 	.word	0x20000004

08001398 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800139c:	e7fe      	b.n	800139c <NMI_Handler+0x4>

0800139e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a2:	e7fe      	b.n	80013a2 <HardFault_Handler+0x4>

080013a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <MemManage_Handler+0x4>

080013aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ae:	e7fe      	b.n	80013ae <BusFault_Handler+0x4>

080013b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <UsageFault_Handler+0x4>

080013b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80013c8:	4805      	ldr	r0, [pc, #20]	; (80013e0 <ADC_IRQHandler+0x1c>)
 80013ca:	f000 fcdd 	bl	8001d88 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80013ce:	4805      	ldr	r0, [pc, #20]	; (80013e4 <ADC_IRQHandler+0x20>)
 80013d0:	f000 fcda 	bl	8001d88 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 80013d4:	4804      	ldr	r0, [pc, #16]	; (80013e8 <ADC_IRQHandler+0x24>)
 80013d6:	f000 fcd7 	bl	8001d88 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	2000007c 	.word	0x2000007c
 80013e4:	200000c4 	.word	0x200000c4
 80013e8:	2000010c 	.word	0x2000010c

080013ec <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80013f0:	4802      	ldr	r0, [pc, #8]	; (80013fc <CAN1_RX0_IRQHandler+0x10>)
 80013f2:	f001 f94c 	bl	800268e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000274 	.word	0x20000274

08001400 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001404:	4802      	ldr	r0, [pc, #8]	; (8001410 <CAN1_RX1_IRQHandler+0x10>)
 8001406:	f001 f942 	bl	800268e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000274 	.word	0x20000274

08001414 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001418:	4802      	ldr	r0, [pc, #8]	; (8001424 <TIM6_DAC_IRQHandler+0x10>)
 800141a:	f001 fc75 	bl	8002d08 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	2000029c 	.word	0x2000029c

08001428 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800142c:	4802      	ldr	r0, [pc, #8]	; (8001438 <TIM7_IRQHandler+0x10>)
 800142e:	f003 fe14 	bl	800505a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000338 	.word	0x20000338

0800143c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001440:	4802      	ldr	r0, [pc, #8]	; (800144c <DMA2_Stream0_IRQHandler+0x10>)
 8001442:	f001 fdcd 	bl	8002fe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000154 	.word	0x20000154

08001450 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001454:	4802      	ldr	r0, [pc, #8]	; (8001460 <DMA2_Stream1_IRQHandler+0x10>)
 8001456:	f001 fdc3 	bl	8002fe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000214 	.word	0x20000214

08001464 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001468:	4802      	ldr	r0, [pc, #8]	; (8001474 <DMA2_Stream2_IRQHandler+0x10>)
 800146a:	f001 fdb9 	bl	8002fe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	200001b4 	.word	0x200001b4

08001478 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <SystemInit+0x20>)
 800147e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001482:	4a05      	ldr	r2, [pc, #20]	; (8001498 <SystemInit+0x20>)
 8001484:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001488:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b09a      	sub	sp, #104	; 0x68
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
 80014cc:	615a      	str	r2, [r3, #20]
 80014ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	222c      	movs	r2, #44	; 0x2c
 80014d4:	2100      	movs	r1, #0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f007 fea8 	bl	800922c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014dc:	4b54      	ldr	r3, [pc, #336]	; (8001630 <MX_TIM1_Init+0x194>)
 80014de:	4a55      	ldr	r2, [pc, #340]	; (8001634 <MX_TIM1_Init+0x198>)
 80014e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014e2:	4b53      	ldr	r3, [pc, #332]	; (8001630 <MX_TIM1_Init+0x194>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e8:	4b51      	ldr	r3, [pc, #324]	; (8001630 <MX_TIM1_Init+0x194>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80014ee:	4b50      	ldr	r3, [pc, #320]	; (8001630 <MX_TIM1_Init+0x194>)
 80014f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f6:	4b4e      	ldr	r3, [pc, #312]	; (8001630 <MX_TIM1_Init+0x194>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014fc:	4b4c      	ldr	r3, [pc, #304]	; (8001630 <MX_TIM1_Init+0x194>)
 80014fe:	2200      	movs	r2, #0
 8001500:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001502:	4b4b      	ldr	r3, [pc, #300]	; (8001630 <MX_TIM1_Init+0x194>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001508:	4849      	ldr	r0, [pc, #292]	; (8001630 <MX_TIM1_Init+0x194>)
 800150a:	f003 fbbd 	bl	8004c88 <HAL_TIM_Base_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001514:	f7ff fe98 	bl	8001248 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800151c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800151e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001522:	4619      	mov	r1, r3
 8001524:	4842      	ldr	r0, [pc, #264]	; (8001630 <MX_TIM1_Init+0x194>)
 8001526:	f004 f8e1 	bl	80056ec <HAL_TIM_ConfigClockSource>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001530:	f7ff fe8a 	bl	8001248 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001534:	483e      	ldr	r0, [pc, #248]	; (8001630 <MX_TIM1_Init+0x194>)
 8001536:	f003 fcd8 	bl	8004eea <HAL_TIM_PWM_Init>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001540:	f7ff fe82 	bl	8001248 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001544:	483a      	ldr	r0, [pc, #232]	; (8001630 <MX_TIM1_Init+0x194>)
 8001546:	f003 fc6f 	bl	8004e28 <HAL_TIM_OC_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8001550:	f7ff fe7a 	bl	8001248 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001554:	2300      	movs	r3, #0
 8001556:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001558:	2300      	movs	r3, #0
 800155a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800155c:	2300      	movs	r3, #0
 800155e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001560:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001564:	4619      	mov	r1, r3
 8001566:	4832      	ldr	r0, [pc, #200]	; (8001630 <MX_TIM1_Init+0x194>)
 8001568:	f004 fe74 	bl	8006254 <HAL_TIMEx_MasterConfigSynchronization>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8001572:	f7ff fe69 	bl	8001248 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001576:	2360      	movs	r3, #96	; 0x60
 8001578:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800157e:	2300      	movs	r3, #0
 8001580:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001582:	2300      	movs	r3, #0
 8001584:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001586:	2300      	movs	r3, #0
 8001588:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800158a:	2300      	movs	r3, #0
 800158c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800158e:	2300      	movs	r3, #0
 8001590:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001592:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001596:	2200      	movs	r2, #0
 8001598:	4619      	mov	r1, r3
 800159a:	4825      	ldr	r0, [pc, #148]	; (8001630 <MX_TIM1_Init+0x194>)
 800159c:	f003 ff92 	bl	80054c4 <HAL_TIM_PWM_ConfigChannel>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80015a6:	f7ff fe4f 	bl	8001248 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80015aa:	2300      	movs	r3, #0
 80015ac:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015b2:	2204      	movs	r2, #4
 80015b4:	4619      	mov	r1, r3
 80015b6:	481e      	ldr	r0, [pc, #120]	; (8001630 <MX_TIM1_Init+0x194>)
 80015b8:	f003 fe6e 	bl	8005298 <HAL_TIM_OC_ConfigChannel>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80015c2:	f7ff fe41 	bl	8001248 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015ca:	2208      	movs	r2, #8
 80015cc:	4619      	mov	r1, r3
 80015ce:	4818      	ldr	r0, [pc, #96]	; (8001630 <MX_TIM1_Init+0x194>)
 80015d0:	f003 fe62 	bl	8005298 <HAL_TIM_OC_ConfigChannel>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80015da:	f7ff fe35 	bl	8001248 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015de:	2300      	movs	r3, #0
 80015e0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015f6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001600:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800160a:	2300      	movs	r3, #0
 800160c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	4619      	mov	r1, r3
 8001612:	4807      	ldr	r0, [pc, #28]	; (8001630 <MX_TIM1_Init+0x194>)
 8001614:	f004 feac 	bl	8006370 <HAL_TIMEx_ConfigBreakDeadTime>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_TIM1_Init+0x186>
  {
    Error_Handler();
 800161e:	f7ff fe13 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001622:	4803      	ldr	r0, [pc, #12]	; (8001630 <MX_TIM1_Init+0x194>)
 8001624:	f000 fa72 	bl	8001b0c <HAL_TIM_MspPostInit>

}
 8001628:	bf00      	nop
 800162a:	3768      	adds	r7, #104	; 0x68
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000384 	.word	0x20000384
 8001634:	40010000 	.word	0x40010000

08001638 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b088      	sub	sp, #32
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001656:	4b2c      	ldr	r3, [pc, #176]	; (8001708 <MX_TIM2_Init+0xd0>)
 8001658:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800165c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800165e:	4b2a      	ldr	r3, [pc, #168]	; (8001708 <MX_TIM2_Init+0xd0>)
 8001660:	2200      	movs	r2, #0
 8001662:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001664:	4b28      	ldr	r3, [pc, #160]	; (8001708 <MX_TIM2_Init+0xd0>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800166a:	4b27      	ldr	r3, [pc, #156]	; (8001708 <MX_TIM2_Init+0xd0>)
 800166c:	f04f 32ff 	mov.w	r2, #4294967295
 8001670:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001672:	4b25      	ldr	r3, [pc, #148]	; (8001708 <MX_TIM2_Init+0xd0>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001678:	4b23      	ldr	r3, [pc, #140]	; (8001708 <MX_TIM2_Init+0xd0>)
 800167a:	2200      	movs	r2, #0
 800167c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800167e:	4822      	ldr	r0, [pc, #136]	; (8001708 <MX_TIM2_Init+0xd0>)
 8001680:	f003 fc94 	bl	8004fac <HAL_TIM_IC_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800168a:	f7ff fddd 	bl	8001248 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001692:	2300      	movs	r3, #0
 8001694:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001696:	f107 0314 	add.w	r3, r7, #20
 800169a:	4619      	mov	r1, r3
 800169c:	481a      	ldr	r0, [pc, #104]	; (8001708 <MX_TIM2_Init+0xd0>)
 800169e:	f004 fdd9 	bl	8006254 <HAL_TIMEx_MasterConfigSynchronization>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80016a8:	f7ff fdce 	bl	8001248 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80016ac:	2300      	movs	r3, #0
 80016ae:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80016b0:	2301      	movs	r3, #1
 80016b2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	2200      	movs	r2, #0
 80016c0:	4619      	mov	r1, r3
 80016c2:	4811      	ldr	r0, [pc, #68]	; (8001708 <MX_TIM2_Init+0xd0>)
 80016c4:	f003 fe62 	bl	800538c <HAL_TIM_IC_ConfigChannel>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80016ce:	f7ff fdbb 	bl	8001248 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	2208      	movs	r2, #8
 80016d6:	4619      	mov	r1, r3
 80016d8:	480b      	ldr	r0, [pc, #44]	; (8001708 <MX_TIM2_Init+0xd0>)
 80016da:	f003 fe57 	bl	800538c <HAL_TIM_IC_ConfigChannel>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80016e4:	f7ff fdb0 	bl	8001248 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80016e8:	1d3b      	adds	r3, r7, #4
 80016ea:	220c      	movs	r2, #12
 80016ec:	4619      	mov	r1, r3
 80016ee:	4806      	ldr	r0, [pc, #24]	; (8001708 <MX_TIM2_Init+0xd0>)
 80016f0:	f003 fe4c 	bl	800538c <HAL_TIM_IC_ConfigChannel>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 80016fa:	f7ff fda5 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016fe:	bf00      	nop
 8001700:	3720      	adds	r7, #32
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200003d0 	.word	0x200003d0

0800170c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800172a:	4b2b      	ldr	r3, [pc, #172]	; (80017d8 <MX_TIM4_Init+0xcc>)
 800172c:	4a2b      	ldr	r2, [pc, #172]	; (80017dc <MX_TIM4_Init+0xd0>)
 800172e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001730:	4b29      	ldr	r3, [pc, #164]	; (80017d8 <MX_TIM4_Init+0xcc>)
 8001732:	2200      	movs	r2, #0
 8001734:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001736:	4b28      	ldr	r3, [pc, #160]	; (80017d8 <MX_TIM4_Init+0xcc>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800173c:	4b26      	ldr	r3, [pc, #152]	; (80017d8 <MX_TIM4_Init+0xcc>)
 800173e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001742:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001744:	4b24      	ldr	r3, [pc, #144]	; (80017d8 <MX_TIM4_Init+0xcc>)
 8001746:	2200      	movs	r2, #0
 8001748:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174a:	4b23      	ldr	r3, [pc, #140]	; (80017d8 <MX_TIM4_Init+0xcc>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001750:	4821      	ldr	r0, [pc, #132]	; (80017d8 <MX_TIM4_Init+0xcc>)
 8001752:	f003 fc2b 	bl	8004fac <HAL_TIM_IC_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800175c:	f7ff fd74 	bl	8001248 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	4619      	mov	r1, r3
 800176e:	481a      	ldr	r0, [pc, #104]	; (80017d8 <MX_TIM4_Init+0xcc>)
 8001770:	f004 fd70 	bl	8006254 <HAL_TIMEx_MasterConfigSynchronization>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 800177a:	f7ff fd65 	bl	8001248 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800177e:	2300      	movs	r3, #0
 8001780:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001782:	2301      	movs	r3, #1
 8001784:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	2200      	movs	r2, #0
 8001792:	4619      	mov	r1, r3
 8001794:	4810      	ldr	r0, [pc, #64]	; (80017d8 <MX_TIM4_Init+0xcc>)
 8001796:	f003 fdf9 	bl	800538c <HAL_TIM_IC_ConfigChannel>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80017a0:	f7ff fd52 	bl	8001248 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	2208      	movs	r2, #8
 80017a8:	4619      	mov	r1, r3
 80017aa:	480b      	ldr	r0, [pc, #44]	; (80017d8 <MX_TIM4_Init+0xcc>)
 80017ac:	f003 fdee 	bl	800538c <HAL_TIM_IC_ConfigChannel>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80017b6:	f7ff fd47 	bl	8001248 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	220c      	movs	r2, #12
 80017be:	4619      	mov	r1, r3
 80017c0:	4805      	ldr	r0, [pc, #20]	; (80017d8 <MX_TIM4_Init+0xcc>)
 80017c2:	f003 fde3 	bl	800538c <HAL_TIM_IC_ConfigChannel>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM4_Init+0xc4>
  {
    Error_Handler();
 80017cc:	f7ff fd3c 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80017d0:	bf00      	nop
 80017d2:	3720      	adds	r7, #32
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	2000041c 	.word	0x2000041c
 80017dc:	40000800 	.word	0x40000800

080017e0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b09a      	sub	sp, #104	; 0x68
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001800:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
 8001810:	615a      	str	r2, [r3, #20]
 8001812:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001814:	1d3b      	adds	r3, r7, #4
 8001816:	222c      	movs	r2, #44	; 0x2c
 8001818:	2100      	movs	r1, #0
 800181a:	4618      	mov	r0, r3
 800181c:	f007 fd06 	bl	800922c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001820:	4b54      	ldr	r3, [pc, #336]	; (8001974 <MX_TIM8_Init+0x194>)
 8001822:	4a55      	ldr	r2, [pc, #340]	; (8001978 <MX_TIM8_Init+0x198>)
 8001824:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001826:	4b53      	ldr	r3, [pc, #332]	; (8001974 <MX_TIM8_Init+0x194>)
 8001828:	2200      	movs	r2, #0
 800182a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800182c:	4b51      	ldr	r3, [pc, #324]	; (8001974 <MX_TIM8_Init+0x194>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001832:	4b50      	ldr	r3, [pc, #320]	; (8001974 <MX_TIM8_Init+0x194>)
 8001834:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001838:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800183a:	4b4e      	ldr	r3, [pc, #312]	; (8001974 <MX_TIM8_Init+0x194>)
 800183c:	2200      	movs	r2, #0
 800183e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001840:	4b4c      	ldr	r3, [pc, #304]	; (8001974 <MX_TIM8_Init+0x194>)
 8001842:	2200      	movs	r2, #0
 8001844:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001846:	4b4b      	ldr	r3, [pc, #300]	; (8001974 <MX_TIM8_Init+0x194>)
 8001848:	2200      	movs	r2, #0
 800184a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800184c:	4849      	ldr	r0, [pc, #292]	; (8001974 <MX_TIM8_Init+0x194>)
 800184e:	f003 fa1b 	bl	8004c88 <HAL_TIM_Base_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001858:	f7ff fcf6 	bl	8001248 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800185c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001860:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001862:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001866:	4619      	mov	r1, r3
 8001868:	4842      	ldr	r0, [pc, #264]	; (8001974 <MX_TIM8_Init+0x194>)
 800186a:	f003 ff3f 	bl	80056ec <HAL_TIM_ConfigClockSource>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001874:	f7ff fce8 	bl	8001248 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001878:	483e      	ldr	r0, [pc, #248]	; (8001974 <MX_TIM8_Init+0x194>)
 800187a:	f003 fb36 	bl	8004eea <HAL_TIM_PWM_Init>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001884:	f7ff fce0 	bl	8001248 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8001888:	483a      	ldr	r0, [pc, #232]	; (8001974 <MX_TIM8_Init+0x194>)
 800188a:	f003 facd 	bl	8004e28 <HAL_TIM_OC_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM8_Init+0xb8>
  {
    Error_Handler();
 8001894:	f7ff fcd8 	bl	8001248 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001898:	2300      	movs	r3, #0
 800189a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800189c:	2300      	movs	r3, #0
 800189e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a0:	2300      	movs	r3, #0
 80018a2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80018a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018a8:	4619      	mov	r1, r3
 80018aa:	4832      	ldr	r0, [pc, #200]	; (8001974 <MX_TIM8_Init+0x194>)
 80018ac:	f004 fcd2 	bl	8006254 <HAL_TIMEx_MasterConfigSynchronization>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_TIM8_Init+0xda>
  {
    Error_Handler();
 80018b6:	f7ff fcc7 	bl	8001248 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018ba:	2360      	movs	r3, #96	; 0x60
 80018bc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018c2:	2300      	movs	r3, #0
 80018c4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018c6:	2300      	movs	r3, #0
 80018c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018ca:	2300      	movs	r3, #0
 80018cc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018ce:	2300      	movs	r3, #0
 80018d0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018d2:	2300      	movs	r3, #0
 80018d4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018da:	2200      	movs	r2, #0
 80018dc:	4619      	mov	r1, r3
 80018de:	4825      	ldr	r0, [pc, #148]	; (8001974 <MX_TIM8_Init+0x194>)
 80018e0:	f003 fdf0 	bl	80054c4 <HAL_TIM_PWM_ConfigChannel>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 80018ea:	f7ff fcad 	bl	8001248 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018f2:	2204      	movs	r2, #4
 80018f4:	4619      	mov	r1, r3
 80018f6:	481f      	ldr	r0, [pc, #124]	; (8001974 <MX_TIM8_Init+0x194>)
 80018f8:	f003 fde4 	bl	80054c4 <HAL_TIM_PWM_ConfigChannel>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 8001902:	f7ff fca1 	bl	8001248 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001906:	2300      	movs	r3, #0
 8001908:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800190a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800190e:	2208      	movs	r2, #8
 8001910:	4619      	mov	r1, r3
 8001912:	4818      	ldr	r0, [pc, #96]	; (8001974 <MX_TIM8_Init+0x194>)
 8001914:	f003 fcc0 	bl	8005298 <HAL_TIM_OC_ConfigChannel>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 800191e:	f7ff fc93 	bl	8001248 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001922:	2300      	movs	r3, #0
 8001924:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001926:	2300      	movs	r3, #0
 8001928:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001932:	2300      	movs	r3, #0
 8001934:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001936:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800193a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001940:	2300      	movs	r3, #0
 8001942:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001944:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800194a:	2300      	movs	r3, #0
 800194c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800194e:	2300      	movs	r3, #0
 8001950:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001952:	1d3b      	adds	r3, r7, #4
 8001954:	4619      	mov	r1, r3
 8001956:	4807      	ldr	r0, [pc, #28]	; (8001974 <MX_TIM8_Init+0x194>)
 8001958:	f004 fd0a 	bl	8006370 <HAL_TIMEx_ConfigBreakDeadTime>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM8_Init+0x186>
  {
    Error_Handler();
 8001962:	f7ff fc71 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001966:	4803      	ldr	r0, [pc, #12]	; (8001974 <MX_TIM8_Init+0x194>)
 8001968:	f000 f8d0 	bl	8001b0c <HAL_TIM_MspPostInit>

}
 800196c:	bf00      	nop
 800196e:	3768      	adds	r7, #104	; 0x68
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20000468 	.word	0x20000468
 8001978:	40010400 	.word	0x40010400

0800197c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a13      	ldr	r2, [pc, #76]	; (80019d8 <HAL_TIM_Base_MspInit+0x5c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d10c      	bne.n	80019a8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800198e:	4b13      	ldr	r3, [pc, #76]	; (80019dc <HAL_TIM_Base_MspInit+0x60>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001992:	4a12      	ldr	r2, [pc, #72]	; (80019dc <HAL_TIM_Base_MspInit+0x60>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	6453      	str	r3, [r2, #68]	; 0x44
 800199a:	4b10      	ldr	r3, [pc, #64]	; (80019dc <HAL_TIM_Base_MspInit+0x60>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80019a6:	e010      	b.n	80019ca <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM8)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a0c      	ldr	r2, [pc, #48]	; (80019e0 <HAL_TIM_Base_MspInit+0x64>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d10b      	bne.n	80019ca <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80019b2:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <HAL_TIM_Base_MspInit+0x60>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	4a09      	ldr	r2, [pc, #36]	; (80019dc <HAL_TIM_Base_MspInit+0x60>)
 80019b8:	f043 0302 	orr.w	r3, r3, #2
 80019bc:	6453      	str	r3, [r2, #68]	; 0x44
 80019be:	4b07      	ldr	r3, [pc, #28]	; (80019dc <HAL_TIM_Base_MspInit+0x60>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	68bb      	ldr	r3, [r7, #8]
}
 80019ca:	bf00      	nop
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	40010000 	.word	0x40010000
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40010400 	.word	0x40010400

080019e4 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08c      	sub	sp, #48	; 0x30
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ec:	f107 031c 	add.w	r3, r7, #28
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a04:	d146      	bne.n	8001a94 <HAL_TIM_IC_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a06:	4b3c      	ldr	r3, [pc, #240]	; (8001af8 <HAL_TIM_IC_MspInit+0x114>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	4a3b      	ldr	r2, [pc, #236]	; (8001af8 <HAL_TIM_IC_MspInit+0x114>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	6413      	str	r3, [r2, #64]	; 0x40
 8001a12:	4b39      	ldr	r3, [pc, #228]	; (8001af8 <HAL_TIM_IC_MspInit+0x114>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	61bb      	str	r3, [r7, #24]
 8001a1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1e:	4b36      	ldr	r3, [pc, #216]	; (8001af8 <HAL_TIM_IC_MspInit+0x114>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	4a35      	ldr	r2, [pc, #212]	; (8001af8 <HAL_TIM_IC_MspInit+0x114>)
 8001a24:	f043 0302 	orr.w	r3, r3, #2
 8001a28:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2a:	4b33      	ldr	r3, [pc, #204]	; (8001af8 <HAL_TIM_IC_MspInit+0x114>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a36:	4b30      	ldr	r3, [pc, #192]	; (8001af8 <HAL_TIM_IC_MspInit+0x114>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	4a2f      	ldr	r2, [pc, #188]	; (8001af8 <HAL_TIM_IC_MspInit+0x114>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	6313      	str	r3, [r2, #48]	; 0x30
 8001a42:	4b2d      	ldr	r3, [pc, #180]	; (8001af8 <HAL_TIM_IC_MspInit+0x114>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	613b      	str	r3, [r7, #16]
 8001a4c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = B_R_Pin|Z_R_Pin;
 8001a4e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a54:	2302      	movs	r3, #2
 8001a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a60:	2301      	movs	r3, #1
 8001a62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a64:	f107 031c 	add.w	r3, r7, #28
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4824      	ldr	r0, [pc, #144]	; (8001afc <HAL_TIM_IC_MspInit+0x118>)
 8001a6c:	f001 fcf4 	bl	8003458 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A_R_Pin;
 8001a70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a76:	2302      	movs	r3, #2
 8001a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a82:	2301      	movs	r3, #1
 8001a84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(A_R_GPIO_Port, &GPIO_InitStruct);
 8001a86:	f107 031c 	add.w	r3, r7, #28
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	481c      	ldr	r0, [pc, #112]	; (8001b00 <HAL_TIM_IC_MspInit+0x11c>)
 8001a8e:	f001 fce3 	bl	8003458 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001a92:	e02d      	b.n	8001af0 <HAL_TIM_IC_MspInit+0x10c>
  else if(tim_icHandle->Instance==TIM4)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a1a      	ldr	r2, [pc, #104]	; (8001b04 <HAL_TIM_IC_MspInit+0x120>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d128      	bne.n	8001af0 <HAL_TIM_IC_MspInit+0x10c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a9e:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <HAL_TIM_IC_MspInit+0x114>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	4a15      	ldr	r2, [pc, #84]	; (8001af8 <HAL_TIM_IC_MspInit+0x114>)
 8001aa4:	f043 0304 	orr.w	r3, r3, #4
 8001aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aaa:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <HAL_TIM_IC_MspInit+0x114>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	f003 0304 	and.w	r3, r3, #4
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ab6:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <HAL_TIM_IC_MspInit+0x114>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	4a0f      	ldr	r2, [pc, #60]	; (8001af8 <HAL_TIM_IC_MspInit+0x114>)
 8001abc:	f043 0308 	orr.w	r3, r3, #8
 8001ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac2:	4b0d      	ldr	r3, [pc, #52]	; (8001af8 <HAL_TIM_IC_MspInit+0x114>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	f003 0308 	and.w	r3, r3, #8
 8001aca:	60bb      	str	r3, [r7, #8]
 8001acc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = A_L_Pin|B_L_Pin|Z_L_Pin;
 8001ace:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8001ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001adc:	2300      	movs	r3, #0
 8001ade:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ae4:	f107 031c 	add.w	r3, r7, #28
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4807      	ldr	r0, [pc, #28]	; (8001b08 <HAL_TIM_IC_MspInit+0x124>)
 8001aec:	f001 fcb4 	bl	8003458 <HAL_GPIO_Init>
}
 8001af0:	bf00      	nop
 8001af2:	3730      	adds	r7, #48	; 0x30
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40020400 	.word	0x40020400
 8001b00:	40020000 	.word	0x40020000
 8001b04:	40000800 	.word	0x40000800
 8001b08:	40020c00 	.word	0x40020c00

08001b0c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08c      	sub	sp, #48	; 0x30
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b14:	f107 031c 	add.w	r3, r7, #28
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a3f      	ldr	r2, [pc, #252]	; (8001c28 <HAL_TIM_MspPostInit+0x11c>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d11d      	bne.n	8001b6a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b2e:	4b3f      	ldr	r3, [pc, #252]	; (8001c2c <HAL_TIM_MspPostInit+0x120>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	4a3e      	ldr	r2, [pc, #248]	; (8001c2c <HAL_TIM_MspPostInit+0x120>)
 8001b34:	f043 0310 	orr.w	r3, r3, #16
 8001b38:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3a:	4b3c      	ldr	r3, [pc, #240]	; (8001c2c <HAL_TIM_MspPostInit+0x120>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	f003 0310 	and.w	r3, r3, #16
 8001b42:	61bb      	str	r3, [r7, #24]
 8001b44:	69bb      	ldr	r3, [r7, #24]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWM1_L_Pin|PWM2_L_Pin|PWM3_L_Pin|PWM4_L_Pin
 8001b46:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 8001b4a:	61fb      	str	r3, [r7, #28]
                          |PWM5_L_Pin|PWM6_L_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b54:	2300      	movs	r3, #0
 8001b56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b5c:	f107 031c 	add.w	r3, r7, #28
 8001b60:	4619      	mov	r1, r3
 8001b62:	4833      	ldr	r0, [pc, #204]	; (8001c30 <HAL_TIM_MspPostInit+0x124>)
 8001b64:	f001 fc78 	bl	8003458 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001b68:	e05a      	b.n	8001c20 <HAL_TIM_MspPostInit+0x114>
  else if(timHandle->Instance==TIM8)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a31      	ldr	r2, [pc, #196]	; (8001c34 <HAL_TIM_MspPostInit+0x128>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d155      	bne.n	8001c20 <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b74:	4b2d      	ldr	r3, [pc, #180]	; (8001c2c <HAL_TIM_MspPostInit+0x120>)
 8001b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b78:	4a2c      	ldr	r2, [pc, #176]	; (8001c2c <HAL_TIM_MspPostInit+0x120>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b80:	4b2a      	ldr	r3, [pc, #168]	; (8001c2c <HAL_TIM_MspPostInit+0x120>)
 8001b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8c:	4b27      	ldr	r3, [pc, #156]	; (8001c2c <HAL_TIM_MspPostInit+0x120>)
 8001b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b90:	4a26      	ldr	r2, [pc, #152]	; (8001c2c <HAL_TIM_MspPostInit+0x120>)
 8001b92:	f043 0302 	orr.w	r3, r3, #2
 8001b96:	6313      	str	r3, [r2, #48]	; 0x30
 8001b98:	4b24      	ldr	r3, [pc, #144]	; (8001c2c <HAL_TIM_MspPostInit+0x120>)
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba4:	4b21      	ldr	r3, [pc, #132]	; (8001c2c <HAL_TIM_MspPostInit+0x120>)
 8001ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba8:	4a20      	ldr	r2, [pc, #128]	; (8001c2c <HAL_TIM_MspPostInit+0x120>)
 8001baa:	f043 0304 	orr.w	r3, r3, #4
 8001bae:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb0:	4b1e      	ldr	r3, [pc, #120]	; (8001c2c <HAL_TIM_MspPostInit+0x120>)
 8001bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM1_R_Pin;
 8001bbc:	2320      	movs	r3, #32
 8001bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PWM1_R_GPIO_Port, &GPIO_InitStruct);
 8001bd0:	f107 031c 	add.w	r3, r7, #28
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4818      	ldr	r0, [pc, #96]	; (8001c38 <HAL_TIM_MspPostInit+0x12c>)
 8001bd8:	f001 fc3e 	bl	8003458 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM3_R_Pin|PWM5_R_Pin;
 8001bdc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be2:	2302      	movs	r3, #2
 8001be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bea:	2300      	movs	r3, #0
 8001bec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf2:	f107 031c 	add.w	r3, r7, #28
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4810      	ldr	r0, [pc, #64]	; (8001c3c <HAL_TIM_MspPostInit+0x130>)
 8001bfa:	f001 fc2d 	bl	8003458 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM2_R_Pin|PWM4_R_Pin|PWM6_R_Pin;
 8001bfe:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c04:	2302      	movs	r3, #2
 8001c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001c10:	2303      	movs	r3, #3
 8001c12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c14:	f107 031c 	add.w	r3, r7, #28
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4809      	ldr	r0, [pc, #36]	; (8001c40 <HAL_TIM_MspPostInit+0x134>)
 8001c1c:	f001 fc1c 	bl	8003458 <HAL_GPIO_Init>
}
 8001c20:	bf00      	nop
 8001c22:	3730      	adds	r7, #48	; 0x30
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40010000 	.word	0x40010000
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40021000 	.word	0x40021000
 8001c34:	40010400 	.word	0x40010400
 8001c38:	40020000 	.word	0x40020000
 8001c3c:	40020400 	.word	0x40020400
 8001c40:	40020800 	.word	0x40020800

08001c44 <MX_USB_OTG_FS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_USB_Init(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c58:	480d      	ldr	r0, [pc, #52]	; (8001c90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c5a:	490e      	ldr	r1, [pc, #56]	; (8001c94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c5c:	4a0e      	ldr	r2, [pc, #56]	; (8001c98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c60:	e002      	b.n	8001c68 <LoopCopyDataInit>

08001c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c66:	3304      	adds	r3, #4

08001c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c6c:	d3f9      	bcc.n	8001c62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c6e:	4a0b      	ldr	r2, [pc, #44]	; (8001c9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c70:	4c0b      	ldr	r4, [pc, #44]	; (8001ca0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c74:	e001      	b.n	8001c7a <LoopFillZerobss>

08001c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c78:	3204      	adds	r2, #4

08001c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c7c:	d3fb      	bcc.n	8001c76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c7e:	f7ff fbfb 	bl	8001478 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c82:	f007 fb31 	bl	80092e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c86:	f7ff fa37 	bl	80010f8 <main>
  bx  lr    
 8001c8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c8c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c94:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001c98:	08009680 	.word	0x08009680
  ldr r2, =_sbss
 8001c9c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001ca0:	20004fd8 	.word	0x20004fd8

08001ca4 <CAN1_SCE_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ca4:	e7fe      	b.n	8001ca4 <CAN1_SCE_IRQHandler>

08001ca6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001caa:	2003      	movs	r0, #3
 8001cac:	f000 ffd5 	bl	8002c5a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cb0:	200f      	movs	r0, #15
 8001cb2:	f7ff faf7 	bl	80012a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cb6:	f7ff facd 	bl	8001254 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <HAL_IncTick+0x20>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_IncTick+0x24>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4413      	add	r3, r2
 8001cd0:	4a04      	ldr	r2, [pc, #16]	; (8001ce4 <HAL_IncTick+0x24>)
 8001cd2:	6013      	str	r3, [r2, #0]
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	20000008 	.word	0x20000008
 8001ce4:	200004b4 	.word	0x200004b4

08001ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return uwTick;
 8001cec:	4b03      	ldr	r3, [pc, #12]	; (8001cfc <HAL_GetTick+0x14>)
 8001cee:	681b      	ldr	r3, [r3, #0]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	200004b4 	.word	0x200004b4

08001d00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e031      	b.n	8001d7a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d109      	bne.n	8001d32 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7fe fd1e 	bl	8000760 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	f003 0310 	and.w	r3, r3, #16
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d116      	bne.n	8001d6c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d42:	4b10      	ldr	r3, [pc, #64]	; (8001d84 <HAL_ADC_Init+0x84>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	f043 0202 	orr.w	r2, r3, #2
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 fa9e 	bl	8002290 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	f023 0303 	bic.w	r3, r3, #3
 8001d62:	f043 0201 	orr.w	r2, r3, #1
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	641a      	str	r2, [r3, #64]	; 0x40
 8001d6a:	e001      	b.n	8001d70 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	ffffeefd 	.word	0xffffeefd

08001d88 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
 8001d94:	2300      	movs	r3, #0
 8001d96:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	f003 0320 	and.w	r3, r3, #32
 8001db6:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d049      	beq.n	8001e52 <HAL_ADC_IRQHandler+0xca>
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d046      	beq.n	8001e52 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	f003 0310 	and.w	r3, r3, #16
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d105      	bne.n	8001ddc <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d12b      	bne.n	8001e42 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d127      	bne.n	8001e42 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d006      	beq.n	8001e0e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d119      	bne.n	8001e42 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	685a      	ldr	r2, [r3, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 0220 	bic.w	r2, r2, #32
 8001e1c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d105      	bne.n	8001e42 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	f043 0201 	orr.w	r2, r3, #1
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f8b0 	bl	8001fa8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f06f 0212 	mvn.w	r2, #18
 8001e50:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e60:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d057      	beq.n	8001f18 <HAL_ADC_IRQHandler+0x190>
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d054      	beq.n	8001f18 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	f003 0310 	and.w	r3, r3, #16
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d105      	bne.n	8001e86 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d139      	bne.n	8001f08 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e9a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d006      	beq.n	8001eb0 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d12b      	bne.n	8001f08 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d124      	bne.n	8001f08 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d11d      	bne.n	8001f08 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d119      	bne.n	8001f08 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ee2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d105      	bne.n	8001f08 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f00:	f043 0201 	orr.w	r2, r3, #1
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 fabb 	bl	8002484 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f06f 020c 	mvn.w	r2, #12
 8001f16:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f26:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d017      	beq.n	8001f5e <HAL_ADC_IRQHandler+0x1d6>
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d014      	beq.n	8001f5e <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d10d      	bne.n	8001f5e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f834 	bl	8001fbc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f06f 0201 	mvn.w	r2, #1
 8001f5c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f003 0320 	and.w	r3, r3, #32
 8001f64:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f6c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d015      	beq.n	8001fa0 <HAL_ADC_IRQHandler+0x218>
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d012      	beq.n	8001fa0 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7e:	f043 0202 	orr.w	r2, r3, #2
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f06f 0220 	mvn.w	r2, #32
 8001f8e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f81d 	bl	8001fd0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f06f 0220 	mvn.w	r2, #32
 8001f9e:	601a      	str	r2, [r3, #0]
  }
}
 8001fa0:	bf00      	nop
 8001fa2:	3718      	adds	r7, #24
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d101      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x1c>
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	e136      	b.n	800226e <HAL_ADC_ConfigChannel+0x28a>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b09      	cmp	r3, #9
 800200e:	d93a      	bls.n	8002086 <HAL_ADC_ConfigChannel+0xa2>
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002018:	d035      	beq.n	8002086 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68d9      	ldr	r1, [r3, #12]
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	b29b      	uxth	r3, r3
 8002026:	461a      	mov	r2, r3
 8002028:	4613      	mov	r3, r2
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	4413      	add	r3, r2
 800202e:	3b1e      	subs	r3, #30
 8002030:	2207      	movs	r2, #7
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43da      	mvns	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	400a      	ands	r2, r1
 800203e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a8d      	ldr	r2, [pc, #564]	; (800227c <HAL_ADC_ConfigChannel+0x298>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d10a      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68d9      	ldr	r1, [r3, #12]
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	061a      	lsls	r2, r3, #24
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	430a      	orrs	r2, r1
 800205c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800205e:	e035      	b.n	80020cc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68d9      	ldr	r1, [r3, #12]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	689a      	ldr	r2, [r3, #8]
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	b29b      	uxth	r3, r3
 8002070:	4618      	mov	r0, r3
 8002072:	4603      	mov	r3, r0
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	4403      	add	r3, r0
 8002078:	3b1e      	subs	r3, #30
 800207a:	409a      	lsls	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002084:	e022      	b.n	80020cc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6919      	ldr	r1, [r3, #16]
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	b29b      	uxth	r3, r3
 8002092:	461a      	mov	r2, r3
 8002094:	4613      	mov	r3, r2
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	4413      	add	r3, r2
 800209a:	2207      	movs	r2, #7
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	43da      	mvns	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	400a      	ands	r2, r1
 80020a8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6919      	ldr	r1, [r3, #16]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	4618      	mov	r0, r3
 80020bc:	4603      	mov	r3, r0
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	4403      	add	r3, r0
 80020c2:	409a      	lsls	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	430a      	orrs	r2, r1
 80020ca:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b06      	cmp	r3, #6
 80020d2:	d824      	bhi.n	800211e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	3b05      	subs	r3, #5
 80020e6:	221f      	movs	r2, #31
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43da      	mvns	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	400a      	ands	r2, r1
 80020f4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	b29b      	uxth	r3, r3
 8002102:	4618      	mov	r0, r3
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	3b05      	subs	r3, #5
 8002110:	fa00 f203 	lsl.w	r2, r0, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	430a      	orrs	r2, r1
 800211a:	635a      	str	r2, [r3, #52]	; 0x34
 800211c:	e04c      	b.n	80021b8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b0c      	cmp	r3, #12
 8002124:	d824      	bhi.n	8002170 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	4613      	mov	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	3b23      	subs	r3, #35	; 0x23
 8002138:	221f      	movs	r2, #31
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43da      	mvns	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	400a      	ands	r2, r1
 8002146:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	b29b      	uxth	r3, r3
 8002154:	4618      	mov	r0, r3
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	3b23      	subs	r3, #35	; 0x23
 8002162:	fa00 f203 	lsl.w	r2, r0, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	631a      	str	r2, [r3, #48]	; 0x30
 800216e:	e023      	b.n	80021b8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	3b41      	subs	r3, #65	; 0x41
 8002182:	221f      	movs	r2, #31
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	43da      	mvns	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	400a      	ands	r2, r1
 8002190:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	b29b      	uxth	r3, r3
 800219e:	4618      	mov	r0, r3
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	4613      	mov	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	3b41      	subs	r3, #65	; 0x41
 80021ac:	fa00 f203 	lsl.w	r2, r0, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a30      	ldr	r2, [pc, #192]	; (8002280 <HAL_ADC_ConfigChannel+0x29c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d10a      	bne.n	80021d8 <HAL_ADC_ConfigChannel+0x1f4>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021ca:	d105      	bne.n	80021d8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80021cc:	4b2d      	ldr	r3, [pc, #180]	; (8002284 <HAL_ADC_ConfigChannel+0x2a0>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	4a2c      	ldr	r2, [pc, #176]	; (8002284 <HAL_ADC_ConfigChannel+0x2a0>)
 80021d2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80021d6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a28      	ldr	r2, [pc, #160]	; (8002280 <HAL_ADC_ConfigChannel+0x29c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d10f      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x21e>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2b12      	cmp	r3, #18
 80021e8:	d10b      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80021ea:	4b26      	ldr	r3, [pc, #152]	; (8002284 <HAL_ADC_ConfigChannel+0x2a0>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	4a25      	ldr	r2, [pc, #148]	; (8002284 <HAL_ADC_ConfigChannel+0x2a0>)
 80021f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80021f4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80021f6:	4b23      	ldr	r3, [pc, #140]	; (8002284 <HAL_ADC_ConfigChannel+0x2a0>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	4a22      	ldr	r2, [pc, #136]	; (8002284 <HAL_ADC_ConfigChannel+0x2a0>)
 80021fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002200:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a1e      	ldr	r2, [pc, #120]	; (8002280 <HAL_ADC_ConfigChannel+0x29c>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d12b      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x280>
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a1a      	ldr	r2, [pc, #104]	; (800227c <HAL_ADC_ConfigChannel+0x298>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d003      	beq.n	800221e <HAL_ADC_ConfigChannel+0x23a>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2b11      	cmp	r3, #17
 800221c:	d122      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800221e:	4b19      	ldr	r3, [pc, #100]	; (8002284 <HAL_ADC_ConfigChannel+0x2a0>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	4a18      	ldr	r2, [pc, #96]	; (8002284 <HAL_ADC_ConfigChannel+0x2a0>)
 8002224:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002228:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800222a:	4b16      	ldr	r3, [pc, #88]	; (8002284 <HAL_ADC_ConfigChannel+0x2a0>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	4a15      	ldr	r2, [pc, #84]	; (8002284 <HAL_ADC_ConfigChannel+0x2a0>)
 8002230:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002234:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a10      	ldr	r2, [pc, #64]	; (800227c <HAL_ADC_ConfigChannel+0x298>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d111      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002240:	4b11      	ldr	r3, [pc, #68]	; (8002288 <HAL_ADC_ConfigChannel+0x2a4>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a11      	ldr	r2, [pc, #68]	; (800228c <HAL_ADC_ConfigChannel+0x2a8>)
 8002246:	fba2 2303 	umull	r2, r3, r2, r3
 800224a:	0c9a      	lsrs	r2, r3, #18
 800224c:	4613      	mov	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002256:	e002      	b.n	800225e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	3b01      	subs	r3, #1
 800225c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1f9      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3714      	adds	r7, #20
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	10000012 	.word	0x10000012
 8002280:	40012000 	.word	0x40012000
 8002284:	40012300 	.word	0x40012300
 8002288:	20000000 	.word	0x20000000
 800228c:	431bde83 	.word	0x431bde83

08002290 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002298:	4b78      	ldr	r3, [pc, #480]	; (800247c <ADC_Init+0x1ec>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	4a77      	ldr	r2, [pc, #476]	; (800247c <ADC_Init+0x1ec>)
 800229e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80022a2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80022a4:	4b75      	ldr	r3, [pc, #468]	; (800247c <ADC_Init+0x1ec>)
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	4973      	ldr	r1, [pc, #460]	; (800247c <ADC_Init+0x1ec>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6859      	ldr	r1, [r3, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	021a      	lsls	r2, r3, #8
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80022e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6859      	ldr	r1, [r3, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	430a      	orrs	r2, r1
 80022f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002306:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6899      	ldr	r1, [r3, #8]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68da      	ldr	r2, [r3, #12]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231e:	4a58      	ldr	r2, [pc, #352]	; (8002480 <ADC_Init+0x1f0>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d022      	beq.n	800236a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689a      	ldr	r2, [r3, #8]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002332:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6899      	ldr	r1, [r3, #8]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	430a      	orrs	r2, r1
 8002344:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002354:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6899      	ldr	r1, [r3, #8]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	430a      	orrs	r2, r1
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	e00f      	b.n	800238a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002378:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002388:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 0202 	bic.w	r2, r2, #2
 8002398:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6899      	ldr	r1, [r3, #8]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	005a      	lsls	r2, r3, #1
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d01b      	beq.n	80023f0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80023d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6859      	ldr	r1, [r3, #4]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e2:	3b01      	subs	r3, #1
 80023e4:	035a      	lsls	r2, r3, #13
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	605a      	str	r2, [r3, #4]
 80023ee:	e007      	b.n	8002400 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800240e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	3b01      	subs	r3, #1
 800241c:	051a      	lsls	r2, r3, #20
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	430a      	orrs	r2, r1
 8002424:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002434:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6899      	ldr	r1, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002442:	025a      	lsls	r2, r3, #9
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	430a      	orrs	r2, r1
 800244a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800245a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6899      	ldr	r1, [r3, #8]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	029a      	lsls	r2, r3, #10
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	609a      	str	r2, [r3, #8]
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	40012300 	.word	0x40012300
 8002480:	0f000001 	.word	0x0f000001

08002484 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e0ed      	b.n	8002686 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d102      	bne.n	80024bc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7fe faf0 	bl	8000a9c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 0201 	orr.w	r2, r2, #1
 80024ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024cc:	f7ff fc0c 	bl	8001ce8 <HAL_GetTick>
 80024d0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024d2:	e012      	b.n	80024fa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024d4:	f7ff fc08 	bl	8001ce8 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b0a      	cmp	r3, #10
 80024e0:	d90b      	bls.n	80024fa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2205      	movs	r2, #5
 80024f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e0c5      	b.n	8002686 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0e5      	beq.n	80024d4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0202 	bic.w	r2, r2, #2
 8002516:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002518:	f7ff fbe6 	bl	8001ce8 <HAL_GetTick>
 800251c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800251e:	e012      	b.n	8002546 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002520:	f7ff fbe2 	bl	8001ce8 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b0a      	cmp	r3, #10
 800252c:	d90b      	bls.n	8002546 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002532:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2205      	movs	r2, #5
 800253e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e09f      	b.n	8002686 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1e5      	bne.n	8002520 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	7e1b      	ldrb	r3, [r3, #24]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d108      	bne.n	800256e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	e007      	b.n	800257e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800257c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	7e5b      	ldrb	r3, [r3, #25]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d108      	bne.n	8002598 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	e007      	b.n	80025a8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	7e9b      	ldrb	r3, [r3, #26]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d108      	bne.n	80025c2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 0220 	orr.w	r2, r2, #32
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	e007      	b.n	80025d2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 0220 	bic.w	r2, r2, #32
 80025d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	7edb      	ldrb	r3, [r3, #27]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d108      	bne.n	80025ec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 0210 	bic.w	r2, r2, #16
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	e007      	b.n	80025fc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0210 	orr.w	r2, r2, #16
 80025fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	7f1b      	ldrb	r3, [r3, #28]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d108      	bne.n	8002616 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 0208 	orr.w	r2, r2, #8
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	e007      	b.n	8002626 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 0208 	bic.w	r2, r2, #8
 8002624:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	7f5b      	ldrb	r3, [r3, #29]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d108      	bne.n	8002640 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f042 0204 	orr.w	r2, r2, #4
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	e007      	b.n	8002650 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0204 	bic.w	r2, r2, #4
 800264e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	431a      	orrs	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	431a      	orrs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	ea42 0103 	orr.w	r1, r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	1e5a      	subs	r2, r3, #1
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	430a      	orrs	r2, r1
 8002674:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b08a      	sub	sp, #40	; 0x28
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002696:	2300      	movs	r3, #0
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80026ca:	6a3b      	ldr	r3, [r7, #32]
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d07c      	beq.n	80027ce <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d023      	beq.n	8002726 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2201      	movs	r2, #1
 80026e4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 f983 	bl	80029fc <HAL_CAN_TxMailbox0CompleteCallback>
 80026f6:	e016      	b.n	8002726 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d004      	beq.n	800270c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
 800270a:	e00c      	b.n	8002726 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	2b00      	cmp	r3, #0
 8002714:	d004      	beq.n	8002720 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800271c:	627b      	str	r3, [r7, #36]	; 0x24
 800271e:	e002      	b.n	8002726 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 f989 	bl	8002a38 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272c:	2b00      	cmp	r3, #0
 800272e:	d024      	beq.n	800277a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002738:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 f963 	bl	8002a10 <HAL_CAN_TxMailbox1CompleteCallback>
 800274a:	e016      	b.n	800277a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002752:	2b00      	cmp	r3, #0
 8002754:	d004      	beq.n	8002760 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800275c:	627b      	str	r3, [r7, #36]	; 0x24
 800275e:	e00c      	b.n	800277a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002766:	2b00      	cmp	r3, #0
 8002768:	d004      	beq.n	8002774 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
 8002772:	e002      	b.n	800277a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 f969 	bl	8002a4c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d024      	beq.n	80027ce <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800278c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f000 f943 	bl	8002a24 <HAL_CAN_TxMailbox2CompleteCallback>
 800279e:	e016      	b.n	80027ce <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d004      	beq.n	80027b4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027b0:	627b      	str	r3, [r7, #36]	; 0x24
 80027b2:	e00c      	b.n	80027ce <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d004      	beq.n	80027c8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c4:	627b      	str	r3, [r7, #36]	; 0x24
 80027c6:	e002      	b.n	80027ce <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 f949 	bl	8002a60 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80027ce:	6a3b      	ldr	r3, [r7, #32]
 80027d0:	f003 0308 	and.w	r3, r3, #8
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00c      	beq.n	80027f2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f003 0310 	and.w	r3, r3, #16
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d007      	beq.n	80027f2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2210      	movs	r2, #16
 80027f0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00b      	beq.n	8002814 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	f003 0308 	and.w	r3, r3, #8
 8002802:	2b00      	cmp	r3, #0
 8002804:	d006      	beq.n	8002814 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2208      	movs	r2, #8
 800280c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f93a 	bl	8002a88 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002814:	6a3b      	ldr	r3, [r7, #32]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d009      	beq.n	8002832 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f003 0303 	and.w	r3, r3, #3
 8002828:	2b00      	cmp	r3, #0
 800282a:	d002      	beq.n	8002832 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 f921 	bl	8002a74 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002832:	6a3b      	ldr	r3, [r7, #32]
 8002834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00c      	beq.n	8002856 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	f003 0310 	and.w	r3, r3, #16
 8002842:	2b00      	cmp	r3, #0
 8002844:	d007      	beq.n	8002856 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800284c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2210      	movs	r2, #16
 8002854:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002856:	6a3b      	ldr	r3, [r7, #32]
 8002858:	f003 0320 	and.w	r3, r3, #32
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00b      	beq.n	8002878 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d006      	beq.n	8002878 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2208      	movs	r2, #8
 8002870:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f91c 	bl	8002ab0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002878:	6a3b      	ldr	r3, [r7, #32]
 800287a:	f003 0310 	and.w	r3, r3, #16
 800287e:	2b00      	cmp	r3, #0
 8002880:	d009      	beq.n	8002896 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	f003 0303 	and.w	r3, r3, #3
 800288c:	2b00      	cmp	r3, #0
 800288e:	d002      	beq.n	8002896 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 f903 	bl	8002a9c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002896:	6a3b      	ldr	r3, [r7, #32]
 8002898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00b      	beq.n	80028b8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f003 0310 	and.w	r3, r3, #16
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d006      	beq.n	80028b8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2210      	movs	r2, #16
 80028b0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 f906 	bl	8002ac4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80028b8:	6a3b      	ldr	r3, [r7, #32]
 80028ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00b      	beq.n	80028da <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	f003 0308 	and.w	r3, r3, #8
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d006      	beq.n	80028da <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2208      	movs	r2, #8
 80028d2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 f8ff 	bl	8002ad8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80028da:	6a3b      	ldr	r3, [r7, #32]
 80028dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d07b      	beq.n	80029dc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f003 0304 	and.w	r3, r3, #4
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d072      	beq.n	80029d4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d008      	beq.n	800290a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800290a:	6a3b      	ldr	r3, [r7, #32]
 800290c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002910:	2b00      	cmp	r3, #0
 8002912:	d008      	beq.n	8002926 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	f043 0302 	orr.w	r3, r3, #2
 8002924:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002926:	6a3b      	ldr	r3, [r7, #32]
 8002928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800292c:	2b00      	cmp	r3, #0
 800292e:	d008      	beq.n	8002942 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	f043 0304 	orr.w	r3, r3, #4
 8002940:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002948:	2b00      	cmp	r3, #0
 800294a:	d043      	beq.n	80029d4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002952:	2b00      	cmp	r3, #0
 8002954:	d03e      	beq.n	80029d4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800295c:	2b60      	cmp	r3, #96	; 0x60
 800295e:	d02b      	beq.n	80029b8 <HAL_CAN_IRQHandler+0x32a>
 8002960:	2b60      	cmp	r3, #96	; 0x60
 8002962:	d82e      	bhi.n	80029c2 <HAL_CAN_IRQHandler+0x334>
 8002964:	2b50      	cmp	r3, #80	; 0x50
 8002966:	d022      	beq.n	80029ae <HAL_CAN_IRQHandler+0x320>
 8002968:	2b50      	cmp	r3, #80	; 0x50
 800296a:	d82a      	bhi.n	80029c2 <HAL_CAN_IRQHandler+0x334>
 800296c:	2b40      	cmp	r3, #64	; 0x40
 800296e:	d019      	beq.n	80029a4 <HAL_CAN_IRQHandler+0x316>
 8002970:	2b40      	cmp	r3, #64	; 0x40
 8002972:	d826      	bhi.n	80029c2 <HAL_CAN_IRQHandler+0x334>
 8002974:	2b30      	cmp	r3, #48	; 0x30
 8002976:	d010      	beq.n	800299a <HAL_CAN_IRQHandler+0x30c>
 8002978:	2b30      	cmp	r3, #48	; 0x30
 800297a:	d822      	bhi.n	80029c2 <HAL_CAN_IRQHandler+0x334>
 800297c:	2b10      	cmp	r3, #16
 800297e:	d002      	beq.n	8002986 <HAL_CAN_IRQHandler+0x2f8>
 8002980:	2b20      	cmp	r3, #32
 8002982:	d005      	beq.n	8002990 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002984:	e01d      	b.n	80029c2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	f043 0308 	orr.w	r3, r3, #8
 800298c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800298e:	e019      	b.n	80029c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	f043 0310 	orr.w	r3, r3, #16
 8002996:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002998:	e014      	b.n	80029c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	f043 0320 	orr.w	r3, r3, #32
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029a2:	e00f      	b.n	80029c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029ac:	e00a      	b.n	80029c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029b6:	e005      	b.n	80029c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029c0:	e000      	b.n	80029c4 <HAL_CAN_IRQHandler+0x336>
            break;
 80029c2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699a      	ldr	r2, [r3, #24]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80029d2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2204      	movs	r2, #4
 80029da:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d008      	beq.n	80029f4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	431a      	orrs	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f87c 	bl	8002aec <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80029f4:	bf00      	nop
 80029f6:	3728      	adds	r7, #40	; 0x28
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <__NVIC_SetPriorityGrouping+0x40>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b28:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <__NVIC_SetPriorityGrouping+0x44>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b2e:	4a04      	ldr	r2, [pc, #16]	; (8002b40 <__NVIC_SetPriorityGrouping+0x40>)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	60d3      	str	r3, [r2, #12]
}
 8002b34:	bf00      	nop
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	e000ed00 	.word	0xe000ed00
 8002b44:	05fa0000 	.word	0x05fa0000

08002b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b4c:	4b04      	ldr	r3, [pc, #16]	; (8002b60 <__NVIC_GetPriorityGrouping+0x18>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	0a1b      	lsrs	r3, r3, #8
 8002b52:	f003 0307 	and.w	r3, r3, #7
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	e000ed00 	.word	0xe000ed00

08002b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	db0b      	blt.n	8002b8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b76:	79fb      	ldrb	r3, [r7, #7]
 8002b78:	f003 021f 	and.w	r2, r3, #31
 8002b7c:	4907      	ldr	r1, [pc, #28]	; (8002b9c <__NVIC_EnableIRQ+0x38>)
 8002b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b82:	095b      	lsrs	r3, r3, #5
 8002b84:	2001      	movs	r0, #1
 8002b86:	fa00 f202 	lsl.w	r2, r0, r2
 8002b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	e000e100 	.word	0xe000e100

08002ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	6039      	str	r1, [r7, #0]
 8002baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	db0a      	blt.n	8002bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	490c      	ldr	r1, [pc, #48]	; (8002bec <__NVIC_SetPriority+0x4c>)
 8002bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbe:	0112      	lsls	r2, r2, #4
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bc8:	e00a      	b.n	8002be0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	4908      	ldr	r1, [pc, #32]	; (8002bf0 <__NVIC_SetPriority+0x50>)
 8002bd0:	79fb      	ldrb	r3, [r7, #7]
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	3b04      	subs	r3, #4
 8002bd8:	0112      	lsls	r2, r2, #4
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	440b      	add	r3, r1
 8002bde:	761a      	strb	r2, [r3, #24]
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	e000e100 	.word	0xe000e100
 8002bf0:	e000ed00 	.word	0xe000ed00

08002bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b089      	sub	sp, #36	; 0x24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	f1c3 0307 	rsb	r3, r3, #7
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	bf28      	it	cs
 8002c12:	2304      	movcs	r3, #4
 8002c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	3304      	adds	r3, #4
 8002c1a:	2b06      	cmp	r3, #6
 8002c1c:	d902      	bls.n	8002c24 <NVIC_EncodePriority+0x30>
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	3b03      	subs	r3, #3
 8002c22:	e000      	b.n	8002c26 <NVIC_EncodePriority+0x32>
 8002c24:	2300      	movs	r3, #0
 8002c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c28:	f04f 32ff 	mov.w	r2, #4294967295
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	43da      	mvns	r2, r3
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	401a      	ands	r2, r3
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	fa01 f303 	lsl.w	r3, r1, r3
 8002c46:	43d9      	mvns	r1, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c4c:	4313      	orrs	r3, r2
         );
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3724      	adds	r7, #36	; 0x24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b082      	sub	sp, #8
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7ff ff4c 	bl	8002b00 <__NVIC_SetPriorityGrouping>
}
 8002c68:	bf00      	nop
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
 8002c7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c82:	f7ff ff61 	bl	8002b48 <__NVIC_GetPriorityGrouping>
 8002c86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	68b9      	ldr	r1, [r7, #8]
 8002c8c:	6978      	ldr	r0, [r7, #20]
 8002c8e:	f7ff ffb1 	bl	8002bf4 <NVIC_EncodePriority>
 8002c92:	4602      	mov	r2, r0
 8002c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c98:	4611      	mov	r1, r2
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff ff80 	bl	8002ba0 <__NVIC_SetPriority>
}
 8002ca0:	bf00      	nop
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	4603      	mov	r3, r0
 8002cb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff ff54 	bl	8002b64 <__NVIC_EnableIRQ>
}
 8002cbc:	bf00      	nop
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e014      	b.n	8002d00 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	791b      	ldrb	r3, [r3, #4]
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d105      	bne.n	8002cec <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7fd ff56 	bl	8000b98 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2202      	movs	r2, #2
 8002cf0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d1e:	d120      	bne.n	8002d62 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d2e:	d118      	bne.n	8002d62 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2204      	movs	r2, #4
 8002d34:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	f043 0201 	orr.w	r2, r3, #1
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d4a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d5a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 f82d 	bl	8002dbc <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d70:	d120      	bne.n	8002db4 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d80:	d118      	bne.n	8002db4 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2204      	movs	r2, #4
 8002d86:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	f043 0202 	orr.w	r2, r3, #2
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002d9c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002dac:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f85d 	bl	8002e6e <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8002db4:	bf00      	nop
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b087      	sub	sp, #28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	795b      	ldrb	r3, [r3, #5]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d101      	bne.n	8002de8 <HAL_DAC_ConfigChannel+0x18>
 8002de4:	2302      	movs	r3, #2
 8002de6:	e03c      	b.n	8002e62 <HAL_DAC_ConfigChannel+0x92>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2201      	movs	r2, #1
 8002dec:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2202      	movs	r2, #2
 8002df2:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f003 0310 	and.w	r3, r3, #16
 8002e02:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f003 0310 	and.w	r3, r3, #16
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6819      	ldr	r1, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f003 0310 	and.w	r3, r3, #16
 8002e44:	22c0      	movs	r2, #192	; 0xc0
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	43da      	mvns	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	400a      	ands	r2, r1
 8002e52:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2201      	movs	r2, #1
 8002e58:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	371c      	adds	r7, #28
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
	...

08002e84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e90:	f7fe ff2a 	bl	8001ce8 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e099      	b.n	8002fd4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 0201 	bic.w	r2, r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ec0:	e00f      	b.n	8002ee2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ec2:	f7fe ff11 	bl	8001ce8 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b05      	cmp	r3, #5
 8002ece:	d908      	bls.n	8002ee2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2203      	movs	r2, #3
 8002eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e078      	b.n	8002fd4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1e8      	bne.n	8002ec2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	4b38      	ldr	r3, [pc, #224]	; (8002fdc <HAL_DMA_Init+0x158>)
 8002efc:	4013      	ands	r3, r2
 8002efe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f38:	2b04      	cmp	r3, #4
 8002f3a:	d107      	bne.n	8002f4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f44:	4313      	orrs	r3, r2
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	f023 0307 	bic.w	r3, r3, #7
 8002f62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f72:	2b04      	cmp	r3, #4
 8002f74:	d117      	bne.n	8002fa6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00e      	beq.n	8002fa6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 f9e9 	bl	8003360 <DMA_CheckFifoParam>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d008      	beq.n	8002fa6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2240      	movs	r2, #64	; 0x40
 8002f98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e016      	b.n	8002fd4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f9a0 	bl	80032f4 <DMA_CalcBaseAndBitshift>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fbc:	223f      	movs	r2, #63	; 0x3f
 8002fbe:	409a      	lsls	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3718      	adds	r7, #24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	e010803f 	.word	0xe010803f

08002fe0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002fec:	4b8e      	ldr	r3, [pc, #568]	; (8003228 <HAL_DMA_IRQHandler+0x248>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a8e      	ldr	r2, [pc, #568]	; (800322c <HAL_DMA_IRQHandler+0x24c>)
 8002ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff6:	0a9b      	lsrs	r3, r3, #10
 8002ff8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300a:	2208      	movs	r2, #8
 800300c:	409a      	lsls	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	4013      	ands	r3, r2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d01a      	beq.n	800304c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b00      	cmp	r3, #0
 8003022:	d013      	beq.n	800304c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0204 	bic.w	r2, r2, #4
 8003032:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003038:	2208      	movs	r2, #8
 800303a:	409a      	lsls	r2, r3
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003044:	f043 0201 	orr.w	r2, r3, #1
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003050:	2201      	movs	r2, #1
 8003052:	409a      	lsls	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4013      	ands	r3, r2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d012      	beq.n	8003082 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00b      	beq.n	8003082 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800306e:	2201      	movs	r2, #1
 8003070:	409a      	lsls	r2, r3
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800307a:	f043 0202 	orr.w	r2, r3, #2
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003086:	2204      	movs	r2, #4
 8003088:	409a      	lsls	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	4013      	ands	r3, r2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d012      	beq.n	80030b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00b      	beq.n	80030b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a4:	2204      	movs	r2, #4
 80030a6:	409a      	lsls	r2, r3
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b0:	f043 0204 	orr.w	r2, r3, #4
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030bc:	2210      	movs	r2, #16
 80030be:	409a      	lsls	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4013      	ands	r3, r2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d043      	beq.n	8003150 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0308 	and.w	r3, r3, #8
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d03c      	beq.n	8003150 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030da:	2210      	movs	r2, #16
 80030dc:	409a      	lsls	r2, r3
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d018      	beq.n	8003122 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d108      	bne.n	8003110 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	2b00      	cmp	r3, #0
 8003104:	d024      	beq.n	8003150 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	4798      	blx	r3
 800310e:	e01f      	b.n	8003150 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003114:	2b00      	cmp	r3, #0
 8003116:	d01b      	beq.n	8003150 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	4798      	blx	r3
 8003120:	e016      	b.n	8003150 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312c:	2b00      	cmp	r3, #0
 800312e:	d107      	bne.n	8003140 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0208 	bic.w	r2, r2, #8
 800313e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003144:	2b00      	cmp	r3, #0
 8003146:	d003      	beq.n	8003150 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003154:	2220      	movs	r2, #32
 8003156:	409a      	lsls	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4013      	ands	r3, r2
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 808f 	beq.w	8003280 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0310 	and.w	r3, r3, #16
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 8087 	beq.w	8003280 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003176:	2220      	movs	r2, #32
 8003178:	409a      	lsls	r2, r3
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b05      	cmp	r3, #5
 8003188:	d136      	bne.n	80031f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 0216 	bic.w	r2, r2, #22
 8003198:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695a      	ldr	r2, [r3, #20]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d103      	bne.n	80031ba <HAL_DMA_IRQHandler+0x1da>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d007      	beq.n	80031ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 0208 	bic.w	r2, r2, #8
 80031c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ce:	223f      	movs	r2, #63	; 0x3f
 80031d0:	409a      	lsls	r2, r3
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d07e      	beq.n	80032ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	4798      	blx	r3
        }
        return;
 80031f6:	e079      	b.n	80032ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d01d      	beq.n	8003242 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10d      	bne.n	8003230 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003218:	2b00      	cmp	r3, #0
 800321a:	d031      	beq.n	8003280 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	4798      	blx	r3
 8003224:	e02c      	b.n	8003280 <HAL_DMA_IRQHandler+0x2a0>
 8003226:	bf00      	nop
 8003228:	20000000 	.word	0x20000000
 800322c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003234:	2b00      	cmp	r3, #0
 8003236:	d023      	beq.n	8003280 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	4798      	blx	r3
 8003240:	e01e      	b.n	8003280 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10f      	bne.n	8003270 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0210 	bic.w	r2, r2, #16
 800325e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003284:	2b00      	cmp	r3, #0
 8003286:	d032      	beq.n	80032ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b00      	cmp	r3, #0
 8003292:	d022      	beq.n	80032da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2205      	movs	r2, #5
 8003298:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0201 	bic.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	3301      	adds	r3, #1
 80032b0:	60bb      	str	r3, [r7, #8]
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d307      	bcc.n	80032c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1f2      	bne.n	80032ac <HAL_DMA_IRQHandler+0x2cc>
 80032c6:	e000      	b.n	80032ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80032c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d005      	beq.n	80032ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	4798      	blx	r3
 80032ea:	e000      	b.n	80032ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80032ec:	bf00      	nop
    }
  }
}
 80032ee:	3718      	adds	r7, #24
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	b2db      	uxtb	r3, r3
 8003302:	3b10      	subs	r3, #16
 8003304:	4a13      	ldr	r2, [pc, #76]	; (8003354 <DMA_CalcBaseAndBitshift+0x60>)
 8003306:	fba2 2303 	umull	r2, r3, r2, r3
 800330a:	091b      	lsrs	r3, r3, #4
 800330c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800330e:	4a12      	ldr	r2, [pc, #72]	; (8003358 <DMA_CalcBaseAndBitshift+0x64>)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4413      	add	r3, r2
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	461a      	mov	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2b03      	cmp	r3, #3
 8003320:	d908      	bls.n	8003334 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	461a      	mov	r2, r3
 8003328:	4b0c      	ldr	r3, [pc, #48]	; (800335c <DMA_CalcBaseAndBitshift+0x68>)
 800332a:	4013      	ands	r3, r2
 800332c:	1d1a      	adds	r2, r3, #4
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	659a      	str	r2, [r3, #88]	; 0x58
 8003332:	e006      	b.n	8003342 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	461a      	mov	r2, r3
 800333a:	4b08      	ldr	r3, [pc, #32]	; (800335c <DMA_CalcBaseAndBitshift+0x68>)
 800333c:	4013      	ands	r3, r2
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003346:	4618      	mov	r0, r3
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	aaaaaaab 	.word	0xaaaaaaab
 8003358:	08009668 	.word	0x08009668
 800335c:	fffffc00 	.word	0xfffffc00

08003360 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003368:	2300      	movs	r3, #0
 800336a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003370:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d11f      	bne.n	80033ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	2b03      	cmp	r3, #3
 800337e:	d856      	bhi.n	800342e <DMA_CheckFifoParam+0xce>
 8003380:	a201      	add	r2, pc, #4	; (adr r2, 8003388 <DMA_CheckFifoParam+0x28>)
 8003382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003386:	bf00      	nop
 8003388:	08003399 	.word	0x08003399
 800338c:	080033ab 	.word	0x080033ab
 8003390:	08003399 	.word	0x08003399
 8003394:	0800342f 	.word	0x0800342f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d046      	beq.n	8003432 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033a8:	e043      	b.n	8003432 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033b2:	d140      	bne.n	8003436 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033b8:	e03d      	b.n	8003436 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033c2:	d121      	bne.n	8003408 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2b03      	cmp	r3, #3
 80033c8:	d837      	bhi.n	800343a <DMA_CheckFifoParam+0xda>
 80033ca:	a201      	add	r2, pc, #4	; (adr r2, 80033d0 <DMA_CheckFifoParam+0x70>)
 80033cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d0:	080033e1 	.word	0x080033e1
 80033d4:	080033e7 	.word	0x080033e7
 80033d8:	080033e1 	.word	0x080033e1
 80033dc:	080033f9 	.word	0x080033f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	73fb      	strb	r3, [r7, #15]
      break;
 80033e4:	e030      	b.n	8003448 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d025      	beq.n	800343e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033f6:	e022      	b.n	800343e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003400:	d11f      	bne.n	8003442 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003406:	e01c      	b.n	8003442 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	2b02      	cmp	r3, #2
 800340c:	d903      	bls.n	8003416 <DMA_CheckFifoParam+0xb6>
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	2b03      	cmp	r3, #3
 8003412:	d003      	beq.n	800341c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003414:	e018      	b.n	8003448 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	73fb      	strb	r3, [r7, #15]
      break;
 800341a:	e015      	b.n	8003448 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003420:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00e      	beq.n	8003446 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	73fb      	strb	r3, [r7, #15]
      break;
 800342c:	e00b      	b.n	8003446 <DMA_CheckFifoParam+0xe6>
      break;
 800342e:	bf00      	nop
 8003430:	e00a      	b.n	8003448 <DMA_CheckFifoParam+0xe8>
      break;
 8003432:	bf00      	nop
 8003434:	e008      	b.n	8003448 <DMA_CheckFifoParam+0xe8>
      break;
 8003436:	bf00      	nop
 8003438:	e006      	b.n	8003448 <DMA_CheckFifoParam+0xe8>
      break;
 800343a:	bf00      	nop
 800343c:	e004      	b.n	8003448 <DMA_CheckFifoParam+0xe8>
      break;
 800343e:	bf00      	nop
 8003440:	e002      	b.n	8003448 <DMA_CheckFifoParam+0xe8>
      break;   
 8003442:	bf00      	nop
 8003444:	e000      	b.n	8003448 <DMA_CheckFifoParam+0xe8>
      break;
 8003446:	bf00      	nop
    }
  } 
  
  return status; 
 8003448:	7bfb      	ldrb	r3, [r7, #15]
}
 800344a:	4618      	mov	r0, r3
 800344c:	3714      	adds	r7, #20
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop

08003458 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003458:	b480      	push	{r7}
 800345a:	b089      	sub	sp, #36	; 0x24
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003462:	2300      	movs	r3, #0
 8003464:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003466:	2300      	movs	r3, #0
 8003468:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800346a:	2300      	movs	r3, #0
 800346c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800346e:	2300      	movs	r3, #0
 8003470:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003472:	2300      	movs	r3, #0
 8003474:	61fb      	str	r3, [r7, #28]
 8003476:	e175      	b.n	8003764 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003478:	2201      	movs	r2, #1
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	4013      	ands	r3, r2
 800348a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	429a      	cmp	r2, r3
 8003492:	f040 8164 	bne.w	800375e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d005      	beq.n	80034ae <HAL_GPIO_Init+0x56>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d130      	bne.n	8003510 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	2203      	movs	r2, #3
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	43db      	mvns	r3, r3
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	4013      	ands	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	68da      	ldr	r2, [r3, #12]
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	fa02 f303 	lsl.w	r3, r2, r3
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034e4:	2201      	movs	r2, #1
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	43db      	mvns	r3, r3
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	4013      	ands	r3, r2
 80034f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	091b      	lsrs	r3, r3, #4
 80034fa:	f003 0201 	and.w	r2, r3, #1
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4313      	orrs	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f003 0303 	and.w	r3, r3, #3
 8003518:	2b03      	cmp	r3, #3
 800351a:	d017      	beq.n	800354c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	2203      	movs	r2, #3
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	43db      	mvns	r3, r3
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	4013      	ands	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	4313      	orrs	r3, r2
 8003544:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f003 0303 	and.w	r3, r3, #3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d123      	bne.n	80035a0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	08da      	lsrs	r2, r3, #3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3208      	adds	r2, #8
 8003560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	220f      	movs	r2, #15
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	43db      	mvns	r3, r3
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	4013      	ands	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	691a      	ldr	r2, [r3, #16]
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	f003 0307 	and.w	r3, r3, #7
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	4313      	orrs	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	08da      	lsrs	r2, r3, #3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	3208      	adds	r2, #8
 800359a:	69b9      	ldr	r1, [r7, #24]
 800359c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	2203      	movs	r2, #3
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	43db      	mvns	r3, r3
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	4013      	ands	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f003 0203 	and.w	r2, r3, #3
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 80be 	beq.w	800375e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035e2:	4b66      	ldr	r3, [pc, #408]	; (800377c <HAL_GPIO_Init+0x324>)
 80035e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e6:	4a65      	ldr	r2, [pc, #404]	; (800377c <HAL_GPIO_Init+0x324>)
 80035e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035ec:	6453      	str	r3, [r2, #68]	; 0x44
 80035ee:	4b63      	ldr	r3, [pc, #396]	; (800377c <HAL_GPIO_Init+0x324>)
 80035f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80035fa:	4a61      	ldr	r2, [pc, #388]	; (8003780 <HAL_GPIO_Init+0x328>)
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	089b      	lsrs	r3, r3, #2
 8003600:	3302      	adds	r3, #2
 8003602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003606:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	f003 0303 	and.w	r3, r3, #3
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	220f      	movs	r2, #15
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	43db      	mvns	r3, r3
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	4013      	ands	r3, r2
 800361c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a58      	ldr	r2, [pc, #352]	; (8003784 <HAL_GPIO_Init+0x32c>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d037      	beq.n	8003696 <HAL_GPIO_Init+0x23e>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a57      	ldr	r2, [pc, #348]	; (8003788 <HAL_GPIO_Init+0x330>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d031      	beq.n	8003692 <HAL_GPIO_Init+0x23a>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a56      	ldr	r2, [pc, #344]	; (800378c <HAL_GPIO_Init+0x334>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d02b      	beq.n	800368e <HAL_GPIO_Init+0x236>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a55      	ldr	r2, [pc, #340]	; (8003790 <HAL_GPIO_Init+0x338>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d025      	beq.n	800368a <HAL_GPIO_Init+0x232>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a54      	ldr	r2, [pc, #336]	; (8003794 <HAL_GPIO_Init+0x33c>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d01f      	beq.n	8003686 <HAL_GPIO_Init+0x22e>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a53      	ldr	r2, [pc, #332]	; (8003798 <HAL_GPIO_Init+0x340>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d019      	beq.n	8003682 <HAL_GPIO_Init+0x22a>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a52      	ldr	r2, [pc, #328]	; (800379c <HAL_GPIO_Init+0x344>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d013      	beq.n	800367e <HAL_GPIO_Init+0x226>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a51      	ldr	r2, [pc, #324]	; (80037a0 <HAL_GPIO_Init+0x348>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d00d      	beq.n	800367a <HAL_GPIO_Init+0x222>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a50      	ldr	r2, [pc, #320]	; (80037a4 <HAL_GPIO_Init+0x34c>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d007      	beq.n	8003676 <HAL_GPIO_Init+0x21e>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a4f      	ldr	r2, [pc, #316]	; (80037a8 <HAL_GPIO_Init+0x350>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d101      	bne.n	8003672 <HAL_GPIO_Init+0x21a>
 800366e:	2309      	movs	r3, #9
 8003670:	e012      	b.n	8003698 <HAL_GPIO_Init+0x240>
 8003672:	230a      	movs	r3, #10
 8003674:	e010      	b.n	8003698 <HAL_GPIO_Init+0x240>
 8003676:	2308      	movs	r3, #8
 8003678:	e00e      	b.n	8003698 <HAL_GPIO_Init+0x240>
 800367a:	2307      	movs	r3, #7
 800367c:	e00c      	b.n	8003698 <HAL_GPIO_Init+0x240>
 800367e:	2306      	movs	r3, #6
 8003680:	e00a      	b.n	8003698 <HAL_GPIO_Init+0x240>
 8003682:	2305      	movs	r3, #5
 8003684:	e008      	b.n	8003698 <HAL_GPIO_Init+0x240>
 8003686:	2304      	movs	r3, #4
 8003688:	e006      	b.n	8003698 <HAL_GPIO_Init+0x240>
 800368a:	2303      	movs	r3, #3
 800368c:	e004      	b.n	8003698 <HAL_GPIO_Init+0x240>
 800368e:	2302      	movs	r3, #2
 8003690:	e002      	b.n	8003698 <HAL_GPIO_Init+0x240>
 8003692:	2301      	movs	r3, #1
 8003694:	e000      	b.n	8003698 <HAL_GPIO_Init+0x240>
 8003696:	2300      	movs	r3, #0
 8003698:	69fa      	ldr	r2, [r7, #28]
 800369a:	f002 0203 	and.w	r2, r2, #3
 800369e:	0092      	lsls	r2, r2, #2
 80036a0:	4093      	lsls	r3, r2
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80036a8:	4935      	ldr	r1, [pc, #212]	; (8003780 <HAL_GPIO_Init+0x328>)
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	089b      	lsrs	r3, r3, #2
 80036ae:	3302      	adds	r3, #2
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036b6:	4b3d      	ldr	r3, [pc, #244]	; (80037ac <HAL_GPIO_Init+0x354>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	43db      	mvns	r3, r3
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	4013      	ands	r3, r2
 80036c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036da:	4a34      	ldr	r2, [pc, #208]	; (80037ac <HAL_GPIO_Init+0x354>)
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036e0:	4b32      	ldr	r3, [pc, #200]	; (80037ac <HAL_GPIO_Init+0x354>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	43db      	mvns	r3, r3
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	4013      	ands	r3, r2
 80036ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d003      	beq.n	8003704 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	4313      	orrs	r3, r2
 8003702:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003704:	4a29      	ldr	r2, [pc, #164]	; (80037ac <HAL_GPIO_Init+0x354>)
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800370a:	4b28      	ldr	r3, [pc, #160]	; (80037ac <HAL_GPIO_Init+0x354>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	43db      	mvns	r3, r3
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	4013      	ands	r3, r2
 8003718:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	4313      	orrs	r3, r2
 800372c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800372e:	4a1f      	ldr	r2, [pc, #124]	; (80037ac <HAL_GPIO_Init+0x354>)
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003734:	4b1d      	ldr	r3, [pc, #116]	; (80037ac <HAL_GPIO_Init+0x354>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	43db      	mvns	r3, r3
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	4013      	ands	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d003      	beq.n	8003758 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	4313      	orrs	r3, r2
 8003756:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003758:	4a14      	ldr	r2, [pc, #80]	; (80037ac <HAL_GPIO_Init+0x354>)
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	3301      	adds	r3, #1
 8003762:	61fb      	str	r3, [r7, #28]
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	2b0f      	cmp	r3, #15
 8003768:	f67f ae86 	bls.w	8003478 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800376c:	bf00      	nop
 800376e:	bf00      	nop
 8003770:	3724      	adds	r7, #36	; 0x24
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	40023800 	.word	0x40023800
 8003780:	40013800 	.word	0x40013800
 8003784:	40020000 	.word	0x40020000
 8003788:	40020400 	.word	0x40020400
 800378c:	40020800 	.word	0x40020800
 8003790:	40020c00 	.word	0x40020c00
 8003794:	40021000 	.word	0x40021000
 8003798:	40021400 	.word	0x40021400
 800379c:	40021800 	.word	0x40021800
 80037a0:	40021c00 	.word	0x40021c00
 80037a4:	40022000 	.word	0x40022000
 80037a8:	40022400 	.word	0x40022400
 80037ac:	40013c00 	.word	0x40013c00

080037b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	460b      	mov	r3, r1
 80037ba:	807b      	strh	r3, [r7, #2]
 80037bc:	4613      	mov	r3, r2
 80037be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037c0:	787b      	ldrb	r3, [r7, #1]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037c6:	887a      	ldrh	r2, [r7, #2]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80037cc:	e003      	b.n	80037d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80037ce:	887b      	ldrh	r3, [r7, #2]
 80037d0:	041a      	lsls	r2, r3, #16
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	619a      	str	r2, [r3, #24]
}
 80037d6:	bf00      	nop
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
	...

080037e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e07f      	b.n	80038f6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d106      	bne.n	8003810 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7fd fc16 	bl	800103c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2224      	movs	r2, #36	; 0x24
 8003814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0201 	bic.w	r2, r2, #1
 8003826:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003834:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003844:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d107      	bne.n	800385e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689a      	ldr	r2, [r3, #8]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800385a:	609a      	str	r2, [r3, #8]
 800385c:	e006      	b.n	800386c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800386a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	2b02      	cmp	r3, #2
 8003872:	d104      	bne.n	800387e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800387c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6859      	ldr	r1, [r3, #4]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	4b1d      	ldr	r3, [pc, #116]	; (8003900 <HAL_I2C_Init+0x11c>)
 800388a:	430b      	orrs	r3, r1
 800388c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800389c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	691a      	ldr	r2, [r3, #16]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	430a      	orrs	r2, r1
 80038b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	69d9      	ldr	r1, [r3, #28]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a1a      	ldr	r2, [r3, #32]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f042 0201 	orr.w	r2, r2, #1
 80038d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2220      	movs	r2, #32
 80038e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	02008000 	.word	0x02008000

08003904 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b20      	cmp	r3, #32
 8003918:	d138      	bne.n	800398c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003920:	2b01      	cmp	r3, #1
 8003922:	d101      	bne.n	8003928 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003924:	2302      	movs	r3, #2
 8003926:	e032      	b.n	800398e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2224      	movs	r2, #36	; 0x24
 8003934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0201 	bic.w	r2, r2, #1
 8003946:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003956:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6819      	ldr	r1, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	430a      	orrs	r2, r1
 8003966:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 0201 	orr.w	r2, r2, #1
 8003976:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2220      	movs	r2, #32
 800397c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003988:	2300      	movs	r3, #0
 800398a:	e000      	b.n	800398e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800398c:	2302      	movs	r3, #2
  }
}
 800398e:	4618      	mov	r0, r3
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800399a:	b480      	push	{r7}
 800399c:	b085      	sub	sp, #20
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
 80039a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b20      	cmp	r3, #32
 80039ae:	d139      	bne.n	8003a24 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d101      	bne.n	80039be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039ba:	2302      	movs	r3, #2
 80039bc:	e033      	b.n	8003a26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2224      	movs	r2, #36	; 0x24
 80039ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 0201 	bic.w	r2, r2, #1
 80039dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	021b      	lsls	r3, r3, #8
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f042 0201 	orr.w	r2, r2, #1
 8003a0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2220      	movs	r2, #32
 8003a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a20:	2300      	movs	r3, #0
 8003a22:	e000      	b.n	8003a26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a24:	2302      	movs	r3, #2
  }
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
	...

08003a34 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a3e:	4b23      	ldr	r3, [pc, #140]	; (8003acc <HAL_PWREx_EnableOverDrive+0x98>)
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	4a22      	ldr	r2, [pc, #136]	; (8003acc <HAL_PWREx_EnableOverDrive+0x98>)
 8003a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a48:	6413      	str	r3, [r2, #64]	; 0x40
 8003a4a:	4b20      	ldr	r3, [pc, #128]	; (8003acc <HAL_PWREx_EnableOverDrive+0x98>)
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a52:	603b      	str	r3, [r7, #0]
 8003a54:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003a56:	4b1e      	ldr	r3, [pc, #120]	; (8003ad0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a1d      	ldr	r2, [pc, #116]	; (8003ad0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a60:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a62:	f7fe f941 	bl	8001ce8 <HAL_GetTick>
 8003a66:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a68:	e009      	b.n	8003a7e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a6a:	f7fe f93d 	bl	8001ce8 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a78:	d901      	bls.n	8003a7e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e022      	b.n	8003ac4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a7e:	4b14      	ldr	r3, [pc, #80]	; (8003ad0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a8a:	d1ee      	bne.n	8003a6a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003a8c:	4b10      	ldr	r3, [pc, #64]	; (8003ad0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a0f      	ldr	r2, [pc, #60]	; (8003ad0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a96:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a98:	f7fe f926 	bl	8001ce8 <HAL_GetTick>
 8003a9c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a9e:	e009      	b.n	8003ab4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003aa0:	f7fe f922 	bl	8001ce8 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003aae:	d901      	bls.n	8003ab4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e007      	b.n	8003ac4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ab4:	4b06      	ldr	r3, [pc, #24]	; (8003ad0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003abc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ac0:	d1ee      	bne.n	8003aa0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	40023800 	.word	0x40023800
 8003ad0:	40007000 	.word	0x40007000

08003ad4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003adc:	2300      	movs	r3, #0
 8003ade:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e29b      	b.n	8004022 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f000 8087 	beq.w	8003c06 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003af8:	4b96      	ldr	r3, [pc, #600]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f003 030c 	and.w	r3, r3, #12
 8003b00:	2b04      	cmp	r3, #4
 8003b02:	d00c      	beq.n	8003b1e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b04:	4b93      	ldr	r3, [pc, #588]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f003 030c 	and.w	r3, r3, #12
 8003b0c:	2b08      	cmp	r3, #8
 8003b0e:	d112      	bne.n	8003b36 <HAL_RCC_OscConfig+0x62>
 8003b10:	4b90      	ldr	r3, [pc, #576]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b1c:	d10b      	bne.n	8003b36 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b1e:	4b8d      	ldr	r3, [pc, #564]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d06c      	beq.n	8003c04 <HAL_RCC_OscConfig+0x130>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d168      	bne.n	8003c04 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e275      	b.n	8004022 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b3e:	d106      	bne.n	8003b4e <HAL_RCC_OscConfig+0x7a>
 8003b40:	4b84      	ldr	r3, [pc, #528]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a83      	ldr	r2, [pc, #524]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003b46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b4a:	6013      	str	r3, [r2, #0]
 8003b4c:	e02e      	b.n	8003bac <HAL_RCC_OscConfig+0xd8>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10c      	bne.n	8003b70 <HAL_RCC_OscConfig+0x9c>
 8003b56:	4b7f      	ldr	r3, [pc, #508]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a7e      	ldr	r2, [pc, #504]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	4b7c      	ldr	r3, [pc, #496]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a7b      	ldr	r2, [pc, #492]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003b68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b6c:	6013      	str	r3, [r2, #0]
 8003b6e:	e01d      	b.n	8003bac <HAL_RCC_OscConfig+0xd8>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b78:	d10c      	bne.n	8003b94 <HAL_RCC_OscConfig+0xc0>
 8003b7a:	4b76      	ldr	r3, [pc, #472]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a75      	ldr	r2, [pc, #468]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003b80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b84:	6013      	str	r3, [r2, #0]
 8003b86:	4b73      	ldr	r3, [pc, #460]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a72      	ldr	r2, [pc, #456]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b90:	6013      	str	r3, [r2, #0]
 8003b92:	e00b      	b.n	8003bac <HAL_RCC_OscConfig+0xd8>
 8003b94:	4b6f      	ldr	r3, [pc, #444]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a6e      	ldr	r2, [pc, #440]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b9e:	6013      	str	r3, [r2, #0]
 8003ba0:	4b6c      	ldr	r3, [pc, #432]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a6b      	ldr	r2, [pc, #428]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003ba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003baa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d013      	beq.n	8003bdc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb4:	f7fe f898 	bl	8001ce8 <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bbc:	f7fe f894 	bl	8001ce8 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b64      	cmp	r3, #100	; 0x64
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e229      	b.n	8004022 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bce:	4b61      	ldr	r3, [pc, #388]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0f0      	beq.n	8003bbc <HAL_RCC_OscConfig+0xe8>
 8003bda:	e014      	b.n	8003c06 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bdc:	f7fe f884 	bl	8001ce8 <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003be4:	f7fe f880 	bl	8001ce8 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b64      	cmp	r3, #100	; 0x64
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e215      	b.n	8004022 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bf6:	4b57      	ldr	r3, [pc, #348]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1f0      	bne.n	8003be4 <HAL_RCC_OscConfig+0x110>
 8003c02:	e000      	b.n	8003c06 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d069      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c12:	4b50      	ldr	r3, [pc, #320]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 030c 	and.w	r3, r3, #12
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00b      	beq.n	8003c36 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c1e:	4b4d      	ldr	r3, [pc, #308]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 030c 	and.w	r3, r3, #12
 8003c26:	2b08      	cmp	r3, #8
 8003c28:	d11c      	bne.n	8003c64 <HAL_RCC_OscConfig+0x190>
 8003c2a:	4b4a      	ldr	r3, [pc, #296]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d116      	bne.n	8003c64 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c36:	4b47      	ldr	r3, [pc, #284]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d005      	beq.n	8003c4e <HAL_RCC_OscConfig+0x17a>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d001      	beq.n	8003c4e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e1e9      	b.n	8004022 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c4e:	4b41      	ldr	r3, [pc, #260]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	493d      	ldr	r1, [pc, #244]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c62:	e040      	b.n	8003ce6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d023      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c6c:	4b39      	ldr	r3, [pc, #228]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a38      	ldr	r2, [pc, #224]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003c72:	f043 0301 	orr.w	r3, r3, #1
 8003c76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c78:	f7fe f836 	bl	8001ce8 <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c80:	f7fe f832 	bl	8001ce8 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e1c7      	b.n	8004022 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c92:	4b30      	ldr	r3, [pc, #192]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0f0      	beq.n	8003c80 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c9e:	4b2d      	ldr	r3, [pc, #180]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	4929      	ldr	r1, [pc, #164]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	600b      	str	r3, [r1, #0]
 8003cb2:	e018      	b.n	8003ce6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cb4:	4b27      	ldr	r3, [pc, #156]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a26      	ldr	r2, [pc, #152]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003cba:	f023 0301 	bic.w	r3, r3, #1
 8003cbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc0:	f7fe f812 	bl	8001ce8 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cc8:	f7fe f80e 	bl	8001ce8 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e1a3      	b.n	8004022 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cda:	4b1e      	ldr	r3, [pc, #120]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1f0      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0308 	and.w	r3, r3, #8
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d038      	beq.n	8003d64 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d019      	beq.n	8003d2e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cfa:	4b16      	ldr	r3, [pc, #88]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cfe:	4a15      	ldr	r2, [pc, #84]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003d00:	f043 0301 	orr.w	r3, r3, #1
 8003d04:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d06:	f7fd ffef 	bl	8001ce8 <HAL_GetTick>
 8003d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d0c:	e008      	b.n	8003d20 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d0e:	f7fd ffeb 	bl	8001ce8 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e180      	b.n	8004022 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d20:	4b0c      	ldr	r3, [pc, #48]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003d22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d0f0      	beq.n	8003d0e <HAL_RCC_OscConfig+0x23a>
 8003d2c:	e01a      	b.n	8003d64 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d2e:	4b09      	ldr	r3, [pc, #36]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d32:	4a08      	ldr	r2, [pc, #32]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003d34:	f023 0301 	bic.w	r3, r3, #1
 8003d38:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d3a:	f7fd ffd5 	bl	8001ce8 <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d40:	e00a      	b.n	8003d58 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d42:	f7fd ffd1 	bl	8001ce8 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d903      	bls.n	8003d58 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e166      	b.n	8004022 <HAL_RCC_OscConfig+0x54e>
 8003d54:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d58:	4b92      	ldr	r3, [pc, #584]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003d5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1ee      	bne.n	8003d42 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 80a4 	beq.w	8003eba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d72:	4b8c      	ldr	r3, [pc, #560]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10d      	bne.n	8003d9a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d7e:	4b89      	ldr	r3, [pc, #548]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	4a88      	ldr	r2, [pc, #544]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d88:	6413      	str	r3, [r2, #64]	; 0x40
 8003d8a:	4b86      	ldr	r3, [pc, #536]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d92:	60bb      	str	r3, [r7, #8]
 8003d94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d96:	2301      	movs	r3, #1
 8003d98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d9a:	4b83      	ldr	r3, [pc, #524]	; (8003fa8 <HAL_RCC_OscConfig+0x4d4>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d118      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003da6:	4b80      	ldr	r3, [pc, #512]	; (8003fa8 <HAL_RCC_OscConfig+0x4d4>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a7f      	ldr	r2, [pc, #508]	; (8003fa8 <HAL_RCC_OscConfig+0x4d4>)
 8003dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003db0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003db2:	f7fd ff99 	bl	8001ce8 <HAL_GetTick>
 8003db6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003db8:	e008      	b.n	8003dcc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dba:	f7fd ff95 	bl	8001ce8 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b64      	cmp	r3, #100	; 0x64
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e12a      	b.n	8004022 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dcc:	4b76      	ldr	r3, [pc, #472]	; (8003fa8 <HAL_RCC_OscConfig+0x4d4>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0f0      	beq.n	8003dba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d106      	bne.n	8003dee <HAL_RCC_OscConfig+0x31a>
 8003de0:	4b70      	ldr	r3, [pc, #448]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de4:	4a6f      	ldr	r2, [pc, #444]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003de6:	f043 0301 	orr.w	r3, r3, #1
 8003dea:	6713      	str	r3, [r2, #112]	; 0x70
 8003dec:	e02d      	b.n	8003e4a <HAL_RCC_OscConfig+0x376>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10c      	bne.n	8003e10 <HAL_RCC_OscConfig+0x33c>
 8003df6:	4b6b      	ldr	r3, [pc, #428]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfa:	4a6a      	ldr	r2, [pc, #424]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003dfc:	f023 0301 	bic.w	r3, r3, #1
 8003e00:	6713      	str	r3, [r2, #112]	; 0x70
 8003e02:	4b68      	ldr	r3, [pc, #416]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e06:	4a67      	ldr	r2, [pc, #412]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003e08:	f023 0304 	bic.w	r3, r3, #4
 8003e0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e0e:	e01c      	b.n	8003e4a <HAL_RCC_OscConfig+0x376>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	2b05      	cmp	r3, #5
 8003e16:	d10c      	bne.n	8003e32 <HAL_RCC_OscConfig+0x35e>
 8003e18:	4b62      	ldr	r3, [pc, #392]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1c:	4a61      	ldr	r2, [pc, #388]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003e1e:	f043 0304 	orr.w	r3, r3, #4
 8003e22:	6713      	str	r3, [r2, #112]	; 0x70
 8003e24:	4b5f      	ldr	r3, [pc, #380]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e28:	4a5e      	ldr	r2, [pc, #376]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003e2a:	f043 0301 	orr.w	r3, r3, #1
 8003e2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e30:	e00b      	b.n	8003e4a <HAL_RCC_OscConfig+0x376>
 8003e32:	4b5c      	ldr	r3, [pc, #368]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e36:	4a5b      	ldr	r2, [pc, #364]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003e38:	f023 0301 	bic.w	r3, r3, #1
 8003e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e3e:	4b59      	ldr	r3, [pc, #356]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e42:	4a58      	ldr	r2, [pc, #352]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003e44:	f023 0304 	bic.w	r3, r3, #4
 8003e48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d015      	beq.n	8003e7e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e52:	f7fd ff49 	bl	8001ce8 <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e58:	e00a      	b.n	8003e70 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e5a:	f7fd ff45 	bl	8001ce8 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d901      	bls.n	8003e70 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e0d8      	b.n	8004022 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e70:	4b4c      	ldr	r3, [pc, #304]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d0ee      	beq.n	8003e5a <HAL_RCC_OscConfig+0x386>
 8003e7c:	e014      	b.n	8003ea8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e7e:	f7fd ff33 	bl	8001ce8 <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e84:	e00a      	b.n	8003e9c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e86:	f7fd ff2f 	bl	8001ce8 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e0c2      	b.n	8004022 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e9c:	4b41      	ldr	r3, [pc, #260]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1ee      	bne.n	8003e86 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ea8:	7dfb      	ldrb	r3, [r7, #23]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d105      	bne.n	8003eba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eae:	4b3d      	ldr	r3, [pc, #244]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	4a3c      	ldr	r2, [pc, #240]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f000 80ae 	beq.w	8004020 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ec4:	4b37      	ldr	r3, [pc, #220]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f003 030c 	and.w	r3, r3, #12
 8003ecc:	2b08      	cmp	r3, #8
 8003ece:	d06d      	beq.n	8003fac <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d14b      	bne.n	8003f70 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed8:	4b32      	ldr	r3, [pc, #200]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a31      	ldr	r2, [pc, #196]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003ede:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ee2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee4:	f7fd ff00 	bl	8001ce8 <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eea:	e008      	b.n	8003efe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eec:	f7fd fefc 	bl	8001ce8 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e091      	b.n	8004022 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003efe:	4b29      	ldr	r3, [pc, #164]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1f0      	bne.n	8003eec <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	69da      	ldr	r2, [r3, #28]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	019b      	lsls	r3, r3, #6
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f20:	085b      	lsrs	r3, r3, #1
 8003f22:	3b01      	subs	r3, #1
 8003f24:	041b      	lsls	r3, r3, #16
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2c:	061b      	lsls	r3, r3, #24
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f34:	071b      	lsls	r3, r3, #28
 8003f36:	491b      	ldr	r1, [pc, #108]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f3c:	4b19      	ldr	r3, [pc, #100]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a18      	ldr	r2, [pc, #96]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003f42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f48:	f7fd fece 	bl	8001ce8 <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f50:	f7fd feca 	bl	8001ce8 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e05f      	b.n	8004022 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f62:	4b10      	ldr	r3, [pc, #64]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d0f0      	beq.n	8003f50 <HAL_RCC_OscConfig+0x47c>
 8003f6e:	e057      	b.n	8004020 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f70:	4b0c      	ldr	r3, [pc, #48]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a0b      	ldr	r2, [pc, #44]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003f76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7c:	f7fd feb4 	bl	8001ce8 <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f84:	f7fd feb0 	bl	8001ce8 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e045      	b.n	8004022 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f96:	4b03      	ldr	r3, [pc, #12]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1f0      	bne.n	8003f84 <HAL_RCC_OscConfig+0x4b0>
 8003fa2:	e03d      	b.n	8004020 <HAL_RCC_OscConfig+0x54c>
 8003fa4:	40023800 	.word	0x40023800
 8003fa8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003fac:	4b1f      	ldr	r3, [pc, #124]	; (800402c <HAL_RCC_OscConfig+0x558>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d030      	beq.n	800401c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d129      	bne.n	800401c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d122      	bne.n	800401c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fdc:	4013      	ands	r3, r2
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fe2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d119      	bne.n	800401c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff2:	085b      	lsrs	r3, r3, #1
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d10f      	bne.n	800401c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004006:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004008:	429a      	cmp	r2, r3
 800400a:	d107      	bne.n	800401c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004016:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004018:	429a      	cmp	r2, r3
 800401a:	d001      	beq.n	8004020 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e000      	b.n	8004022 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3718      	adds	r7, #24
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	40023800 	.word	0x40023800

08004030 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800403a:	2300      	movs	r3, #0
 800403c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e0d0      	b.n	80041ea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004048:	4b6a      	ldr	r3, [pc, #424]	; (80041f4 <HAL_RCC_ClockConfig+0x1c4>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 030f 	and.w	r3, r3, #15
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	429a      	cmp	r2, r3
 8004054:	d910      	bls.n	8004078 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004056:	4b67      	ldr	r3, [pc, #412]	; (80041f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f023 020f 	bic.w	r2, r3, #15
 800405e:	4965      	ldr	r1, [pc, #404]	; (80041f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	4313      	orrs	r3, r2
 8004064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004066:	4b63      	ldr	r3, [pc, #396]	; (80041f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 030f 	and.w	r3, r3, #15
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	429a      	cmp	r2, r3
 8004072:	d001      	beq.n	8004078 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e0b8      	b.n	80041ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d020      	beq.n	80040c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0304 	and.w	r3, r3, #4
 800408c:	2b00      	cmp	r3, #0
 800408e:	d005      	beq.n	800409c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004090:	4b59      	ldr	r3, [pc, #356]	; (80041f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	4a58      	ldr	r2, [pc, #352]	; (80041f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004096:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800409a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0308 	and.w	r3, r3, #8
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d005      	beq.n	80040b4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040a8:	4b53      	ldr	r3, [pc, #332]	; (80041f8 <HAL_RCC_ClockConfig+0x1c8>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	4a52      	ldr	r2, [pc, #328]	; (80041f8 <HAL_RCC_ClockConfig+0x1c8>)
 80040ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040b4:	4b50      	ldr	r3, [pc, #320]	; (80041f8 <HAL_RCC_ClockConfig+0x1c8>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	494d      	ldr	r1, [pc, #308]	; (80041f8 <HAL_RCC_ClockConfig+0x1c8>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d040      	beq.n	8004154 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d107      	bne.n	80040ea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040da:	4b47      	ldr	r3, [pc, #284]	; (80041f8 <HAL_RCC_ClockConfig+0x1c8>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d115      	bne.n	8004112 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e07f      	b.n	80041ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d107      	bne.n	8004102 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040f2:	4b41      	ldr	r3, [pc, #260]	; (80041f8 <HAL_RCC_ClockConfig+0x1c8>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d109      	bne.n	8004112 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e073      	b.n	80041ea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004102:	4b3d      	ldr	r3, [pc, #244]	; (80041f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e06b      	b.n	80041ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004112:	4b39      	ldr	r3, [pc, #228]	; (80041f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f023 0203 	bic.w	r2, r3, #3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	4936      	ldr	r1, [pc, #216]	; (80041f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004120:	4313      	orrs	r3, r2
 8004122:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004124:	f7fd fde0 	bl	8001ce8 <HAL_GetTick>
 8004128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800412a:	e00a      	b.n	8004142 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800412c:	f7fd fddc 	bl	8001ce8 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	f241 3288 	movw	r2, #5000	; 0x1388
 800413a:	4293      	cmp	r3, r2
 800413c:	d901      	bls.n	8004142 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e053      	b.n	80041ea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004142:	4b2d      	ldr	r3, [pc, #180]	; (80041f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 020c 	and.w	r2, r3, #12
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	429a      	cmp	r2, r3
 8004152:	d1eb      	bne.n	800412c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004154:	4b27      	ldr	r3, [pc, #156]	; (80041f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 030f 	and.w	r3, r3, #15
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	429a      	cmp	r2, r3
 8004160:	d210      	bcs.n	8004184 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004162:	4b24      	ldr	r3, [pc, #144]	; (80041f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f023 020f 	bic.w	r2, r3, #15
 800416a:	4922      	ldr	r1, [pc, #136]	; (80041f4 <HAL_RCC_ClockConfig+0x1c4>)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	4313      	orrs	r3, r2
 8004170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004172:	4b20      	ldr	r3, [pc, #128]	; (80041f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 030f 	and.w	r3, r3, #15
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	429a      	cmp	r2, r3
 800417e:	d001      	beq.n	8004184 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e032      	b.n	80041ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	2b00      	cmp	r3, #0
 800418e:	d008      	beq.n	80041a2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004190:	4b19      	ldr	r3, [pc, #100]	; (80041f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	4916      	ldr	r1, [pc, #88]	; (80041f8 <HAL_RCC_ClockConfig+0x1c8>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0308 	and.w	r3, r3, #8
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d009      	beq.n	80041c2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041ae:	4b12      	ldr	r3, [pc, #72]	; (80041f8 <HAL_RCC_ClockConfig+0x1c8>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	490e      	ldr	r1, [pc, #56]	; (80041f8 <HAL_RCC_ClockConfig+0x1c8>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041c2:	f000 f821 	bl	8004208 <HAL_RCC_GetSysClockFreq>
 80041c6:	4602      	mov	r2, r0
 80041c8:	4b0b      	ldr	r3, [pc, #44]	; (80041f8 <HAL_RCC_ClockConfig+0x1c8>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	091b      	lsrs	r3, r3, #4
 80041ce:	f003 030f 	and.w	r3, r3, #15
 80041d2:	490a      	ldr	r1, [pc, #40]	; (80041fc <HAL_RCC_ClockConfig+0x1cc>)
 80041d4:	5ccb      	ldrb	r3, [r1, r3]
 80041d6:	fa22 f303 	lsr.w	r3, r2, r3
 80041da:	4a09      	ldr	r2, [pc, #36]	; (8004200 <HAL_RCC_ClockConfig+0x1d0>)
 80041dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80041de:	4b09      	ldr	r3, [pc, #36]	; (8004204 <HAL_RCC_ClockConfig+0x1d4>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fd f85e 	bl	80012a4 <HAL_InitTick>

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	40023c00 	.word	0x40023c00
 80041f8:	40023800 	.word	0x40023800
 80041fc:	08009650 	.word	0x08009650
 8004200:	20000000 	.word	0x20000000
 8004204:	20000004 	.word	0x20000004

08004208 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004208:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800420c:	b090      	sub	sp, #64	; 0x40
 800420e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004210:	2300      	movs	r3, #0
 8004212:	637b      	str	r3, [r7, #52]	; 0x34
 8004214:	2300      	movs	r3, #0
 8004216:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004218:	2300      	movs	r3, #0
 800421a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800421c:	2300      	movs	r3, #0
 800421e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004220:	4b59      	ldr	r3, [pc, #356]	; (8004388 <HAL_RCC_GetSysClockFreq+0x180>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f003 030c 	and.w	r3, r3, #12
 8004228:	2b08      	cmp	r3, #8
 800422a:	d00d      	beq.n	8004248 <HAL_RCC_GetSysClockFreq+0x40>
 800422c:	2b08      	cmp	r3, #8
 800422e:	f200 80a1 	bhi.w	8004374 <HAL_RCC_GetSysClockFreq+0x16c>
 8004232:	2b00      	cmp	r3, #0
 8004234:	d002      	beq.n	800423c <HAL_RCC_GetSysClockFreq+0x34>
 8004236:	2b04      	cmp	r3, #4
 8004238:	d003      	beq.n	8004242 <HAL_RCC_GetSysClockFreq+0x3a>
 800423a:	e09b      	b.n	8004374 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800423c:	4b53      	ldr	r3, [pc, #332]	; (800438c <HAL_RCC_GetSysClockFreq+0x184>)
 800423e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004240:	e09b      	b.n	800437a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004242:	4b53      	ldr	r3, [pc, #332]	; (8004390 <HAL_RCC_GetSysClockFreq+0x188>)
 8004244:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004246:	e098      	b.n	800437a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004248:	4b4f      	ldr	r3, [pc, #316]	; (8004388 <HAL_RCC_GetSysClockFreq+0x180>)
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004250:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004252:	4b4d      	ldr	r3, [pc, #308]	; (8004388 <HAL_RCC_GetSysClockFreq+0x180>)
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d028      	beq.n	80042b0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800425e:	4b4a      	ldr	r3, [pc, #296]	; (8004388 <HAL_RCC_GetSysClockFreq+0x180>)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	099b      	lsrs	r3, r3, #6
 8004264:	2200      	movs	r2, #0
 8004266:	623b      	str	r3, [r7, #32]
 8004268:	627a      	str	r2, [r7, #36]	; 0x24
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004270:	2100      	movs	r1, #0
 8004272:	4b47      	ldr	r3, [pc, #284]	; (8004390 <HAL_RCC_GetSysClockFreq+0x188>)
 8004274:	fb03 f201 	mul.w	r2, r3, r1
 8004278:	2300      	movs	r3, #0
 800427a:	fb00 f303 	mul.w	r3, r0, r3
 800427e:	4413      	add	r3, r2
 8004280:	4a43      	ldr	r2, [pc, #268]	; (8004390 <HAL_RCC_GetSysClockFreq+0x188>)
 8004282:	fba0 1202 	umull	r1, r2, r0, r2
 8004286:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004288:	460a      	mov	r2, r1
 800428a:	62ba      	str	r2, [r7, #40]	; 0x28
 800428c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800428e:	4413      	add	r3, r2
 8004290:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004294:	2200      	movs	r2, #0
 8004296:	61bb      	str	r3, [r7, #24]
 8004298:	61fa      	str	r2, [r7, #28]
 800429a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800429e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80042a2:	f7fb ffcd 	bl	8000240 <__aeabi_uldivmod>
 80042a6:	4602      	mov	r2, r0
 80042a8:	460b      	mov	r3, r1
 80042aa:	4613      	mov	r3, r2
 80042ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042ae:	e053      	b.n	8004358 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042b0:	4b35      	ldr	r3, [pc, #212]	; (8004388 <HAL_RCC_GetSysClockFreq+0x180>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	099b      	lsrs	r3, r3, #6
 80042b6:	2200      	movs	r2, #0
 80042b8:	613b      	str	r3, [r7, #16]
 80042ba:	617a      	str	r2, [r7, #20]
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80042c2:	f04f 0b00 	mov.w	fp, #0
 80042c6:	4652      	mov	r2, sl
 80042c8:	465b      	mov	r3, fp
 80042ca:	f04f 0000 	mov.w	r0, #0
 80042ce:	f04f 0100 	mov.w	r1, #0
 80042d2:	0159      	lsls	r1, r3, #5
 80042d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042d8:	0150      	lsls	r0, r2, #5
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	ebb2 080a 	subs.w	r8, r2, sl
 80042e2:	eb63 090b 	sbc.w	r9, r3, fp
 80042e6:	f04f 0200 	mov.w	r2, #0
 80042ea:	f04f 0300 	mov.w	r3, #0
 80042ee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80042f2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80042f6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80042fa:	ebb2 0408 	subs.w	r4, r2, r8
 80042fe:	eb63 0509 	sbc.w	r5, r3, r9
 8004302:	f04f 0200 	mov.w	r2, #0
 8004306:	f04f 0300 	mov.w	r3, #0
 800430a:	00eb      	lsls	r3, r5, #3
 800430c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004310:	00e2      	lsls	r2, r4, #3
 8004312:	4614      	mov	r4, r2
 8004314:	461d      	mov	r5, r3
 8004316:	eb14 030a 	adds.w	r3, r4, sl
 800431a:	603b      	str	r3, [r7, #0]
 800431c:	eb45 030b 	adc.w	r3, r5, fp
 8004320:	607b      	str	r3, [r7, #4]
 8004322:	f04f 0200 	mov.w	r2, #0
 8004326:	f04f 0300 	mov.w	r3, #0
 800432a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800432e:	4629      	mov	r1, r5
 8004330:	028b      	lsls	r3, r1, #10
 8004332:	4621      	mov	r1, r4
 8004334:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004338:	4621      	mov	r1, r4
 800433a:	028a      	lsls	r2, r1, #10
 800433c:	4610      	mov	r0, r2
 800433e:	4619      	mov	r1, r3
 8004340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004342:	2200      	movs	r2, #0
 8004344:	60bb      	str	r3, [r7, #8]
 8004346:	60fa      	str	r2, [r7, #12]
 8004348:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800434c:	f7fb ff78 	bl	8000240 <__aeabi_uldivmod>
 8004350:	4602      	mov	r2, r0
 8004352:	460b      	mov	r3, r1
 8004354:	4613      	mov	r3, r2
 8004356:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004358:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <HAL_RCC_GetSysClockFreq+0x180>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	0c1b      	lsrs	r3, r3, #16
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	3301      	adds	r3, #1
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004368:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800436a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004370:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004372:	e002      	b.n	800437a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004374:	4b05      	ldr	r3, [pc, #20]	; (800438c <HAL_RCC_GetSysClockFreq+0x184>)
 8004376:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004378:	bf00      	nop
    }
  }
  return sysclockfreq;
 800437a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800437c:	4618      	mov	r0, r3
 800437e:	3740      	adds	r7, #64	; 0x40
 8004380:	46bd      	mov	sp, r7
 8004382:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004386:	bf00      	nop
 8004388:	40023800 	.word	0x40023800
 800438c:	00f42400 	.word	0x00f42400
 8004390:	01312d00 	.word	0x01312d00

08004394 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004394:	b480      	push	{r7}
 8004396:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004398:	4b03      	ldr	r3, [pc, #12]	; (80043a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800439a:	681b      	ldr	r3, [r3, #0]
}
 800439c:	4618      	mov	r0, r3
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	20000000 	.word	0x20000000

080043ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043b0:	f7ff fff0 	bl	8004394 <HAL_RCC_GetHCLKFreq>
 80043b4:	4602      	mov	r2, r0
 80043b6:	4b05      	ldr	r3, [pc, #20]	; (80043cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	0a9b      	lsrs	r3, r3, #10
 80043bc:	f003 0307 	and.w	r3, r3, #7
 80043c0:	4903      	ldr	r1, [pc, #12]	; (80043d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043c2:	5ccb      	ldrb	r3, [r1, r3]
 80043c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	40023800 	.word	0x40023800
 80043d0:	08009660 	.word	0x08009660

080043d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	220f      	movs	r2, #15
 80043e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80043e4:	4b12      	ldr	r3, [pc, #72]	; (8004430 <HAL_RCC_GetClockConfig+0x5c>)
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f003 0203 	and.w	r2, r3, #3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80043f0:	4b0f      	ldr	r3, [pc, #60]	; (8004430 <HAL_RCC_GetClockConfig+0x5c>)
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80043fc:	4b0c      	ldr	r3, [pc, #48]	; (8004430 <HAL_RCC_GetClockConfig+0x5c>)
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004408:	4b09      	ldr	r3, [pc, #36]	; (8004430 <HAL_RCC_GetClockConfig+0x5c>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	08db      	lsrs	r3, r3, #3
 800440e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004416:	4b07      	ldr	r3, [pc, #28]	; (8004434 <HAL_RCC_GetClockConfig+0x60>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 020f 	and.w	r2, r3, #15
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	601a      	str	r2, [r3, #0]
}
 8004422:	bf00      	nop
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	40023800 	.word	0x40023800
 8004434:	40023c00 	.word	0x40023c00

08004438 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b088      	sub	sp, #32
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004440:	2300      	movs	r3, #0
 8004442:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004444:	2300      	movs	r3, #0
 8004446:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004448:	2300      	movs	r3, #0
 800444a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800444c:	2300      	movs	r3, #0
 800444e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004450:	2300      	movs	r3, #0
 8004452:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b00      	cmp	r3, #0
 800445e:	d012      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004460:	4b69      	ldr	r3, [pc, #420]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	4a68      	ldr	r2, [pc, #416]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004466:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800446a:	6093      	str	r3, [r2, #8]
 800446c:	4b66      	ldr	r3, [pc, #408]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800446e:	689a      	ldr	r2, [r3, #8]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004474:	4964      	ldr	r1, [pc, #400]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004476:	4313      	orrs	r3, r2
 8004478:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004482:	2301      	movs	r3, #1
 8004484:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d017      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004492:	4b5d      	ldr	r3, [pc, #372]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004494:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004498:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a0:	4959      	ldr	r1, [pc, #356]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044b0:	d101      	bne.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80044b2:	2301      	movs	r3, #1
 80044b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80044be:	2301      	movs	r3, #1
 80044c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d017      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80044ce:	4b4e      	ldr	r3, [pc, #312]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044dc:	494a      	ldr	r1, [pc, #296]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044ec:	d101      	bne.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80044ee:	2301      	movs	r3, #1
 80044f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80044fa:	2301      	movs	r3, #1
 80044fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800450a:	2301      	movs	r3, #1
 800450c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0320 	and.w	r3, r3, #32
 8004516:	2b00      	cmp	r3, #0
 8004518:	f000 808b 	beq.w	8004632 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800451c:	4b3a      	ldr	r3, [pc, #232]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800451e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004520:	4a39      	ldr	r2, [pc, #228]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004526:	6413      	str	r3, [r2, #64]	; 0x40
 8004528:	4b37      	ldr	r3, [pc, #220]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800452a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004530:	60bb      	str	r3, [r7, #8]
 8004532:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004534:	4b35      	ldr	r3, [pc, #212]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a34      	ldr	r2, [pc, #208]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800453a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800453e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004540:	f7fd fbd2 	bl	8001ce8 <HAL_GetTick>
 8004544:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004546:	e008      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004548:	f7fd fbce 	bl	8001ce8 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b64      	cmp	r3, #100	; 0x64
 8004554:	d901      	bls.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e38f      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800455a:	4b2c      	ldr	r3, [pc, #176]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0f0      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004566:	4b28      	ldr	r3, [pc, #160]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800456e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d035      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	429a      	cmp	r2, r3
 8004582:	d02e      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004584:	4b20      	ldr	r3, [pc, #128]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800458c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800458e:	4b1e      	ldr	r3, [pc, #120]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004592:	4a1d      	ldr	r2, [pc, #116]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004598:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800459a:	4b1b      	ldr	r3, [pc, #108]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800459c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459e:	4a1a      	ldr	r2, [pc, #104]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80045a6:	4a18      	ldr	r2, [pc, #96]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80045ac:	4b16      	ldr	r3, [pc, #88]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d114      	bne.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b8:	f7fd fb96 	bl	8001ce8 <HAL_GetTick>
 80045bc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045be:	e00a      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045c0:	f7fd fb92 	bl	8001ce8 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e351      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d6:	4b0c      	ldr	r3, [pc, #48]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d0ee      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045ee:	d111      	bne.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80045f0:	4b05      	ldr	r3, [pc, #20]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80045fc:	4b04      	ldr	r3, [pc, #16]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80045fe:	400b      	ands	r3, r1
 8004600:	4901      	ldr	r1, [pc, #4]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004602:	4313      	orrs	r3, r2
 8004604:	608b      	str	r3, [r1, #8]
 8004606:	e00b      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004608:	40023800 	.word	0x40023800
 800460c:	40007000 	.word	0x40007000
 8004610:	0ffffcff 	.word	0x0ffffcff
 8004614:	4bac      	ldr	r3, [pc, #688]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	4aab      	ldr	r2, [pc, #684]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800461a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800461e:	6093      	str	r3, [r2, #8]
 8004620:	4ba9      	ldr	r3, [pc, #676]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004622:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800462c:	49a6      	ldr	r1, [pc, #664]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800462e:	4313      	orrs	r3, r2
 8004630:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0310 	and.w	r3, r3, #16
 800463a:	2b00      	cmp	r3, #0
 800463c:	d010      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800463e:	4ba2      	ldr	r3, [pc, #648]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004640:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004644:	4aa0      	ldr	r2, [pc, #640]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004646:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800464a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800464e:	4b9e      	ldr	r3, [pc, #632]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004650:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004658:	499b      	ldr	r1, [pc, #620]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800465a:	4313      	orrs	r3, r2
 800465c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00a      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800466c:	4b96      	ldr	r3, [pc, #600]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800466e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004672:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800467a:	4993      	ldr	r1, [pc, #588]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800467c:	4313      	orrs	r3, r2
 800467e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00a      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800468e:	4b8e      	ldr	r3, [pc, #568]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004694:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800469c:	498a      	ldr	r1, [pc, #552]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00a      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046b0:	4b85      	ldr	r3, [pc, #532]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046be:	4982      	ldr	r1, [pc, #520]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00a      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80046d2:	4b7d      	ldr	r3, [pc, #500]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e0:	4979      	ldr	r1, [pc, #484]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00a      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046f4:	4b74      	ldr	r3, [pc, #464]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046fa:	f023 0203 	bic.w	r2, r3, #3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004702:	4971      	ldr	r1, [pc, #452]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004704:	4313      	orrs	r3, r2
 8004706:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004716:	4b6c      	ldr	r3, [pc, #432]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471c:	f023 020c 	bic.w	r2, r3, #12
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004724:	4968      	ldr	r1, [pc, #416]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004726:	4313      	orrs	r3, r2
 8004728:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00a      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004738:	4b63      	ldr	r3, [pc, #396]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800473a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800473e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004746:	4960      	ldr	r1, [pc, #384]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004748:	4313      	orrs	r3, r2
 800474a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00a      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800475a:	4b5b      	ldr	r3, [pc, #364]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800475c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004760:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004768:	4957      	ldr	r1, [pc, #348]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800476a:	4313      	orrs	r3, r2
 800476c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00a      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800477c:	4b52      	ldr	r3, [pc, #328]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800477e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004782:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478a:	494f      	ldr	r1, [pc, #316]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800478c:	4313      	orrs	r3, r2
 800478e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00a      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800479e:	4b4a      	ldr	r3, [pc, #296]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ac:	4946      	ldr	r1, [pc, #280]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00a      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80047c0:	4b41      	ldr	r3, [pc, #260]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ce:	493e      	ldr	r1, [pc, #248]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00a      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80047e2:	4b39      	ldr	r3, [pc, #228]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047f0:	4935      	ldr	r1, [pc, #212]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00a      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004804:	4b30      	ldr	r3, [pc, #192]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004812:	492d      	ldr	r1, [pc, #180]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004814:	4313      	orrs	r3, r2
 8004816:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d011      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004826:	4b28      	ldr	r3, [pc, #160]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800482c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004834:	4924      	ldr	r1, [pc, #144]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004836:	4313      	orrs	r3, r2
 8004838:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004840:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004844:	d101      	bne.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004846:	2301      	movs	r3, #1
 8004848:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0308 	and.w	r3, r3, #8
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004856:	2301      	movs	r3, #1
 8004858:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00a      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004866:	4b18      	ldr	r3, [pc, #96]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800486c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004874:	4914      	ldr	r1, [pc, #80]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004876:	4313      	orrs	r3, r2
 8004878:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00b      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004888:	4b0f      	ldr	r3, [pc, #60]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800488a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800488e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004898:	490b      	ldr	r1, [pc, #44]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800489a:	4313      	orrs	r3, r2
 800489c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00f      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80048ac:	4b06      	ldr	r3, [pc, #24]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048bc:	4902      	ldr	r1, [pc, #8]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80048c4:	e002      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x494>
 80048c6:	bf00      	nop
 80048c8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00b      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048d8:	4b8a      	ldr	r3, [pc, #552]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048de:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e8:	4986      	ldr	r1, [pc, #536]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00b      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80048fc:	4b81      	ldr	r3, [pc, #516]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004902:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800490c:	497d      	ldr	r1, [pc, #500]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800490e:	4313      	orrs	r3, r2
 8004910:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	2b01      	cmp	r3, #1
 8004918:	d006      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004922:	2b00      	cmp	r3, #0
 8004924:	f000 80d6 	beq.w	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004928:	4b76      	ldr	r3, [pc, #472]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a75      	ldr	r2, [pc, #468]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800492e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004932:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004934:	f7fd f9d8 	bl	8001ce8 <HAL_GetTick>
 8004938:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800493a:	e008      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800493c:	f7fd f9d4 	bl	8001ce8 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b64      	cmp	r3, #100	; 0x64
 8004948:	d901      	bls.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e195      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800494e:	4b6d      	ldr	r3, [pc, #436]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1f0      	bne.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	d021      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800496a:	2b00      	cmp	r3, #0
 800496c:	d11d      	bne.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800496e:	4b65      	ldr	r3, [pc, #404]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004970:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004974:	0c1b      	lsrs	r3, r3, #16
 8004976:	f003 0303 	and.w	r3, r3, #3
 800497a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800497c:	4b61      	ldr	r3, [pc, #388]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800497e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004982:	0e1b      	lsrs	r3, r3, #24
 8004984:	f003 030f 	and.w	r3, r3, #15
 8004988:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	019a      	lsls	r2, r3, #6
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	041b      	lsls	r3, r3, #16
 8004994:	431a      	orrs	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	061b      	lsls	r3, r3, #24
 800499a:	431a      	orrs	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	071b      	lsls	r3, r3, #28
 80049a2:	4958      	ldr	r1, [pc, #352]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d004      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049be:	d00a      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d02e      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049d4:	d129      	bne.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80049d6:	4b4b      	ldr	r3, [pc, #300]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049dc:	0c1b      	lsrs	r3, r3, #16
 80049de:	f003 0303 	and.w	r3, r3, #3
 80049e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049e4:	4b47      	ldr	r3, [pc, #284]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049ea:	0f1b      	lsrs	r3, r3, #28
 80049ec:	f003 0307 	and.w	r3, r3, #7
 80049f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	019a      	lsls	r2, r3, #6
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	041b      	lsls	r3, r3, #16
 80049fc:	431a      	orrs	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	061b      	lsls	r3, r3, #24
 8004a04:	431a      	orrs	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	071b      	lsls	r3, r3, #28
 8004a0a:	493e      	ldr	r1, [pc, #248]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004a12:	4b3c      	ldr	r3, [pc, #240]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a18:	f023 021f 	bic.w	r2, r3, #31
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	3b01      	subs	r3, #1
 8004a22:	4938      	ldr	r1, [pc, #224]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d01d      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a36:	4b33      	ldr	r3, [pc, #204]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a3c:	0e1b      	lsrs	r3, r3, #24
 8004a3e:	f003 030f 	and.w	r3, r3, #15
 8004a42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a44:	4b2f      	ldr	r3, [pc, #188]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a4a:	0f1b      	lsrs	r3, r3, #28
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	019a      	lsls	r2, r3, #6
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	041b      	lsls	r3, r3, #16
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	061b      	lsls	r3, r3, #24
 8004a64:	431a      	orrs	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	071b      	lsls	r3, r3, #28
 8004a6a:	4926      	ldr	r1, [pc, #152]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d011      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	019a      	lsls	r2, r3, #6
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	041b      	lsls	r3, r3, #16
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	061b      	lsls	r3, r3, #24
 8004a92:	431a      	orrs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	071b      	lsls	r3, r3, #28
 8004a9a:	491a      	ldr	r1, [pc, #104]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004aa2:	4b18      	ldr	r3, [pc, #96]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a17      	ldr	r2, [pc, #92]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aa8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004aac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aae:	f7fd f91b 	bl	8001ce8 <HAL_GetTick>
 8004ab2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ab4:	e008      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ab6:	f7fd f917 	bl	8001ce8 <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	2b64      	cmp	r3, #100	; 0x64
 8004ac2:	d901      	bls.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e0d8      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ac8:	4b0e      	ldr	r3, [pc, #56]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d0f0      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	f040 80ce 	bne.w	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004adc:	4b09      	ldr	r3, [pc, #36]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a08      	ldr	r2, [pc, #32]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ae2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ae6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ae8:	f7fd f8fe 	bl	8001ce8 <HAL_GetTick>
 8004aec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004aee:	e00b      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004af0:	f7fd f8fa 	bl	8001ce8 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b64      	cmp	r3, #100	; 0x64
 8004afc:	d904      	bls.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e0bb      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004b02:	bf00      	nop
 8004b04:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b08:	4b5e      	ldr	r3, [pc, #376]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b14:	d0ec      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d003      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d009      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d02e      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d12a      	bne.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b3e:	4b51      	ldr	r3, [pc, #324]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b44:	0c1b      	lsrs	r3, r3, #16
 8004b46:	f003 0303 	and.w	r3, r3, #3
 8004b4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b4c:	4b4d      	ldr	r3, [pc, #308]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b52:	0f1b      	lsrs	r3, r3, #28
 8004b54:	f003 0307 	and.w	r3, r3, #7
 8004b58:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	019a      	lsls	r2, r3, #6
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	041b      	lsls	r3, r3, #16
 8004b64:	431a      	orrs	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	061b      	lsls	r3, r3, #24
 8004b6c:	431a      	orrs	r2, r3
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	071b      	lsls	r3, r3, #28
 8004b72:	4944      	ldr	r1, [pc, #272]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b7a:	4b42      	ldr	r3, [pc, #264]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b80:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	021b      	lsls	r3, r3, #8
 8004b8c:	493d      	ldr	r1, [pc, #244]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d022      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ba4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ba8:	d11d      	bne.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004baa:	4b36      	ldr	r3, [pc, #216]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb0:	0e1b      	lsrs	r3, r3, #24
 8004bb2:	f003 030f 	and.w	r3, r3, #15
 8004bb6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004bb8:	4b32      	ldr	r3, [pc, #200]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bbe:	0f1b      	lsrs	r3, r3, #28
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	019a      	lsls	r2, r3, #6
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	041b      	lsls	r3, r3, #16
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	061b      	lsls	r3, r3, #24
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	071b      	lsls	r3, r3, #28
 8004bde:	4929      	ldr	r1, [pc, #164]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0308 	and.w	r3, r3, #8
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d028      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004bf2:	4b24      	ldr	r3, [pc, #144]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf8:	0e1b      	lsrs	r3, r3, #24
 8004bfa:	f003 030f 	and.w	r3, r3, #15
 8004bfe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c00:	4b20      	ldr	r3, [pc, #128]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c06:	0c1b      	lsrs	r3, r3, #16
 8004c08:	f003 0303 	and.w	r3, r3, #3
 8004c0c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	019a      	lsls	r2, r3, #6
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	041b      	lsls	r3, r3, #16
 8004c18:	431a      	orrs	r2, r3
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	061b      	lsls	r3, r3, #24
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	69db      	ldr	r3, [r3, #28]
 8004c24:	071b      	lsls	r3, r3, #28
 8004c26:	4917      	ldr	r1, [pc, #92]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004c2e:	4b15      	ldr	r3, [pc, #84]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3c:	4911      	ldr	r1, [pc, #68]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004c44:	4b0f      	ldr	r3, [pc, #60]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a0e      	ldr	r2, [pc, #56]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c50:	f7fd f84a 	bl	8001ce8 <HAL_GetTick>
 8004c54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c56:	e008      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c58:	f7fd f846 	bl	8001ce8 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b64      	cmp	r3, #100	; 0x64
 8004c64:	d901      	bls.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e007      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c6a:	4b06      	ldr	r3, [pc, #24]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c76:	d1ef      	bne.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3720      	adds	r7, #32
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	40023800 	.word	0x40023800

08004c88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e049      	b.n	8004d2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d106      	bne.n	8004cb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7fc fe64 	bl	800197c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	3304      	adds	r3, #4
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	4610      	mov	r0, r2
 8004cc8:	f000 fe02 	bl	80058d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3708      	adds	r7, #8
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
	...

08004d38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d001      	beq.n	8004d50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e054      	b.n	8004dfa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2202      	movs	r2, #2
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68da      	ldr	r2, [r3, #12]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f042 0201 	orr.w	r2, r2, #1
 8004d66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a26      	ldr	r2, [pc, #152]	; (8004e08 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d022      	beq.n	8004db8 <HAL_TIM_Base_Start_IT+0x80>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d7a:	d01d      	beq.n	8004db8 <HAL_TIM_Base_Start_IT+0x80>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a22      	ldr	r2, [pc, #136]	; (8004e0c <HAL_TIM_Base_Start_IT+0xd4>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d018      	beq.n	8004db8 <HAL_TIM_Base_Start_IT+0x80>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a21      	ldr	r2, [pc, #132]	; (8004e10 <HAL_TIM_Base_Start_IT+0xd8>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d013      	beq.n	8004db8 <HAL_TIM_Base_Start_IT+0x80>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a1f      	ldr	r2, [pc, #124]	; (8004e14 <HAL_TIM_Base_Start_IT+0xdc>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d00e      	beq.n	8004db8 <HAL_TIM_Base_Start_IT+0x80>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a1e      	ldr	r2, [pc, #120]	; (8004e18 <HAL_TIM_Base_Start_IT+0xe0>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d009      	beq.n	8004db8 <HAL_TIM_Base_Start_IT+0x80>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a1c      	ldr	r2, [pc, #112]	; (8004e1c <HAL_TIM_Base_Start_IT+0xe4>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d004      	beq.n	8004db8 <HAL_TIM_Base_Start_IT+0x80>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a1b      	ldr	r2, [pc, #108]	; (8004e20 <HAL_TIM_Base_Start_IT+0xe8>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d115      	bne.n	8004de4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689a      	ldr	r2, [r3, #8]
 8004dbe:	4b19      	ldr	r3, [pc, #100]	; (8004e24 <HAL_TIM_Base_Start_IT+0xec>)
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2b06      	cmp	r3, #6
 8004dc8:	d015      	beq.n	8004df6 <HAL_TIM_Base_Start_IT+0xbe>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd0:	d011      	beq.n	8004df6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f042 0201 	orr.w	r2, r2, #1
 8004de0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004de2:	e008      	b.n	8004df6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f042 0201 	orr.w	r2, r2, #1
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	e000      	b.n	8004df8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004df6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3714      	adds	r7, #20
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	40010000 	.word	0x40010000
 8004e0c:	40000400 	.word	0x40000400
 8004e10:	40000800 	.word	0x40000800
 8004e14:	40000c00 	.word	0x40000c00
 8004e18:	40010400 	.word	0x40010400
 8004e1c:	40014000 	.word	0x40014000
 8004e20:	40001800 	.word	0x40001800
 8004e24:	00010007 	.word	0x00010007

08004e28 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e049      	b.n	8004ece <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d106      	bne.n	8004e54 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f841 	bl	8004ed6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2202      	movs	r2, #2
 8004e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	3304      	adds	r3, #4
 8004e64:	4619      	mov	r1, r3
 8004e66:	4610      	mov	r0, r2
 8004e68:	f000 fd32 	bl	80058d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b083      	sub	sp, #12
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004ede:	bf00      	nop
 8004ee0:	370c      	adds	r7, #12
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr

08004eea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b082      	sub	sp, #8
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e049      	b.n	8004f90 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d106      	bne.n	8004f16 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 f841 	bl	8004f98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2202      	movs	r2, #2
 8004f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	3304      	adds	r3, #4
 8004f26:	4619      	mov	r1, r3
 8004f28:	4610      	mov	r0, r2
 8004f2a:	f000 fcd1 	bl	80058d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3708      	adds	r7, #8
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e049      	b.n	8005052 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d106      	bne.n	8004fd8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7fc fd06 	bl	80019e4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2202      	movs	r2, #2
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	3304      	adds	r3, #4
 8004fe8:	4619      	mov	r1, r3
 8004fea:	4610      	mov	r0, r2
 8004fec:	f000 fc70 	bl	80058d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3708      	adds	r7, #8
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b082      	sub	sp, #8
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b02      	cmp	r3, #2
 800506e:	d122      	bne.n	80050b6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	f003 0302 	and.w	r3, r3, #2
 800507a:	2b02      	cmp	r3, #2
 800507c:	d11b      	bne.n	80050b6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f06f 0202 	mvn.w	r2, #2
 8005086:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	f003 0303 	and.w	r3, r3, #3
 8005098:	2b00      	cmp	r3, #0
 800509a:	d003      	beq.n	80050a4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 fbf9 	bl	8005894 <HAL_TIM_IC_CaptureCallback>
 80050a2:	e005      	b.n	80050b0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 fbeb 	bl	8005880 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 fbfc 	bl	80058a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	f003 0304 	and.w	r3, r3, #4
 80050c0:	2b04      	cmp	r3, #4
 80050c2:	d122      	bne.n	800510a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	f003 0304 	and.w	r3, r3, #4
 80050ce:	2b04      	cmp	r3, #4
 80050d0:	d11b      	bne.n	800510a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f06f 0204 	mvn.w	r2, #4
 80050da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2202      	movs	r2, #2
 80050e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d003      	beq.n	80050f8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 fbcf 	bl	8005894 <HAL_TIM_IC_CaptureCallback>
 80050f6:	e005      	b.n	8005104 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 fbc1 	bl	8005880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 fbd2 	bl	80058a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	f003 0308 	and.w	r3, r3, #8
 8005114:	2b08      	cmp	r3, #8
 8005116:	d122      	bne.n	800515e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	f003 0308 	and.w	r3, r3, #8
 8005122:	2b08      	cmp	r3, #8
 8005124:	d11b      	bne.n	800515e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f06f 0208 	mvn.w	r2, #8
 800512e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2204      	movs	r2, #4
 8005134:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	69db      	ldr	r3, [r3, #28]
 800513c:	f003 0303 	and.w	r3, r3, #3
 8005140:	2b00      	cmp	r3, #0
 8005142:	d003      	beq.n	800514c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 fba5 	bl	8005894 <HAL_TIM_IC_CaptureCallback>
 800514a:	e005      	b.n	8005158 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 fb97 	bl	8005880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 fba8 	bl	80058a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	f003 0310 	and.w	r3, r3, #16
 8005168:	2b10      	cmp	r3, #16
 800516a:	d122      	bne.n	80051b2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	f003 0310 	and.w	r3, r3, #16
 8005176:	2b10      	cmp	r3, #16
 8005178:	d11b      	bne.n	80051b2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f06f 0210 	mvn.w	r2, #16
 8005182:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2208      	movs	r2, #8
 8005188:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	69db      	ldr	r3, [r3, #28]
 8005190:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005194:	2b00      	cmp	r3, #0
 8005196:	d003      	beq.n	80051a0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 fb7b 	bl	8005894 <HAL_TIM_IC_CaptureCallback>
 800519e:	e005      	b.n	80051ac <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 fb6d 	bl	8005880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 fb7e 	bl	80058a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d10e      	bne.n	80051de <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d107      	bne.n	80051de <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f06f 0201 	mvn.w	r2, #1
 80051d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f7fc f823 	bl	8001224 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e8:	2b80      	cmp	r3, #128	; 0x80
 80051ea:	d10e      	bne.n	800520a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f6:	2b80      	cmp	r3, #128	; 0x80
 80051f8:	d107      	bne.n	800520a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005202:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f001 f93b 	bl	8006480 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005214:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005218:	d10e      	bne.n	8005238 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005224:	2b80      	cmp	r3, #128	; 0x80
 8005226:	d107      	bne.n	8005238 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f001 f92e 	bl	8006494 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005242:	2b40      	cmp	r3, #64	; 0x40
 8005244:	d10e      	bne.n	8005264 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005250:	2b40      	cmp	r3, #64	; 0x40
 8005252:	d107      	bne.n	8005264 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800525c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 fb2c 	bl	80058bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	f003 0320 	and.w	r3, r3, #32
 800526e:	2b20      	cmp	r3, #32
 8005270:	d10e      	bne.n	8005290 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	f003 0320 	and.w	r3, r3, #32
 800527c:	2b20      	cmp	r3, #32
 800527e:	d107      	bne.n	8005290 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f06f 0220 	mvn.w	r2, #32
 8005288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f001 f8ee 	bl	800646c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005290:	bf00      	nop
 8005292:	3708      	adds	r7, #8
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052a4:	2300      	movs	r3, #0
 80052a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d101      	bne.n	80052b6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80052b2:	2302      	movs	r3, #2
 80052b4:	e066      	b.n	8005384 <HAL_TIM_OC_ConfigChannel+0xec>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b14      	cmp	r3, #20
 80052c2:	d857      	bhi.n	8005374 <HAL_TIM_OC_ConfigChannel+0xdc>
 80052c4:	a201      	add	r2, pc, #4	; (adr r2, 80052cc <HAL_TIM_OC_ConfigChannel+0x34>)
 80052c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ca:	bf00      	nop
 80052cc:	08005321 	.word	0x08005321
 80052d0:	08005375 	.word	0x08005375
 80052d4:	08005375 	.word	0x08005375
 80052d8:	08005375 	.word	0x08005375
 80052dc:	0800532f 	.word	0x0800532f
 80052e0:	08005375 	.word	0x08005375
 80052e4:	08005375 	.word	0x08005375
 80052e8:	08005375 	.word	0x08005375
 80052ec:	0800533d 	.word	0x0800533d
 80052f0:	08005375 	.word	0x08005375
 80052f4:	08005375 	.word	0x08005375
 80052f8:	08005375 	.word	0x08005375
 80052fc:	0800534b 	.word	0x0800534b
 8005300:	08005375 	.word	0x08005375
 8005304:	08005375 	.word	0x08005375
 8005308:	08005375 	.word	0x08005375
 800530c:	08005359 	.word	0x08005359
 8005310:	08005375 	.word	0x08005375
 8005314:	08005375 	.word	0x08005375
 8005318:	08005375 	.word	0x08005375
 800531c:	08005367 	.word	0x08005367
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68b9      	ldr	r1, [r7, #8]
 8005326:	4618      	mov	r0, r3
 8005328:	f000 fb72 	bl	8005a10 <TIM_OC1_SetConfig>
      break;
 800532c:	e025      	b.n	800537a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68b9      	ldr	r1, [r7, #8]
 8005334:	4618      	mov	r0, r3
 8005336:	f000 fbdd 	bl	8005af4 <TIM_OC2_SetConfig>
      break;
 800533a:	e01e      	b.n	800537a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68b9      	ldr	r1, [r7, #8]
 8005342:	4618      	mov	r0, r3
 8005344:	f000 fc4e 	bl	8005be4 <TIM_OC3_SetConfig>
      break;
 8005348:	e017      	b.n	800537a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68b9      	ldr	r1, [r7, #8]
 8005350:	4618      	mov	r0, r3
 8005352:	f000 fcbd 	bl	8005cd0 <TIM_OC4_SetConfig>
      break;
 8005356:	e010      	b.n	800537a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68b9      	ldr	r1, [r7, #8]
 800535e:	4618      	mov	r0, r3
 8005360:	f000 fd0e 	bl	8005d80 <TIM_OC5_SetConfig>
      break;
 8005364:	e009      	b.n	800537a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68b9      	ldr	r1, [r7, #8]
 800536c:	4618      	mov	r0, r3
 800536e:	f000 fd59 	bl	8005e24 <TIM_OC6_SetConfig>
      break;
 8005372:	e002      	b.n	800537a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	75fb      	strb	r3, [r7, #23]
      break;
 8005378:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005382:	7dfb      	ldrb	r3, [r7, #23]
}
 8005384:	4618      	mov	r0, r3
 8005386:	3718      	adds	r7, #24
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005398:	2300      	movs	r3, #0
 800539a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d101      	bne.n	80053aa <HAL_TIM_IC_ConfigChannel+0x1e>
 80053a6:	2302      	movs	r3, #2
 80053a8:	e088      	b.n	80054bc <HAL_TIM_IC_ConfigChannel+0x130>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d11b      	bne.n	80053f0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80053c8:	f000 fd80 	bl	8005ecc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	699a      	ldr	r2, [r3, #24]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f022 020c 	bic.w	r2, r2, #12
 80053da:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6999      	ldr	r1, [r3, #24]
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	689a      	ldr	r2, [r3, #8]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	430a      	orrs	r2, r1
 80053ec:	619a      	str	r2, [r3, #24]
 80053ee:	e060      	b.n	80054b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b04      	cmp	r3, #4
 80053f4:	d11c      	bne.n	8005430 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005406:	f000 fe04 	bl	8006012 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	699a      	ldr	r2, [r3, #24]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005418:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	6999      	ldr	r1, [r3, #24]
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	021a      	lsls	r2, r3, #8
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	430a      	orrs	r2, r1
 800542c:	619a      	str	r2, [r3, #24]
 800542e:	e040      	b.n	80054b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b08      	cmp	r3, #8
 8005434:	d11b      	bne.n	800546e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005446:	f000 fe51 	bl	80060ec <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	69da      	ldr	r2, [r3, #28]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f022 020c 	bic.w	r2, r2, #12
 8005458:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	69d9      	ldr	r1, [r3, #28]
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	689a      	ldr	r2, [r3, #8]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	430a      	orrs	r2, r1
 800546a:	61da      	str	r2, [r3, #28]
 800546c:	e021      	b.n	80054b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b0c      	cmp	r3, #12
 8005472:	d11c      	bne.n	80054ae <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005484:	f000 fe6e 	bl	8006164 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	69da      	ldr	r2, [r3, #28]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005496:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	69d9      	ldr	r1, [r3, #28]
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	021a      	lsls	r2, r3, #8
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	430a      	orrs	r2, r1
 80054aa:	61da      	str	r2, [r3, #28]
 80054ac:	e001      	b.n	80054b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3718      	adds	r7, #24
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054d0:	2300      	movs	r3, #0
 80054d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d101      	bne.n	80054e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80054de:	2302      	movs	r3, #2
 80054e0:	e0ff      	b.n	80056e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2b14      	cmp	r3, #20
 80054ee:	f200 80f0 	bhi.w	80056d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80054f2:	a201      	add	r2, pc, #4	; (adr r2, 80054f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80054f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f8:	0800554d 	.word	0x0800554d
 80054fc:	080056d3 	.word	0x080056d3
 8005500:	080056d3 	.word	0x080056d3
 8005504:	080056d3 	.word	0x080056d3
 8005508:	0800558d 	.word	0x0800558d
 800550c:	080056d3 	.word	0x080056d3
 8005510:	080056d3 	.word	0x080056d3
 8005514:	080056d3 	.word	0x080056d3
 8005518:	080055cf 	.word	0x080055cf
 800551c:	080056d3 	.word	0x080056d3
 8005520:	080056d3 	.word	0x080056d3
 8005524:	080056d3 	.word	0x080056d3
 8005528:	0800560f 	.word	0x0800560f
 800552c:	080056d3 	.word	0x080056d3
 8005530:	080056d3 	.word	0x080056d3
 8005534:	080056d3 	.word	0x080056d3
 8005538:	08005651 	.word	0x08005651
 800553c:	080056d3 	.word	0x080056d3
 8005540:	080056d3 	.word	0x080056d3
 8005544:	080056d3 	.word	0x080056d3
 8005548:	08005691 	.word	0x08005691
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68b9      	ldr	r1, [r7, #8]
 8005552:	4618      	mov	r0, r3
 8005554:	f000 fa5c 	bl	8005a10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	699a      	ldr	r2, [r3, #24]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f042 0208 	orr.w	r2, r2, #8
 8005566:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	699a      	ldr	r2, [r3, #24]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f022 0204 	bic.w	r2, r2, #4
 8005576:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6999      	ldr	r1, [r3, #24]
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	691a      	ldr	r2, [r3, #16]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	430a      	orrs	r2, r1
 8005588:	619a      	str	r2, [r3, #24]
      break;
 800558a:	e0a5      	b.n	80056d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68b9      	ldr	r1, [r7, #8]
 8005592:	4618      	mov	r0, r3
 8005594:	f000 faae 	bl	8005af4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	699a      	ldr	r2, [r3, #24]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	699a      	ldr	r2, [r3, #24]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6999      	ldr	r1, [r3, #24]
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	021a      	lsls	r2, r3, #8
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	619a      	str	r2, [r3, #24]
      break;
 80055cc:	e084      	b.n	80056d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68b9      	ldr	r1, [r7, #8]
 80055d4:	4618      	mov	r0, r3
 80055d6:	f000 fb05 	bl	8005be4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69da      	ldr	r2, [r3, #28]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f042 0208 	orr.w	r2, r2, #8
 80055e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	69da      	ldr	r2, [r3, #28]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f022 0204 	bic.w	r2, r2, #4
 80055f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	69d9      	ldr	r1, [r3, #28]
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	691a      	ldr	r2, [r3, #16]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	430a      	orrs	r2, r1
 800560a:	61da      	str	r2, [r3, #28]
      break;
 800560c:	e064      	b.n	80056d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68b9      	ldr	r1, [r7, #8]
 8005614:	4618      	mov	r0, r3
 8005616:	f000 fb5b 	bl	8005cd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	69da      	ldr	r2, [r3, #28]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005628:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	69da      	ldr	r2, [r3, #28]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005638:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	69d9      	ldr	r1, [r3, #28]
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	021a      	lsls	r2, r3, #8
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	430a      	orrs	r2, r1
 800564c:	61da      	str	r2, [r3, #28]
      break;
 800564e:	e043      	b.n	80056d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68b9      	ldr	r1, [r7, #8]
 8005656:	4618      	mov	r0, r3
 8005658:	f000 fb92 	bl	8005d80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f042 0208 	orr.w	r2, r2, #8
 800566a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f022 0204 	bic.w	r2, r2, #4
 800567a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	691a      	ldr	r2, [r3, #16]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	430a      	orrs	r2, r1
 800568c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800568e:	e023      	b.n	80056d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68b9      	ldr	r1, [r7, #8]
 8005696:	4618      	mov	r0, r3
 8005698:	f000 fbc4 	bl	8005e24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	021a      	lsls	r2, r3, #8
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80056d0:	e002      	b.n	80056d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	75fb      	strb	r3, [r7, #23]
      break;
 80056d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3718      	adds	r7, #24
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop

080056ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056f6:	2300      	movs	r3, #0
 80056f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005700:	2b01      	cmp	r3, #1
 8005702:	d101      	bne.n	8005708 <HAL_TIM_ConfigClockSource+0x1c>
 8005704:	2302      	movs	r3, #2
 8005706:	e0b4      	b.n	8005872 <HAL_TIM_ConfigClockSource+0x186>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2202      	movs	r2, #2
 8005714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	4b56      	ldr	r3, [pc, #344]	; (800587c <HAL_TIM_ConfigClockSource+0x190>)
 8005724:	4013      	ands	r3, r2
 8005726:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800572e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005740:	d03e      	beq.n	80057c0 <HAL_TIM_ConfigClockSource+0xd4>
 8005742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005746:	f200 8087 	bhi.w	8005858 <HAL_TIM_ConfigClockSource+0x16c>
 800574a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800574e:	f000 8086 	beq.w	800585e <HAL_TIM_ConfigClockSource+0x172>
 8005752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005756:	d87f      	bhi.n	8005858 <HAL_TIM_ConfigClockSource+0x16c>
 8005758:	2b70      	cmp	r3, #112	; 0x70
 800575a:	d01a      	beq.n	8005792 <HAL_TIM_ConfigClockSource+0xa6>
 800575c:	2b70      	cmp	r3, #112	; 0x70
 800575e:	d87b      	bhi.n	8005858 <HAL_TIM_ConfigClockSource+0x16c>
 8005760:	2b60      	cmp	r3, #96	; 0x60
 8005762:	d050      	beq.n	8005806 <HAL_TIM_ConfigClockSource+0x11a>
 8005764:	2b60      	cmp	r3, #96	; 0x60
 8005766:	d877      	bhi.n	8005858 <HAL_TIM_ConfigClockSource+0x16c>
 8005768:	2b50      	cmp	r3, #80	; 0x50
 800576a:	d03c      	beq.n	80057e6 <HAL_TIM_ConfigClockSource+0xfa>
 800576c:	2b50      	cmp	r3, #80	; 0x50
 800576e:	d873      	bhi.n	8005858 <HAL_TIM_ConfigClockSource+0x16c>
 8005770:	2b40      	cmp	r3, #64	; 0x40
 8005772:	d058      	beq.n	8005826 <HAL_TIM_ConfigClockSource+0x13a>
 8005774:	2b40      	cmp	r3, #64	; 0x40
 8005776:	d86f      	bhi.n	8005858 <HAL_TIM_ConfigClockSource+0x16c>
 8005778:	2b30      	cmp	r3, #48	; 0x30
 800577a:	d064      	beq.n	8005846 <HAL_TIM_ConfigClockSource+0x15a>
 800577c:	2b30      	cmp	r3, #48	; 0x30
 800577e:	d86b      	bhi.n	8005858 <HAL_TIM_ConfigClockSource+0x16c>
 8005780:	2b20      	cmp	r3, #32
 8005782:	d060      	beq.n	8005846 <HAL_TIM_ConfigClockSource+0x15a>
 8005784:	2b20      	cmp	r3, #32
 8005786:	d867      	bhi.n	8005858 <HAL_TIM_ConfigClockSource+0x16c>
 8005788:	2b00      	cmp	r3, #0
 800578a:	d05c      	beq.n	8005846 <HAL_TIM_ConfigClockSource+0x15a>
 800578c:	2b10      	cmp	r3, #16
 800578e:	d05a      	beq.n	8005846 <HAL_TIM_ConfigClockSource+0x15a>
 8005790:	e062      	b.n	8005858 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057a2:	f000 fd37 	bl	8006214 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80057b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	609a      	str	r2, [r3, #8]
      break;
 80057be:	e04f      	b.n	8005860 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057d0:	f000 fd20 	bl	8006214 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	689a      	ldr	r2, [r3, #8]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057e2:	609a      	str	r2, [r3, #8]
      break;
 80057e4:	e03c      	b.n	8005860 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057f2:	461a      	mov	r2, r3
 80057f4:	f000 fbde 	bl	8005fb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2150      	movs	r1, #80	; 0x50
 80057fe:	4618      	mov	r0, r3
 8005800:	f000 fced 	bl	80061de <TIM_ITRx_SetConfig>
      break;
 8005804:	e02c      	b.n	8005860 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005812:	461a      	mov	r2, r3
 8005814:	f000 fc3a 	bl	800608c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2160      	movs	r1, #96	; 0x60
 800581e:	4618      	mov	r0, r3
 8005820:	f000 fcdd 	bl	80061de <TIM_ITRx_SetConfig>
      break;
 8005824:	e01c      	b.n	8005860 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005832:	461a      	mov	r2, r3
 8005834:	f000 fbbe 	bl	8005fb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2140      	movs	r1, #64	; 0x40
 800583e:	4618      	mov	r0, r3
 8005840:	f000 fccd 	bl	80061de <TIM_ITRx_SetConfig>
      break;
 8005844:	e00c      	b.n	8005860 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4619      	mov	r1, r3
 8005850:	4610      	mov	r0, r2
 8005852:	f000 fcc4 	bl	80061de <TIM_ITRx_SetConfig>
      break;
 8005856:	e003      	b.n	8005860 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	73fb      	strb	r3, [r7, #15]
      break;
 800585c:	e000      	b.n	8005860 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800585e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005870:	7bfb      	ldrb	r3, [r7, #15]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	fffeff88 	.word	0xfffeff88

08005880 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a40      	ldr	r2, [pc, #256]	; (80059e4 <TIM_Base_SetConfig+0x114>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d013      	beq.n	8005910 <TIM_Base_SetConfig+0x40>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ee:	d00f      	beq.n	8005910 <TIM_Base_SetConfig+0x40>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a3d      	ldr	r2, [pc, #244]	; (80059e8 <TIM_Base_SetConfig+0x118>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d00b      	beq.n	8005910 <TIM_Base_SetConfig+0x40>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a3c      	ldr	r2, [pc, #240]	; (80059ec <TIM_Base_SetConfig+0x11c>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d007      	beq.n	8005910 <TIM_Base_SetConfig+0x40>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a3b      	ldr	r2, [pc, #236]	; (80059f0 <TIM_Base_SetConfig+0x120>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d003      	beq.n	8005910 <TIM_Base_SetConfig+0x40>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a3a      	ldr	r2, [pc, #232]	; (80059f4 <TIM_Base_SetConfig+0x124>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d108      	bne.n	8005922 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005916:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	4313      	orrs	r3, r2
 8005920:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a2f      	ldr	r2, [pc, #188]	; (80059e4 <TIM_Base_SetConfig+0x114>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d02b      	beq.n	8005982 <TIM_Base_SetConfig+0xb2>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005930:	d027      	beq.n	8005982 <TIM_Base_SetConfig+0xb2>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a2c      	ldr	r2, [pc, #176]	; (80059e8 <TIM_Base_SetConfig+0x118>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d023      	beq.n	8005982 <TIM_Base_SetConfig+0xb2>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a2b      	ldr	r2, [pc, #172]	; (80059ec <TIM_Base_SetConfig+0x11c>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d01f      	beq.n	8005982 <TIM_Base_SetConfig+0xb2>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a2a      	ldr	r2, [pc, #168]	; (80059f0 <TIM_Base_SetConfig+0x120>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d01b      	beq.n	8005982 <TIM_Base_SetConfig+0xb2>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a29      	ldr	r2, [pc, #164]	; (80059f4 <TIM_Base_SetConfig+0x124>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d017      	beq.n	8005982 <TIM_Base_SetConfig+0xb2>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a28      	ldr	r2, [pc, #160]	; (80059f8 <TIM_Base_SetConfig+0x128>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d013      	beq.n	8005982 <TIM_Base_SetConfig+0xb2>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a27      	ldr	r2, [pc, #156]	; (80059fc <TIM_Base_SetConfig+0x12c>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d00f      	beq.n	8005982 <TIM_Base_SetConfig+0xb2>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a26      	ldr	r2, [pc, #152]	; (8005a00 <TIM_Base_SetConfig+0x130>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d00b      	beq.n	8005982 <TIM_Base_SetConfig+0xb2>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a25      	ldr	r2, [pc, #148]	; (8005a04 <TIM_Base_SetConfig+0x134>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d007      	beq.n	8005982 <TIM_Base_SetConfig+0xb2>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a24      	ldr	r2, [pc, #144]	; (8005a08 <TIM_Base_SetConfig+0x138>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d003      	beq.n	8005982 <TIM_Base_SetConfig+0xb2>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a23      	ldr	r2, [pc, #140]	; (8005a0c <TIM_Base_SetConfig+0x13c>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d108      	bne.n	8005994 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005988:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	4313      	orrs	r3, r2
 8005992:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	4313      	orrs	r3, r2
 80059a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	689a      	ldr	r2, [r3, #8]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a0a      	ldr	r2, [pc, #40]	; (80059e4 <TIM_Base_SetConfig+0x114>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d003      	beq.n	80059c8 <TIM_Base_SetConfig+0xf8>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a0c      	ldr	r2, [pc, #48]	; (80059f4 <TIM_Base_SetConfig+0x124>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d103      	bne.n	80059d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	691a      	ldr	r2, [r3, #16]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	615a      	str	r2, [r3, #20]
}
 80059d6:	bf00      	nop
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	40010000 	.word	0x40010000
 80059e8:	40000400 	.word	0x40000400
 80059ec:	40000800 	.word	0x40000800
 80059f0:	40000c00 	.word	0x40000c00
 80059f4:	40010400 	.word	0x40010400
 80059f8:	40014000 	.word	0x40014000
 80059fc:	40014400 	.word	0x40014400
 8005a00:	40014800 	.word	0x40014800
 8005a04:	40001800 	.word	0x40001800
 8005a08:	40001c00 	.word	0x40001c00
 8005a0c:	40002000 	.word	0x40002000

08005a10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b087      	sub	sp, #28
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	f023 0201 	bic.w	r2, r3, #1
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a1b      	ldr	r3, [r3, #32]
 8005a2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	4b2b      	ldr	r3, [pc, #172]	; (8005ae8 <TIM_OC1_SetConfig+0xd8>)
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f023 0303 	bic.w	r3, r3, #3
 8005a46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	f023 0302 	bic.w	r3, r3, #2
 8005a58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a21      	ldr	r2, [pc, #132]	; (8005aec <TIM_OC1_SetConfig+0xdc>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d003      	beq.n	8005a74 <TIM_OC1_SetConfig+0x64>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a20      	ldr	r2, [pc, #128]	; (8005af0 <TIM_OC1_SetConfig+0xe0>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d10c      	bne.n	8005a8e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	f023 0308 	bic.w	r3, r3, #8
 8005a7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f023 0304 	bic.w	r3, r3, #4
 8005a8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a16      	ldr	r2, [pc, #88]	; (8005aec <TIM_OC1_SetConfig+0xdc>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d003      	beq.n	8005a9e <TIM_OC1_SetConfig+0x8e>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a15      	ldr	r2, [pc, #84]	; (8005af0 <TIM_OC1_SetConfig+0xe0>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d111      	bne.n	8005ac2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005aa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005aac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	695b      	ldr	r3, [r3, #20]
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	685a      	ldr	r2, [r3, #4]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	621a      	str	r2, [r3, #32]
}
 8005adc:	bf00      	nop
 8005ade:	371c      	adds	r7, #28
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr
 8005ae8:	fffeff8f 	.word	0xfffeff8f
 8005aec:	40010000 	.word	0x40010000
 8005af0:	40010400 	.word	0x40010400

08005af4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b087      	sub	sp, #28
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	f023 0210 	bic.w	r2, r3, #16
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	4b2e      	ldr	r3, [pc, #184]	; (8005bd8 <TIM_OC2_SetConfig+0xe4>)
 8005b20:	4013      	ands	r3, r2
 8005b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	021b      	lsls	r3, r3, #8
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	f023 0320 	bic.w	r3, r3, #32
 8005b3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	011b      	lsls	r3, r3, #4
 8005b46:	697a      	ldr	r2, [r7, #20]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a23      	ldr	r2, [pc, #140]	; (8005bdc <TIM_OC2_SetConfig+0xe8>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d003      	beq.n	8005b5c <TIM_OC2_SetConfig+0x68>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a22      	ldr	r2, [pc, #136]	; (8005be0 <TIM_OC2_SetConfig+0xec>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d10d      	bne.n	8005b78 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	011b      	lsls	r3, r3, #4
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a18      	ldr	r2, [pc, #96]	; (8005bdc <TIM_OC2_SetConfig+0xe8>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d003      	beq.n	8005b88 <TIM_OC2_SetConfig+0x94>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a17      	ldr	r2, [pc, #92]	; (8005be0 <TIM_OC2_SetConfig+0xec>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d113      	bne.n	8005bb0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	693a      	ldr	r2, [r7, #16]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	693a      	ldr	r2, [r7, #16]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	685a      	ldr	r2, [r3, #4]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	621a      	str	r2, [r3, #32]
}
 8005bca:	bf00      	nop
 8005bcc:	371c      	adds	r7, #28
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	feff8fff 	.word	0xfeff8fff
 8005bdc:	40010000 	.word	0x40010000
 8005be0:	40010400 	.word	0x40010400

08005be4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b087      	sub	sp, #28
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	4b2d      	ldr	r3, [pc, #180]	; (8005cc4 <TIM_OC3_SetConfig+0xe0>)
 8005c10:	4013      	ands	r3, r2
 8005c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f023 0303 	bic.w	r3, r3, #3
 8005c1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	021b      	lsls	r3, r3, #8
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a22      	ldr	r2, [pc, #136]	; (8005cc8 <TIM_OC3_SetConfig+0xe4>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d003      	beq.n	8005c4a <TIM_OC3_SetConfig+0x66>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a21      	ldr	r2, [pc, #132]	; (8005ccc <TIM_OC3_SetConfig+0xe8>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d10d      	bne.n	8005c66 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	021b      	lsls	r3, r3, #8
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a17      	ldr	r2, [pc, #92]	; (8005cc8 <TIM_OC3_SetConfig+0xe4>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d003      	beq.n	8005c76 <TIM_OC3_SetConfig+0x92>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a16      	ldr	r2, [pc, #88]	; (8005ccc <TIM_OC3_SetConfig+0xe8>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d113      	bne.n	8005c9e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	011b      	lsls	r3, r3, #4
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	011b      	lsls	r3, r3, #4
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	621a      	str	r2, [r3, #32]
}
 8005cb8:	bf00      	nop
 8005cba:	371c      	adds	r7, #28
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr
 8005cc4:	fffeff8f 	.word	0xfffeff8f
 8005cc8:	40010000 	.word	0x40010000
 8005ccc:	40010400 	.word	0x40010400

08005cd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b087      	sub	sp, #28
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	69db      	ldr	r3, [r3, #28]
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	4b1e      	ldr	r3, [pc, #120]	; (8005d74 <TIM_OC4_SetConfig+0xa4>)
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	021b      	lsls	r3, r3, #8
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	031b      	lsls	r3, r3, #12
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a13      	ldr	r2, [pc, #76]	; (8005d78 <TIM_OC4_SetConfig+0xa8>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d003      	beq.n	8005d38 <TIM_OC4_SetConfig+0x68>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a12      	ldr	r2, [pc, #72]	; (8005d7c <TIM_OC4_SetConfig+0xac>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d109      	bne.n	8005d4c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	695b      	ldr	r3, [r3, #20]
 8005d44:	019b      	lsls	r3, r3, #6
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	685a      	ldr	r2, [r3, #4]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	621a      	str	r2, [r3, #32]
}
 8005d66:	bf00      	nop
 8005d68:	371c      	adds	r7, #28
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	feff8fff 	.word	0xfeff8fff
 8005d78:	40010000 	.word	0x40010000
 8005d7c:	40010400 	.word	0x40010400

08005d80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b087      	sub	sp, #28
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	4b1b      	ldr	r3, [pc, #108]	; (8005e18 <TIM_OC5_SetConfig+0x98>)
 8005dac:	4013      	ands	r3, r2
 8005dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005dc0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	041b      	lsls	r3, r3, #16
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a12      	ldr	r2, [pc, #72]	; (8005e1c <TIM_OC5_SetConfig+0x9c>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d003      	beq.n	8005dde <TIM_OC5_SetConfig+0x5e>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a11      	ldr	r2, [pc, #68]	; (8005e20 <TIM_OC5_SetConfig+0xa0>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d109      	bne.n	8005df2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005de4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	021b      	lsls	r3, r3, #8
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	685a      	ldr	r2, [r3, #4]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	621a      	str	r2, [r3, #32]
}
 8005e0c:	bf00      	nop
 8005e0e:	371c      	adds	r7, #28
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr
 8005e18:	fffeff8f 	.word	0xfffeff8f
 8005e1c:	40010000 	.word	0x40010000
 8005e20:	40010400 	.word	0x40010400

08005e24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b087      	sub	sp, #28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a1b      	ldr	r3, [r3, #32]
 8005e3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	4b1c      	ldr	r3, [pc, #112]	; (8005ec0 <TIM_OC6_SetConfig+0x9c>)
 8005e50:	4013      	ands	r3, r2
 8005e52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	021b      	lsls	r3, r3, #8
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	051b      	lsls	r3, r3, #20
 8005e6e:	693a      	ldr	r2, [r7, #16]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a13      	ldr	r2, [pc, #76]	; (8005ec4 <TIM_OC6_SetConfig+0xa0>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d003      	beq.n	8005e84 <TIM_OC6_SetConfig+0x60>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a12      	ldr	r2, [pc, #72]	; (8005ec8 <TIM_OC6_SetConfig+0xa4>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d109      	bne.n	8005e98 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	695b      	ldr	r3, [r3, #20]
 8005e90:	029b      	lsls	r3, r3, #10
 8005e92:	697a      	ldr	r2, [r7, #20]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	685a      	ldr	r2, [r3, #4]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	621a      	str	r2, [r3, #32]
}
 8005eb2:	bf00      	nop
 8005eb4:	371c      	adds	r7, #28
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop
 8005ec0:	feff8fff 	.word	0xfeff8fff
 8005ec4:	40010000 	.word	0x40010000
 8005ec8:	40010400 	.word	0x40010400

08005ecc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b087      	sub	sp, #28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	f023 0201 	bic.w	r2, r3, #1
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6a1b      	ldr	r3, [r3, #32]
 8005ef0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	4a28      	ldr	r2, [pc, #160]	; (8005f98 <TIM_TI1_SetConfig+0xcc>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d01b      	beq.n	8005f32 <TIM_TI1_SetConfig+0x66>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f00:	d017      	beq.n	8005f32 <TIM_TI1_SetConfig+0x66>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	4a25      	ldr	r2, [pc, #148]	; (8005f9c <TIM_TI1_SetConfig+0xd0>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d013      	beq.n	8005f32 <TIM_TI1_SetConfig+0x66>
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	4a24      	ldr	r2, [pc, #144]	; (8005fa0 <TIM_TI1_SetConfig+0xd4>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d00f      	beq.n	8005f32 <TIM_TI1_SetConfig+0x66>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	4a23      	ldr	r2, [pc, #140]	; (8005fa4 <TIM_TI1_SetConfig+0xd8>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d00b      	beq.n	8005f32 <TIM_TI1_SetConfig+0x66>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	4a22      	ldr	r2, [pc, #136]	; (8005fa8 <TIM_TI1_SetConfig+0xdc>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d007      	beq.n	8005f32 <TIM_TI1_SetConfig+0x66>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	4a21      	ldr	r2, [pc, #132]	; (8005fac <TIM_TI1_SetConfig+0xe0>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d003      	beq.n	8005f32 <TIM_TI1_SetConfig+0x66>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	4a20      	ldr	r2, [pc, #128]	; (8005fb0 <TIM_TI1_SetConfig+0xe4>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d101      	bne.n	8005f36 <TIM_TI1_SetConfig+0x6a>
 8005f32:	2301      	movs	r3, #1
 8005f34:	e000      	b.n	8005f38 <TIM_TI1_SetConfig+0x6c>
 8005f36:	2300      	movs	r3, #0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d008      	beq.n	8005f4e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	f023 0303 	bic.w	r3, r3, #3
 8005f42:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	617b      	str	r3, [r7, #20]
 8005f4c:	e003      	b.n	8005f56 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f043 0301 	orr.w	r3, r3, #1
 8005f54:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	011b      	lsls	r3, r3, #4
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	f023 030a 	bic.w	r3, r3, #10
 8005f70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	f003 030a 	and.w	r3, r3, #10
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	621a      	str	r2, [r3, #32]
}
 8005f8a:	bf00      	nop
 8005f8c:	371c      	adds	r7, #28
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	40010000 	.word	0x40010000
 8005f9c:	40000400 	.word	0x40000400
 8005fa0:	40000800 	.word	0x40000800
 8005fa4:	40000c00 	.word	0x40000c00
 8005fa8:	40010400 	.word	0x40010400
 8005fac:	40014000 	.word	0x40014000
 8005fb0:	40001800 	.word	0x40001800

08005fb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b087      	sub	sp, #28
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6a1b      	ldr	r3, [r3, #32]
 8005fc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	f023 0201 	bic.w	r2, r3, #1
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	011b      	lsls	r3, r3, #4
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f023 030a 	bic.w	r3, r3, #10
 8005ff0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	621a      	str	r2, [r3, #32]
}
 8006006:	bf00      	nop
 8006008:	371c      	adds	r7, #28
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006012:	b480      	push	{r7}
 8006014:	b087      	sub	sp, #28
 8006016:	af00      	add	r7, sp, #0
 8006018:	60f8      	str	r0, [r7, #12]
 800601a:	60b9      	str	r1, [r7, #8]
 800601c:	607a      	str	r2, [r7, #4]
 800601e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6a1b      	ldr	r3, [r3, #32]
 8006024:	f023 0210 	bic.w	r2, r3, #16
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800603e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	021b      	lsls	r3, r3, #8
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	4313      	orrs	r3, r2
 8006048:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006050:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	031b      	lsls	r3, r3, #12
 8006056:	b29b      	uxth	r3, r3
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	4313      	orrs	r3, r2
 800605c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006064:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	011b      	lsls	r3, r3, #4
 800606a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	4313      	orrs	r3, r2
 8006072:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	621a      	str	r2, [r3, #32]
}
 8006080:	bf00      	nop
 8006082:	371c      	adds	r7, #28
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800608c:	b480      	push	{r7}
 800608e:	b087      	sub	sp, #28
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6a1b      	ldr	r3, [r3, #32]
 800609c:	f023 0210 	bic.w	r2, r3, #16
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	031b      	lsls	r3, r3, #12
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	4313      	orrs	r3, r2
 80060c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	011b      	lsls	r3, r3, #4
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	621a      	str	r2, [r3, #32]
}
 80060e0:	bf00      	nop
 80060e2:	371c      	adds	r7, #28
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b087      	sub	sp, #28
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
 80060f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	f023 0303 	bic.w	r3, r3, #3
 8006118:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4313      	orrs	r3, r2
 8006120:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006128:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	011b      	lsls	r3, r3, #4
 800612e:	b2db      	uxtb	r3, r3
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	4313      	orrs	r3, r2
 8006134:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800613c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	021b      	lsls	r3, r3, #8
 8006142:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	4313      	orrs	r3, r2
 800614a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	621a      	str	r2, [r3, #32]
}
 8006158:	bf00      	nop
 800615a:	371c      	adds	r7, #28
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006164:	b480      	push	{r7}
 8006166:	b087      	sub	sp, #28
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
 8006170:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006190:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	021b      	lsls	r3, r3, #8
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	4313      	orrs	r3, r2
 800619a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061a2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	031b      	lsls	r3, r3, #12
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80061b6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	031b      	lsls	r3, r3, #12
 80061bc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	621a      	str	r2, [r3, #32]
}
 80061d2:	bf00      	nop
 80061d4:	371c      	adds	r7, #28
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr

080061de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061de:	b480      	push	{r7}
 80061e0:	b085      	sub	sp, #20
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
 80061e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061f6:	683a      	ldr	r2, [r7, #0]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	f043 0307 	orr.w	r3, r3, #7
 8006200:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	609a      	str	r2, [r3, #8]
}
 8006208:	bf00      	nop
 800620a:	3714      	adds	r7, #20
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006214:	b480      	push	{r7}
 8006216:	b087      	sub	sp, #28
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
 8006220:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800622e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	021a      	lsls	r2, r3, #8
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	431a      	orrs	r2, r3
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	4313      	orrs	r3, r2
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	4313      	orrs	r3, r2
 8006240:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	609a      	str	r2, [r3, #8]
}
 8006248:	bf00      	nop
 800624a:	371c      	adds	r7, #28
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006264:	2b01      	cmp	r3, #1
 8006266:	d101      	bne.n	800626c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006268:	2302      	movs	r3, #2
 800626a:	e06d      	b.n	8006348 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2202      	movs	r2, #2
 8006278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a30      	ldr	r2, [pc, #192]	; (8006354 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d004      	beq.n	80062a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a2f      	ldr	r2, [pc, #188]	; (8006358 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d108      	bne.n	80062b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80062a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a20      	ldr	r2, [pc, #128]	; (8006354 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d022      	beq.n	800631c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062de:	d01d      	beq.n	800631c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a1d      	ldr	r2, [pc, #116]	; (800635c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d018      	beq.n	800631c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a1c      	ldr	r2, [pc, #112]	; (8006360 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d013      	beq.n	800631c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a1a      	ldr	r2, [pc, #104]	; (8006364 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d00e      	beq.n	800631c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a15      	ldr	r2, [pc, #84]	; (8006358 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d009      	beq.n	800631c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a16      	ldr	r2, [pc, #88]	; (8006368 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d004      	beq.n	800631c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a15      	ldr	r2, [pc, #84]	; (800636c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d10c      	bne.n	8006336 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006322:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	4313      	orrs	r3, r2
 800632c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3714      	adds	r7, #20
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr
 8006354:	40010000 	.word	0x40010000
 8006358:	40010400 	.word	0x40010400
 800635c:	40000400 	.word	0x40000400
 8006360:	40000800 	.word	0x40000800
 8006364:	40000c00 	.word	0x40000c00
 8006368:	40014000 	.word	0x40014000
 800636c:	40001800 	.word	0x40001800

08006370 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800637a:	2300      	movs	r3, #0
 800637c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006384:	2b01      	cmp	r3, #1
 8006386:	d101      	bne.n	800638c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006388:	2302      	movs	r3, #2
 800638a:	e065      	b.n	8006458 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	4313      	orrs	r3, r2
 80063a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	695b      	ldr	r3, [r3, #20]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f2:	4313      	orrs	r3, r2
 80063f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	041b      	lsls	r3, r3, #16
 8006402:	4313      	orrs	r3, r2
 8006404:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a16      	ldr	r2, [pc, #88]	; (8006464 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d004      	beq.n	800641a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a14      	ldr	r2, [pc, #80]	; (8006468 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d115      	bne.n	8006446 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006424:	051b      	lsls	r3, r3, #20
 8006426:	4313      	orrs	r3, r2
 8006428:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	69db      	ldr	r3, [r3, #28]
 8006434:	4313      	orrs	r3, r2
 8006436:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	6a1b      	ldr	r3, [r3, #32]
 8006442:	4313      	orrs	r3, r2
 8006444:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3714      	adds	r7, #20
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr
 8006464:	40010000 	.word	0x40010000
 8006468:	40010400 	.word	0x40010400

0800646c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006488:	bf00      	nop
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80064a8:	b480      	push	{r7}
 80064aa:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80064ac:	bf00      	nop
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
	...

080064b8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064be:	f3ef 8305 	mrs	r3, IPSR
 80064c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80064c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10f      	bne.n	80064ea <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064ca:	f3ef 8310 	mrs	r3, PRIMASK
 80064ce:	607b      	str	r3, [r7, #4]
  return(result);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d105      	bne.n	80064e2 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80064d6:	f3ef 8311 	mrs	r3, BASEPRI
 80064da:	603b      	str	r3, [r7, #0]
  return(result);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d007      	beq.n	80064f2 <osKernelInitialize+0x3a>
 80064e2:	4b0e      	ldr	r3, [pc, #56]	; (800651c <osKernelInitialize+0x64>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d103      	bne.n	80064f2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80064ea:	f06f 0305 	mvn.w	r3, #5
 80064ee:	60fb      	str	r3, [r7, #12]
 80064f0:	e00c      	b.n	800650c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80064f2:	4b0a      	ldr	r3, [pc, #40]	; (800651c <osKernelInitialize+0x64>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d105      	bne.n	8006506 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80064fa:	4b08      	ldr	r3, [pc, #32]	; (800651c <osKernelInitialize+0x64>)
 80064fc:	2201      	movs	r2, #1
 80064fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006500:	2300      	movs	r3, #0
 8006502:	60fb      	str	r3, [r7, #12]
 8006504:	e002      	b.n	800650c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006506:	f04f 33ff 	mov.w	r3, #4294967295
 800650a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800650c:	68fb      	ldr	r3, [r7, #12]
}
 800650e:	4618      	mov	r0, r3
 8006510:	3714      	adds	r7, #20
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	200004b8 	.word	0x200004b8

08006520 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006526:	f3ef 8305 	mrs	r3, IPSR
 800652a:	60bb      	str	r3, [r7, #8]
  return(result);
 800652c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10f      	bne.n	8006552 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006532:	f3ef 8310 	mrs	r3, PRIMASK
 8006536:	607b      	str	r3, [r7, #4]
  return(result);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d105      	bne.n	800654a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800653e:	f3ef 8311 	mrs	r3, BASEPRI
 8006542:	603b      	str	r3, [r7, #0]
  return(result);
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d007      	beq.n	800655a <osKernelStart+0x3a>
 800654a:	4b0f      	ldr	r3, [pc, #60]	; (8006588 <osKernelStart+0x68>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2b02      	cmp	r3, #2
 8006550:	d103      	bne.n	800655a <osKernelStart+0x3a>
    stat = osErrorISR;
 8006552:	f06f 0305 	mvn.w	r3, #5
 8006556:	60fb      	str	r3, [r7, #12]
 8006558:	e010      	b.n	800657c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800655a:	4b0b      	ldr	r3, [pc, #44]	; (8006588 <osKernelStart+0x68>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2b01      	cmp	r3, #1
 8006560:	d109      	bne.n	8006576 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006562:	f7ff ffa1 	bl	80064a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006566:	4b08      	ldr	r3, [pc, #32]	; (8006588 <osKernelStart+0x68>)
 8006568:	2202      	movs	r2, #2
 800656a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800656c:	f001 f992 	bl	8007894 <vTaskStartScheduler>
      stat = osOK;
 8006570:	2300      	movs	r3, #0
 8006572:	60fb      	str	r3, [r7, #12]
 8006574:	e002      	b.n	800657c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006576:	f04f 33ff 	mov.w	r3, #4294967295
 800657a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800657c:	68fb      	ldr	r3, [r7, #12]
}
 800657e:	4618      	mov	r0, r3
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	200004b8 	.word	0x200004b8

0800658c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800658c:	b580      	push	{r7, lr}
 800658e:	b090      	sub	sp, #64	; 0x40
 8006590:	af04      	add	r7, sp, #16
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006598:	2300      	movs	r3, #0
 800659a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800659c:	f3ef 8305 	mrs	r3, IPSR
 80065a0:	61fb      	str	r3, [r7, #28]
  return(result);
 80065a2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f040 808f 	bne.w	80066c8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065aa:	f3ef 8310 	mrs	r3, PRIMASK
 80065ae:	61bb      	str	r3, [r7, #24]
  return(result);
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d105      	bne.n	80065c2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065b6:	f3ef 8311 	mrs	r3, BASEPRI
 80065ba:	617b      	str	r3, [r7, #20]
  return(result);
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d003      	beq.n	80065ca <osThreadNew+0x3e>
 80065c2:	4b44      	ldr	r3, [pc, #272]	; (80066d4 <osThreadNew+0x148>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d07e      	beq.n	80066c8 <osThreadNew+0x13c>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d07b      	beq.n	80066c8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80065d0:	2380      	movs	r3, #128	; 0x80
 80065d2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80065d4:	2318      	movs	r3, #24
 80065d6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80065d8:	2300      	movs	r3, #0
 80065da:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80065dc:	f04f 33ff 	mov.w	r3, #4294967295
 80065e0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d045      	beq.n	8006674 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d002      	beq.n	80065f6 <osThreadNew+0x6a>
        name = attr->name;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d002      	beq.n	8006604 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006606:	2b00      	cmp	r3, #0
 8006608:	d008      	beq.n	800661c <osThreadNew+0x90>
 800660a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660c:	2b38      	cmp	r3, #56	; 0x38
 800660e:	d805      	bhi.n	800661c <osThreadNew+0x90>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f003 0301 	and.w	r3, r3, #1
 8006618:	2b00      	cmp	r3, #0
 800661a:	d001      	beq.n	8006620 <osThreadNew+0x94>
        return (NULL);
 800661c:	2300      	movs	r3, #0
 800661e:	e054      	b.n	80066ca <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	695b      	ldr	r3, [r3, #20]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d003      	beq.n	8006630 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	089b      	lsrs	r3, r3, #2
 800662e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00e      	beq.n	8006656 <osThreadNew+0xca>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	2ba7      	cmp	r3, #167	; 0xa7
 800663e:	d90a      	bls.n	8006656 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006644:	2b00      	cmp	r3, #0
 8006646:	d006      	beq.n	8006656 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	695b      	ldr	r3, [r3, #20]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d002      	beq.n	8006656 <osThreadNew+0xca>
        mem = 1;
 8006650:	2301      	movs	r3, #1
 8006652:	623b      	str	r3, [r7, #32]
 8006654:	e010      	b.n	8006678 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10c      	bne.n	8006678 <osThreadNew+0xec>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d108      	bne.n	8006678 <osThreadNew+0xec>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d104      	bne.n	8006678 <osThreadNew+0xec>
          mem = 0;
 800666e:	2300      	movs	r3, #0
 8006670:	623b      	str	r3, [r7, #32]
 8006672:	e001      	b.n	8006678 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006674:	2300      	movs	r3, #0
 8006676:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006678:	6a3b      	ldr	r3, [r7, #32]
 800667a:	2b01      	cmp	r3, #1
 800667c:	d110      	bne.n	80066a0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006686:	9202      	str	r2, [sp, #8]
 8006688:	9301      	str	r3, [sp, #4]
 800668a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668c:	9300      	str	r3, [sp, #0]
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006692:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f000 ff07 	bl	80074a8 <xTaskCreateStatic>
 800669a:	4603      	mov	r3, r0
 800669c:	613b      	str	r3, [r7, #16]
 800669e:	e013      	b.n	80066c8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80066a0:	6a3b      	ldr	r3, [r7, #32]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d110      	bne.n	80066c8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80066a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	f107 0310 	add.w	r3, r7, #16
 80066ae:	9301      	str	r3, [sp, #4]
 80066b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b2:	9300      	str	r3, [sp, #0]
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f000 ff58 	bl	800756e <xTaskCreate>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d001      	beq.n	80066c8 <osThreadNew+0x13c>
          hTask = NULL;
 80066c4:	2300      	movs	r3, #0
 80066c6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80066c8:	693b      	ldr	r3, [r7, #16]
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3730      	adds	r7, #48	; 0x30
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	200004b8 	.word	0x200004b8

080066d8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80066d8:	b580      	push	{r7, lr}
 80066da:	b086      	sub	sp, #24
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066e0:	f3ef 8305 	mrs	r3, IPSR
 80066e4:	613b      	str	r3, [r7, #16]
  return(result);
 80066e6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d10f      	bne.n	800670c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066ec:	f3ef 8310 	mrs	r3, PRIMASK
 80066f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d105      	bne.n	8006704 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80066f8:	f3ef 8311 	mrs	r3, BASEPRI
 80066fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d007      	beq.n	8006714 <osDelay+0x3c>
 8006704:	4b0a      	ldr	r3, [pc, #40]	; (8006730 <osDelay+0x58>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2b02      	cmp	r3, #2
 800670a:	d103      	bne.n	8006714 <osDelay+0x3c>
    stat = osErrorISR;
 800670c:	f06f 0305 	mvn.w	r3, #5
 8006710:	617b      	str	r3, [r7, #20]
 8006712:	e007      	b.n	8006724 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006714:	2300      	movs	r3, #0
 8006716:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d002      	beq.n	8006724 <osDelay+0x4c>
      vTaskDelay(ticks);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f001 f882 	bl	8007828 <vTaskDelay>
    }
  }

  return (stat);
 8006724:	697b      	ldr	r3, [r7, #20]
}
 8006726:	4618      	mov	r0, r3
 8006728:	3718      	adds	r7, #24
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	200004b8 	.word	0x200004b8

08006734 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006734:	b580      	push	{r7, lr}
 8006736:	b08c      	sub	sp, #48	; 0x30
 8006738:	af02      	add	r7, sp, #8
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006740:	2300      	movs	r3, #0
 8006742:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006744:	f3ef 8305 	mrs	r3, IPSR
 8006748:	61bb      	str	r3, [r7, #24]
  return(result);
 800674a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800674c:	2b00      	cmp	r3, #0
 800674e:	d16f      	bne.n	8006830 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006750:	f3ef 8310 	mrs	r3, PRIMASK
 8006754:	617b      	str	r3, [r7, #20]
  return(result);
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d105      	bne.n	8006768 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800675c:	f3ef 8311 	mrs	r3, BASEPRI
 8006760:	613b      	str	r3, [r7, #16]
  return(result);
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d003      	beq.n	8006770 <osMessageQueueNew+0x3c>
 8006768:	4b34      	ldr	r3, [pc, #208]	; (800683c <osMessageQueueNew+0x108>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2b02      	cmp	r3, #2
 800676e:	d05f      	beq.n	8006830 <osMessageQueueNew+0xfc>
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d05c      	beq.n	8006830 <osMessageQueueNew+0xfc>
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d059      	beq.n	8006830 <osMessageQueueNew+0xfc>
    mem = -1;
 800677c:	f04f 33ff 	mov.w	r3, #4294967295
 8006780:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d029      	beq.n	80067dc <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d012      	beq.n	80067b6 <osMessageQueueNew+0x82>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	2b4f      	cmp	r3, #79	; 0x4f
 8006796:	d90e      	bls.n	80067b6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00a      	beq.n	80067b6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	695a      	ldr	r2, [r3, #20]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	68b9      	ldr	r1, [r7, #8]
 80067a8:	fb01 f303 	mul.w	r3, r1, r3
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d302      	bcc.n	80067b6 <osMessageQueueNew+0x82>
        mem = 1;
 80067b0:	2301      	movs	r3, #1
 80067b2:	623b      	str	r3, [r7, #32]
 80067b4:	e014      	b.n	80067e0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d110      	bne.n	80067e0 <osMessageQueueNew+0xac>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10c      	bne.n	80067e0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d108      	bne.n	80067e0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d104      	bne.n	80067e0 <osMessageQueueNew+0xac>
          mem = 0;
 80067d6:	2300      	movs	r3, #0
 80067d8:	623b      	str	r3, [r7, #32]
 80067da:	e001      	b.n	80067e0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80067dc:	2300      	movs	r3, #0
 80067de:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80067e0:	6a3b      	ldr	r3, [r7, #32]
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d10b      	bne.n	80067fe <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	691a      	ldr	r2, [r3, #16]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	2100      	movs	r1, #0
 80067f0:	9100      	str	r1, [sp, #0]
 80067f2:	68b9      	ldr	r1, [r7, #8]
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	f000 f975 	bl	8006ae4 <xQueueGenericCreateStatic>
 80067fa:	6278      	str	r0, [r7, #36]	; 0x24
 80067fc:	e008      	b.n	8006810 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80067fe:	6a3b      	ldr	r3, [r7, #32]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d105      	bne.n	8006810 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006804:	2200      	movs	r2, #0
 8006806:	68b9      	ldr	r1, [r7, #8]
 8006808:	68f8      	ldr	r0, [r7, #12]
 800680a:	f000 f9ed 	bl	8006be8 <xQueueGenericCreate>
 800680e:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00c      	beq.n	8006830 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d003      	beq.n	8006824 <osMessageQueueNew+0xf0>
        name = attr->name;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	61fb      	str	r3, [r7, #28]
 8006822:	e001      	b.n	8006828 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8006824:	2300      	movs	r3, #0
 8006826:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8006828:	69f9      	ldr	r1, [r7, #28]
 800682a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800682c:	f000 fdde 	bl	80073ec <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006832:	4618      	mov	r0, r3
 8006834:	3728      	adds	r7, #40	; 0x28
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	200004b8 	.word	0x200004b8

08006840 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	4a07      	ldr	r2, [pc, #28]	; (800686c <vApplicationGetIdleTaskMemory+0x2c>)
 8006850:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	4a06      	ldr	r2, [pc, #24]	; (8006870 <vApplicationGetIdleTaskMemory+0x30>)
 8006856:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2280      	movs	r2, #128	; 0x80
 800685c:	601a      	str	r2, [r3, #0]
}
 800685e:	bf00      	nop
 8006860:	3714      	adds	r7, #20
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	200004bc 	.word	0x200004bc
 8006870:	20000564 	.word	0x20000564

08006874 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	4a07      	ldr	r2, [pc, #28]	; (80068a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8006884:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	4a06      	ldr	r2, [pc, #24]	; (80068a4 <vApplicationGetTimerTaskMemory+0x30>)
 800688a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006892:	601a      	str	r2, [r3, #0]
}
 8006894:	bf00      	nop
 8006896:	3714      	adds	r7, #20
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr
 80068a0:	20000764 	.word	0x20000764
 80068a4:	2000080c 	.word	0x2000080c

080068a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f103 0208 	add.w	r2, r3, #8
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f04f 32ff 	mov.w	r2, #4294967295
 80068c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f103 0208 	add.w	r2, r3, #8
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f103 0208 	add.w	r2, r3, #8
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80068f6:	bf00      	nop
 80068f8:	370c      	adds	r7, #12
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr

08006902 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006902:	b480      	push	{r7}
 8006904:	b085      	sub	sp, #20
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
 800690a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	689a      	ldr	r2, [r3, #8]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	683a      	ldr	r2, [r7, #0]
 8006926:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	683a      	ldr	r2, [r7, #0]
 800692c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	1c5a      	adds	r2, r3, #1
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	601a      	str	r2, [r3, #0]
}
 800693e:	bf00      	nop
 8006940:	3714      	adds	r7, #20
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr

0800694a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800694a:	b480      	push	{r7}
 800694c:	b085      	sub	sp, #20
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
 8006952:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006960:	d103      	bne.n	800696a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	60fb      	str	r3, [r7, #12]
 8006968:	e00c      	b.n	8006984 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	3308      	adds	r3, #8
 800696e:	60fb      	str	r3, [r7, #12]
 8006970:	e002      	b.n	8006978 <vListInsert+0x2e>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	60fb      	str	r3, [r7, #12]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68ba      	ldr	r2, [r7, #8]
 8006980:	429a      	cmp	r2, r3
 8006982:	d2f6      	bcs.n	8006972 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	685a      	ldr	r2, [r3, #4]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	683a      	ldr	r2, [r7, #0]
 8006992:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	683a      	ldr	r2, [r7, #0]
 800699e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	1c5a      	adds	r2, r3, #1
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	601a      	str	r2, [r3, #0]
}
 80069b0:	bf00      	nop
 80069b2:	3714      	adds	r7, #20
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	6892      	ldr	r2, [r2, #8]
 80069d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	6852      	ldr	r2, [r2, #4]
 80069dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d103      	bne.n	80069f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	689a      	ldr	r2, [r3, #8]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	1e5a      	subs	r2, r3, #1
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3714      	adds	r7, #20
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10c      	bne.n	8006a3e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a28:	b672      	cpsid	i
 8006a2a:	f383 8811 	msr	BASEPRI, r3
 8006a2e:	f3bf 8f6f 	isb	sy
 8006a32:	f3bf 8f4f 	dsb	sy
 8006a36:	b662      	cpsie	i
 8006a38:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006a3a:	bf00      	nop
 8006a3c:	e7fe      	b.n	8006a3c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006a3e:	f002 f8e5 	bl	8008c0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a4a:	68f9      	ldr	r1, [r7, #12]
 8006a4c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006a4e:	fb01 f303 	mul.w	r3, r1, r3
 8006a52:	441a      	add	r2, r3
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	68f9      	ldr	r1, [r7, #12]
 8006a72:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006a74:	fb01 f303 	mul.w	r3, r1, r3
 8006a78:	441a      	add	r2, r3
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	22ff      	movs	r2, #255	; 0xff
 8006a82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	22ff      	movs	r2, #255	; 0xff
 8006a8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d114      	bne.n	8006abe <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d01a      	beq.n	8006ad2 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	3310      	adds	r3, #16
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f001 f99f 	bl	8007de4 <xTaskRemoveFromEventList>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d012      	beq.n	8006ad2 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006aac:	4b0c      	ldr	r3, [pc, #48]	; (8006ae0 <xQueueGenericReset+0xd0>)
 8006aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ab2:	601a      	str	r2, [r3, #0]
 8006ab4:	f3bf 8f4f 	dsb	sy
 8006ab8:	f3bf 8f6f 	isb	sy
 8006abc:	e009      	b.n	8006ad2 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	3310      	adds	r3, #16
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f7ff fef0 	bl	80068a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	3324      	adds	r3, #36	; 0x24
 8006acc:	4618      	mov	r0, r3
 8006ace:	f7ff feeb 	bl	80068a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006ad2:	f002 f8cf 	bl	8008c74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006ad6:	2301      	movs	r3, #1
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	e000ed04 	.word	0xe000ed04

08006ae4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b08e      	sub	sp, #56	; 0x38
 8006ae8:	af02      	add	r7, sp, #8
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
 8006af0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10c      	bne.n	8006b12 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8006af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afc:	b672      	cpsid	i
 8006afe:	f383 8811 	msr	BASEPRI, r3
 8006b02:	f3bf 8f6f 	isb	sy
 8006b06:	f3bf 8f4f 	dsb	sy
 8006b0a:	b662      	cpsie	i
 8006b0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b0e:	bf00      	nop
 8006b10:	e7fe      	b.n	8006b10 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d10c      	bne.n	8006b32 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8006b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1c:	b672      	cpsid	i
 8006b1e:	f383 8811 	msr	BASEPRI, r3
 8006b22:	f3bf 8f6f 	isb	sy
 8006b26:	f3bf 8f4f 	dsb	sy
 8006b2a:	b662      	cpsie	i
 8006b2c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b2e:	bf00      	nop
 8006b30:	e7fe      	b.n	8006b30 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d002      	beq.n	8006b3e <xQueueGenericCreateStatic+0x5a>
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d001      	beq.n	8006b42 <xQueueGenericCreateStatic+0x5e>
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e000      	b.n	8006b44 <xQueueGenericCreateStatic+0x60>
 8006b42:	2300      	movs	r3, #0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d10c      	bne.n	8006b62 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8006b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4c:	b672      	cpsid	i
 8006b4e:	f383 8811 	msr	BASEPRI, r3
 8006b52:	f3bf 8f6f 	isb	sy
 8006b56:	f3bf 8f4f 	dsb	sy
 8006b5a:	b662      	cpsie	i
 8006b5c:	623b      	str	r3, [r7, #32]
}
 8006b5e:	bf00      	nop
 8006b60:	e7fe      	b.n	8006b60 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d102      	bne.n	8006b6e <xQueueGenericCreateStatic+0x8a>
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d101      	bne.n	8006b72 <xQueueGenericCreateStatic+0x8e>
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e000      	b.n	8006b74 <xQueueGenericCreateStatic+0x90>
 8006b72:	2300      	movs	r3, #0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10c      	bne.n	8006b92 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8006b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7c:	b672      	cpsid	i
 8006b7e:	f383 8811 	msr	BASEPRI, r3
 8006b82:	f3bf 8f6f 	isb	sy
 8006b86:	f3bf 8f4f 	dsb	sy
 8006b8a:	b662      	cpsie	i
 8006b8c:	61fb      	str	r3, [r7, #28]
}
 8006b8e:	bf00      	nop
 8006b90:	e7fe      	b.n	8006b90 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006b92:	2350      	movs	r3, #80	; 0x50
 8006b94:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	2b50      	cmp	r3, #80	; 0x50
 8006b9a:	d00c      	beq.n	8006bb6 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8006b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba0:	b672      	cpsid	i
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	b662      	cpsie	i
 8006bb0:	61bb      	str	r3, [r7, #24]
}
 8006bb2:	bf00      	nop
 8006bb4:	e7fe      	b.n	8006bb4 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006bb6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00d      	beq.n	8006bde <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006bca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd0:	9300      	str	r3, [sp, #0]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	68b9      	ldr	r1, [r7, #8]
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f000 f847 	bl	8006c6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3730      	adds	r7, #48	; 0x30
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b08a      	sub	sp, #40	; 0x28
 8006bec:	af02      	add	r7, sp, #8
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d10c      	bne.n	8006c16 <xQueueGenericCreate+0x2e>
	__asm volatile
 8006bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c00:	b672      	cpsid	i
 8006c02:	f383 8811 	msr	BASEPRI, r3
 8006c06:	f3bf 8f6f 	isb	sy
 8006c0a:	f3bf 8f4f 	dsb	sy
 8006c0e:	b662      	cpsie	i
 8006c10:	613b      	str	r3, [r7, #16]
}
 8006c12:	bf00      	nop
 8006c14:	e7fe      	b.n	8006c14 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d102      	bne.n	8006c22 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	61fb      	str	r3, [r7, #28]
 8006c20:	e004      	b.n	8006c2c <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	68ba      	ldr	r2, [r7, #8]
 8006c26:	fb02 f303 	mul.w	r3, r2, r3
 8006c2a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	3350      	adds	r3, #80	; 0x50
 8006c30:	4618      	mov	r0, r3
 8006c32:	f002 f917 	bl	8008e64 <pvPortMalloc>
 8006c36:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d011      	beq.n	8006c62 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	3350      	adds	r3, #80	; 0x50
 8006c46:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c50:	79fa      	ldrb	r2, [r7, #7]
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	4613      	mov	r3, r2
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	68b9      	ldr	r1, [r7, #8]
 8006c5c:	68f8      	ldr	r0, [r7, #12]
 8006c5e:	f000 f805 	bl	8006c6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006c62:	69bb      	ldr	r3, [r7, #24]
	}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3720      	adds	r7, #32
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
 8006c78:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d103      	bne.n	8006c88 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	69ba      	ldr	r2, [r7, #24]
 8006c84:	601a      	str	r2, [r3, #0]
 8006c86:	e002      	b.n	8006c8e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	68ba      	ldr	r2, [r7, #8]
 8006c98:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006c9a:	2101      	movs	r1, #1
 8006c9c:	69b8      	ldr	r0, [r7, #24]
 8006c9e:	f7ff feb7 	bl	8006a10 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	78fa      	ldrb	r2, [r7, #3]
 8006ca6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006caa:	bf00      	nop
 8006cac:	3710      	adds	r7, #16
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
	...

08006cb4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b08e      	sub	sp, #56	; 0x38
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	607a      	str	r2, [r7, #4]
 8006cc0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10c      	bne.n	8006cea <xQueueGenericSend+0x36>
	__asm volatile
 8006cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd4:	b672      	cpsid	i
 8006cd6:	f383 8811 	msr	BASEPRI, r3
 8006cda:	f3bf 8f6f 	isb	sy
 8006cde:	f3bf 8f4f 	dsb	sy
 8006ce2:	b662      	cpsie	i
 8006ce4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006ce6:	bf00      	nop
 8006ce8:	e7fe      	b.n	8006ce8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d103      	bne.n	8006cf8 <xQueueGenericSend+0x44>
 8006cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d101      	bne.n	8006cfc <xQueueGenericSend+0x48>
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e000      	b.n	8006cfe <xQueueGenericSend+0x4a>
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d10c      	bne.n	8006d1c <xQueueGenericSend+0x68>
	__asm volatile
 8006d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d06:	b672      	cpsid	i
 8006d08:	f383 8811 	msr	BASEPRI, r3
 8006d0c:	f3bf 8f6f 	isb	sy
 8006d10:	f3bf 8f4f 	dsb	sy
 8006d14:	b662      	cpsie	i
 8006d16:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d18:	bf00      	nop
 8006d1a:	e7fe      	b.n	8006d1a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d103      	bne.n	8006d2a <xQueueGenericSend+0x76>
 8006d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d101      	bne.n	8006d2e <xQueueGenericSend+0x7a>
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e000      	b.n	8006d30 <xQueueGenericSend+0x7c>
 8006d2e:	2300      	movs	r3, #0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10c      	bne.n	8006d4e <xQueueGenericSend+0x9a>
	__asm volatile
 8006d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d38:	b672      	cpsid	i
 8006d3a:	f383 8811 	msr	BASEPRI, r3
 8006d3e:	f3bf 8f6f 	isb	sy
 8006d42:	f3bf 8f4f 	dsb	sy
 8006d46:	b662      	cpsie	i
 8006d48:	623b      	str	r3, [r7, #32]
}
 8006d4a:	bf00      	nop
 8006d4c:	e7fe      	b.n	8006d4c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d4e:	f001 fa13 	bl	8008178 <xTaskGetSchedulerState>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d102      	bne.n	8006d5e <xQueueGenericSend+0xaa>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d101      	bne.n	8006d62 <xQueueGenericSend+0xae>
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e000      	b.n	8006d64 <xQueueGenericSend+0xb0>
 8006d62:	2300      	movs	r3, #0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d10c      	bne.n	8006d82 <xQueueGenericSend+0xce>
	__asm volatile
 8006d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6c:	b672      	cpsid	i
 8006d6e:	f383 8811 	msr	BASEPRI, r3
 8006d72:	f3bf 8f6f 	isb	sy
 8006d76:	f3bf 8f4f 	dsb	sy
 8006d7a:	b662      	cpsie	i
 8006d7c:	61fb      	str	r3, [r7, #28]
}
 8006d7e:	bf00      	nop
 8006d80:	e7fe      	b.n	8006d80 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d82:	f001 ff43 	bl	8008c0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d302      	bcc.n	8006d98 <xQueueGenericSend+0xe4>
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d129      	bne.n	8006dec <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d98:	683a      	ldr	r2, [r7, #0]
 8006d9a:	68b9      	ldr	r1, [r7, #8]
 8006d9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d9e:	f000 fa15 	bl	80071cc <prvCopyDataToQueue>
 8006da2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d010      	beq.n	8006dce <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dae:	3324      	adds	r3, #36	; 0x24
 8006db0:	4618      	mov	r0, r3
 8006db2:	f001 f817 	bl	8007de4 <xTaskRemoveFromEventList>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d013      	beq.n	8006de4 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006dbc:	4b3f      	ldr	r3, [pc, #252]	; (8006ebc <xQueueGenericSend+0x208>)
 8006dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dc2:	601a      	str	r2, [r3, #0]
 8006dc4:	f3bf 8f4f 	dsb	sy
 8006dc8:	f3bf 8f6f 	isb	sy
 8006dcc:	e00a      	b.n	8006de4 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d007      	beq.n	8006de4 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006dd4:	4b39      	ldr	r3, [pc, #228]	; (8006ebc <xQueueGenericSend+0x208>)
 8006dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dda:	601a      	str	r2, [r3, #0]
 8006ddc:	f3bf 8f4f 	dsb	sy
 8006de0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006de4:	f001 ff46 	bl	8008c74 <vPortExitCritical>
				return pdPASS;
 8006de8:	2301      	movs	r3, #1
 8006dea:	e063      	b.n	8006eb4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d103      	bne.n	8006dfa <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006df2:	f001 ff3f 	bl	8008c74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006df6:	2300      	movs	r3, #0
 8006df8:	e05c      	b.n	8006eb4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d106      	bne.n	8006e0e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e00:	f107 0314 	add.w	r3, r7, #20
 8006e04:	4618      	mov	r0, r3
 8006e06:	f001 f853 	bl	8007eb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e0e:	f001 ff31 	bl	8008c74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e12:	f000 fdb3 	bl	800797c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e16:	f001 fef9 	bl	8008c0c <vPortEnterCritical>
 8006e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e20:	b25b      	sxtb	r3, r3
 8006e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e26:	d103      	bne.n	8006e30 <xQueueGenericSend+0x17c>
 8006e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e36:	b25b      	sxtb	r3, r3
 8006e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e3c:	d103      	bne.n	8006e46 <xQueueGenericSend+0x192>
 8006e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e46:	f001 ff15 	bl	8008c74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e4a:	1d3a      	adds	r2, r7, #4
 8006e4c:	f107 0314 	add.w	r3, r7, #20
 8006e50:	4611      	mov	r1, r2
 8006e52:	4618      	mov	r0, r3
 8006e54:	f001 f842 	bl	8007edc <xTaskCheckForTimeOut>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d124      	bne.n	8006ea8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006e5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e60:	f000 faac 	bl	80073bc <prvIsQueueFull>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d018      	beq.n	8006e9c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6c:	3310      	adds	r3, #16
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	4611      	mov	r1, r2
 8006e72:	4618      	mov	r0, r3
 8006e74:	f000 ff62 	bl	8007d3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006e78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e7a:	f000 fa37 	bl	80072ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006e7e:	f000 fd8b 	bl	8007998 <xTaskResumeAll>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	f47f af7c 	bne.w	8006d82 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8006e8a:	4b0c      	ldr	r3, [pc, #48]	; (8006ebc <xQueueGenericSend+0x208>)
 8006e8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e90:	601a      	str	r2, [r3, #0]
 8006e92:	f3bf 8f4f 	dsb	sy
 8006e96:	f3bf 8f6f 	isb	sy
 8006e9a:	e772      	b.n	8006d82 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006e9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e9e:	f000 fa25 	bl	80072ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ea2:	f000 fd79 	bl	8007998 <xTaskResumeAll>
 8006ea6:	e76c      	b.n	8006d82 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006ea8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006eaa:	f000 fa1f 	bl	80072ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006eae:	f000 fd73 	bl	8007998 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006eb2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3738      	adds	r7, #56	; 0x38
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	e000ed04 	.word	0xe000ed04

08006ec0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b08e      	sub	sp, #56	; 0x38
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	607a      	str	r2, [r7, #4]
 8006ecc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d10c      	bne.n	8006ef2 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8006ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006edc:	b672      	cpsid	i
 8006ede:	f383 8811 	msr	BASEPRI, r3
 8006ee2:	f3bf 8f6f 	isb	sy
 8006ee6:	f3bf 8f4f 	dsb	sy
 8006eea:	b662      	cpsie	i
 8006eec:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006eee:	bf00      	nop
 8006ef0:	e7fe      	b.n	8006ef0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d103      	bne.n	8006f00 <xQueueGenericSendFromISR+0x40>
 8006ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d101      	bne.n	8006f04 <xQueueGenericSendFromISR+0x44>
 8006f00:	2301      	movs	r3, #1
 8006f02:	e000      	b.n	8006f06 <xQueueGenericSendFromISR+0x46>
 8006f04:	2300      	movs	r3, #0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d10c      	bne.n	8006f24 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8006f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f0e:	b672      	cpsid	i
 8006f10:	f383 8811 	msr	BASEPRI, r3
 8006f14:	f3bf 8f6f 	isb	sy
 8006f18:	f3bf 8f4f 	dsb	sy
 8006f1c:	b662      	cpsie	i
 8006f1e:	623b      	str	r3, [r7, #32]
}
 8006f20:	bf00      	nop
 8006f22:	e7fe      	b.n	8006f22 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d103      	bne.n	8006f32 <xQueueGenericSendFromISR+0x72>
 8006f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d101      	bne.n	8006f36 <xQueueGenericSendFromISR+0x76>
 8006f32:	2301      	movs	r3, #1
 8006f34:	e000      	b.n	8006f38 <xQueueGenericSendFromISR+0x78>
 8006f36:	2300      	movs	r3, #0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d10c      	bne.n	8006f56 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8006f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f40:	b672      	cpsid	i
 8006f42:	f383 8811 	msr	BASEPRI, r3
 8006f46:	f3bf 8f6f 	isb	sy
 8006f4a:	f3bf 8f4f 	dsb	sy
 8006f4e:	b662      	cpsie	i
 8006f50:	61fb      	str	r3, [r7, #28]
}
 8006f52:	bf00      	nop
 8006f54:	e7fe      	b.n	8006f54 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f56:	f001 ff41 	bl	8008ddc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006f5a:	f3ef 8211 	mrs	r2, BASEPRI
 8006f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f62:	b672      	cpsid	i
 8006f64:	f383 8811 	msr	BASEPRI, r3
 8006f68:	f3bf 8f6f 	isb	sy
 8006f6c:	f3bf 8f4f 	dsb	sy
 8006f70:	b662      	cpsie	i
 8006f72:	61ba      	str	r2, [r7, #24]
 8006f74:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006f76:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f78:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d302      	bcc.n	8006f8c <xQueueGenericSendFromISR+0xcc>
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d12c      	bne.n	8006fe6 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f96:	683a      	ldr	r2, [r7, #0]
 8006f98:	68b9      	ldr	r1, [r7, #8]
 8006f9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f9c:	f000 f916 	bl	80071cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006fa0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa8:	d112      	bne.n	8006fd0 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d016      	beq.n	8006fe0 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb4:	3324      	adds	r3, #36	; 0x24
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 ff14 	bl	8007de4 <xTaskRemoveFromEventList>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00e      	beq.n	8006fe0 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d00b      	beq.n	8006fe0 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	601a      	str	r2, [r3, #0]
 8006fce:	e007      	b.n	8006fe0 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006fd0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	b25a      	sxtb	r2, r3
 8006fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006fe4:	e001      	b.n	8006fea <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	637b      	str	r3, [r7, #52]	; 0x34
 8006fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fec:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006ff4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3738      	adds	r7, #56	; 0x38
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b08c      	sub	sp, #48	; 0x30
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800700c:	2300      	movs	r3, #0
 800700e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007016:	2b00      	cmp	r3, #0
 8007018:	d10c      	bne.n	8007034 <xQueueReceive+0x34>
	__asm volatile
 800701a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701e:	b672      	cpsid	i
 8007020:	f383 8811 	msr	BASEPRI, r3
 8007024:	f3bf 8f6f 	isb	sy
 8007028:	f3bf 8f4f 	dsb	sy
 800702c:	b662      	cpsie	i
 800702e:	623b      	str	r3, [r7, #32]
}
 8007030:	bf00      	nop
 8007032:	e7fe      	b.n	8007032 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d103      	bne.n	8007042 <xQueueReceive+0x42>
 800703a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703e:	2b00      	cmp	r3, #0
 8007040:	d101      	bne.n	8007046 <xQueueReceive+0x46>
 8007042:	2301      	movs	r3, #1
 8007044:	e000      	b.n	8007048 <xQueueReceive+0x48>
 8007046:	2300      	movs	r3, #0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d10c      	bne.n	8007066 <xQueueReceive+0x66>
	__asm volatile
 800704c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007050:	b672      	cpsid	i
 8007052:	f383 8811 	msr	BASEPRI, r3
 8007056:	f3bf 8f6f 	isb	sy
 800705a:	f3bf 8f4f 	dsb	sy
 800705e:	b662      	cpsie	i
 8007060:	61fb      	str	r3, [r7, #28]
}
 8007062:	bf00      	nop
 8007064:	e7fe      	b.n	8007064 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007066:	f001 f887 	bl	8008178 <xTaskGetSchedulerState>
 800706a:	4603      	mov	r3, r0
 800706c:	2b00      	cmp	r3, #0
 800706e:	d102      	bne.n	8007076 <xQueueReceive+0x76>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d101      	bne.n	800707a <xQueueReceive+0x7a>
 8007076:	2301      	movs	r3, #1
 8007078:	e000      	b.n	800707c <xQueueReceive+0x7c>
 800707a:	2300      	movs	r3, #0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d10c      	bne.n	800709a <xQueueReceive+0x9a>
	__asm volatile
 8007080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007084:	b672      	cpsid	i
 8007086:	f383 8811 	msr	BASEPRI, r3
 800708a:	f3bf 8f6f 	isb	sy
 800708e:	f3bf 8f4f 	dsb	sy
 8007092:	b662      	cpsie	i
 8007094:	61bb      	str	r3, [r7, #24]
}
 8007096:	bf00      	nop
 8007098:	e7fe      	b.n	8007098 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800709a:	f001 fdb7 	bl	8008c0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800709e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d01f      	beq.n	80070ea <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80070aa:	68b9      	ldr	r1, [r7, #8]
 80070ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070ae:	f000 f8f7 	bl	80072a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80070b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b4:	1e5a      	subs	r2, r3, #1
 80070b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00f      	beq.n	80070e2 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c4:	3310      	adds	r3, #16
 80070c6:	4618      	mov	r0, r3
 80070c8:	f000 fe8c 	bl	8007de4 <xTaskRemoveFromEventList>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d007      	beq.n	80070e2 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80070d2:	4b3d      	ldr	r3, [pc, #244]	; (80071c8 <xQueueReceive+0x1c8>)
 80070d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070d8:	601a      	str	r2, [r3, #0]
 80070da:	f3bf 8f4f 	dsb	sy
 80070de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80070e2:	f001 fdc7 	bl	8008c74 <vPortExitCritical>
				return pdPASS;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e069      	b.n	80071be <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d103      	bne.n	80070f8 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80070f0:	f001 fdc0 	bl	8008c74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80070f4:	2300      	movs	r3, #0
 80070f6:	e062      	b.n	80071be <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80070f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d106      	bne.n	800710c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80070fe:	f107 0310 	add.w	r3, r7, #16
 8007102:	4618      	mov	r0, r3
 8007104:	f000 fed4 	bl	8007eb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007108:	2301      	movs	r3, #1
 800710a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800710c:	f001 fdb2 	bl	8008c74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007110:	f000 fc34 	bl	800797c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007114:	f001 fd7a 	bl	8008c0c <vPortEnterCritical>
 8007118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800711e:	b25b      	sxtb	r3, r3
 8007120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007124:	d103      	bne.n	800712e <xQueueReceive+0x12e>
 8007126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007128:	2200      	movs	r2, #0
 800712a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800712e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007130:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007134:	b25b      	sxtb	r3, r3
 8007136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800713a:	d103      	bne.n	8007144 <xQueueReceive+0x144>
 800713c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713e:	2200      	movs	r2, #0
 8007140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007144:	f001 fd96 	bl	8008c74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007148:	1d3a      	adds	r2, r7, #4
 800714a:	f107 0310 	add.w	r3, r7, #16
 800714e:	4611      	mov	r1, r2
 8007150:	4618      	mov	r0, r3
 8007152:	f000 fec3 	bl	8007edc <xTaskCheckForTimeOut>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d123      	bne.n	80071a4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800715c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800715e:	f000 f917 	bl	8007390 <prvIsQueueEmpty>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d017      	beq.n	8007198 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716a:	3324      	adds	r3, #36	; 0x24
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	4611      	mov	r1, r2
 8007170:	4618      	mov	r0, r3
 8007172:	f000 fde3 	bl	8007d3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007176:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007178:	f000 f8b8 	bl	80072ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800717c:	f000 fc0c 	bl	8007998 <xTaskResumeAll>
 8007180:	4603      	mov	r3, r0
 8007182:	2b00      	cmp	r3, #0
 8007184:	d189      	bne.n	800709a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8007186:	4b10      	ldr	r3, [pc, #64]	; (80071c8 <xQueueReceive+0x1c8>)
 8007188:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800718c:	601a      	str	r2, [r3, #0]
 800718e:	f3bf 8f4f 	dsb	sy
 8007192:	f3bf 8f6f 	isb	sy
 8007196:	e780      	b.n	800709a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007198:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800719a:	f000 f8a7 	bl	80072ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800719e:	f000 fbfb 	bl	8007998 <xTaskResumeAll>
 80071a2:	e77a      	b.n	800709a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80071a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071a6:	f000 f8a1 	bl	80072ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80071aa:	f000 fbf5 	bl	8007998 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071b0:	f000 f8ee 	bl	8007390 <prvIsQueueEmpty>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	f43f af6f 	beq.w	800709a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80071bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3730      	adds	r7, #48	; 0x30
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	e000ed04 	.word	0xe000ed04

080071cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b086      	sub	sp, #24
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80071d8:	2300      	movs	r3, #0
 80071da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d10d      	bne.n	8007206 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d14d      	bne.n	800728e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	4618      	mov	r0, r3
 80071f8:	f000 ffdc 	bl	80081b4 <xTaskPriorityDisinherit>
 80071fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2200      	movs	r2, #0
 8007202:	609a      	str	r2, [r3, #8]
 8007204:	e043      	b.n	800728e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d119      	bne.n	8007240 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6858      	ldr	r0, [r3, #4]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007214:	461a      	mov	r2, r3
 8007216:	68b9      	ldr	r1, [r7, #8]
 8007218:	f002 f88c 	bl	8009334 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	685a      	ldr	r2, [r3, #4]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007224:	441a      	add	r2, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	685a      	ldr	r2, [r3, #4]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	429a      	cmp	r2, r3
 8007234:	d32b      	bcc.n	800728e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	605a      	str	r2, [r3, #4]
 800723e:	e026      	b.n	800728e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	68d8      	ldr	r0, [r3, #12]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007248:	461a      	mov	r2, r3
 800724a:	68b9      	ldr	r1, [r7, #8]
 800724c:	f002 f872 	bl	8009334 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	68da      	ldr	r2, [r3, #12]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007258:	425b      	negs	r3, r3
 800725a:	441a      	add	r2, r3
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	68da      	ldr	r2, [r3, #12]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	429a      	cmp	r2, r3
 800726a:	d207      	bcs.n	800727c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	689a      	ldr	r2, [r3, #8]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007274:	425b      	negs	r3, r3
 8007276:	441a      	add	r2, r3
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2b02      	cmp	r3, #2
 8007280:	d105      	bne.n	800728e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d002      	beq.n	800728e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	3b01      	subs	r3, #1
 800728c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	1c5a      	adds	r2, r3, #1
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007296:	697b      	ldr	r3, [r7, #20]
}
 8007298:	4618      	mov	r0, r3
 800729a:	3718      	adds	r7, #24
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d018      	beq.n	80072e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	68da      	ldr	r2, [r3, #12]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ba:	441a      	add	r2, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	68da      	ldr	r2, [r3, #12]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d303      	bcc.n	80072d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	68d9      	ldr	r1, [r3, #12]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072dc:	461a      	mov	r2, r3
 80072de:	6838      	ldr	r0, [r7, #0]
 80072e0:	f002 f828 	bl	8009334 <memcpy>
	}
}
 80072e4:	bf00      	nop
 80072e6:	3708      	adds	r7, #8
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80072f4:	f001 fc8a 	bl	8008c0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007300:	e011      	b.n	8007326 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007306:	2b00      	cmp	r3, #0
 8007308:	d012      	beq.n	8007330 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	3324      	adds	r3, #36	; 0x24
 800730e:	4618      	mov	r0, r3
 8007310:	f000 fd68 	bl	8007de4 <xTaskRemoveFromEventList>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d001      	beq.n	800731e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800731a:	f000 fe45 	bl	8007fa8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800731e:	7bfb      	ldrb	r3, [r7, #15]
 8007320:	3b01      	subs	r3, #1
 8007322:	b2db      	uxtb	r3, r3
 8007324:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800732a:	2b00      	cmp	r3, #0
 800732c:	dce9      	bgt.n	8007302 <prvUnlockQueue+0x16>
 800732e:	e000      	b.n	8007332 <prvUnlockQueue+0x46>
					break;
 8007330:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	22ff      	movs	r2, #255	; 0xff
 8007336:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800733a:	f001 fc9b 	bl	8008c74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800733e:	f001 fc65 	bl	8008c0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007348:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800734a:	e011      	b.n	8007370 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d012      	beq.n	800737a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	3310      	adds	r3, #16
 8007358:	4618      	mov	r0, r3
 800735a:	f000 fd43 	bl	8007de4 <xTaskRemoveFromEventList>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d001      	beq.n	8007368 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007364:	f000 fe20 	bl	8007fa8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007368:	7bbb      	ldrb	r3, [r7, #14]
 800736a:	3b01      	subs	r3, #1
 800736c:	b2db      	uxtb	r3, r3
 800736e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007370:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007374:	2b00      	cmp	r3, #0
 8007376:	dce9      	bgt.n	800734c <prvUnlockQueue+0x60>
 8007378:	e000      	b.n	800737c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800737a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	22ff      	movs	r2, #255	; 0xff
 8007380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007384:	f001 fc76 	bl	8008c74 <vPortExitCritical>
}
 8007388:	bf00      	nop
 800738a:	3710      	adds	r7, #16
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007398:	f001 fc38 	bl	8008c0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d102      	bne.n	80073aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80073a4:	2301      	movs	r3, #1
 80073a6:	60fb      	str	r3, [r7, #12]
 80073a8:	e001      	b.n	80073ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80073aa:	2300      	movs	r3, #0
 80073ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80073ae:	f001 fc61 	bl	8008c74 <vPortExitCritical>

	return xReturn;
 80073b2:	68fb      	ldr	r3, [r7, #12]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3710      	adds	r7, #16
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073c4:	f001 fc22 	bl	8008c0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d102      	bne.n	80073da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80073d4:	2301      	movs	r3, #1
 80073d6:	60fb      	str	r3, [r7, #12]
 80073d8:	e001      	b.n	80073de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80073da:	2300      	movs	r3, #0
 80073dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80073de:	f001 fc49 	bl	8008c74 <vPortExitCritical>

	return xReturn;
 80073e2:	68fb      	ldr	r3, [r7, #12]
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3710      	adds	r7, #16
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80073ec:	b480      	push	{r7}
 80073ee:	b085      	sub	sp, #20
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073f6:	2300      	movs	r3, #0
 80073f8:	60fb      	str	r3, [r7, #12]
 80073fa:	e014      	b.n	8007426 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80073fc:	4a0f      	ldr	r2, [pc, #60]	; (800743c <vQueueAddToRegistry+0x50>)
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d10b      	bne.n	8007420 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007408:	490c      	ldr	r1, [pc, #48]	; (800743c <vQueueAddToRegistry+0x50>)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	683a      	ldr	r2, [r7, #0]
 800740e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007412:	4a0a      	ldr	r2, [pc, #40]	; (800743c <vQueueAddToRegistry+0x50>)
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	00db      	lsls	r3, r3, #3
 8007418:	4413      	add	r3, r2
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800741e:	e006      	b.n	800742e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	3301      	adds	r3, #1
 8007424:	60fb      	str	r3, [r7, #12]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2b07      	cmp	r3, #7
 800742a:	d9e7      	bls.n	80073fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800742c:	bf00      	nop
 800742e:	bf00      	nop
 8007430:	3714      	adds	r7, #20
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop
 800743c:	20000c0c 	.word	0x20000c0c

08007440 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007440:	b580      	push	{r7, lr}
 8007442:	b086      	sub	sp, #24
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007450:	f001 fbdc 	bl	8008c0c <vPortEnterCritical>
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800745a:	b25b      	sxtb	r3, r3
 800745c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007460:	d103      	bne.n	800746a <vQueueWaitForMessageRestricted+0x2a>
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	2200      	movs	r2, #0
 8007466:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007470:	b25b      	sxtb	r3, r3
 8007472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007476:	d103      	bne.n	8007480 <vQueueWaitForMessageRestricted+0x40>
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	2200      	movs	r2, #0
 800747c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007480:	f001 fbf8 	bl	8008c74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007488:	2b00      	cmp	r3, #0
 800748a:	d106      	bne.n	800749a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	3324      	adds	r3, #36	; 0x24
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	68b9      	ldr	r1, [r7, #8]
 8007494:	4618      	mov	r0, r3
 8007496:	f000 fc77 	bl	8007d88 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800749a:	6978      	ldr	r0, [r7, #20]
 800749c:	f7ff ff26 	bl	80072ec <prvUnlockQueue>
	}
 80074a0:	bf00      	nop
 80074a2:	3718      	adds	r7, #24
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b08e      	sub	sp, #56	; 0x38
 80074ac:	af04      	add	r7, sp, #16
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	607a      	str	r2, [r7, #4]
 80074b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80074b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d10c      	bne.n	80074d6 <xTaskCreateStatic+0x2e>
	__asm volatile
 80074bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c0:	b672      	cpsid	i
 80074c2:	f383 8811 	msr	BASEPRI, r3
 80074c6:	f3bf 8f6f 	isb	sy
 80074ca:	f3bf 8f4f 	dsb	sy
 80074ce:	b662      	cpsie	i
 80074d0:	623b      	str	r3, [r7, #32]
}
 80074d2:	bf00      	nop
 80074d4:	e7fe      	b.n	80074d4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80074d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d10c      	bne.n	80074f6 <xTaskCreateStatic+0x4e>
	__asm volatile
 80074dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e0:	b672      	cpsid	i
 80074e2:	f383 8811 	msr	BASEPRI, r3
 80074e6:	f3bf 8f6f 	isb	sy
 80074ea:	f3bf 8f4f 	dsb	sy
 80074ee:	b662      	cpsie	i
 80074f0:	61fb      	str	r3, [r7, #28]
}
 80074f2:	bf00      	nop
 80074f4:	e7fe      	b.n	80074f4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80074f6:	23a8      	movs	r3, #168	; 0xa8
 80074f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	2ba8      	cmp	r3, #168	; 0xa8
 80074fe:	d00c      	beq.n	800751a <xTaskCreateStatic+0x72>
	__asm volatile
 8007500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007504:	b672      	cpsid	i
 8007506:	f383 8811 	msr	BASEPRI, r3
 800750a:	f3bf 8f6f 	isb	sy
 800750e:	f3bf 8f4f 	dsb	sy
 8007512:	b662      	cpsie	i
 8007514:	61bb      	str	r3, [r7, #24]
}
 8007516:	bf00      	nop
 8007518:	e7fe      	b.n	8007518 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800751a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800751c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800751e:	2b00      	cmp	r3, #0
 8007520:	d01e      	beq.n	8007560 <xTaskCreateStatic+0xb8>
 8007522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007524:	2b00      	cmp	r3, #0
 8007526:	d01b      	beq.n	8007560 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800752c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007530:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007534:	2202      	movs	r2, #2
 8007536:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800753a:	2300      	movs	r3, #0
 800753c:	9303      	str	r3, [sp, #12]
 800753e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007540:	9302      	str	r3, [sp, #8]
 8007542:	f107 0314 	add.w	r3, r7, #20
 8007546:	9301      	str	r3, [sp, #4]
 8007548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754a:	9300      	str	r3, [sp, #0]
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	68b9      	ldr	r1, [r7, #8]
 8007552:	68f8      	ldr	r0, [r7, #12]
 8007554:	f000 f850 	bl	80075f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007558:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800755a:	f000 f8f5 	bl	8007748 <prvAddNewTaskToReadyList>
 800755e:	e001      	b.n	8007564 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8007560:	2300      	movs	r3, #0
 8007562:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007564:	697b      	ldr	r3, [r7, #20]
	}
 8007566:	4618      	mov	r0, r3
 8007568:	3728      	adds	r7, #40	; 0x28
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}

0800756e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800756e:	b580      	push	{r7, lr}
 8007570:	b08c      	sub	sp, #48	; 0x30
 8007572:	af04      	add	r7, sp, #16
 8007574:	60f8      	str	r0, [r7, #12]
 8007576:	60b9      	str	r1, [r7, #8]
 8007578:	603b      	str	r3, [r7, #0]
 800757a:	4613      	mov	r3, r2
 800757c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800757e:	88fb      	ldrh	r3, [r7, #6]
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	4618      	mov	r0, r3
 8007584:	f001 fc6e 	bl	8008e64 <pvPortMalloc>
 8007588:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00e      	beq.n	80075ae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007590:	20a8      	movs	r0, #168	; 0xa8
 8007592:	f001 fc67 	bl	8008e64 <pvPortMalloc>
 8007596:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d003      	beq.n	80075a6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	697a      	ldr	r2, [r7, #20]
 80075a2:	631a      	str	r2, [r3, #48]	; 0x30
 80075a4:	e005      	b.n	80075b2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80075a6:	6978      	ldr	r0, [r7, #20]
 80075a8:	f001 fd26 	bl	8008ff8 <vPortFree>
 80075ac:	e001      	b.n	80075b2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80075ae:	2300      	movs	r3, #0
 80075b0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d017      	beq.n	80075e8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80075c0:	88fa      	ldrh	r2, [r7, #6]
 80075c2:	2300      	movs	r3, #0
 80075c4:	9303      	str	r3, [sp, #12]
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	9302      	str	r3, [sp, #8]
 80075ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075cc:	9301      	str	r3, [sp, #4]
 80075ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d0:	9300      	str	r3, [sp, #0]
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	68b9      	ldr	r1, [r7, #8]
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f000 f80e 	bl	80075f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80075dc:	69f8      	ldr	r0, [r7, #28]
 80075de:	f000 f8b3 	bl	8007748 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80075e2:	2301      	movs	r3, #1
 80075e4:	61bb      	str	r3, [r7, #24]
 80075e6:	e002      	b.n	80075ee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80075e8:	f04f 33ff 	mov.w	r3, #4294967295
 80075ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80075ee:	69bb      	ldr	r3, [r7, #24]
	}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3720      	adds	r7, #32
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b088      	sub	sp, #32
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	607a      	str	r2, [r7, #4]
 8007604:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007608:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	461a      	mov	r2, r3
 8007610:	21a5      	movs	r1, #165	; 0xa5
 8007612:	f001 fe0b 	bl	800922c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800761a:	6879      	ldr	r1, [r7, #4]
 800761c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007620:	440b      	add	r3, r1
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	4413      	add	r3, r2
 8007626:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	f023 0307 	bic.w	r3, r3, #7
 800762e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	f003 0307 	and.w	r3, r3, #7
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00c      	beq.n	8007654 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800763a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763e:	b672      	cpsid	i
 8007640:	f383 8811 	msr	BASEPRI, r3
 8007644:	f3bf 8f6f 	isb	sy
 8007648:	f3bf 8f4f 	dsb	sy
 800764c:	b662      	cpsie	i
 800764e:	617b      	str	r3, [r7, #20]
}
 8007650:	bf00      	nop
 8007652:	e7fe      	b.n	8007652 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d01f      	beq.n	800769a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800765a:	2300      	movs	r3, #0
 800765c:	61fb      	str	r3, [r7, #28]
 800765e:	e012      	b.n	8007686 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	4413      	add	r3, r2
 8007666:	7819      	ldrb	r1, [r3, #0]
 8007668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800766a:	69fb      	ldr	r3, [r7, #28]
 800766c:	4413      	add	r3, r2
 800766e:	3334      	adds	r3, #52	; 0x34
 8007670:	460a      	mov	r2, r1
 8007672:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007674:	68ba      	ldr	r2, [r7, #8]
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	4413      	add	r3, r2
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d006      	beq.n	800768e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	3301      	adds	r3, #1
 8007684:	61fb      	str	r3, [r7, #28]
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	2b0f      	cmp	r3, #15
 800768a:	d9e9      	bls.n	8007660 <prvInitialiseNewTask+0x68>
 800768c:	e000      	b.n	8007690 <prvInitialiseNewTask+0x98>
			{
				break;
 800768e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007692:	2200      	movs	r2, #0
 8007694:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007698:	e003      	b.n	80076a2 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800769a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769c:	2200      	movs	r2, #0
 800769e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80076a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a4:	2b37      	cmp	r3, #55	; 0x37
 80076a6:	d901      	bls.n	80076ac <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80076a8:	2337      	movs	r3, #55	; 0x37
 80076aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80076ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80076b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076b6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80076b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ba:	2200      	movs	r2, #0
 80076bc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80076be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c0:	3304      	adds	r3, #4
 80076c2:	4618      	mov	r0, r3
 80076c4:	f7ff f910 	bl	80068e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80076c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ca:	3318      	adds	r3, #24
 80076cc:	4618      	mov	r0, r3
 80076ce:	f7ff f90b 	bl	80068e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80076d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80076de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80076e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80076e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ea:	2200      	movs	r2, #0
 80076ec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80076f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80076f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fa:	3354      	adds	r3, #84	; 0x54
 80076fc:	224c      	movs	r2, #76	; 0x4c
 80076fe:	2100      	movs	r1, #0
 8007700:	4618      	mov	r0, r3
 8007702:	f001 fd93 	bl	800922c <memset>
 8007706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007708:	4a0c      	ldr	r2, [pc, #48]	; (800773c <prvInitialiseNewTask+0x144>)
 800770a:	659a      	str	r2, [r3, #88]	; 0x58
 800770c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770e:	4a0c      	ldr	r2, [pc, #48]	; (8007740 <prvInitialiseNewTask+0x148>)
 8007710:	65da      	str	r2, [r3, #92]	; 0x5c
 8007712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007714:	4a0b      	ldr	r2, [pc, #44]	; (8007744 <prvInitialiseNewTask+0x14c>)
 8007716:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007718:	683a      	ldr	r2, [r7, #0]
 800771a:	68f9      	ldr	r1, [r7, #12]
 800771c:	69b8      	ldr	r0, [r7, #24]
 800771e:	f001 f96b 	bl	80089f8 <pxPortInitialiseStack>
 8007722:	4602      	mov	r2, r0
 8007724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007726:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772a:	2b00      	cmp	r3, #0
 800772c:	d002      	beq.n	8007734 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800772e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007732:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007734:	bf00      	nop
 8007736:	3720      	adds	r7, #32
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	20004e98 	.word	0x20004e98
 8007740:	20004f00 	.word	0x20004f00
 8007744:	20004f68 	.word	0x20004f68

08007748 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007750:	f001 fa5c 	bl	8008c0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007754:	4b2d      	ldr	r3, [pc, #180]	; (800780c <prvAddNewTaskToReadyList+0xc4>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	3301      	adds	r3, #1
 800775a:	4a2c      	ldr	r2, [pc, #176]	; (800780c <prvAddNewTaskToReadyList+0xc4>)
 800775c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800775e:	4b2c      	ldr	r3, [pc, #176]	; (8007810 <prvAddNewTaskToReadyList+0xc8>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d109      	bne.n	800777a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007766:	4a2a      	ldr	r2, [pc, #168]	; (8007810 <prvAddNewTaskToReadyList+0xc8>)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800776c:	4b27      	ldr	r3, [pc, #156]	; (800780c <prvAddNewTaskToReadyList+0xc4>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	2b01      	cmp	r3, #1
 8007772:	d110      	bne.n	8007796 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007774:	f000 fc3c 	bl	8007ff0 <prvInitialiseTaskLists>
 8007778:	e00d      	b.n	8007796 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800777a:	4b26      	ldr	r3, [pc, #152]	; (8007814 <prvAddNewTaskToReadyList+0xcc>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d109      	bne.n	8007796 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007782:	4b23      	ldr	r3, [pc, #140]	; (8007810 <prvAddNewTaskToReadyList+0xc8>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778c:	429a      	cmp	r2, r3
 800778e:	d802      	bhi.n	8007796 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007790:	4a1f      	ldr	r2, [pc, #124]	; (8007810 <prvAddNewTaskToReadyList+0xc8>)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007796:	4b20      	ldr	r3, [pc, #128]	; (8007818 <prvAddNewTaskToReadyList+0xd0>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	3301      	adds	r3, #1
 800779c:	4a1e      	ldr	r2, [pc, #120]	; (8007818 <prvAddNewTaskToReadyList+0xd0>)
 800779e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80077a0:	4b1d      	ldr	r3, [pc, #116]	; (8007818 <prvAddNewTaskToReadyList+0xd0>)
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ac:	4b1b      	ldr	r3, [pc, #108]	; (800781c <prvAddNewTaskToReadyList+0xd4>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d903      	bls.n	80077bc <prvAddNewTaskToReadyList+0x74>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b8:	4a18      	ldr	r2, [pc, #96]	; (800781c <prvAddNewTaskToReadyList+0xd4>)
 80077ba:	6013      	str	r3, [r2, #0]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077c0:	4613      	mov	r3, r2
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	4413      	add	r3, r2
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	4a15      	ldr	r2, [pc, #84]	; (8007820 <prvAddNewTaskToReadyList+0xd8>)
 80077ca:	441a      	add	r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	3304      	adds	r3, #4
 80077d0:	4619      	mov	r1, r3
 80077d2:	4610      	mov	r0, r2
 80077d4:	f7ff f895 	bl	8006902 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80077d8:	f001 fa4c 	bl	8008c74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80077dc:	4b0d      	ldr	r3, [pc, #52]	; (8007814 <prvAddNewTaskToReadyList+0xcc>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00e      	beq.n	8007802 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80077e4:	4b0a      	ldr	r3, [pc, #40]	; (8007810 <prvAddNewTaskToReadyList+0xc8>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d207      	bcs.n	8007802 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80077f2:	4b0c      	ldr	r3, [pc, #48]	; (8007824 <prvAddNewTaskToReadyList+0xdc>)
 80077f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077f8:	601a      	str	r2, [r3, #0]
 80077fa:	f3bf 8f4f 	dsb	sy
 80077fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007802:	bf00      	nop
 8007804:	3708      	adds	r7, #8
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	20001120 	.word	0x20001120
 8007810:	20000c4c 	.word	0x20000c4c
 8007814:	2000112c 	.word	0x2000112c
 8007818:	2000113c 	.word	0x2000113c
 800781c:	20001128 	.word	0x20001128
 8007820:	20000c50 	.word	0x20000c50
 8007824:	e000ed04 	.word	0xe000ed04

08007828 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007830:	2300      	movs	r3, #0
 8007832:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d019      	beq.n	800786e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800783a:	4b14      	ldr	r3, [pc, #80]	; (800788c <vTaskDelay+0x64>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d00c      	beq.n	800785c <vTaskDelay+0x34>
	__asm volatile
 8007842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007846:	b672      	cpsid	i
 8007848:	f383 8811 	msr	BASEPRI, r3
 800784c:	f3bf 8f6f 	isb	sy
 8007850:	f3bf 8f4f 	dsb	sy
 8007854:	b662      	cpsie	i
 8007856:	60bb      	str	r3, [r7, #8]
}
 8007858:	bf00      	nop
 800785a:	e7fe      	b.n	800785a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800785c:	f000 f88e 	bl	800797c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007860:	2100      	movs	r1, #0
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 fd18 	bl	8008298 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007868:	f000 f896 	bl	8007998 <xTaskResumeAll>
 800786c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d107      	bne.n	8007884 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8007874:	4b06      	ldr	r3, [pc, #24]	; (8007890 <vTaskDelay+0x68>)
 8007876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800787a:	601a      	str	r2, [r3, #0]
 800787c:	f3bf 8f4f 	dsb	sy
 8007880:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007884:	bf00      	nop
 8007886:	3710      	adds	r7, #16
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	20001148 	.word	0x20001148
 8007890:	e000ed04 	.word	0xe000ed04

08007894 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b08a      	sub	sp, #40	; 0x28
 8007898:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800789a:	2300      	movs	r3, #0
 800789c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800789e:	2300      	movs	r3, #0
 80078a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80078a2:	463a      	mov	r2, r7
 80078a4:	1d39      	adds	r1, r7, #4
 80078a6:	f107 0308 	add.w	r3, r7, #8
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7fe ffc8 	bl	8006840 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80078b0:	6839      	ldr	r1, [r7, #0]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	68ba      	ldr	r2, [r7, #8]
 80078b6:	9202      	str	r2, [sp, #8]
 80078b8:	9301      	str	r3, [sp, #4]
 80078ba:	2300      	movs	r3, #0
 80078bc:	9300      	str	r3, [sp, #0]
 80078be:	2300      	movs	r3, #0
 80078c0:	460a      	mov	r2, r1
 80078c2:	4926      	ldr	r1, [pc, #152]	; (800795c <vTaskStartScheduler+0xc8>)
 80078c4:	4826      	ldr	r0, [pc, #152]	; (8007960 <vTaskStartScheduler+0xcc>)
 80078c6:	f7ff fdef 	bl	80074a8 <xTaskCreateStatic>
 80078ca:	4603      	mov	r3, r0
 80078cc:	4a25      	ldr	r2, [pc, #148]	; (8007964 <vTaskStartScheduler+0xd0>)
 80078ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80078d0:	4b24      	ldr	r3, [pc, #144]	; (8007964 <vTaskStartScheduler+0xd0>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d002      	beq.n	80078de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80078d8:	2301      	movs	r3, #1
 80078da:	617b      	str	r3, [r7, #20]
 80078dc:	e001      	b.n	80078e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80078de:	2300      	movs	r3, #0
 80078e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d102      	bne.n	80078ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80078e8:	f000 fd2a 	bl	8008340 <xTimerCreateTimerTask>
 80078ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d11d      	bne.n	8007930 <vTaskStartScheduler+0x9c>
	__asm volatile
 80078f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f8:	b672      	cpsid	i
 80078fa:	f383 8811 	msr	BASEPRI, r3
 80078fe:	f3bf 8f6f 	isb	sy
 8007902:	f3bf 8f4f 	dsb	sy
 8007906:	b662      	cpsie	i
 8007908:	613b      	str	r3, [r7, #16]
}
 800790a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800790c:	4b16      	ldr	r3, [pc, #88]	; (8007968 <vTaskStartScheduler+0xd4>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	3354      	adds	r3, #84	; 0x54
 8007912:	4a16      	ldr	r2, [pc, #88]	; (800796c <vTaskStartScheduler+0xd8>)
 8007914:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007916:	4b16      	ldr	r3, [pc, #88]	; (8007970 <vTaskStartScheduler+0xdc>)
 8007918:	f04f 32ff 	mov.w	r2, #4294967295
 800791c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800791e:	4b15      	ldr	r3, [pc, #84]	; (8007974 <vTaskStartScheduler+0xe0>)
 8007920:	2201      	movs	r2, #1
 8007922:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007924:	4b14      	ldr	r3, [pc, #80]	; (8007978 <vTaskStartScheduler+0xe4>)
 8007926:	2200      	movs	r2, #0
 8007928:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800792a:	f001 f8f1 	bl	8008b10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800792e:	e010      	b.n	8007952 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007936:	d10c      	bne.n	8007952 <vTaskStartScheduler+0xbe>
	__asm volatile
 8007938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793c:	b672      	cpsid	i
 800793e:	f383 8811 	msr	BASEPRI, r3
 8007942:	f3bf 8f6f 	isb	sy
 8007946:	f3bf 8f4f 	dsb	sy
 800794a:	b662      	cpsie	i
 800794c:	60fb      	str	r3, [r7, #12]
}
 800794e:	bf00      	nop
 8007950:	e7fe      	b.n	8007950 <vTaskStartScheduler+0xbc>
}
 8007952:	bf00      	nop
 8007954:	3718      	adds	r7, #24
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	080094d0 	.word	0x080094d0
 8007960:	08007fc1 	.word	0x08007fc1
 8007964:	20001144 	.word	0x20001144
 8007968:	20000c4c 	.word	0x20000c4c
 800796c:	2000005c 	.word	0x2000005c
 8007970:	20001140 	.word	0x20001140
 8007974:	2000112c 	.word	0x2000112c
 8007978:	20001124 	.word	0x20001124

0800797c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800797c:	b480      	push	{r7}
 800797e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007980:	4b04      	ldr	r3, [pc, #16]	; (8007994 <vTaskSuspendAll+0x18>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	3301      	adds	r3, #1
 8007986:	4a03      	ldr	r2, [pc, #12]	; (8007994 <vTaskSuspendAll+0x18>)
 8007988:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800798a:	bf00      	nop
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr
 8007994:	20001148 	.word	0x20001148

08007998 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800799e:	2300      	movs	r3, #0
 80079a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80079a2:	2300      	movs	r3, #0
 80079a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80079a6:	4b43      	ldr	r3, [pc, #268]	; (8007ab4 <xTaskResumeAll+0x11c>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d10c      	bne.n	80079c8 <xTaskResumeAll+0x30>
	__asm volatile
 80079ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b2:	b672      	cpsid	i
 80079b4:	f383 8811 	msr	BASEPRI, r3
 80079b8:	f3bf 8f6f 	isb	sy
 80079bc:	f3bf 8f4f 	dsb	sy
 80079c0:	b662      	cpsie	i
 80079c2:	603b      	str	r3, [r7, #0]
}
 80079c4:	bf00      	nop
 80079c6:	e7fe      	b.n	80079c6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80079c8:	f001 f920 	bl	8008c0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80079cc:	4b39      	ldr	r3, [pc, #228]	; (8007ab4 <xTaskResumeAll+0x11c>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	3b01      	subs	r3, #1
 80079d2:	4a38      	ldr	r2, [pc, #224]	; (8007ab4 <xTaskResumeAll+0x11c>)
 80079d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079d6:	4b37      	ldr	r3, [pc, #220]	; (8007ab4 <xTaskResumeAll+0x11c>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d162      	bne.n	8007aa4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80079de:	4b36      	ldr	r3, [pc, #216]	; (8007ab8 <xTaskResumeAll+0x120>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d05e      	beq.n	8007aa4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079e6:	e02f      	b.n	8007a48 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079e8:	4b34      	ldr	r3, [pc, #208]	; (8007abc <xTaskResumeAll+0x124>)
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	3318      	adds	r3, #24
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7fe ffe1 	bl	80069bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	3304      	adds	r3, #4
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7fe ffdc 	bl	80069bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a08:	4b2d      	ldr	r3, [pc, #180]	; (8007ac0 <xTaskResumeAll+0x128>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d903      	bls.n	8007a18 <xTaskResumeAll+0x80>
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a14:	4a2a      	ldr	r2, [pc, #168]	; (8007ac0 <xTaskResumeAll+0x128>)
 8007a16:	6013      	str	r3, [r2, #0]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	4413      	add	r3, r2
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	4a27      	ldr	r2, [pc, #156]	; (8007ac4 <xTaskResumeAll+0x12c>)
 8007a26:	441a      	add	r2, r3
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	3304      	adds	r3, #4
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	4610      	mov	r0, r2
 8007a30:	f7fe ff67 	bl	8006902 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a38:	4b23      	ldr	r3, [pc, #140]	; (8007ac8 <xTaskResumeAll+0x130>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d302      	bcc.n	8007a48 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8007a42:	4b22      	ldr	r3, [pc, #136]	; (8007acc <xTaskResumeAll+0x134>)
 8007a44:	2201      	movs	r2, #1
 8007a46:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a48:	4b1c      	ldr	r3, [pc, #112]	; (8007abc <xTaskResumeAll+0x124>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d1cb      	bne.n	80079e8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d001      	beq.n	8007a5a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007a56:	f000 fb6f 	bl	8008138 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007a5a:	4b1d      	ldr	r3, [pc, #116]	; (8007ad0 <xTaskResumeAll+0x138>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d010      	beq.n	8007a88 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007a66:	f000 f847 	bl	8007af8 <xTaskIncrementTick>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d002      	beq.n	8007a76 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8007a70:	4b16      	ldr	r3, [pc, #88]	; (8007acc <xTaskResumeAll+0x134>)
 8007a72:	2201      	movs	r2, #1
 8007a74:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1f1      	bne.n	8007a66 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8007a82:	4b13      	ldr	r3, [pc, #76]	; (8007ad0 <xTaskResumeAll+0x138>)
 8007a84:	2200      	movs	r2, #0
 8007a86:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007a88:	4b10      	ldr	r3, [pc, #64]	; (8007acc <xTaskResumeAll+0x134>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d009      	beq.n	8007aa4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007a90:	2301      	movs	r3, #1
 8007a92:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007a94:	4b0f      	ldr	r3, [pc, #60]	; (8007ad4 <xTaskResumeAll+0x13c>)
 8007a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a9a:	601a      	str	r2, [r3, #0]
 8007a9c:	f3bf 8f4f 	dsb	sy
 8007aa0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007aa4:	f001 f8e6 	bl	8008c74 <vPortExitCritical>

	return xAlreadyYielded;
 8007aa8:	68bb      	ldr	r3, [r7, #8]
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3710      	adds	r7, #16
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	20001148 	.word	0x20001148
 8007ab8:	20001120 	.word	0x20001120
 8007abc:	200010e0 	.word	0x200010e0
 8007ac0:	20001128 	.word	0x20001128
 8007ac4:	20000c50 	.word	0x20000c50
 8007ac8:	20000c4c 	.word	0x20000c4c
 8007acc:	20001134 	.word	0x20001134
 8007ad0:	20001130 	.word	0x20001130
 8007ad4:	e000ed04 	.word	0xe000ed04

08007ad8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007ade:	4b05      	ldr	r3, [pc, #20]	; (8007af4 <xTaskGetTickCount+0x1c>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007ae4:	687b      	ldr	r3, [r7, #4]
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	370c      	adds	r7, #12
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	20001124 	.word	0x20001124

08007af8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b086      	sub	sp, #24
 8007afc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007afe:	2300      	movs	r3, #0
 8007b00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b02:	4b50      	ldr	r3, [pc, #320]	; (8007c44 <xTaskIncrementTick+0x14c>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f040 808b 	bne.w	8007c22 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007b0c:	4b4e      	ldr	r3, [pc, #312]	; (8007c48 <xTaskIncrementTick+0x150>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	3301      	adds	r3, #1
 8007b12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007b14:	4a4c      	ldr	r2, [pc, #304]	; (8007c48 <xTaskIncrementTick+0x150>)
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d122      	bne.n	8007b66 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8007b20:	4b4a      	ldr	r3, [pc, #296]	; (8007c4c <xTaskIncrementTick+0x154>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00c      	beq.n	8007b44 <xTaskIncrementTick+0x4c>
	__asm volatile
 8007b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2e:	b672      	cpsid	i
 8007b30:	f383 8811 	msr	BASEPRI, r3
 8007b34:	f3bf 8f6f 	isb	sy
 8007b38:	f3bf 8f4f 	dsb	sy
 8007b3c:	b662      	cpsie	i
 8007b3e:	603b      	str	r3, [r7, #0]
}
 8007b40:	bf00      	nop
 8007b42:	e7fe      	b.n	8007b42 <xTaskIncrementTick+0x4a>
 8007b44:	4b41      	ldr	r3, [pc, #260]	; (8007c4c <xTaskIncrementTick+0x154>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	60fb      	str	r3, [r7, #12]
 8007b4a:	4b41      	ldr	r3, [pc, #260]	; (8007c50 <xTaskIncrementTick+0x158>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a3f      	ldr	r2, [pc, #252]	; (8007c4c <xTaskIncrementTick+0x154>)
 8007b50:	6013      	str	r3, [r2, #0]
 8007b52:	4a3f      	ldr	r2, [pc, #252]	; (8007c50 <xTaskIncrementTick+0x158>)
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6013      	str	r3, [r2, #0]
 8007b58:	4b3e      	ldr	r3, [pc, #248]	; (8007c54 <xTaskIncrementTick+0x15c>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	4a3d      	ldr	r2, [pc, #244]	; (8007c54 <xTaskIncrementTick+0x15c>)
 8007b60:	6013      	str	r3, [r2, #0]
 8007b62:	f000 fae9 	bl	8008138 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b66:	4b3c      	ldr	r3, [pc, #240]	; (8007c58 <xTaskIncrementTick+0x160>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	693a      	ldr	r2, [r7, #16]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d349      	bcc.n	8007c04 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b70:	4b36      	ldr	r3, [pc, #216]	; (8007c4c <xTaskIncrementTick+0x154>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d104      	bne.n	8007b84 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b7a:	4b37      	ldr	r3, [pc, #220]	; (8007c58 <xTaskIncrementTick+0x160>)
 8007b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b80:	601a      	str	r2, [r3, #0]
					break;
 8007b82:	e03f      	b.n	8007c04 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b84:	4b31      	ldr	r3, [pc, #196]	; (8007c4c <xTaskIncrementTick+0x154>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007b94:	693a      	ldr	r2, [r7, #16]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d203      	bcs.n	8007ba4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007b9c:	4a2e      	ldr	r2, [pc, #184]	; (8007c58 <xTaskIncrementTick+0x160>)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007ba2:	e02f      	b.n	8007c04 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	3304      	adds	r3, #4
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7fe ff07 	bl	80069bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d004      	beq.n	8007bc0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	3318      	adds	r3, #24
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7fe fefe 	bl	80069bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bc4:	4b25      	ldr	r3, [pc, #148]	; (8007c5c <xTaskIncrementTick+0x164>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d903      	bls.n	8007bd4 <xTaskIncrementTick+0xdc>
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd0:	4a22      	ldr	r2, [pc, #136]	; (8007c5c <xTaskIncrementTick+0x164>)
 8007bd2:	6013      	str	r3, [r2, #0]
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bd8:	4613      	mov	r3, r2
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	4413      	add	r3, r2
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	4a1f      	ldr	r2, [pc, #124]	; (8007c60 <xTaskIncrementTick+0x168>)
 8007be2:	441a      	add	r2, r3
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	3304      	adds	r3, #4
 8007be8:	4619      	mov	r1, r3
 8007bea:	4610      	mov	r0, r2
 8007bec:	f7fe fe89 	bl	8006902 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bf4:	4b1b      	ldr	r3, [pc, #108]	; (8007c64 <xTaskIncrementTick+0x16c>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d3b8      	bcc.n	8007b70 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c02:	e7b5      	b.n	8007b70 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007c04:	4b17      	ldr	r3, [pc, #92]	; (8007c64 <xTaskIncrementTick+0x16c>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c0a:	4915      	ldr	r1, [pc, #84]	; (8007c60 <xTaskIncrementTick+0x168>)
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	4413      	add	r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	440b      	add	r3, r1
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d907      	bls.n	8007c2c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	617b      	str	r3, [r7, #20]
 8007c20:	e004      	b.n	8007c2c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007c22:	4b11      	ldr	r3, [pc, #68]	; (8007c68 <xTaskIncrementTick+0x170>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	3301      	adds	r3, #1
 8007c28:	4a0f      	ldr	r2, [pc, #60]	; (8007c68 <xTaskIncrementTick+0x170>)
 8007c2a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007c2c:	4b0f      	ldr	r3, [pc, #60]	; (8007c6c <xTaskIncrementTick+0x174>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d001      	beq.n	8007c38 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8007c34:	2301      	movs	r3, #1
 8007c36:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007c38:	697b      	ldr	r3, [r7, #20]
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3718      	adds	r7, #24
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop
 8007c44:	20001148 	.word	0x20001148
 8007c48:	20001124 	.word	0x20001124
 8007c4c:	200010d8 	.word	0x200010d8
 8007c50:	200010dc 	.word	0x200010dc
 8007c54:	20001138 	.word	0x20001138
 8007c58:	20001140 	.word	0x20001140
 8007c5c:	20001128 	.word	0x20001128
 8007c60:	20000c50 	.word	0x20000c50
 8007c64:	20000c4c 	.word	0x20000c4c
 8007c68:	20001130 	.word	0x20001130
 8007c6c:	20001134 	.word	0x20001134

08007c70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007c70:	b480      	push	{r7}
 8007c72:	b085      	sub	sp, #20
 8007c74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007c76:	4b2b      	ldr	r3, [pc, #172]	; (8007d24 <vTaskSwitchContext+0xb4>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d003      	beq.n	8007c86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007c7e:	4b2a      	ldr	r3, [pc, #168]	; (8007d28 <vTaskSwitchContext+0xb8>)
 8007c80:	2201      	movs	r2, #1
 8007c82:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007c84:	e048      	b.n	8007d18 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8007c86:	4b28      	ldr	r3, [pc, #160]	; (8007d28 <vTaskSwitchContext+0xb8>)
 8007c88:	2200      	movs	r2, #0
 8007c8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c8c:	4b27      	ldr	r3, [pc, #156]	; (8007d2c <vTaskSwitchContext+0xbc>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	60fb      	str	r3, [r7, #12]
 8007c92:	e012      	b.n	8007cba <vTaskSwitchContext+0x4a>
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d10c      	bne.n	8007cb4 <vTaskSwitchContext+0x44>
	__asm volatile
 8007c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9e:	b672      	cpsid	i
 8007ca0:	f383 8811 	msr	BASEPRI, r3
 8007ca4:	f3bf 8f6f 	isb	sy
 8007ca8:	f3bf 8f4f 	dsb	sy
 8007cac:	b662      	cpsie	i
 8007cae:	607b      	str	r3, [r7, #4]
}
 8007cb0:	bf00      	nop
 8007cb2:	e7fe      	b.n	8007cb2 <vTaskSwitchContext+0x42>
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	3b01      	subs	r3, #1
 8007cb8:	60fb      	str	r3, [r7, #12]
 8007cba:	491d      	ldr	r1, [pc, #116]	; (8007d30 <vTaskSwitchContext+0xc0>)
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	4413      	add	r3, r2
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	440b      	add	r3, r1
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d0e2      	beq.n	8007c94 <vTaskSwitchContext+0x24>
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	4413      	add	r3, r2
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	4a15      	ldr	r2, [pc, #84]	; (8007d30 <vTaskSwitchContext+0xc0>)
 8007cda:	4413      	add	r3, r2
 8007cdc:	60bb      	str	r3, [r7, #8]
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	685a      	ldr	r2, [r3, #4]
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	605a      	str	r2, [r3, #4]
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	685a      	ldr	r2, [r3, #4]
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	3308      	adds	r3, #8
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d104      	bne.n	8007cfe <vTaskSwitchContext+0x8e>
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	685a      	ldr	r2, [r3, #4]
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	605a      	str	r2, [r3, #4]
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	4a0b      	ldr	r2, [pc, #44]	; (8007d34 <vTaskSwitchContext+0xc4>)
 8007d06:	6013      	str	r3, [r2, #0]
 8007d08:	4a08      	ldr	r2, [pc, #32]	; (8007d2c <vTaskSwitchContext+0xbc>)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007d0e:	4b09      	ldr	r3, [pc, #36]	; (8007d34 <vTaskSwitchContext+0xc4>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	3354      	adds	r3, #84	; 0x54
 8007d14:	4a08      	ldr	r2, [pc, #32]	; (8007d38 <vTaskSwitchContext+0xc8>)
 8007d16:	6013      	str	r3, [r2, #0]
}
 8007d18:	bf00      	nop
 8007d1a:	3714      	adds	r7, #20
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr
 8007d24:	20001148 	.word	0x20001148
 8007d28:	20001134 	.word	0x20001134
 8007d2c:	20001128 	.word	0x20001128
 8007d30:	20000c50 	.word	0x20000c50
 8007d34:	20000c4c 	.word	0x20000c4c
 8007d38:	2000005c 	.word	0x2000005c

08007d3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d10c      	bne.n	8007d66 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8007d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d50:	b672      	cpsid	i
 8007d52:	f383 8811 	msr	BASEPRI, r3
 8007d56:	f3bf 8f6f 	isb	sy
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	b662      	cpsie	i
 8007d60:	60fb      	str	r3, [r7, #12]
}
 8007d62:	bf00      	nop
 8007d64:	e7fe      	b.n	8007d64 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d66:	4b07      	ldr	r3, [pc, #28]	; (8007d84 <vTaskPlaceOnEventList+0x48>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	3318      	adds	r3, #24
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f7fe fdeb 	bl	800694a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007d74:	2101      	movs	r1, #1
 8007d76:	6838      	ldr	r0, [r7, #0]
 8007d78:	f000 fa8e 	bl	8008298 <prvAddCurrentTaskToDelayedList>
}
 8007d7c:	bf00      	nop
 8007d7e:	3710      	adds	r7, #16
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	20000c4c 	.word	0x20000c4c

08007d88 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b086      	sub	sp, #24
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d10c      	bne.n	8007db4 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8007d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9e:	b672      	cpsid	i
 8007da0:	f383 8811 	msr	BASEPRI, r3
 8007da4:	f3bf 8f6f 	isb	sy
 8007da8:	f3bf 8f4f 	dsb	sy
 8007dac:	b662      	cpsie	i
 8007dae:	617b      	str	r3, [r7, #20]
}
 8007db0:	bf00      	nop
 8007db2:	e7fe      	b.n	8007db2 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007db4:	4b0a      	ldr	r3, [pc, #40]	; (8007de0 <vTaskPlaceOnEventListRestricted+0x58>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	3318      	adds	r3, #24
 8007dba:	4619      	mov	r1, r3
 8007dbc:	68f8      	ldr	r0, [r7, #12]
 8007dbe:	f7fe fda0 	bl	8006902 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d002      	beq.n	8007dce <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8007dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8007dcc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007dce:	6879      	ldr	r1, [r7, #4]
 8007dd0:	68b8      	ldr	r0, [r7, #8]
 8007dd2:	f000 fa61 	bl	8008298 <prvAddCurrentTaskToDelayedList>
	}
 8007dd6:	bf00      	nop
 8007dd8:	3718      	adds	r7, #24
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	20000c4c 	.word	0x20000c4c

08007de4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b086      	sub	sp, #24
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	68db      	ldr	r3, [r3, #12]
 8007df2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d10c      	bne.n	8007e14 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8007dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfe:	b672      	cpsid	i
 8007e00:	f383 8811 	msr	BASEPRI, r3
 8007e04:	f3bf 8f6f 	isb	sy
 8007e08:	f3bf 8f4f 	dsb	sy
 8007e0c:	b662      	cpsie	i
 8007e0e:	60fb      	str	r3, [r7, #12]
}
 8007e10:	bf00      	nop
 8007e12:	e7fe      	b.n	8007e12 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	3318      	adds	r3, #24
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f7fe fdcf 	bl	80069bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e1e:	4b1e      	ldr	r3, [pc, #120]	; (8007e98 <xTaskRemoveFromEventList+0xb4>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d11d      	bne.n	8007e62 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	3304      	adds	r3, #4
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7fe fdc6 	bl	80069bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e34:	4b19      	ldr	r3, [pc, #100]	; (8007e9c <xTaskRemoveFromEventList+0xb8>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d903      	bls.n	8007e44 <xTaskRemoveFromEventList+0x60>
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e40:	4a16      	ldr	r2, [pc, #88]	; (8007e9c <xTaskRemoveFromEventList+0xb8>)
 8007e42:	6013      	str	r3, [r2, #0]
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e48:	4613      	mov	r3, r2
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	4413      	add	r3, r2
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	4a13      	ldr	r2, [pc, #76]	; (8007ea0 <xTaskRemoveFromEventList+0xbc>)
 8007e52:	441a      	add	r2, r3
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	3304      	adds	r3, #4
 8007e58:	4619      	mov	r1, r3
 8007e5a:	4610      	mov	r0, r2
 8007e5c:	f7fe fd51 	bl	8006902 <vListInsertEnd>
 8007e60:	e005      	b.n	8007e6e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	3318      	adds	r3, #24
 8007e66:	4619      	mov	r1, r3
 8007e68:	480e      	ldr	r0, [pc, #56]	; (8007ea4 <xTaskRemoveFromEventList+0xc0>)
 8007e6a:	f7fe fd4a 	bl	8006902 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e72:	4b0d      	ldr	r3, [pc, #52]	; (8007ea8 <xTaskRemoveFromEventList+0xc4>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d905      	bls.n	8007e88 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007e80:	4b0a      	ldr	r3, [pc, #40]	; (8007eac <xTaskRemoveFromEventList+0xc8>)
 8007e82:	2201      	movs	r2, #1
 8007e84:	601a      	str	r2, [r3, #0]
 8007e86:	e001      	b.n	8007e8c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007e8c:	697b      	ldr	r3, [r7, #20]
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3718      	adds	r7, #24
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	20001148 	.word	0x20001148
 8007e9c:	20001128 	.word	0x20001128
 8007ea0:	20000c50 	.word	0x20000c50
 8007ea4:	200010e0 	.word	0x200010e0
 8007ea8:	20000c4c 	.word	0x20000c4c
 8007eac:	20001134 	.word	0x20001134

08007eb0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007eb8:	4b06      	ldr	r3, [pc, #24]	; (8007ed4 <vTaskInternalSetTimeOutState+0x24>)
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007ec0:	4b05      	ldr	r3, [pc, #20]	; (8007ed8 <vTaskInternalSetTimeOutState+0x28>)
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	605a      	str	r2, [r3, #4]
}
 8007ec8:	bf00      	nop
 8007eca:	370c      	adds	r7, #12
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr
 8007ed4:	20001138 	.word	0x20001138
 8007ed8:	20001124 	.word	0x20001124

08007edc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b088      	sub	sp, #32
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d10c      	bne.n	8007f06 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8007eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef0:	b672      	cpsid	i
 8007ef2:	f383 8811 	msr	BASEPRI, r3
 8007ef6:	f3bf 8f6f 	isb	sy
 8007efa:	f3bf 8f4f 	dsb	sy
 8007efe:	b662      	cpsie	i
 8007f00:	613b      	str	r3, [r7, #16]
}
 8007f02:	bf00      	nop
 8007f04:	e7fe      	b.n	8007f04 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d10c      	bne.n	8007f26 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8007f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f10:	b672      	cpsid	i
 8007f12:	f383 8811 	msr	BASEPRI, r3
 8007f16:	f3bf 8f6f 	isb	sy
 8007f1a:	f3bf 8f4f 	dsb	sy
 8007f1e:	b662      	cpsie	i
 8007f20:	60fb      	str	r3, [r7, #12]
}
 8007f22:	bf00      	nop
 8007f24:	e7fe      	b.n	8007f24 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8007f26:	f000 fe71 	bl	8008c0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007f2a:	4b1d      	ldr	r3, [pc, #116]	; (8007fa0 <xTaskCheckForTimeOut+0xc4>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	69ba      	ldr	r2, [r7, #24]
 8007f36:	1ad3      	subs	r3, r2, r3
 8007f38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f42:	d102      	bne.n	8007f4a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007f44:	2300      	movs	r3, #0
 8007f46:	61fb      	str	r3, [r7, #28]
 8007f48:	e023      	b.n	8007f92 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	4b15      	ldr	r3, [pc, #84]	; (8007fa4 <xTaskCheckForTimeOut+0xc8>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d007      	beq.n	8007f66 <xTaskCheckForTimeOut+0x8a>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	69ba      	ldr	r2, [r7, #24]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d302      	bcc.n	8007f66 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007f60:	2301      	movs	r3, #1
 8007f62:	61fb      	str	r3, [r7, #28]
 8007f64:	e015      	b.n	8007f92 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	697a      	ldr	r2, [r7, #20]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d20b      	bcs.n	8007f88 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	1ad2      	subs	r2, r2, r3
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f7ff ff97 	bl	8007eb0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007f82:	2300      	movs	r3, #0
 8007f84:	61fb      	str	r3, [r7, #28]
 8007f86:	e004      	b.n	8007f92 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007f92:	f000 fe6f 	bl	8008c74 <vPortExitCritical>

	return xReturn;
 8007f96:	69fb      	ldr	r3, [r7, #28]
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3720      	adds	r7, #32
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}
 8007fa0:	20001124 	.word	0x20001124
 8007fa4:	20001138 	.word	0x20001138

08007fa8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007fa8:	b480      	push	{r7}
 8007faa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007fac:	4b03      	ldr	r3, [pc, #12]	; (8007fbc <vTaskMissedYield+0x14>)
 8007fae:	2201      	movs	r2, #1
 8007fb0:	601a      	str	r2, [r3, #0]
}
 8007fb2:	bf00      	nop
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr
 8007fbc:	20001134 	.word	0x20001134

08007fc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007fc8:	f000 f852 	bl	8008070 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007fcc:	4b06      	ldr	r3, [pc, #24]	; (8007fe8 <prvIdleTask+0x28>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d9f9      	bls.n	8007fc8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007fd4:	4b05      	ldr	r3, [pc, #20]	; (8007fec <prvIdleTask+0x2c>)
 8007fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fda:	601a      	str	r2, [r3, #0]
 8007fdc:	f3bf 8f4f 	dsb	sy
 8007fe0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007fe4:	e7f0      	b.n	8007fc8 <prvIdleTask+0x8>
 8007fe6:	bf00      	nop
 8007fe8:	20000c50 	.word	0x20000c50
 8007fec:	e000ed04 	.word	0xe000ed04

08007ff0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	607b      	str	r3, [r7, #4]
 8007ffa:	e00c      	b.n	8008016 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	4613      	mov	r3, r2
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	4413      	add	r3, r2
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	4a12      	ldr	r2, [pc, #72]	; (8008050 <prvInitialiseTaskLists+0x60>)
 8008008:	4413      	add	r3, r2
 800800a:	4618      	mov	r0, r3
 800800c:	f7fe fc4c 	bl	80068a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	3301      	adds	r3, #1
 8008014:	607b      	str	r3, [r7, #4]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2b37      	cmp	r3, #55	; 0x37
 800801a:	d9ef      	bls.n	8007ffc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800801c:	480d      	ldr	r0, [pc, #52]	; (8008054 <prvInitialiseTaskLists+0x64>)
 800801e:	f7fe fc43 	bl	80068a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008022:	480d      	ldr	r0, [pc, #52]	; (8008058 <prvInitialiseTaskLists+0x68>)
 8008024:	f7fe fc40 	bl	80068a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008028:	480c      	ldr	r0, [pc, #48]	; (800805c <prvInitialiseTaskLists+0x6c>)
 800802a:	f7fe fc3d 	bl	80068a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800802e:	480c      	ldr	r0, [pc, #48]	; (8008060 <prvInitialiseTaskLists+0x70>)
 8008030:	f7fe fc3a 	bl	80068a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008034:	480b      	ldr	r0, [pc, #44]	; (8008064 <prvInitialiseTaskLists+0x74>)
 8008036:	f7fe fc37 	bl	80068a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800803a:	4b0b      	ldr	r3, [pc, #44]	; (8008068 <prvInitialiseTaskLists+0x78>)
 800803c:	4a05      	ldr	r2, [pc, #20]	; (8008054 <prvInitialiseTaskLists+0x64>)
 800803e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008040:	4b0a      	ldr	r3, [pc, #40]	; (800806c <prvInitialiseTaskLists+0x7c>)
 8008042:	4a05      	ldr	r2, [pc, #20]	; (8008058 <prvInitialiseTaskLists+0x68>)
 8008044:	601a      	str	r2, [r3, #0]
}
 8008046:	bf00      	nop
 8008048:	3708      	adds	r7, #8
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
 800804e:	bf00      	nop
 8008050:	20000c50 	.word	0x20000c50
 8008054:	200010b0 	.word	0x200010b0
 8008058:	200010c4 	.word	0x200010c4
 800805c:	200010e0 	.word	0x200010e0
 8008060:	200010f4 	.word	0x200010f4
 8008064:	2000110c 	.word	0x2000110c
 8008068:	200010d8 	.word	0x200010d8
 800806c:	200010dc 	.word	0x200010dc

08008070 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008076:	e019      	b.n	80080ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008078:	f000 fdc8 	bl	8008c0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800807c:	4b10      	ldr	r3, [pc, #64]	; (80080c0 <prvCheckTasksWaitingTermination+0x50>)
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	3304      	adds	r3, #4
 8008088:	4618      	mov	r0, r3
 800808a:	f7fe fc97 	bl	80069bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800808e:	4b0d      	ldr	r3, [pc, #52]	; (80080c4 <prvCheckTasksWaitingTermination+0x54>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	3b01      	subs	r3, #1
 8008094:	4a0b      	ldr	r2, [pc, #44]	; (80080c4 <prvCheckTasksWaitingTermination+0x54>)
 8008096:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008098:	4b0b      	ldr	r3, [pc, #44]	; (80080c8 <prvCheckTasksWaitingTermination+0x58>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	3b01      	subs	r3, #1
 800809e:	4a0a      	ldr	r2, [pc, #40]	; (80080c8 <prvCheckTasksWaitingTermination+0x58>)
 80080a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80080a2:	f000 fde7 	bl	8008c74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 f810 	bl	80080cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080ac:	4b06      	ldr	r3, [pc, #24]	; (80080c8 <prvCheckTasksWaitingTermination+0x58>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d1e1      	bne.n	8008078 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80080b4:	bf00      	nop
 80080b6:	bf00      	nop
 80080b8:	3708      	adds	r7, #8
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	200010f4 	.word	0x200010f4
 80080c4:	20001120 	.word	0x20001120
 80080c8:	20001108 	.word	0x20001108

080080cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	3354      	adds	r3, #84	; 0x54
 80080d8:	4618      	mov	r0, r3
 80080da:	f001 f8af 	bl	800923c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d108      	bne.n	80080fa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ec:	4618      	mov	r0, r3
 80080ee:	f000 ff83 	bl	8008ff8 <vPortFree>
				vPortFree( pxTCB );
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 ff80 	bl	8008ff8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80080f8:	e01a      	b.n	8008130 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008100:	2b01      	cmp	r3, #1
 8008102:	d103      	bne.n	800810c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 ff77 	bl	8008ff8 <vPortFree>
	}
 800810a:	e011      	b.n	8008130 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008112:	2b02      	cmp	r3, #2
 8008114:	d00c      	beq.n	8008130 <prvDeleteTCB+0x64>
	__asm volatile
 8008116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811a:	b672      	cpsid	i
 800811c:	f383 8811 	msr	BASEPRI, r3
 8008120:	f3bf 8f6f 	isb	sy
 8008124:	f3bf 8f4f 	dsb	sy
 8008128:	b662      	cpsie	i
 800812a:	60fb      	str	r3, [r7, #12]
}
 800812c:	bf00      	nop
 800812e:	e7fe      	b.n	800812e <prvDeleteTCB+0x62>
	}
 8008130:	bf00      	nop
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800813e:	4b0c      	ldr	r3, [pc, #48]	; (8008170 <prvResetNextTaskUnblockTime+0x38>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d104      	bne.n	8008152 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008148:	4b0a      	ldr	r3, [pc, #40]	; (8008174 <prvResetNextTaskUnblockTime+0x3c>)
 800814a:	f04f 32ff 	mov.w	r2, #4294967295
 800814e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008150:	e008      	b.n	8008164 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008152:	4b07      	ldr	r3, [pc, #28]	; (8008170 <prvResetNextTaskUnblockTime+0x38>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	4a04      	ldr	r2, [pc, #16]	; (8008174 <prvResetNextTaskUnblockTime+0x3c>)
 8008162:	6013      	str	r3, [r2, #0]
}
 8008164:	bf00      	nop
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr
 8008170:	200010d8 	.word	0x200010d8
 8008174:	20001140 	.word	0x20001140

08008178 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800817e:	4b0b      	ldr	r3, [pc, #44]	; (80081ac <xTaskGetSchedulerState+0x34>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d102      	bne.n	800818c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008186:	2301      	movs	r3, #1
 8008188:	607b      	str	r3, [r7, #4]
 800818a:	e008      	b.n	800819e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800818c:	4b08      	ldr	r3, [pc, #32]	; (80081b0 <xTaskGetSchedulerState+0x38>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d102      	bne.n	800819a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008194:	2302      	movs	r3, #2
 8008196:	607b      	str	r3, [r7, #4]
 8008198:	e001      	b.n	800819e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800819a:	2300      	movs	r3, #0
 800819c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800819e:	687b      	ldr	r3, [r7, #4]
	}
 80081a0:	4618      	mov	r0, r3
 80081a2:	370c      	adds	r7, #12
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr
 80081ac:	2000112c 	.word	0x2000112c
 80081b0:	20001148 	.word	0x20001148

080081b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b086      	sub	sp, #24
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80081c0:	2300      	movs	r3, #0
 80081c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d05a      	beq.n	8008280 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80081ca:	4b30      	ldr	r3, [pc, #192]	; (800828c <xTaskPriorityDisinherit+0xd8>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	693a      	ldr	r2, [r7, #16]
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d00c      	beq.n	80081ee <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80081d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d8:	b672      	cpsid	i
 80081da:	f383 8811 	msr	BASEPRI, r3
 80081de:	f3bf 8f6f 	isb	sy
 80081e2:	f3bf 8f4f 	dsb	sy
 80081e6:	b662      	cpsie	i
 80081e8:	60fb      	str	r3, [r7, #12]
}
 80081ea:	bf00      	nop
 80081ec:	e7fe      	b.n	80081ec <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d10c      	bne.n	8008210 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80081f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fa:	b672      	cpsid	i
 80081fc:	f383 8811 	msr	BASEPRI, r3
 8008200:	f3bf 8f6f 	isb	sy
 8008204:	f3bf 8f4f 	dsb	sy
 8008208:	b662      	cpsie	i
 800820a:	60bb      	str	r3, [r7, #8]
}
 800820c:	bf00      	nop
 800820e:	e7fe      	b.n	800820e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008214:	1e5a      	subs	r2, r3, #1
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008222:	429a      	cmp	r2, r3
 8008224:	d02c      	beq.n	8008280 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800822a:	2b00      	cmp	r3, #0
 800822c:	d128      	bne.n	8008280 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	3304      	adds	r3, #4
 8008232:	4618      	mov	r0, r3
 8008234:	f7fe fbc2 	bl	80069bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008244:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008250:	4b0f      	ldr	r3, [pc, #60]	; (8008290 <xTaskPriorityDisinherit+0xdc>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	429a      	cmp	r2, r3
 8008256:	d903      	bls.n	8008260 <xTaskPriorityDisinherit+0xac>
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800825c:	4a0c      	ldr	r2, [pc, #48]	; (8008290 <xTaskPriorityDisinherit+0xdc>)
 800825e:	6013      	str	r3, [r2, #0]
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008264:	4613      	mov	r3, r2
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	4413      	add	r3, r2
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	4a09      	ldr	r2, [pc, #36]	; (8008294 <xTaskPriorityDisinherit+0xe0>)
 800826e:	441a      	add	r2, r3
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	3304      	adds	r3, #4
 8008274:	4619      	mov	r1, r3
 8008276:	4610      	mov	r0, r2
 8008278:	f7fe fb43 	bl	8006902 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800827c:	2301      	movs	r3, #1
 800827e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008280:	697b      	ldr	r3, [r7, #20]
	}
 8008282:	4618      	mov	r0, r3
 8008284:	3718      	adds	r7, #24
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	20000c4c 	.word	0x20000c4c
 8008290:	20001128 	.word	0x20001128
 8008294:	20000c50 	.word	0x20000c50

08008298 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80082a2:	4b21      	ldr	r3, [pc, #132]	; (8008328 <prvAddCurrentTaskToDelayedList+0x90>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082a8:	4b20      	ldr	r3, [pc, #128]	; (800832c <prvAddCurrentTaskToDelayedList+0x94>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	3304      	adds	r3, #4
 80082ae:	4618      	mov	r0, r3
 80082b0:	f7fe fb84 	bl	80069bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ba:	d10a      	bne.n	80082d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d007      	beq.n	80082d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082c2:	4b1a      	ldr	r3, [pc, #104]	; (800832c <prvAddCurrentTaskToDelayedList+0x94>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	3304      	adds	r3, #4
 80082c8:	4619      	mov	r1, r3
 80082ca:	4819      	ldr	r0, [pc, #100]	; (8008330 <prvAddCurrentTaskToDelayedList+0x98>)
 80082cc:	f7fe fb19 	bl	8006902 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80082d0:	e026      	b.n	8008320 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80082d2:	68fa      	ldr	r2, [r7, #12]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	4413      	add	r3, r2
 80082d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80082da:	4b14      	ldr	r3, [pc, #80]	; (800832c <prvAddCurrentTaskToDelayedList+0x94>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	68ba      	ldr	r2, [r7, #8]
 80082e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80082e2:	68ba      	ldr	r2, [r7, #8]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d209      	bcs.n	80082fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082ea:	4b12      	ldr	r3, [pc, #72]	; (8008334 <prvAddCurrentTaskToDelayedList+0x9c>)
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	4b0f      	ldr	r3, [pc, #60]	; (800832c <prvAddCurrentTaskToDelayedList+0x94>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	3304      	adds	r3, #4
 80082f4:	4619      	mov	r1, r3
 80082f6:	4610      	mov	r0, r2
 80082f8:	f7fe fb27 	bl	800694a <vListInsert>
}
 80082fc:	e010      	b.n	8008320 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082fe:	4b0e      	ldr	r3, [pc, #56]	; (8008338 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	4b0a      	ldr	r3, [pc, #40]	; (800832c <prvAddCurrentTaskToDelayedList+0x94>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	3304      	adds	r3, #4
 8008308:	4619      	mov	r1, r3
 800830a:	4610      	mov	r0, r2
 800830c:	f7fe fb1d 	bl	800694a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008310:	4b0a      	ldr	r3, [pc, #40]	; (800833c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	68ba      	ldr	r2, [r7, #8]
 8008316:	429a      	cmp	r2, r3
 8008318:	d202      	bcs.n	8008320 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800831a:	4a08      	ldr	r2, [pc, #32]	; (800833c <prvAddCurrentTaskToDelayedList+0xa4>)
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	6013      	str	r3, [r2, #0]
}
 8008320:	bf00      	nop
 8008322:	3710      	adds	r7, #16
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}
 8008328:	20001124 	.word	0x20001124
 800832c:	20000c4c 	.word	0x20000c4c
 8008330:	2000110c 	.word	0x2000110c
 8008334:	200010dc 	.word	0x200010dc
 8008338:	200010d8 	.word	0x200010d8
 800833c:	20001140 	.word	0x20001140

08008340 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b08a      	sub	sp, #40	; 0x28
 8008344:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008346:	2300      	movs	r3, #0
 8008348:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800834a:	f000 fb15 	bl	8008978 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800834e:	4b1d      	ldr	r3, [pc, #116]	; (80083c4 <xTimerCreateTimerTask+0x84>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d021      	beq.n	800839a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008356:	2300      	movs	r3, #0
 8008358:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800835a:	2300      	movs	r3, #0
 800835c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800835e:	1d3a      	adds	r2, r7, #4
 8008360:	f107 0108 	add.w	r1, r7, #8
 8008364:	f107 030c 	add.w	r3, r7, #12
 8008368:	4618      	mov	r0, r3
 800836a:	f7fe fa83 	bl	8006874 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800836e:	6879      	ldr	r1, [r7, #4]
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	68fa      	ldr	r2, [r7, #12]
 8008374:	9202      	str	r2, [sp, #8]
 8008376:	9301      	str	r3, [sp, #4]
 8008378:	2302      	movs	r3, #2
 800837a:	9300      	str	r3, [sp, #0]
 800837c:	2300      	movs	r3, #0
 800837e:	460a      	mov	r2, r1
 8008380:	4911      	ldr	r1, [pc, #68]	; (80083c8 <xTimerCreateTimerTask+0x88>)
 8008382:	4812      	ldr	r0, [pc, #72]	; (80083cc <xTimerCreateTimerTask+0x8c>)
 8008384:	f7ff f890 	bl	80074a8 <xTaskCreateStatic>
 8008388:	4603      	mov	r3, r0
 800838a:	4a11      	ldr	r2, [pc, #68]	; (80083d0 <xTimerCreateTimerTask+0x90>)
 800838c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800838e:	4b10      	ldr	r3, [pc, #64]	; (80083d0 <xTimerCreateTimerTask+0x90>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d001      	beq.n	800839a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008396:	2301      	movs	r3, #1
 8008398:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d10c      	bne.n	80083ba <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80083a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a4:	b672      	cpsid	i
 80083a6:	f383 8811 	msr	BASEPRI, r3
 80083aa:	f3bf 8f6f 	isb	sy
 80083ae:	f3bf 8f4f 	dsb	sy
 80083b2:	b662      	cpsie	i
 80083b4:	613b      	str	r3, [r7, #16]
}
 80083b6:	bf00      	nop
 80083b8:	e7fe      	b.n	80083b8 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80083ba:	697b      	ldr	r3, [r7, #20]
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3718      	adds	r7, #24
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}
 80083c4:	2000117c 	.word	0x2000117c
 80083c8:	080094d8 	.word	0x080094d8
 80083cc:	08008511 	.word	0x08008511
 80083d0:	20001180 	.word	0x20001180

080083d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b08a      	sub	sp, #40	; 0x28
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	607a      	str	r2, [r7, #4]
 80083e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80083e2:	2300      	movs	r3, #0
 80083e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d10c      	bne.n	8008406 <xTimerGenericCommand+0x32>
	__asm volatile
 80083ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f0:	b672      	cpsid	i
 80083f2:	f383 8811 	msr	BASEPRI, r3
 80083f6:	f3bf 8f6f 	isb	sy
 80083fa:	f3bf 8f4f 	dsb	sy
 80083fe:	b662      	cpsie	i
 8008400:	623b      	str	r3, [r7, #32]
}
 8008402:	bf00      	nop
 8008404:	e7fe      	b.n	8008404 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008406:	4b1a      	ldr	r3, [pc, #104]	; (8008470 <xTimerGenericCommand+0x9c>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d02a      	beq.n	8008464 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	2b05      	cmp	r3, #5
 800841e:	dc18      	bgt.n	8008452 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008420:	f7ff feaa 	bl	8008178 <xTaskGetSchedulerState>
 8008424:	4603      	mov	r3, r0
 8008426:	2b02      	cmp	r3, #2
 8008428:	d109      	bne.n	800843e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800842a:	4b11      	ldr	r3, [pc, #68]	; (8008470 <xTimerGenericCommand+0x9c>)
 800842c:	6818      	ldr	r0, [r3, #0]
 800842e:	f107 0110 	add.w	r1, r7, #16
 8008432:	2300      	movs	r3, #0
 8008434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008436:	f7fe fc3d 	bl	8006cb4 <xQueueGenericSend>
 800843a:	6278      	str	r0, [r7, #36]	; 0x24
 800843c:	e012      	b.n	8008464 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800843e:	4b0c      	ldr	r3, [pc, #48]	; (8008470 <xTimerGenericCommand+0x9c>)
 8008440:	6818      	ldr	r0, [r3, #0]
 8008442:	f107 0110 	add.w	r1, r7, #16
 8008446:	2300      	movs	r3, #0
 8008448:	2200      	movs	r2, #0
 800844a:	f7fe fc33 	bl	8006cb4 <xQueueGenericSend>
 800844e:	6278      	str	r0, [r7, #36]	; 0x24
 8008450:	e008      	b.n	8008464 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008452:	4b07      	ldr	r3, [pc, #28]	; (8008470 <xTimerGenericCommand+0x9c>)
 8008454:	6818      	ldr	r0, [r3, #0]
 8008456:	f107 0110 	add.w	r1, r7, #16
 800845a:	2300      	movs	r3, #0
 800845c:	683a      	ldr	r2, [r7, #0]
 800845e:	f7fe fd2f 	bl	8006ec0 <xQueueGenericSendFromISR>
 8008462:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008466:	4618      	mov	r0, r3
 8008468:	3728      	adds	r7, #40	; 0x28
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	2000117c 	.word	0x2000117c

08008474 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b088      	sub	sp, #32
 8008478:	af02      	add	r7, sp, #8
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800847e:	4b23      	ldr	r3, [pc, #140]	; (800850c <prvProcessExpiredTimer+0x98>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	3304      	adds	r3, #4
 800848c:	4618      	mov	r0, r3
 800848e:	f7fe fa95 	bl	80069bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008498:	f003 0304 	and.w	r3, r3, #4
 800849c:	2b00      	cmp	r3, #0
 800849e:	d024      	beq.n	80084ea <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	699a      	ldr	r2, [r3, #24]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	18d1      	adds	r1, r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	683a      	ldr	r2, [r7, #0]
 80084ac:	6978      	ldr	r0, [r7, #20]
 80084ae:	f000 f8d3 	bl	8008658 <prvInsertTimerInActiveList>
 80084b2:	4603      	mov	r3, r0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d021      	beq.n	80084fc <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80084b8:	2300      	movs	r3, #0
 80084ba:	9300      	str	r3, [sp, #0]
 80084bc:	2300      	movs	r3, #0
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	2100      	movs	r1, #0
 80084c2:	6978      	ldr	r0, [r7, #20]
 80084c4:	f7ff ff86 	bl	80083d4 <xTimerGenericCommand>
 80084c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d115      	bne.n	80084fc <prvProcessExpiredTimer+0x88>
	__asm volatile
 80084d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d4:	b672      	cpsid	i
 80084d6:	f383 8811 	msr	BASEPRI, r3
 80084da:	f3bf 8f6f 	isb	sy
 80084de:	f3bf 8f4f 	dsb	sy
 80084e2:	b662      	cpsie	i
 80084e4:	60fb      	str	r3, [r7, #12]
}
 80084e6:	bf00      	nop
 80084e8:	e7fe      	b.n	80084e8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084f0:	f023 0301 	bic.w	r3, r3, #1
 80084f4:	b2da      	uxtb	r2, r3
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	6a1b      	ldr	r3, [r3, #32]
 8008500:	6978      	ldr	r0, [r7, #20]
 8008502:	4798      	blx	r3
}
 8008504:	bf00      	nop
 8008506:	3718      	adds	r7, #24
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}
 800850c:	20001174 	.word	0x20001174

08008510 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008518:	f107 0308 	add.w	r3, r7, #8
 800851c:	4618      	mov	r0, r3
 800851e:	f000 f857 	bl	80085d0 <prvGetNextExpireTime>
 8008522:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	4619      	mov	r1, r3
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	f000 f803 	bl	8008534 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800852e:	f000 f8d5 	bl	80086dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008532:	e7f1      	b.n	8008518 <prvTimerTask+0x8>

08008534 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800853e:	f7ff fa1d 	bl	800797c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008542:	f107 0308 	add.w	r3, r7, #8
 8008546:	4618      	mov	r0, r3
 8008548:	f000 f866 	bl	8008618 <prvSampleTimeNow>
 800854c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d130      	bne.n	80085b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d10a      	bne.n	8008570 <prvProcessTimerOrBlockTask+0x3c>
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	429a      	cmp	r2, r3
 8008560:	d806      	bhi.n	8008570 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008562:	f7ff fa19 	bl	8007998 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008566:	68f9      	ldr	r1, [r7, #12]
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f7ff ff83 	bl	8008474 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800856e:	e024      	b.n	80085ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d008      	beq.n	8008588 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008576:	4b13      	ldr	r3, [pc, #76]	; (80085c4 <prvProcessTimerOrBlockTask+0x90>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d101      	bne.n	8008584 <prvProcessTimerOrBlockTask+0x50>
 8008580:	2301      	movs	r3, #1
 8008582:	e000      	b.n	8008586 <prvProcessTimerOrBlockTask+0x52>
 8008584:	2300      	movs	r3, #0
 8008586:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008588:	4b0f      	ldr	r3, [pc, #60]	; (80085c8 <prvProcessTimerOrBlockTask+0x94>)
 800858a:	6818      	ldr	r0, [r3, #0]
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	1ad3      	subs	r3, r2, r3
 8008592:	683a      	ldr	r2, [r7, #0]
 8008594:	4619      	mov	r1, r3
 8008596:	f7fe ff53 	bl	8007440 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800859a:	f7ff f9fd 	bl	8007998 <xTaskResumeAll>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d10a      	bne.n	80085ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80085a4:	4b09      	ldr	r3, [pc, #36]	; (80085cc <prvProcessTimerOrBlockTask+0x98>)
 80085a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085aa:	601a      	str	r2, [r3, #0]
 80085ac:	f3bf 8f4f 	dsb	sy
 80085b0:	f3bf 8f6f 	isb	sy
}
 80085b4:	e001      	b.n	80085ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80085b6:	f7ff f9ef 	bl	8007998 <xTaskResumeAll>
}
 80085ba:	bf00      	nop
 80085bc:	3710      	adds	r7, #16
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	20001178 	.word	0x20001178
 80085c8:	2000117c 	.word	0x2000117c
 80085cc:	e000ed04 	.word	0xe000ed04

080085d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80085d0:	b480      	push	{r7}
 80085d2:	b085      	sub	sp, #20
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80085d8:	4b0e      	ldr	r3, [pc, #56]	; (8008614 <prvGetNextExpireTime+0x44>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d101      	bne.n	80085e6 <prvGetNextExpireTime+0x16>
 80085e2:	2201      	movs	r2, #1
 80085e4:	e000      	b.n	80085e8 <prvGetNextExpireTime+0x18>
 80085e6:	2200      	movs	r2, #0
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d105      	bne.n	8008600 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80085f4:	4b07      	ldr	r3, [pc, #28]	; (8008614 <prvGetNextExpireTime+0x44>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	68db      	ldr	r3, [r3, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	60fb      	str	r3, [r7, #12]
 80085fe:	e001      	b.n	8008604 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008600:	2300      	movs	r3, #0
 8008602:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008604:	68fb      	ldr	r3, [r7, #12]
}
 8008606:	4618      	mov	r0, r3
 8008608:	3714      	adds	r7, #20
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop
 8008614:	20001174 	.word	0x20001174

08008618 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008620:	f7ff fa5a 	bl	8007ad8 <xTaskGetTickCount>
 8008624:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008626:	4b0b      	ldr	r3, [pc, #44]	; (8008654 <prvSampleTimeNow+0x3c>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	68fa      	ldr	r2, [r7, #12]
 800862c:	429a      	cmp	r2, r3
 800862e:	d205      	bcs.n	800863c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008630:	f000 f93c 	bl	80088ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2201      	movs	r2, #1
 8008638:	601a      	str	r2, [r3, #0]
 800863a:	e002      	b.n	8008642 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2200      	movs	r2, #0
 8008640:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008642:	4a04      	ldr	r2, [pc, #16]	; (8008654 <prvSampleTimeNow+0x3c>)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008648:	68fb      	ldr	r3, [r7, #12]
}
 800864a:	4618      	mov	r0, r3
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	20001184 	.word	0x20001184

08008658 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b086      	sub	sp, #24
 800865c:	af00      	add	r7, sp, #0
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	60b9      	str	r1, [r7, #8]
 8008662:	607a      	str	r2, [r7, #4]
 8008664:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008666:	2300      	movs	r3, #0
 8008668:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	68ba      	ldr	r2, [r7, #8]
 800866e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008676:	68ba      	ldr	r2, [r7, #8]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	429a      	cmp	r2, r3
 800867c:	d812      	bhi.n	80086a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	1ad2      	subs	r2, r2, r3
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	699b      	ldr	r3, [r3, #24]
 8008688:	429a      	cmp	r2, r3
 800868a:	d302      	bcc.n	8008692 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800868c:	2301      	movs	r3, #1
 800868e:	617b      	str	r3, [r7, #20]
 8008690:	e01b      	b.n	80086ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008692:	4b10      	ldr	r3, [pc, #64]	; (80086d4 <prvInsertTimerInActiveList+0x7c>)
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	3304      	adds	r3, #4
 800869a:	4619      	mov	r1, r3
 800869c:	4610      	mov	r0, r2
 800869e:	f7fe f954 	bl	800694a <vListInsert>
 80086a2:	e012      	b.n	80086ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d206      	bcs.n	80086ba <prvInsertTimerInActiveList+0x62>
 80086ac:	68ba      	ldr	r2, [r7, #8]
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d302      	bcc.n	80086ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80086b4:	2301      	movs	r3, #1
 80086b6:	617b      	str	r3, [r7, #20]
 80086b8:	e007      	b.n	80086ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80086ba:	4b07      	ldr	r3, [pc, #28]	; (80086d8 <prvInsertTimerInActiveList+0x80>)
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	3304      	adds	r3, #4
 80086c2:	4619      	mov	r1, r3
 80086c4:	4610      	mov	r0, r2
 80086c6:	f7fe f940 	bl	800694a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80086ca:	697b      	ldr	r3, [r7, #20]
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3718      	adds	r7, #24
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	20001178 	.word	0x20001178
 80086d8:	20001174 	.word	0x20001174

080086dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b08e      	sub	sp, #56	; 0x38
 80086e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80086e2:	e0d0      	b.n	8008886 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	da1a      	bge.n	8008720 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80086ea:	1d3b      	adds	r3, r7, #4
 80086ec:	3304      	adds	r3, #4
 80086ee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80086f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d10c      	bne.n	8008710 <prvProcessReceivedCommands+0x34>
	__asm volatile
 80086f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086fa:	b672      	cpsid	i
 80086fc:	f383 8811 	msr	BASEPRI, r3
 8008700:	f3bf 8f6f 	isb	sy
 8008704:	f3bf 8f4f 	dsb	sy
 8008708:	b662      	cpsie	i
 800870a:	61fb      	str	r3, [r7, #28]
}
 800870c:	bf00      	nop
 800870e:	e7fe      	b.n	800870e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008716:	6850      	ldr	r0, [r2, #4]
 8008718:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800871a:	6892      	ldr	r2, [r2, #8]
 800871c:	4611      	mov	r1, r2
 800871e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2b00      	cmp	r3, #0
 8008724:	f2c0 80af 	blt.w	8008886 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800872c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872e:	695b      	ldr	r3, [r3, #20]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d004      	beq.n	800873e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008736:	3304      	adds	r3, #4
 8008738:	4618      	mov	r0, r3
 800873a:	f7fe f93f 	bl	80069bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800873e:	463b      	mov	r3, r7
 8008740:	4618      	mov	r0, r3
 8008742:	f7ff ff69 	bl	8008618 <prvSampleTimeNow>
 8008746:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2b09      	cmp	r3, #9
 800874c:	f200 809a 	bhi.w	8008884 <prvProcessReceivedCommands+0x1a8>
 8008750:	a201      	add	r2, pc, #4	; (adr r2, 8008758 <prvProcessReceivedCommands+0x7c>)
 8008752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008756:	bf00      	nop
 8008758:	08008781 	.word	0x08008781
 800875c:	08008781 	.word	0x08008781
 8008760:	08008781 	.word	0x08008781
 8008764:	080087f9 	.word	0x080087f9
 8008768:	0800880d 	.word	0x0800880d
 800876c:	0800885b 	.word	0x0800885b
 8008770:	08008781 	.word	0x08008781
 8008774:	08008781 	.word	0x08008781
 8008778:	080087f9 	.word	0x080087f9
 800877c:	0800880d 	.word	0x0800880d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008782:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008786:	f043 0301 	orr.w	r3, r3, #1
 800878a:	b2da      	uxtb	r2, r3
 800878c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800878e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008792:	68ba      	ldr	r2, [r7, #8]
 8008794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008796:	699b      	ldr	r3, [r3, #24]
 8008798:	18d1      	adds	r1, r2, r3
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800879e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087a0:	f7ff ff5a 	bl	8008658 <prvInsertTimerInActiveList>
 80087a4:	4603      	mov	r3, r0
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d06d      	beq.n	8008886 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80087aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ac:	6a1b      	ldr	r3, [r3, #32]
 80087ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80087b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087b8:	f003 0304 	and.w	r3, r3, #4
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d062      	beq.n	8008886 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80087c0:	68ba      	ldr	r2, [r7, #8]
 80087c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c4:	699b      	ldr	r3, [r3, #24]
 80087c6:	441a      	add	r2, r3
 80087c8:	2300      	movs	r3, #0
 80087ca:	9300      	str	r3, [sp, #0]
 80087cc:	2300      	movs	r3, #0
 80087ce:	2100      	movs	r1, #0
 80087d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087d2:	f7ff fdff 	bl	80083d4 <xTimerGenericCommand>
 80087d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80087d8:	6a3b      	ldr	r3, [r7, #32]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d153      	bne.n	8008886 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80087de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e2:	b672      	cpsid	i
 80087e4:	f383 8811 	msr	BASEPRI, r3
 80087e8:	f3bf 8f6f 	isb	sy
 80087ec:	f3bf 8f4f 	dsb	sy
 80087f0:	b662      	cpsie	i
 80087f2:	61bb      	str	r3, [r7, #24]
}
 80087f4:	bf00      	nop
 80087f6:	e7fe      	b.n	80087f6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80087f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087fe:	f023 0301 	bic.w	r3, r3, #1
 8008802:	b2da      	uxtb	r2, r3
 8008804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008806:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800880a:	e03c      	b.n	8008886 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800880c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800880e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008812:	f043 0301 	orr.w	r3, r3, #1
 8008816:	b2da      	uxtb	r2, r3
 8008818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800881a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800881e:	68ba      	ldr	r2, [r7, #8]
 8008820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008822:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008826:	699b      	ldr	r3, [r3, #24]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d10c      	bne.n	8008846 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800882c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008830:	b672      	cpsid	i
 8008832:	f383 8811 	msr	BASEPRI, r3
 8008836:	f3bf 8f6f 	isb	sy
 800883a:	f3bf 8f4f 	dsb	sy
 800883e:	b662      	cpsie	i
 8008840:	617b      	str	r3, [r7, #20]
}
 8008842:	bf00      	nop
 8008844:	e7fe      	b.n	8008844 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008848:	699a      	ldr	r2, [r3, #24]
 800884a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884c:	18d1      	adds	r1, r2, r3
 800884e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008852:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008854:	f7ff ff00 	bl	8008658 <prvInsertTimerInActiveList>
					break;
 8008858:	e015      	b.n	8008886 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800885a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800885c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008860:	f003 0302 	and.w	r3, r3, #2
 8008864:	2b00      	cmp	r3, #0
 8008866:	d103      	bne.n	8008870 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8008868:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800886a:	f000 fbc5 	bl	8008ff8 <vPortFree>
 800886e:	e00a      	b.n	8008886 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008872:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008876:	f023 0301 	bic.w	r3, r3, #1
 800887a:	b2da      	uxtb	r2, r3
 800887c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008882:	e000      	b.n	8008886 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 8008884:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008886:	4b08      	ldr	r3, [pc, #32]	; (80088a8 <prvProcessReceivedCommands+0x1cc>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	1d39      	adds	r1, r7, #4
 800888c:	2200      	movs	r2, #0
 800888e:	4618      	mov	r0, r3
 8008890:	f7fe fbb6 	bl	8007000 <xQueueReceive>
 8008894:	4603      	mov	r3, r0
 8008896:	2b00      	cmp	r3, #0
 8008898:	f47f af24 	bne.w	80086e4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800889c:	bf00      	nop
 800889e:	bf00      	nop
 80088a0:	3730      	adds	r7, #48	; 0x30
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	2000117c 	.word	0x2000117c

080088ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b088      	sub	sp, #32
 80088b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80088b2:	e04a      	b.n	800894a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80088b4:	4b2e      	ldr	r3, [pc, #184]	; (8008970 <prvSwitchTimerLists+0xc4>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088be:	4b2c      	ldr	r3, [pc, #176]	; (8008970 <prvSwitchTimerLists+0xc4>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	68db      	ldr	r3, [r3, #12]
 80088c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	3304      	adds	r3, #4
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7fe f875 	bl	80069bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	6a1b      	ldr	r3, [r3, #32]
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088e0:	f003 0304 	and.w	r3, r3, #4
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d030      	beq.n	800894a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	699b      	ldr	r3, [r3, #24]
 80088ec:	693a      	ldr	r2, [r7, #16]
 80088ee:	4413      	add	r3, r2
 80088f0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80088f2:	68ba      	ldr	r2, [r7, #8]
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d90e      	bls.n	8008918 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	68ba      	ldr	r2, [r7, #8]
 80088fe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	68fa      	ldr	r2, [r7, #12]
 8008904:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008906:	4b1a      	ldr	r3, [pc, #104]	; (8008970 <prvSwitchTimerLists+0xc4>)
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	3304      	adds	r3, #4
 800890e:	4619      	mov	r1, r3
 8008910:	4610      	mov	r0, r2
 8008912:	f7fe f81a 	bl	800694a <vListInsert>
 8008916:	e018      	b.n	800894a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008918:	2300      	movs	r3, #0
 800891a:	9300      	str	r3, [sp, #0]
 800891c:	2300      	movs	r3, #0
 800891e:	693a      	ldr	r2, [r7, #16]
 8008920:	2100      	movs	r1, #0
 8008922:	68f8      	ldr	r0, [r7, #12]
 8008924:	f7ff fd56 	bl	80083d4 <xTimerGenericCommand>
 8008928:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d10c      	bne.n	800894a <prvSwitchTimerLists+0x9e>
	__asm volatile
 8008930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008934:	b672      	cpsid	i
 8008936:	f383 8811 	msr	BASEPRI, r3
 800893a:	f3bf 8f6f 	isb	sy
 800893e:	f3bf 8f4f 	dsb	sy
 8008942:	b662      	cpsie	i
 8008944:	603b      	str	r3, [r7, #0]
}
 8008946:	bf00      	nop
 8008948:	e7fe      	b.n	8008948 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800894a:	4b09      	ldr	r3, [pc, #36]	; (8008970 <prvSwitchTimerLists+0xc4>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d1af      	bne.n	80088b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008954:	4b06      	ldr	r3, [pc, #24]	; (8008970 <prvSwitchTimerLists+0xc4>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800895a:	4b06      	ldr	r3, [pc, #24]	; (8008974 <prvSwitchTimerLists+0xc8>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a04      	ldr	r2, [pc, #16]	; (8008970 <prvSwitchTimerLists+0xc4>)
 8008960:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008962:	4a04      	ldr	r2, [pc, #16]	; (8008974 <prvSwitchTimerLists+0xc8>)
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	6013      	str	r3, [r2, #0]
}
 8008968:	bf00      	nop
 800896a:	3718      	adds	r7, #24
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}
 8008970:	20001174 	.word	0x20001174
 8008974:	20001178 	.word	0x20001178

08008978 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800897e:	f000 f945 	bl	8008c0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008982:	4b15      	ldr	r3, [pc, #84]	; (80089d8 <prvCheckForValidListAndQueue+0x60>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d120      	bne.n	80089cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800898a:	4814      	ldr	r0, [pc, #80]	; (80089dc <prvCheckForValidListAndQueue+0x64>)
 800898c:	f7fd ff8c 	bl	80068a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008990:	4813      	ldr	r0, [pc, #76]	; (80089e0 <prvCheckForValidListAndQueue+0x68>)
 8008992:	f7fd ff89 	bl	80068a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008996:	4b13      	ldr	r3, [pc, #76]	; (80089e4 <prvCheckForValidListAndQueue+0x6c>)
 8008998:	4a10      	ldr	r2, [pc, #64]	; (80089dc <prvCheckForValidListAndQueue+0x64>)
 800899a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800899c:	4b12      	ldr	r3, [pc, #72]	; (80089e8 <prvCheckForValidListAndQueue+0x70>)
 800899e:	4a10      	ldr	r2, [pc, #64]	; (80089e0 <prvCheckForValidListAndQueue+0x68>)
 80089a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80089a2:	2300      	movs	r3, #0
 80089a4:	9300      	str	r3, [sp, #0]
 80089a6:	4b11      	ldr	r3, [pc, #68]	; (80089ec <prvCheckForValidListAndQueue+0x74>)
 80089a8:	4a11      	ldr	r2, [pc, #68]	; (80089f0 <prvCheckForValidListAndQueue+0x78>)
 80089aa:	2110      	movs	r1, #16
 80089ac:	200a      	movs	r0, #10
 80089ae:	f7fe f899 	bl	8006ae4 <xQueueGenericCreateStatic>
 80089b2:	4603      	mov	r3, r0
 80089b4:	4a08      	ldr	r2, [pc, #32]	; (80089d8 <prvCheckForValidListAndQueue+0x60>)
 80089b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80089b8:	4b07      	ldr	r3, [pc, #28]	; (80089d8 <prvCheckForValidListAndQueue+0x60>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d005      	beq.n	80089cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80089c0:	4b05      	ldr	r3, [pc, #20]	; (80089d8 <prvCheckForValidListAndQueue+0x60>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	490b      	ldr	r1, [pc, #44]	; (80089f4 <prvCheckForValidListAndQueue+0x7c>)
 80089c6:	4618      	mov	r0, r3
 80089c8:	f7fe fd10 	bl	80073ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80089cc:	f000 f952 	bl	8008c74 <vPortExitCritical>
}
 80089d0:	bf00      	nop
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	bf00      	nop
 80089d8:	2000117c 	.word	0x2000117c
 80089dc:	2000114c 	.word	0x2000114c
 80089e0:	20001160 	.word	0x20001160
 80089e4:	20001174 	.word	0x20001174
 80089e8:	20001178 	.word	0x20001178
 80089ec:	20001228 	.word	0x20001228
 80089f0:	20001188 	.word	0x20001188
 80089f4:	080094e0 	.word	0x080094e0

080089f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80089f8:	b480      	push	{r7}
 80089fa:	b085      	sub	sp, #20
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	60b9      	str	r1, [r7, #8]
 8008a02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	3b04      	subs	r3, #4
 8008a08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008a10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	3b04      	subs	r3, #4
 8008a16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	f023 0201 	bic.w	r2, r3, #1
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	3b04      	subs	r3, #4
 8008a26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008a28:	4a0c      	ldr	r2, [pc, #48]	; (8008a5c <pxPortInitialiseStack+0x64>)
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	3b14      	subs	r3, #20
 8008a32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	3b04      	subs	r3, #4
 8008a3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f06f 0202 	mvn.w	r2, #2
 8008a46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	3b20      	subs	r3, #32
 8008a4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3714      	adds	r7, #20
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr
 8008a5c:	08008a61 	.word	0x08008a61

08008a60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008a60:	b480      	push	{r7}
 8008a62:	b085      	sub	sp, #20
 8008a64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008a66:	2300      	movs	r3, #0
 8008a68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008a6a:	4b14      	ldr	r3, [pc, #80]	; (8008abc <prvTaskExitError+0x5c>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a72:	d00c      	beq.n	8008a8e <prvTaskExitError+0x2e>
	__asm volatile
 8008a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a78:	b672      	cpsid	i
 8008a7a:	f383 8811 	msr	BASEPRI, r3
 8008a7e:	f3bf 8f6f 	isb	sy
 8008a82:	f3bf 8f4f 	dsb	sy
 8008a86:	b662      	cpsie	i
 8008a88:	60fb      	str	r3, [r7, #12]
}
 8008a8a:	bf00      	nop
 8008a8c:	e7fe      	b.n	8008a8c <prvTaskExitError+0x2c>
	__asm volatile
 8008a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a92:	b672      	cpsid	i
 8008a94:	f383 8811 	msr	BASEPRI, r3
 8008a98:	f3bf 8f6f 	isb	sy
 8008a9c:	f3bf 8f4f 	dsb	sy
 8008aa0:	b662      	cpsie	i
 8008aa2:	60bb      	str	r3, [r7, #8]
}
 8008aa4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008aa6:	bf00      	nop
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d0fc      	beq.n	8008aa8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008aae:	bf00      	nop
 8008ab0:	bf00      	nop
 8008ab2:	3714      	adds	r7, #20
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr
 8008abc:	2000000c 	.word	0x2000000c

08008ac0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ac0:	4b07      	ldr	r3, [pc, #28]	; (8008ae0 <pxCurrentTCBConst2>)
 8008ac2:	6819      	ldr	r1, [r3, #0]
 8008ac4:	6808      	ldr	r0, [r1, #0]
 8008ac6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aca:	f380 8809 	msr	PSP, r0
 8008ace:	f3bf 8f6f 	isb	sy
 8008ad2:	f04f 0000 	mov.w	r0, #0
 8008ad6:	f380 8811 	msr	BASEPRI, r0
 8008ada:	4770      	bx	lr
 8008adc:	f3af 8000 	nop.w

08008ae0 <pxCurrentTCBConst2>:
 8008ae0:	20000c4c 	.word	0x20000c4c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008ae4:	bf00      	nop
 8008ae6:	bf00      	nop

08008ae8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008ae8:	4808      	ldr	r0, [pc, #32]	; (8008b0c <prvPortStartFirstTask+0x24>)
 8008aea:	6800      	ldr	r0, [r0, #0]
 8008aec:	6800      	ldr	r0, [r0, #0]
 8008aee:	f380 8808 	msr	MSP, r0
 8008af2:	f04f 0000 	mov.w	r0, #0
 8008af6:	f380 8814 	msr	CONTROL, r0
 8008afa:	b662      	cpsie	i
 8008afc:	b661      	cpsie	f
 8008afe:	f3bf 8f4f 	dsb	sy
 8008b02:	f3bf 8f6f 	isb	sy
 8008b06:	df00      	svc	0
 8008b08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008b0a:	bf00      	nop
 8008b0c:	e000ed08 	.word	0xe000ed08

08008b10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008b16:	4b37      	ldr	r3, [pc, #220]	; (8008bf4 <xPortStartScheduler+0xe4>)
 8008b18:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	22ff      	movs	r2, #255	; 0xff
 8008b26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008b30:	78fb      	ldrb	r3, [r7, #3]
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008b38:	b2da      	uxtb	r2, r3
 8008b3a:	4b2f      	ldr	r3, [pc, #188]	; (8008bf8 <xPortStartScheduler+0xe8>)
 8008b3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008b3e:	4b2f      	ldr	r3, [pc, #188]	; (8008bfc <xPortStartScheduler+0xec>)
 8008b40:	2207      	movs	r2, #7
 8008b42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b44:	e009      	b.n	8008b5a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008b46:	4b2d      	ldr	r3, [pc, #180]	; (8008bfc <xPortStartScheduler+0xec>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	3b01      	subs	r3, #1
 8008b4c:	4a2b      	ldr	r2, [pc, #172]	; (8008bfc <xPortStartScheduler+0xec>)
 8008b4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008b50:	78fb      	ldrb	r3, [r7, #3]
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	005b      	lsls	r3, r3, #1
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b5a:	78fb      	ldrb	r3, [r7, #3]
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b62:	2b80      	cmp	r3, #128	; 0x80
 8008b64:	d0ef      	beq.n	8008b46 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008b66:	4b25      	ldr	r3, [pc, #148]	; (8008bfc <xPortStartScheduler+0xec>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f1c3 0307 	rsb	r3, r3, #7
 8008b6e:	2b04      	cmp	r3, #4
 8008b70:	d00c      	beq.n	8008b8c <xPortStartScheduler+0x7c>
	__asm volatile
 8008b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b76:	b672      	cpsid	i
 8008b78:	f383 8811 	msr	BASEPRI, r3
 8008b7c:	f3bf 8f6f 	isb	sy
 8008b80:	f3bf 8f4f 	dsb	sy
 8008b84:	b662      	cpsie	i
 8008b86:	60bb      	str	r3, [r7, #8]
}
 8008b88:	bf00      	nop
 8008b8a:	e7fe      	b.n	8008b8a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008b8c:	4b1b      	ldr	r3, [pc, #108]	; (8008bfc <xPortStartScheduler+0xec>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	021b      	lsls	r3, r3, #8
 8008b92:	4a1a      	ldr	r2, [pc, #104]	; (8008bfc <xPortStartScheduler+0xec>)
 8008b94:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b96:	4b19      	ldr	r3, [pc, #100]	; (8008bfc <xPortStartScheduler+0xec>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b9e:	4a17      	ldr	r2, [pc, #92]	; (8008bfc <xPortStartScheduler+0xec>)
 8008ba0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	b2da      	uxtb	r2, r3
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008baa:	4b15      	ldr	r3, [pc, #84]	; (8008c00 <xPortStartScheduler+0xf0>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a14      	ldr	r2, [pc, #80]	; (8008c00 <xPortStartScheduler+0xf0>)
 8008bb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008bb4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008bb6:	4b12      	ldr	r3, [pc, #72]	; (8008c00 <xPortStartScheduler+0xf0>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a11      	ldr	r2, [pc, #68]	; (8008c00 <xPortStartScheduler+0xf0>)
 8008bbc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008bc0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008bc2:	f000 f8dd 	bl	8008d80 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008bc6:	4b0f      	ldr	r3, [pc, #60]	; (8008c04 <xPortStartScheduler+0xf4>)
 8008bc8:	2200      	movs	r2, #0
 8008bca:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008bcc:	f000 f8fc 	bl	8008dc8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008bd0:	4b0d      	ldr	r3, [pc, #52]	; (8008c08 <xPortStartScheduler+0xf8>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a0c      	ldr	r2, [pc, #48]	; (8008c08 <xPortStartScheduler+0xf8>)
 8008bd6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008bda:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008bdc:	f7ff ff84 	bl	8008ae8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008be0:	f7ff f846 	bl	8007c70 <vTaskSwitchContext>
	prvTaskExitError();
 8008be4:	f7ff ff3c 	bl	8008a60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008be8:	2300      	movs	r3, #0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	e000e400 	.word	0xe000e400
 8008bf8:	20001278 	.word	0x20001278
 8008bfc:	2000127c 	.word	0x2000127c
 8008c00:	e000ed20 	.word	0xe000ed20
 8008c04:	2000000c 	.word	0x2000000c
 8008c08:	e000ef34 	.word	0xe000ef34

08008c0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
	__asm volatile
 8008c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c16:	b672      	cpsid	i
 8008c18:	f383 8811 	msr	BASEPRI, r3
 8008c1c:	f3bf 8f6f 	isb	sy
 8008c20:	f3bf 8f4f 	dsb	sy
 8008c24:	b662      	cpsie	i
 8008c26:	607b      	str	r3, [r7, #4]
}
 8008c28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008c2a:	4b10      	ldr	r3, [pc, #64]	; (8008c6c <vPortEnterCritical+0x60>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	3301      	adds	r3, #1
 8008c30:	4a0e      	ldr	r2, [pc, #56]	; (8008c6c <vPortEnterCritical+0x60>)
 8008c32:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008c34:	4b0d      	ldr	r3, [pc, #52]	; (8008c6c <vPortEnterCritical+0x60>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d111      	bne.n	8008c60 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008c3c:	4b0c      	ldr	r3, [pc, #48]	; (8008c70 <vPortEnterCritical+0x64>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d00c      	beq.n	8008c60 <vPortEnterCritical+0x54>
	__asm volatile
 8008c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c4a:	b672      	cpsid	i
 8008c4c:	f383 8811 	msr	BASEPRI, r3
 8008c50:	f3bf 8f6f 	isb	sy
 8008c54:	f3bf 8f4f 	dsb	sy
 8008c58:	b662      	cpsie	i
 8008c5a:	603b      	str	r3, [r7, #0]
}
 8008c5c:	bf00      	nop
 8008c5e:	e7fe      	b.n	8008c5e <vPortEnterCritical+0x52>
	}
}
 8008c60:	bf00      	nop
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr
 8008c6c:	2000000c 	.word	0x2000000c
 8008c70:	e000ed04 	.word	0xe000ed04

08008c74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c7a:	4b13      	ldr	r3, [pc, #76]	; (8008cc8 <vPortExitCritical+0x54>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d10c      	bne.n	8008c9c <vPortExitCritical+0x28>
	__asm volatile
 8008c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c86:	b672      	cpsid	i
 8008c88:	f383 8811 	msr	BASEPRI, r3
 8008c8c:	f3bf 8f6f 	isb	sy
 8008c90:	f3bf 8f4f 	dsb	sy
 8008c94:	b662      	cpsie	i
 8008c96:	607b      	str	r3, [r7, #4]
}
 8008c98:	bf00      	nop
 8008c9a:	e7fe      	b.n	8008c9a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8008c9c:	4b0a      	ldr	r3, [pc, #40]	; (8008cc8 <vPortExitCritical+0x54>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	3b01      	subs	r3, #1
 8008ca2:	4a09      	ldr	r2, [pc, #36]	; (8008cc8 <vPortExitCritical+0x54>)
 8008ca4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008ca6:	4b08      	ldr	r3, [pc, #32]	; (8008cc8 <vPortExitCritical+0x54>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d105      	bne.n	8008cba <vPortExitCritical+0x46>
 8008cae:	2300      	movs	r3, #0
 8008cb0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	f383 8811 	msr	BASEPRI, r3
}
 8008cb8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008cba:	bf00      	nop
 8008cbc:	370c      	adds	r7, #12
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr
 8008cc6:	bf00      	nop
 8008cc8:	2000000c 	.word	0x2000000c
 8008ccc:	00000000 	.word	0x00000000

08008cd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008cd0:	f3ef 8009 	mrs	r0, PSP
 8008cd4:	f3bf 8f6f 	isb	sy
 8008cd8:	4b15      	ldr	r3, [pc, #84]	; (8008d30 <pxCurrentTCBConst>)
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	f01e 0f10 	tst.w	lr, #16
 8008ce0:	bf08      	it	eq
 8008ce2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ce6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cea:	6010      	str	r0, [r2, #0]
 8008cec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008cf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008cf4:	b672      	cpsid	i
 8008cf6:	f380 8811 	msr	BASEPRI, r0
 8008cfa:	f3bf 8f4f 	dsb	sy
 8008cfe:	f3bf 8f6f 	isb	sy
 8008d02:	b662      	cpsie	i
 8008d04:	f7fe ffb4 	bl	8007c70 <vTaskSwitchContext>
 8008d08:	f04f 0000 	mov.w	r0, #0
 8008d0c:	f380 8811 	msr	BASEPRI, r0
 8008d10:	bc09      	pop	{r0, r3}
 8008d12:	6819      	ldr	r1, [r3, #0]
 8008d14:	6808      	ldr	r0, [r1, #0]
 8008d16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d1a:	f01e 0f10 	tst.w	lr, #16
 8008d1e:	bf08      	it	eq
 8008d20:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008d24:	f380 8809 	msr	PSP, r0
 8008d28:	f3bf 8f6f 	isb	sy
 8008d2c:	4770      	bx	lr
 8008d2e:	bf00      	nop

08008d30 <pxCurrentTCBConst>:
 8008d30:	20000c4c 	.word	0x20000c4c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008d34:	bf00      	nop
 8008d36:	bf00      	nop

08008d38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
	__asm volatile
 8008d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d42:	b672      	cpsid	i
 8008d44:	f383 8811 	msr	BASEPRI, r3
 8008d48:	f3bf 8f6f 	isb	sy
 8008d4c:	f3bf 8f4f 	dsb	sy
 8008d50:	b662      	cpsie	i
 8008d52:	607b      	str	r3, [r7, #4]
}
 8008d54:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008d56:	f7fe fecf 	bl	8007af8 <xTaskIncrementTick>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d003      	beq.n	8008d68 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008d60:	4b06      	ldr	r3, [pc, #24]	; (8008d7c <SysTick_Handler+0x44>)
 8008d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d66:	601a      	str	r2, [r3, #0]
 8008d68:	2300      	movs	r3, #0
 8008d6a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	f383 8811 	msr	BASEPRI, r3
}
 8008d72:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008d74:	bf00      	nop
 8008d76:	3708      	adds	r7, #8
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}
 8008d7c:	e000ed04 	.word	0xe000ed04

08008d80 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008d80:	b480      	push	{r7}
 8008d82:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d84:	4b0b      	ldr	r3, [pc, #44]	; (8008db4 <vPortSetupTimerInterrupt+0x34>)
 8008d86:	2200      	movs	r2, #0
 8008d88:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d8a:	4b0b      	ldr	r3, [pc, #44]	; (8008db8 <vPortSetupTimerInterrupt+0x38>)
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d90:	4b0a      	ldr	r3, [pc, #40]	; (8008dbc <vPortSetupTimerInterrupt+0x3c>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a0a      	ldr	r2, [pc, #40]	; (8008dc0 <vPortSetupTimerInterrupt+0x40>)
 8008d96:	fba2 2303 	umull	r2, r3, r2, r3
 8008d9a:	099b      	lsrs	r3, r3, #6
 8008d9c:	4a09      	ldr	r2, [pc, #36]	; (8008dc4 <vPortSetupTimerInterrupt+0x44>)
 8008d9e:	3b01      	subs	r3, #1
 8008da0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008da2:	4b04      	ldr	r3, [pc, #16]	; (8008db4 <vPortSetupTimerInterrupt+0x34>)
 8008da4:	2207      	movs	r2, #7
 8008da6:	601a      	str	r2, [r3, #0]
}
 8008da8:	bf00      	nop
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr
 8008db2:	bf00      	nop
 8008db4:	e000e010 	.word	0xe000e010
 8008db8:	e000e018 	.word	0xe000e018
 8008dbc:	20000000 	.word	0x20000000
 8008dc0:	10624dd3 	.word	0x10624dd3
 8008dc4:	e000e014 	.word	0xe000e014

08008dc8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008dc8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008dd8 <vPortEnableVFP+0x10>
 8008dcc:	6801      	ldr	r1, [r0, #0]
 8008dce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008dd2:	6001      	str	r1, [r0, #0]
 8008dd4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008dd6:	bf00      	nop
 8008dd8:	e000ed88 	.word	0xe000ed88

08008ddc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008ddc:	b480      	push	{r7}
 8008dde:	b085      	sub	sp, #20
 8008de0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008de2:	f3ef 8305 	mrs	r3, IPSR
 8008de6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2b0f      	cmp	r3, #15
 8008dec:	d916      	bls.n	8008e1c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008dee:	4a19      	ldr	r2, [pc, #100]	; (8008e54 <vPortValidateInterruptPriority+0x78>)
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	4413      	add	r3, r2
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008df8:	4b17      	ldr	r3, [pc, #92]	; (8008e58 <vPortValidateInterruptPriority+0x7c>)
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	7afa      	ldrb	r2, [r7, #11]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d20c      	bcs.n	8008e1c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8008e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e06:	b672      	cpsid	i
 8008e08:	f383 8811 	msr	BASEPRI, r3
 8008e0c:	f3bf 8f6f 	isb	sy
 8008e10:	f3bf 8f4f 	dsb	sy
 8008e14:	b662      	cpsie	i
 8008e16:	607b      	str	r3, [r7, #4]
}
 8008e18:	bf00      	nop
 8008e1a:	e7fe      	b.n	8008e1a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008e1c:	4b0f      	ldr	r3, [pc, #60]	; (8008e5c <vPortValidateInterruptPriority+0x80>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008e24:	4b0e      	ldr	r3, [pc, #56]	; (8008e60 <vPortValidateInterruptPriority+0x84>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d90c      	bls.n	8008e46 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8008e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e30:	b672      	cpsid	i
 8008e32:	f383 8811 	msr	BASEPRI, r3
 8008e36:	f3bf 8f6f 	isb	sy
 8008e3a:	f3bf 8f4f 	dsb	sy
 8008e3e:	b662      	cpsie	i
 8008e40:	603b      	str	r3, [r7, #0]
}
 8008e42:	bf00      	nop
 8008e44:	e7fe      	b.n	8008e44 <vPortValidateInterruptPriority+0x68>
	}
 8008e46:	bf00      	nop
 8008e48:	3714      	adds	r7, #20
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr
 8008e52:	bf00      	nop
 8008e54:	e000e3f0 	.word	0xe000e3f0
 8008e58:	20001278 	.word	0x20001278
 8008e5c:	e000ed0c 	.word	0xe000ed0c
 8008e60:	2000127c 	.word	0x2000127c

08008e64 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b08a      	sub	sp, #40	; 0x28
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008e70:	f7fe fd84 	bl	800797c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008e74:	4b5b      	ldr	r3, [pc, #364]	; (8008fe4 <pvPortMalloc+0x180>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d101      	bne.n	8008e80 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008e7c:	f000 f91a 	bl	80090b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008e80:	4b59      	ldr	r3, [pc, #356]	; (8008fe8 <pvPortMalloc+0x184>)
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	4013      	ands	r3, r2
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	f040 8092 	bne.w	8008fb2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d01f      	beq.n	8008ed4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8008e94:	2208      	movs	r2, #8
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	4413      	add	r3, r2
 8008e9a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f003 0307 	and.w	r3, r3, #7
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d016      	beq.n	8008ed4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f023 0307 	bic.w	r3, r3, #7
 8008eac:	3308      	adds	r3, #8
 8008eae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f003 0307 	and.w	r3, r3, #7
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d00c      	beq.n	8008ed4 <pvPortMalloc+0x70>
	__asm volatile
 8008eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ebe:	b672      	cpsid	i
 8008ec0:	f383 8811 	msr	BASEPRI, r3
 8008ec4:	f3bf 8f6f 	isb	sy
 8008ec8:	f3bf 8f4f 	dsb	sy
 8008ecc:	b662      	cpsie	i
 8008ece:	617b      	str	r3, [r7, #20]
}
 8008ed0:	bf00      	nop
 8008ed2:	e7fe      	b.n	8008ed2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d06b      	beq.n	8008fb2 <pvPortMalloc+0x14e>
 8008eda:	4b44      	ldr	r3, [pc, #272]	; (8008fec <pvPortMalloc+0x188>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d866      	bhi.n	8008fb2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008ee4:	4b42      	ldr	r3, [pc, #264]	; (8008ff0 <pvPortMalloc+0x18c>)
 8008ee6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ee8:	4b41      	ldr	r3, [pc, #260]	; (8008ff0 <pvPortMalloc+0x18c>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008eee:	e004      	b.n	8008efa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8008ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d903      	bls.n	8008f0c <pvPortMalloc+0xa8>
 8008f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d1f1      	bne.n	8008ef0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008f0c:	4b35      	ldr	r3, [pc, #212]	; (8008fe4 <pvPortMalloc+0x180>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d04d      	beq.n	8008fb2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008f16:	6a3b      	ldr	r3, [r7, #32]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	2208      	movs	r2, #8
 8008f1c:	4413      	add	r3, r2
 8008f1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	6a3b      	ldr	r3, [r7, #32]
 8008f26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2a:	685a      	ldr	r2, [r3, #4]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	1ad2      	subs	r2, r2, r3
 8008f30:	2308      	movs	r3, #8
 8008f32:	005b      	lsls	r3, r3, #1
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d921      	bls.n	8008f7c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	4413      	add	r3, r2
 8008f3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f40:	69bb      	ldr	r3, [r7, #24]
 8008f42:	f003 0307 	and.w	r3, r3, #7
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00c      	beq.n	8008f64 <pvPortMalloc+0x100>
	__asm volatile
 8008f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4e:	b672      	cpsid	i
 8008f50:	f383 8811 	msr	BASEPRI, r3
 8008f54:	f3bf 8f6f 	isb	sy
 8008f58:	f3bf 8f4f 	dsb	sy
 8008f5c:	b662      	cpsie	i
 8008f5e:	613b      	str	r3, [r7, #16]
}
 8008f60:	bf00      	nop
 8008f62:	e7fe      	b.n	8008f62 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f66:	685a      	ldr	r2, [r3, #4]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	1ad2      	subs	r2, r2, r3
 8008f6c:	69bb      	ldr	r3, [r7, #24]
 8008f6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f76:	69b8      	ldr	r0, [r7, #24]
 8008f78:	f000 f8fe 	bl	8009178 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f7c:	4b1b      	ldr	r3, [pc, #108]	; (8008fec <pvPortMalloc+0x188>)
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	1ad3      	subs	r3, r2, r3
 8008f86:	4a19      	ldr	r2, [pc, #100]	; (8008fec <pvPortMalloc+0x188>)
 8008f88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f8a:	4b18      	ldr	r3, [pc, #96]	; (8008fec <pvPortMalloc+0x188>)
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	4b19      	ldr	r3, [pc, #100]	; (8008ff4 <pvPortMalloc+0x190>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d203      	bcs.n	8008f9e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f96:	4b15      	ldr	r3, [pc, #84]	; (8008fec <pvPortMalloc+0x188>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a16      	ldr	r2, [pc, #88]	; (8008ff4 <pvPortMalloc+0x190>)
 8008f9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa0:	685a      	ldr	r2, [r3, #4]
 8008fa2:	4b11      	ldr	r3, [pc, #68]	; (8008fe8 <pvPortMalloc+0x184>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	431a      	orrs	r2, r3
 8008fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008faa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fae:	2200      	movs	r2, #0
 8008fb0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008fb2:	f7fe fcf1 	bl	8007998 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008fb6:	69fb      	ldr	r3, [r7, #28]
 8008fb8:	f003 0307 	and.w	r3, r3, #7
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d00c      	beq.n	8008fda <pvPortMalloc+0x176>
	__asm volatile
 8008fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc4:	b672      	cpsid	i
 8008fc6:	f383 8811 	msr	BASEPRI, r3
 8008fca:	f3bf 8f6f 	isb	sy
 8008fce:	f3bf 8f4f 	dsb	sy
 8008fd2:	b662      	cpsie	i
 8008fd4:	60fb      	str	r3, [r7, #12]
}
 8008fd6:	bf00      	nop
 8008fd8:	e7fe      	b.n	8008fd8 <pvPortMalloc+0x174>
	return pvReturn;
 8008fda:	69fb      	ldr	r3, [r7, #28]
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3728      	adds	r7, #40	; 0x28
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}
 8008fe4:	20004e88 	.word	0x20004e88
 8008fe8:	20004e94 	.word	0x20004e94
 8008fec:	20004e8c 	.word	0x20004e8c
 8008ff0:	20004e80 	.word	0x20004e80
 8008ff4:	20004e90 	.word	0x20004e90

08008ff8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b086      	sub	sp, #24
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d04c      	beq.n	80090a4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800900a:	2308      	movs	r3, #8
 800900c:	425b      	negs	r3, r3
 800900e:	697a      	ldr	r2, [r7, #20]
 8009010:	4413      	add	r3, r2
 8009012:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	685a      	ldr	r2, [r3, #4]
 800901c:	4b23      	ldr	r3, [pc, #140]	; (80090ac <vPortFree+0xb4>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4013      	ands	r3, r2
 8009022:	2b00      	cmp	r3, #0
 8009024:	d10c      	bne.n	8009040 <vPortFree+0x48>
	__asm volatile
 8009026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800902a:	b672      	cpsid	i
 800902c:	f383 8811 	msr	BASEPRI, r3
 8009030:	f3bf 8f6f 	isb	sy
 8009034:	f3bf 8f4f 	dsb	sy
 8009038:	b662      	cpsie	i
 800903a:	60fb      	str	r3, [r7, #12]
}
 800903c:	bf00      	nop
 800903e:	e7fe      	b.n	800903e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d00c      	beq.n	8009062 <vPortFree+0x6a>
	__asm volatile
 8009048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904c:	b672      	cpsid	i
 800904e:	f383 8811 	msr	BASEPRI, r3
 8009052:	f3bf 8f6f 	isb	sy
 8009056:	f3bf 8f4f 	dsb	sy
 800905a:	b662      	cpsie	i
 800905c:	60bb      	str	r3, [r7, #8]
}
 800905e:	bf00      	nop
 8009060:	e7fe      	b.n	8009060 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	685a      	ldr	r2, [r3, #4]
 8009066:	4b11      	ldr	r3, [pc, #68]	; (80090ac <vPortFree+0xb4>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4013      	ands	r3, r2
 800906c:	2b00      	cmp	r3, #0
 800906e:	d019      	beq.n	80090a4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d115      	bne.n	80090a4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	685a      	ldr	r2, [r3, #4]
 800907c:	4b0b      	ldr	r3, [pc, #44]	; (80090ac <vPortFree+0xb4>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	43db      	mvns	r3, r3
 8009082:	401a      	ands	r2, r3
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009088:	f7fe fc78 	bl	800797c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	685a      	ldr	r2, [r3, #4]
 8009090:	4b07      	ldr	r3, [pc, #28]	; (80090b0 <vPortFree+0xb8>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4413      	add	r3, r2
 8009096:	4a06      	ldr	r2, [pc, #24]	; (80090b0 <vPortFree+0xb8>)
 8009098:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800909a:	6938      	ldr	r0, [r7, #16]
 800909c:	f000 f86c 	bl	8009178 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80090a0:	f7fe fc7a 	bl	8007998 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80090a4:	bf00      	nop
 80090a6:	3718      	adds	r7, #24
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	20004e94 	.word	0x20004e94
 80090b0:	20004e8c 	.word	0x20004e8c

080090b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80090b4:	b480      	push	{r7}
 80090b6:	b085      	sub	sp, #20
 80090b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80090ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80090be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80090c0:	4b27      	ldr	r3, [pc, #156]	; (8009160 <prvHeapInit+0xac>)
 80090c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f003 0307 	and.w	r3, r3, #7
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d00c      	beq.n	80090e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	3307      	adds	r3, #7
 80090d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f023 0307 	bic.w	r3, r3, #7
 80090da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80090dc:	68ba      	ldr	r2, [r7, #8]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	1ad3      	subs	r3, r2, r3
 80090e2:	4a1f      	ldr	r2, [pc, #124]	; (8009160 <prvHeapInit+0xac>)
 80090e4:	4413      	add	r3, r2
 80090e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80090ec:	4a1d      	ldr	r2, [pc, #116]	; (8009164 <prvHeapInit+0xb0>)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80090f2:	4b1c      	ldr	r3, [pc, #112]	; (8009164 <prvHeapInit+0xb0>)
 80090f4:	2200      	movs	r2, #0
 80090f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	68ba      	ldr	r2, [r7, #8]
 80090fc:	4413      	add	r3, r2
 80090fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009100:	2208      	movs	r2, #8
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	1a9b      	subs	r3, r3, r2
 8009106:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f023 0307 	bic.w	r3, r3, #7
 800910e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	4a15      	ldr	r2, [pc, #84]	; (8009168 <prvHeapInit+0xb4>)
 8009114:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009116:	4b14      	ldr	r3, [pc, #80]	; (8009168 <prvHeapInit+0xb4>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2200      	movs	r2, #0
 800911c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800911e:	4b12      	ldr	r3, [pc, #72]	; (8009168 <prvHeapInit+0xb4>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	2200      	movs	r2, #0
 8009124:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	68fa      	ldr	r2, [r7, #12]
 800912e:	1ad2      	subs	r2, r2, r3
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009134:	4b0c      	ldr	r3, [pc, #48]	; (8009168 <prvHeapInit+0xb4>)
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	4a0a      	ldr	r2, [pc, #40]	; (800916c <prvHeapInit+0xb8>)
 8009142:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	4a09      	ldr	r2, [pc, #36]	; (8009170 <prvHeapInit+0xbc>)
 800914a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800914c:	4b09      	ldr	r3, [pc, #36]	; (8009174 <prvHeapInit+0xc0>)
 800914e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009152:	601a      	str	r2, [r3, #0]
}
 8009154:	bf00      	nop
 8009156:	3714      	adds	r7, #20
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr
 8009160:	20001280 	.word	0x20001280
 8009164:	20004e80 	.word	0x20004e80
 8009168:	20004e88 	.word	0x20004e88
 800916c:	20004e90 	.word	0x20004e90
 8009170:	20004e8c 	.word	0x20004e8c
 8009174:	20004e94 	.word	0x20004e94

08009178 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009178:	b480      	push	{r7}
 800917a:	b085      	sub	sp, #20
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009180:	4b28      	ldr	r3, [pc, #160]	; (8009224 <prvInsertBlockIntoFreeList+0xac>)
 8009182:	60fb      	str	r3, [r7, #12]
 8009184:	e002      	b.n	800918c <prvInsertBlockIntoFreeList+0x14>
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	60fb      	str	r3, [r7, #12]
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	429a      	cmp	r2, r3
 8009194:	d8f7      	bhi.n	8009186 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	68ba      	ldr	r2, [r7, #8]
 80091a0:	4413      	add	r3, r2
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d108      	bne.n	80091ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	685a      	ldr	r2, [r3, #4]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	441a      	add	r2, r3
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	68ba      	ldr	r2, [r7, #8]
 80091c4:	441a      	add	r2, r3
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d118      	bne.n	8009200 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	4b15      	ldr	r3, [pc, #84]	; (8009228 <prvInsertBlockIntoFreeList+0xb0>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d00d      	beq.n	80091f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	685a      	ldr	r2, [r3, #4]
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	441a      	add	r2, r3
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	601a      	str	r2, [r3, #0]
 80091f4:	e008      	b.n	8009208 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80091f6:	4b0c      	ldr	r3, [pc, #48]	; (8009228 <prvInsertBlockIntoFreeList+0xb0>)
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	601a      	str	r2, [r3, #0]
 80091fe:	e003      	b.n	8009208 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009208:	68fa      	ldr	r2, [r7, #12]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	429a      	cmp	r2, r3
 800920e:	d002      	beq.n	8009216 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009216:	bf00      	nop
 8009218:	3714      	adds	r7, #20
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr
 8009222:	bf00      	nop
 8009224:	20004e80 	.word	0x20004e80
 8009228:	20004e88 	.word	0x20004e88

0800922c <memset>:
 800922c:	4402      	add	r2, r0
 800922e:	4603      	mov	r3, r0
 8009230:	4293      	cmp	r3, r2
 8009232:	d100      	bne.n	8009236 <memset+0xa>
 8009234:	4770      	bx	lr
 8009236:	f803 1b01 	strb.w	r1, [r3], #1
 800923a:	e7f9      	b.n	8009230 <memset+0x4>

0800923c <_reclaim_reent>:
 800923c:	4b29      	ldr	r3, [pc, #164]	; (80092e4 <_reclaim_reent+0xa8>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4283      	cmp	r3, r0
 8009242:	b570      	push	{r4, r5, r6, lr}
 8009244:	4604      	mov	r4, r0
 8009246:	d04b      	beq.n	80092e0 <_reclaim_reent+0xa4>
 8009248:	69c3      	ldr	r3, [r0, #28]
 800924a:	b143      	cbz	r3, 800925e <_reclaim_reent+0x22>
 800924c:	68db      	ldr	r3, [r3, #12]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d144      	bne.n	80092dc <_reclaim_reent+0xa0>
 8009252:	69e3      	ldr	r3, [r4, #28]
 8009254:	6819      	ldr	r1, [r3, #0]
 8009256:	b111      	cbz	r1, 800925e <_reclaim_reent+0x22>
 8009258:	4620      	mov	r0, r4
 800925a:	f000 f879 	bl	8009350 <_free_r>
 800925e:	6961      	ldr	r1, [r4, #20]
 8009260:	b111      	cbz	r1, 8009268 <_reclaim_reent+0x2c>
 8009262:	4620      	mov	r0, r4
 8009264:	f000 f874 	bl	8009350 <_free_r>
 8009268:	69e1      	ldr	r1, [r4, #28]
 800926a:	b111      	cbz	r1, 8009272 <_reclaim_reent+0x36>
 800926c:	4620      	mov	r0, r4
 800926e:	f000 f86f 	bl	8009350 <_free_r>
 8009272:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009274:	b111      	cbz	r1, 800927c <_reclaim_reent+0x40>
 8009276:	4620      	mov	r0, r4
 8009278:	f000 f86a 	bl	8009350 <_free_r>
 800927c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800927e:	b111      	cbz	r1, 8009286 <_reclaim_reent+0x4a>
 8009280:	4620      	mov	r0, r4
 8009282:	f000 f865 	bl	8009350 <_free_r>
 8009286:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009288:	b111      	cbz	r1, 8009290 <_reclaim_reent+0x54>
 800928a:	4620      	mov	r0, r4
 800928c:	f000 f860 	bl	8009350 <_free_r>
 8009290:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009292:	b111      	cbz	r1, 800929a <_reclaim_reent+0x5e>
 8009294:	4620      	mov	r0, r4
 8009296:	f000 f85b 	bl	8009350 <_free_r>
 800929a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800929c:	b111      	cbz	r1, 80092a4 <_reclaim_reent+0x68>
 800929e:	4620      	mov	r0, r4
 80092a0:	f000 f856 	bl	8009350 <_free_r>
 80092a4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80092a6:	b111      	cbz	r1, 80092ae <_reclaim_reent+0x72>
 80092a8:	4620      	mov	r0, r4
 80092aa:	f000 f851 	bl	8009350 <_free_r>
 80092ae:	6a23      	ldr	r3, [r4, #32]
 80092b0:	b1b3      	cbz	r3, 80092e0 <_reclaim_reent+0xa4>
 80092b2:	4620      	mov	r0, r4
 80092b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80092b8:	4718      	bx	r3
 80092ba:	5949      	ldr	r1, [r1, r5]
 80092bc:	b941      	cbnz	r1, 80092d0 <_reclaim_reent+0x94>
 80092be:	3504      	adds	r5, #4
 80092c0:	69e3      	ldr	r3, [r4, #28]
 80092c2:	2d80      	cmp	r5, #128	; 0x80
 80092c4:	68d9      	ldr	r1, [r3, #12]
 80092c6:	d1f8      	bne.n	80092ba <_reclaim_reent+0x7e>
 80092c8:	4620      	mov	r0, r4
 80092ca:	f000 f841 	bl	8009350 <_free_r>
 80092ce:	e7c0      	b.n	8009252 <_reclaim_reent+0x16>
 80092d0:	680e      	ldr	r6, [r1, #0]
 80092d2:	4620      	mov	r0, r4
 80092d4:	f000 f83c 	bl	8009350 <_free_r>
 80092d8:	4631      	mov	r1, r6
 80092da:	e7ef      	b.n	80092bc <_reclaim_reent+0x80>
 80092dc:	2500      	movs	r5, #0
 80092de:	e7ef      	b.n	80092c0 <_reclaim_reent+0x84>
 80092e0:	bd70      	pop	{r4, r5, r6, pc}
 80092e2:	bf00      	nop
 80092e4:	2000005c 	.word	0x2000005c

080092e8 <__libc_init_array>:
 80092e8:	b570      	push	{r4, r5, r6, lr}
 80092ea:	4d0d      	ldr	r5, [pc, #52]	; (8009320 <__libc_init_array+0x38>)
 80092ec:	4c0d      	ldr	r4, [pc, #52]	; (8009324 <__libc_init_array+0x3c>)
 80092ee:	1b64      	subs	r4, r4, r5
 80092f0:	10a4      	asrs	r4, r4, #2
 80092f2:	2600      	movs	r6, #0
 80092f4:	42a6      	cmp	r6, r4
 80092f6:	d109      	bne.n	800930c <__libc_init_array+0x24>
 80092f8:	4d0b      	ldr	r5, [pc, #44]	; (8009328 <__libc_init_array+0x40>)
 80092fa:	4c0c      	ldr	r4, [pc, #48]	; (800932c <__libc_init_array+0x44>)
 80092fc:	f000 f880 	bl	8009400 <_init>
 8009300:	1b64      	subs	r4, r4, r5
 8009302:	10a4      	asrs	r4, r4, #2
 8009304:	2600      	movs	r6, #0
 8009306:	42a6      	cmp	r6, r4
 8009308:	d105      	bne.n	8009316 <__libc_init_array+0x2e>
 800930a:	bd70      	pop	{r4, r5, r6, pc}
 800930c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009310:	4798      	blx	r3
 8009312:	3601      	adds	r6, #1
 8009314:	e7ee      	b.n	80092f4 <__libc_init_array+0xc>
 8009316:	f855 3b04 	ldr.w	r3, [r5], #4
 800931a:	4798      	blx	r3
 800931c:	3601      	adds	r6, #1
 800931e:	e7f2      	b.n	8009306 <__libc_init_array+0x1e>
 8009320:	08009678 	.word	0x08009678
 8009324:	08009678 	.word	0x08009678
 8009328:	08009678 	.word	0x08009678
 800932c:	0800967c 	.word	0x0800967c

08009330 <__retarget_lock_acquire_recursive>:
 8009330:	4770      	bx	lr

08009332 <__retarget_lock_release_recursive>:
 8009332:	4770      	bx	lr

08009334 <memcpy>:
 8009334:	440a      	add	r2, r1
 8009336:	4291      	cmp	r1, r2
 8009338:	f100 33ff 	add.w	r3, r0, #4294967295
 800933c:	d100      	bne.n	8009340 <memcpy+0xc>
 800933e:	4770      	bx	lr
 8009340:	b510      	push	{r4, lr}
 8009342:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009346:	f803 4f01 	strb.w	r4, [r3, #1]!
 800934a:	4291      	cmp	r1, r2
 800934c:	d1f9      	bne.n	8009342 <memcpy+0xe>
 800934e:	bd10      	pop	{r4, pc}

08009350 <_free_r>:
 8009350:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009352:	2900      	cmp	r1, #0
 8009354:	d044      	beq.n	80093e0 <_free_r+0x90>
 8009356:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800935a:	9001      	str	r0, [sp, #4]
 800935c:	2b00      	cmp	r3, #0
 800935e:	f1a1 0404 	sub.w	r4, r1, #4
 8009362:	bfb8      	it	lt
 8009364:	18e4      	addlt	r4, r4, r3
 8009366:	f000 f83f 	bl	80093e8 <__malloc_lock>
 800936a:	4a1e      	ldr	r2, [pc, #120]	; (80093e4 <_free_r+0x94>)
 800936c:	9801      	ldr	r0, [sp, #4]
 800936e:	6813      	ldr	r3, [r2, #0]
 8009370:	b933      	cbnz	r3, 8009380 <_free_r+0x30>
 8009372:	6063      	str	r3, [r4, #4]
 8009374:	6014      	str	r4, [r2, #0]
 8009376:	b003      	add	sp, #12
 8009378:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800937c:	f000 b83a 	b.w	80093f4 <__malloc_unlock>
 8009380:	42a3      	cmp	r3, r4
 8009382:	d908      	bls.n	8009396 <_free_r+0x46>
 8009384:	6825      	ldr	r5, [r4, #0]
 8009386:	1961      	adds	r1, r4, r5
 8009388:	428b      	cmp	r3, r1
 800938a:	bf01      	itttt	eq
 800938c:	6819      	ldreq	r1, [r3, #0]
 800938e:	685b      	ldreq	r3, [r3, #4]
 8009390:	1949      	addeq	r1, r1, r5
 8009392:	6021      	streq	r1, [r4, #0]
 8009394:	e7ed      	b.n	8009372 <_free_r+0x22>
 8009396:	461a      	mov	r2, r3
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	b10b      	cbz	r3, 80093a0 <_free_r+0x50>
 800939c:	42a3      	cmp	r3, r4
 800939e:	d9fa      	bls.n	8009396 <_free_r+0x46>
 80093a0:	6811      	ldr	r1, [r2, #0]
 80093a2:	1855      	adds	r5, r2, r1
 80093a4:	42a5      	cmp	r5, r4
 80093a6:	d10b      	bne.n	80093c0 <_free_r+0x70>
 80093a8:	6824      	ldr	r4, [r4, #0]
 80093aa:	4421      	add	r1, r4
 80093ac:	1854      	adds	r4, r2, r1
 80093ae:	42a3      	cmp	r3, r4
 80093b0:	6011      	str	r1, [r2, #0]
 80093b2:	d1e0      	bne.n	8009376 <_free_r+0x26>
 80093b4:	681c      	ldr	r4, [r3, #0]
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	6053      	str	r3, [r2, #4]
 80093ba:	440c      	add	r4, r1
 80093bc:	6014      	str	r4, [r2, #0]
 80093be:	e7da      	b.n	8009376 <_free_r+0x26>
 80093c0:	d902      	bls.n	80093c8 <_free_r+0x78>
 80093c2:	230c      	movs	r3, #12
 80093c4:	6003      	str	r3, [r0, #0]
 80093c6:	e7d6      	b.n	8009376 <_free_r+0x26>
 80093c8:	6825      	ldr	r5, [r4, #0]
 80093ca:	1961      	adds	r1, r4, r5
 80093cc:	428b      	cmp	r3, r1
 80093ce:	bf04      	itt	eq
 80093d0:	6819      	ldreq	r1, [r3, #0]
 80093d2:	685b      	ldreq	r3, [r3, #4]
 80093d4:	6063      	str	r3, [r4, #4]
 80093d6:	bf04      	itt	eq
 80093d8:	1949      	addeq	r1, r1, r5
 80093da:	6021      	streq	r1, [r4, #0]
 80093dc:	6054      	str	r4, [r2, #4]
 80093de:	e7ca      	b.n	8009376 <_free_r+0x26>
 80093e0:	b003      	add	sp, #12
 80093e2:	bd30      	pop	{r4, r5, pc}
 80093e4:	20004fd4 	.word	0x20004fd4

080093e8 <__malloc_lock>:
 80093e8:	4801      	ldr	r0, [pc, #4]	; (80093f0 <__malloc_lock+0x8>)
 80093ea:	f7ff bfa1 	b.w	8009330 <__retarget_lock_acquire_recursive>
 80093ee:	bf00      	nop
 80093f0:	20004fd0 	.word	0x20004fd0

080093f4 <__malloc_unlock>:
 80093f4:	4801      	ldr	r0, [pc, #4]	; (80093fc <__malloc_unlock+0x8>)
 80093f6:	f7ff bf9c 	b.w	8009332 <__retarget_lock_release_recursive>
 80093fa:	bf00      	nop
 80093fc:	20004fd0 	.word	0x20004fd0

08009400 <_init>:
 8009400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009402:	bf00      	nop
 8009404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009406:	bc08      	pop	{r3}
 8009408:	469e      	mov	lr, r3
 800940a:	4770      	bx	lr

0800940c <_fini>:
 800940c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800940e:	bf00      	nop
 8009410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009412:	bc08      	pop	{r3}
 8009414:	469e      	mov	lr, r3
 8009416:	4770      	bx	lr
