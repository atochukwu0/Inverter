
Inverter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007310  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ccmram       00000868  08007508  08007508  00008508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00008158  08007d70  08007d70  00008d70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800fec8  0800fec8  0001108c  2**0
                  CONTENTS
  5 .ARM          00000008  0800fec8  0800fec8  00010ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800fed0  0800fed0  0001108c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800fed0  0800fed0  00010ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800fed4  0800fed4  00010ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000008c  20000000  0800fed8  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000065c  2000008c  0800ff64  0001108c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200006e8  0800ff64  000116e8  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0001108c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a1bd  00000000  00000000  000110ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000043de  00000000  00000000  0002b277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014c8  00000000  00000000  0002f658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fd0  00000000  00000000  00030b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002be53  00000000  00000000  00031af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001eb3d  00000000  00000000  0005d943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00103de5  00000000  00000000  0007c480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00180265  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005704  00000000  00000000  001802a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  001859ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000008c 	.word	0x2000008c
 8000214:	00000000 	.word	0x00000000
 8000218:	080074f0 	.word	0x080074f0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000090 	.word	0x20000090
 8000234:	080074f0 	.word	0x080074f0

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	@ 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_uldivmod>:
 80005b0:	b953      	cbnz	r3, 80005c8 <__aeabi_uldivmod+0x18>
 80005b2:	b94a      	cbnz	r2, 80005c8 <__aeabi_uldivmod+0x18>
 80005b4:	2900      	cmp	r1, #0
 80005b6:	bf08      	it	eq
 80005b8:	2800      	cmpeq	r0, #0
 80005ba:	bf1c      	itt	ne
 80005bc:	f04f 31ff 	movne.w	r1, #4294967295
 80005c0:	f04f 30ff 	movne.w	r0, #4294967295
 80005c4:	f000 b96a 	b.w	800089c <__aeabi_idiv0>
 80005c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005d0:	f000 f806 	bl	80005e0 <__udivmoddi4>
 80005d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005dc:	b004      	add	sp, #16
 80005de:	4770      	bx	lr

080005e0 <__udivmoddi4>:
 80005e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005e4:	9d08      	ldr	r5, [sp, #32]
 80005e6:	460c      	mov	r4, r1
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d14e      	bne.n	800068a <__udivmoddi4+0xaa>
 80005ec:	4694      	mov	ip, r2
 80005ee:	458c      	cmp	ip, r1
 80005f0:	4686      	mov	lr, r0
 80005f2:	fab2 f282 	clz	r2, r2
 80005f6:	d962      	bls.n	80006be <__udivmoddi4+0xde>
 80005f8:	b14a      	cbz	r2, 800060e <__udivmoddi4+0x2e>
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	4091      	lsls	r1, r2
 8000600:	fa20 f303 	lsr.w	r3, r0, r3
 8000604:	fa0c fc02 	lsl.w	ip, ip, r2
 8000608:	4319      	orrs	r1, r3
 800060a:	fa00 fe02 	lsl.w	lr, r0, r2
 800060e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000612:	fa1f f68c 	uxth.w	r6, ip
 8000616:	fbb1 f4f7 	udiv	r4, r1, r7
 800061a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800061e:	fb07 1114 	mls	r1, r7, r4, r1
 8000622:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000626:	fb04 f106 	mul.w	r1, r4, r6
 800062a:	4299      	cmp	r1, r3
 800062c:	d90a      	bls.n	8000644 <__udivmoddi4+0x64>
 800062e:	eb1c 0303 	adds.w	r3, ip, r3
 8000632:	f104 30ff 	add.w	r0, r4, #4294967295
 8000636:	f080 8112 	bcs.w	800085e <__udivmoddi4+0x27e>
 800063a:	4299      	cmp	r1, r3
 800063c:	f240 810f 	bls.w	800085e <__udivmoddi4+0x27e>
 8000640:	3c02      	subs	r4, #2
 8000642:	4463      	add	r3, ip
 8000644:	1a59      	subs	r1, r3, r1
 8000646:	fa1f f38e 	uxth.w	r3, lr
 800064a:	fbb1 f0f7 	udiv	r0, r1, r7
 800064e:	fb07 1110 	mls	r1, r7, r0, r1
 8000652:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000656:	fb00 f606 	mul.w	r6, r0, r6
 800065a:	429e      	cmp	r6, r3
 800065c:	d90a      	bls.n	8000674 <__udivmoddi4+0x94>
 800065e:	eb1c 0303 	adds.w	r3, ip, r3
 8000662:	f100 31ff 	add.w	r1, r0, #4294967295
 8000666:	f080 80fc 	bcs.w	8000862 <__udivmoddi4+0x282>
 800066a:	429e      	cmp	r6, r3
 800066c:	f240 80f9 	bls.w	8000862 <__udivmoddi4+0x282>
 8000670:	4463      	add	r3, ip
 8000672:	3802      	subs	r0, #2
 8000674:	1b9b      	subs	r3, r3, r6
 8000676:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800067a:	2100      	movs	r1, #0
 800067c:	b11d      	cbz	r5, 8000686 <__udivmoddi4+0xa6>
 800067e:	40d3      	lsrs	r3, r2
 8000680:	2200      	movs	r2, #0
 8000682:	e9c5 3200 	strd	r3, r2, [r5]
 8000686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800068a:	428b      	cmp	r3, r1
 800068c:	d905      	bls.n	800069a <__udivmoddi4+0xba>
 800068e:	b10d      	cbz	r5, 8000694 <__udivmoddi4+0xb4>
 8000690:	e9c5 0100 	strd	r0, r1, [r5]
 8000694:	2100      	movs	r1, #0
 8000696:	4608      	mov	r0, r1
 8000698:	e7f5      	b.n	8000686 <__udivmoddi4+0xa6>
 800069a:	fab3 f183 	clz	r1, r3
 800069e:	2900      	cmp	r1, #0
 80006a0:	d146      	bne.n	8000730 <__udivmoddi4+0x150>
 80006a2:	42a3      	cmp	r3, r4
 80006a4:	d302      	bcc.n	80006ac <__udivmoddi4+0xcc>
 80006a6:	4290      	cmp	r0, r2
 80006a8:	f0c0 80f0 	bcc.w	800088c <__udivmoddi4+0x2ac>
 80006ac:	1a86      	subs	r6, r0, r2
 80006ae:	eb64 0303 	sbc.w	r3, r4, r3
 80006b2:	2001      	movs	r0, #1
 80006b4:	2d00      	cmp	r5, #0
 80006b6:	d0e6      	beq.n	8000686 <__udivmoddi4+0xa6>
 80006b8:	e9c5 6300 	strd	r6, r3, [r5]
 80006bc:	e7e3      	b.n	8000686 <__udivmoddi4+0xa6>
 80006be:	2a00      	cmp	r2, #0
 80006c0:	f040 8090 	bne.w	80007e4 <__udivmoddi4+0x204>
 80006c4:	eba1 040c 	sub.w	r4, r1, ip
 80006c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006cc:	fa1f f78c 	uxth.w	r7, ip
 80006d0:	2101      	movs	r1, #1
 80006d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80006d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006da:	fb08 4416 	mls	r4, r8, r6, r4
 80006de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80006e2:	fb07 f006 	mul.w	r0, r7, r6
 80006e6:	4298      	cmp	r0, r3
 80006e8:	d908      	bls.n	80006fc <__udivmoddi4+0x11c>
 80006ea:	eb1c 0303 	adds.w	r3, ip, r3
 80006ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80006f2:	d202      	bcs.n	80006fa <__udivmoddi4+0x11a>
 80006f4:	4298      	cmp	r0, r3
 80006f6:	f200 80cd 	bhi.w	8000894 <__udivmoddi4+0x2b4>
 80006fa:	4626      	mov	r6, r4
 80006fc:	1a1c      	subs	r4, r3, r0
 80006fe:	fa1f f38e 	uxth.w	r3, lr
 8000702:	fbb4 f0f8 	udiv	r0, r4, r8
 8000706:	fb08 4410 	mls	r4, r8, r0, r4
 800070a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800070e:	fb00 f707 	mul.w	r7, r0, r7
 8000712:	429f      	cmp	r7, r3
 8000714:	d908      	bls.n	8000728 <__udivmoddi4+0x148>
 8000716:	eb1c 0303 	adds.w	r3, ip, r3
 800071a:	f100 34ff 	add.w	r4, r0, #4294967295
 800071e:	d202      	bcs.n	8000726 <__udivmoddi4+0x146>
 8000720:	429f      	cmp	r7, r3
 8000722:	f200 80b0 	bhi.w	8000886 <__udivmoddi4+0x2a6>
 8000726:	4620      	mov	r0, r4
 8000728:	1bdb      	subs	r3, r3, r7
 800072a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800072e:	e7a5      	b.n	800067c <__udivmoddi4+0x9c>
 8000730:	f1c1 0620 	rsb	r6, r1, #32
 8000734:	408b      	lsls	r3, r1
 8000736:	fa22 f706 	lsr.w	r7, r2, r6
 800073a:	431f      	orrs	r7, r3
 800073c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000740:	fa04 f301 	lsl.w	r3, r4, r1
 8000744:	ea43 030c 	orr.w	r3, r3, ip
 8000748:	40f4      	lsrs	r4, r6
 800074a:	fa00 f801 	lsl.w	r8, r0, r1
 800074e:	0c38      	lsrs	r0, r7, #16
 8000750:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000754:	fbb4 fef0 	udiv	lr, r4, r0
 8000758:	fa1f fc87 	uxth.w	ip, r7
 800075c:	fb00 441e 	mls	r4, r0, lr, r4
 8000760:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000764:	fb0e f90c 	mul.w	r9, lr, ip
 8000768:	45a1      	cmp	r9, r4
 800076a:	fa02 f201 	lsl.w	r2, r2, r1
 800076e:	d90a      	bls.n	8000786 <__udivmoddi4+0x1a6>
 8000770:	193c      	adds	r4, r7, r4
 8000772:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000776:	f080 8084 	bcs.w	8000882 <__udivmoddi4+0x2a2>
 800077a:	45a1      	cmp	r9, r4
 800077c:	f240 8081 	bls.w	8000882 <__udivmoddi4+0x2a2>
 8000780:	f1ae 0e02 	sub.w	lr, lr, #2
 8000784:	443c      	add	r4, r7
 8000786:	eba4 0409 	sub.w	r4, r4, r9
 800078a:	fa1f f983 	uxth.w	r9, r3
 800078e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000792:	fb00 4413 	mls	r4, r0, r3, r4
 8000796:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800079a:	fb03 fc0c 	mul.w	ip, r3, ip
 800079e:	45a4      	cmp	ip, r4
 80007a0:	d907      	bls.n	80007b2 <__udivmoddi4+0x1d2>
 80007a2:	193c      	adds	r4, r7, r4
 80007a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80007a8:	d267      	bcs.n	800087a <__udivmoddi4+0x29a>
 80007aa:	45a4      	cmp	ip, r4
 80007ac:	d965      	bls.n	800087a <__udivmoddi4+0x29a>
 80007ae:	3b02      	subs	r3, #2
 80007b0:	443c      	add	r4, r7
 80007b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80007b6:	fba0 9302 	umull	r9, r3, r0, r2
 80007ba:	eba4 040c 	sub.w	r4, r4, ip
 80007be:	429c      	cmp	r4, r3
 80007c0:	46ce      	mov	lr, r9
 80007c2:	469c      	mov	ip, r3
 80007c4:	d351      	bcc.n	800086a <__udivmoddi4+0x28a>
 80007c6:	d04e      	beq.n	8000866 <__udivmoddi4+0x286>
 80007c8:	b155      	cbz	r5, 80007e0 <__udivmoddi4+0x200>
 80007ca:	ebb8 030e 	subs.w	r3, r8, lr
 80007ce:	eb64 040c 	sbc.w	r4, r4, ip
 80007d2:	fa04 f606 	lsl.w	r6, r4, r6
 80007d6:	40cb      	lsrs	r3, r1
 80007d8:	431e      	orrs	r6, r3
 80007da:	40cc      	lsrs	r4, r1
 80007dc:	e9c5 6400 	strd	r6, r4, [r5]
 80007e0:	2100      	movs	r1, #0
 80007e2:	e750      	b.n	8000686 <__udivmoddi4+0xa6>
 80007e4:	f1c2 0320 	rsb	r3, r2, #32
 80007e8:	fa20 f103 	lsr.w	r1, r0, r3
 80007ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80007f0:	fa24 f303 	lsr.w	r3, r4, r3
 80007f4:	4094      	lsls	r4, r2
 80007f6:	430c      	orrs	r4, r1
 80007f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000800:	fa1f f78c 	uxth.w	r7, ip
 8000804:	fbb3 f0f8 	udiv	r0, r3, r8
 8000808:	fb08 3110 	mls	r1, r8, r0, r3
 800080c:	0c23      	lsrs	r3, r4, #16
 800080e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000812:	fb00 f107 	mul.w	r1, r0, r7
 8000816:	4299      	cmp	r1, r3
 8000818:	d908      	bls.n	800082c <__udivmoddi4+0x24c>
 800081a:	eb1c 0303 	adds.w	r3, ip, r3
 800081e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000822:	d22c      	bcs.n	800087e <__udivmoddi4+0x29e>
 8000824:	4299      	cmp	r1, r3
 8000826:	d92a      	bls.n	800087e <__udivmoddi4+0x29e>
 8000828:	3802      	subs	r0, #2
 800082a:	4463      	add	r3, ip
 800082c:	1a5b      	subs	r3, r3, r1
 800082e:	b2a4      	uxth	r4, r4
 8000830:	fbb3 f1f8 	udiv	r1, r3, r8
 8000834:	fb08 3311 	mls	r3, r8, r1, r3
 8000838:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800083c:	fb01 f307 	mul.w	r3, r1, r7
 8000840:	42a3      	cmp	r3, r4
 8000842:	d908      	bls.n	8000856 <__udivmoddi4+0x276>
 8000844:	eb1c 0404 	adds.w	r4, ip, r4
 8000848:	f101 36ff 	add.w	r6, r1, #4294967295
 800084c:	d213      	bcs.n	8000876 <__udivmoddi4+0x296>
 800084e:	42a3      	cmp	r3, r4
 8000850:	d911      	bls.n	8000876 <__udivmoddi4+0x296>
 8000852:	3902      	subs	r1, #2
 8000854:	4464      	add	r4, ip
 8000856:	1ae4      	subs	r4, r4, r3
 8000858:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800085c:	e739      	b.n	80006d2 <__udivmoddi4+0xf2>
 800085e:	4604      	mov	r4, r0
 8000860:	e6f0      	b.n	8000644 <__udivmoddi4+0x64>
 8000862:	4608      	mov	r0, r1
 8000864:	e706      	b.n	8000674 <__udivmoddi4+0x94>
 8000866:	45c8      	cmp	r8, r9
 8000868:	d2ae      	bcs.n	80007c8 <__udivmoddi4+0x1e8>
 800086a:	ebb9 0e02 	subs.w	lr, r9, r2
 800086e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000872:	3801      	subs	r0, #1
 8000874:	e7a8      	b.n	80007c8 <__udivmoddi4+0x1e8>
 8000876:	4631      	mov	r1, r6
 8000878:	e7ed      	b.n	8000856 <__udivmoddi4+0x276>
 800087a:	4603      	mov	r3, r0
 800087c:	e799      	b.n	80007b2 <__udivmoddi4+0x1d2>
 800087e:	4630      	mov	r0, r6
 8000880:	e7d4      	b.n	800082c <__udivmoddi4+0x24c>
 8000882:	46d6      	mov	lr, sl
 8000884:	e77f      	b.n	8000786 <__udivmoddi4+0x1a6>
 8000886:	4463      	add	r3, ip
 8000888:	3802      	subs	r0, #2
 800088a:	e74d      	b.n	8000728 <__udivmoddi4+0x148>
 800088c:	4606      	mov	r6, r0
 800088e:	4623      	mov	r3, r4
 8000890:	4608      	mov	r0, r1
 8000892:	e70f      	b.n	80006b4 <__udivmoddi4+0xd4>
 8000894:	3e02      	subs	r6, #2
 8000896:	4463      	add	r3, ip
 8000898:	e730      	b.n	80006fc <__udivmoddi4+0x11c>
 800089a:	bf00      	nop

0800089c <__aeabi_idiv0>:
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop

080008a0 <calc_duties>:
 * @param[in] vq Voltage in the q-axis.
 * @param[in] vDC DC voltage.
 * @param[in] theta_e Electrical angle in radians (-pi..pi).
 * @param[out] duties Pointer to the duties structure.
 */
void calc_duties(float vd, float vq, float vDC, float theta_e, volatile Duties *duties) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	ed2d 8b02 	vpush	{d8}
 80008a6:	b08e      	sub	sp, #56	@ 0x38
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	ed87 0a05 	vstr	s0, [r7, #20]
 80008ae:	edc7 0a04 	vstr	s1, [r7, #16]
 80008b2:	ed87 1a03 	vstr	s2, [r7, #12]
 80008b6:	edc7 1a02 	vstr	s3, [r7, #8]
 80008ba:	6078      	str	r0, [r7, #4]


  // inverse Park transform
  float alpha = (vd/vDC)*cosf(theta_e) - (vq/vDC)*sinf(theta_e);              // Alpha(D) = d*cos(Fi) - q*sin(Fi)
 80008bc:	ed97 7a05 	vldr	s14, [r7, #20]
 80008c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80008c4:	ee87 8a27 	vdiv.f32	s16, s14, s15
 80008c8:	ed97 0a02 	vldr	s0, [r7, #8]
 80008cc:	f006 fd50 	bl	8007370 <cosf>
 80008d0:	eef0 7a40 	vmov.f32	s15, s0
 80008d4:	ee28 8a27 	vmul.f32	s16, s16, s15
 80008d8:	ed97 7a04 	vldr	s14, [r7, #16]
 80008dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80008e0:	eec7 8a27 	vdiv.f32	s17, s14, s15
 80008e4:	ed97 0a02 	vldr	s0, [r7, #8]
 80008e8:	f006 fc7e 	bl	80071e8 <sinf>
 80008ec:	eef0 7a40 	vmov.f32	s15, s0
 80008f0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80008f4:	ee78 7a67 	vsub.f32	s15, s16, s15
 80008f8:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
  float beta = (vd/vDC)*sinf(theta_e) + (vq/vDC)*cosf(theta_e);              // Beta(Q) = d*sin(Fi) + q*cos(Fi)
 80008fc:	ed97 7a05 	vldr	s14, [r7, #20]
 8000900:	edd7 7a03 	vldr	s15, [r7, #12]
 8000904:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8000908:	ed97 0a02 	vldr	s0, [r7, #8]
 800090c:	f006 fc6c 	bl	80071e8 <sinf>
 8000910:	eef0 7a40 	vmov.f32	s15, s0
 8000914:	ee28 8a27 	vmul.f32	s16, s16, s15
 8000918:	ed97 7a04 	vldr	s14, [r7, #16]
 800091c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000920:	eec7 8a27 	vdiv.f32	s17, s14, s15
 8000924:	ed97 0a02 	vldr	s0, [r7, #8]
 8000928:	f006 fd22 	bl	8007370 <cosf>
 800092c:	eef0 7a40 	vmov.f32	s15, s0
 8000930:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8000934:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000938:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30


  svpwm_struct svpwm;

  // Assign values to SVPWM structure, works with alpha/beta not a/b/c
  svpwm.alpha = alpha;
 800093c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800093e:	61bb      	str	r3, [r7, #24]
  svpwm.beta = beta;
 8000940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000942:	61fb      	str	r3, [r7, #28]
  svpwm_calc(&svpwm);
 8000944:	f107 0318 	add.w	r3, r7, #24
 8000948:	4618      	mov	r0, r3
 800094a:	f006 ffc1 	bl	80078d0 <svpwm_calc>

  // Assign SVPWM duties (0 to 1, high side)
  duties->Da = svpwm.Da;
 800094e:	6a3a      	ldr	r2, [r7, #32]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	601a      	str	r2, [r3, #0]
  duties->Db = svpwm.Db;
 8000954:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	605a      	str	r2, [r3, #4]
  duties->Dc = svpwm.Dc;
 800095a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	609a      	str	r2, [r3, #8]

}
 8000960:	bf00      	nop
 8000962:	3738      	adds	r7, #56	@ 0x38
 8000964:	46bd      	mov	sp, r7
 8000966:	ecbd 8b02 	vpop	{d8}
 800096a:	bd80      	pop	{r7, pc}

0800096c <eval_inv_FSM>:
 *
 * This function executes the finite state machine to control the inverter based on its current state.
 *
 * @param inv Pointer to the inverter structure.
 */
void eval_inv_FSM(volatile inverterStruct *inv) {
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
    switch (inv->state) {
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	7d1b      	ldrb	r3, [r3, #20]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	2b03      	cmp	r3, #3
 800097c:	d81a      	bhi.n	80009b4 <eval_inv_FSM+0x48>
 800097e:	a201      	add	r2, pc, #4	@ (adr r2, 8000984 <eval_inv_FSM+0x18>)
 8000980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000984:	08000995 	.word	0x08000995
 8000988:	0800099d 	.word	0x0800099d
 800098c:	080009a5 	.word	0x080009a5
 8000990:	080009ad 	.word	0x080009ad
        case INV_STATE_IDLE:
        	handle_idle(inv);
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f000 f813 	bl	80009c0 <handle_idle>
            break;
 800099a:	e00c      	b.n	80009b6 <eval_inv_FSM+0x4a>
        case INV_STATE_STARTUP:
        	handle_startup(inv);
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f000 f829 	bl	80009f4 <handle_startup>
            break;
 80009a2:	e008      	b.n	80009b6 <eval_inv_FSM+0x4a>
        case INV_STATE_RUNNING:
        	handle_running(inv);
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f000 f83f 	bl	8000a28 <handle_running>
            break;
 80009aa:	e004      	b.n	80009b6 <eval_inv_FSM+0x4a>
        case INV_STATE_FAULT:
        	handle_fault(inv);
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f000 f855 	bl	8000a5c <handle_fault>
            break;
 80009b2:	e000      	b.n	80009b6 <eval_inv_FSM+0x4a>
        default:
            // Invalid state, handle error
            break;
 80009b4:	bf00      	nop
    }
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop

080009c0 <handle_idle>:
 *
 * This function handles the actions and transitions for the idle state of the inverter.
 *
 * @param inv Pointer to the inverter structure.
 */
void handle_idle(volatile inverterStruct *inv) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
    // Perform actions required in idle state
    // Transition conditions to other states:
    // - Start startup sequence based on input condition
    // - Transition to fault state based on error conditions
    inv->led->mode = LED_MODE_OFF;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2203      	movs	r2, #3
 80009ce:	719a      	strb	r2, [r3, #6]
    DISABLE(inv->enable_port, inv->enable_pin);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6858      	ldr	r0, [r3, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	891b      	ldrh	r3, [r3, #8]
 80009d8:	b29b      	uxth	r3, r3
 80009da:	2200      	movs	r2, #0
 80009dc:	4619      	mov	r1, r3
 80009de:	f003 fd55 	bl	800448c <HAL_GPIO_WritePin>
    disable_PWM(inv->htim);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	68db      	ldr	r3, [r3, #12]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 f9c2 	bl	8000d70 <disable_PWM>

}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <handle_startup>:
 *
 * This function handles the actions and transitions for the startup state of the inverter.
 *
 * @param inv Pointer to the inverter structure.
 */
void handle_startup(volatile inverterStruct *inv) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
    // Perform actions required in startup state
    // Transition conditions to other states:
    // - Transition to running state when startup sequence completes successfully
    // - Transition to fault state based on error conditions during startup
    inv->led->mode = LED_MODE_BLINK_FAST;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2200      	movs	r2, #0
 8000a02:	719a      	strb	r2, [r3, #6]
    DISABLE(inv->enable_port, inv->enable_pin);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6858      	ldr	r0, [r3, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	891b      	ldrh	r3, [r3, #8]
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	2200      	movs	r2, #0
 8000a10:	4619      	mov	r1, r3
 8000a12:	f003 fd3b 	bl	800448c <HAL_GPIO_WritePin>
    enable_PWM(inv->htim);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	68db      	ldr	r3, [r3, #12]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 f982 	bl	8000d24 <enable_PWM>

}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <handle_running>:
 *
 * This function handles the actions and transitions for the running state of the inverter.
 *
 * @param inv Pointer to the inverter structure.
 */
void handle_running(volatile inverterStruct *inv) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
    // Perform actions required in running state
    // This is where the main control loop resides
    // Monitor inverter variables, adjust control parameters, etc.
    // Transition conditions to other states:
    // - Transition to fault state based on error conditions during operation
    inv->led->mode = LED_MODE_ON;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2202      	movs	r2, #2
 8000a36:	719a      	strb	r2, [r3, #6]
    ENABLE(inv->enable_port, inv->enable_pin);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	6858      	ldr	r0, [r3, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	891b      	ldrh	r3, [r3, #8]
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	2201      	movs	r2, #1
 8000a44:	4619      	mov	r1, r3
 8000a46:	f003 fd21 	bl	800448c <HAL_GPIO_WritePin>
    enable_PWM(inv->htim);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	68db      	ldr	r3, [r3, #12]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 f968 	bl	8000d24 <enable_PWM>

}
 8000a54:	bf00      	nop
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <handle_fault>:
 *
 * This function handles the actions and transitions for the fault state of the inverter.
 *
 * @param inv Pointer to the inverter structure.
 */
void handle_fault(volatile inverterStruct *inv) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
    // Perform actions required in fault state
    // This could involve shutting down the inverter, logging error messages, etc.
    // Transition conditions to other states:
    // - Retry startup sequence after a delay if fault condition is recoverable
    // - Transition to idle state after fault is resolved
    inv->led->mode = LED_MODE_BLINK_SLOW;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2201      	movs	r2, #1
 8000a6a:	719a      	strb	r2, [r3, #6]
    DISABLE(inv->enable_port, inv->enable_pin);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6858      	ldr	r0, [r3, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	891b      	ldrh	r3, [r3, #8]
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	2200      	movs	r2, #0
 8000a78:	4619      	mov	r1, r3
 8000a7a:	f003 fd07 	bl	800448c <HAL_GPIO_WritePin>
    disable_PWM(inv->htim);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	68db      	ldr	r3, [r3, #12]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 f974 	bl	8000d70 <disable_PWM>
}
 8000a88:	bf00      	nop
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <initialize_inverter>:
 * @param enable_port Pointer to the GPIO port for enabling/disabling the inverter.
 * @param enable_pin Pin number for enabling/disabling the inverter.
 * @param htim Timer peripheral for the PWM output.
 * @param hadc ADC peripheral for the current phase current and DC voltage sensing.
 */
void initialize_inverter(volatile inverterStruct *inv, LED *led, GPIO_TypeDef *enable_port, uint16_t enable_pin, TIM_HandleTypeDef *htim, ADC_HandleTypeDef *hadc) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
 8000a9c:	807b      	strh	r3, [r7, #2]
    // Initialize inverter structure
    inv->state = INV_STATE_STARTUP;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	751a      	strb	r2, [r3, #20]
    inv->led = led;
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	68ba      	ldr	r2, [r7, #8]
 8000aa8:	601a      	str	r2, [r3, #0]
    inv->enable_pin = enable_pin;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	887a      	ldrh	r2, [r7, #2]
 8000aae:	811a      	strh	r2, [r3, #8]
    inv->enable_port = enable_port;
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	605a      	str	r2, [r3, #4]
    inv->htim = htim;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	69ba      	ldr	r2, [r7, #24]
 8000aba:	60da      	str	r2, [r3, #12]
    inv->hadc = hadc;
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	69fa      	ldr	r2, [r7, #28]
 8000ac0:	611a      	str	r2, [r3, #16]
    inv->duties.Da = 0.5;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8000ac8:	64da      	str	r2, [r3, #76]	@ 0x4c
    inv->duties.Db = 0.5;
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8000ad0:	651a      	str	r2, [r3, #80]	@ 0x50
    inv->duties.Dc = 0.5;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8000ad8:	655a      	str	r2, [r3, #84]	@ 0x54

    HAL_TIM_Base_Start_IT(inv->htim);
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f004 ff46 	bl	8005970 <HAL_TIM_Base_Start_IT>

}
 8000ae4:	bf00      	nop
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <get_currents_voltage>:
  * @brief  Get electrical ADC measurements.
  * @param[in]  ADC_raw Pointer to the raw ADC values array.
  * @param[out]  analog Pointer to the ADC struct to store the results.
  * @retval OK 0 if an error occurred, 1 if successful.
  */
uint8_t get_currents_voltage(volatile uint32_t ADC_raw[], volatile Analog* analog) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	6039      	str	r1, [r7, #0]

    // Calculate currents and voltage
    float ia = get_linear(ADC_raw[0], CURRENT_SLOPE, CURRENT_OFFSET);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 8000b78 <get_currents_voltage+0x8c>
 8000afe:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8000b7c <get_currents_voltage+0x90>
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 f840 	bl	8000b88 <get_linear>
 8000b08:	ed87 0a05 	vstr	s0, [r7, #20]
    float ib = get_linear(ADC_raw[1], CURRENT_SLOPE, CURRENT_OFFSET);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3304      	adds	r3, #4
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	eddf 0a19 	vldr	s1, [pc, #100]	@ 8000b78 <get_currents_voltage+0x8c>
 8000b16:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8000b7c <get_currents_voltage+0x90>
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 f834 	bl	8000b88 <get_linear>
 8000b20:	ed87 0a04 	vstr	s0, [r7, #16]
    float ic = get_linear(ADC_raw[2], CURRENT_SLOPE, CURRENT_OFFSET);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3308      	adds	r3, #8
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8000b78 <get_currents_voltage+0x8c>
 8000b2e:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8000b7c <get_currents_voltage+0x90>
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 f828 	bl	8000b88 <get_linear>
 8000b38:	ed87 0a03 	vstr	s0, [r7, #12]
    float vDC = get_linear(ADC_raw[3], VOLTAGE_SLOPE, VOLTAGE_OFFSET);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	330c      	adds	r3, #12
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 8000b80 <get_currents_voltage+0x94>
 8000b46:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8000b84 <get_currents_voltage+0x98>
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 f81c 	bl	8000b88 <get_linear>
 8000b50:	ed87 0a02 	vstr	s0, [r7, #8]

    // Store the measurements
    analog->ia = ia;
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	697a      	ldr	r2, [r7, #20]
 8000b58:	601a      	str	r2, [r3, #0]
    analog->ib = ib;
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	605a      	str	r2, [r3, #4]
    analog->ic = ic;
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	68fa      	ldr	r2, [r7, #12]
 8000b64:	609a      	str	r2, [r3, #8]
    analog->vDC = vDC;
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	68ba      	ldr	r2, [r7, #8]
 8000b6a:	60da      	str	r2, [r3, #12]

    return 1; // Success
 8000b6c:	2301      	movs	r3, #1
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	3fd9afe4 	.word	0x3fd9afe4
 8000b7c:	4259afe4 	.word	0x4259afe4
 8000b80:	3caaa3ad 	.word	0x3caaa3ad
 8000b84:	4383b7ae 	.word	0x4383b7ae

08000b88 <get_linear>:
  * @param[in]  bits The ADC reading.
  * @param[in]  slope The slope (units per volt).
  * @param[in]  offset The offset (volts at zero).
  * @retval measurement The physical measurement.
  */
float get_linear(uint32_t bits, float slope, float offset) {
 8000b88:	b480      	push	{r7}
 8000b8a:	b087      	sub	sp, #28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	ed87 0a02 	vstr	s0, [r7, #8]
 8000b94:	edc7 0a01 	vstr	s1, [r7, #4]
    // Convert ADC reading to voltage
    float voltage = (float) bits * 0.0008058608f; // Assuming 12-bit ADC and 3.3V reference (bits * (3.3 V / 4095.0 bits))
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	ee07 3a90 	vmov	s15, r3
 8000b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ba2:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000bdc <get_linear+0x54>
 8000ba6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000baa:	edc7 7a05 	vstr	s15, [r7, #20]

    // Convert voltage to physical measurement
    float measurement = (voltage - offset) * slope;
 8000bae:	ed97 7a05 	vldr	s14, [r7, #20]
 8000bb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bba:	ed97 7a02 	vldr	s14, [r7, #8]
 8000bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bc2:	edc7 7a04 	vstr	s15, [r7, #16]

    return measurement;
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	ee07 3a90 	vmov	s15, r3
}
 8000bcc:	eeb0 0a67 	vmov.f32	s0, s15
 8000bd0:	371c      	adds	r7, #28
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	3a534067 	.word	0x3a534067

08000be0 <get_temperature>:
 *
 * @param[in] bits ADC reading converted to bits.
 * @param[in] tempLUT Lookup table containing temperature values.
 * @return Temperature corresponding to the provided ADC bits.
 */
float get_temperature(uint32_t bits, const float tempLUT[]){
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
    return tempLUT[bits];
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	683a      	ldr	r2, [r7, #0]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	ee07 3a90 	vmov	s15, r3
}
 8000bf8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
	...

08000c08 <handle_LED>:
 * This function handles the LED blinking modes based on the LED mode and current millisecond counter.
 *
 * @param led Pointer to the LED structure.
 * @param ms_counter Current millisecond counter.
 */
void handle_LED(LED *led, uint32_t ms_counter) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
    switch (led->mode) {
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	799b      	ldrb	r3, [r3, #6]
 8000c16:	2b03      	cmp	r3, #3
 8000c18:	d858      	bhi.n	8000ccc <handle_LED+0xc4>
 8000c1a:	a201      	add	r2, pc, #4	@ (adr r2, 8000c20 <handle_LED+0x18>)
 8000c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c20:	08000c31 	.word	0x08000c31
 8000c24:	08000c6b 	.word	0x08000c6b
 8000c28:	08000ca9 	.word	0x08000ca9
 8000c2c:	08000cbb 	.word	0x08000cbb
        case LED_MODE_BLINK_FAST:
            if (ms_counter % 200 < 100) {
 8000c30:	683a      	ldr	r2, [r7, #0]
 8000c32:	4b29      	ldr	r3, [pc, #164]	@ (8000cd8 <handle_LED+0xd0>)
 8000c34:	fba3 1302 	umull	r1, r3, r3, r2
 8000c38:	099b      	lsrs	r3, r3, #6
 8000c3a:	21c8      	movs	r1, #200	@ 0xc8
 8000c3c:	fb01 f303 	mul.w	r3, r1, r3
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	2b63      	cmp	r3, #99	@ 0x63
 8000c44:	d808      	bhi.n	8000c58 <handle_LED+0x50>
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_SET);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6818      	ldr	r0, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	889b      	ldrh	r3, [r3, #4]
 8000c4e:	2201      	movs	r2, #1
 8000c50:	4619      	mov	r1, r3
 8000c52:	f003 fc1b 	bl	800448c <HAL_GPIO_WritePin>
            } else {
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
            }
            break;
 8000c56:	e03a      	b.n	8000cce <handle_LED+0xc6>
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6818      	ldr	r0, [r3, #0]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	889b      	ldrh	r3, [r3, #4]
 8000c60:	2200      	movs	r2, #0
 8000c62:	4619      	mov	r1, r3
 8000c64:	f003 fc12 	bl	800448c <HAL_GPIO_WritePin>
            break;
 8000c68:	e031      	b.n	8000cce <handle_LED+0xc6>
        case LED_MODE_BLINK_SLOW:
            if (ms_counter % 1000 < 500) {
 8000c6a:	683a      	ldr	r2, [r7, #0]
 8000c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cdc <handle_LED+0xd4>)
 8000c6e:	fba3 1302 	umull	r1, r3, r3, r2
 8000c72:	099b      	lsrs	r3, r3, #6
 8000c74:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000c78:	fb01 f303 	mul.w	r3, r1, r3
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000c82:	d208      	bcs.n	8000c96 <handle_LED+0x8e>
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_SET);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6818      	ldr	r0, [r3, #0]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	889b      	ldrh	r3, [r3, #4]
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	4619      	mov	r1, r3
 8000c90:	f003 fbfc 	bl	800448c <HAL_GPIO_WritePin>
            } else {
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
            }
            break;
 8000c94:	e01b      	b.n	8000cce <handle_LED+0xc6>
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6818      	ldr	r0, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	889b      	ldrh	r3, [r3, #4]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f003 fbf3 	bl	800448c <HAL_GPIO_WritePin>
            break;
 8000ca6:	e012      	b.n	8000cce <handle_LED+0xc6>
        case LED_MODE_ON:
            HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_SET);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6818      	ldr	r0, [r3, #0]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	889b      	ldrh	r3, [r3, #4]
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	f003 fbea 	bl	800448c <HAL_GPIO_WritePin>
            break;
 8000cb8:	e009      	b.n	8000cce <handle_LED+0xc6>
        case LED_MODE_OFF:
            HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6818      	ldr	r0, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	889b      	ldrh	r3, [r3, #4]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f003 fbe1 	bl	800448c <HAL_GPIO_WritePin>
            break;
 8000cca:	e000      	b.n	8000cce <handle_LED+0xc6>
        default:
            // Invalid LED mode
            break;
 8000ccc:	bf00      	nop
    }
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	51eb851f 	.word	0x51eb851f
 8000cdc:	10624dd3 	.word	0x10624dd3

08000ce0 <handle_direction>:
 * and vice versa.
 *
 * @param invLeft Pointer to the left inverter structure.
 * @param invRight Pointer to the right inverter structure.
 */
void handle_direction(volatile int8_t *dirLeft, volatile int8_t *dirRight){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
	// Read the state of the DIR switch
    GPIO_PinState dirState = HAL_GPIO_ReadPin(DIR_GPIO_Port, DIR_Pin);
 8000cea:	2108      	movs	r1, #8
 8000cec:	480c      	ldr	r0, [pc, #48]	@ (8000d20 <handle_direction+0x40>)
 8000cee:	f003 fbb5 	bl	800445c <HAL_GPIO_ReadPin>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	73fb      	strb	r3, [r7, #15]

    // Update the directions of the inverters based on the DIR switch state
    if (dirState == GPIO_PIN_SET) {
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d106      	bne.n	8000d0a <handle_direction+0x2a>
    	*dirLeft = 1;  // CW
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2201      	movs	r2, #1
 8000d00:	701a      	strb	r2, [r3, #0]
    	*dirRight = -1;  // CCW
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	22ff      	movs	r2, #255	@ 0xff
 8000d06:	701a      	strb	r2, [r3, #0]
    } else {
    	*dirLeft = -1;  // CCW
    	*dirRight = 1;  // CW
    }
}
 8000d08:	e005      	b.n	8000d16 <handle_direction+0x36>
    	*dirLeft = -1;  // CCW
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	22ff      	movs	r2, #255	@ 0xff
 8000d0e:	701a      	strb	r2, [r3, #0]
    	*dirRight = 1;  // CW
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	2201      	movs	r2, #1
 8000d14:	701a      	strb	r2, [r3, #0]
}
 8000d16:	bf00      	nop
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40020c00 	.word	0x40020c00

08000d24 <enable_PWM>:
 *
 * This function enables PWM output for the specified timer.
 *
 * @param htim Pointer to the TIM_HandleTypeDef structure.
 */
void enable_PWM(TIM_HandleTypeDef *htim) {
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]

//	Reset the counter
//	htim->Instance->CNT=0;
	htim->Instance->CCMR1 = 0x6868; // Set Channel 1 and Channel 2 Output Compare mode to PWM Mode
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f646 0268 	movw	r2, #26728	@ 0x6868
 8000d34:	619a      	str	r2, [r3, #24]

//	htim1.Instance->CCER = 0x888;
	htim->Instance->CCER = 0x10555;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a0c      	ldr	r2, [pc, #48]	@ (8000d6c <enable_PWM+0x48>)
 8000d3c:	621a      	str	r2, [r3, #32]

//	Enable Main Output
	htim->Instance->BDTR |=(1<<15);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000d4c:	645a      	str	r2, [r3, #68]	@ 0x44

//	Enable Counter
	htim->Instance->CR1 |=1;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f042 0201 	orr.w	r2, r2, #1
 8000d5c:	601a      	str	r2, [r3, #0]

}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	00010555 	.word	0x00010555

08000d70 <disable_PWM>:
 *
 * This function disables PWM output for the specified timer.
 *
 * @param htim Pointer to the TIM_HandleTypeDef structure.
 */
void disable_PWM(TIM_HandleTypeDef *htim) {
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]

	//Disable outputs and select the polarity of each output
	htim->Instance->CNT=0;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	625a      	str	r2, [r3, #36]	@ 0x24


	htim->Instance->CCER = 0xCCC;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f640 42cc 	movw	r2, #3276	@ 0xccc
 8000d88:	621a      	str	r2, [r3, #32]
	//	htim1.Instance->CCER |= 0x555;

		//Disable Main Output
	htim->Instance->BDTR &= 0xFFFF7FFF;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000d98:	645a      	str	r2, [r3, #68]	@ 0x44
	//	htim1.Instance->BDTR &=(0<<15);
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <update_PWM>:
 * This function sets the duty cycles for the PWM channels.
 *
 * @param htim Pointer to the TIM_HandleTypeDef structure.
 * @param duties Duties structure containing duty cycle values.
 */
void update_PWM(TIM_HandleTypeDef *htim, Duties duties) {
 8000da6:	b480      	push	{r7}
 8000da8:	b085      	sub	sp, #20
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	60f8      	str	r0, [r7, #12]
 8000dae:	eef0 6a40 	vmov.f32	s13, s0
 8000db2:	eeb0 7a60 	vmov.f32	s14, s1
 8000db6:	eef0 7a41 	vmov.f32	s15, s2
 8000dba:	edc7 6a00 	vstr	s13, [r7]
 8000dbe:	ed87 7a01 	vstr	s14, [r7, #4]
 8000dc2:	edc7 7a02 	vstr	s15, [r7, #8]


	htim->Instance->CCR1 = ((int32_t)(htim->Instance->ARR) * (1.0F-duties.Da));
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dcc:	ee07 3a90 	vmov	s15, r3
 8000dd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dd4:	edd7 7a00 	vldr	s15, [r7]
 8000dd8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000ddc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dec:	ee17 2a90 	vmov	r2, s15
 8000df0:	635a      	str	r2, [r3, #52]	@ 0x34
	htim->Instance->CCR2 = ((int32_t)(htim->Instance->ARR) * (1.0F-duties.Db));
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000df8:	ee07 3a90 	vmov	s15, r3
 8000dfc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e00:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000e08:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000e0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e18:	ee17 2a90 	vmov	r2, s15
 8000e1c:	639a      	str	r2, [r3, #56]	@ 0x38
	htim->Instance->CCR3 = ((int32_t)(htim->Instance->ARR) * (1.0F-duties.Dc));
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e24:	ee07 3a90 	vmov	s15, r3
 8000e28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e30:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000e34:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000e38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e44:	ee17 2a90 	vmov	r2, s15
 8000e48:	63da      	str	r2, [r3, #60]	@ 0x3c

}
 8000e4a:	bf00      	nop
 8000e4c:	3714      	adds	r7, #20
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
	...

08000e58 <tasks_1ms>:
 *
 * This function is called by the TIM6 IRQ handler every millisecond.
 * It increments the millisecond counter and calls the LED handler
 * for left, right, and error LEDs.
 */
void tasks_1ms(void) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
    // Increment millisecond counter
    ms_counter++;
 8000e5c:	4b24      	ldr	r3, [pc, #144]	@ (8000ef0 <tasks_1ms+0x98>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	3301      	adds	r3, #1
 8000e62:	4a23      	ldr	r2, [pc, #140]	@ (8000ef0 <tasks_1ms+0x98>)
 8000e64:	6013      	str	r3, [r2, #0]

    // Call LED handler for left, right, and error LEDs
    handle_LED(&ledLeft, ms_counter);
 8000e66:	4b22      	ldr	r3, [pc, #136]	@ (8000ef0 <tasks_1ms+0x98>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4821      	ldr	r0, [pc, #132]	@ (8000ef4 <tasks_1ms+0x9c>)
 8000e6e:	f7ff fecb 	bl	8000c08 <handle_LED>
    handle_LED(&ledRight, ms_counter);
 8000e72:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef0 <tasks_1ms+0x98>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4619      	mov	r1, r3
 8000e78:	481f      	ldr	r0, [pc, #124]	@ (8000ef8 <tasks_1ms+0xa0>)
 8000e7a:	f7ff fec5 	bl	8000c08 <handle_LED>
    handle_LED(&ledError, ms_counter);
 8000e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef0 <tasks_1ms+0x98>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4619      	mov	r1, r3
 8000e84:	481d      	ldr	r0, [pc, #116]	@ (8000efc <tasks_1ms+0xa4>)
 8000e86:	f7ff febf 	bl	8000c08 <handle_LED>

    // Read direction switch
    handle_direction(&inverter_left.direction, &inverter_right.direction);
 8000e8a:	491d      	ldr	r1, [pc, #116]	@ (8000f00 <tasks_1ms+0xa8>)
 8000e8c:	481d      	ldr	r0, [pc, #116]	@ (8000f04 <tasks_1ms+0xac>)
 8000e8e:	f7ff ff27 	bl	8000ce0 <handle_direction>

    inverter_left.temp_inverter = get_temperature(rawADC_temp[0], tempLUT_inverter);
 8000e92:	4b1d      	ldr	r3, [pc, #116]	@ (8000f08 <tasks_1ms+0xb0>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	491d      	ldr	r1, [pc, #116]	@ (8000f0c <tasks_1ms+0xb4>)
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fea1 	bl	8000be0 <get_temperature>
 8000e9e:	eef0 7a40 	vmov.f32	s15, s0
 8000ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f10 <tasks_1ms+0xb8>)
 8000ea4:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
    inverter_right.temp_inverter = get_temperature(rawADC_temp[1], tempLUT_inverter);
 8000ea8:	4b17      	ldr	r3, [pc, #92]	@ (8000f08 <tasks_1ms+0xb0>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	4917      	ldr	r1, [pc, #92]	@ (8000f0c <tasks_1ms+0xb4>)
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff fe96 	bl	8000be0 <get_temperature>
 8000eb4:	eef0 7a40 	vmov.f32	s15, s0
 8000eb8:	4b16      	ldr	r3, [pc, #88]	@ (8000f14 <tasks_1ms+0xbc>)
 8000eba:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
    inverter_left.temp_motor = get_temperature(rawADC_temp[2], tempLUT_motor);
 8000ebe:	4b12      	ldr	r3, [pc, #72]	@ (8000f08 <tasks_1ms+0xb0>)
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	4915      	ldr	r1, [pc, #84]	@ (8000f18 <tasks_1ms+0xc0>)
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fe8b 	bl	8000be0 <get_temperature>
 8000eca:	eef0 7a40 	vmov.f32	s15, s0
 8000ece:	4b10      	ldr	r3, [pc, #64]	@ (8000f10 <tasks_1ms+0xb8>)
 8000ed0:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
    inverter_right.temp_motor = get_temperature(rawADC_temp[3], tempLUT_motor);
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f08 <tasks_1ms+0xb0>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	490f      	ldr	r1, [pc, #60]	@ (8000f18 <tasks_1ms+0xc0>)
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fe80 	bl	8000be0 <get_temperature>
 8000ee0:	eef0 7a40 	vmov.f32	s15, s0
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f14 <tasks_1ms+0xbc>)
 8000ee6:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	200001a0 	.word	0x200001a0
 8000ef4:	20000000 	.word	0x20000000
 8000ef8:	20000008 	.word	0x20000008
 8000efc:	20000010 	.word	0x20000010
 8000f00:	20000164 	.word	0x20000164
 8000f04:	20000100 	.word	0x20000100
 8000f08:	20000190 	.word	0x20000190
 8000f0c:	08007d70 	.word	0x08007d70
 8000f10:	200000a8 	.word	0x200000a8
 8000f14:	2000010c 	.word	0x2000010c
 8000f18:	0800bd70 	.word	0x0800bd70

08000f1c <tasks_20us_left>:
/**
 * @brief Function to be executed every TS.
 *
 * This function is called by the TIM1 trigger handler every TS.
 */
void tasks_20us_left(void){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0


  angle_calc(&angle_left);
 8000f20:	481d      	ldr	r0, [pc, #116]	@ (8000f98 <tasks_20us_left+0x7c>)
 8000f22:	f006 fca1 	bl	8007868 <angle_calc>

  inverter_left.encoder.theta_e = angle_left.angle*PI;
 8000f26:	4b1c      	ldr	r3, [pc, #112]	@ (8000f98 <tasks_20us_left+0x7c>)
 8000f28:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f2c:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8000f9c <tasks_20us_left+0x80>
 8000f30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f34:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa0 <tasks_20us_left+0x84>)
 8000f36:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

  get_currents_voltage(rawADC_left, &inverter_left.analog);
 8000f3a:	491a      	ldr	r1, [pc, #104]	@ (8000fa4 <tasks_20us_left+0x88>)
 8000f3c:	481a      	ldr	r0, [pc, #104]	@ (8000fa8 <tasks_20us_left+0x8c>)
 8000f3e:	f7ff fdd5 	bl	8000aec <get_currents_voltage>

  calc_duties(vd_left, vq_left, vDC_left, inverter_left.encoder.theta_e, &inverter_left.duties);
 8000f42:	4b1a      	ldr	r3, [pc, #104]	@ (8000fac <tasks_20us_left+0x90>)
 8000f44:	edd3 7a00 	vldr	s15, [r3]
 8000f48:	4b19      	ldr	r3, [pc, #100]	@ (8000fb0 <tasks_20us_left+0x94>)
 8000f4a:	ed93 7a00 	vldr	s14, [r3]
 8000f4e:	4b19      	ldr	r3, [pc, #100]	@ (8000fb4 <tasks_20us_left+0x98>)
 8000f50:	edd3 6a00 	vldr	s13, [r3]
 8000f54:	4b12      	ldr	r3, [pc, #72]	@ (8000fa0 <tasks_20us_left+0x84>)
 8000f56:	ed93 6a0d 	vldr	s12, [r3, #52]	@ 0x34
 8000f5a:	4817      	ldr	r0, [pc, #92]	@ (8000fb8 <tasks_20us_left+0x9c>)
 8000f5c:	eef0 1a46 	vmov.f32	s3, s12
 8000f60:	eeb0 1a66 	vmov.f32	s2, s13
 8000f64:	eef0 0a47 	vmov.f32	s1, s14
 8000f68:	eeb0 0a67 	vmov.f32	s0, s15
 8000f6c:	f7ff fc98 	bl	80008a0 <calc_duties>

  update_PWM(inverter_left.htim, inverter_left.duties);
 8000f70:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa0 <tasks_20us_left+0x84>)
 8000f72:	68da      	ldr	r2, [r3, #12]
 8000f74:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa0 <tasks_20us_left+0x84>)
 8000f76:	edd3 6a13 	vldr	s13, [r3, #76]	@ 0x4c
 8000f7a:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8000f7e:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8000f82:	eeb0 0a66 	vmov.f32	s0, s13
 8000f86:	eef0 0a47 	vmov.f32	s1, s14
 8000f8a:	eeb0 1a67 	vmov.f32	s2, s15
 8000f8e:	4610      	mov	r0, r2
 8000f90:	f7ff ff09 	bl	8000da6 <update_PWM>

}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000020 	.word	0x20000020
 8000f9c:	40490fdb 	.word	0x40490fdb
 8000fa0:	200000a8 	.word	0x200000a8
 8000fa4:	200000c0 	.word	0x200000c0
 8000fa8:	20000170 	.word	0x20000170
 8000fac:	200001a4 	.word	0x200001a4
 8000fb0:	20000018 	.word	0x20000018
 8000fb4:	2000001c 	.word	0x2000001c
 8000fb8:	200000f4 	.word	0x200000f4

08000fbc <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fc2:	463b      	mov	r3, r7
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fce:	4b37      	ldr	r3, [pc, #220]	@ (80010ac <MX_ADC1_Init+0xf0>)
 8000fd0:	4a37      	ldr	r2, [pc, #220]	@ (80010b0 <MX_ADC1_Init+0xf4>)
 8000fd2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fd4:	4b35      	ldr	r3, [pc, #212]	@ (80010ac <MX_ADC1_Init+0xf0>)
 8000fd6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000fda:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fdc:	4b33      	ldr	r3, [pc, #204]	@ (80010ac <MX_ADC1_Init+0xf0>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000fe2:	4b32      	ldr	r3, [pc, #200]	@ (80010ac <MX_ADC1_Init+0xf0>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fe8:	4b30      	ldr	r3, [pc, #192]	@ (80010ac <MX_ADC1_Init+0xf0>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fee:	4b2f      	ldr	r3, [pc, #188]	@ (80010ac <MX_ADC1_Init+0xf0>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ff6:	4b2d      	ldr	r3, [pc, #180]	@ (80010ac <MX_ADC1_Init+0xf0>)
 8000ff8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000ffc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000ffe:	4b2b      	ldr	r3, [pc, #172]	@ (80010ac <MX_ADC1_Init+0xf0>)
 8001000:	f04f 6210 	mov.w	r2, #150994944	@ 0x9000000
 8001004:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001006:	4b29      	ldr	r3, [pc, #164]	@ (80010ac <MX_ADC1_Init+0xf0>)
 8001008:	2200      	movs	r2, #0
 800100a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800100c:	4b27      	ldr	r3, [pc, #156]	@ (80010ac <MX_ADC1_Init+0xf0>)
 800100e:	2204      	movs	r2, #4
 8001010:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001012:	4b26      	ldr	r3, [pc, #152]	@ (80010ac <MX_ADC1_Init+0xf0>)
 8001014:	2201      	movs	r2, #1
 8001016:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800101a:	4b24      	ldr	r3, [pc, #144]	@ (80010ac <MX_ADC1_Init+0xf0>)
 800101c:	2200      	movs	r2, #0
 800101e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001020:	4822      	ldr	r0, [pc, #136]	@ (80010ac <MX_ADC1_Init+0xf0>)
 8001022:	f001 fba5 	bl	8002770 <HAL_ADC_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800102c:	f000 fe50 	bl	8001cd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001030:	2300      	movs	r3, #0
 8001032:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001034:	2301      	movs	r3, #1
 8001036:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001038:	2300      	movs	r3, #0
 800103a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800103c:	463b      	mov	r3, r7
 800103e:	4619      	mov	r1, r3
 8001040:	481a      	ldr	r0, [pc, #104]	@ (80010ac <MX_ADC1_Init+0xf0>)
 8001042:	f001 fcf1 	bl	8002a28 <HAL_ADC_ConfigChannel>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800104c:	f000 fe40 	bl	8001cd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001050:	2301      	movs	r3, #1
 8001052:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001054:	2302      	movs	r3, #2
 8001056:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001058:	463b      	mov	r3, r7
 800105a:	4619      	mov	r1, r3
 800105c:	4813      	ldr	r0, [pc, #76]	@ (80010ac <MX_ADC1_Init+0xf0>)
 800105e:	f001 fce3 	bl	8002a28 <HAL_ADC_ConfigChannel>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001068:	f000 fe32 	bl	8001cd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800106c:	2302      	movs	r3, #2
 800106e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001070:	2303      	movs	r3, #3
 8001072:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001074:	463b      	mov	r3, r7
 8001076:	4619      	mov	r1, r3
 8001078:	480c      	ldr	r0, [pc, #48]	@ (80010ac <MX_ADC1_Init+0xf0>)
 800107a:	f001 fcd5 	bl	8002a28 <HAL_ADC_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001084:	f000 fe24 	bl	8001cd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001088:	2303      	movs	r3, #3
 800108a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800108c:	2304      	movs	r3, #4
 800108e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001090:	463b      	mov	r3, r7
 8001092:	4619      	mov	r1, r3
 8001094:	4805      	ldr	r0, [pc, #20]	@ (80010ac <MX_ADC1_Init+0xf0>)
 8001096:	f001 fcc7 	bl	8002a28 <HAL_ADC_ConfigChannel>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 80010a0:	f000 fe16 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	200001a8 	.word	0x200001a8
 80010b0:	40012000 	.word	0x40012000

080010b4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ba:	463b      	mov	r3, r7
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80010c6:	4b37      	ldr	r3, [pc, #220]	@ (80011a4 <MX_ADC2_Init+0xf0>)
 80010c8:	4a37      	ldr	r2, [pc, #220]	@ (80011a8 <MX_ADC2_Init+0xf4>)
 80010ca:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010cc:	4b35      	ldr	r3, [pc, #212]	@ (80011a4 <MX_ADC2_Init+0xf0>)
 80010ce:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80010d2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80010d4:	4b33      	ldr	r3, [pc, #204]	@ (80011a4 <MX_ADC2_Init+0xf0>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010da:	4b32      	ldr	r3, [pc, #200]	@ (80011a4 <MX_ADC2_Init+0xf0>)
 80010dc:	2201      	movs	r2, #1
 80010de:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80010e0:	4b30      	ldr	r3, [pc, #192]	@ (80011a4 <MX_ADC2_Init+0xf0>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010e6:	4b2f      	ldr	r3, [pc, #188]	@ (80011a4 <MX_ADC2_Init+0xf0>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010ee:	4b2d      	ldr	r3, [pc, #180]	@ (80011a4 <MX_ADC2_Init+0xf0>)
 80010f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80010f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 80010f6:	4b2b      	ldr	r3, [pc, #172]	@ (80011a4 <MX_ADC2_Init+0xf0>)
 80010f8:	f04f 6210 	mov.w	r2, #150994944	@ 0x9000000
 80010fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010fe:	4b29      	ldr	r3, [pc, #164]	@ (80011a4 <MX_ADC2_Init+0xf0>)
 8001100:	2200      	movs	r2, #0
 8001102:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8001104:	4b27      	ldr	r3, [pc, #156]	@ (80011a4 <MX_ADC2_Init+0xf0>)
 8001106:	2204      	movs	r2, #4
 8001108:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800110a:	4b26      	ldr	r3, [pc, #152]	@ (80011a4 <MX_ADC2_Init+0xf0>)
 800110c:	2201      	movs	r2, #1
 800110e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001112:	4b24      	ldr	r3, [pc, #144]	@ (80011a4 <MX_ADC2_Init+0xf0>)
 8001114:	2200      	movs	r2, #0
 8001116:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001118:	4822      	ldr	r0, [pc, #136]	@ (80011a4 <MX_ADC2_Init+0xf0>)
 800111a:	f001 fb29 	bl	8002770 <HAL_ADC_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8001124:	f000 fdd4 	bl	8001cd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001128:	2306      	movs	r3, #6
 800112a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800112c:	2301      	movs	r3, #1
 800112e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001130:	2303      	movs	r3, #3
 8001132:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001134:	463b      	mov	r3, r7
 8001136:	4619      	mov	r1, r3
 8001138:	481a      	ldr	r0, [pc, #104]	@ (80011a4 <MX_ADC2_Init+0xf0>)
 800113a:	f001 fc75 	bl	8002a28 <HAL_ADC_ConfigChannel>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8001144:	f000 fdc4 	bl	8001cd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001148:	2307      	movs	r3, #7
 800114a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800114c:	2302      	movs	r3, #2
 800114e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001150:	463b      	mov	r3, r7
 8001152:	4619      	mov	r1, r3
 8001154:	4813      	ldr	r0, [pc, #76]	@ (80011a4 <MX_ADC2_Init+0xf0>)
 8001156:	f001 fc67 	bl	8002a28 <HAL_ADC_ConfigChannel>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8001160:	f000 fdb6 	bl	8001cd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001164:	2308      	movs	r3, #8
 8001166:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001168:	2303      	movs	r3, #3
 800116a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800116c:	463b      	mov	r3, r7
 800116e:	4619      	mov	r1, r3
 8001170:	480c      	ldr	r0, [pc, #48]	@ (80011a4 <MX_ADC2_Init+0xf0>)
 8001172:	f001 fc59 	bl	8002a28 <HAL_ADC_ConfigChannel>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_ADC2_Init+0xcc>
  {
    Error_Handler();
 800117c:	f000 fda8 	bl	8001cd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001180:	2309      	movs	r3, #9
 8001182:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001184:	2304      	movs	r3, #4
 8001186:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001188:	463b      	mov	r3, r7
 800118a:	4619      	mov	r1, r3
 800118c:	4805      	ldr	r0, [pc, #20]	@ (80011a4 <MX_ADC2_Init+0xf0>)
 800118e:	f001 fc4b 	bl	8002a28 <HAL_ADC_ConfigChannel>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_ADC2_Init+0xe8>
  {
    Error_Handler();
 8001198:	f000 fd9a 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800119c:	bf00      	nop
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	200001f0 	.word	0x200001f0
 80011a8:	40012100 	.word	0x40012100

080011ac <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011b2:	463b      	mov	r3, r7
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80011be:	4b37      	ldr	r3, [pc, #220]	@ (800129c <MX_ADC3_Init+0xf0>)
 80011c0:	4a37      	ldr	r2, [pc, #220]	@ (80012a0 <MX_ADC3_Init+0xf4>)
 80011c2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011c4:	4b35      	ldr	r3, [pc, #212]	@ (800129c <MX_ADC3_Init+0xf0>)
 80011c6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011ca:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80011cc:	4b33      	ldr	r3, [pc, #204]	@ (800129c <MX_ADC3_Init+0xf0>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011d2:	4b32      	ldr	r3, [pc, #200]	@ (800129c <MX_ADC3_Init+0xf0>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80011d8:	4b30      	ldr	r3, [pc, #192]	@ (800129c <MX_ADC3_Init+0xf0>)
 80011da:	2200      	movs	r2, #0
 80011dc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80011de:	4b2f      	ldr	r3, [pc, #188]	@ (800129c <MX_ADC3_Init+0xf0>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80011e6:	4b2d      	ldr	r3, [pc, #180]	@ (800129c <MX_ADC3_Init+0xf0>)
 80011e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80011ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 80011ee:	4b2b      	ldr	r3, [pc, #172]	@ (800129c <MX_ADC3_Init+0xf0>)
 80011f0:	f04f 6250 	mov.w	r2, #218103808	@ 0xd000000
 80011f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011f6:	4b29      	ldr	r3, [pc, #164]	@ (800129c <MX_ADC3_Init+0xf0>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 4;
 80011fc:	4b27      	ldr	r3, [pc, #156]	@ (800129c <MX_ADC3_Init+0xf0>)
 80011fe:	2204      	movs	r2, #4
 8001200:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001202:	4b26      	ldr	r3, [pc, #152]	@ (800129c <MX_ADC3_Init+0xf0>)
 8001204:	2201      	movs	r2, #1
 8001206:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800120a:	4b24      	ldr	r3, [pc, #144]	@ (800129c <MX_ADC3_Init+0xf0>)
 800120c:	2200      	movs	r2, #0
 800120e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001210:	4822      	ldr	r0, [pc, #136]	@ (800129c <MX_ADC3_Init+0xf0>)
 8001212:	f001 faad 	bl	8002770 <HAL_ADC_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 800121c:	f000 fd58 	bl	8001cd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001220:	230a      	movs	r3, #10
 8001222:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001224:	2301      	movs	r3, #1
 8001226:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001228:	2300      	movs	r3, #0
 800122a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800122c:	463b      	mov	r3, r7
 800122e:	4619      	mov	r1, r3
 8001230:	481a      	ldr	r0, [pc, #104]	@ (800129c <MX_ADC3_Init+0xf0>)
 8001232:	f001 fbf9 	bl	8002a28 <HAL_ADC_ConfigChannel>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 800123c:	f000 fd48 	bl	8001cd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001240:	230b      	movs	r3, #11
 8001242:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001244:	2302      	movs	r3, #2
 8001246:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001248:	463b      	mov	r3, r7
 800124a:	4619      	mov	r1, r3
 800124c:	4813      	ldr	r0, [pc, #76]	@ (800129c <MX_ADC3_Init+0xf0>)
 800124e:	f001 fbeb 	bl	8002a28 <HAL_ADC_ConfigChannel>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8001258:	f000 fd3a 	bl	8001cd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800125c:	230c      	movs	r3, #12
 800125e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001260:	2303      	movs	r3, #3
 8001262:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001264:	463b      	mov	r3, r7
 8001266:	4619      	mov	r1, r3
 8001268:	480c      	ldr	r0, [pc, #48]	@ (800129c <MX_ADC3_Init+0xf0>)
 800126a:	f001 fbdd 	bl	8002a28 <HAL_ADC_ConfigChannel>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 8001274:	f000 fd2c 	bl	8001cd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001278:	230d      	movs	r3, #13
 800127a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800127c:	2304      	movs	r3, #4
 800127e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001280:	463b      	mov	r3, r7
 8001282:	4619      	mov	r1, r3
 8001284:	4805      	ldr	r0, [pc, #20]	@ (800129c <MX_ADC3_Init+0xf0>)
 8001286:	f001 fbcf 	bl	8002a28 <HAL_ADC_ConfigChannel>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_ADC3_Init+0xe8>
  {
    Error_Handler();
 8001290:	f000 fd1e 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001294:	bf00      	nop
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000238 	.word	0x20000238
 80012a0:	40012200 	.word	0x40012200

080012a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08e      	sub	sp, #56	@ 0x38
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a94      	ldr	r2, [pc, #592]	@ (8001514 <HAL_ADC_MspInit+0x270>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d153      	bne.n	800136e <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012c6:	4b94      	ldr	r3, [pc, #592]	@ (8001518 <HAL_ADC_MspInit+0x274>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ca:	4a93      	ldr	r2, [pc, #588]	@ (8001518 <HAL_ADC_MspInit+0x274>)
 80012cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012d2:	4b91      	ldr	r3, [pc, #580]	@ (8001518 <HAL_ADC_MspInit+0x274>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012da:	623b      	str	r3, [r7, #32]
 80012dc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012de:	4b8e      	ldr	r3, [pc, #568]	@ (8001518 <HAL_ADC_MspInit+0x274>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	4a8d      	ldr	r2, [pc, #564]	@ (8001518 <HAL_ADC_MspInit+0x274>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ea:	4b8b      	ldr	r3, [pc, #556]	@ (8001518 <HAL_ADC_MspInit+0x274>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	61fb      	str	r3, [r7, #28]
 80012f4:	69fb      	ldr	r3, [r7, #28]
    PA0/WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ia_L_Pin|ib_L_Pin|ic_L_Pin|VDC_L_Pin;
 80012f6:	230f      	movs	r3, #15
 80012f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012fa:	2303      	movs	r3, #3
 80012fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001302:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001306:	4619      	mov	r1, r3
 8001308:	4884      	ldr	r0, [pc, #528]	@ (800151c <HAL_ADC_MspInit+0x278>)
 800130a:	f002 fefb 	bl	8004104 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800130e:	4b84      	ldr	r3, [pc, #528]	@ (8001520 <HAL_ADC_MspInit+0x27c>)
 8001310:	4a84      	ldr	r2, [pc, #528]	@ (8001524 <HAL_ADC_MspInit+0x280>)
 8001312:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001314:	4b82      	ldr	r3, [pc, #520]	@ (8001520 <HAL_ADC_MspInit+0x27c>)
 8001316:	2200      	movs	r2, #0
 8001318:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800131a:	4b81      	ldr	r3, [pc, #516]	@ (8001520 <HAL_ADC_MspInit+0x27c>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001320:	4b7f      	ldr	r3, [pc, #508]	@ (8001520 <HAL_ADC_MspInit+0x27c>)
 8001322:	2200      	movs	r2, #0
 8001324:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001326:	4b7e      	ldr	r3, [pc, #504]	@ (8001520 <HAL_ADC_MspInit+0x27c>)
 8001328:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800132c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800132e:	4b7c      	ldr	r3, [pc, #496]	@ (8001520 <HAL_ADC_MspInit+0x27c>)
 8001330:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001334:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001336:	4b7a      	ldr	r3, [pc, #488]	@ (8001520 <HAL_ADC_MspInit+0x27c>)
 8001338:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800133c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800133e:	4b78      	ldr	r3, [pc, #480]	@ (8001520 <HAL_ADC_MspInit+0x27c>)
 8001340:	2200      	movs	r2, #0
 8001342:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001344:	4b76      	ldr	r3, [pc, #472]	@ (8001520 <HAL_ADC_MspInit+0x27c>)
 8001346:	2200      	movs	r2, #0
 8001348:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800134a:	4b75      	ldr	r3, [pc, #468]	@ (8001520 <HAL_ADC_MspInit+0x27c>)
 800134c:	2200      	movs	r2, #0
 800134e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001350:	4873      	ldr	r0, [pc, #460]	@ (8001520 <HAL_ADC_MspInit+0x27c>)
 8001352:	f002 fb5f 	bl	8003a14 <HAL_DMA_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 800135c:	f000 fcb8 	bl	8001cd0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a6f      	ldr	r2, [pc, #444]	@ (8001520 <HAL_ADC_MspInit+0x27c>)
 8001364:	639a      	str	r2, [r3, #56]	@ 0x38
 8001366:	4a6e      	ldr	r2, [pc, #440]	@ (8001520 <HAL_ADC_MspInit+0x27c>)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800136c:	e0cd      	b.n	800150a <HAL_ADC_MspInit+0x266>
  else if(adcHandle->Instance==ADC2)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a6d      	ldr	r2, [pc, #436]	@ (8001528 <HAL_ADC_MspInit+0x284>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d16e      	bne.n	8001456 <HAL_ADC_MspInit+0x1b2>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001378:	4b67      	ldr	r3, [pc, #412]	@ (8001518 <HAL_ADC_MspInit+0x274>)
 800137a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800137c:	4a66      	ldr	r2, [pc, #408]	@ (8001518 <HAL_ADC_MspInit+0x274>)
 800137e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001382:	6453      	str	r3, [r2, #68]	@ 0x44
 8001384:	4b64      	ldr	r3, [pc, #400]	@ (8001518 <HAL_ADC_MspInit+0x274>)
 8001386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001388:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800138c:	61bb      	str	r3, [r7, #24]
 800138e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001390:	4b61      	ldr	r3, [pc, #388]	@ (8001518 <HAL_ADC_MspInit+0x274>)
 8001392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001394:	4a60      	ldr	r2, [pc, #384]	@ (8001518 <HAL_ADC_MspInit+0x274>)
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	6313      	str	r3, [r2, #48]	@ 0x30
 800139c:	4b5e      	ldr	r3, [pc, #376]	@ (8001518 <HAL_ADC_MspInit+0x274>)
 800139e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	617b      	str	r3, [r7, #20]
 80013a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a8:	4b5b      	ldr	r3, [pc, #364]	@ (8001518 <HAL_ADC_MspInit+0x274>)
 80013aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ac:	4a5a      	ldr	r2, [pc, #360]	@ (8001518 <HAL_ADC_MspInit+0x274>)
 80013ae:	f043 0302 	orr.w	r3, r3, #2
 80013b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b4:	4b58      	ldr	r3, [pc, #352]	@ (8001518 <HAL_ADC_MspInit+0x274>)
 80013b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ia_R_Pin|ib_R_Pin;
 80013c0:	23c0      	movs	r3, #192	@ 0xc0
 80013c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c4:	2303      	movs	r3, #3
 80013c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013d0:	4619      	mov	r1, r3
 80013d2:	4852      	ldr	r0, [pc, #328]	@ (800151c <HAL_ADC_MspInit+0x278>)
 80013d4:	f002 fe96 	bl	8004104 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ic_R_Pin|VDC_R_Pin;
 80013d8:	2303      	movs	r3, #3
 80013da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013dc:	2303      	movs	r3, #3
 80013de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013e8:	4619      	mov	r1, r3
 80013ea:	4850      	ldr	r0, [pc, #320]	@ (800152c <HAL_ADC_MspInit+0x288>)
 80013ec:	f002 fe8a 	bl	8004104 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80013f0:	4b4f      	ldr	r3, [pc, #316]	@ (8001530 <HAL_ADC_MspInit+0x28c>)
 80013f2:	4a50      	ldr	r2, [pc, #320]	@ (8001534 <HAL_ADC_MspInit+0x290>)
 80013f4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80013f6:	4b4e      	ldr	r3, [pc, #312]	@ (8001530 <HAL_ADC_MspInit+0x28c>)
 80013f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80013fc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013fe:	4b4c      	ldr	r3, [pc, #304]	@ (8001530 <HAL_ADC_MspInit+0x28c>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001404:	4b4a      	ldr	r3, [pc, #296]	@ (8001530 <HAL_ADC_MspInit+0x28c>)
 8001406:	2200      	movs	r2, #0
 8001408:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800140a:	4b49      	ldr	r3, [pc, #292]	@ (8001530 <HAL_ADC_MspInit+0x28c>)
 800140c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001410:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001412:	4b47      	ldr	r3, [pc, #284]	@ (8001530 <HAL_ADC_MspInit+0x28c>)
 8001414:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001418:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800141a:	4b45      	ldr	r3, [pc, #276]	@ (8001530 <HAL_ADC_MspInit+0x28c>)
 800141c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001420:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001422:	4b43      	ldr	r3, [pc, #268]	@ (8001530 <HAL_ADC_MspInit+0x28c>)
 8001424:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001428:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 800142a:	4b41      	ldr	r3, [pc, #260]	@ (8001530 <HAL_ADC_MspInit+0x28c>)
 800142c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001430:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001432:	4b3f      	ldr	r3, [pc, #252]	@ (8001530 <HAL_ADC_MspInit+0x28c>)
 8001434:	2200      	movs	r2, #0
 8001436:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001438:	483d      	ldr	r0, [pc, #244]	@ (8001530 <HAL_ADC_MspInit+0x28c>)
 800143a:	f002 faeb 	bl	8003a14 <HAL_DMA_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <HAL_ADC_MspInit+0x1a4>
      Error_Handler();
 8001444:	f000 fc44 	bl	8001cd0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a39      	ldr	r2, [pc, #228]	@ (8001530 <HAL_ADC_MspInit+0x28c>)
 800144c:	639a      	str	r2, [r3, #56]	@ 0x38
 800144e:	4a38      	ldr	r2, [pc, #224]	@ (8001530 <HAL_ADC_MspInit+0x28c>)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001454:	e059      	b.n	800150a <HAL_ADC_MspInit+0x266>
  else if(adcHandle->Instance==ADC3)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a37      	ldr	r2, [pc, #220]	@ (8001538 <HAL_ADC_MspInit+0x294>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d154      	bne.n	800150a <HAL_ADC_MspInit+0x266>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001460:	4b2d      	ldr	r3, [pc, #180]	@ (8001518 <HAL_ADC_MspInit+0x274>)
 8001462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001464:	4a2c      	ldr	r2, [pc, #176]	@ (8001518 <HAL_ADC_MspInit+0x274>)
 8001466:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800146a:	6453      	str	r3, [r2, #68]	@ 0x44
 800146c:	4b2a      	ldr	r3, [pc, #168]	@ (8001518 <HAL_ADC_MspInit+0x274>)
 800146e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001470:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001478:	4b27      	ldr	r3, [pc, #156]	@ (8001518 <HAL_ADC_MspInit+0x274>)
 800147a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147c:	4a26      	ldr	r2, [pc, #152]	@ (8001518 <HAL_ADC_MspInit+0x274>)
 800147e:	f043 0304 	orr.w	r3, r3, #4
 8001482:	6313      	str	r3, [r2, #48]	@ 0x30
 8001484:	4b24      	ldr	r3, [pc, #144]	@ (8001518 <HAL_ADC_MspInit+0x274>)
 8001486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001488:	f003 0304 	and.w	r3, r3, #4
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Tinv_L_Pin|Tinv_R_Pin|Tmot_L_Pin|Tmot_R_Pin;
 8001490:	230f      	movs	r3, #15
 8001492:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001494:	2303      	movs	r3, #3
 8001496:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800149c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014a0:	4619      	mov	r1, r3
 80014a2:	4826      	ldr	r0, [pc, #152]	@ (800153c <HAL_ADC_MspInit+0x298>)
 80014a4:	f002 fe2e 	bl	8004104 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 80014a8:	4b25      	ldr	r3, [pc, #148]	@ (8001540 <HAL_ADC_MspInit+0x29c>)
 80014aa:	4a26      	ldr	r2, [pc, #152]	@ (8001544 <HAL_ADC_MspInit+0x2a0>)
 80014ac:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80014ae:	4b24      	ldr	r3, [pc, #144]	@ (8001540 <HAL_ADC_MspInit+0x29c>)
 80014b0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80014b4:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014b6:	4b22      	ldr	r3, [pc, #136]	@ (8001540 <HAL_ADC_MspInit+0x29c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80014bc:	4b20      	ldr	r3, [pc, #128]	@ (8001540 <HAL_ADC_MspInit+0x29c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80014c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001540 <HAL_ADC_MspInit+0x29c>)
 80014c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014c8:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001540 <HAL_ADC_MspInit+0x29c>)
 80014cc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014d0:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001540 <HAL_ADC_MspInit+0x29c>)
 80014d4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014d8:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80014da:	4b19      	ldr	r3, [pc, #100]	@ (8001540 <HAL_ADC_MspInit+0x29c>)
 80014dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014e0:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80014e2:	4b17      	ldr	r3, [pc, #92]	@ (8001540 <HAL_ADC_MspInit+0x29c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014e8:	4b15      	ldr	r3, [pc, #84]	@ (8001540 <HAL_ADC_MspInit+0x29c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80014ee:	4814      	ldr	r0, [pc, #80]	@ (8001540 <HAL_ADC_MspInit+0x29c>)
 80014f0:	f002 fa90 	bl	8003a14 <HAL_DMA_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <HAL_ADC_MspInit+0x25a>
      Error_Handler();
 80014fa:	f000 fbe9 	bl	8001cd0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a0f      	ldr	r2, [pc, #60]	@ (8001540 <HAL_ADC_MspInit+0x29c>)
 8001502:	639a      	str	r2, [r3, #56]	@ 0x38
 8001504:	4a0e      	ldr	r2, [pc, #56]	@ (8001540 <HAL_ADC_MspInit+0x29c>)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800150a:	bf00      	nop
 800150c:	3738      	adds	r7, #56	@ 0x38
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40012000 	.word	0x40012000
 8001518:	40023800 	.word	0x40023800
 800151c:	40020000 	.word	0x40020000
 8001520:	20000280 	.word	0x20000280
 8001524:	40026410 	.word	0x40026410
 8001528:	40012100 	.word	0x40012100
 800152c:	40020400 	.word	0x40020400
 8001530:	200002e0 	.word	0x200002e0
 8001534:	40026440 	.word	0x40026440
 8001538:	40012200 	.word	0x40012200
 800153c:	40020800 	.word	0x40020800
 8001540:	20000340 	.word	0x20000340
 8001544:	40026428 	.word	0x40026428

08001548 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800154c:	4b17      	ldr	r3, [pc, #92]	@ (80015ac <MX_CAN1_Init+0x64>)
 800154e:	4a18      	ldr	r2, [pc, #96]	@ (80015b0 <MX_CAN1_Init+0x68>)
 8001550:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 27;
 8001552:	4b16      	ldr	r3, [pc, #88]	@ (80015ac <MX_CAN1_Init+0x64>)
 8001554:	221b      	movs	r2, #27
 8001556:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001558:	4b14      	ldr	r3, [pc, #80]	@ (80015ac <MX_CAN1_Init+0x64>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800155e:	4b13      	ldr	r3, [pc, #76]	@ (80015ac <MX_CAN1_Init+0x64>)
 8001560:	2200      	movs	r2, #0
 8001562:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001564:	4b11      	ldr	r3, [pc, #68]	@ (80015ac <MX_CAN1_Init+0x64>)
 8001566:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800156a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800156c:	4b0f      	ldr	r3, [pc, #60]	@ (80015ac <MX_CAN1_Init+0x64>)
 800156e:	2200      	movs	r2, #0
 8001570:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001572:	4b0e      	ldr	r3, [pc, #56]	@ (80015ac <MX_CAN1_Init+0x64>)
 8001574:	2200      	movs	r2, #0
 8001576:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001578:	4b0c      	ldr	r3, [pc, #48]	@ (80015ac <MX_CAN1_Init+0x64>)
 800157a:	2200      	movs	r2, #0
 800157c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800157e:	4b0b      	ldr	r3, [pc, #44]	@ (80015ac <MX_CAN1_Init+0x64>)
 8001580:	2200      	movs	r2, #0
 8001582:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001584:	4b09      	ldr	r3, [pc, #36]	@ (80015ac <MX_CAN1_Init+0x64>)
 8001586:	2200      	movs	r2, #0
 8001588:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800158a:	4b08      	ldr	r3, [pc, #32]	@ (80015ac <MX_CAN1_Init+0x64>)
 800158c:	2200      	movs	r2, #0
 800158e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001590:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <MX_CAN1_Init+0x64>)
 8001592:	2200      	movs	r2, #0
 8001594:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001596:	4805      	ldr	r0, [pc, #20]	@ (80015ac <MX_CAN1_Init+0x64>)
 8001598:	f001 fd18 	bl	8002fcc <HAL_CAN_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80015a2:	f000 fb95 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	200003a0 	.word	0x200003a0
 80015b0:	40006400 	.word	0x40006400

080015b4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	@ 0x28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001640 <HAL_CAN_MspInit+0x8c>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d12f      	bne.n	8001636 <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80015d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001644 <HAL_CAN_MspInit+0x90>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015da:	4a1a      	ldr	r2, [pc, #104]	@ (8001644 <HAL_CAN_MspInit+0x90>)
 80015dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80015e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80015e2:	4b18      	ldr	r3, [pc, #96]	@ (8001644 <HAL_CAN_MspInit+0x90>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ee:	4b15      	ldr	r3, [pc, #84]	@ (8001644 <HAL_CAN_MspInit+0x90>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	4a14      	ldr	r2, [pc, #80]	@ (8001644 <HAL_CAN_MspInit+0x90>)
 80015f4:	f043 0308 	orr.w	r3, r3, #8
 80015f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fa:	4b12      	ldr	r3, [pc, #72]	@ (8001644 <HAL_CAN_MspInit+0x90>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	f003 0308 	and.w	r3, r3, #8
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001606:	2303      	movs	r3, #3
 8001608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160a:	2302      	movs	r3, #2
 800160c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001612:	2303      	movs	r3, #3
 8001614:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001616:	2309      	movs	r3, #9
 8001618:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800161a:	f107 0314 	add.w	r3, r7, #20
 800161e:	4619      	mov	r1, r3
 8001620:	4809      	ldr	r0, [pc, #36]	@ (8001648 <HAL_CAN_MspInit+0x94>)
 8001622:	f002 fd6f 	bl	8004104 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	2100      	movs	r1, #0
 800162a:	2014      	movs	r0, #20
 800162c:	f002 f8dd 	bl	80037ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001630:	2014      	movs	r0, #20
 8001632:	f002 f8f6 	bl	8003822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001636:	bf00      	nop
 8001638:	3728      	adds	r7, #40	@ 0x28
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40006400 	.word	0x40006400
 8001644:	40023800 	.word	0x40023800
 8001648:	40020c00 	.word	0x40020c00

0800164c <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001652:	463b      	mov	r3, r7
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800165a:	4b0f      	ldr	r3, [pc, #60]	@ (8001698 <MX_DAC_Init+0x4c>)
 800165c:	4a0f      	ldr	r2, [pc, #60]	@ (800169c <MX_DAC_Init+0x50>)
 800165e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001660:	480d      	ldr	r0, [pc, #52]	@ (8001698 <MX_DAC_Init+0x4c>)
 8001662:	f002 f8f8 	bl	8003856 <HAL_DAC_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800166c:	f000 fb30 	bl	8001cd0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001670:	2300      	movs	r3, #0
 8001672:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001674:	2300      	movs	r3, #0
 8001676:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001678:	463b      	mov	r3, r7
 800167a:	2200      	movs	r2, #0
 800167c:	4619      	mov	r1, r3
 800167e:	4806      	ldr	r0, [pc, #24]	@ (8001698 <MX_DAC_Init+0x4c>)
 8001680:	f002 f96f 	bl	8003962 <HAL_DAC_ConfigChannel>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800168a:	f000 fb21 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	200003c8 	.word	0x200003c8
 800169c:	40007400 	.word	0x40007400

080016a0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08a      	sub	sp, #40	@ 0x28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a19      	ldr	r2, [pc, #100]	@ (8001724 <HAL_DAC_MspInit+0x84>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d12b      	bne.n	800171a <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80016c2:	4b19      	ldr	r3, [pc, #100]	@ (8001728 <HAL_DAC_MspInit+0x88>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c6:	4a18      	ldr	r2, [pc, #96]	@ (8001728 <HAL_DAC_MspInit+0x88>)
 80016c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80016cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ce:	4b16      	ldr	r3, [pc, #88]	@ (8001728 <HAL_DAC_MspInit+0x88>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016da:	4b13      	ldr	r3, [pc, #76]	@ (8001728 <HAL_DAC_MspInit+0x88>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016de:	4a12      	ldr	r2, [pc, #72]	@ (8001728 <HAL_DAC_MspInit+0x88>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016e6:	4b10      	ldr	r3, [pc, #64]	@ (8001728 <HAL_DAC_MspInit+0x88>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = DAC_Pin;
 80016f2:	2310      	movs	r3, #16
 80016f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016f6:	2303      	movs	r3, #3
 80016f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC_GPIO_Port, &GPIO_InitStruct);
 80016fe:	f107 0314 	add.w	r3, r7, #20
 8001702:	4619      	mov	r1, r3
 8001704:	4809      	ldr	r0, [pc, #36]	@ (800172c <HAL_DAC_MspInit+0x8c>)
 8001706:	f002 fcfd 	bl	8004104 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800170a:	2200      	movs	r2, #0
 800170c:	2100      	movs	r1, #0
 800170e:	2036      	movs	r0, #54	@ 0x36
 8001710:	f002 f86b 	bl	80037ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001714:	2036      	movs	r0, #54	@ 0x36
 8001716:	f002 f884 	bl	8003822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800171a:	bf00      	nop
 800171c:	3728      	adds	r7, #40	@ 0x28
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40007400 	.word	0x40007400
 8001728:	40023800 	.word	0x40023800
 800172c:	40020000 	.word	0x40020000

08001730 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001736:	4b14      	ldr	r3, [pc, #80]	@ (8001788 <MX_DMA_Init+0x58>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	4a13      	ldr	r2, [pc, #76]	@ (8001788 <MX_DMA_Init+0x58>)
 800173c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001740:	6313      	str	r3, [r2, #48]	@ 0x30
 8001742:	4b11      	ldr	r3, [pc, #68]	@ (8001788 <MX_DMA_Init+0x58>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001746:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800174e:	2200      	movs	r2, #0
 8001750:	2100      	movs	r1, #0
 8001752:	2038      	movs	r0, #56	@ 0x38
 8001754:	f002 f849 	bl	80037ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001758:	2038      	movs	r0, #56	@ 0x38
 800175a:	f002 f862 	bl	8003822 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800175e:	2200      	movs	r2, #0
 8001760:	2100      	movs	r1, #0
 8001762:	2039      	movs	r0, #57	@ 0x39
 8001764:	f002 f841 	bl	80037ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001768:	2039      	movs	r0, #57	@ 0x39
 800176a:	f002 f85a 	bl	8003822 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800176e:	2200      	movs	r2, #0
 8001770:	2100      	movs	r1, #0
 8001772:	203a      	movs	r0, #58	@ 0x3a
 8001774:	f002 f839 	bl	80037ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001778:	203a      	movs	r0, #58	@ 0x3a
 800177a:	f002 f852 	bl	8003822 <HAL_NVIC_EnableIRQ>

}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40023800 	.word	0x40023800

0800178c <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08c      	sub	sp, #48	@ 0x30
 8001790:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001792:	f107 031c 	add.w	r3, r7, #28
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
 80017a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017a2:	4b87      	ldr	r3, [pc, #540]	@ (80019c0 <MX_GPIO_Init+0x234>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	4a86      	ldr	r2, [pc, #536]	@ (80019c0 <MX_GPIO_Init+0x234>)
 80017a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ae:	4b84      	ldr	r3, [pc, #528]	@ (80019c0 <MX_GPIO_Init+0x234>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017b6:	61bb      	str	r3, [r7, #24]
 80017b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ba:	4b81      	ldr	r3, [pc, #516]	@ (80019c0 <MX_GPIO_Init+0x234>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	4a80      	ldr	r2, [pc, #512]	@ (80019c0 <MX_GPIO_Init+0x234>)
 80017c0:	f043 0304 	orr.w	r3, r3, #4
 80017c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c6:	4b7e      	ldr	r3, [pc, #504]	@ (80019c0 <MX_GPIO_Init+0x234>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ca:	f003 0304 	and.w	r3, r3, #4
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d2:	4b7b      	ldr	r3, [pc, #492]	@ (80019c0 <MX_GPIO_Init+0x234>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	4a7a      	ldr	r2, [pc, #488]	@ (80019c0 <MX_GPIO_Init+0x234>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017de:	4b78      	ldr	r3, [pc, #480]	@ (80019c0 <MX_GPIO_Init+0x234>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ea:	4b75      	ldr	r3, [pc, #468]	@ (80019c0 <MX_GPIO_Init+0x234>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ee:	4a74      	ldr	r2, [pc, #464]	@ (80019c0 <MX_GPIO_Init+0x234>)
 80017f0:	f043 0302 	orr.w	r3, r3, #2
 80017f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017f6:	4b72      	ldr	r3, [pc, #456]	@ (80019c0 <MX_GPIO_Init+0x234>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001802:	4b6f      	ldr	r3, [pc, #444]	@ (80019c0 <MX_GPIO_Init+0x234>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	4a6e      	ldr	r2, [pc, #440]	@ (80019c0 <MX_GPIO_Init+0x234>)
 8001808:	f043 0310 	orr.w	r3, r3, #16
 800180c:	6313      	str	r3, [r2, #48]	@ 0x30
 800180e:	4b6c      	ldr	r3, [pc, #432]	@ (80019c0 <MX_GPIO_Init+0x234>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	f003 0310 	and.w	r3, r3, #16
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800181a:	4b69      	ldr	r3, [pc, #420]	@ (80019c0 <MX_GPIO_Init+0x234>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	4a68      	ldr	r2, [pc, #416]	@ (80019c0 <MX_GPIO_Init+0x234>)
 8001820:	f043 0308 	orr.w	r3, r3, #8
 8001824:	6313      	str	r3, [r2, #48]	@ 0x30
 8001826:	4b66      	ldr	r3, [pc, #408]	@ (80019c0 <MX_GPIO_Init+0x234>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_R_GPIO_Port, ENABLE_R_Pin, GPIO_PIN_RESET);
 8001832:	2200      	movs	r2, #0
 8001834:	2104      	movs	r1, #4
 8001836:	4863      	ldr	r0, [pc, #396]	@ (80019c4 <MX_GPIO_Init+0x238>)
 8001838:	f002 fe28 	bl	800448c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_L_GPIO_Port, ENABLE_L_Pin, GPIO_PIN_RESET);
 800183c:	2200      	movs	r2, #0
 800183e:	2180      	movs	r1, #128	@ 0x80
 8001840:	4861      	ldr	r0, [pc, #388]	@ (80019c8 <MX_GPIO_Init+0x23c>)
 8001842:	f002 fe23 	bl	800448c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_LEFT_Pin|LED_RIGHT_Pin|LED_ERR_Pin, GPIO_PIN_RESET);
 8001846:	2200      	movs	r2, #0
 8001848:	2170      	movs	r1, #112	@ 0x70
 800184a:	4860      	ldr	r0, [pc, #384]	@ (80019cc <MX_GPIO_Init+0x240>)
 800184c:	f002 fe1e 	bl	800448c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SC_det_Pin;
 8001850:	2310      	movs	r3, #16
 8001852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001854:	2300      	movs	r3, #0
 8001856:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SC_det_GPIO_Port, &GPIO_InitStruct);
 800185c:	f107 031c 	add.w	r3, r7, #28
 8001860:	4619      	mov	r1, r3
 8001862:	485b      	ldr	r0, [pc, #364]	@ (80019d0 <MX_GPIO_Init+0x244>)
 8001864:	f002 fc4e 	bl	8004104 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_R_Pin;
 8001868:	2304      	movs	r3, #4
 800186a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186c:	2301      	movs	r3, #1
 800186e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001874:	2300      	movs	r3, #0
 8001876:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ENABLE_R_GPIO_Port, &GPIO_InitStruct);
 8001878:	f107 031c 	add.w	r3, r7, #28
 800187c:	4619      	mov	r1, r3
 800187e:	4851      	ldr	r0, [pc, #324]	@ (80019c4 <MX_GPIO_Init+0x238>)
 8001880:	f002 fc40 	bl	8004104 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_L_Pin;
 8001884:	2380      	movs	r3, #128	@ 0x80
 8001886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001888:	2301      	movs	r3, #1
 800188a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001890:	2300      	movs	r3, #0
 8001892:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ENABLE_L_GPIO_Port, &GPIO_InitStruct);
 8001894:	f107 031c 	add.w	r3, r7, #28
 8001898:	4619      	mov	r1, r3
 800189a:	484b      	ldr	r0, [pc, #300]	@ (80019c8 <MX_GPIO_Init+0x23c>)
 800189c:	f002 fc32 	bl	8004104 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = WRN_L_Pin|WRN_R_Pin;
 80018a0:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80018a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a6:	2300      	movs	r3, #0
 80018a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018ae:	f107 031c 	add.w	r3, r7, #28
 80018b2:	4619      	mov	r1, r3
 80018b4:	4844      	ldr	r0, [pc, #272]	@ (80019c8 <MX_GPIO_Init+0x23c>)
 80018b6:	f002 fc25 	bl	8004104 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Z_R_Pin;
 80018ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80018be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018c0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Z_R_GPIO_Port, &GPIO_InitStruct);
 80018ca:	f107 031c 	add.w	r3, r7, #28
 80018ce:	4619      	mov	r1, r3
 80018d0:	483c      	ldr	r0, [pc, #240]	@ (80019c4 <MX_GPIO_Init+0x238>)
 80018d2:	f002 fc17 	bl	8004104 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Z_L_Pin;
 80018d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80018da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018dc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Z_L_GPIO_Port, &GPIO_InitStruct);
 80018e6:	f107 031c 	add.w	r3, r7, #28
 80018ea:	4619      	mov	r1, r3
 80018ec:	4837      	ldr	r0, [pc, #220]	@ (80019cc <MX_GPIO_Init+0x240>)
 80018ee:	f002 fc09 	bl	8004104 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIP_R_Pin;
 80018f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018f8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TRIP_R_GPIO_Port, &GPIO_InitStruct);
 8001902:	f107 031c 	add.w	r3, r7, #28
 8001906:	4619      	mov	r1, r3
 8001908:	4831      	ldr	r0, [pc, #196]	@ (80019d0 <MX_GPIO_Init+0x244>)
 800190a:	f002 fbfb 	bl	8004104 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIP_L_Pin;
 800190e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001914:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TRIP_L_GPIO_Port, &GPIO_InitStruct);
 800191e:	f107 031c 	add.w	r3, r7, #28
 8001922:	4619      	mov	r1, r3
 8001924:	482b      	ldr	r0, [pc, #172]	@ (80019d4 <MX_GPIO_Init+0x248>)
 8001926:	f002 fbed 	bl	8004104 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800192a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800192e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001930:	2300      	movs	r3, #0
 8001932:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001938:	f107 031c 	add.w	r3, r7, #28
 800193c:	4619      	mov	r1, r3
 800193e:	4825      	ldr	r0, [pc, #148]	@ (80019d4 <MX_GPIO_Init+0x248>)
 8001940:	f002 fbe0 	bl	8004104 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001944:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194a:	2302      	movs	r3, #2
 800194c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001952:	2303      	movs	r3, #3
 8001954:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001956:	230a      	movs	r3, #10
 8001958:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195a:	f107 031c 	add.w	r3, r7, #28
 800195e:	4619      	mov	r1, r3
 8001960:	481c      	ldr	r0, [pc, #112]	@ (80019d4 <MX_GPIO_Init+0x248>)
 8001962:	f002 fbcf 	bl	8004104 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIR_Pin;
 8001966:	2308      	movs	r3, #8
 8001968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800196a:	2300      	movs	r3, #0
 800196c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 8001972:	f107 031c 	add.w	r3, r7, #28
 8001976:	4619      	mov	r1, r3
 8001978:	4814      	ldr	r0, [pc, #80]	@ (80019cc <MX_GPIO_Init+0x240>)
 800197a:	f002 fbc3 	bl	8004104 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LED_LEFT_Pin|LED_RIGHT_Pin;
 800197e:	2330      	movs	r3, #48	@ 0x30
 8001980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001982:	2301      	movs	r3, #1
 8001984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198a:	2300      	movs	r3, #0
 800198c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800198e:	f107 031c 	add.w	r3, r7, #28
 8001992:	4619      	mov	r1, r3
 8001994:	480d      	ldr	r0, [pc, #52]	@ (80019cc <MX_GPIO_Init+0x240>)
 8001996:	f002 fbb5 	bl	8004104 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_ERR_Pin;
 800199a:	2340      	movs	r3, #64	@ 0x40
 800199c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199e:	2301      	movs	r3, #1
 80019a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019a2:	2302      	movs	r3, #2
 80019a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2300      	movs	r3, #0
 80019a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_ERR_GPIO_Port, &GPIO_InitStruct);
 80019aa:	f107 031c 	add.w	r3, r7, #28
 80019ae:	4619      	mov	r1, r3
 80019b0:	4806      	ldr	r0, [pc, #24]	@ (80019cc <MX_GPIO_Init+0x240>)
 80019b2:	f002 fba7 	bl	8004104 <HAL_GPIO_Init>

}
 80019b6:	bf00      	nop
 80019b8:	3730      	adds	r7, #48	@ 0x30
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40020400 	.word	0x40020400
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40020c00 	.word	0x40020c00
 80019d0:	40020800 	.word	0x40020800
 80019d4:	40020000 	.word	0x40020000

080019d8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019dc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a4c <MX_I2C1_Init+0x74>)
 80019de:	4a1c      	ldr	r2, [pc, #112]	@ (8001a50 <MX_I2C1_Init+0x78>)
 80019e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80019e2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a4c <MX_I2C1_Init+0x74>)
 80019e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001a54 <MX_I2C1_Init+0x7c>)
 80019e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80019e8:	4b18      	ldr	r3, [pc, #96]	@ (8001a4c <MX_I2C1_Init+0x74>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019ee:	4b17      	ldr	r3, [pc, #92]	@ (8001a4c <MX_I2C1_Init+0x74>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019f4:	4b15      	ldr	r3, [pc, #84]	@ (8001a4c <MX_I2C1_Init+0x74>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80019fa:	4b14      	ldr	r3, [pc, #80]	@ (8001a4c <MX_I2C1_Init+0x74>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a00:	4b12      	ldr	r3, [pc, #72]	@ (8001a4c <MX_I2C1_Init+0x74>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a06:	4b11      	ldr	r3, [pc, #68]	@ (8001a4c <MX_I2C1_Init+0x74>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a4c <MX_I2C1_Init+0x74>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a12:	480e      	ldr	r0, [pc, #56]	@ (8001a4c <MX_I2C1_Init+0x74>)
 8001a14:	f002 fd54 	bl	80044c0 <HAL_I2C_Init>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a1e:	f000 f957 	bl	8001cd0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a22:	2100      	movs	r1, #0
 8001a24:	4809      	ldr	r0, [pc, #36]	@ (8001a4c <MX_I2C1_Init+0x74>)
 8001a26:	f002 fddb 	bl	80045e0 <HAL_I2CEx_ConfigAnalogFilter>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a30:	f000 f94e 	bl	8001cd0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a34:	2100      	movs	r1, #0
 8001a36:	4805      	ldr	r0, [pc, #20]	@ (8001a4c <MX_I2C1_Init+0x74>)
 8001a38:	f002 fe1d 	bl	8004676 <HAL_I2CEx_ConfigDigitalFilter>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a42:	f000 f945 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	200003dc 	.word	0x200003dc
 8001a50:	40005400 	.word	0x40005400
 8001a54:	20404768 	.word	0x20404768

08001a58 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b0ae      	sub	sp, #184	@ 0xb8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	2290      	movs	r2, #144	@ 0x90
 8001a76:	2100      	movs	r1, #0
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f005 fb3b 	bl	80070f4 <memset>
  if(i2cHandle->Instance==I2C1)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a21      	ldr	r2, [pc, #132]	@ (8001b08 <HAL_I2C_MspInit+0xb0>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d13b      	bne.n	8001b00 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a88:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001a8c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a92:	f107 0314 	add.w	r3, r7, #20
 8001a96:	4618      	mov	r0, r3
 8001a98:	f003 faea 	bl	8005070 <HAL_RCCEx_PeriphCLKConfig>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001aa2:	f000 f915 	bl	8001cd0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa6:	4b19      	ldr	r3, [pc, #100]	@ (8001b0c <HAL_I2C_MspInit+0xb4>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aaa:	4a18      	ldr	r2, [pc, #96]	@ (8001b0c <HAL_I2C_MspInit+0xb4>)
 8001aac:	f043 0302 	orr.w	r3, r3, #2
 8001ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ab2:	4b16      	ldr	r3, [pc, #88]	@ (8001b0c <HAL_I2C_MspInit+0xb4>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001abe:	23c0      	movs	r3, #192	@ 0xc0
 8001ac0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ac4:	2312      	movs	r3, #18
 8001ac6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ad6:	2304      	movs	r3, #4
 8001ad8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001adc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	480b      	ldr	r0, [pc, #44]	@ (8001b10 <HAL_I2C_MspInit+0xb8>)
 8001ae4:	f002 fb0e 	bl	8004104 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ae8:	4b08      	ldr	r3, [pc, #32]	@ (8001b0c <HAL_I2C_MspInit+0xb4>)
 8001aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aec:	4a07      	ldr	r2, [pc, #28]	@ (8001b0c <HAL_I2C_MspInit+0xb4>)
 8001aee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001af2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001af4:	4b05      	ldr	r3, [pc, #20]	@ (8001b0c <HAL_I2C_MspInit+0xb4>)
 8001af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001b00:	bf00      	nop
 8001b02:	37b8      	adds	r7, #184	@ 0xb8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40005400 	.word	0x40005400
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40020400 	.word	0x40020400

08001b14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b1a:	f000 fdcc 	bl	80026b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b1e:	f000 f869 	bl	8001bf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b22:	f7ff fe33 	bl	800178c <MX_GPIO_Init>
  MX_DMA_Init();
 8001b26:	f7ff fe03 	bl	8001730 <MX_DMA_Init>
  MX_ADC1_Init();
 8001b2a:	f7ff fa47 	bl	8000fbc <MX_ADC1_Init>
  MX_CAN1_Init();
 8001b2e:	f7ff fd0b 	bl	8001548 <MX_CAN1_Init>
  MX_USB_OTG_FS_USB_Init();
 8001b32:	f000 fd8f 	bl	8002654 <MX_USB_OTG_FS_USB_Init>
  MX_ADC2_Init();
 8001b36:	f7ff fabd 	bl	80010b4 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001b3a:	f7ff fb37 	bl	80011ac <MX_ADC3_Init>
  MX_DAC_Init();
 8001b3e:	f7ff fd85 	bl	800164c <MX_DAC_Init>
  MX_I2C1_Init();
 8001b42:	f7ff ff49 	bl	80019d8 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001b46:	f000 f973 	bl	8001e30 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001b4a:	f000 fb2f 	bl	80021ac <MX_TIM8_Init>
  MX_TIM2_Init();
 8001b4e:	f000 fa39 	bl	8001fc4 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001b52:	f000 fa95 	bl	8002080 <MX_TIM4_Init>
  MX_TIM6_Init();
 8001b56:	f000 faf3 	bl	8002140 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  // Initialize inverters
  initialize_inverter(&inverter_left, &ledLeft, ENABLE_L_GPIO_Port, ENABLE_L_Pin, &htim1, &hadc2);
 8001b5a:	4b17      	ldr	r3, [pc, #92]	@ (8001bb8 <main+0xa4>)
 8001b5c:	9301      	str	r3, [sp, #4]
 8001b5e:	4b17      	ldr	r3, [pc, #92]	@ (8001bbc <main+0xa8>)
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	2380      	movs	r3, #128	@ 0x80
 8001b64:	4a16      	ldr	r2, [pc, #88]	@ (8001bc0 <main+0xac>)
 8001b66:	4917      	ldr	r1, [pc, #92]	@ (8001bc4 <main+0xb0>)
 8001b68:	4817      	ldr	r0, [pc, #92]	@ (8001bc8 <main+0xb4>)
 8001b6a:	f7fe ff91 	bl	8000a90 <initialize_inverter>
  initialize_inverter(&inverter_right, &ledRight, ENABLE_R_GPIO_Port, ENABLE_R_Pin, &htim8, &hadc1);
 8001b6e:	4b17      	ldr	r3, [pc, #92]	@ (8001bcc <main+0xb8>)
 8001b70:	9301      	str	r3, [sp, #4]
 8001b72:	4b17      	ldr	r3, [pc, #92]	@ (8001bd0 <main+0xbc>)
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	2304      	movs	r3, #4
 8001b78:	4a16      	ldr	r2, [pc, #88]	@ (8001bd4 <main+0xc0>)
 8001b7a:	4917      	ldr	r1, [pc, #92]	@ (8001bd8 <main+0xc4>)
 8001b7c:	4817      	ldr	r0, [pc, #92]	@ (8001bdc <main+0xc8>)
 8001b7e:	f7fe ff87 	bl	8000a90 <initialize_inverter>

  HAL_ADC_Start_DMA(&hadc2, (uint32_t *) rawADC_left,4); // Starts ADC DMA for left inverter
 8001b82:	2204      	movs	r2, #4
 8001b84:	4916      	ldr	r1, [pc, #88]	@ (8001be0 <main+0xcc>)
 8001b86:	480c      	ldr	r0, [pc, #48]	@ (8001bb8 <main+0xa4>)
 8001b88:	f000 fe36 	bl	80027f8 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) rawADC_right,4); // Starts ADC DMA for right inverter
 8001b8c:	2204      	movs	r2, #4
 8001b8e:	4915      	ldr	r1, [pc, #84]	@ (8001be4 <main+0xd0>)
 8001b90:	480e      	ldr	r0, [pc, #56]	@ (8001bcc <main+0xb8>)
 8001b92:	f000 fe31 	bl	80027f8 <HAL_ADC_Start_DMA>


  HAL_ADC_Start_DMA(&hadc3, (uint32_t *) rawADC_temp,4); // Starts ADC DMA for temperatures
 8001b96:	2204      	movs	r2, #4
 8001b98:	4913      	ldr	r1, [pc, #76]	@ (8001be8 <main+0xd4>)
 8001b9a:	4814      	ldr	r0, [pc, #80]	@ (8001bec <main+0xd8>)
 8001b9c:	f000 fe2c 	bl	80027f8 <HAL_ADC_Start_DMA>

  // 1ms timer
  HAL_TIM_Base_Start_IT(&htim6);
 8001ba0:	4813      	ldr	r0, [pc, #76]	@ (8001bf0 <main+0xdc>)
 8001ba2:	f003 fee5 	bl	8005970 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

      // Run FSM for left inverter
	  eval_inv_FSM(&inverter_left);
 8001ba6:	4808      	ldr	r0, [pc, #32]	@ (8001bc8 <main+0xb4>)
 8001ba8:	f7fe fee0 	bl	800096c <eval_inv_FSM>

      // Run FSM for right inverter
	  eval_inv_FSM(&inverter_right);
 8001bac:	480b      	ldr	r0, [pc, #44]	@ (8001bdc <main+0xc8>)
 8001bae:	f7fe fedd 	bl	800096c <eval_inv_FSM>
	  eval_inv_FSM(&inverter_left);
 8001bb2:	bf00      	nop
 8001bb4:	e7f7      	b.n	8001ba6 <main+0x92>
 8001bb6:	bf00      	nop
 8001bb8:	200001f0 	.word	0x200001f0
 8001bbc:	20000430 	.word	0x20000430
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	20000000 	.word	0x20000000
 8001bc8:	200000a8 	.word	0x200000a8
 8001bcc:	200001a8 	.word	0x200001a8
 8001bd0:	20000560 	.word	0x20000560
 8001bd4:	40020400 	.word	0x40020400
 8001bd8:	20000008 	.word	0x20000008
 8001bdc:	2000010c 	.word	0x2000010c
 8001be0:	20000170 	.word	0x20000170
 8001be4:	20000180 	.word	0x20000180
 8001be8:	20000190 	.word	0x20000190
 8001bec:	20000238 	.word	0x20000238
 8001bf0:	20000514 	.word	0x20000514

08001bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b094      	sub	sp, #80	@ 0x50
 8001bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bfa:	f107 031c 	add.w	r3, r7, #28
 8001bfe:	2234      	movs	r2, #52	@ 0x34
 8001c00:	2100      	movs	r1, #0
 8001c02:	4618      	mov	r0, r3
 8001c04:	f005 fa76 	bl	80070f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c08:	f107 0308 	add.w	r3, r7, #8
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c18:	4b2b      	ldr	r3, [pc, #172]	@ (8001cc8 <SystemClock_Config+0xd4>)
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1c:	4a2a      	ldr	r2, [pc, #168]	@ (8001cc8 <SystemClock_Config+0xd4>)
 8001c1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c22:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c24:	4b28      	ldr	r3, [pc, #160]	@ (8001cc8 <SystemClock_Config+0xd4>)
 8001c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c2c:	607b      	str	r3, [r7, #4]
 8001c2e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c30:	4b26      	ldr	r3, [pc, #152]	@ (8001ccc <SystemClock_Config+0xd8>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a25      	ldr	r2, [pc, #148]	@ (8001ccc <SystemClock_Config+0xd8>)
 8001c36:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	4b23      	ldr	r3, [pc, #140]	@ (8001ccc <SystemClock_Config+0xd8>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c44:	603b      	str	r3, [r7, #0]
 8001c46:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c4c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c50:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c52:	2302      	movs	r3, #2
 8001c54:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c56:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001c5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 10;
 8001c5c:	230a      	movs	r3, #10
 8001c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001c60:	23d8      	movs	r3, #216	@ 0xd8
 8001c62:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c64:	2302      	movs	r3, #2
 8001c66:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001c68:	2309      	movs	r3, #9
 8001c6a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c70:	f107 031c 	add.w	r3, r7, #28
 8001c74:	4618      	mov	r0, r3
 8001c76:	f002 fd9b 	bl	80047b0 <HAL_RCC_OscConfig>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001c80:	f000 f826 	bl	8001cd0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c84:	f002 fd44 	bl	8004710 <HAL_PWREx_EnableOverDrive>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001c8e:	f000 f81f 	bl	8001cd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c92:	230f      	movs	r3, #15
 8001c94:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c96:	2302      	movs	r3, #2
 8001c98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c9e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ca2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ca4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ca8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001caa:	f107 0308 	add.w	r3, r7, #8
 8001cae:	2107      	movs	r1, #7
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f003 f82b 	bl	8004d0c <HAL_RCC_ClockConfig>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001cbc:	f000 f808 	bl	8001cd0 <Error_Handler>
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	3750      	adds	r7, #80	@ 0x50
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40007000 	.word	0x40007000

08001cd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd4:	b672      	cpsid	i
}
 8001cd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cd8:	bf00      	nop
 8001cda:	e7fd      	b.n	8001cd8 <Error_Handler+0x8>

08001cdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ce2:	4b0f      	ldr	r3, [pc, #60]	@ (8001d20 <HAL_MspInit+0x44>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce6:	4a0e      	ldr	r2, [pc, #56]	@ (8001d20 <HAL_MspInit+0x44>)
 8001ce8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cee:	4b0c      	ldr	r3, [pc, #48]	@ (8001d20 <HAL_MspInit+0x44>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cf6:	607b      	str	r3, [r7, #4]
 8001cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfa:	4b09      	ldr	r3, [pc, #36]	@ (8001d20 <HAL_MspInit+0x44>)
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfe:	4a08      	ldr	r2, [pc, #32]	@ (8001d20 <HAL_MspInit+0x44>)
 8001d00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d04:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d06:	4b06      	ldr	r3, [pc, #24]	@ (8001d20 <HAL_MspInit+0x44>)
 8001d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d0e:	603b      	str	r3, [r7, #0]
 8001d10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	40023800 	.word	0x40023800

08001d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d28:	bf00      	nop
 8001d2a:	e7fd      	b.n	8001d28 <NMI_Handler+0x4>

08001d2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d30:	bf00      	nop
 8001d32:	e7fd      	b.n	8001d30 <HardFault_Handler+0x4>

08001d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d38:	bf00      	nop
 8001d3a:	e7fd      	b.n	8001d38 <MemManage_Handler+0x4>

08001d3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d40:	bf00      	nop
 8001d42:	e7fd      	b.n	8001d40 <BusFault_Handler+0x4>

08001d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d48:	bf00      	nop
 8001d4a:	e7fd      	b.n	8001d48 <UsageFault_Handler+0x4>

08001d4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d7a:	f000 fcd9 	bl	8002730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
	...

08001d84 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001d88:	4802      	ldr	r0, [pc, #8]	@ (8001d94 <CAN1_RX0_IRQHandler+0x10>)
 8001d8a:	f001 fa1a 	bl	80031c2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	200003a0 	.word	0x200003a0

08001d98 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d9c:	4803      	ldr	r0, [pc, #12]	@ (8001dac <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001d9e:	f003 ff78 	bl	8005c92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  tasks_20us_left();
 8001da2:	f7ff f8bb 	bl	8000f1c <tasks_20us_left>
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000430 	.word	0x20000430

08001db0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001db4:	4804      	ldr	r0, [pc, #16]	@ (8001dc8 <TIM6_DAC_IRQHandler+0x18>)
 8001db6:	f001 fd70 	bl	800389a <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8001dba:	4804      	ldr	r0, [pc, #16]	@ (8001dcc <TIM6_DAC_IRQHandler+0x1c>)
 8001dbc:	f003 ff69 	bl	8005c92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  tasks_1ms();
 8001dc0:	f7ff f84a 	bl	8000e58 <tasks_1ms>
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001dc4:	bf00      	nop
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	200003c8 	.word	0x200003c8
 8001dcc:	20000514 	.word	0x20000514

08001dd0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001dd4:	4802      	ldr	r0, [pc, #8]	@ (8001de0 <DMA2_Stream0_IRQHandler+0x10>)
 8001dd6:	f001 ff2b 	bl	8003c30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000280 	.word	0x20000280

08001de4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001de8:	4802      	ldr	r0, [pc, #8]	@ (8001df4 <DMA2_Stream1_IRQHandler+0x10>)
 8001dea:	f001 ff21 	bl	8003c30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000340 	.word	0x20000340

08001df8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001dfc:	4802      	ldr	r0, [pc, #8]	@ (8001e08 <DMA2_Stream2_IRQHandler+0x10>)
 8001dfe:	f001 ff17 	bl	8003c30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	200002e0 	.word	0x200002e0

08001e0c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e10:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <SystemInit+0x20>)
 8001e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e16:	4a05      	ldr	r2, [pc, #20]	@ (8001e2c <SystemInit+0x20>)
 8001e18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b09a      	sub	sp, #104	@ 0x68
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e36:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	605a      	str	r2, [r3, #4]
 8001e40:	609a      	str	r2, [r3, #8]
 8001e42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e44:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e50:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	611a      	str	r2, [r3, #16]
 8001e60:	615a      	str	r2, [r3, #20]
 8001e62:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e64:	1d3b      	adds	r3, r7, #4
 8001e66:	222c      	movs	r2, #44	@ 0x2c
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f005 f942 	bl	80070f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e70:	4b52      	ldr	r3, [pc, #328]	@ (8001fbc <MX_TIM1_Init+0x18c>)
 8001e72:	4a53      	ldr	r2, [pc, #332]	@ (8001fc0 <MX_TIM1_Init+0x190>)
 8001e74:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e76:	4b51      	ldr	r3, [pc, #324]	@ (8001fbc <MX_TIM1_Init+0x18c>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001e7c:	4b4f      	ldr	r3, [pc, #316]	@ (8001fbc <MX_TIM1_Init+0x18c>)
 8001e7e:	2220      	movs	r2, #32
 8001e80:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = (216000000*TS)/2;
 8001e82:	4b4e      	ldr	r3, [pc, #312]	@ (8001fbc <MX_TIM1_Init+0x18c>)
 8001e84:	f44f 6207 	mov.w	r2, #2160	@ 0x870
 8001e88:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e8a:	4b4c      	ldr	r3, [pc, #304]	@ (8001fbc <MX_TIM1_Init+0x18c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8001e90:	4b4a      	ldr	r3, [pc, #296]	@ (8001fbc <MX_TIM1_Init+0x18c>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e96:	4b49      	ldr	r3, [pc, #292]	@ (8001fbc <MX_TIM1_Init+0x18c>)
 8001e98:	2280      	movs	r2, #128	@ 0x80
 8001e9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e9c:	4847      	ldr	r0, [pc, #284]	@ (8001fbc <MX_TIM1_Init+0x18c>)
 8001e9e:	f003 fd0f 	bl	80058c0 <HAL_TIM_Base_Init>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001ea8:	f7ff ff12 	bl	8001cd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001eb0:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001eb2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4840      	ldr	r0, [pc, #256]	@ (8001fbc <MX_TIM1_Init+0x18c>)
 8001eba:	f004 fa33 	bl	8006324 <HAL_TIM_ConfigClockSource>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001ec4:	f7ff ff04 	bl	8001cd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ec8:	483c      	ldr	r0, [pc, #240]	@ (8001fbc <MX_TIM1_Init+0x18c>)
 8001eca:	f003 fe2a 	bl	8005b22 <HAL_TIM_PWM_Init>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001ed4:	f7ff fefc 	bl	8001cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ed8:	2320      	movs	r3, #32
 8001eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001edc:	2300      	movs	r3, #0
 8001ede:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ee4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4834      	ldr	r0, [pc, #208]	@ (8001fbc <MX_TIM1_Init+0x18c>)
 8001eec:	f004 ffd8 	bl	8006ea0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001ef6:	f7ff feeb 	bl	8001cd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001efa:	2360      	movs	r3, #96	@ 0x60
 8001efc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001efe:	2300      	movs	r3, #0
 8001f00:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f02:	2300      	movs	r3, #0
 8001f04:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8001f06:	2308      	movs	r3, #8
 8001f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8001f12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f16:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f18:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4826      	ldr	r0, [pc, #152]	@ (8001fbc <MX_TIM1_Init+0x18c>)
 8001f22:	f004 f8eb 	bl	80060fc <HAL_TIM_PWM_ConfigChannel>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001f2c:	f7ff fed0 	bl	8001cd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f30:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001f34:	2204      	movs	r2, #4
 8001f36:	4619      	mov	r1, r3
 8001f38:	4820      	ldr	r0, [pc, #128]	@ (8001fbc <MX_TIM1_Init+0x18c>)
 8001f3a:	f004 f8df 	bl	80060fc <HAL_TIM_PWM_ConfigChannel>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001f44:	f7ff fec4 	bl	8001cd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f48:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001f4c:	2208      	movs	r2, #8
 8001f4e:	4619      	mov	r1, r3
 8001f50:	481a      	ldr	r0, [pc, #104]	@ (8001fbc <MX_TIM1_Init+0x18c>)
 8001f52:	f004 f8d3 	bl	80060fc <HAL_TIM_PWM_ConfigChannel>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8001f5c:	f7ff feb8 	bl	8001cd0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001f60:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f64:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001f66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f6a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 8001f6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f70:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = DT*216000000;
 8001f72:	2320      	movs	r3, #32
 8001f74:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f7e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8001f84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f88:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f94:	2300      	movs	r3, #0
 8001f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f98:	1d3b      	adds	r3, r7, #4
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4807      	ldr	r0, [pc, #28]	@ (8001fbc <MX_TIM1_Init+0x18c>)
 8001f9e:	f005 f80d 	bl	8006fbc <HAL_TIMEx_ConfigBreakDeadTime>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_TIM1_Init+0x17c>
  {
    Error_Handler();
 8001fa8:	f7ff fe92 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001fac:	4803      	ldr	r0, [pc, #12]	@ (8001fbc <MX_TIM1_Init+0x18c>)
 8001fae:	f000 fab5 	bl	800251c <HAL_TIM_MspPostInit>

}
 8001fb2:	bf00      	nop
 8001fb4:	3768      	adds	r7, #104	@ 0x68
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000430 	.word	0x20000430
 8001fc0:	40010000 	.word	0x40010000

08001fc4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b088      	sub	sp, #32
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fca:	f107 0314 	add.w	r3, r7, #20
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	605a      	str	r2, [r3, #4]
 8001fd4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001fd6:	1d3b      	adds	r3, r7, #4
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fe2:	4b26      	ldr	r3, [pc, #152]	@ (800207c <MX_TIM2_Init+0xb8>)
 8001fe4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001fe8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001fea:	4b24      	ldr	r3, [pc, #144]	@ (800207c <MX_TIM2_Init+0xb8>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff0:	4b22      	ldr	r3, [pc, #136]	@ (800207c <MX_TIM2_Init+0xb8>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001ff6:	4b21      	ldr	r3, [pc, #132]	@ (800207c <MX_TIM2_Init+0xb8>)
 8001ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ffc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ffe:	4b1f      	ldr	r3, [pc, #124]	@ (800207c <MX_TIM2_Init+0xb8>)
 8002000:	2200      	movs	r2, #0
 8002002:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002004:	4b1d      	ldr	r3, [pc, #116]	@ (800207c <MX_TIM2_Init+0xb8>)
 8002006:	2200      	movs	r2, #0
 8002008:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800200a:	481c      	ldr	r0, [pc, #112]	@ (800207c <MX_TIM2_Init+0xb8>)
 800200c:	f003 fdea 	bl	8005be4 <HAL_TIM_IC_Init>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002016:	f7ff fe5b 	bl	8001cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800201e:	2300      	movs	r3, #0
 8002020:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002022:	f107 0314 	add.w	r3, r7, #20
 8002026:	4619      	mov	r1, r3
 8002028:	4814      	ldr	r0, [pc, #80]	@ (800207c <MX_TIM2_Init+0xb8>)
 800202a:	f004 ff39 	bl	8006ea0 <HAL_TIMEx_MasterConfigSynchronization>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002034:	f7ff fe4c 	bl	8001cd0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002038:	2300      	movs	r3, #0
 800203a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800203c:	2301      	movs	r3, #1
 800203e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002040:	2300      	movs	r3, #0
 8002042:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002044:	2300      	movs	r3, #0
 8002046:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002048:	1d3b      	adds	r3, r7, #4
 800204a:	2200      	movs	r2, #0
 800204c:	4619      	mov	r1, r3
 800204e:	480b      	ldr	r0, [pc, #44]	@ (800207c <MX_TIM2_Init+0xb8>)
 8002050:	f003 ffb8 	bl	8005fc4 <HAL_TIM_IC_ConfigChannel>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800205a:	f7ff fe39 	bl	8001cd0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800205e:	1d3b      	adds	r3, r7, #4
 8002060:	2208      	movs	r2, #8
 8002062:	4619      	mov	r1, r3
 8002064:	4805      	ldr	r0, [pc, #20]	@ (800207c <MX_TIM2_Init+0xb8>)
 8002066:	f003 ffad 	bl	8005fc4 <HAL_TIM_IC_ConfigChannel>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8002070:	f7ff fe2e 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002074:	bf00      	nop
 8002076:	3720      	adds	r7, #32
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	2000047c 	.word	0x2000047c

08002080 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002086:	f107 0314 	add.w	r3, r7, #20
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	605a      	str	r2, [r3, #4]
 8002090:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002092:	1d3b      	adds	r3, r7, #4
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800209e:	4b26      	ldr	r3, [pc, #152]	@ (8002138 <MX_TIM4_Init+0xb8>)
 80020a0:	4a26      	ldr	r2, [pc, #152]	@ (800213c <MX_TIM4_Init+0xbc>)
 80020a2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80020a4:	4b24      	ldr	r3, [pc, #144]	@ (8002138 <MX_TIM4_Init+0xb8>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020aa:	4b23      	ldr	r3, [pc, #140]	@ (8002138 <MX_TIM4_Init+0xb8>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80020b0:	4b21      	ldr	r3, [pc, #132]	@ (8002138 <MX_TIM4_Init+0xb8>)
 80020b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020b6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002138 <MX_TIM4_Init+0xb8>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020be:	4b1e      	ldr	r3, [pc, #120]	@ (8002138 <MX_TIM4_Init+0xb8>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80020c4:	481c      	ldr	r0, [pc, #112]	@ (8002138 <MX_TIM4_Init+0xb8>)
 80020c6:	f003 fd8d 	bl	8005be4 <HAL_TIM_IC_Init>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80020d0:	f7ff fdfe 	bl	8001cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020d8:	2300      	movs	r3, #0
 80020da:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80020dc:	f107 0314 	add.w	r3, r7, #20
 80020e0:	4619      	mov	r1, r3
 80020e2:	4815      	ldr	r0, [pc, #84]	@ (8002138 <MX_TIM4_Init+0xb8>)
 80020e4:	f004 fedc 	bl	8006ea0 <HAL_TIMEx_MasterConfigSynchronization>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80020ee:	f7ff fdef 	bl	8001cd0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80020f2:	2300      	movs	r3, #0
 80020f4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80020f6:	2301      	movs	r3, #1
 80020f8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80020fe:	2300      	movs	r3, #0
 8002100:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002102:	1d3b      	adds	r3, r7, #4
 8002104:	2200      	movs	r2, #0
 8002106:	4619      	mov	r1, r3
 8002108:	480b      	ldr	r0, [pc, #44]	@ (8002138 <MX_TIM4_Init+0xb8>)
 800210a:	f003 ff5b 	bl	8005fc4 <HAL_TIM_IC_ConfigChannel>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002114:	f7ff fddc 	bl	8001cd0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002118:	1d3b      	adds	r3, r7, #4
 800211a:	2208      	movs	r2, #8
 800211c:	4619      	mov	r1, r3
 800211e:	4806      	ldr	r0, [pc, #24]	@ (8002138 <MX_TIM4_Init+0xb8>)
 8002120:	f003 ff50 	bl	8005fc4 <HAL_TIM_IC_ConfigChannel>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800212a:	f7ff fdd1 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800212e:	bf00      	nop
 8002130:	3720      	adds	r7, #32
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	200004c8 	.word	0x200004c8
 800213c:	40000800 	.word	0x40000800

08002140 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002146:	1d3b      	adds	r3, r7, #4
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002150:	4b14      	ldr	r3, [pc, #80]	@ (80021a4 <MX_TIM6_Init+0x64>)
 8002152:	4a15      	ldr	r2, [pc, #84]	@ (80021a8 <MX_TIM6_Init+0x68>)
 8002154:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1;
 8002156:	4b13      	ldr	r3, [pc, #76]	@ (80021a4 <MX_TIM6_Init+0x64>)
 8002158:	2201      	movs	r2, #1
 800215a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800215c:	4b11      	ldr	r3, [pc, #68]	@ (80021a4 <MX_TIM6_Init+0x64>)
 800215e:	2200      	movs	r2, #0
 8002160:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 53999;
 8002162:	4b10      	ldr	r3, [pc, #64]	@ (80021a4 <MX_TIM6_Init+0x64>)
 8002164:	f24d 22ef 	movw	r2, #53999	@ 0xd2ef
 8002168:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800216a:	4b0e      	ldr	r3, [pc, #56]	@ (80021a4 <MX_TIM6_Init+0x64>)
 800216c:	2280      	movs	r2, #128	@ 0x80
 800216e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002170:	480c      	ldr	r0, [pc, #48]	@ (80021a4 <MX_TIM6_Init+0x64>)
 8002172:	f003 fba5 	bl	80058c0 <HAL_TIM_Base_Init>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800217c:	f7ff fda8 	bl	8001cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002180:	2320      	movs	r3, #32
 8002182:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002184:	2300      	movs	r3, #0
 8002186:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002188:	1d3b      	adds	r3, r7, #4
 800218a:	4619      	mov	r1, r3
 800218c:	4805      	ldr	r0, [pc, #20]	@ (80021a4 <MX_TIM6_Init+0x64>)
 800218e:	f004 fe87 	bl	8006ea0 <HAL_TIMEx_MasterConfigSynchronization>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002198:	f7ff fd9a 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800219c:	bf00      	nop
 800219e:	3710      	adds	r7, #16
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20000514 	.word	0x20000514
 80021a8:	40001000 	.word	0x40001000

080021ac <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b09a      	sub	sp, #104	@ 0x68
 80021b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021b2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	605a      	str	r2, [r3, #4]
 80021bc:	609a      	str	r2, [r3, #8]
 80021be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021c0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021cc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
 80021da:	611a      	str	r2, [r3, #16]
 80021dc:	615a      	str	r2, [r3, #20]
 80021de:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021e0:	1d3b      	adds	r3, r7, #4
 80021e2:	222c      	movs	r2, #44	@ 0x2c
 80021e4:	2100      	movs	r1, #0
 80021e6:	4618      	mov	r0, r3
 80021e8:	f004 ff84 	bl	80070f4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80021ec:	4b54      	ldr	r3, [pc, #336]	@ (8002340 <MX_TIM8_Init+0x194>)
 80021ee:	4a55      	ldr	r2, [pc, #340]	@ (8002344 <MX_TIM8_Init+0x198>)
 80021f0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80021f2:	4b53      	ldr	r3, [pc, #332]	@ (8002340 <MX_TIM8_Init+0x194>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021f8:	4b51      	ldr	r3, [pc, #324]	@ (8002340 <MX_TIM8_Init+0x194>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80021fe:	4b50      	ldr	r3, [pc, #320]	@ (8002340 <MX_TIM8_Init+0x194>)
 8002200:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002204:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002206:	4b4e      	ldr	r3, [pc, #312]	@ (8002340 <MX_TIM8_Init+0x194>)
 8002208:	2200      	movs	r2, #0
 800220a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800220c:	4b4c      	ldr	r3, [pc, #304]	@ (8002340 <MX_TIM8_Init+0x194>)
 800220e:	2200      	movs	r2, #0
 8002210:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002212:	4b4b      	ldr	r3, [pc, #300]	@ (8002340 <MX_TIM8_Init+0x194>)
 8002214:	2200      	movs	r2, #0
 8002216:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002218:	4849      	ldr	r0, [pc, #292]	@ (8002340 <MX_TIM8_Init+0x194>)
 800221a:	f003 fb51 	bl	80058c0 <HAL_TIM_Base_Init>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8002224:	f7ff fd54 	bl	8001cd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002228:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800222c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800222e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002232:	4619      	mov	r1, r3
 8002234:	4842      	ldr	r0, [pc, #264]	@ (8002340 <MX_TIM8_Init+0x194>)
 8002236:	f004 f875 	bl	8006324 <HAL_TIM_ConfigClockSource>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8002240:	f7ff fd46 	bl	8001cd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002244:	483e      	ldr	r0, [pc, #248]	@ (8002340 <MX_TIM8_Init+0x194>)
 8002246:	f003 fc6c 	bl	8005b22 <HAL_TIM_PWM_Init>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8002250:	f7ff fd3e 	bl	8001cd0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8002254:	483a      	ldr	r0, [pc, #232]	@ (8002340 <MX_TIM8_Init+0x194>)
 8002256:	f003 fc03 	bl	8005a60 <HAL_TIM_OC_Init>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <MX_TIM8_Init+0xb8>
  {
    Error_Handler();
 8002260:	f7ff fd36 	bl	8001cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002264:	2300      	movs	r3, #0
 8002266:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002268:	2300      	movs	r3, #0
 800226a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800226c:	2300      	movs	r3, #0
 800226e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002270:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002274:	4619      	mov	r1, r3
 8002276:	4832      	ldr	r0, [pc, #200]	@ (8002340 <MX_TIM8_Init+0x194>)
 8002278:	f004 fe12 	bl	8006ea0 <HAL_TIMEx_MasterConfigSynchronization>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_TIM8_Init+0xda>
  {
    Error_Handler();
 8002282:	f7ff fd25 	bl	8001cd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002286:	2360      	movs	r3, #96	@ 0x60
 8002288:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800228a:	2300      	movs	r3, #0
 800228c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800228e:	2300      	movs	r3, #0
 8002290:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002292:	2300      	movs	r3, #0
 8002294:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002296:	2300      	movs	r3, #0
 8002298:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800229a:	2300      	movs	r3, #0
 800229c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800229e:	2300      	movs	r3, #0
 80022a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022a2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80022a6:	2200      	movs	r2, #0
 80022a8:	4619      	mov	r1, r3
 80022aa:	4825      	ldr	r0, [pc, #148]	@ (8002340 <MX_TIM8_Init+0x194>)
 80022ac:	f003 ff26 	bl	80060fc <HAL_TIM_PWM_ConfigChannel>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 80022b6:	f7ff fd0b 	bl	8001cd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022ba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80022be:	2204      	movs	r2, #4
 80022c0:	4619      	mov	r1, r3
 80022c2:	481f      	ldr	r0, [pc, #124]	@ (8002340 <MX_TIM8_Init+0x194>)
 80022c4:	f003 ff1a 	bl	80060fc <HAL_TIM_PWM_ConfigChannel>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 80022ce:	f7ff fcff 	bl	8001cd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80022d2:	2300      	movs	r3, #0
 80022d4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022d6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80022da:	2208      	movs	r2, #8
 80022dc:	4619      	mov	r1, r3
 80022de:	4818      	ldr	r0, [pc, #96]	@ (8002340 <MX_TIM8_Init+0x194>)
 80022e0:	f003 fdf6 	bl	8005ed0 <HAL_TIM_OC_ConfigChannel>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80022ea:	f7ff fcf1 	bl	8001cd0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80022ee:	2300      	movs	r3, #0
 80022f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80022f2:	2300      	movs	r3, #0
 80022f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80022f6:	2300      	movs	r3, #0
 80022f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80022fa:	2300      	movs	r3, #0
 80022fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002302:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002306:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002308:	2300      	movs	r3, #0
 800230a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800230c:	2300      	movs	r3, #0
 800230e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002310:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002314:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002316:	2300      	movs	r3, #0
 8002318:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800231a:	2300      	movs	r3, #0
 800231c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800231e:	1d3b      	adds	r3, r7, #4
 8002320:	4619      	mov	r1, r3
 8002322:	4807      	ldr	r0, [pc, #28]	@ (8002340 <MX_TIM8_Init+0x194>)
 8002324:	f004 fe4a 	bl	8006fbc <HAL_TIMEx_ConfigBreakDeadTime>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <MX_TIM8_Init+0x186>
  {
    Error_Handler();
 800232e:	f7ff fccf 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002332:	4803      	ldr	r0, [pc, #12]	@ (8002340 <MX_TIM8_Init+0x194>)
 8002334:	f000 f8f2 	bl	800251c <HAL_TIM_MspPostInit>

}
 8002338:	bf00      	nop
 800233a:	3768      	adds	r7, #104	@ 0x68
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	20000560 	.word	0x20000560
 8002344:	40010400 	.word	0x40010400

08002348 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <HAL_TIM_Base_MspInit+0x9c>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d114      	bne.n	8002384 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800235a:	4b23      	ldr	r3, [pc, #140]	@ (80023e8 <HAL_TIM_Base_MspInit+0xa0>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800235e:	4a22      	ldr	r2, [pc, #136]	@ (80023e8 <HAL_TIM_Base_MspInit+0xa0>)
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	6453      	str	r3, [r2, #68]	@ 0x44
 8002366:	4b20      	ldr	r3, [pc, #128]	@ (80023e8 <HAL_TIM_Base_MspInit+0xa0>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002372:	2200      	movs	r2, #0
 8002374:	2100      	movs	r1, #0
 8002376:	2019      	movs	r0, #25
 8002378:	f001 fa37 	bl	80037ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800237c:	2019      	movs	r0, #25
 800237e:	f001 fa50 	bl	8003822 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002382:	e02a      	b.n	80023da <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM6)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a18      	ldr	r2, [pc, #96]	@ (80023ec <HAL_TIM_Base_MspInit+0xa4>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d114      	bne.n	80023b8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800238e:	4b16      	ldr	r3, [pc, #88]	@ (80023e8 <HAL_TIM_Base_MspInit+0xa0>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002392:	4a15      	ldr	r2, [pc, #84]	@ (80023e8 <HAL_TIM_Base_MspInit+0xa0>)
 8002394:	f043 0310 	orr.w	r3, r3, #16
 8002398:	6413      	str	r3, [r2, #64]	@ 0x40
 800239a:	4b13      	ldr	r3, [pc, #76]	@ (80023e8 <HAL_TIM_Base_MspInit+0xa0>)
 800239c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239e:	f003 0310 	and.w	r3, r3, #16
 80023a2:	613b      	str	r3, [r7, #16]
 80023a4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80023a6:	2200      	movs	r2, #0
 80023a8:	2100      	movs	r1, #0
 80023aa:	2036      	movs	r0, #54	@ 0x36
 80023ac:	f001 fa1d 	bl	80037ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80023b0:	2036      	movs	r0, #54	@ 0x36
 80023b2:	f001 fa36 	bl	8003822 <HAL_NVIC_EnableIRQ>
}
 80023b6:	e010      	b.n	80023da <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM8)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a0c      	ldr	r2, [pc, #48]	@ (80023f0 <HAL_TIM_Base_MspInit+0xa8>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d10b      	bne.n	80023da <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80023c2:	4b09      	ldr	r3, [pc, #36]	@ (80023e8 <HAL_TIM_Base_MspInit+0xa0>)
 80023c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c6:	4a08      	ldr	r2, [pc, #32]	@ (80023e8 <HAL_TIM_Base_MspInit+0xa0>)
 80023c8:	f043 0302 	orr.w	r3, r3, #2
 80023cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ce:	4b06      	ldr	r3, [pc, #24]	@ (80023e8 <HAL_TIM_Base_MspInit+0xa0>)
 80023d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]
}
 80023da:	bf00      	nop
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40010000 	.word	0x40010000
 80023e8:	40023800 	.word	0x40023800
 80023ec:	40001000 	.word	0x40001000
 80023f0:	40010400 	.word	0x40010400

080023f4 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b08c      	sub	sp, #48	@ 0x30
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023fc:	f107 031c 	add.w	r3, r7, #28
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	605a      	str	r2, [r3, #4]
 8002406:	609a      	str	r2, [r3, #8]
 8002408:	60da      	str	r2, [r3, #12]
 800240a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002414:	d146      	bne.n	80024a4 <HAL_TIM_IC_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002416:	4b3c      	ldr	r3, [pc, #240]	@ (8002508 <HAL_TIM_IC_MspInit+0x114>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241a:	4a3b      	ldr	r2, [pc, #236]	@ (8002508 <HAL_TIM_IC_MspInit+0x114>)
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	6413      	str	r3, [r2, #64]	@ 0x40
 8002422:	4b39      	ldr	r3, [pc, #228]	@ (8002508 <HAL_TIM_IC_MspInit+0x114>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	61bb      	str	r3, [r7, #24]
 800242c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800242e:	4b36      	ldr	r3, [pc, #216]	@ (8002508 <HAL_TIM_IC_MspInit+0x114>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002432:	4a35      	ldr	r2, [pc, #212]	@ (8002508 <HAL_TIM_IC_MspInit+0x114>)
 8002434:	f043 0302 	orr.w	r3, r3, #2
 8002438:	6313      	str	r3, [r2, #48]	@ 0x30
 800243a:	4b33      	ldr	r3, [pc, #204]	@ (8002508 <HAL_TIM_IC_MspInit+0x114>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	617b      	str	r3, [r7, #20]
 8002444:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002446:	4b30      	ldr	r3, [pc, #192]	@ (8002508 <HAL_TIM_IC_MspInit+0x114>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244a:	4a2f      	ldr	r2, [pc, #188]	@ (8002508 <HAL_TIM_IC_MspInit+0x114>)
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	6313      	str	r3, [r2, #48]	@ 0x30
 8002452:	4b2d      	ldr	r3, [pc, #180]	@ (8002508 <HAL_TIM_IC_MspInit+0x114>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	613b      	str	r3, [r7, #16]
 800245c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = B_R_Pin;
 800245e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002464:	2302      	movs	r3, #2
 8002466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002468:	2300      	movs	r3, #0
 800246a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246c:	2300      	movs	r3, #0
 800246e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002470:	2301      	movs	r3, #1
 8002472:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(B_R_GPIO_Port, &GPIO_InitStruct);
 8002474:	f107 031c 	add.w	r3, r7, #28
 8002478:	4619      	mov	r1, r3
 800247a:	4824      	ldr	r0, [pc, #144]	@ (800250c <HAL_TIM_IC_MspInit+0x118>)
 800247c:	f001 fe42 	bl	8004104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A_R_Pin;
 8002480:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002484:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002486:	2302      	movs	r3, #2
 8002488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248a:	2300      	movs	r3, #0
 800248c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248e:	2300      	movs	r3, #0
 8002490:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002492:	2301      	movs	r3, #1
 8002494:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(A_R_GPIO_Port, &GPIO_InitStruct);
 8002496:	f107 031c 	add.w	r3, r7, #28
 800249a:	4619      	mov	r1, r3
 800249c:	481c      	ldr	r0, [pc, #112]	@ (8002510 <HAL_TIM_IC_MspInit+0x11c>)
 800249e:	f001 fe31 	bl	8004104 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80024a2:	e02d      	b.n	8002500 <HAL_TIM_IC_MspInit+0x10c>
  else if(tim_icHandle->Instance==TIM4)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a1a      	ldr	r2, [pc, #104]	@ (8002514 <HAL_TIM_IC_MspInit+0x120>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d128      	bne.n	8002500 <HAL_TIM_IC_MspInit+0x10c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80024ae:	4b16      	ldr	r3, [pc, #88]	@ (8002508 <HAL_TIM_IC_MspInit+0x114>)
 80024b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b2:	4a15      	ldr	r2, [pc, #84]	@ (8002508 <HAL_TIM_IC_MspInit+0x114>)
 80024b4:	f043 0304 	orr.w	r3, r3, #4
 80024b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024ba:	4b13      	ldr	r3, [pc, #76]	@ (8002508 <HAL_TIM_IC_MspInit+0x114>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024be:	f003 0304 	and.w	r3, r3, #4
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024c6:	4b10      	ldr	r3, [pc, #64]	@ (8002508 <HAL_TIM_IC_MspInit+0x114>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ca:	4a0f      	ldr	r2, [pc, #60]	@ (8002508 <HAL_TIM_IC_MspInit+0x114>)
 80024cc:	f043 0308 	orr.w	r3, r3, #8
 80024d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002508 <HAL_TIM_IC_MspInit+0x114>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d6:	f003 0308 	and.w	r3, r3, #8
 80024da:	60bb      	str	r3, [r7, #8]
 80024dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = A_L_Pin|B_L_Pin;
 80024de:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80024e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e4:	2302      	movs	r3, #2
 80024e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ec:	2300      	movs	r3, #0
 80024ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80024f0:	2302      	movs	r3, #2
 80024f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024f4:	f107 031c 	add.w	r3, r7, #28
 80024f8:	4619      	mov	r1, r3
 80024fa:	4807      	ldr	r0, [pc, #28]	@ (8002518 <HAL_TIM_IC_MspInit+0x124>)
 80024fc:	f001 fe02 	bl	8004104 <HAL_GPIO_Init>
}
 8002500:	bf00      	nop
 8002502:	3730      	adds	r7, #48	@ 0x30
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40023800 	.word	0x40023800
 800250c:	40020400 	.word	0x40020400
 8002510:	40020000 	.word	0x40020000
 8002514:	40000800 	.word	0x40000800
 8002518:	40020c00 	.word	0x40020c00

0800251c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b08c      	sub	sp, #48	@ 0x30
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002524:	f107 031c 	add.w	r3, r7, #28
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	605a      	str	r2, [r3, #4]
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	60da      	str	r2, [r3, #12]
 8002532:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a3f      	ldr	r2, [pc, #252]	@ (8002638 <HAL_TIM_MspPostInit+0x11c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d11d      	bne.n	800257a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800253e:	4b3f      	ldr	r3, [pc, #252]	@ (800263c <HAL_TIM_MspPostInit+0x120>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002542:	4a3e      	ldr	r2, [pc, #248]	@ (800263c <HAL_TIM_MspPostInit+0x120>)
 8002544:	f043 0310 	orr.w	r3, r3, #16
 8002548:	6313      	str	r3, [r2, #48]	@ 0x30
 800254a:	4b3c      	ldr	r3, [pc, #240]	@ (800263c <HAL_TIM_MspPostInit+0x120>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254e:	f003 0310 	and.w	r3, r3, #16
 8002552:	61bb      	str	r3, [r7, #24]
 8002554:	69bb      	ldr	r3, [r7, #24]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWM1_L_Pin|PWM2_L_Pin|PWM3_L_Pin|PWM4_L_Pin
 8002556:	f44f 537c 	mov.w	r3, #16128	@ 0x3f00
 800255a:	61fb      	str	r3, [r7, #28]
                          |PWM5_L_Pin|PWM6_L_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255c:	2302      	movs	r3, #2
 800255e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002560:	2300      	movs	r3, #0
 8002562:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002564:	2300      	movs	r3, #0
 8002566:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002568:	2301      	movs	r3, #1
 800256a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800256c:	f107 031c 	add.w	r3, r7, #28
 8002570:	4619      	mov	r1, r3
 8002572:	4833      	ldr	r0, [pc, #204]	@ (8002640 <HAL_TIM_MspPostInit+0x124>)
 8002574:	f001 fdc6 	bl	8004104 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002578:	e05a      	b.n	8002630 <HAL_TIM_MspPostInit+0x114>
  else if(timHandle->Instance==TIM8)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a31      	ldr	r2, [pc, #196]	@ (8002644 <HAL_TIM_MspPostInit+0x128>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d155      	bne.n	8002630 <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002584:	4b2d      	ldr	r3, [pc, #180]	@ (800263c <HAL_TIM_MspPostInit+0x120>)
 8002586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002588:	4a2c      	ldr	r2, [pc, #176]	@ (800263c <HAL_TIM_MspPostInit+0x120>)
 800258a:	f043 0301 	orr.w	r3, r3, #1
 800258e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002590:	4b2a      	ldr	r3, [pc, #168]	@ (800263c <HAL_TIM_MspPostInit+0x120>)
 8002592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800259c:	4b27      	ldr	r3, [pc, #156]	@ (800263c <HAL_TIM_MspPostInit+0x120>)
 800259e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a0:	4a26      	ldr	r2, [pc, #152]	@ (800263c <HAL_TIM_MspPostInit+0x120>)
 80025a2:	f043 0302 	orr.w	r3, r3, #2
 80025a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80025a8:	4b24      	ldr	r3, [pc, #144]	@ (800263c <HAL_TIM_MspPostInit+0x120>)
 80025aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	613b      	str	r3, [r7, #16]
 80025b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025b4:	4b21      	ldr	r3, [pc, #132]	@ (800263c <HAL_TIM_MspPostInit+0x120>)
 80025b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b8:	4a20      	ldr	r2, [pc, #128]	@ (800263c <HAL_TIM_MspPostInit+0x120>)
 80025ba:	f043 0304 	orr.w	r3, r3, #4
 80025be:	6313      	str	r3, [r2, #48]	@ 0x30
 80025c0:	4b1e      	ldr	r3, [pc, #120]	@ (800263c <HAL_TIM_MspPostInit+0x120>)
 80025c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM1_R_Pin;
 80025cc:	2320      	movs	r3, #32
 80025ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d0:	2302      	movs	r3, #2
 80025d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d8:	2300      	movs	r3, #0
 80025da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80025dc:	2303      	movs	r3, #3
 80025de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM1_R_GPIO_Port, &GPIO_InitStruct);
 80025e0:	f107 031c 	add.w	r3, r7, #28
 80025e4:	4619      	mov	r1, r3
 80025e6:	4818      	ldr	r0, [pc, #96]	@ (8002648 <HAL_TIM_MspPostInit+0x12c>)
 80025e8:	f001 fd8c 	bl	8004104 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM3_R_Pin|PWM5_R_Pin;
 80025ec:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80025f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f2:	2302      	movs	r3, #2
 80025f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f6:	2300      	movs	r3, #0
 80025f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fa:	2300      	movs	r3, #0
 80025fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80025fe:	2303      	movs	r3, #3
 8002600:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002602:	f107 031c 	add.w	r3, r7, #28
 8002606:	4619      	mov	r1, r3
 8002608:	4810      	ldr	r0, [pc, #64]	@ (800264c <HAL_TIM_MspPostInit+0x130>)
 800260a:	f001 fd7b 	bl	8004104 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM2_R_Pin|PWM4_R_Pin|PWM6_R_Pin;
 800260e:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8002612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002614:	2302      	movs	r3, #2
 8002616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002618:	2300      	movs	r3, #0
 800261a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261c:	2300      	movs	r3, #0
 800261e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002620:	2303      	movs	r3, #3
 8002622:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002624:	f107 031c 	add.w	r3, r7, #28
 8002628:	4619      	mov	r1, r3
 800262a:	4809      	ldr	r0, [pc, #36]	@ (8002650 <HAL_TIM_MspPostInit+0x134>)
 800262c:	f001 fd6a 	bl	8004104 <HAL_GPIO_Init>
}
 8002630:	bf00      	nop
 8002632:	3730      	adds	r7, #48	@ 0x30
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40010000 	.word	0x40010000
 800263c:	40023800 	.word	0x40023800
 8002640:	40021000 	.word	0x40021000
 8002644:	40010400 	.word	0x40010400
 8002648:	40020000 	.word	0x40020000
 800264c:	40020400 	.word	0x40020400
 8002650:	40020800 	.word	0x40020800

08002654 <MX_USB_OTG_FS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_USB_Init(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002658:	bf00      	nop
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
	...

08002664 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002664:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800269c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002668:	480d      	ldr	r0, [pc, #52]	@ (80026a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800266a:	490e      	ldr	r1, [pc, #56]	@ (80026a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800266c:	4a0e      	ldr	r2, [pc, #56]	@ (80026a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800266e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002670:	e002      	b.n	8002678 <LoopCopyDataInit>

08002672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002676:	3304      	adds	r3, #4

08002678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800267a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800267c:	d3f9      	bcc.n	8002672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800267e:	4a0b      	ldr	r2, [pc, #44]	@ (80026ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002680:	4c0b      	ldr	r4, [pc, #44]	@ (80026b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002684:	e001      	b.n	800268a <LoopFillZerobss>

08002686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002688:	3204      	adds	r2, #4

0800268a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800268a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800268c:	d3fb      	bcc.n	8002686 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800268e:	f7ff fbbd 	bl	8001e0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002692:	f004 fd3d 	bl	8007110 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002696:	f7ff fa3d 	bl	8001b14 <main>
  bx  lr    
 800269a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800269c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80026a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026a4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80026a8:	0800fed8 	.word	0x0800fed8
  ldr r2, =_sbss
 80026ac:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80026b0:	200006e8 	.word	0x200006e8

080026b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026b4:	e7fe      	b.n	80026b4 <ADC_IRQHandler>

080026b6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026ba:	2003      	movs	r0, #3
 80026bc:	f001 f88a 	bl	80037d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026c0:	200f      	movs	r0, #15
 80026c2:	f000 f805 	bl	80026d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026c6:	f7ff fb09 	bl	8001cdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026d8:	4b12      	ldr	r3, [pc, #72]	@ (8002724 <HAL_InitTick+0x54>)
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	4b12      	ldr	r3, [pc, #72]	@ (8002728 <HAL_InitTick+0x58>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	4619      	mov	r1, r3
 80026e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ee:	4618      	mov	r0, r3
 80026f0:	f001 f8a5 	bl	800383e <HAL_SYSTICK_Config>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e00e      	b.n	800271c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b0f      	cmp	r3, #15
 8002702:	d80a      	bhi.n	800271a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002704:	2200      	movs	r2, #0
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	f04f 30ff 	mov.w	r0, #4294967295
 800270c:	f001 f86d 	bl	80037ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002710:	4a06      	ldr	r2, [pc, #24]	@ (800272c <HAL_InitTick+0x5c>)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
 8002718:	e000      	b.n	800271c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
}
 800271c:	4618      	mov	r0, r3
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	20000030 	.word	0x20000030
 8002728:	20000038 	.word	0x20000038
 800272c:	20000034 	.word	0x20000034

08002730 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002734:	4b06      	ldr	r3, [pc, #24]	@ (8002750 <HAL_IncTick+0x20>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	461a      	mov	r2, r3
 800273a:	4b06      	ldr	r3, [pc, #24]	@ (8002754 <HAL_IncTick+0x24>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4413      	add	r3, r2
 8002740:	4a04      	ldr	r2, [pc, #16]	@ (8002754 <HAL_IncTick+0x24>)
 8002742:	6013      	str	r3, [r2, #0]
}
 8002744:	bf00      	nop
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	20000038 	.word	0x20000038
 8002754:	200005ac 	.word	0x200005ac

08002758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  return uwTick;
 800275c:	4b03      	ldr	r3, [pc, #12]	@ (800276c <HAL_GetTick+0x14>)
 800275e:	681b      	ldr	r3, [r3, #0]
}
 8002760:	4618      	mov	r0, r3
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	200005ac 	.word	0x200005ac

08002770 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002778:	2300      	movs	r3, #0
 800277a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e031      	b.n	80027ea <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278a:	2b00      	cmp	r3, #0
 800278c:	d109      	bne.n	80027a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7fe fd88 	bl	80012a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a6:	f003 0310 	and.w	r3, r3, #16
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d116      	bne.n	80027dc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027b2:	4b10      	ldr	r3, [pc, #64]	@ (80027f4 <HAL_ADC_Init+0x84>)
 80027b4:	4013      	ands	r3, r2
 80027b6:	f043 0202 	orr.w	r2, r3, #2
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 fa88 	bl	8002cd4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ce:	f023 0303 	bic.w	r3, r3, #3
 80027d2:	f043 0201 	orr.w	r2, r3, #1
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	641a      	str	r2, [r3, #64]	@ 0x40
 80027da:	e001      	b.n	80027e0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	ffffeefd 	.word	0xffffeefd

080027f8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800280e:	2b01      	cmp	r3, #1
 8002810:	d101      	bne.n	8002816 <HAL_ADC_Start_DMA+0x1e>
 8002812:	2302      	movs	r3, #2
 8002814:	e0d4      	b.n	80029c0 <HAL_ADC_Start_DMA+0x1c8>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b01      	cmp	r3, #1
 800282a:	d018      	beq.n	800285e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0201 	orr.w	r2, r2, #1
 800283a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800283c:	4b62      	ldr	r3, [pc, #392]	@ (80029c8 <HAL_ADC_Start_DMA+0x1d0>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a62      	ldr	r2, [pc, #392]	@ (80029cc <HAL_ADC_Start_DMA+0x1d4>)
 8002842:	fba2 2303 	umull	r2, r3, r2, r3
 8002846:	0c9a      	lsrs	r2, r3, #18
 8002848:	4613      	mov	r3, r2
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	4413      	add	r3, r2
 800284e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002850:	e002      	b.n	8002858 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	3b01      	subs	r3, #1
 8002856:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f9      	bne.n	8002852 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	2b01      	cmp	r3, #1
 800286a:	f040 809c 	bne.w	80029a6 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002872:	4b57      	ldr	r3, [pc, #348]	@ (80029d0 <HAL_ADC_Start_DMA+0x1d8>)
 8002874:	4013      	ands	r3, r2
 8002876:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002888:	2b00      	cmp	r3, #0
 800288a:	d007      	beq.n	800289c <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002890:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002894:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028a8:	d106      	bne.n	80028b8 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ae:	f023 0206 	bic.w	r2, r3, #6
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	645a      	str	r2, [r3, #68]	@ 0x44
 80028b6:	e002      	b.n	80028be <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ca:	4a42      	ldr	r2, [pc, #264]	@ (80029d4 <HAL_ADC_Start_DMA+0x1dc>)
 80028cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028d2:	4a41      	ldr	r2, [pc, #260]	@ (80029d8 <HAL_ADC_Start_DMA+0x1e0>)
 80028d4:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028da:	4a40      	ldr	r2, [pc, #256]	@ (80029dc <HAL_ADC_Start_DMA+0x1e4>)
 80028dc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80028e6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80028f6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002906:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	334c      	adds	r3, #76	@ 0x4c
 8002912:	4619      	mov	r1, r3
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f001 f92a 	bl	8003b70 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800291c:	4b30      	ldr	r3, [pc, #192]	@ (80029e0 <HAL_ADC_Start_DMA+0x1e8>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 031f 	and.w	r3, r3, #31
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10f      	bne.n	8002948 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d143      	bne.n	80029be <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002944:	609a      	str	r2, [r3, #8]
 8002946:	e03a      	b.n	80029be <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a25      	ldr	r2, [pc, #148]	@ (80029e4 <HAL_ADC_Start_DMA+0x1ec>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d10e      	bne.n	8002970 <HAL_ADC_Start_DMA+0x178>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d107      	bne.n	8002970 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689a      	ldr	r2, [r3, #8]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800296e:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002970:	4b1b      	ldr	r3, [pc, #108]	@ (80029e0 <HAL_ADC_Start_DMA+0x1e8>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f003 0310 	and.w	r3, r3, #16
 8002978:	2b00      	cmp	r3, #0
 800297a:	d120      	bne.n	80029be <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a19      	ldr	r2, [pc, #100]	@ (80029e8 <HAL_ADC_Start_DMA+0x1f0>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d11b      	bne.n	80029be <HAL_ADC_Start_DMA+0x1c6>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d114      	bne.n	80029be <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80029a2:	609a      	str	r2, [r3, #8]
 80029a4:	e00b      	b.n	80029be <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029aa:	f043 0210 	orr.w	r2, r3, #16
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b6:	f043 0201 	orr.w	r2, r3, #1
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3718      	adds	r7, #24
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	20000030 	.word	0x20000030
 80029cc:	431bde83 	.word	0x431bde83
 80029d0:	fffff8fe 	.word	0xfffff8fe
 80029d4:	08002ec9 	.word	0x08002ec9
 80029d8:	08002f83 	.word	0x08002f83
 80029dc:	08002f9f 	.word	0x08002f9f
 80029e0:	40012300 	.word	0x40012300
 80029e4:	40012000 	.word	0x40012000
 80029e8:	40012200 	.word	0x40012200

080029ec <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002a32:	2300      	movs	r3, #0
 8002a34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d101      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x1c>
 8002a40:	2302      	movs	r3, #2
 8002a42:	e136      	b.n	8002cb2 <HAL_ADC_ConfigChannel+0x28a>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2b09      	cmp	r3, #9
 8002a52:	d93a      	bls.n	8002aca <HAL_ADC_ConfigChannel+0xa2>
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002a5c:	d035      	beq.n	8002aca <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68d9      	ldr	r1, [r3, #12]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	4413      	add	r3, r2
 8002a72:	3b1e      	subs	r3, #30
 8002a74:	2207      	movs	r2, #7
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	43da      	mvns	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	400a      	ands	r2, r1
 8002a82:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a8d      	ldr	r2, [pc, #564]	@ (8002cc0 <HAL_ADC_ConfigChannel+0x298>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d10a      	bne.n	8002aa4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68d9      	ldr	r1, [r3, #12]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	061a      	lsls	r2, r3, #24
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002aa2:	e035      	b.n	8002b10 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68d9      	ldr	r1, [r3, #12]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	689a      	ldr	r2, [r3, #8]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	4403      	add	r3, r0
 8002abc:	3b1e      	subs	r3, #30
 8002abe:	409a      	lsls	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ac8:	e022      	b.n	8002b10 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6919      	ldr	r1, [r3, #16]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	4613      	mov	r3, r2
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	4413      	add	r3, r2
 8002ade:	2207      	movs	r2, #7
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	43da      	mvns	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	400a      	ands	r2, r1
 8002aec:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6919      	ldr	r1, [r3, #16]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	4618      	mov	r0, r3
 8002b00:	4603      	mov	r3, r0
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	4403      	add	r3, r0
 8002b06:	409a      	lsls	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2b06      	cmp	r3, #6
 8002b16:	d824      	bhi.n	8002b62 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	4613      	mov	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	3b05      	subs	r3, #5
 8002b2a:	221f      	movs	r2, #31
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	43da      	mvns	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	400a      	ands	r2, r1
 8002b38:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	4618      	mov	r0, r3
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4413      	add	r3, r2
 8002b52:	3b05      	subs	r3, #5
 8002b54:	fa00 f203 	lsl.w	r2, r0, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b60:	e04c      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b0c      	cmp	r3, #12
 8002b68:	d824      	bhi.n	8002bb4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	4613      	mov	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4413      	add	r3, r2
 8002b7a:	3b23      	subs	r3, #35	@ 0x23
 8002b7c:	221f      	movs	r2, #31
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	43da      	mvns	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	400a      	ands	r2, r1
 8002b8a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	4618      	mov	r0, r3
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3b23      	subs	r3, #35	@ 0x23
 8002ba6:	fa00 f203 	lsl.w	r2, r0, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bb2:	e023      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	3b41      	subs	r3, #65	@ 0x41
 8002bc6:	221f      	movs	r2, #31
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	43da      	mvns	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	400a      	ands	r2, r1
 8002bd4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	4618      	mov	r0, r3
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	4613      	mov	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	3b41      	subs	r3, #65	@ 0x41
 8002bf0:	fa00 f203 	lsl.w	r2, r0, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a30      	ldr	r2, [pc, #192]	@ (8002cc4 <HAL_ADC_ConfigChannel+0x29c>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d10a      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x1f4>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002c0e:	d105      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002c10:	4b2d      	ldr	r3, [pc, #180]	@ (8002cc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	4a2c      	ldr	r2, [pc, #176]	@ (8002cc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002c16:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002c1a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a28      	ldr	r2, [pc, #160]	@ (8002cc4 <HAL_ADC_ConfigChannel+0x29c>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d10f      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x21e>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2b12      	cmp	r3, #18
 8002c2c:	d10b      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002c2e:	4b26      	ldr	r3, [pc, #152]	@ (8002cc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	4a25      	ldr	r2, [pc, #148]	@ (8002cc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002c34:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002c38:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002c3a:	4b23      	ldr	r3, [pc, #140]	@ (8002cc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	4a22      	ldr	r2, [pc, #136]	@ (8002cc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002c40:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c44:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a1e      	ldr	r2, [pc, #120]	@ (8002cc4 <HAL_ADC_ConfigChannel+0x29c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d12b      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x280>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a1a      	ldr	r2, [pc, #104]	@ (8002cc0 <HAL_ADC_ConfigChannel+0x298>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d003      	beq.n	8002c62 <HAL_ADC_ConfigChannel+0x23a>
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2b11      	cmp	r3, #17
 8002c60:	d122      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002c62:	4b19      	ldr	r3, [pc, #100]	@ (8002cc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	4a18      	ldr	r2, [pc, #96]	@ (8002cc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002c68:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002c6c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002c6e:	4b16      	ldr	r3, [pc, #88]	@ (8002cc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	4a15      	ldr	r2, [pc, #84]	@ (8002cc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002c74:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c78:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a10      	ldr	r2, [pc, #64]	@ (8002cc0 <HAL_ADC_ConfigChannel+0x298>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d111      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002c84:	4b11      	ldr	r3, [pc, #68]	@ (8002ccc <HAL_ADC_ConfigChannel+0x2a4>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a11      	ldr	r2, [pc, #68]	@ (8002cd0 <HAL_ADC_ConfigChannel+0x2a8>)
 8002c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8e:	0c9a      	lsrs	r2, r3, #18
 8002c90:	4613      	mov	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002c9a:	e002      	b.n	8002ca2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1f9      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3714      	adds	r7, #20
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	10000012 	.word	0x10000012
 8002cc4:	40012000 	.word	0x40012000
 8002cc8:	40012300 	.word	0x40012300
 8002ccc:	20000030 	.word	0x20000030
 8002cd0:	431bde83 	.word	0x431bde83

08002cd4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002cdc:	4b78      	ldr	r3, [pc, #480]	@ (8002ec0 <ADC_Init+0x1ec>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	4a77      	ldr	r2, [pc, #476]	@ (8002ec0 <ADC_Init+0x1ec>)
 8002ce2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002ce6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002ce8:	4b75      	ldr	r3, [pc, #468]	@ (8002ec0 <ADC_Init+0x1ec>)
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	4973      	ldr	r1, [pc, #460]	@ (8002ec0 <ADC_Init+0x1ec>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6859      	ldr	r1, [r3, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	021a      	lsls	r2, r3, #8
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002d28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6859      	ldr	r1, [r3, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689a      	ldr	r2, [r3, #8]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6899      	ldr	r1, [r3, #8]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68da      	ldr	r2, [r3, #12]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d62:	4a58      	ldr	r2, [pc, #352]	@ (8002ec4 <ADC_Init+0x1f0>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d022      	beq.n	8002dae <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689a      	ldr	r2, [r3, #8]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6899      	ldr	r1, [r3, #8]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002d98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6899      	ldr	r1, [r3, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	430a      	orrs	r2, r1
 8002daa:	609a      	str	r2, [r3, #8]
 8002dac:	e00f      	b.n	8002dce <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002dbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002dcc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0202 	bic.w	r2, r2, #2
 8002ddc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6899      	ldr	r1, [r3, #8]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	005a      	lsls	r2, r3, #1
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	430a      	orrs	r2, r1
 8002df0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d01b      	beq.n	8002e34 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e0a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002e1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6859      	ldr	r1, [r3, #4]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e26:	3b01      	subs	r3, #1
 8002e28:	035a      	lsls	r2, r3, #13
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	605a      	str	r2, [r3, #4]
 8002e32:	e007      	b.n	8002e44 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e42:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002e52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	051a      	lsls	r2, r3, #20
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002e78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6899      	ldr	r1, [r3, #8]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002e86:	025a      	lsls	r2, r3, #9
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6899      	ldr	r1, [r3, #8]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	029a      	lsls	r2, r3, #10
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	609a      	str	r2, [r3, #8]
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr
 8002ec0:	40012300 	.word	0x40012300
 8002ec4:	0f000001 	.word	0x0f000001

08002ec8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ed4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eda:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d13c      	bne.n	8002f5c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d12b      	bne.n	8002f54 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d127      	bne.n	8002f54 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d006      	beq.n	8002f20 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d119      	bne.n	8002f54 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0220 	bic.w	r2, r2, #32
 8002f2e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f34:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d105      	bne.n	8002f54 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4c:	f043 0201 	orr.w	r2, r3, #1
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f7ff fd49 	bl	80029ec <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002f5a:	e00e      	b.n	8002f7a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f60:	f003 0310 	and.w	r3, r3, #16
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d003      	beq.n	8002f70 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f7ff fd53 	bl	8002a14 <HAL_ADC_ErrorCallback>
}
 8002f6e:	e004      	b.n	8002f7a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	4798      	blx	r3
}
 8002f7a:	bf00      	nop
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b084      	sub	sp, #16
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f8e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f7ff fd35 	bl	8002a00 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f96:	bf00      	nop
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b084      	sub	sp, #16
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002faa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2240      	movs	r2, #64	@ 0x40
 8002fb0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fb6:	f043 0204 	orr.w	r2, r3, #4
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f7ff fd28 	bl	8002a14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fc4:	bf00      	nop
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e0ed      	b.n	80031ba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d102      	bne.n	8002ff0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7fe fae2 	bl	80015b4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0201 	orr.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003000:	f7ff fbaa 	bl	8002758 <HAL_GetTick>
 8003004:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003006:	e012      	b.n	800302e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003008:	f7ff fba6 	bl	8002758 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b0a      	cmp	r3, #10
 8003014:	d90b      	bls.n	800302e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2205      	movs	r2, #5
 8003026:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e0c5      	b.n	80031ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b00      	cmp	r3, #0
 800303a:	d0e5      	beq.n	8003008 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0202 	bic.w	r2, r2, #2
 800304a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800304c:	f7ff fb84 	bl	8002758 <HAL_GetTick>
 8003050:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003052:	e012      	b.n	800307a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003054:	f7ff fb80 	bl	8002758 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b0a      	cmp	r3, #10
 8003060:	d90b      	bls.n	800307a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003066:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2205      	movs	r2, #5
 8003072:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e09f      	b.n	80031ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1e5      	bne.n	8003054 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	7e1b      	ldrb	r3, [r3, #24]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d108      	bne.n	80030a2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	e007      	b.n	80030b2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	7e5b      	ldrb	r3, [r3, #25]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d108      	bne.n	80030cc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	e007      	b.n	80030dc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030da:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	7e9b      	ldrb	r3, [r3, #26]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d108      	bne.n	80030f6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f042 0220 	orr.w	r2, r2, #32
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	e007      	b.n	8003106 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 0220 	bic.w	r2, r2, #32
 8003104:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	7edb      	ldrb	r3, [r3, #27]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d108      	bne.n	8003120 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 0210 	bic.w	r2, r2, #16
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	e007      	b.n	8003130 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0210 	orr.w	r2, r2, #16
 800312e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	7f1b      	ldrb	r3, [r3, #28]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d108      	bne.n	800314a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0208 	orr.w	r2, r2, #8
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	e007      	b.n	800315a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0208 	bic.w	r2, r2, #8
 8003158:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	7f5b      	ldrb	r3, [r3, #29]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d108      	bne.n	8003174 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f042 0204 	orr.w	r2, r2, #4
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	e007      	b.n	8003184 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 0204 	bic.w	r2, r2, #4
 8003182:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689a      	ldr	r2, [r3, #8]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	431a      	orrs	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	ea42 0103 	orr.w	r1, r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	1e5a      	subs	r2, r3, #1
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b08a      	sub	sp, #40	@ 0x28
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80031ca:	2300      	movs	r3, #0
 80031cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80031fe:	6a3b      	ldr	r3, [r7, #32]
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	2b00      	cmp	r3, #0
 8003206:	d07c      	beq.n	8003302 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d023      	beq.n	800325a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2201      	movs	r2, #1
 8003218:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 f983 	bl	8003530 <HAL_CAN_TxMailbox0CompleteCallback>
 800322a:	e016      	b.n	800325a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	f003 0304 	and.w	r3, r3, #4
 8003232:	2b00      	cmp	r3, #0
 8003234:	d004      	beq.n	8003240 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003238:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800323c:	627b      	str	r3, [r7, #36]	@ 0x24
 800323e:	e00c      	b.n	800325a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b00      	cmp	r3, #0
 8003248:	d004      	beq.n	8003254 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800324a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003250:	627b      	str	r3, [r7, #36]	@ 0x24
 8003252:	e002      	b.n	800325a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 f989 	bl	800356c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003260:	2b00      	cmp	r3, #0
 8003262:	d024      	beq.n	80032ae <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800326c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 f963 	bl	8003544 <HAL_CAN_TxMailbox1CompleteCallback>
 800327e:	e016      	b.n	80032ae <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003286:	2b00      	cmp	r3, #0
 8003288:	d004      	beq.n	8003294 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800328a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003290:	627b      	str	r3, [r7, #36]	@ 0x24
 8003292:	e00c      	b.n	80032ae <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800329a:	2b00      	cmp	r3, #0
 800329c:	d004      	beq.n	80032a8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800329e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80032a6:	e002      	b.n	80032ae <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 f969 	bl	8003580 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d024      	beq.n	8003302 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80032c0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d003      	beq.n	80032d4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f943 	bl	8003558 <HAL_CAN_TxMailbox2CompleteCallback>
 80032d2:	e016      	b.n	8003302 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d004      	beq.n	80032e8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80032de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80032e6:	e00c      	b.n	8003302 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d004      	beq.n	80032fc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80032f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80032fa:	e002      	b.n	8003302 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 f949 	bl	8003594 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003302:	6a3b      	ldr	r3, [r7, #32]
 8003304:	f003 0308 	and.w	r3, r3, #8
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00c      	beq.n	8003326 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	f003 0310 	and.w	r3, r3, #16
 8003312:	2b00      	cmp	r3, #0
 8003314:	d007      	beq.n	8003326 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003318:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800331c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2210      	movs	r2, #16
 8003324:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00b      	beq.n	8003348 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	f003 0308 	and.w	r3, r3, #8
 8003336:	2b00      	cmp	r3, #0
 8003338:	d006      	beq.n	8003348 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2208      	movs	r2, #8
 8003340:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f93a 	bl	80035bc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003348:	6a3b      	ldr	r3, [r7, #32]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d009      	beq.n	8003366 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	f003 0303 	and.w	r3, r3, #3
 800335c:	2b00      	cmp	r3, #0
 800335e:	d002      	beq.n	8003366 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 f921 	bl	80035a8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00c      	beq.n	800338a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	f003 0310 	and.w	r3, r3, #16
 8003376:	2b00      	cmp	r3, #0
 8003378:	d007      	beq.n	800338a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800337a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003380:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2210      	movs	r2, #16
 8003388:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800338a:	6a3b      	ldr	r3, [r7, #32]
 800338c:	f003 0320 	and.w	r3, r3, #32
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00b      	beq.n	80033ac <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	f003 0308 	and.w	r3, r3, #8
 800339a:	2b00      	cmp	r3, #0
 800339c:	d006      	beq.n	80033ac <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2208      	movs	r2, #8
 80033a4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f91c 	bl	80035e4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80033ac:	6a3b      	ldr	r3, [r7, #32]
 80033ae:	f003 0310 	and.w	r3, r3, #16
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d009      	beq.n	80033ca <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	f003 0303 	and.w	r3, r3, #3
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d002      	beq.n	80033ca <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 f903 	bl	80035d0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80033ca:	6a3b      	ldr	r3, [r7, #32]
 80033cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00b      	beq.n	80033ec <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f003 0310 	and.w	r3, r3, #16
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d006      	beq.n	80033ec <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2210      	movs	r2, #16
 80033e4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f906 	bl	80035f8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80033ec:	6a3b      	ldr	r3, [r7, #32]
 80033ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00b      	beq.n	800340e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	f003 0308 	and.w	r3, r3, #8
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d006      	beq.n	800340e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2208      	movs	r2, #8
 8003406:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 f8ff 	bl	800360c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d07b      	beq.n	8003510 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	f003 0304 	and.w	r3, r3, #4
 800341e:	2b00      	cmp	r3, #0
 8003420:	d072      	beq.n	8003508 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003428:	2b00      	cmp	r3, #0
 800342a:	d008      	beq.n	800343e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003438:	f043 0301 	orr.w	r3, r3, #1
 800343c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800343e:	6a3b      	ldr	r3, [r7, #32]
 8003440:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003444:	2b00      	cmp	r3, #0
 8003446:	d008      	beq.n	800345a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003454:	f043 0302 	orr.w	r3, r3, #2
 8003458:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800345a:	6a3b      	ldr	r3, [r7, #32]
 800345c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003460:	2b00      	cmp	r3, #0
 8003462:	d008      	beq.n	8003476 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800346e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003470:	f043 0304 	orr.w	r3, r3, #4
 8003474:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800347c:	2b00      	cmp	r3, #0
 800347e:	d043      	beq.n	8003508 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003486:	2b00      	cmp	r3, #0
 8003488:	d03e      	beq.n	8003508 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003490:	2b60      	cmp	r3, #96	@ 0x60
 8003492:	d02b      	beq.n	80034ec <HAL_CAN_IRQHandler+0x32a>
 8003494:	2b60      	cmp	r3, #96	@ 0x60
 8003496:	d82e      	bhi.n	80034f6 <HAL_CAN_IRQHandler+0x334>
 8003498:	2b50      	cmp	r3, #80	@ 0x50
 800349a:	d022      	beq.n	80034e2 <HAL_CAN_IRQHandler+0x320>
 800349c:	2b50      	cmp	r3, #80	@ 0x50
 800349e:	d82a      	bhi.n	80034f6 <HAL_CAN_IRQHandler+0x334>
 80034a0:	2b40      	cmp	r3, #64	@ 0x40
 80034a2:	d019      	beq.n	80034d8 <HAL_CAN_IRQHandler+0x316>
 80034a4:	2b40      	cmp	r3, #64	@ 0x40
 80034a6:	d826      	bhi.n	80034f6 <HAL_CAN_IRQHandler+0x334>
 80034a8:	2b30      	cmp	r3, #48	@ 0x30
 80034aa:	d010      	beq.n	80034ce <HAL_CAN_IRQHandler+0x30c>
 80034ac:	2b30      	cmp	r3, #48	@ 0x30
 80034ae:	d822      	bhi.n	80034f6 <HAL_CAN_IRQHandler+0x334>
 80034b0:	2b10      	cmp	r3, #16
 80034b2:	d002      	beq.n	80034ba <HAL_CAN_IRQHandler+0x2f8>
 80034b4:	2b20      	cmp	r3, #32
 80034b6:	d005      	beq.n	80034c4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80034b8:	e01d      	b.n	80034f6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80034ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034bc:	f043 0308 	orr.w	r3, r3, #8
 80034c0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80034c2:	e019      	b.n	80034f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80034c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c6:	f043 0310 	orr.w	r3, r3, #16
 80034ca:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80034cc:	e014      	b.n	80034f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80034ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d0:	f043 0320 	orr.w	r3, r3, #32
 80034d4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80034d6:	e00f      	b.n	80034f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80034d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034de:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80034e0:	e00a      	b.n	80034f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80034e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034e8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80034ea:	e005      	b.n	80034f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80034ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034f2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80034f4:	e000      	b.n	80034f8 <HAL_CAN_IRQHandler+0x336>
            break;
 80034f6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	699a      	ldr	r2, [r3, #24]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003506:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2204      	movs	r2, #4
 800350e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003512:	2b00      	cmp	r3, #0
 8003514:	d008      	beq.n	8003528 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800351a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351c:	431a      	orrs	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f87c 	bl	8003620 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003528:	bf00      	nop
 800352a:	3728      	adds	r7, #40	@ 0x28
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003644:	4b0b      	ldr	r3, [pc, #44]	@ (8003674 <__NVIC_SetPriorityGrouping+0x40>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003650:	4013      	ands	r3, r2
 8003652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800365c:	4b06      	ldr	r3, [pc, #24]	@ (8003678 <__NVIC_SetPriorityGrouping+0x44>)
 800365e:	4313      	orrs	r3, r2
 8003660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003662:	4a04      	ldr	r2, [pc, #16]	@ (8003674 <__NVIC_SetPriorityGrouping+0x40>)
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	60d3      	str	r3, [r2, #12]
}
 8003668:	bf00      	nop
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	e000ed00 	.word	0xe000ed00
 8003678:	05fa0000 	.word	0x05fa0000

0800367c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003680:	4b04      	ldr	r3, [pc, #16]	@ (8003694 <__NVIC_GetPriorityGrouping+0x18>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	0a1b      	lsrs	r3, r3, #8
 8003686:	f003 0307 	and.w	r3, r3, #7
}
 800368a:	4618      	mov	r0, r3
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr
 8003694:	e000ed00 	.word	0xe000ed00

08003698 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	4603      	mov	r3, r0
 80036a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	db0b      	blt.n	80036c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036aa:	79fb      	ldrb	r3, [r7, #7]
 80036ac:	f003 021f 	and.w	r2, r3, #31
 80036b0:	4907      	ldr	r1, [pc, #28]	@ (80036d0 <__NVIC_EnableIRQ+0x38>)
 80036b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b6:	095b      	lsrs	r3, r3, #5
 80036b8:	2001      	movs	r0, #1
 80036ba:	fa00 f202 	lsl.w	r2, r0, r2
 80036be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	e000e100 	.word	0xe000e100

080036d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	4603      	mov	r3, r0
 80036dc:	6039      	str	r1, [r7, #0]
 80036de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	db0a      	blt.n	80036fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	b2da      	uxtb	r2, r3
 80036ec:	490c      	ldr	r1, [pc, #48]	@ (8003720 <__NVIC_SetPriority+0x4c>)
 80036ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f2:	0112      	lsls	r2, r2, #4
 80036f4:	b2d2      	uxtb	r2, r2
 80036f6:	440b      	add	r3, r1
 80036f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036fc:	e00a      	b.n	8003714 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	b2da      	uxtb	r2, r3
 8003702:	4908      	ldr	r1, [pc, #32]	@ (8003724 <__NVIC_SetPriority+0x50>)
 8003704:	79fb      	ldrb	r3, [r7, #7]
 8003706:	f003 030f 	and.w	r3, r3, #15
 800370a:	3b04      	subs	r3, #4
 800370c:	0112      	lsls	r2, r2, #4
 800370e:	b2d2      	uxtb	r2, r2
 8003710:	440b      	add	r3, r1
 8003712:	761a      	strb	r2, [r3, #24]
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	e000e100 	.word	0xe000e100
 8003724:	e000ed00 	.word	0xe000ed00

08003728 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003728:	b480      	push	{r7}
 800372a:	b089      	sub	sp, #36	@ 0x24
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f1c3 0307 	rsb	r3, r3, #7
 8003742:	2b04      	cmp	r3, #4
 8003744:	bf28      	it	cs
 8003746:	2304      	movcs	r3, #4
 8003748:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	3304      	adds	r3, #4
 800374e:	2b06      	cmp	r3, #6
 8003750:	d902      	bls.n	8003758 <NVIC_EncodePriority+0x30>
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	3b03      	subs	r3, #3
 8003756:	e000      	b.n	800375a <NVIC_EncodePriority+0x32>
 8003758:	2300      	movs	r3, #0
 800375a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800375c:	f04f 32ff 	mov.w	r2, #4294967295
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	fa02 f303 	lsl.w	r3, r2, r3
 8003766:	43da      	mvns	r2, r3
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	401a      	ands	r2, r3
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003770:	f04f 31ff 	mov.w	r1, #4294967295
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	fa01 f303 	lsl.w	r3, r1, r3
 800377a:	43d9      	mvns	r1, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003780:	4313      	orrs	r3, r2
         );
}
 8003782:	4618      	mov	r0, r3
 8003784:	3724      	adds	r7, #36	@ 0x24
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
	...

08003790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	3b01      	subs	r3, #1
 800379c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037a0:	d301      	bcc.n	80037a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037a2:	2301      	movs	r3, #1
 80037a4:	e00f      	b.n	80037c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037a6:	4a0a      	ldr	r2, [pc, #40]	@ (80037d0 <SysTick_Config+0x40>)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037ae:	210f      	movs	r1, #15
 80037b0:	f04f 30ff 	mov.w	r0, #4294967295
 80037b4:	f7ff ff8e 	bl	80036d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037b8:	4b05      	ldr	r3, [pc, #20]	@ (80037d0 <SysTick_Config+0x40>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037be:	4b04      	ldr	r3, [pc, #16]	@ (80037d0 <SysTick_Config+0x40>)
 80037c0:	2207      	movs	r2, #7
 80037c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	e000e010 	.word	0xe000e010

080037d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f7ff ff29 	bl	8003634 <__NVIC_SetPriorityGrouping>
}
 80037e2:	bf00      	nop
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b086      	sub	sp, #24
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	4603      	mov	r3, r0
 80037f2:	60b9      	str	r1, [r7, #8]
 80037f4:	607a      	str	r2, [r7, #4]
 80037f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80037f8:	2300      	movs	r3, #0
 80037fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037fc:	f7ff ff3e 	bl	800367c <__NVIC_GetPriorityGrouping>
 8003800:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	68b9      	ldr	r1, [r7, #8]
 8003806:	6978      	ldr	r0, [r7, #20]
 8003808:	f7ff ff8e 	bl	8003728 <NVIC_EncodePriority>
 800380c:	4602      	mov	r2, r0
 800380e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003812:	4611      	mov	r1, r2
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff ff5d 	bl	80036d4 <__NVIC_SetPriority>
}
 800381a:	bf00      	nop
 800381c:	3718      	adds	r7, #24
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b082      	sub	sp, #8
 8003826:	af00      	add	r7, sp, #0
 8003828:	4603      	mov	r3, r0
 800382a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800382c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff ff31 	bl	8003698 <__NVIC_EnableIRQ>
}
 8003836:	bf00      	nop
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b082      	sub	sp, #8
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7ff ffa2 	bl	8003790 <SysTick_Config>
 800384c:	4603      	mov	r3, r0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b082      	sub	sp, #8
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e014      	b.n	8003892 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	791b      	ldrb	r3, [r3, #4]
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d105      	bne.n	800387e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f7fd ff11 	bl	80016a0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2202      	movs	r2, #2
 8003882:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b082      	sub	sp, #8
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038b0:	d120      	bne.n	80038f4 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038c0:	d118      	bne.n	80038f4 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2204      	movs	r2, #4
 80038c6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	f043 0201 	orr.w	r2, r3, #1
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80038dc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80038ec:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f82d 	bl	800394e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80038fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003902:	d120      	bne.n	8003946 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800390a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800390e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003912:	d118      	bne.n	8003946 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2204      	movs	r2, #4
 8003918:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	f043 0202 	orr.w	r2, r3, #2
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800392e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800393e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 f85d 	bl	8003a00 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8003946:	bf00      	nop
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800394e:	b480      	push	{r7}
 8003950:	b083      	sub	sp, #12
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003956:	bf00      	nop
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003962:	b480      	push	{r7}
 8003964:	b087      	sub	sp, #28
 8003966:	af00      	add	r7, sp, #0
 8003968:	60f8      	str	r0, [r7, #12]
 800396a:	60b9      	str	r1, [r7, #8]
 800396c:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	795b      	ldrb	r3, [r3, #5]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d101      	bne.n	800397a <HAL_DAC_ConfigChannel+0x18>
 8003976:	2302      	movs	r3, #2
 8003978:	e03c      	b.n	80039f4 <HAL_DAC_ConfigChannel+0x92>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2201      	movs	r2, #1
 800397e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2202      	movs	r2, #2
 8003984:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f003 0310 	and.w	r3, r3, #16
 8003994:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	43db      	mvns	r3, r3
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	4013      	ands	r3, r2
 80039a2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f003 0310 	and.w	r3, r3, #16
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	4313      	orrs	r3, r2
 80039c0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	6819      	ldr	r1, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f003 0310 	and.w	r3, r3, #16
 80039d6:	22c0      	movs	r2, #192	@ 0xc0
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	43da      	mvns	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	400a      	ands	r2, r1
 80039e4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2201      	movs	r2, #1
 80039ea:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	371c      	adds	r7, #28
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a20:	f7fe fe9a 	bl	8002758 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e099      	b.n	8003b64 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2202      	movs	r2, #2
 8003a34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0201 	bic.w	r2, r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a50:	e00f      	b.n	8003a72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a52:	f7fe fe81 	bl	8002758 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b05      	cmp	r3, #5
 8003a5e:	d908      	bls.n	8003a72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2220      	movs	r2, #32
 8003a64:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2203      	movs	r2, #3
 8003a6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e078      	b.n	8003b64 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1e8      	bne.n	8003a52 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	4b38      	ldr	r3, [pc, #224]	@ (8003b6c <HAL_DMA_Init+0x158>)
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aaa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ab6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac8:	2b04      	cmp	r3, #4
 8003aca:	d107      	bne.n	8003adc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f023 0307 	bic.w	r3, r3, #7
 8003af2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b02:	2b04      	cmp	r3, #4
 8003b04:	d117      	bne.n	8003b36 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00e      	beq.n	8003b36 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 fa77 	bl	800400c <DMA_CheckFifoParam>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d008      	beq.n	8003b36 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2240      	movs	r2, #64	@ 0x40
 8003b28:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003b32:	2301      	movs	r3, #1
 8003b34:	e016      	b.n	8003b64 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 fa2e 	bl	8003fa0 <DMA_CalcBaseAndBitshift>
 8003b44:	4603      	mov	r3, r0
 8003b46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b4c:	223f      	movs	r2, #63	@ 0x3f
 8003b4e:	409a      	lsls	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3718      	adds	r7, #24
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	e010803f 	.word	0xe010803f

08003b70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
 8003b7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b86:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d101      	bne.n	8003b96 <HAL_DMA_Start_IT+0x26>
 8003b92:	2302      	movs	r3, #2
 8003b94:	e048      	b.n	8003c28 <HAL_DMA_Start_IT+0xb8>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d137      	bne.n	8003c1a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2202      	movs	r2, #2
 8003bae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	68b9      	ldr	r1, [r7, #8]
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 f9c0 	bl	8003f44 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bc8:	223f      	movs	r2, #63	@ 0x3f
 8003bca:	409a      	lsls	r2, r3
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f042 0216 	orr.w	r2, r2, #22
 8003bde:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	695a      	ldr	r2, [r3, #20]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003bee:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d007      	beq.n	8003c08 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0208 	orr.w	r2, r2, #8
 8003c06:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0201 	orr.w	r2, r2, #1
 8003c16:	601a      	str	r2, [r3, #0]
 8003c18:	e005      	b.n	8003c26 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003c22:	2302      	movs	r3, #2
 8003c24:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3718      	adds	r7, #24
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003c3c:	4b8e      	ldr	r3, [pc, #568]	@ (8003e78 <HAL_DMA_IRQHandler+0x248>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a8e      	ldr	r2, [pc, #568]	@ (8003e7c <HAL_DMA_IRQHandler+0x24c>)
 8003c42:	fba2 2303 	umull	r2, r3, r2, r3
 8003c46:	0a9b      	lsrs	r3, r3, #10
 8003c48:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c4e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c5a:	2208      	movs	r2, #8
 8003c5c:	409a      	lsls	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	4013      	ands	r3, r2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d01a      	beq.n	8003c9c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d013      	beq.n	8003c9c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 0204 	bic.w	r2, r2, #4
 8003c82:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c88:	2208      	movs	r2, #8
 8003c8a:	409a      	lsls	r2, r3
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c94:	f043 0201 	orr.w	r2, r3, #1
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	409a      	lsls	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d012      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00b      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	409a      	lsls	r2, r3
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cca:	f043 0202 	orr.w	r2, r3, #2
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd6:	2204      	movs	r2, #4
 8003cd8:	409a      	lsls	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d012      	beq.n	8003d08 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00b      	beq.n	8003d08 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cf4:	2204      	movs	r2, #4
 8003cf6:	409a      	lsls	r2, r3
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d00:	f043 0204 	orr.w	r2, r3, #4
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d0c:	2210      	movs	r2, #16
 8003d0e:	409a      	lsls	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	4013      	ands	r3, r2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d043      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0308 	and.w	r3, r3, #8
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d03c      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d2a:	2210      	movs	r2, #16
 8003d2c:	409a      	lsls	r2, r3
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d018      	beq.n	8003d72 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d108      	bne.n	8003d60 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d024      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	4798      	blx	r3
 8003d5e:	e01f      	b.n	8003da0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d01b      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	4798      	blx	r3
 8003d70:	e016      	b.n	8003da0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d107      	bne.n	8003d90 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f022 0208 	bic.w	r2, r2, #8
 8003d8e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d003      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003da4:	2220      	movs	r2, #32
 8003da6:	409a      	lsls	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	4013      	ands	r3, r2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f000 808f 	beq.w	8003ed0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0310 	and.w	r3, r3, #16
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 8087 	beq.w	8003ed0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	409a      	lsls	r2, r3
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b05      	cmp	r3, #5
 8003dd8:	d136      	bne.n	8003e48 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f022 0216 	bic.w	r2, r2, #22
 8003de8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	695a      	ldr	r2, [r3, #20]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003df8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d103      	bne.n	8003e0a <HAL_DMA_IRQHandler+0x1da>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d007      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 0208 	bic.w	r2, r2, #8
 8003e18:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e1e:	223f      	movs	r2, #63	@ 0x3f
 8003e20:	409a      	lsls	r2, r3
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d07e      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	4798      	blx	r3
        }
        return;
 8003e46:	e079      	b.n	8003f3c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d01d      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10d      	bne.n	8003e80 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d031      	beq.n	8003ed0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	4798      	blx	r3
 8003e74:	e02c      	b.n	8003ed0 <HAL_DMA_IRQHandler+0x2a0>
 8003e76:	bf00      	nop
 8003e78:	20000030 	.word	0x20000030
 8003e7c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d023      	beq.n	8003ed0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	4798      	blx	r3
 8003e90:	e01e      	b.n	8003ed0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10f      	bne.n	8003ec0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 0210 	bic.w	r2, r2, #16
 8003eae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d003      	beq.n	8003ed0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d032      	beq.n	8003f3e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d022      	beq.n	8003f2a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2205      	movs	r2, #5
 8003ee8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 0201 	bic.w	r2, r2, #1
 8003efa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	3301      	adds	r3, #1
 8003f00:	60bb      	str	r3, [r7, #8]
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d307      	bcc.n	8003f18 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1f2      	bne.n	8003efc <HAL_DMA_IRQHandler+0x2cc>
 8003f16:	e000      	b.n	8003f1a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003f18:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d005      	beq.n	8003f3e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	4798      	blx	r3
 8003f3a:	e000      	b.n	8003f3e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003f3c:	bf00      	nop
    }
  }
}
 8003f3e:	3718      	adds	r7, #24
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
 8003f50:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003f60:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	2b40      	cmp	r3, #64	@ 0x40
 8003f70:	d108      	bne.n	8003f84 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f82:	e007      	b.n	8003f94 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	60da      	str	r2, [r3, #12]
}
 8003f94:	bf00      	nop
 8003f96:	3714      	adds	r7, #20
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	3b10      	subs	r3, #16
 8003fb0:	4a13      	ldr	r2, [pc, #76]	@ (8004000 <DMA_CalcBaseAndBitshift+0x60>)
 8003fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb6:	091b      	lsrs	r3, r3, #4
 8003fb8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003fba:	4a12      	ldr	r2, [pc, #72]	@ (8004004 <DMA_CalcBaseAndBitshift+0x64>)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2b03      	cmp	r3, #3
 8003fcc:	d908      	bls.n	8003fe0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8004008 <DMA_CalcBaseAndBitshift+0x68>)
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	1d1a      	adds	r2, r3, #4
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	659a      	str	r2, [r3, #88]	@ 0x58
 8003fde:	e006      	b.n	8003fee <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	4b08      	ldr	r3, [pc, #32]	@ (8004008 <DMA_CalcBaseAndBitshift+0x68>)
 8003fe8:	4013      	ands	r3, r2
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3714      	adds	r7, #20
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	aaaaaaab 	.word	0xaaaaaaab
 8004004:	0800fd80 	.word	0x0800fd80
 8004008:	fffffc00 	.word	0xfffffc00

0800400c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004014:	2300      	movs	r3, #0
 8004016:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d11f      	bne.n	8004066 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	2b03      	cmp	r3, #3
 800402a:	d856      	bhi.n	80040da <DMA_CheckFifoParam+0xce>
 800402c:	a201      	add	r2, pc, #4	@ (adr r2, 8004034 <DMA_CheckFifoParam+0x28>)
 800402e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004032:	bf00      	nop
 8004034:	08004045 	.word	0x08004045
 8004038:	08004057 	.word	0x08004057
 800403c:	08004045 	.word	0x08004045
 8004040:	080040db 	.word	0x080040db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004048:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d046      	beq.n	80040de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004054:	e043      	b.n	80040de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800405a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800405e:	d140      	bne.n	80040e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004064:	e03d      	b.n	80040e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800406e:	d121      	bne.n	80040b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	2b03      	cmp	r3, #3
 8004074:	d837      	bhi.n	80040e6 <DMA_CheckFifoParam+0xda>
 8004076:	a201      	add	r2, pc, #4	@ (adr r2, 800407c <DMA_CheckFifoParam+0x70>)
 8004078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800407c:	0800408d 	.word	0x0800408d
 8004080:	08004093 	.word	0x08004093
 8004084:	0800408d 	.word	0x0800408d
 8004088:	080040a5 	.word	0x080040a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	73fb      	strb	r3, [r7, #15]
      break;
 8004090:	e030      	b.n	80040f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004096:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d025      	beq.n	80040ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040a2:	e022      	b.n	80040ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80040ac:	d11f      	bne.n	80040ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80040b2:	e01c      	b.n	80040ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d903      	bls.n	80040c2 <DMA_CheckFifoParam+0xb6>
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	2b03      	cmp	r3, #3
 80040be:	d003      	beq.n	80040c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80040c0:	e018      	b.n	80040f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	73fb      	strb	r3, [r7, #15]
      break;
 80040c6:	e015      	b.n	80040f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00e      	beq.n	80040f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	73fb      	strb	r3, [r7, #15]
      break;
 80040d8:	e00b      	b.n	80040f2 <DMA_CheckFifoParam+0xe6>
      break;
 80040da:	bf00      	nop
 80040dc:	e00a      	b.n	80040f4 <DMA_CheckFifoParam+0xe8>
      break;
 80040de:	bf00      	nop
 80040e0:	e008      	b.n	80040f4 <DMA_CheckFifoParam+0xe8>
      break;
 80040e2:	bf00      	nop
 80040e4:	e006      	b.n	80040f4 <DMA_CheckFifoParam+0xe8>
      break;
 80040e6:	bf00      	nop
 80040e8:	e004      	b.n	80040f4 <DMA_CheckFifoParam+0xe8>
      break;
 80040ea:	bf00      	nop
 80040ec:	e002      	b.n	80040f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80040ee:	bf00      	nop
 80040f0:	e000      	b.n	80040f4 <DMA_CheckFifoParam+0xe8>
      break;
 80040f2:	bf00      	nop
    }
  } 
  
  return status; 
 80040f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop

08004104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004104:	b480      	push	{r7}
 8004106:	b089      	sub	sp, #36	@ 0x24
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800410e:	2300      	movs	r3, #0
 8004110:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004112:	2300      	movs	r3, #0
 8004114:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004116:	2300      	movs	r3, #0
 8004118:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800411a:	2300      	movs	r3, #0
 800411c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800411e:	2300      	movs	r3, #0
 8004120:	61fb      	str	r3, [r7, #28]
 8004122:	e175      	b.n	8004410 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004124:	2201      	movs	r2, #1
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	fa02 f303 	lsl.w	r3, r2, r3
 800412c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	4013      	ands	r3, r2
 8004136:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	429a      	cmp	r2, r3
 800413e:	f040 8164 	bne.w	800440a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f003 0303 	and.w	r3, r3, #3
 800414a:	2b01      	cmp	r3, #1
 800414c:	d005      	beq.n	800415a <HAL_GPIO_Init+0x56>
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f003 0303 	and.w	r3, r3, #3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d130      	bne.n	80041bc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	2203      	movs	r2, #3
 8004166:	fa02 f303 	lsl.w	r3, r2, r3
 800416a:	43db      	mvns	r3, r3
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	4013      	ands	r3, r2
 8004170:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	68da      	ldr	r2, [r3, #12]
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	fa02 f303 	lsl.w	r3, r2, r3
 800417e:	69ba      	ldr	r2, [r7, #24]
 8004180:	4313      	orrs	r3, r2
 8004182:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004190:	2201      	movs	r2, #1
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	43db      	mvns	r3, r3
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	4013      	ands	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	091b      	lsrs	r3, r3, #4
 80041a6:	f003 0201 	and.w	r2, r3, #1
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	fa02 f303 	lsl.w	r3, r2, r3
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f003 0303 	and.w	r3, r3, #3
 80041c4:	2b03      	cmp	r3, #3
 80041c6:	d017      	beq.n	80041f8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	2203      	movs	r2, #3
 80041d4:	fa02 f303 	lsl.w	r3, r2, r3
 80041d8:	43db      	mvns	r3, r3
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	4013      	ands	r3, r2
 80041de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	689a      	ldr	r2, [r3, #8]
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ec:	69ba      	ldr	r2, [r7, #24]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f003 0303 	and.w	r3, r3, #3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d123      	bne.n	800424c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	08da      	lsrs	r2, r3, #3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	3208      	adds	r2, #8
 800420c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	220f      	movs	r2, #15
 800421c:	fa02 f303 	lsl.w	r3, r2, r3
 8004220:	43db      	mvns	r3, r3
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	4013      	ands	r3, r2
 8004226:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	691a      	ldr	r2, [r3, #16]
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	f003 0307 	and.w	r3, r3, #7
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	fa02 f303 	lsl.w	r3, r2, r3
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	4313      	orrs	r3, r2
 800423c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	08da      	lsrs	r2, r3, #3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	3208      	adds	r2, #8
 8004246:	69b9      	ldr	r1, [r7, #24]
 8004248:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	2203      	movs	r2, #3
 8004258:	fa02 f303 	lsl.w	r3, r2, r3
 800425c:	43db      	mvns	r3, r3
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	4013      	ands	r3, r2
 8004262:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f003 0203 	and.w	r2, r3, #3
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	4313      	orrs	r3, r2
 8004278:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 80be 	beq.w	800440a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800428e:	4b66      	ldr	r3, [pc, #408]	@ (8004428 <HAL_GPIO_Init+0x324>)
 8004290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004292:	4a65      	ldr	r2, [pc, #404]	@ (8004428 <HAL_GPIO_Init+0x324>)
 8004294:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004298:	6453      	str	r3, [r2, #68]	@ 0x44
 800429a:	4b63      	ldr	r3, [pc, #396]	@ (8004428 <HAL_GPIO_Init+0x324>)
 800429c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800429e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042a2:	60fb      	str	r3, [r7, #12]
 80042a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80042a6:	4a61      	ldr	r2, [pc, #388]	@ (800442c <HAL_GPIO_Init+0x328>)
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	089b      	lsrs	r3, r3, #2
 80042ac:	3302      	adds	r3, #2
 80042ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	f003 0303 	and.w	r3, r3, #3
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	220f      	movs	r2, #15
 80042be:	fa02 f303 	lsl.w	r3, r2, r3
 80042c2:	43db      	mvns	r3, r3
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	4013      	ands	r3, r2
 80042c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a58      	ldr	r2, [pc, #352]	@ (8004430 <HAL_GPIO_Init+0x32c>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d037      	beq.n	8004342 <HAL_GPIO_Init+0x23e>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a57      	ldr	r2, [pc, #348]	@ (8004434 <HAL_GPIO_Init+0x330>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d031      	beq.n	800433e <HAL_GPIO_Init+0x23a>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a56      	ldr	r2, [pc, #344]	@ (8004438 <HAL_GPIO_Init+0x334>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d02b      	beq.n	800433a <HAL_GPIO_Init+0x236>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a55      	ldr	r2, [pc, #340]	@ (800443c <HAL_GPIO_Init+0x338>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d025      	beq.n	8004336 <HAL_GPIO_Init+0x232>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a54      	ldr	r2, [pc, #336]	@ (8004440 <HAL_GPIO_Init+0x33c>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d01f      	beq.n	8004332 <HAL_GPIO_Init+0x22e>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a53      	ldr	r2, [pc, #332]	@ (8004444 <HAL_GPIO_Init+0x340>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d019      	beq.n	800432e <HAL_GPIO_Init+0x22a>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a52      	ldr	r2, [pc, #328]	@ (8004448 <HAL_GPIO_Init+0x344>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d013      	beq.n	800432a <HAL_GPIO_Init+0x226>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a51      	ldr	r2, [pc, #324]	@ (800444c <HAL_GPIO_Init+0x348>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d00d      	beq.n	8004326 <HAL_GPIO_Init+0x222>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a50      	ldr	r2, [pc, #320]	@ (8004450 <HAL_GPIO_Init+0x34c>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d007      	beq.n	8004322 <HAL_GPIO_Init+0x21e>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a4f      	ldr	r2, [pc, #316]	@ (8004454 <HAL_GPIO_Init+0x350>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d101      	bne.n	800431e <HAL_GPIO_Init+0x21a>
 800431a:	2309      	movs	r3, #9
 800431c:	e012      	b.n	8004344 <HAL_GPIO_Init+0x240>
 800431e:	230a      	movs	r3, #10
 8004320:	e010      	b.n	8004344 <HAL_GPIO_Init+0x240>
 8004322:	2308      	movs	r3, #8
 8004324:	e00e      	b.n	8004344 <HAL_GPIO_Init+0x240>
 8004326:	2307      	movs	r3, #7
 8004328:	e00c      	b.n	8004344 <HAL_GPIO_Init+0x240>
 800432a:	2306      	movs	r3, #6
 800432c:	e00a      	b.n	8004344 <HAL_GPIO_Init+0x240>
 800432e:	2305      	movs	r3, #5
 8004330:	e008      	b.n	8004344 <HAL_GPIO_Init+0x240>
 8004332:	2304      	movs	r3, #4
 8004334:	e006      	b.n	8004344 <HAL_GPIO_Init+0x240>
 8004336:	2303      	movs	r3, #3
 8004338:	e004      	b.n	8004344 <HAL_GPIO_Init+0x240>
 800433a:	2302      	movs	r3, #2
 800433c:	e002      	b.n	8004344 <HAL_GPIO_Init+0x240>
 800433e:	2301      	movs	r3, #1
 8004340:	e000      	b.n	8004344 <HAL_GPIO_Init+0x240>
 8004342:	2300      	movs	r3, #0
 8004344:	69fa      	ldr	r2, [r7, #28]
 8004346:	f002 0203 	and.w	r2, r2, #3
 800434a:	0092      	lsls	r2, r2, #2
 800434c:	4093      	lsls	r3, r2
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	4313      	orrs	r3, r2
 8004352:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004354:	4935      	ldr	r1, [pc, #212]	@ (800442c <HAL_GPIO_Init+0x328>)
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	089b      	lsrs	r3, r3, #2
 800435a:	3302      	adds	r3, #2
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004362:	4b3d      	ldr	r3, [pc, #244]	@ (8004458 <HAL_GPIO_Init+0x354>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	43db      	mvns	r3, r3
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	4013      	ands	r3, r2
 8004370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	4313      	orrs	r3, r2
 8004384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004386:	4a34      	ldr	r2, [pc, #208]	@ (8004458 <HAL_GPIO_Init+0x354>)
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800438c:	4b32      	ldr	r3, [pc, #200]	@ (8004458 <HAL_GPIO_Init+0x354>)
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	43db      	mvns	r3, r3
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	4013      	ands	r3, r2
 800439a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d003      	beq.n	80043b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043b0:	4a29      	ldr	r2, [pc, #164]	@ (8004458 <HAL_GPIO_Init+0x354>)
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80043b6:	4b28      	ldr	r3, [pc, #160]	@ (8004458 <HAL_GPIO_Init+0x354>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	43db      	mvns	r3, r3
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	4013      	ands	r3, r2
 80043c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80043d2:	69ba      	ldr	r2, [r7, #24]
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80043da:	4a1f      	ldr	r2, [pc, #124]	@ (8004458 <HAL_GPIO_Init+0x354>)
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043e0:	4b1d      	ldr	r3, [pc, #116]	@ (8004458 <HAL_GPIO_Init+0x354>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	43db      	mvns	r3, r3
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	4013      	ands	r3, r2
 80043ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d003      	beq.n	8004404 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	4313      	orrs	r3, r2
 8004402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004404:	4a14      	ldr	r2, [pc, #80]	@ (8004458 <HAL_GPIO_Init+0x354>)
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	3301      	adds	r3, #1
 800440e:	61fb      	str	r3, [r7, #28]
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	2b0f      	cmp	r3, #15
 8004414:	f67f ae86 	bls.w	8004124 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004418:	bf00      	nop
 800441a:	bf00      	nop
 800441c:	3724      	adds	r7, #36	@ 0x24
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	40023800 	.word	0x40023800
 800442c:	40013800 	.word	0x40013800
 8004430:	40020000 	.word	0x40020000
 8004434:	40020400 	.word	0x40020400
 8004438:	40020800 	.word	0x40020800
 800443c:	40020c00 	.word	0x40020c00
 8004440:	40021000 	.word	0x40021000
 8004444:	40021400 	.word	0x40021400
 8004448:	40021800 	.word	0x40021800
 800444c:	40021c00 	.word	0x40021c00
 8004450:	40022000 	.word	0x40022000
 8004454:	40022400 	.word	0x40022400
 8004458:	40013c00 	.word	0x40013c00

0800445c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	460b      	mov	r3, r1
 8004466:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	691a      	ldr	r2, [r3, #16]
 800446c:	887b      	ldrh	r3, [r7, #2]
 800446e:	4013      	ands	r3, r2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d002      	beq.n	800447a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004474:	2301      	movs	r3, #1
 8004476:	73fb      	strb	r3, [r7, #15]
 8004478:	e001      	b.n	800447e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800447a:	2300      	movs	r3, #0
 800447c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800447e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004480:	4618      	mov	r0, r3
 8004482:	3714      	adds	r7, #20
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	460b      	mov	r3, r1
 8004496:	807b      	strh	r3, [r7, #2]
 8004498:	4613      	mov	r3, r2
 800449a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800449c:	787b      	ldrb	r3, [r7, #1]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044a2:	887a      	ldrh	r2, [r7, #2]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80044a8:	e003      	b.n	80044b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80044aa:	887b      	ldrh	r3, [r7, #2]
 80044ac:	041a      	lsls	r2, r3, #16
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	619a      	str	r2, [r3, #24]
}
 80044b2:	bf00      	nop
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
	...

080044c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e07f      	b.n	80045d2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d106      	bne.n	80044ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f7fd fab6 	bl	8001a58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2224      	movs	r2, #36	@ 0x24
 80044f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 0201 	bic.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004510:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689a      	ldr	r2, [r3, #8]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004520:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d107      	bne.n	800453a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	689a      	ldr	r2, [r3, #8]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004536:	609a      	str	r2, [r3, #8]
 8004538:	e006      	b.n	8004548 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	689a      	ldr	r2, [r3, #8]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004546:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	2b02      	cmp	r3, #2
 800454e:	d104      	bne.n	800455a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004558:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6859      	ldr	r1, [r3, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	4b1d      	ldr	r3, [pc, #116]	@ (80045dc <HAL_I2C_Init+0x11c>)
 8004566:	430b      	orrs	r3, r1
 8004568:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68da      	ldr	r2, [r3, #12]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004578:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	691a      	ldr	r2, [r3, #16]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	430a      	orrs	r2, r1
 8004592:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	69d9      	ldr	r1, [r3, #28]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a1a      	ldr	r2, [r3, #32]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	430a      	orrs	r2, r1
 80045a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f042 0201 	orr.w	r2, r2, #1
 80045b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2220      	movs	r2, #32
 80045be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	02008000 	.word	0x02008000

080045e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b20      	cmp	r3, #32
 80045f4:	d138      	bne.n	8004668 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d101      	bne.n	8004604 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004600:	2302      	movs	r3, #2
 8004602:	e032      	b.n	800466a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2224      	movs	r2, #36	@ 0x24
 8004610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0201 	bic.w	r2, r2, #1
 8004622:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004632:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6819      	ldr	r1, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f042 0201 	orr.w	r2, r2, #1
 8004652:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2220      	movs	r2, #32
 8004658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004664:	2300      	movs	r3, #0
 8004666:	e000      	b.n	800466a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004668:	2302      	movs	r3, #2
  }
}
 800466a:	4618      	mov	r0, r3
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr

08004676 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004676:	b480      	push	{r7}
 8004678:	b085      	sub	sp, #20
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
 800467e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b20      	cmp	r3, #32
 800468a:	d139      	bne.n	8004700 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004692:	2b01      	cmp	r3, #1
 8004694:	d101      	bne.n	800469a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004696:	2302      	movs	r3, #2
 8004698:	e033      	b.n	8004702 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2224      	movs	r2, #36	@ 0x24
 80046a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 0201 	bic.w	r2, r2, #1
 80046b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80046c8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	021b      	lsls	r3, r3, #8
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 0201 	orr.w	r2, r2, #1
 80046ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2220      	movs	r2, #32
 80046f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80046fc:	2300      	movs	r3, #0
 80046fe:	e000      	b.n	8004702 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004700:	2302      	movs	r3, #2
  }
}
 8004702:	4618      	mov	r0, r3
 8004704:	3714      	adds	r7, #20
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
	...

08004710 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004716:	2300      	movs	r3, #0
 8004718:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800471a:	4b23      	ldr	r3, [pc, #140]	@ (80047a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800471c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471e:	4a22      	ldr	r2, [pc, #136]	@ (80047a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004720:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004724:	6413      	str	r3, [r2, #64]	@ 0x40
 8004726:	4b20      	ldr	r3, [pc, #128]	@ (80047a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800472e:	603b      	str	r3, [r7, #0]
 8004730:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004732:	4b1e      	ldr	r3, [pc, #120]	@ (80047ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a1d      	ldr	r2, [pc, #116]	@ (80047ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8004738:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800473c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800473e:	f7fe f80b 	bl	8002758 <HAL_GetTick>
 8004742:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004744:	e009      	b.n	800475a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004746:	f7fe f807 	bl	8002758 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004754:	d901      	bls.n	800475a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e022      	b.n	80047a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800475a:	4b14      	ldr	r3, [pc, #80]	@ (80047ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004762:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004766:	d1ee      	bne.n	8004746 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004768:	4b10      	ldr	r3, [pc, #64]	@ (80047ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a0f      	ldr	r2, [pc, #60]	@ (80047ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800476e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004772:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004774:	f7fd fff0 	bl	8002758 <HAL_GetTick>
 8004778:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800477a:	e009      	b.n	8004790 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800477c:	f7fd ffec 	bl	8002758 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800478a:	d901      	bls.n	8004790 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e007      	b.n	80047a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004790:	4b06      	ldr	r3, [pc, #24]	@ (80047ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004798:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800479c:	d1ee      	bne.n	800477c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3708      	adds	r7, #8
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	40023800 	.word	0x40023800
 80047ac:	40007000 	.word	0x40007000

080047b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80047b8:	2300      	movs	r3, #0
 80047ba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e29b      	b.n	8004cfe <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f000 8087 	beq.w	80048e2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80047d4:	4b96      	ldr	r3, [pc, #600]	@ (8004a30 <HAL_RCC_OscConfig+0x280>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f003 030c 	and.w	r3, r3, #12
 80047dc:	2b04      	cmp	r3, #4
 80047de:	d00c      	beq.n	80047fa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047e0:	4b93      	ldr	r3, [pc, #588]	@ (8004a30 <HAL_RCC_OscConfig+0x280>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f003 030c 	and.w	r3, r3, #12
 80047e8:	2b08      	cmp	r3, #8
 80047ea:	d112      	bne.n	8004812 <HAL_RCC_OscConfig+0x62>
 80047ec:	4b90      	ldr	r3, [pc, #576]	@ (8004a30 <HAL_RCC_OscConfig+0x280>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047f8:	d10b      	bne.n	8004812 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047fa:	4b8d      	ldr	r3, [pc, #564]	@ (8004a30 <HAL_RCC_OscConfig+0x280>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d06c      	beq.n	80048e0 <HAL_RCC_OscConfig+0x130>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d168      	bne.n	80048e0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e275      	b.n	8004cfe <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800481a:	d106      	bne.n	800482a <HAL_RCC_OscConfig+0x7a>
 800481c:	4b84      	ldr	r3, [pc, #528]	@ (8004a30 <HAL_RCC_OscConfig+0x280>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a83      	ldr	r2, [pc, #524]	@ (8004a30 <HAL_RCC_OscConfig+0x280>)
 8004822:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004826:	6013      	str	r3, [r2, #0]
 8004828:	e02e      	b.n	8004888 <HAL_RCC_OscConfig+0xd8>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10c      	bne.n	800484c <HAL_RCC_OscConfig+0x9c>
 8004832:	4b7f      	ldr	r3, [pc, #508]	@ (8004a30 <HAL_RCC_OscConfig+0x280>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a7e      	ldr	r2, [pc, #504]	@ (8004a30 <HAL_RCC_OscConfig+0x280>)
 8004838:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800483c:	6013      	str	r3, [r2, #0]
 800483e:	4b7c      	ldr	r3, [pc, #496]	@ (8004a30 <HAL_RCC_OscConfig+0x280>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a7b      	ldr	r2, [pc, #492]	@ (8004a30 <HAL_RCC_OscConfig+0x280>)
 8004844:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004848:	6013      	str	r3, [r2, #0]
 800484a:	e01d      	b.n	8004888 <HAL_RCC_OscConfig+0xd8>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004854:	d10c      	bne.n	8004870 <HAL_RCC_OscConfig+0xc0>
 8004856:	4b76      	ldr	r3, [pc, #472]	@ (8004a30 <HAL_RCC_OscConfig+0x280>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a75      	ldr	r2, [pc, #468]	@ (8004a30 <HAL_RCC_OscConfig+0x280>)
 800485c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004860:	6013      	str	r3, [r2, #0]
 8004862:	4b73      	ldr	r3, [pc, #460]	@ (8004a30 <HAL_RCC_OscConfig+0x280>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a72      	ldr	r2, [pc, #456]	@ (8004a30 <HAL_RCC_OscConfig+0x280>)
 8004868:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800486c:	6013      	str	r3, [r2, #0]
 800486e:	e00b      	b.n	8004888 <HAL_RCC_OscConfig+0xd8>
 8004870:	4b6f      	ldr	r3, [pc, #444]	@ (8004a30 <HAL_RCC_OscConfig+0x280>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a6e      	ldr	r2, [pc, #440]	@ (8004a30 <HAL_RCC_OscConfig+0x280>)
 8004876:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800487a:	6013      	str	r3, [r2, #0]
 800487c:	4b6c      	ldr	r3, [pc, #432]	@ (8004a30 <HAL_RCC_OscConfig+0x280>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a6b      	ldr	r2, [pc, #428]	@ (8004a30 <HAL_RCC_OscConfig+0x280>)
 8004882:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d013      	beq.n	80048b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004890:	f7fd ff62 	bl	8002758 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004898:	f7fd ff5e 	bl	8002758 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b64      	cmp	r3, #100	@ 0x64
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e229      	b.n	8004cfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048aa:	4b61      	ldr	r3, [pc, #388]	@ (8004a30 <HAL_RCC_OscConfig+0x280>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d0f0      	beq.n	8004898 <HAL_RCC_OscConfig+0xe8>
 80048b6:	e014      	b.n	80048e2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b8:	f7fd ff4e 	bl	8002758 <HAL_GetTick>
 80048bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048be:	e008      	b.n	80048d2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048c0:	f7fd ff4a 	bl	8002758 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b64      	cmp	r3, #100	@ 0x64
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e215      	b.n	8004cfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048d2:	4b57      	ldr	r3, [pc, #348]	@ (8004a30 <HAL_RCC_OscConfig+0x280>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1f0      	bne.n	80048c0 <HAL_RCC_OscConfig+0x110>
 80048de:	e000      	b.n	80048e2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d069      	beq.n	80049c2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80048ee:	4b50      	ldr	r3, [pc, #320]	@ (8004a30 <HAL_RCC_OscConfig+0x280>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f003 030c 	and.w	r3, r3, #12
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00b      	beq.n	8004912 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048fa:	4b4d      	ldr	r3, [pc, #308]	@ (8004a30 <HAL_RCC_OscConfig+0x280>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f003 030c 	and.w	r3, r3, #12
 8004902:	2b08      	cmp	r3, #8
 8004904:	d11c      	bne.n	8004940 <HAL_RCC_OscConfig+0x190>
 8004906:	4b4a      	ldr	r3, [pc, #296]	@ (8004a30 <HAL_RCC_OscConfig+0x280>)
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d116      	bne.n	8004940 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004912:	4b47      	ldr	r3, [pc, #284]	@ (8004a30 <HAL_RCC_OscConfig+0x280>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d005      	beq.n	800492a <HAL_RCC_OscConfig+0x17a>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d001      	beq.n	800492a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e1e9      	b.n	8004cfe <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800492a:	4b41      	ldr	r3, [pc, #260]	@ (8004a30 <HAL_RCC_OscConfig+0x280>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	00db      	lsls	r3, r3, #3
 8004938:	493d      	ldr	r1, [pc, #244]	@ (8004a30 <HAL_RCC_OscConfig+0x280>)
 800493a:	4313      	orrs	r3, r2
 800493c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800493e:	e040      	b.n	80049c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d023      	beq.n	8004990 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004948:	4b39      	ldr	r3, [pc, #228]	@ (8004a30 <HAL_RCC_OscConfig+0x280>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a38      	ldr	r2, [pc, #224]	@ (8004a30 <HAL_RCC_OscConfig+0x280>)
 800494e:	f043 0301 	orr.w	r3, r3, #1
 8004952:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004954:	f7fd ff00 	bl	8002758 <HAL_GetTick>
 8004958:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800495a:	e008      	b.n	800496e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800495c:	f7fd fefc 	bl	8002758 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b02      	cmp	r3, #2
 8004968:	d901      	bls.n	800496e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e1c7      	b.n	8004cfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800496e:	4b30      	ldr	r3, [pc, #192]	@ (8004a30 <HAL_RCC_OscConfig+0x280>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d0f0      	beq.n	800495c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800497a:	4b2d      	ldr	r3, [pc, #180]	@ (8004a30 <HAL_RCC_OscConfig+0x280>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	4929      	ldr	r1, [pc, #164]	@ (8004a30 <HAL_RCC_OscConfig+0x280>)
 800498a:	4313      	orrs	r3, r2
 800498c:	600b      	str	r3, [r1, #0]
 800498e:	e018      	b.n	80049c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004990:	4b27      	ldr	r3, [pc, #156]	@ (8004a30 <HAL_RCC_OscConfig+0x280>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a26      	ldr	r2, [pc, #152]	@ (8004a30 <HAL_RCC_OscConfig+0x280>)
 8004996:	f023 0301 	bic.w	r3, r3, #1
 800499a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800499c:	f7fd fedc 	bl	8002758 <HAL_GetTick>
 80049a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049a2:	e008      	b.n	80049b6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049a4:	f7fd fed8 	bl	8002758 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e1a3      	b.n	8004cfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049b6:	4b1e      	ldr	r3, [pc, #120]	@ (8004a30 <HAL_RCC_OscConfig+0x280>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1f0      	bne.n	80049a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0308 	and.w	r3, r3, #8
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d038      	beq.n	8004a40 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d019      	beq.n	8004a0a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049d6:	4b16      	ldr	r3, [pc, #88]	@ (8004a30 <HAL_RCC_OscConfig+0x280>)
 80049d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049da:	4a15      	ldr	r2, [pc, #84]	@ (8004a30 <HAL_RCC_OscConfig+0x280>)
 80049dc:	f043 0301 	orr.w	r3, r3, #1
 80049e0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e2:	f7fd feb9 	bl	8002758 <HAL_GetTick>
 80049e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049e8:	e008      	b.n	80049fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049ea:	f7fd feb5 	bl	8002758 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d901      	bls.n	80049fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e180      	b.n	8004cfe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004a30 <HAL_RCC_OscConfig+0x280>)
 80049fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a00:	f003 0302 	and.w	r3, r3, #2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d0f0      	beq.n	80049ea <HAL_RCC_OscConfig+0x23a>
 8004a08:	e01a      	b.n	8004a40 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a0a:	4b09      	ldr	r3, [pc, #36]	@ (8004a30 <HAL_RCC_OscConfig+0x280>)
 8004a0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a0e:	4a08      	ldr	r2, [pc, #32]	@ (8004a30 <HAL_RCC_OscConfig+0x280>)
 8004a10:	f023 0301 	bic.w	r3, r3, #1
 8004a14:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a16:	f7fd fe9f 	bl	8002758 <HAL_GetTick>
 8004a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a1c:	e00a      	b.n	8004a34 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a1e:	f7fd fe9b 	bl	8002758 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d903      	bls.n	8004a34 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e166      	b.n	8004cfe <HAL_RCC_OscConfig+0x54e>
 8004a30:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a34:	4b92      	ldr	r3, [pc, #584]	@ (8004c80 <HAL_RCC_OscConfig+0x4d0>)
 8004a36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1ee      	bne.n	8004a1e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0304 	and.w	r3, r3, #4
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f000 80a4 	beq.w	8004b96 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a4e:	4b8c      	ldr	r3, [pc, #560]	@ (8004c80 <HAL_RCC_OscConfig+0x4d0>)
 8004a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10d      	bne.n	8004a76 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a5a:	4b89      	ldr	r3, [pc, #548]	@ (8004c80 <HAL_RCC_OscConfig+0x4d0>)
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5e:	4a88      	ldr	r2, [pc, #544]	@ (8004c80 <HAL_RCC_OscConfig+0x4d0>)
 8004a60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a64:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a66:	4b86      	ldr	r3, [pc, #536]	@ (8004c80 <HAL_RCC_OscConfig+0x4d0>)
 8004a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a6e:	60bb      	str	r3, [r7, #8]
 8004a70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a72:	2301      	movs	r3, #1
 8004a74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a76:	4b83      	ldr	r3, [pc, #524]	@ (8004c84 <HAL_RCC_OscConfig+0x4d4>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d118      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004a82:	4b80      	ldr	r3, [pc, #512]	@ (8004c84 <HAL_RCC_OscConfig+0x4d4>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a7f      	ldr	r2, [pc, #508]	@ (8004c84 <HAL_RCC_OscConfig+0x4d4>)
 8004a88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a8e:	f7fd fe63 	bl	8002758 <HAL_GetTick>
 8004a92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a94:	e008      	b.n	8004aa8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a96:	f7fd fe5f 	bl	8002758 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b64      	cmp	r3, #100	@ 0x64
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e12a      	b.n	8004cfe <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004aa8:	4b76      	ldr	r3, [pc, #472]	@ (8004c84 <HAL_RCC_OscConfig+0x4d4>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d0f0      	beq.n	8004a96 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d106      	bne.n	8004aca <HAL_RCC_OscConfig+0x31a>
 8004abc:	4b70      	ldr	r3, [pc, #448]	@ (8004c80 <HAL_RCC_OscConfig+0x4d0>)
 8004abe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ac0:	4a6f      	ldr	r2, [pc, #444]	@ (8004c80 <HAL_RCC_OscConfig+0x4d0>)
 8004ac2:	f043 0301 	orr.w	r3, r3, #1
 8004ac6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ac8:	e02d      	b.n	8004b26 <HAL_RCC_OscConfig+0x376>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10c      	bne.n	8004aec <HAL_RCC_OscConfig+0x33c>
 8004ad2:	4b6b      	ldr	r3, [pc, #428]	@ (8004c80 <HAL_RCC_OscConfig+0x4d0>)
 8004ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ad6:	4a6a      	ldr	r2, [pc, #424]	@ (8004c80 <HAL_RCC_OscConfig+0x4d0>)
 8004ad8:	f023 0301 	bic.w	r3, r3, #1
 8004adc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ade:	4b68      	ldr	r3, [pc, #416]	@ (8004c80 <HAL_RCC_OscConfig+0x4d0>)
 8004ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ae2:	4a67      	ldr	r2, [pc, #412]	@ (8004c80 <HAL_RCC_OscConfig+0x4d0>)
 8004ae4:	f023 0304 	bic.w	r3, r3, #4
 8004ae8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004aea:	e01c      	b.n	8004b26 <HAL_RCC_OscConfig+0x376>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	2b05      	cmp	r3, #5
 8004af2:	d10c      	bne.n	8004b0e <HAL_RCC_OscConfig+0x35e>
 8004af4:	4b62      	ldr	r3, [pc, #392]	@ (8004c80 <HAL_RCC_OscConfig+0x4d0>)
 8004af6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004af8:	4a61      	ldr	r2, [pc, #388]	@ (8004c80 <HAL_RCC_OscConfig+0x4d0>)
 8004afa:	f043 0304 	orr.w	r3, r3, #4
 8004afe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b00:	4b5f      	ldr	r3, [pc, #380]	@ (8004c80 <HAL_RCC_OscConfig+0x4d0>)
 8004b02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b04:	4a5e      	ldr	r2, [pc, #376]	@ (8004c80 <HAL_RCC_OscConfig+0x4d0>)
 8004b06:	f043 0301 	orr.w	r3, r3, #1
 8004b0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b0c:	e00b      	b.n	8004b26 <HAL_RCC_OscConfig+0x376>
 8004b0e:	4b5c      	ldr	r3, [pc, #368]	@ (8004c80 <HAL_RCC_OscConfig+0x4d0>)
 8004b10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b12:	4a5b      	ldr	r2, [pc, #364]	@ (8004c80 <HAL_RCC_OscConfig+0x4d0>)
 8004b14:	f023 0301 	bic.w	r3, r3, #1
 8004b18:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b1a:	4b59      	ldr	r3, [pc, #356]	@ (8004c80 <HAL_RCC_OscConfig+0x4d0>)
 8004b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b1e:	4a58      	ldr	r2, [pc, #352]	@ (8004c80 <HAL_RCC_OscConfig+0x4d0>)
 8004b20:	f023 0304 	bic.w	r3, r3, #4
 8004b24:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d015      	beq.n	8004b5a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b2e:	f7fd fe13 	bl	8002758 <HAL_GetTick>
 8004b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b34:	e00a      	b.n	8004b4c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b36:	f7fd fe0f 	bl	8002758 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d901      	bls.n	8004b4c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e0d8      	b.n	8004cfe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b4c:	4b4c      	ldr	r3, [pc, #304]	@ (8004c80 <HAL_RCC_OscConfig+0x4d0>)
 8004b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d0ee      	beq.n	8004b36 <HAL_RCC_OscConfig+0x386>
 8004b58:	e014      	b.n	8004b84 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b5a:	f7fd fdfd 	bl	8002758 <HAL_GetTick>
 8004b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b60:	e00a      	b.n	8004b78 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b62:	f7fd fdf9 	bl	8002758 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e0c2      	b.n	8004cfe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b78:	4b41      	ldr	r3, [pc, #260]	@ (8004c80 <HAL_RCC_OscConfig+0x4d0>)
 8004b7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1ee      	bne.n	8004b62 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b84:	7dfb      	ldrb	r3, [r7, #23]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d105      	bne.n	8004b96 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b8a:	4b3d      	ldr	r3, [pc, #244]	@ (8004c80 <HAL_RCC_OscConfig+0x4d0>)
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b8e:	4a3c      	ldr	r2, [pc, #240]	@ (8004c80 <HAL_RCC_OscConfig+0x4d0>)
 8004b90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b94:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 80ae 	beq.w	8004cfc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ba0:	4b37      	ldr	r3, [pc, #220]	@ (8004c80 <HAL_RCC_OscConfig+0x4d0>)
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f003 030c 	and.w	r3, r3, #12
 8004ba8:	2b08      	cmp	r3, #8
 8004baa:	d06d      	beq.n	8004c88 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d14b      	bne.n	8004c4c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bb4:	4b32      	ldr	r3, [pc, #200]	@ (8004c80 <HAL_RCC_OscConfig+0x4d0>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a31      	ldr	r2, [pc, #196]	@ (8004c80 <HAL_RCC_OscConfig+0x4d0>)
 8004bba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc0:	f7fd fdca 	bl	8002758 <HAL_GetTick>
 8004bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bc6:	e008      	b.n	8004bda <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bc8:	f7fd fdc6 	bl	8002758 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e091      	b.n	8004cfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bda:	4b29      	ldr	r3, [pc, #164]	@ (8004c80 <HAL_RCC_OscConfig+0x4d0>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1f0      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	69da      	ldr	r2, [r3, #28]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf4:	019b      	lsls	r3, r3, #6
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bfc:	085b      	lsrs	r3, r3, #1
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	041b      	lsls	r3, r3, #16
 8004c02:	431a      	orrs	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c08:	061b      	lsls	r3, r3, #24
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c10:	071b      	lsls	r3, r3, #28
 8004c12:	491b      	ldr	r1, [pc, #108]	@ (8004c80 <HAL_RCC_OscConfig+0x4d0>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c18:	4b19      	ldr	r3, [pc, #100]	@ (8004c80 <HAL_RCC_OscConfig+0x4d0>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a18      	ldr	r2, [pc, #96]	@ (8004c80 <HAL_RCC_OscConfig+0x4d0>)
 8004c1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c24:	f7fd fd98 	bl	8002758 <HAL_GetTick>
 8004c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c2a:	e008      	b.n	8004c3e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c2c:	f7fd fd94 	bl	8002758 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d901      	bls.n	8004c3e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e05f      	b.n	8004cfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c3e:	4b10      	ldr	r3, [pc, #64]	@ (8004c80 <HAL_RCC_OscConfig+0x4d0>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d0f0      	beq.n	8004c2c <HAL_RCC_OscConfig+0x47c>
 8004c4a:	e057      	b.n	8004cfc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8004c80 <HAL_RCC_OscConfig+0x4d0>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a0b      	ldr	r2, [pc, #44]	@ (8004c80 <HAL_RCC_OscConfig+0x4d0>)
 8004c52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c58:	f7fd fd7e 	bl	8002758 <HAL_GetTick>
 8004c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c60:	f7fd fd7a 	bl	8002758 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e045      	b.n	8004cfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c72:	4b03      	ldr	r3, [pc, #12]	@ (8004c80 <HAL_RCC_OscConfig+0x4d0>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1f0      	bne.n	8004c60 <HAL_RCC_OscConfig+0x4b0>
 8004c7e:	e03d      	b.n	8004cfc <HAL_RCC_OscConfig+0x54c>
 8004c80:	40023800 	.word	0x40023800
 8004c84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004c88:	4b1f      	ldr	r3, [pc, #124]	@ (8004d08 <HAL_RCC_OscConfig+0x558>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d030      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d129      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d122      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004cb8:	4013      	ands	r3, r2
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004cbe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d119      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cce:	085b      	lsrs	r3, r3, #1
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d10f      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d107      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cf2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d001      	beq.n	8004cfc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e000      	b.n	8004cfe <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3718      	adds	r7, #24
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	40023800 	.word	0x40023800

08004d0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004d16:	2300      	movs	r3, #0
 8004d18:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e0d0      	b.n	8004ec6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d24:	4b6a      	ldr	r3, [pc, #424]	@ (8004ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 030f 	and.w	r3, r3, #15
 8004d2c:	683a      	ldr	r2, [r7, #0]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d910      	bls.n	8004d54 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d32:	4b67      	ldr	r3, [pc, #412]	@ (8004ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f023 020f 	bic.w	r2, r3, #15
 8004d3a:	4965      	ldr	r1, [pc, #404]	@ (8004ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d42:	4b63      	ldr	r3, [pc, #396]	@ (8004ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 030f 	and.w	r3, r3, #15
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d001      	beq.n	8004d54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e0b8      	b.n	8004ec6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d020      	beq.n	8004da2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0304 	and.w	r3, r3, #4
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d005      	beq.n	8004d78 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d6c:	4b59      	ldr	r3, [pc, #356]	@ (8004ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	4a58      	ldr	r2, [pc, #352]	@ (8004ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d72:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004d76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0308 	and.w	r3, r3, #8
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d005      	beq.n	8004d90 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d84:	4b53      	ldr	r3, [pc, #332]	@ (8004ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	4a52      	ldr	r2, [pc, #328]	@ (8004ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d8a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004d8e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d90:	4b50      	ldr	r3, [pc, #320]	@ (8004ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	494d      	ldr	r1, [pc, #308]	@ (8004ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d040      	beq.n	8004e30 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d107      	bne.n	8004dc6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004db6:	4b47      	ldr	r3, [pc, #284]	@ (8004ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d115      	bne.n	8004dee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e07f      	b.n	8004ec6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d107      	bne.n	8004dde <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dce:	4b41      	ldr	r3, [pc, #260]	@ (8004ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d109      	bne.n	8004dee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e073      	b.n	8004ec6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dde:	4b3d      	ldr	r3, [pc, #244]	@ (8004ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e06b      	b.n	8004ec6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dee:	4b39      	ldr	r3, [pc, #228]	@ (8004ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f023 0203 	bic.w	r2, r3, #3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	4936      	ldr	r1, [pc, #216]	@ (8004ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e00:	f7fd fcaa 	bl	8002758 <HAL_GetTick>
 8004e04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e06:	e00a      	b.n	8004e1e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e08:	f7fd fca6 	bl	8002758 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e053      	b.n	8004ec6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e1e:	4b2d      	ldr	r3, [pc, #180]	@ (8004ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f003 020c 	and.w	r2, r3, #12
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d1eb      	bne.n	8004e08 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e30:	4b27      	ldr	r3, [pc, #156]	@ (8004ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 030f 	and.w	r3, r3, #15
 8004e38:	683a      	ldr	r2, [r7, #0]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d210      	bcs.n	8004e60 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e3e:	4b24      	ldr	r3, [pc, #144]	@ (8004ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f023 020f 	bic.w	r2, r3, #15
 8004e46:	4922      	ldr	r1, [pc, #136]	@ (8004ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e4e:	4b20      	ldr	r3, [pc, #128]	@ (8004ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 030f 	and.w	r3, r3, #15
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d001      	beq.n	8004e60 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e032      	b.n	8004ec6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0304 	and.w	r3, r3, #4
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d008      	beq.n	8004e7e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e6c:	4b19      	ldr	r3, [pc, #100]	@ (8004ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	4916      	ldr	r1, [pc, #88]	@ (8004ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0308 	and.w	r3, r3, #8
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d009      	beq.n	8004e9e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004e8a:	4b12      	ldr	r3, [pc, #72]	@ (8004ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	00db      	lsls	r3, r3, #3
 8004e98:	490e      	ldr	r1, [pc, #56]	@ (8004ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e9e:	f000 f821 	bl	8004ee4 <HAL_RCC_GetSysClockFreq>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	091b      	lsrs	r3, r3, #4
 8004eaa:	f003 030f 	and.w	r3, r3, #15
 8004eae:	490a      	ldr	r1, [pc, #40]	@ (8004ed8 <HAL_RCC_ClockConfig+0x1cc>)
 8004eb0:	5ccb      	ldrb	r3, [r1, r3]
 8004eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8004eb6:	4a09      	ldr	r2, [pc, #36]	@ (8004edc <HAL_RCC_ClockConfig+0x1d0>)
 8004eb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004eba:	4b09      	ldr	r3, [pc, #36]	@ (8004ee0 <HAL_RCC_ClockConfig+0x1d4>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7fd fc06 	bl	80026d0 <HAL_InitTick>

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	40023c00 	.word	0x40023c00
 8004ed4:	40023800 	.word	0x40023800
 8004ed8:	0800fd70 	.word	0x0800fd70
 8004edc:	20000030 	.word	0x20000030
 8004ee0:	20000034 	.word	0x20000034

08004ee4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ee8:	b090      	sub	sp, #64	@ 0x40
 8004eea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004eec:	2300      	movs	r3, #0
 8004eee:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004efc:	4b59      	ldr	r3, [pc, #356]	@ (8005064 <HAL_RCC_GetSysClockFreq+0x180>)
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f003 030c 	and.w	r3, r3, #12
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	d00d      	beq.n	8004f24 <HAL_RCC_GetSysClockFreq+0x40>
 8004f08:	2b08      	cmp	r3, #8
 8004f0a:	f200 80a1 	bhi.w	8005050 <HAL_RCC_GetSysClockFreq+0x16c>
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d002      	beq.n	8004f18 <HAL_RCC_GetSysClockFreq+0x34>
 8004f12:	2b04      	cmp	r3, #4
 8004f14:	d003      	beq.n	8004f1e <HAL_RCC_GetSysClockFreq+0x3a>
 8004f16:	e09b      	b.n	8005050 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f18:	4b53      	ldr	r3, [pc, #332]	@ (8005068 <HAL_RCC_GetSysClockFreq+0x184>)
 8004f1a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004f1c:	e09b      	b.n	8005056 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f1e:	4b53      	ldr	r3, [pc, #332]	@ (800506c <HAL_RCC_GetSysClockFreq+0x188>)
 8004f20:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004f22:	e098      	b.n	8005056 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f24:	4b4f      	ldr	r3, [pc, #316]	@ (8005064 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f2c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004f2e:	4b4d      	ldr	r3, [pc, #308]	@ (8005064 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d028      	beq.n	8004f8c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f3a:	4b4a      	ldr	r3, [pc, #296]	@ (8005064 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	099b      	lsrs	r3, r3, #6
 8004f40:	2200      	movs	r2, #0
 8004f42:	623b      	str	r3, [r7, #32]
 8004f44:	627a      	str	r2, [r7, #36]	@ 0x24
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	4b47      	ldr	r3, [pc, #284]	@ (800506c <HAL_RCC_GetSysClockFreq+0x188>)
 8004f50:	fb03 f201 	mul.w	r2, r3, r1
 8004f54:	2300      	movs	r3, #0
 8004f56:	fb00 f303 	mul.w	r3, r0, r3
 8004f5a:	4413      	add	r3, r2
 8004f5c:	4a43      	ldr	r2, [pc, #268]	@ (800506c <HAL_RCC_GetSysClockFreq+0x188>)
 8004f5e:	fba0 1202 	umull	r1, r2, r0, r2
 8004f62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f64:	460a      	mov	r2, r1
 8004f66:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004f68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f6a:	4413      	add	r3, r2
 8004f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f70:	2200      	movs	r2, #0
 8004f72:	61bb      	str	r3, [r7, #24]
 8004f74:	61fa      	str	r2, [r7, #28]
 8004f76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004f7e:	f7fb fb17 	bl	80005b0 <__aeabi_uldivmod>
 8004f82:	4602      	mov	r2, r0
 8004f84:	460b      	mov	r3, r1
 8004f86:	4613      	mov	r3, r2
 8004f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f8a:	e053      	b.n	8005034 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f8c:	4b35      	ldr	r3, [pc, #212]	@ (8005064 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	099b      	lsrs	r3, r3, #6
 8004f92:	2200      	movs	r2, #0
 8004f94:	613b      	str	r3, [r7, #16]
 8004f96:	617a      	str	r2, [r7, #20]
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004f9e:	f04f 0b00 	mov.w	fp, #0
 8004fa2:	4652      	mov	r2, sl
 8004fa4:	465b      	mov	r3, fp
 8004fa6:	f04f 0000 	mov.w	r0, #0
 8004faa:	f04f 0100 	mov.w	r1, #0
 8004fae:	0159      	lsls	r1, r3, #5
 8004fb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fb4:	0150      	lsls	r0, r2, #5
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	460b      	mov	r3, r1
 8004fba:	ebb2 080a 	subs.w	r8, r2, sl
 8004fbe:	eb63 090b 	sbc.w	r9, r3, fp
 8004fc2:	f04f 0200 	mov.w	r2, #0
 8004fc6:	f04f 0300 	mov.w	r3, #0
 8004fca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004fce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004fd2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004fd6:	ebb2 0408 	subs.w	r4, r2, r8
 8004fda:	eb63 0509 	sbc.w	r5, r3, r9
 8004fde:	f04f 0200 	mov.w	r2, #0
 8004fe2:	f04f 0300 	mov.w	r3, #0
 8004fe6:	00eb      	lsls	r3, r5, #3
 8004fe8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fec:	00e2      	lsls	r2, r4, #3
 8004fee:	4614      	mov	r4, r2
 8004ff0:	461d      	mov	r5, r3
 8004ff2:	eb14 030a 	adds.w	r3, r4, sl
 8004ff6:	603b      	str	r3, [r7, #0]
 8004ff8:	eb45 030b 	adc.w	r3, r5, fp
 8004ffc:	607b      	str	r3, [r7, #4]
 8004ffe:	f04f 0200 	mov.w	r2, #0
 8005002:	f04f 0300 	mov.w	r3, #0
 8005006:	e9d7 4500 	ldrd	r4, r5, [r7]
 800500a:	4629      	mov	r1, r5
 800500c:	028b      	lsls	r3, r1, #10
 800500e:	4621      	mov	r1, r4
 8005010:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005014:	4621      	mov	r1, r4
 8005016:	028a      	lsls	r2, r1, #10
 8005018:	4610      	mov	r0, r2
 800501a:	4619      	mov	r1, r3
 800501c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800501e:	2200      	movs	r2, #0
 8005020:	60bb      	str	r3, [r7, #8]
 8005022:	60fa      	str	r2, [r7, #12]
 8005024:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005028:	f7fb fac2 	bl	80005b0 <__aeabi_uldivmod>
 800502c:	4602      	mov	r2, r0
 800502e:	460b      	mov	r3, r1
 8005030:	4613      	mov	r3, r2
 8005032:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005034:	4b0b      	ldr	r3, [pc, #44]	@ (8005064 <HAL_RCC_GetSysClockFreq+0x180>)
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	0c1b      	lsrs	r3, r3, #16
 800503a:	f003 0303 	and.w	r3, r3, #3
 800503e:	3301      	adds	r3, #1
 8005040:	005b      	lsls	r3, r3, #1
 8005042:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005044:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005048:	fbb2 f3f3 	udiv	r3, r2, r3
 800504c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800504e:	e002      	b.n	8005056 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005050:	4b05      	ldr	r3, [pc, #20]	@ (8005068 <HAL_RCC_GetSysClockFreq+0x184>)
 8005052:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005054:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005058:	4618      	mov	r0, r3
 800505a:	3740      	adds	r7, #64	@ 0x40
 800505c:	46bd      	mov	sp, r7
 800505e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005062:	bf00      	nop
 8005064:	40023800 	.word	0x40023800
 8005068:	00f42400 	.word	0x00f42400
 800506c:	01312d00 	.word	0x01312d00

08005070 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b088      	sub	sp, #32
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005078:	2300      	movs	r3, #0
 800507a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800507c:	2300      	movs	r3, #0
 800507e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005080:	2300      	movs	r3, #0
 8005082:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005084:	2300      	movs	r3, #0
 8005086:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005088:	2300      	movs	r3, #0
 800508a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	2b00      	cmp	r3, #0
 8005096:	d012      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005098:	4b69      	ldr	r3, [pc, #420]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	4a68      	ldr	r2, [pc, #416]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800509e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80050a2:	6093      	str	r3, [r2, #8]
 80050a4:	4b66      	ldr	r3, [pc, #408]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050a6:	689a      	ldr	r2, [r3, #8]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050ac:	4964      	ldr	r1, [pc, #400]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d101      	bne.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80050ba:	2301      	movs	r3, #1
 80050bc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d017      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050ca:	4b5d      	ldr	r3, [pc, #372]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80050d0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050d8:	4959      	ldr	r1, [pc, #356]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050e8:	d101      	bne.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80050ea:	2301      	movs	r3, #1
 80050ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80050f6:	2301      	movs	r3, #1
 80050f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d017      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005106:	4b4e      	ldr	r3, [pc, #312]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005108:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800510c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005114:	494a      	ldr	r1, [pc, #296]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005116:	4313      	orrs	r3, r2
 8005118:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005120:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005124:	d101      	bne.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005126:	2301      	movs	r3, #1
 8005128:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005132:	2301      	movs	r3, #1
 8005134:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d001      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005142:	2301      	movs	r3, #1
 8005144:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0320 	and.w	r3, r3, #32
 800514e:	2b00      	cmp	r3, #0
 8005150:	f000 808b 	beq.w	800526a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005154:	4b3a      	ldr	r3, [pc, #232]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005158:	4a39      	ldr	r2, [pc, #228]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800515a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800515e:	6413      	str	r3, [r2, #64]	@ 0x40
 8005160:	4b37      	ldr	r3, [pc, #220]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005164:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005168:	60bb      	str	r3, [r7, #8]
 800516a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800516c:	4b35      	ldr	r3, [pc, #212]	@ (8005244 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a34      	ldr	r2, [pc, #208]	@ (8005244 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005172:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005176:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005178:	f7fd faee 	bl	8002758 <HAL_GetTick>
 800517c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800517e:	e008      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005180:	f7fd faea 	bl	8002758 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	2b64      	cmp	r3, #100	@ 0x64
 800518c:	d901      	bls.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e38f      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005192:	4b2c      	ldr	r3, [pc, #176]	@ (8005244 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800519a:	2b00      	cmp	r3, #0
 800519c:	d0f0      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800519e:	4b28      	ldr	r3, [pc, #160]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051a6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d035      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d02e      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051bc:	4b20      	ldr	r3, [pc, #128]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051c4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80051c6:	4b1e      	ldr	r3, [pc, #120]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ca:	4a1d      	ldr	r2, [pc, #116]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051d0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051d6:	4a1a      	ldr	r2, [pc, #104]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051dc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80051de:	4a18      	ldr	r2, [pc, #96]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80051e4:	4b16      	ldr	r3, [pc, #88]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d114      	bne.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f0:	f7fd fab2 	bl	8002758 <HAL_GetTick>
 80051f4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051f6:	e00a      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051f8:	f7fd faae 	bl	8002758 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005206:	4293      	cmp	r3, r2
 8005208:	d901      	bls.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e351      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800520e:	4b0c      	ldr	r3, [pc, #48]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d0ee      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800521e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005222:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005226:	d111      	bne.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005228:	4b05      	ldr	r3, [pc, #20]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005234:	4b04      	ldr	r3, [pc, #16]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005236:	400b      	ands	r3, r1
 8005238:	4901      	ldr	r1, [pc, #4]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800523a:	4313      	orrs	r3, r2
 800523c:	608b      	str	r3, [r1, #8]
 800523e:	e00b      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005240:	40023800 	.word	0x40023800
 8005244:	40007000 	.word	0x40007000
 8005248:	0ffffcff 	.word	0x0ffffcff
 800524c:	4bac      	ldr	r3, [pc, #688]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	4aab      	ldr	r2, [pc, #684]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005252:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005256:	6093      	str	r3, [r2, #8]
 8005258:	4ba9      	ldr	r3, [pc, #676]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800525a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005264:	49a6      	ldr	r1, [pc, #664]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005266:	4313      	orrs	r3, r2
 8005268:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0310 	and.w	r3, r3, #16
 8005272:	2b00      	cmp	r3, #0
 8005274:	d010      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005276:	4ba2      	ldr	r3, [pc, #648]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005278:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800527c:	4aa0      	ldr	r2, [pc, #640]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800527e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005282:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005286:	4b9e      	ldr	r3, [pc, #632]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005288:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005290:	499b      	ldr	r1, [pc, #620]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005292:	4313      	orrs	r3, r2
 8005294:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00a      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052a4:	4b96      	ldr	r3, [pc, #600]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052aa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052b2:	4993      	ldr	r1, [pc, #588]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00a      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80052c6:	4b8e      	ldr	r3, [pc, #568]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052cc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052d4:	498a      	ldr	r1, [pc, #552]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00a      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80052e8:	4b85      	ldr	r3, [pc, #532]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052f6:	4982      	ldr	r1, [pc, #520]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00a      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800530a:	4b7d      	ldr	r3, [pc, #500]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800530c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005310:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005318:	4979      	ldr	r1, [pc, #484]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800531a:	4313      	orrs	r3, r2
 800531c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00a      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800532c:	4b74      	ldr	r3, [pc, #464]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800532e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005332:	f023 0203 	bic.w	r2, r3, #3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800533a:	4971      	ldr	r1, [pc, #452]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800533c:	4313      	orrs	r3, r2
 800533e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00a      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800534e:	4b6c      	ldr	r3, [pc, #432]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005350:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005354:	f023 020c 	bic.w	r2, r3, #12
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800535c:	4968      	ldr	r1, [pc, #416]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800535e:	4313      	orrs	r3, r2
 8005360:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00a      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005370:	4b63      	ldr	r3, [pc, #396]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005372:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005376:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800537e:	4960      	ldr	r1, [pc, #384]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005380:	4313      	orrs	r3, r2
 8005382:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00a      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005392:	4b5b      	ldr	r3, [pc, #364]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005394:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005398:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053a0:	4957      	ldr	r1, [pc, #348]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00a      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80053b4:	4b52      	ldr	r3, [pc, #328]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053ba:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053c2:	494f      	ldr	r1, [pc, #316]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00a      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80053d6:	4b4a      	ldr	r3, [pc, #296]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053dc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053e4:	4946      	ldr	r1, [pc, #280]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00a      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80053f8:	4b41      	ldr	r3, [pc, #260]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053fe:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005406:	493e      	ldr	r1, [pc, #248]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005408:	4313      	orrs	r3, r2
 800540a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00a      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800541a:	4b39      	ldr	r3, [pc, #228]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800541c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005420:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005428:	4935      	ldr	r1, [pc, #212]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800542a:	4313      	orrs	r3, r2
 800542c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00a      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800543c:	4b30      	ldr	r3, [pc, #192]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800543e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005442:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800544a:	492d      	ldr	r1, [pc, #180]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800544c:	4313      	orrs	r3, r2
 800544e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d011      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800545e:	4b28      	ldr	r3, [pc, #160]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005460:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005464:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800546c:	4924      	ldr	r1, [pc, #144]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800546e:	4313      	orrs	r3, r2
 8005470:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005478:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800547c:	d101      	bne.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800547e:	2301      	movs	r3, #1
 8005480:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0308 	and.w	r3, r3, #8
 800548a:	2b00      	cmp	r3, #0
 800548c:	d001      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800548e:	2301      	movs	r3, #1
 8005490:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00a      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800549e:	4b18      	ldr	r3, [pc, #96]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054a4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054ac:	4914      	ldr	r1, [pc, #80]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00b      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80054c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054c6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054d0:	490b      	ldr	r1, [pc, #44]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00f      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80054e4:	4b06      	ldr	r3, [pc, #24]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ea:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054f4:	4902      	ldr	r1, [pc, #8]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80054fc:	e002      	b.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80054fe:	bf00      	nop
 8005500:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00b      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005510:	4b8a      	ldr	r3, [pc, #552]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005512:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005516:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005520:	4986      	ldr	r1, [pc, #536]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005522:	4313      	orrs	r3, r2
 8005524:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00b      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005534:	4b81      	ldr	r3, [pc, #516]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005536:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800553a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005544:	497d      	ldr	r1, [pc, #500]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005546:	4313      	orrs	r3, r2
 8005548:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	2b01      	cmp	r3, #1
 8005550:	d006      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800555a:	2b00      	cmp	r3, #0
 800555c:	f000 80d6 	beq.w	800570c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005560:	4b76      	ldr	r3, [pc, #472]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a75      	ldr	r2, [pc, #468]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005566:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800556a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800556c:	f7fd f8f4 	bl	8002758 <HAL_GetTick>
 8005570:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005572:	e008      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005574:	f7fd f8f0 	bl	8002758 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b64      	cmp	r3, #100	@ 0x64
 8005580:	d901      	bls.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e195      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005586:	4b6d      	ldr	r3, [pc, #436]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1f0      	bne.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d021      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d11d      	bne.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80055a6:	4b65      	ldr	r3, [pc, #404]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055ac:	0c1b      	lsrs	r3, r3, #16
 80055ae:	f003 0303 	and.w	r3, r3, #3
 80055b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80055b4:	4b61      	ldr	r3, [pc, #388]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055ba:	0e1b      	lsrs	r3, r3, #24
 80055bc:	f003 030f 	and.w	r3, r3, #15
 80055c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	019a      	lsls	r2, r3, #6
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	041b      	lsls	r3, r3, #16
 80055cc:	431a      	orrs	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	061b      	lsls	r3, r3, #24
 80055d2:	431a      	orrs	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	071b      	lsls	r3, r3, #28
 80055da:	4958      	ldr	r1, [pc, #352]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d004      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055f6:	d00a      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005600:	2b00      	cmp	r3, #0
 8005602:	d02e      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005608:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800560c:	d129      	bne.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800560e:	4b4b      	ldr	r3, [pc, #300]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005610:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005614:	0c1b      	lsrs	r3, r3, #16
 8005616:	f003 0303 	and.w	r3, r3, #3
 800561a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800561c:	4b47      	ldr	r3, [pc, #284]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800561e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005622:	0f1b      	lsrs	r3, r3, #28
 8005624:	f003 0307 	and.w	r3, r3, #7
 8005628:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	019a      	lsls	r2, r3, #6
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	041b      	lsls	r3, r3, #16
 8005634:	431a      	orrs	r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	061b      	lsls	r3, r3, #24
 800563c:	431a      	orrs	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	071b      	lsls	r3, r3, #28
 8005642:	493e      	ldr	r1, [pc, #248]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005644:	4313      	orrs	r3, r2
 8005646:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800564a:	4b3c      	ldr	r3, [pc, #240]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800564c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005650:	f023 021f 	bic.w	r2, r3, #31
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005658:	3b01      	subs	r3, #1
 800565a:	4938      	ldr	r1, [pc, #224]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800565c:	4313      	orrs	r3, r2
 800565e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d01d      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800566e:	4b33      	ldr	r3, [pc, #204]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005670:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005674:	0e1b      	lsrs	r3, r3, #24
 8005676:	f003 030f 	and.w	r3, r3, #15
 800567a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800567c:	4b2f      	ldr	r3, [pc, #188]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800567e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005682:	0f1b      	lsrs	r3, r3, #28
 8005684:	f003 0307 	and.w	r3, r3, #7
 8005688:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	019a      	lsls	r2, r3, #6
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	041b      	lsls	r3, r3, #16
 8005696:	431a      	orrs	r2, r3
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	061b      	lsls	r3, r3, #24
 800569c:	431a      	orrs	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	071b      	lsls	r3, r3, #28
 80056a2:	4926      	ldr	r1, [pc, #152]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d011      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	019a      	lsls	r2, r3, #6
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	041b      	lsls	r3, r3, #16
 80056c2:	431a      	orrs	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	061b      	lsls	r3, r3, #24
 80056ca:	431a      	orrs	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	071b      	lsls	r3, r3, #28
 80056d2:	491a      	ldr	r1, [pc, #104]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80056da:	4b18      	ldr	r3, [pc, #96]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a17      	ldr	r2, [pc, #92]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056e0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80056e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056e6:	f7fd f837 	bl	8002758 <HAL_GetTick>
 80056ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056ec:	e008      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80056ee:	f7fd f833 	bl	8002758 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	2b64      	cmp	r3, #100	@ 0x64
 80056fa:	d901      	bls.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e0d8      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005700:	4b0e      	ldr	r3, [pc, #56]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d0f0      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	2b01      	cmp	r3, #1
 8005710:	f040 80ce 	bne.w	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005714:	4b09      	ldr	r3, [pc, #36]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a08      	ldr	r2, [pc, #32]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800571a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800571e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005720:	f7fd f81a 	bl	8002758 <HAL_GetTick>
 8005724:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005726:	e00b      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005728:	f7fd f816 	bl	8002758 <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b64      	cmp	r3, #100	@ 0x64
 8005734:	d904      	bls.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e0bb      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800573a:	bf00      	nop
 800573c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005740:	4b5e      	ldr	r3, [pc, #376]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005748:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800574c:	d0ec      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d003      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800575e:	2b00      	cmp	r3, #0
 8005760:	d009      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800576a:	2b00      	cmp	r3, #0
 800576c:	d02e      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005772:	2b00      	cmp	r3, #0
 8005774:	d12a      	bne.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005776:	4b51      	ldr	r3, [pc, #324]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800577c:	0c1b      	lsrs	r3, r3, #16
 800577e:	f003 0303 	and.w	r3, r3, #3
 8005782:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005784:	4b4d      	ldr	r3, [pc, #308]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800578a:	0f1b      	lsrs	r3, r3, #28
 800578c:	f003 0307 	and.w	r3, r3, #7
 8005790:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	019a      	lsls	r2, r3, #6
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	041b      	lsls	r3, r3, #16
 800579c:	431a      	orrs	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	061b      	lsls	r3, r3, #24
 80057a4:	431a      	orrs	r2, r3
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	071b      	lsls	r3, r3, #28
 80057aa:	4944      	ldr	r1, [pc, #272]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80057b2:	4b42      	ldr	r3, [pc, #264]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057b8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057c0:	3b01      	subs	r3, #1
 80057c2:	021b      	lsls	r3, r3, #8
 80057c4:	493d      	ldr	r1, [pc, #244]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d022      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057e0:	d11d      	bne.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80057e2:	4b36      	ldr	r3, [pc, #216]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057e8:	0e1b      	lsrs	r3, r3, #24
 80057ea:	f003 030f 	and.w	r3, r3, #15
 80057ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80057f0:	4b32      	ldr	r3, [pc, #200]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057f6:	0f1b      	lsrs	r3, r3, #28
 80057f8:	f003 0307 	and.w	r3, r3, #7
 80057fc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	019a      	lsls	r2, r3, #6
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a1b      	ldr	r3, [r3, #32]
 8005808:	041b      	lsls	r3, r3, #16
 800580a:	431a      	orrs	r2, r3
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	061b      	lsls	r3, r3, #24
 8005810:	431a      	orrs	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	071b      	lsls	r3, r3, #28
 8005816:	4929      	ldr	r1, [pc, #164]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005818:	4313      	orrs	r3, r2
 800581a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0308 	and.w	r3, r3, #8
 8005826:	2b00      	cmp	r3, #0
 8005828:	d028      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800582a:	4b24      	ldr	r3, [pc, #144]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800582c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005830:	0e1b      	lsrs	r3, r3, #24
 8005832:	f003 030f 	and.w	r3, r3, #15
 8005836:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005838:	4b20      	ldr	r3, [pc, #128]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800583a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800583e:	0c1b      	lsrs	r3, r3, #16
 8005840:	f003 0303 	and.w	r3, r3, #3
 8005844:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	019a      	lsls	r2, r3, #6
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	041b      	lsls	r3, r3, #16
 8005850:	431a      	orrs	r2, r3
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	061b      	lsls	r3, r3, #24
 8005856:	431a      	orrs	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	69db      	ldr	r3, [r3, #28]
 800585c:	071b      	lsls	r3, r3, #28
 800585e:	4917      	ldr	r1, [pc, #92]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005860:	4313      	orrs	r3, r2
 8005862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005866:	4b15      	ldr	r3, [pc, #84]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005868:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800586c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005874:	4911      	ldr	r1, [pc, #68]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005876:	4313      	orrs	r3, r2
 8005878:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800587c:	4b0f      	ldr	r3, [pc, #60]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a0e      	ldr	r2, [pc, #56]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005882:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005886:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005888:	f7fc ff66 	bl	8002758 <HAL_GetTick>
 800588c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800588e:	e008      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005890:	f7fc ff62 	bl	8002758 <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	2b64      	cmp	r3, #100	@ 0x64
 800589c:	d901      	bls.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e007      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058a2:	4b06      	ldr	r3, [pc, #24]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058ae:	d1ef      	bne.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3720      	adds	r7, #32
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	40023800 	.word	0x40023800

080058c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d101      	bne.n	80058d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e049      	b.n	8005966 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d106      	bne.n	80058ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7fc fd2e 	bl	8002348 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2202      	movs	r2, #2
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	3304      	adds	r3, #4
 80058fc:	4619      	mov	r1, r3
 80058fe:	4610      	mov	r0, r2
 8005900:	f000 fe0c 	bl	800651c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3708      	adds	r7, #8
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
	...

08005970 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005970:	b480      	push	{r7}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800597e:	b2db      	uxtb	r3, r3
 8005980:	2b01      	cmp	r3, #1
 8005982:	d001      	beq.n	8005988 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e054      	b.n	8005a32 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2202      	movs	r2, #2
 800598c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68da      	ldr	r2, [r3, #12]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f042 0201 	orr.w	r2, r2, #1
 800599e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a26      	ldr	r2, [pc, #152]	@ (8005a40 <HAL_TIM_Base_Start_IT+0xd0>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d022      	beq.n	80059f0 <HAL_TIM_Base_Start_IT+0x80>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059b2:	d01d      	beq.n	80059f0 <HAL_TIM_Base_Start_IT+0x80>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a22      	ldr	r2, [pc, #136]	@ (8005a44 <HAL_TIM_Base_Start_IT+0xd4>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d018      	beq.n	80059f0 <HAL_TIM_Base_Start_IT+0x80>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a21      	ldr	r2, [pc, #132]	@ (8005a48 <HAL_TIM_Base_Start_IT+0xd8>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d013      	beq.n	80059f0 <HAL_TIM_Base_Start_IT+0x80>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a1f      	ldr	r2, [pc, #124]	@ (8005a4c <HAL_TIM_Base_Start_IT+0xdc>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d00e      	beq.n	80059f0 <HAL_TIM_Base_Start_IT+0x80>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a1e      	ldr	r2, [pc, #120]	@ (8005a50 <HAL_TIM_Base_Start_IT+0xe0>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d009      	beq.n	80059f0 <HAL_TIM_Base_Start_IT+0x80>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a1c      	ldr	r2, [pc, #112]	@ (8005a54 <HAL_TIM_Base_Start_IT+0xe4>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d004      	beq.n	80059f0 <HAL_TIM_Base_Start_IT+0x80>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a1b      	ldr	r2, [pc, #108]	@ (8005a58 <HAL_TIM_Base_Start_IT+0xe8>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d115      	bne.n	8005a1c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	689a      	ldr	r2, [r3, #8]
 80059f6:	4b19      	ldr	r3, [pc, #100]	@ (8005a5c <HAL_TIM_Base_Start_IT+0xec>)
 80059f8:	4013      	ands	r3, r2
 80059fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2b06      	cmp	r3, #6
 8005a00:	d015      	beq.n	8005a2e <HAL_TIM_Base_Start_IT+0xbe>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a08:	d011      	beq.n	8005a2e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f042 0201 	orr.w	r2, r2, #1
 8005a18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a1a:	e008      	b.n	8005a2e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f042 0201 	orr.w	r2, r2, #1
 8005a2a:	601a      	str	r2, [r3, #0]
 8005a2c:	e000      	b.n	8005a30 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3714      	adds	r7, #20
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	40010000 	.word	0x40010000
 8005a44:	40000400 	.word	0x40000400
 8005a48:	40000800 	.word	0x40000800
 8005a4c:	40000c00 	.word	0x40000c00
 8005a50:	40010400 	.word	0x40010400
 8005a54:	40014000 	.word	0x40014000
 8005a58:	40001800 	.word	0x40001800
 8005a5c:	00010007 	.word	0x00010007

08005a60 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d101      	bne.n	8005a72 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e049      	b.n	8005b06 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d106      	bne.n	8005a8c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f841 	bl	8005b0e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2202      	movs	r2, #2
 8005a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	3304      	adds	r3, #4
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	4610      	mov	r0, r2
 8005aa0:	f000 fd3c 	bl	800651c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3708      	adds	r7, #8
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b083      	sub	sp, #12
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005b16:	bf00      	nop
 8005b18:	370c      	adds	r7, #12
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr

08005b22 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b082      	sub	sp, #8
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d101      	bne.n	8005b34 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e049      	b.n	8005bc8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d106      	bne.n	8005b4e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 f841 	bl	8005bd0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2202      	movs	r2, #2
 8005b52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	4619      	mov	r1, r3
 8005b60:	4610      	mov	r0, r2
 8005b62:	f000 fcdb 	bl	800651c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3708      	adds	r7, #8
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d101      	bne.n	8005bf6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e049      	b.n	8005c8a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d106      	bne.n	8005c10 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7fc fbf2 	bl	80023f4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2202      	movs	r2, #2
 8005c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	3304      	adds	r3, #4
 8005c20:	4619      	mov	r1, r3
 8005c22:	4610      	mov	r0, r2
 8005c24:	f000 fc7a 	bl	800651c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3708      	adds	r7, #8
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b082      	sub	sp, #8
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	f003 0302 	and.w	r3, r3, #2
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d122      	bne.n	8005cee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d11b      	bne.n	8005cee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f06f 0202 	mvn.w	r2, #2
 8005cbe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	699b      	ldr	r3, [r3, #24]
 8005ccc:	f003 0303 	and.w	r3, r3, #3
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d003      	beq.n	8005cdc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 fc03 	bl	80064e0 <HAL_TIM_IC_CaptureCallback>
 8005cda:	e005      	b.n	8005ce8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 fbf5 	bl	80064cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 fc06 	bl	80064f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	f003 0304 	and.w	r3, r3, #4
 8005cf8:	2b04      	cmp	r3, #4
 8005cfa:	d122      	bne.n	8005d42 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	f003 0304 	and.w	r3, r3, #4
 8005d06:	2b04      	cmp	r3, #4
 8005d08:	d11b      	bne.n	8005d42 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f06f 0204 	mvn.w	r2, #4
 8005d12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2202      	movs	r2, #2
 8005d18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d003      	beq.n	8005d30 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 fbd9 	bl	80064e0 <HAL_TIM_IC_CaptureCallback>
 8005d2e:	e005      	b.n	8005d3c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 fbcb 	bl	80064cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 fbdc 	bl	80064f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	f003 0308 	and.w	r3, r3, #8
 8005d4c:	2b08      	cmp	r3, #8
 8005d4e:	d122      	bne.n	8005d96 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	f003 0308 	and.w	r3, r3, #8
 8005d5a:	2b08      	cmp	r3, #8
 8005d5c:	d11b      	bne.n	8005d96 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f06f 0208 	mvn.w	r2, #8
 8005d66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2204      	movs	r2, #4
 8005d6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	69db      	ldr	r3, [r3, #28]
 8005d74:	f003 0303 	and.w	r3, r3, #3
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d003      	beq.n	8005d84 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 fbaf 	bl	80064e0 <HAL_TIM_IC_CaptureCallback>
 8005d82:	e005      	b.n	8005d90 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 fba1 	bl	80064cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 fbb2 	bl	80064f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	f003 0310 	and.w	r3, r3, #16
 8005da0:	2b10      	cmp	r3, #16
 8005da2:	d122      	bne.n	8005dea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	f003 0310 	and.w	r3, r3, #16
 8005dae:	2b10      	cmp	r3, #16
 8005db0:	d11b      	bne.n	8005dea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f06f 0210 	mvn.w	r2, #16
 8005dba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2208      	movs	r2, #8
 8005dc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	69db      	ldr	r3, [r3, #28]
 8005dc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d003      	beq.n	8005dd8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 fb85 	bl	80064e0 <HAL_TIM_IC_CaptureCallback>
 8005dd6:	e005      	b.n	8005de4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 fb77 	bl	80064cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 fb88 	bl	80064f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	f003 0301 	and.w	r3, r3, #1
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d10e      	bne.n	8005e16 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d107      	bne.n	8005e16 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f06f 0201 	mvn.w	r2, #1
 8005e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 fb51 	bl	80064b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e20:	2b80      	cmp	r3, #128	@ 0x80
 8005e22:	d10e      	bne.n	8005e42 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e2e:	2b80      	cmp	r3, #128	@ 0x80
 8005e30:	d107      	bne.n	8005e42 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005e3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f001 f945 	bl	80070cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e50:	d10e      	bne.n	8005e70 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e5c:	2b80      	cmp	r3, #128	@ 0x80
 8005e5e:	d107      	bne.n	8005e70 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f001 f938 	bl	80070e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e7a:	2b40      	cmp	r3, #64	@ 0x40
 8005e7c:	d10e      	bne.n	8005e9c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e88:	2b40      	cmp	r3, #64	@ 0x40
 8005e8a:	d107      	bne.n	8005e9c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 fb36 	bl	8006508 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	f003 0320 	and.w	r3, r3, #32
 8005ea6:	2b20      	cmp	r3, #32
 8005ea8:	d10e      	bne.n	8005ec8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	f003 0320 	and.w	r3, r3, #32
 8005eb4:	2b20      	cmp	r3, #32
 8005eb6:	d107      	bne.n	8005ec8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f06f 0220 	mvn.w	r2, #32
 8005ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f001 f8f8 	bl	80070b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ec8:	bf00      	nop
 8005eca:	3708      	adds	r7, #8
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005edc:	2300      	movs	r3, #0
 8005ede:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d101      	bne.n	8005eee <HAL_TIM_OC_ConfigChannel+0x1e>
 8005eea:	2302      	movs	r3, #2
 8005eec:	e066      	b.n	8005fbc <HAL_TIM_OC_ConfigChannel+0xec>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2b14      	cmp	r3, #20
 8005efa:	d857      	bhi.n	8005fac <HAL_TIM_OC_ConfigChannel+0xdc>
 8005efc:	a201      	add	r2, pc, #4	@ (adr r2, 8005f04 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f02:	bf00      	nop
 8005f04:	08005f59 	.word	0x08005f59
 8005f08:	08005fad 	.word	0x08005fad
 8005f0c:	08005fad 	.word	0x08005fad
 8005f10:	08005fad 	.word	0x08005fad
 8005f14:	08005f67 	.word	0x08005f67
 8005f18:	08005fad 	.word	0x08005fad
 8005f1c:	08005fad 	.word	0x08005fad
 8005f20:	08005fad 	.word	0x08005fad
 8005f24:	08005f75 	.word	0x08005f75
 8005f28:	08005fad 	.word	0x08005fad
 8005f2c:	08005fad 	.word	0x08005fad
 8005f30:	08005fad 	.word	0x08005fad
 8005f34:	08005f83 	.word	0x08005f83
 8005f38:	08005fad 	.word	0x08005fad
 8005f3c:	08005fad 	.word	0x08005fad
 8005f40:	08005fad 	.word	0x08005fad
 8005f44:	08005f91 	.word	0x08005f91
 8005f48:	08005fad 	.word	0x08005fad
 8005f4c:	08005fad 	.word	0x08005fad
 8005f50:	08005fad 	.word	0x08005fad
 8005f54:	08005f9f 	.word	0x08005f9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68b9      	ldr	r1, [r7, #8]
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f000 fb7c 	bl	800665c <TIM_OC1_SetConfig>
      break;
 8005f64:	e025      	b.n	8005fb2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68b9      	ldr	r1, [r7, #8]
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f000 fbe7 	bl	8006740 <TIM_OC2_SetConfig>
      break;
 8005f72:	e01e      	b.n	8005fb2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68b9      	ldr	r1, [r7, #8]
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f000 fc58 	bl	8006830 <TIM_OC3_SetConfig>
      break;
 8005f80:	e017      	b.n	8005fb2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68b9      	ldr	r1, [r7, #8]
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f000 fcc7 	bl	800691c <TIM_OC4_SetConfig>
      break;
 8005f8e:	e010      	b.n	8005fb2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68b9      	ldr	r1, [r7, #8]
 8005f96:	4618      	mov	r0, r3
 8005f98:	f000 fd18 	bl	80069cc <TIM_OC5_SetConfig>
      break;
 8005f9c:	e009      	b.n	8005fb2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68b9      	ldr	r1, [r7, #8]
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f000 fd63 	bl	8006a70 <TIM_OC6_SetConfig>
      break;
 8005faa:	e002      	b.n	8005fb2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	75fb      	strb	r3, [r7, #23]
      break;
 8005fb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3718      	adds	r7, #24
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b086      	sub	sp, #24
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d101      	bne.n	8005fe2 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005fde:	2302      	movs	r3, #2
 8005fe0:	e088      	b.n	80060f4 <HAL_TIM_IC_ConfigChannel+0x130>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d11b      	bne.n	8006028 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006000:	f000 fd8a 	bl	8006b18 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	699a      	ldr	r2, [r3, #24]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f022 020c 	bic.w	r2, r2, #12
 8006012:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	6999      	ldr	r1, [r3, #24]
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	689a      	ldr	r2, [r3, #8]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	430a      	orrs	r2, r1
 8006024:	619a      	str	r2, [r3, #24]
 8006026:	e060      	b.n	80060ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2b04      	cmp	r3, #4
 800602c:	d11c      	bne.n	8006068 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800603e:	f000 fe0e 	bl	8006c5e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	699a      	ldr	r2, [r3, #24]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006050:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	6999      	ldr	r1, [r3, #24]
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	021a      	lsls	r2, r3, #8
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	430a      	orrs	r2, r1
 8006064:	619a      	str	r2, [r3, #24]
 8006066:	e040      	b.n	80060ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2b08      	cmp	r3, #8
 800606c:	d11b      	bne.n	80060a6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800607e:	f000 fe5b 	bl	8006d38 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	69da      	ldr	r2, [r3, #28]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f022 020c 	bic.w	r2, r2, #12
 8006090:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	69d9      	ldr	r1, [r3, #28]
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	689a      	ldr	r2, [r3, #8]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	430a      	orrs	r2, r1
 80060a2:	61da      	str	r2, [r3, #28]
 80060a4:	e021      	b.n	80060ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2b0c      	cmp	r3, #12
 80060aa:	d11c      	bne.n	80060e6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80060bc:	f000 fe78 	bl	8006db0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	69da      	ldr	r2, [r3, #28]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80060ce:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	69d9      	ldr	r1, [r3, #28]
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	021a      	lsls	r2, r3, #8
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	430a      	orrs	r2, r1
 80060e2:	61da      	str	r2, [r3, #28]
 80060e4:	e001      	b.n	80060ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80060f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3718      	adds	r7, #24
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b086      	sub	sp, #24
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006108:	2300      	movs	r3, #0
 800610a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006112:	2b01      	cmp	r3, #1
 8006114:	d101      	bne.n	800611a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006116:	2302      	movs	r3, #2
 8006118:	e0ff      	b.n	800631a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2b14      	cmp	r3, #20
 8006126:	f200 80f0 	bhi.w	800630a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800612a:	a201      	add	r2, pc, #4	@ (adr r2, 8006130 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800612c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006130:	08006185 	.word	0x08006185
 8006134:	0800630b 	.word	0x0800630b
 8006138:	0800630b 	.word	0x0800630b
 800613c:	0800630b 	.word	0x0800630b
 8006140:	080061c5 	.word	0x080061c5
 8006144:	0800630b 	.word	0x0800630b
 8006148:	0800630b 	.word	0x0800630b
 800614c:	0800630b 	.word	0x0800630b
 8006150:	08006207 	.word	0x08006207
 8006154:	0800630b 	.word	0x0800630b
 8006158:	0800630b 	.word	0x0800630b
 800615c:	0800630b 	.word	0x0800630b
 8006160:	08006247 	.word	0x08006247
 8006164:	0800630b 	.word	0x0800630b
 8006168:	0800630b 	.word	0x0800630b
 800616c:	0800630b 	.word	0x0800630b
 8006170:	08006289 	.word	0x08006289
 8006174:	0800630b 	.word	0x0800630b
 8006178:	0800630b 	.word	0x0800630b
 800617c:	0800630b 	.word	0x0800630b
 8006180:	080062c9 	.word	0x080062c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68b9      	ldr	r1, [r7, #8]
 800618a:	4618      	mov	r0, r3
 800618c:	f000 fa66 	bl	800665c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	699a      	ldr	r2, [r3, #24]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f042 0208 	orr.w	r2, r2, #8
 800619e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	699a      	ldr	r2, [r3, #24]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f022 0204 	bic.w	r2, r2, #4
 80061ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	6999      	ldr	r1, [r3, #24]
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	691a      	ldr	r2, [r3, #16]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	430a      	orrs	r2, r1
 80061c0:	619a      	str	r2, [r3, #24]
      break;
 80061c2:	e0a5      	b.n	8006310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68b9      	ldr	r1, [r7, #8]
 80061ca:	4618      	mov	r0, r3
 80061cc:	f000 fab8 	bl	8006740 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	699a      	ldr	r2, [r3, #24]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	699a      	ldr	r2, [r3, #24]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	6999      	ldr	r1, [r3, #24]
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	021a      	lsls	r2, r3, #8
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	430a      	orrs	r2, r1
 8006202:	619a      	str	r2, [r3, #24]
      break;
 8006204:	e084      	b.n	8006310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68b9      	ldr	r1, [r7, #8]
 800620c:	4618      	mov	r0, r3
 800620e:	f000 fb0f 	bl	8006830 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	69da      	ldr	r2, [r3, #28]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f042 0208 	orr.w	r2, r2, #8
 8006220:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	69da      	ldr	r2, [r3, #28]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f022 0204 	bic.w	r2, r2, #4
 8006230:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	69d9      	ldr	r1, [r3, #28]
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	691a      	ldr	r2, [r3, #16]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	430a      	orrs	r2, r1
 8006242:	61da      	str	r2, [r3, #28]
      break;
 8006244:	e064      	b.n	8006310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68b9      	ldr	r1, [r7, #8]
 800624c:	4618      	mov	r0, r3
 800624e:	f000 fb65 	bl	800691c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	69da      	ldr	r2, [r3, #28]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006260:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	69da      	ldr	r2, [r3, #28]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006270:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	69d9      	ldr	r1, [r3, #28]
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	021a      	lsls	r2, r3, #8
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	430a      	orrs	r2, r1
 8006284:	61da      	str	r2, [r3, #28]
      break;
 8006286:	e043      	b.n	8006310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68b9      	ldr	r1, [r7, #8]
 800628e:	4618      	mov	r0, r3
 8006290:	f000 fb9c 	bl	80069cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f042 0208 	orr.w	r2, r2, #8
 80062a2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f022 0204 	bic.w	r2, r2, #4
 80062b2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	691a      	ldr	r2, [r3, #16]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	430a      	orrs	r2, r1
 80062c4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80062c6:	e023      	b.n	8006310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68b9      	ldr	r1, [r7, #8]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f000 fbce 	bl	8006a70 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062e2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062f2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	021a      	lsls	r2, r3, #8
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	430a      	orrs	r2, r1
 8006306:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006308:	e002      	b.n	8006310 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	75fb      	strb	r3, [r7, #23]
      break;
 800630e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006318:	7dfb      	ldrb	r3, [r7, #23]
}
 800631a:	4618      	mov	r0, r3
 800631c:	3718      	adds	r7, #24
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop

08006324 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800632e:	2300      	movs	r3, #0
 8006330:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006338:	2b01      	cmp	r3, #1
 800633a:	d101      	bne.n	8006340 <HAL_TIM_ConfigClockSource+0x1c>
 800633c:	2302      	movs	r3, #2
 800633e:	e0b4      	b.n	80064aa <HAL_TIM_ConfigClockSource+0x186>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2202      	movs	r2, #2
 800634c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006358:	68ba      	ldr	r2, [r7, #8]
 800635a:	4b56      	ldr	r3, [pc, #344]	@ (80064b4 <HAL_TIM_ConfigClockSource+0x190>)
 800635c:	4013      	ands	r3, r2
 800635e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006366:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006378:	d03e      	beq.n	80063f8 <HAL_TIM_ConfigClockSource+0xd4>
 800637a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800637e:	f200 8087 	bhi.w	8006490 <HAL_TIM_ConfigClockSource+0x16c>
 8006382:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006386:	f000 8086 	beq.w	8006496 <HAL_TIM_ConfigClockSource+0x172>
 800638a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800638e:	d87f      	bhi.n	8006490 <HAL_TIM_ConfigClockSource+0x16c>
 8006390:	2b70      	cmp	r3, #112	@ 0x70
 8006392:	d01a      	beq.n	80063ca <HAL_TIM_ConfigClockSource+0xa6>
 8006394:	2b70      	cmp	r3, #112	@ 0x70
 8006396:	d87b      	bhi.n	8006490 <HAL_TIM_ConfigClockSource+0x16c>
 8006398:	2b60      	cmp	r3, #96	@ 0x60
 800639a:	d050      	beq.n	800643e <HAL_TIM_ConfigClockSource+0x11a>
 800639c:	2b60      	cmp	r3, #96	@ 0x60
 800639e:	d877      	bhi.n	8006490 <HAL_TIM_ConfigClockSource+0x16c>
 80063a0:	2b50      	cmp	r3, #80	@ 0x50
 80063a2:	d03c      	beq.n	800641e <HAL_TIM_ConfigClockSource+0xfa>
 80063a4:	2b50      	cmp	r3, #80	@ 0x50
 80063a6:	d873      	bhi.n	8006490 <HAL_TIM_ConfigClockSource+0x16c>
 80063a8:	2b40      	cmp	r3, #64	@ 0x40
 80063aa:	d058      	beq.n	800645e <HAL_TIM_ConfigClockSource+0x13a>
 80063ac:	2b40      	cmp	r3, #64	@ 0x40
 80063ae:	d86f      	bhi.n	8006490 <HAL_TIM_ConfigClockSource+0x16c>
 80063b0:	2b30      	cmp	r3, #48	@ 0x30
 80063b2:	d064      	beq.n	800647e <HAL_TIM_ConfigClockSource+0x15a>
 80063b4:	2b30      	cmp	r3, #48	@ 0x30
 80063b6:	d86b      	bhi.n	8006490 <HAL_TIM_ConfigClockSource+0x16c>
 80063b8:	2b20      	cmp	r3, #32
 80063ba:	d060      	beq.n	800647e <HAL_TIM_ConfigClockSource+0x15a>
 80063bc:	2b20      	cmp	r3, #32
 80063be:	d867      	bhi.n	8006490 <HAL_TIM_ConfigClockSource+0x16c>
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d05c      	beq.n	800647e <HAL_TIM_ConfigClockSource+0x15a>
 80063c4:	2b10      	cmp	r3, #16
 80063c6:	d05a      	beq.n	800647e <HAL_TIM_ConfigClockSource+0x15a>
 80063c8:	e062      	b.n	8006490 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063da:	f000 fd41 	bl	8006e60 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80063ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68ba      	ldr	r2, [r7, #8]
 80063f4:	609a      	str	r2, [r3, #8]
      break;
 80063f6:	e04f      	b.n	8006498 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006408:	f000 fd2a 	bl	8006e60 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	689a      	ldr	r2, [r3, #8]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800641a:	609a      	str	r2, [r3, #8]
      break;
 800641c:	e03c      	b.n	8006498 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800642a:	461a      	mov	r2, r3
 800642c:	f000 fbe8 	bl	8006c00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2150      	movs	r1, #80	@ 0x50
 8006436:	4618      	mov	r0, r3
 8006438:	f000 fcf7 	bl	8006e2a <TIM_ITRx_SetConfig>
      break;
 800643c:	e02c      	b.n	8006498 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800644a:	461a      	mov	r2, r3
 800644c:	f000 fc44 	bl	8006cd8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2160      	movs	r1, #96	@ 0x60
 8006456:	4618      	mov	r0, r3
 8006458:	f000 fce7 	bl	8006e2a <TIM_ITRx_SetConfig>
      break;
 800645c:	e01c      	b.n	8006498 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800646a:	461a      	mov	r2, r3
 800646c:	f000 fbc8 	bl	8006c00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2140      	movs	r1, #64	@ 0x40
 8006476:	4618      	mov	r0, r3
 8006478:	f000 fcd7 	bl	8006e2a <TIM_ITRx_SetConfig>
      break;
 800647c:	e00c      	b.n	8006498 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4619      	mov	r1, r3
 8006488:	4610      	mov	r0, r2
 800648a:	f000 fcce 	bl	8006e2a <TIM_ITRx_SetConfig>
      break;
 800648e:	e003      	b.n	8006498 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	73fb      	strb	r3, [r7, #15]
      break;
 8006494:	e000      	b.n	8006498 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006496:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80064a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3710      	adds	r7, #16
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	fffeff88 	.word	0xfffeff88

080064b8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064e8:	bf00      	nop
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064fc:	bf00      	nop
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006510:	bf00      	nop
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a40      	ldr	r2, [pc, #256]	@ (8006630 <TIM_Base_SetConfig+0x114>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d013      	beq.n	800655c <TIM_Base_SetConfig+0x40>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800653a:	d00f      	beq.n	800655c <TIM_Base_SetConfig+0x40>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a3d      	ldr	r2, [pc, #244]	@ (8006634 <TIM_Base_SetConfig+0x118>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d00b      	beq.n	800655c <TIM_Base_SetConfig+0x40>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a3c      	ldr	r2, [pc, #240]	@ (8006638 <TIM_Base_SetConfig+0x11c>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d007      	beq.n	800655c <TIM_Base_SetConfig+0x40>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a3b      	ldr	r2, [pc, #236]	@ (800663c <TIM_Base_SetConfig+0x120>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d003      	beq.n	800655c <TIM_Base_SetConfig+0x40>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a3a      	ldr	r2, [pc, #232]	@ (8006640 <TIM_Base_SetConfig+0x124>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d108      	bne.n	800656e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006562:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	4313      	orrs	r3, r2
 800656c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a2f      	ldr	r2, [pc, #188]	@ (8006630 <TIM_Base_SetConfig+0x114>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d02b      	beq.n	80065ce <TIM_Base_SetConfig+0xb2>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800657c:	d027      	beq.n	80065ce <TIM_Base_SetConfig+0xb2>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a2c      	ldr	r2, [pc, #176]	@ (8006634 <TIM_Base_SetConfig+0x118>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d023      	beq.n	80065ce <TIM_Base_SetConfig+0xb2>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a2b      	ldr	r2, [pc, #172]	@ (8006638 <TIM_Base_SetConfig+0x11c>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d01f      	beq.n	80065ce <TIM_Base_SetConfig+0xb2>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a2a      	ldr	r2, [pc, #168]	@ (800663c <TIM_Base_SetConfig+0x120>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d01b      	beq.n	80065ce <TIM_Base_SetConfig+0xb2>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a29      	ldr	r2, [pc, #164]	@ (8006640 <TIM_Base_SetConfig+0x124>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d017      	beq.n	80065ce <TIM_Base_SetConfig+0xb2>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a28      	ldr	r2, [pc, #160]	@ (8006644 <TIM_Base_SetConfig+0x128>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d013      	beq.n	80065ce <TIM_Base_SetConfig+0xb2>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a27      	ldr	r2, [pc, #156]	@ (8006648 <TIM_Base_SetConfig+0x12c>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d00f      	beq.n	80065ce <TIM_Base_SetConfig+0xb2>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a26      	ldr	r2, [pc, #152]	@ (800664c <TIM_Base_SetConfig+0x130>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d00b      	beq.n	80065ce <TIM_Base_SetConfig+0xb2>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a25      	ldr	r2, [pc, #148]	@ (8006650 <TIM_Base_SetConfig+0x134>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d007      	beq.n	80065ce <TIM_Base_SetConfig+0xb2>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a24      	ldr	r2, [pc, #144]	@ (8006654 <TIM_Base_SetConfig+0x138>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d003      	beq.n	80065ce <TIM_Base_SetConfig+0xb2>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a23      	ldr	r2, [pc, #140]	@ (8006658 <TIM_Base_SetConfig+0x13c>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d108      	bne.n	80065e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	4313      	orrs	r3, r2
 80065de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	689a      	ldr	r2, [r3, #8]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a0a      	ldr	r2, [pc, #40]	@ (8006630 <TIM_Base_SetConfig+0x114>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d003      	beq.n	8006614 <TIM_Base_SetConfig+0xf8>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a0c      	ldr	r2, [pc, #48]	@ (8006640 <TIM_Base_SetConfig+0x124>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d103      	bne.n	800661c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	691a      	ldr	r2, [r3, #16]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	615a      	str	r2, [r3, #20]
}
 8006622:	bf00      	nop
 8006624:	3714      	adds	r7, #20
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	40010000 	.word	0x40010000
 8006634:	40000400 	.word	0x40000400
 8006638:	40000800 	.word	0x40000800
 800663c:	40000c00 	.word	0x40000c00
 8006640:	40010400 	.word	0x40010400
 8006644:	40014000 	.word	0x40014000
 8006648:	40014400 	.word	0x40014400
 800664c:	40014800 	.word	0x40014800
 8006650:	40001800 	.word	0x40001800
 8006654:	40001c00 	.word	0x40001c00
 8006658:	40002000 	.word	0x40002000

0800665c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800665c:	b480      	push	{r7}
 800665e:	b087      	sub	sp, #28
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a1b      	ldr	r3, [r3, #32]
 800666a:	f023 0201 	bic.w	r2, r3, #1
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a1b      	ldr	r3, [r3, #32]
 8006676:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	4b2b      	ldr	r3, [pc, #172]	@ (8006734 <TIM_OC1_SetConfig+0xd8>)
 8006688:	4013      	ands	r3, r2
 800668a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f023 0303 	bic.w	r3, r3, #3
 8006692:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	4313      	orrs	r3, r2
 800669c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	f023 0302 	bic.w	r3, r3, #2
 80066a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a21      	ldr	r2, [pc, #132]	@ (8006738 <TIM_OC1_SetConfig+0xdc>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d003      	beq.n	80066c0 <TIM_OC1_SetConfig+0x64>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a20      	ldr	r2, [pc, #128]	@ (800673c <TIM_OC1_SetConfig+0xe0>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d10c      	bne.n	80066da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	f023 0308 	bic.w	r3, r3, #8
 80066c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	f023 0304 	bic.w	r3, r3, #4
 80066d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a16      	ldr	r2, [pc, #88]	@ (8006738 <TIM_OC1_SetConfig+0xdc>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d003      	beq.n	80066ea <TIM_OC1_SetConfig+0x8e>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a15      	ldr	r2, [pc, #84]	@ (800673c <TIM_OC1_SetConfig+0xe0>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d111      	bne.n	800670e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80066f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	695b      	ldr	r3, [r3, #20]
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	4313      	orrs	r3, r2
 8006702:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	4313      	orrs	r3, r2
 800670c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	685a      	ldr	r2, [r3, #4]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	621a      	str	r2, [r3, #32]
}
 8006728:	bf00      	nop
 800672a:	371c      	adds	r7, #28
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr
 8006734:	fffeff8f 	.word	0xfffeff8f
 8006738:	40010000 	.word	0x40010000
 800673c:	40010400 	.word	0x40010400

08006740 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006740:	b480      	push	{r7}
 8006742:	b087      	sub	sp, #28
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a1b      	ldr	r3, [r3, #32]
 800674e:	f023 0210 	bic.w	r2, r3, #16
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a1b      	ldr	r3, [r3, #32]
 800675a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	4b2e      	ldr	r3, [pc, #184]	@ (8006824 <TIM_OC2_SetConfig+0xe4>)
 800676c:	4013      	ands	r3, r2
 800676e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006776:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	021b      	lsls	r3, r3, #8
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	4313      	orrs	r3, r2
 8006782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	f023 0320 	bic.w	r3, r3, #32
 800678a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	011b      	lsls	r3, r3, #4
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	4313      	orrs	r3, r2
 8006796:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a23      	ldr	r2, [pc, #140]	@ (8006828 <TIM_OC2_SetConfig+0xe8>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d003      	beq.n	80067a8 <TIM_OC2_SetConfig+0x68>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a22      	ldr	r2, [pc, #136]	@ (800682c <TIM_OC2_SetConfig+0xec>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d10d      	bne.n	80067c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	011b      	lsls	r3, r3, #4
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a18      	ldr	r2, [pc, #96]	@ (8006828 <TIM_OC2_SetConfig+0xe8>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d003      	beq.n	80067d4 <TIM_OC2_SetConfig+0x94>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a17      	ldr	r2, [pc, #92]	@ (800682c <TIM_OC2_SetConfig+0xec>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d113      	bne.n	80067fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80067e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	695b      	ldr	r3, [r3, #20]
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	693a      	ldr	r2, [r7, #16]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	693a      	ldr	r2, [r7, #16]
 8006800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	685a      	ldr	r2, [r3, #4]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	697a      	ldr	r2, [r7, #20]
 8006814:	621a      	str	r2, [r3, #32]
}
 8006816:	bf00      	nop
 8006818:	371c      	adds	r7, #28
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	feff8fff 	.word	0xfeff8fff
 8006828:	40010000 	.word	0x40010000
 800682c:	40010400 	.word	0x40010400

08006830 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	69db      	ldr	r3, [r3, #28]
 8006856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	4b2d      	ldr	r3, [pc, #180]	@ (8006910 <TIM_OC3_SetConfig+0xe0>)
 800685c:	4013      	ands	r3, r2
 800685e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f023 0303 	bic.w	r3, r3, #3
 8006866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	4313      	orrs	r3, r2
 8006870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006878:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	021b      	lsls	r3, r3, #8
 8006880:	697a      	ldr	r2, [r7, #20]
 8006882:	4313      	orrs	r3, r2
 8006884:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a22      	ldr	r2, [pc, #136]	@ (8006914 <TIM_OC3_SetConfig+0xe4>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d003      	beq.n	8006896 <TIM_OC3_SetConfig+0x66>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a21      	ldr	r2, [pc, #132]	@ (8006918 <TIM_OC3_SetConfig+0xe8>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d10d      	bne.n	80068b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800689c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	021b      	lsls	r3, r3, #8
 80068a4:	697a      	ldr	r2, [r7, #20]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80068b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a17      	ldr	r2, [pc, #92]	@ (8006914 <TIM_OC3_SetConfig+0xe4>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d003      	beq.n	80068c2 <TIM_OC3_SetConfig+0x92>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a16      	ldr	r2, [pc, #88]	@ (8006918 <TIM_OC3_SetConfig+0xe8>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d113      	bne.n	80068ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80068d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	695b      	ldr	r3, [r3, #20]
 80068d6:	011b      	lsls	r3, r3, #4
 80068d8:	693a      	ldr	r2, [r7, #16]
 80068da:	4313      	orrs	r3, r2
 80068dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	011b      	lsls	r3, r3, #4
 80068e4:	693a      	ldr	r2, [r7, #16]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	693a      	ldr	r2, [r7, #16]
 80068ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	685a      	ldr	r2, [r3, #4]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	697a      	ldr	r2, [r7, #20]
 8006902:	621a      	str	r2, [r3, #32]
}
 8006904:	bf00      	nop
 8006906:	371c      	adds	r7, #28
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr
 8006910:	fffeff8f 	.word	0xfffeff8f
 8006914:	40010000 	.word	0x40010000
 8006918:	40010400 	.word	0x40010400

0800691c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800691c:	b480      	push	{r7}
 800691e:	b087      	sub	sp, #28
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a1b      	ldr	r3, [r3, #32]
 800692a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	69db      	ldr	r3, [r3, #28]
 8006942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	4b1e      	ldr	r3, [pc, #120]	@ (80069c0 <TIM_OC4_SetConfig+0xa4>)
 8006948:	4013      	ands	r3, r2
 800694a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006952:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	021b      	lsls	r3, r3, #8
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	4313      	orrs	r3, r2
 800695e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006966:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	031b      	lsls	r3, r3, #12
 800696e:	693a      	ldr	r2, [r7, #16]
 8006970:	4313      	orrs	r3, r2
 8006972:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a13      	ldr	r2, [pc, #76]	@ (80069c4 <TIM_OC4_SetConfig+0xa8>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d003      	beq.n	8006984 <TIM_OC4_SetConfig+0x68>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a12      	ldr	r2, [pc, #72]	@ (80069c8 <TIM_OC4_SetConfig+0xac>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d109      	bne.n	8006998 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800698a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	695b      	ldr	r3, [r3, #20]
 8006990:	019b      	lsls	r3, r3, #6
 8006992:	697a      	ldr	r2, [r7, #20]
 8006994:	4313      	orrs	r3, r2
 8006996:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	685a      	ldr	r2, [r3, #4]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	621a      	str	r2, [r3, #32]
}
 80069b2:	bf00      	nop
 80069b4:	371c      	adds	r7, #28
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop
 80069c0:	feff8fff 	.word	0xfeff8fff
 80069c4:	40010000 	.word	0x40010000
 80069c8:	40010400 	.word	0x40010400

080069cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b087      	sub	sp, #28
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a1b      	ldr	r3, [r3, #32]
 80069da:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a1b      	ldr	r3, [r3, #32]
 80069e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	4b1b      	ldr	r3, [pc, #108]	@ (8006a64 <TIM_OC5_SetConfig+0x98>)
 80069f8:	4013      	ands	r3, r2
 80069fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006a0c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	041b      	lsls	r3, r3, #16
 8006a14:	693a      	ldr	r2, [r7, #16]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a12      	ldr	r2, [pc, #72]	@ (8006a68 <TIM_OC5_SetConfig+0x9c>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d003      	beq.n	8006a2a <TIM_OC5_SetConfig+0x5e>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a11      	ldr	r2, [pc, #68]	@ (8006a6c <TIM_OC5_SetConfig+0xa0>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d109      	bne.n	8006a3e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	021b      	lsls	r3, r3, #8
 8006a38:	697a      	ldr	r2, [r7, #20]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	697a      	ldr	r2, [r7, #20]
 8006a42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	685a      	ldr	r2, [r3, #4]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	693a      	ldr	r2, [r7, #16]
 8006a56:	621a      	str	r2, [r3, #32]
}
 8006a58:	bf00      	nop
 8006a5a:	371c      	adds	r7, #28
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr
 8006a64:	fffeff8f 	.word	0xfffeff8f
 8006a68:	40010000 	.word	0x40010000
 8006a6c:	40010400 	.word	0x40010400

08006a70 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b087      	sub	sp, #28
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a1b      	ldr	r3, [r3, #32]
 8006a8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	4b1c      	ldr	r3, [pc, #112]	@ (8006b0c <TIM_OC6_SetConfig+0x9c>)
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	021b      	lsls	r3, r3, #8
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006ab2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	051b      	lsls	r3, r3, #20
 8006aba:	693a      	ldr	r2, [r7, #16]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a13      	ldr	r2, [pc, #76]	@ (8006b10 <TIM_OC6_SetConfig+0xa0>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d003      	beq.n	8006ad0 <TIM_OC6_SetConfig+0x60>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a12      	ldr	r2, [pc, #72]	@ (8006b14 <TIM_OC6_SetConfig+0xa4>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d109      	bne.n	8006ae4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ad6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	695b      	ldr	r3, [r3, #20]
 8006adc:	029b      	lsls	r3, r3, #10
 8006ade:	697a      	ldr	r2, [r7, #20]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	697a      	ldr	r2, [r7, #20]
 8006ae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	685a      	ldr	r2, [r3, #4]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	693a      	ldr	r2, [r7, #16]
 8006afc:	621a      	str	r2, [r3, #32]
}
 8006afe:	bf00      	nop
 8006b00:	371c      	adds	r7, #28
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	feff8fff 	.word	0xfeff8fff
 8006b10:	40010000 	.word	0x40010000
 8006b14:	40010400 	.word	0x40010400

08006b18 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b087      	sub	sp, #28
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	607a      	str	r2, [r7, #4]
 8006b24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	f023 0201 	bic.w	r2, r3, #1
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6a1b      	ldr	r3, [r3, #32]
 8006b3c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	4a28      	ldr	r2, [pc, #160]	@ (8006be4 <TIM_TI1_SetConfig+0xcc>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d01b      	beq.n	8006b7e <TIM_TI1_SetConfig+0x66>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b4c:	d017      	beq.n	8006b7e <TIM_TI1_SetConfig+0x66>
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	4a25      	ldr	r2, [pc, #148]	@ (8006be8 <TIM_TI1_SetConfig+0xd0>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d013      	beq.n	8006b7e <TIM_TI1_SetConfig+0x66>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	4a24      	ldr	r2, [pc, #144]	@ (8006bec <TIM_TI1_SetConfig+0xd4>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d00f      	beq.n	8006b7e <TIM_TI1_SetConfig+0x66>
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	4a23      	ldr	r2, [pc, #140]	@ (8006bf0 <TIM_TI1_SetConfig+0xd8>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d00b      	beq.n	8006b7e <TIM_TI1_SetConfig+0x66>
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	4a22      	ldr	r2, [pc, #136]	@ (8006bf4 <TIM_TI1_SetConfig+0xdc>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d007      	beq.n	8006b7e <TIM_TI1_SetConfig+0x66>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	4a21      	ldr	r2, [pc, #132]	@ (8006bf8 <TIM_TI1_SetConfig+0xe0>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d003      	beq.n	8006b7e <TIM_TI1_SetConfig+0x66>
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	4a20      	ldr	r2, [pc, #128]	@ (8006bfc <TIM_TI1_SetConfig+0xe4>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d101      	bne.n	8006b82 <TIM_TI1_SetConfig+0x6a>
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e000      	b.n	8006b84 <TIM_TI1_SetConfig+0x6c>
 8006b82:	2300      	movs	r3, #0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d008      	beq.n	8006b9a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	f023 0303 	bic.w	r3, r3, #3
 8006b8e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	617b      	str	r3, [r7, #20]
 8006b98:	e003      	b.n	8006ba2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	f043 0301 	orr.w	r3, r3, #1
 8006ba0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ba8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	011b      	lsls	r3, r3, #4
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	f023 030a 	bic.w	r3, r3, #10
 8006bbc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	f003 030a 	and.w	r3, r3, #10
 8006bc4:	693a      	ldr	r2, [r7, #16]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	697a      	ldr	r2, [r7, #20]
 8006bce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	693a      	ldr	r2, [r7, #16]
 8006bd4:	621a      	str	r2, [r3, #32]
}
 8006bd6:	bf00      	nop
 8006bd8:	371c      	adds	r7, #28
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	40010000 	.word	0x40010000
 8006be8:	40000400 	.word	0x40000400
 8006bec:	40000800 	.word	0x40000800
 8006bf0:	40000c00 	.word	0x40000c00
 8006bf4:	40010400 	.word	0x40010400
 8006bf8:	40014000 	.word	0x40014000
 8006bfc:	40001800 	.word	0x40001800

08006c00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b087      	sub	sp, #28
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6a1b      	ldr	r3, [r3, #32]
 8006c10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6a1b      	ldr	r3, [r3, #32]
 8006c16:	f023 0201 	bic.w	r2, r3, #1
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	011b      	lsls	r3, r3, #4
 8006c30:	693a      	ldr	r2, [r7, #16]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	f023 030a 	bic.w	r3, r3, #10
 8006c3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c3e:	697a      	ldr	r2, [r7, #20]
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	621a      	str	r2, [r3, #32]
}
 8006c52:	bf00      	nop
 8006c54:	371c      	adds	r7, #28
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr

08006c5e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c5e:	b480      	push	{r7}
 8006c60:	b087      	sub	sp, #28
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	60f8      	str	r0, [r7, #12]
 8006c66:	60b9      	str	r1, [r7, #8]
 8006c68:	607a      	str	r2, [r7, #4]
 8006c6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6a1b      	ldr	r3, [r3, #32]
 8006c70:	f023 0210 	bic.w	r2, r3, #16
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	699b      	ldr	r3, [r3, #24]
 8006c7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c8a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	021b      	lsls	r3, r3, #8
 8006c90:	697a      	ldr	r2, [r7, #20]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006c9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	031b      	lsls	r3, r3, #12
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	697a      	ldr	r2, [r7, #20]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006cb0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	011b      	lsls	r3, r3, #4
 8006cb6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	697a      	ldr	r2, [r7, #20]
 8006cc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	693a      	ldr	r2, [r7, #16]
 8006cca:	621a      	str	r2, [r3, #32]
}
 8006ccc:	bf00      	nop
 8006cce:	371c      	adds	r7, #28
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b087      	sub	sp, #28
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6a1b      	ldr	r3, [r3, #32]
 8006ce8:	f023 0210 	bic.w	r2, r3, #16
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6a1b      	ldr	r3, [r3, #32]
 8006cfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d02:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	031b      	lsls	r3, r3, #12
 8006d08:	697a      	ldr	r2, [r7, #20]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006d14:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	011b      	lsls	r3, r3, #4
 8006d1a:	693a      	ldr	r2, [r7, #16]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	697a      	ldr	r2, [r7, #20]
 8006d24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	693a      	ldr	r2, [r7, #16]
 8006d2a:	621a      	str	r2, [r3, #32]
}
 8006d2c:	bf00      	nop
 8006d2e:	371c      	adds	r7, #28
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b087      	sub	sp, #28
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
 8006d44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	69db      	ldr	r3, [r3, #28]
 8006d56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6a1b      	ldr	r3, [r3, #32]
 8006d5c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	f023 0303 	bic.w	r3, r3, #3
 8006d64:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006d66:	697a      	ldr	r2, [r7, #20]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d74:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	011b      	lsls	r3, r3, #4
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	697a      	ldr	r2, [r7, #20]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006d88:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	021b      	lsls	r3, r3, #8
 8006d8e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006d92:	693a      	ldr	r2, [r7, #16]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	697a      	ldr	r2, [r7, #20]
 8006d9c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	693a      	ldr	r2, [r7, #16]
 8006da2:	621a      	str	r2, [r3, #32]
}
 8006da4:	bf00      	nop
 8006da6:	371c      	adds	r7, #28
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b087      	sub	sp, #28
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
 8006dbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6a1b      	ldr	r3, [r3, #32]
 8006dc2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	69db      	ldr	r3, [r3, #28]
 8006dce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6a1b      	ldr	r3, [r3, #32]
 8006dd4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ddc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	021b      	lsls	r3, r3, #8
 8006de2:	697a      	ldr	r2, [r7, #20]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006dee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	031b      	lsls	r3, r3, #12
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	697a      	ldr	r2, [r7, #20]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006e02:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	031b      	lsls	r3, r3, #12
 8006e08:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	697a      	ldr	r2, [r7, #20]
 8006e16:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	621a      	str	r2, [r3, #32]
}
 8006e1e:	bf00      	nop
 8006e20:	371c      	adds	r7, #28
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr

08006e2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e2a:	b480      	push	{r7}
 8006e2c:	b085      	sub	sp, #20
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
 8006e32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e42:	683a      	ldr	r2, [r7, #0]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	f043 0307 	orr.w	r3, r3, #7
 8006e4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	609a      	str	r2, [r3, #8]
}
 8006e54:	bf00      	nop
 8006e56:	3714      	adds	r7, #20
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b087      	sub	sp, #28
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	607a      	str	r2, [r7, #4]
 8006e6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	021a      	lsls	r2, r3, #8
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	431a      	orrs	r2, r3
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	697a      	ldr	r2, [r7, #20]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	697a      	ldr	r2, [r7, #20]
 8006e92:	609a      	str	r2, [r3, #8]
}
 8006e94:	bf00      	nop
 8006e96:	371c      	adds	r7, #28
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b085      	sub	sp, #20
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d101      	bne.n	8006eb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006eb4:	2302      	movs	r3, #2
 8006eb6:	e06d      	b.n	8006f94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a30      	ldr	r2, [pc, #192]	@ (8006fa0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d004      	beq.n	8006eec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a2f      	ldr	r2, [pc, #188]	@ (8006fa4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d108      	bne.n	8006efe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006ef2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a20      	ldr	r2, [pc, #128]	@ (8006fa0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d022      	beq.n	8006f68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f2a:	d01d      	beq.n	8006f68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a1d      	ldr	r2, [pc, #116]	@ (8006fa8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d018      	beq.n	8006f68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a1c      	ldr	r2, [pc, #112]	@ (8006fac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d013      	beq.n	8006f68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a1a      	ldr	r2, [pc, #104]	@ (8006fb0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d00e      	beq.n	8006f68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a15      	ldr	r2, [pc, #84]	@ (8006fa4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d009      	beq.n	8006f68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a16      	ldr	r2, [pc, #88]	@ (8006fb4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d004      	beq.n	8006f68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a15      	ldr	r2, [pc, #84]	@ (8006fb8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d10c      	bne.n	8006f82 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3714      	adds	r7, #20
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr
 8006fa0:	40010000 	.word	0x40010000
 8006fa4:	40010400 	.word	0x40010400
 8006fa8:	40000400 	.word	0x40000400
 8006fac:	40000800 	.word	0x40000800
 8006fb0:	40000c00 	.word	0x40000c00
 8006fb4:	40014000 	.word	0x40014000
 8006fb8:	40001800 	.word	0x40001800

08006fbc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d101      	bne.n	8006fd8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006fd4:	2302      	movs	r3, #2
 8006fd6:	e065      	b.n	80070a4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	4313      	orrs	r3, r2
 8007008:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4313      	orrs	r3, r2
 8007016:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	4313      	orrs	r3, r2
 8007024:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	695b      	ldr	r3, [r3, #20]
 8007030:	4313      	orrs	r3, r2
 8007032:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800703e:	4313      	orrs	r3, r2
 8007040:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	699b      	ldr	r3, [r3, #24]
 800704c:	041b      	lsls	r3, r3, #16
 800704e:	4313      	orrs	r3, r2
 8007050:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a16      	ldr	r2, [pc, #88]	@ (80070b0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d004      	beq.n	8007066 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a14      	ldr	r2, [pc, #80]	@ (80070b4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d115      	bne.n	8007092 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007070:	051b      	lsls	r3, r3, #20
 8007072:	4313      	orrs	r3, r2
 8007074:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	69db      	ldr	r3, [r3, #28]
 8007080:	4313      	orrs	r3, r2
 8007082:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	6a1b      	ldr	r3, [r3, #32]
 800708e:	4313      	orrs	r3, r2
 8007090:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3714      	adds	r7, #20
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr
 80070b0:	40010000 	.word	0x40010000
 80070b4:	40010400 	.word	0x40010400

080070b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80070c0:	bf00      	nop
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070d4:	bf00      	nop
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80070e8:	bf00      	nop
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <memset>:
 80070f4:	4402      	add	r2, r0
 80070f6:	4603      	mov	r3, r0
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d100      	bne.n	80070fe <memset+0xa>
 80070fc:	4770      	bx	lr
 80070fe:	f803 1b01 	strb.w	r1, [r3], #1
 8007102:	e7f9      	b.n	80070f8 <memset+0x4>

08007104 <__errno>:
 8007104:	4b01      	ldr	r3, [pc, #4]	@ (800710c <__errno+0x8>)
 8007106:	6818      	ldr	r0, [r3, #0]
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	2000003c 	.word	0x2000003c

08007110 <__libc_init_array>:
 8007110:	b570      	push	{r4, r5, r6, lr}
 8007112:	4d0d      	ldr	r5, [pc, #52]	@ (8007148 <__libc_init_array+0x38>)
 8007114:	4c0d      	ldr	r4, [pc, #52]	@ (800714c <__libc_init_array+0x3c>)
 8007116:	1b64      	subs	r4, r4, r5
 8007118:	10a4      	asrs	r4, r4, #2
 800711a:	2600      	movs	r6, #0
 800711c:	42a6      	cmp	r6, r4
 800711e:	d109      	bne.n	8007134 <__libc_init_array+0x24>
 8007120:	4d0b      	ldr	r5, [pc, #44]	@ (8007150 <__libc_init_array+0x40>)
 8007122:	4c0c      	ldr	r4, [pc, #48]	@ (8007154 <__libc_init_array+0x44>)
 8007124:	f000 f9e4 	bl	80074f0 <_init>
 8007128:	1b64      	subs	r4, r4, r5
 800712a:	10a4      	asrs	r4, r4, #2
 800712c:	2600      	movs	r6, #0
 800712e:	42a6      	cmp	r6, r4
 8007130:	d105      	bne.n	800713e <__libc_init_array+0x2e>
 8007132:	bd70      	pop	{r4, r5, r6, pc}
 8007134:	f855 3b04 	ldr.w	r3, [r5], #4
 8007138:	4798      	blx	r3
 800713a:	3601      	adds	r6, #1
 800713c:	e7ee      	b.n	800711c <__libc_init_array+0xc>
 800713e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007142:	4798      	blx	r3
 8007144:	3601      	adds	r6, #1
 8007146:	e7f2      	b.n	800712e <__libc_init_array+0x1e>
 8007148:	0800fed0 	.word	0x0800fed0
 800714c:	0800fed0 	.word	0x0800fed0
 8007150:	0800fed0 	.word	0x0800fed0
 8007154:	0800fed4 	.word	0x0800fed4

08007158 <sqrtf>:
 8007158:	b508      	push	{r3, lr}
 800715a:	ed2d 8b02 	vpush	{d8}
 800715e:	eeb0 8a40 	vmov.f32	s16, s0
 8007162:	f000 f9c2 	bl	80074ea <__ieee754_sqrtf>
 8007166:	eeb4 8a48 	vcmp.f32	s16, s16
 800716a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800716e:	d60c      	bvs.n	800718a <sqrtf+0x32>
 8007170:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8007190 <sqrtf+0x38>
 8007174:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800717c:	d505      	bpl.n	800718a <sqrtf+0x32>
 800717e:	f7ff ffc1 	bl	8007104 <__errno>
 8007182:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8007186:	2321      	movs	r3, #33	@ 0x21
 8007188:	6003      	str	r3, [r0, #0]
 800718a:	ecbd 8b02 	vpop	{d8}
 800718e:	bd08      	pop	{r3, pc}
 8007190:	00000000 	.word	0x00000000

08007194 <sinf_poly>:
 8007194:	07cb      	lsls	r3, r1, #31
 8007196:	d412      	bmi.n	80071be <sinf_poly+0x2a>
 8007198:	ee21 5b00 	vmul.f64	d5, d1, d0
 800719c:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 80071a0:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 80071a4:	eea6 7b01 	vfma.f64	d7, d6, d1
 80071a8:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 80071ac:	ee21 1b05 	vmul.f64	d1, d1, d5
 80071b0:	eea6 0b05 	vfma.f64	d0, d6, d5
 80071b4:	eea7 0b01 	vfma.f64	d0, d7, d1
 80071b8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80071bc:	4770      	bx	lr
 80071be:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 80071c2:	ee21 5b01 	vmul.f64	d5, d1, d1
 80071c6:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 80071ca:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 80071ce:	eea1 7b06 	vfma.f64	d7, d1, d6
 80071d2:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 80071d6:	eea1 0b06 	vfma.f64	d0, d1, d6
 80071da:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 80071de:	ee21 1b05 	vmul.f64	d1, d1, d5
 80071e2:	eea5 0b06 	vfma.f64	d0, d5, d6
 80071e6:	e7e5      	b.n	80071b4 <sinf_poly+0x20>

080071e8 <sinf>:
 80071e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071ea:	ee10 4a10 	vmov	r4, s0
 80071ee:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80071f2:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 80071f6:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 80071fa:	eef0 7a40 	vmov.f32	s15, s0
 80071fe:	ea4f 5214 	mov.w	r2, r4, lsr #20
 8007202:	d218      	bcs.n	8007236 <sinf+0x4e>
 8007204:	ee26 1b06 	vmul.f64	d1, d6, d6
 8007208:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 800720c:	d20a      	bcs.n	8007224 <sinf+0x3c>
 800720e:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 8007212:	d103      	bne.n	800721c <sinf+0x34>
 8007214:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8007218:	ed8d 1a01 	vstr	s2, [sp, #4]
 800721c:	eeb0 0a67 	vmov.f32	s0, s15
 8007220:	b003      	add	sp, #12
 8007222:	bd30      	pop	{r4, r5, pc}
 8007224:	483a      	ldr	r0, [pc, #232]	@ (8007310 <sinf+0x128>)
 8007226:	eeb0 0b46 	vmov.f64	d0, d6
 800722a:	2100      	movs	r1, #0
 800722c:	b003      	add	sp, #12
 800722e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007232:	f7ff bfaf 	b.w	8007194 <sinf_poly>
 8007236:	f240 422e 	movw	r2, #1070	@ 0x42e
 800723a:	4293      	cmp	r3, r2
 800723c:	d824      	bhi.n	8007288 <sinf+0xa0>
 800723e:	4b34      	ldr	r3, [pc, #208]	@ (8007310 <sinf+0x128>)
 8007240:	ed93 7b08 	vldr	d7, [r3, #32]
 8007244:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007248:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800724c:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8007250:	ee17 1a90 	vmov	r1, s15
 8007254:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8007258:	1609      	asrs	r1, r1, #24
 800725a:	ee07 1a90 	vmov	s15, r1
 800725e:	f001 0203 	and.w	r2, r1, #3
 8007262:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8007266:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800726a:	ed92 0b00 	vldr	d0, [r2]
 800726e:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8007272:	f011 0f02 	tst.w	r1, #2
 8007276:	eea5 6b47 	vfms.f64	d6, d5, d7
 800727a:	bf08      	it	eq
 800727c:	4618      	moveq	r0, r3
 800727e:	ee26 1b06 	vmul.f64	d1, d6, d6
 8007282:	ee20 0b06 	vmul.f64	d0, d0, d6
 8007286:	e7d1      	b.n	800722c <sinf+0x44>
 8007288:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 800728c:	d237      	bcs.n	80072fe <sinf+0x116>
 800728e:	4921      	ldr	r1, [pc, #132]	@ (8007314 <sinf+0x12c>)
 8007290:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8007294:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8007298:	f3c4 0316 	ubfx	r3, r4, #0, #23
 800729c:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 80072a0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80072a4:	6a10      	ldr	r0, [r2, #32]
 80072a6:	6912      	ldr	r2, [r2, #16]
 80072a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80072ac:	40ab      	lsls	r3, r5
 80072ae:	fba0 5003 	umull	r5, r0, r0, r3
 80072b2:	4359      	muls	r1, r3
 80072b4:	fbe3 0102 	umlal	r0, r1, r3, r2
 80072b8:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 80072bc:	0f9d      	lsrs	r5, r3, #30
 80072be:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80072c2:	1ac9      	subs	r1, r1, r3
 80072c4:	f7f9 f946 	bl	8000554 <__aeabi_l2d>
 80072c8:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 80072cc:	4b10      	ldr	r3, [pc, #64]	@ (8007310 <sinf+0x128>)
 80072ce:	f004 0203 	and.w	r2, r4, #3
 80072d2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80072d6:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8007308 <sinf+0x120>
 80072da:	ed92 0b00 	vldr	d0, [r2]
 80072de:	ec41 0b17 	vmov	d7, r0, r1
 80072e2:	f014 0f02 	tst.w	r4, #2
 80072e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80072ea:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80072ee:	4629      	mov	r1, r5
 80072f0:	bf08      	it	eq
 80072f2:	4618      	moveq	r0, r3
 80072f4:	ee27 1b07 	vmul.f64	d1, d7, d7
 80072f8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80072fc:	e796      	b.n	800722c <sinf+0x44>
 80072fe:	b003      	add	sp, #12
 8007300:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007304:	f000 b8e2 	b.w	80074cc <__math_invalidf>
 8007308:	54442d18 	.word	0x54442d18
 800730c:	3c1921fb 	.word	0x3c1921fb
 8007310:	0800fde8 	.word	0x0800fde8
 8007314:	0800fd88 	.word	0x0800fd88

08007318 <sinf_poly>:
 8007318:	07cb      	lsls	r3, r1, #31
 800731a:	d412      	bmi.n	8007342 <sinf_poly+0x2a>
 800731c:	ee21 5b00 	vmul.f64	d5, d1, d0
 8007320:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8007324:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8007328:	eea6 7b01 	vfma.f64	d7, d6, d1
 800732c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8007330:	ee21 1b05 	vmul.f64	d1, d1, d5
 8007334:	eea6 0b05 	vfma.f64	d0, d6, d5
 8007338:	eea7 0b01 	vfma.f64	d0, d7, d1
 800733c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8007340:	4770      	bx	lr
 8007342:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8007346:	ee21 5b01 	vmul.f64	d5, d1, d1
 800734a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 800734e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8007352:	eea1 7b06 	vfma.f64	d7, d1, d6
 8007356:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 800735a:	eea1 0b06 	vfma.f64	d0, d1, d6
 800735e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8007362:	ee21 1b05 	vmul.f64	d1, d1, d5
 8007366:	eea5 0b06 	vfma.f64	d0, d5, d6
 800736a:	e7e5      	b.n	8007338 <sinf_poly+0x20>
 800736c:	0000      	movs	r0, r0
	...

08007370 <cosf>:
 8007370:	b538      	push	{r3, r4, r5, lr}
 8007372:	ee10 4a10 	vmov	r4, s0
 8007376:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800737a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 800737e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8007382:	d21f      	bcs.n	80073c4 <cosf+0x54>
 8007384:	ee27 7b07 	vmul.f64	d7, d7, d7
 8007388:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 800738c:	f0c0 8082 	bcc.w	8007494 <cosf+0x124>
 8007390:	ee27 4b07 	vmul.f64	d4, d7, d7
 8007394:	4b44      	ldr	r3, [pc, #272]	@ (80074a8 <cosf+0x138>)
 8007396:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 800739a:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 800739e:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 80073a2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80073a6:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 80073aa:	eea7 0b05 	vfma.f64	d0, d7, d5
 80073ae:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 80073b2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80073b6:	eea4 0b05 	vfma.f64	d0, d4, d5
 80073ba:	eea6 0b07 	vfma.f64	d0, d6, d7
 80073be:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80073c2:	bd38      	pop	{r3, r4, r5, pc}
 80073c4:	f240 422e 	movw	r2, #1070	@ 0x42e
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d829      	bhi.n	8007420 <cosf+0xb0>
 80073cc:	4b36      	ldr	r3, [pc, #216]	@ (80074a8 <cosf+0x138>)
 80073ce:	ed93 6b08 	vldr	d6, [r3, #32]
 80073d2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80073d6:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 80073da:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80073de:	ee16 1a90 	vmov	r1, s13
 80073e2:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 80073e6:	1609      	asrs	r1, r1, #24
 80073e8:	ee06 1a90 	vmov	s13, r1
 80073ec:	f001 0203 	and.w	r2, r1, #3
 80073f0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80073f4:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80073f8:	ed92 0b00 	vldr	d0, [r2]
 80073fc:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8007400:	f011 0f02 	tst.w	r1, #2
 8007404:	f081 0101 	eor.w	r1, r1, #1
 8007408:	eea5 7b46 	vfms.f64	d7, d5, d6
 800740c:	bf08      	it	eq
 800740e:	4618      	moveq	r0, r3
 8007410:	ee27 1b07 	vmul.f64	d1, d7, d7
 8007414:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007418:	ee20 0b07 	vmul.f64	d0, d0, d7
 800741c:	f7ff bf7c 	b.w	8007318 <sinf_poly>
 8007420:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8007424:	d232      	bcs.n	800748c <cosf+0x11c>
 8007426:	4921      	ldr	r1, [pc, #132]	@ (80074ac <cosf+0x13c>)
 8007428:	f3c4 6083 	ubfx	r0, r4, #26, #4
 800742c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8007430:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8007434:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8007438:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800743c:	6a10      	ldr	r0, [r2, #32]
 800743e:	6912      	ldr	r2, [r2, #16]
 8007440:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007444:	40ab      	lsls	r3, r5
 8007446:	fba0 5003 	umull	r5, r0, r0, r3
 800744a:	4359      	muls	r1, r3
 800744c:	fbe3 0102 	umlal	r0, r1, r3, r2
 8007450:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8007454:	0f9d      	lsrs	r5, r3, #30
 8007456:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800745a:	1ac9      	subs	r1, r1, r3
 800745c:	f7f9 f87a 	bl	8000554 <__aeabi_l2d>
 8007460:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8007464:	4b10      	ldr	r3, [pc, #64]	@ (80074a8 <cosf+0x138>)
 8007466:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 80074a0 <cosf+0x130>
 800746a:	ec41 0b17 	vmov	d7, r0, r1
 800746e:	f004 0203 	and.w	r2, r4, #3
 8007472:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8007476:	ed92 0b00 	vldr	d0, [r2]
 800747a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800747e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8007482:	f014 0f02 	tst.w	r4, #2
 8007486:	f085 0101 	eor.w	r1, r5, #1
 800748a:	e7bf      	b.n	800740c <cosf+0x9c>
 800748c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007490:	f000 b81c 	b.w	80074cc <__math_invalidf>
 8007494:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007498:	e793      	b.n	80073c2 <cosf+0x52>
 800749a:	bf00      	nop
 800749c:	f3af 8000 	nop.w
 80074a0:	54442d18 	.word	0x54442d18
 80074a4:	3c1921fb 	.word	0x3c1921fb
 80074a8:	0800fde8 	.word	0x0800fde8
 80074ac:	0800fd88 	.word	0x0800fd88

080074b0 <with_errnof>:
 80074b0:	b510      	push	{r4, lr}
 80074b2:	ed2d 8b02 	vpush	{d8}
 80074b6:	eeb0 8a40 	vmov.f32	s16, s0
 80074ba:	4604      	mov	r4, r0
 80074bc:	f7ff fe22 	bl	8007104 <__errno>
 80074c0:	eeb0 0a48 	vmov.f32	s0, s16
 80074c4:	ecbd 8b02 	vpop	{d8}
 80074c8:	6004      	str	r4, [r0, #0]
 80074ca:	bd10      	pop	{r4, pc}

080074cc <__math_invalidf>:
 80074cc:	eef0 7a40 	vmov.f32	s15, s0
 80074d0:	ee30 7a40 	vsub.f32	s14, s0, s0
 80074d4:	eef4 7a67 	vcmp.f32	s15, s15
 80074d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074dc:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80074e0:	d602      	bvs.n	80074e8 <__math_invalidf+0x1c>
 80074e2:	2021      	movs	r0, #33	@ 0x21
 80074e4:	f7ff bfe4 	b.w	80074b0 <with_errnof>
 80074e8:	4770      	bx	lr

080074ea <__ieee754_sqrtf>:
 80074ea:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80074ee:	4770      	bx	lr

080074f0 <_init>:
 80074f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074f2:	bf00      	nop
 80074f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074f6:	bc08      	pop	{r3}
 80074f8:	469e      	mov	lr, r3
 80074fa:	4770      	bx	lr

080074fc <_fini>:
 80074fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074fe:	bf00      	nop
 8007500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007502:	bc08      	pop	{r3}
 8007504:	469e      	mov	lr, r3
 8007506:	4770      	bx	lr

Disassembly of section .ccmram:

08007508 <pi_aw_calc>:
 * @param v Pointer to the PI control structure.
 *
 * @note This function computes the PI control action with anti-windup.
 */
void pi_aw_calc(volatile pi_aw_struct *v)
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
    if(v->enable)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	881b      	ldrh	r3, [r3, #0]
 8007514:	b29b      	uxth	r3, r3
 8007516:	2b00      	cmp	r3, #0
 8007518:	d063      	beq.n	80075e2 <pi_aw_calc+0xda>
    {
        v->e[0] = v->pi_consig - v->pi_fdb; // Calculate error
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	ed93 7a07 	vldr	s14, [r3, #28]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	edd3 7a08 	vldr	s15, [r3, #32]
 8007526:	ee77 7a67 	vsub.f32	s15, s14, s15
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	edc3 7a05 	vstr	s15, [r3, #20]

        // PI trapezoidal with feedforward
        v->pi_int[0] =  v->Ki * v->e[0] * v->Ts + v->pi_int[1] + (v->pi_out_postsat - v->pi_out_presat) * v->Kaw * v->Ts;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	ed93 7a03 	vldr	s14, [r3, #12]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	edd3 7a05 	vldr	s15, [r3, #20]
 800753c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	edd3 7a01 	vldr	s15, [r3, #4]
 8007546:	ee27 7a27 	vmul.f32	s14, s14, s15
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8007550:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8007560:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	edd3 7a04 	vldr	s15, [r3, #16]
 800756a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	edd3 7a01 	vldr	s15, [r3, #4]
 8007574:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007578:	ee77 7a27 	vadd.f32	s15, s14, s15
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

        v->pi_out_presat = v->pi_out;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	62da      	str	r2, [r3, #44]	@ 0x2c

        // Output voltage saturation
        if (v->pi_out > v->pi_out_max)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8007596:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800759a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800759e:	dd04      	ble.n	80075aa <pi_aw_calc+0xa2>
            v->pi_out = v->pi_out_max;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	635a      	str	r2, [r3, #52]	@ 0x34
 80075a8:	e00e      	b.n	80075c8 <pi_aw_calc+0xc0>
        else if (v->pi_out < v->pi_out_min)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80075b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80075ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075be:	d503      	bpl.n	80075c8 <pi_aw_calc+0xc0>
            v->pi_out = v->pi_out_min;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	635a      	str	r2, [r3, #52]	@ 0x34
        else;

        // Copy previous values
        v->e[1] = v->e[0];                      // Copy previous error
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	695a      	ldr	r2, [r3, #20]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	619a      	str	r2, [r3, #24]
        v->pi_ffw[1] = v->pi_ffw[0];            // Copy previous feedforward
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	645a      	str	r2, [r3, #68]	@ 0x44
        v->pi_int[1] = v->pi_int[0];			// Copy previous integrator
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	63da      	str	r2, [r3, #60]	@ 0x3c
        v->e[1] = 0.0F;
        v->pi_ffw[1] = 0.0F;
        v->pi_int[1] = 0.0F;
        v->pi_out = 0.0F;
    }
}
 80075e0:	e00f      	b.n	8007602 <pi_aw_calc+0xfa>
        v->e[1] = 0.0F;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f04f 0200 	mov.w	r2, #0
 80075e8:	619a      	str	r2, [r3, #24]
        v->pi_ffw[1] = 0.0F;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f04f 0200 	mov.w	r2, #0
 80075f0:	645a      	str	r2, [r3, #68]	@ 0x44
        v->pi_int[1] = 0.0F;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f04f 0200 	mov.w	r2, #0
 80075f8:	63da      	str	r2, [r3, #60]	@ 0x3c
        v->pi_out = 0.0F;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f04f 0200 	mov.w	r2, #0
 8007600:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8007602:	bf00      	nop
 8007604:	370c      	adds	r7, #12
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr

0800760e <pi_init>:
 *
 * @param v Pointer to the PI structure.
 *
 * @note This function initializes the constants used in the PI controller.
 */
void pi_init(volatile pi_struct *v){
 800760e:	b480      	push	{r7}
 8007610:	b083      	sub	sp, #12
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
    v->K0 = v->Kp + v->Ki * v->Ts * 0.5F;   // K0 = Kp + Ki*Ts/2
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	ed93 7a02 	vldr	s14, [r3, #8]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	edd3 6a03 	vldr	s13, [r3, #12]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	edd3 7a01 	vldr	s15, [r3, #4]
 8007628:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800762c:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8007630:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007634:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	edc3 7a04 	vstr	s15, [r3, #16]
    v->K1 = -v->Kp + v->Ki * v->Ts * 0.5F;  // K1 = -Kp + Ki*Ts/2
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	ed93 7a03 	vldr	s14, [r3, #12]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	edd3 7a01 	vldr	s15, [r3, #4]
 800764a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800764e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007652:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	edd3 7a02 	vldr	s15, [r3, #8]
 800765c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8007666:	bf00      	nop
 8007668:	370c      	adds	r7, #12
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr

08007672 <pi_calc>:
 * @param v Pointer to the PI structure.
 *
 * @note This function computes the PI control action with feedforward and saturation.
 */
void pi_calc(volatile pi_struct *v)
{
 8007672:	b480      	push	{r7}
 8007674:	b083      	sub	sp, #12
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
    if(v->enable)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	881b      	ldrh	r3, [r3, #0]
 800767e:	b29b      	uxth	r3, r3
 8007680:	2b00      	cmp	r3, #0
 8007682:	d056      	beq.n	8007732 <pi_calc+0xc0>
    {
        v->e[0] = v->pi_consig - v->pi_fdb; // Calculate error
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	ed93 7a08 	vldr	s14, [r3, #32]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8007690:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	edc3 7a06 	vstr	s15, [r3, #24]
        v->pi_out += v->K0 * v->e[0] + v->K1 * v->e[1] + v->pi_ffw[0] - v->pi_ffw[1];   // PI trapezoidal with feedforward
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	ed93 7a04 	vldr	s14, [r3, #16]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	edd3 7a06 	vldr	s15, [r3, #24]
 80076a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	edd3 6a05 	vldr	s13, [r3, #20]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	edd3 7a07 	vldr	s15, [r3, #28]
 80076b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80076ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80076c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80076ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80076d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        // Output voltage saturation
        if (v->pi_out > v->pi_out_max)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80076ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80076f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076f6:	dd04      	ble.n	8007702 <pi_calc+0x90>
            v->pi_out = v->pi_out_max;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8007700:	e00e      	b.n	8007720 <pi_calc+0xae>
        else if (v->pi_out < v->pi_out_min)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800770e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007716:	d503      	bpl.n	8007720 <pi_calc+0xae>
            v->pi_out = v->pi_out_min;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	631a      	str	r2, [r3, #48]	@ 0x30
        else;
        // Copy previous values
        v->e[1] = v->e[0];                      // Copy previous error
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	699a      	ldr	r2, [r3, #24]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	61da      	str	r2, [r3, #28]
        v->pi_ffw[1] = v->pi_ffw[0];            // Copy previous feedforward
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	639a      	str	r2, [r3, #56]	@ 0x38
        // Reset previous control variables
        v->e[1] = 0.0F;
        v->pi_ffw[1] = 0.0F;
        v->pi_out = 0.0F;
    }
}
 8007730:	e00b      	b.n	800774a <pi_calc+0xd8>
        v->e[1] = 0.0F;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f04f 0200 	mov.w	r2, #0
 8007738:	61da      	str	r2, [r3, #28]
        v->pi_ffw[1] = 0.0F;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f04f 0200 	mov.w	r2, #0
 8007740:	639a      	str	r2, [r3, #56]	@ 0x38
        v->pi_out = 0.0F;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f04f 0200 	mov.w	r2, #0
 8007748:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800774a:	bf00      	nop
 800774c:	370c      	adds	r7, #12
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <clarke3F_calc>:
 * @param v Pointer to the Clarke transformation structure.
 *
 * @note This function computes the Clarke transformation for three-phase signals.
 */
void clarke3F_calc(volatile clarke3F_struct *v)
{
 8007756:	b480      	push	{r7}
 8007758:	b083      	sub	sp, #12
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
    v->D = v->a;                                       // Alfa = A
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	609a      	str	r2, [r3, #8]
    v->Q = ISQ3*( v->a + 2.0F * v->b );              // Beta = 1/sqrt(3)*(A + 2*B) = 1/sqrt(3)*(B - C)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	ed93 7a00 	vldr	s14, [r3]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	edd3 7a01 	vldr	s15, [r3, #4]
 8007772:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007776:	ee77 7a27 	vadd.f32	s15, s14, s15
 800777a:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8007794 <clarke3F_calc+0x3e>
 800777e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8007788:	bf00      	nop
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr
 8007794:	3f13cd3a 	.word	0x3f13cd3a

08007798 <rot_calc>:
 * @param v Pointer to the rotation transformation structure.
 *
 * @note This function computes the rotation transformation (clockwise).
 */
void rot_calc(volatile rot_struct *v)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
    v->d = v->D*v->cosFi + v->Q*v->sinFi;              // d = Alfa(D)*cos(Fi) + Beta(Q)*sin(Fi)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	ed93 7a00 	vldr	s14, [r3]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	edd3 7a03 	vldr	s15, [r3, #12]
 80077ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	edd3 6a01 	vldr	s13, [r3, #4]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80077bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80077c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	edc3 7a04 	vstr	s15, [r3, #16]
    v->q = v->Q*v->cosFi - v->D*v->sinFi ;             // q = -Alfa(D)*sin(Fi) + Beta(Q)*cos(Fi)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	ed93 7a01 	vldr	s14, [r3, #4]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	edd3 7a03 	vldr	s15, [r3, #12]
 80077d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	edd3 6a00 	vldr	s13, [r3]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80077e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80077ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	edc3 7a05 	vstr	s15, [r3, #20]
}
 80077f4:	bf00      	nop
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <irot_calc>:
 * @param v Pointer to the inverse rotation transformation structure.
 *
 * @note This function computes the inverse rotation transformation (counterclockwise).
 */
void irot_calc(volatile irot_struct *v)
{
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
    v->alpha = v->d*v->cosFi - v->q*v->sinFi;              // Alfa(D) = d*cos(Fi) - q*sin(Fi)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	ed93 7a00 	vldr	s14, [r3]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	edd3 7a03 	vldr	s15, [r3, #12]
 8007814:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	edd3 6a01 	vldr	s13, [r3, #4]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	edd3 7a02 	vldr	s15, [r3, #8]
 8007824:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007828:	ee77 7a67 	vsub.f32	s15, s14, s15
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	edc3 7a04 	vstr	s15, [r3, #16]
    v->beta = v->d*v->sinFi + v->q*v->cosFi;              // Beta(Q) = d*sin(Fi) + q*cos(Fi)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	ed93 7a00 	vldr	s14, [r3]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	edd3 7a02 	vldr	s15, [r3, #8]
 800783e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	edd3 6a01 	vldr	s13, [r3, #4]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	edd3 7a03 	vldr	s15, [r3, #12]
 800784e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007852:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	edc3 7a05 	vstr	s15, [r3, #20]
}
 800785c:	bf00      	nop
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <angle_calc>:
 * @param v Pointer to the angle generation structure.
 *
 * @note This function generates the angle.
 */
void angle_calc(volatile angle_struct *v)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
    // Integrator
    v->angle += v->freq*v->Ts*2;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	ed93 7a00 	vldr	s14, [r3]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	edd3 7a01 	vldr	s15, [r3, #4]
 800787c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007880:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	edd3 7a02 	vldr	s15, [r3, #8]
 800788a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	edc3 7a02 	vstr	s15, [r3, #8]
    v->angle = (v->angle > 1) ? (v->angle - 2) : v->angle;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	edd3 7a02 	vldr	s15, [r3, #8]
 800789a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800789e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078a6:	dd07      	ble.n	80078b8 <angle_calc+0x50>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80078ae:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80078b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80078b6:	e002      	b.n	80078be <angle_calc+0x56>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80078c4:	bf00      	nop
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <svpwm_calc>:
 * @param v Pointer to the SVPWM structure.
 *
 * @note This function calculates the Space Vector Pulse Width Modulation (SVPWM).
 */
void svpwm_calc(volatile svpwm_struct *v)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b089      	sub	sp, #36	@ 0x24
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]

    // Auxiliary variables for SVPWM
    float Va, Vb, Vc, max, min, h;

    // Calculate Va, Vb, and Vc for three-phase system without neutral
    Va = v->alpha;                                      // A = Alfa
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	61fb      	str	r3, [r7, #28]
    //Vb = (- v->valfa + SQ3*v->vbeta)*0.5;              // B = -1/2*Alfa + sqrt(3)/2*Beta
    Vb = (- v->alpha + SQ3*v->beta)*DIV2;              // B = -1/2*Alfa + sqrt(3)/2*Beta
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80078e4:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 80079f8 <svpwm_calc+0x128>
 80078e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	edd3 7a00 	vldr	s15, [r3]
 80078f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078f6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80078fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80078fe:	edc7 7a06 	vstr	s15, [r7, #24]
    Vc = - Va - Vb;                                     // C = - A - B
 8007902:	edd7 7a07 	vldr	s15, [r7, #28]
 8007906:	eeb1 7a67 	vneg.f32	s14, s15
 800790a:	edd7 7a06 	vldr	s15, [r7, #24]
 800790e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007912:	edc7 7a05 	vstr	s15, [r7, #20]

    // Homopolar addition
    // Select maximum
    max = Va;
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	613b      	str	r3, [r7, #16]
    max = (Vb >= max) ? Vb : max;
 800791a:	ed97 7a06 	vldr	s14, [r7, #24]
 800791e:	edd7 7a04 	vldr	s15, [r7, #16]
 8007922:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800792a:	db01      	blt.n	8007930 <svpwm_calc+0x60>
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	e000      	b.n	8007932 <svpwm_calc+0x62>
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	613b      	str	r3, [r7, #16]
    max = (Vc >= max) ? Vc : max;
 8007934:	ed97 7a05 	vldr	s14, [r7, #20]
 8007938:	edd7 7a04 	vldr	s15, [r7, #16]
 800793c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007944:	db01      	blt.n	800794a <svpwm_calc+0x7a>
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	e000      	b.n	800794c <svpwm_calc+0x7c>
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	613b      	str	r3, [r7, #16]
    // Select minimum
    min = Va;
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	60fb      	str	r3, [r7, #12]
    min = (Vb <= min) ? Vb : min;
 8007952:	ed97 7a06 	vldr	s14, [r7, #24]
 8007956:	edd7 7a03 	vldr	s15, [r7, #12]
 800795a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800795e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007962:	d801      	bhi.n	8007968 <svpwm_calc+0x98>
 8007964:	69bb      	ldr	r3, [r7, #24]
 8007966:	e000      	b.n	800796a <svpwm_calc+0x9a>
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	60fb      	str	r3, [r7, #12]
    min = (Vc <= min) ? Vc : min;
 800796c:	ed97 7a05 	vldr	s14, [r7, #20]
 8007970:	edd7 7a03 	vldr	s15, [r7, #12]
 8007974:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800797c:	d801      	bhi.n	8007982 <svpwm_calc+0xb2>
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	e000      	b.n	8007984 <svpwm_calc+0xb4>
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	60fb      	str	r3, [r7, #12]
    // Calculate homopolar component
    h = (max + min)*DIV2;
 8007986:	ed97 7a04 	vldr	s14, [r7, #16]
 800798a:	edd7 7a03 	vldr	s15, [r7, #12]
 800798e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007992:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007996:	ee67 7a87 	vmul.f32	s15, s15, s14
 800799a:	edc7 7a02 	vstr	s15, [r7, #8]

    // Generate duty cycles (range from 0 to 1)
    // Convert sinusoids ranging up to 0.5 to sinusoids ranging from 0 to 1
    v->Da = (Va - h + 0.5F);
 800799e:	ed97 7a07 	vldr	s14, [r7, #28]
 80079a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80079a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80079aa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80079ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	edc3 7a02 	vstr	s15, [r3, #8]
    v->Db = (Vb - h + 0.5F);
 80079b8:	ed97 7a06 	vldr	s14, [r7, #24]
 80079bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80079c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80079c4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80079c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	edc3 7a03 	vstr	s15, [r3, #12]
    v->Dc = (Vc - h + 0.5F);
 80079d2:	ed97 7a05 	vldr	s14, [r7, #20]
 80079d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80079da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80079de:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80079e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	edc3 7a04 	vstr	s15, [r3, #16]
}
 80079ec:	bf00      	nop
 80079ee:	3724      	adds	r7, #36	@ 0x24
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr
 80079f8:	3fddb3d7 	.word	0x3fddb3d7

080079fc <rampa_calc>:
 * @param v Pointer to the ramp structure.
 *
 * @note This function calculates the ramp.
 */
void rampa_calc(volatile rampa_struct *v)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
    if (v->enable)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	7b1b      	ldrb	r3, [r3, #12]
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d04e      	beq.n	8007aac <rampa_calc+0xb0>
    {
        if(v->out < v->in)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	ed93 7a01 	vldr	s14, [r3, #4]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	edd3 7a00 	vldr	s15, [r3]
 8007a1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a22:	d51b      	bpl.n	8007a5c <rampa_calc+0x60>
        {
            v->out += v->Incr;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	ed93 7a02 	vldr	s14, [r3, #8]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	edd3 7a01 	vldr	s15, [r3, #4]
 8007a30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	edc3 7a01 	vstr	s15, [r3, #4]
            if(v->out > v->in)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	ed93 7a01 	vldr	s14, [r3, #4]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	edd3 7a00 	vldr	s15, [r3]
 8007a46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a4e:	dc00      	bgt.n	8007a52 <rampa_calc+0x56>
    }
    else
    {
        v->out = 0.0F;
    }
}
 8007a50:	e030      	b.n	8007ab4 <rampa_calc+0xb8>
                v->out = v->in;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	605a      	str	r2, [r3, #4]
}
 8007a5a:	e02b      	b.n	8007ab4 <rampa_calc+0xb8>
        else if(v->out > v->in)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	ed93 7a01 	vldr	s14, [r3, #4]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	edd3 7a00 	vldr	s15, [r3]
 8007a68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a70:	dc00      	bgt.n	8007a74 <rampa_calc+0x78>
}
 8007a72:	e01f      	b.n	8007ab4 <rampa_calc+0xb8>
            v->out -= v->Incr;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	edd3 7a02 	vldr	s15, [r3, #8]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	ed93 7a01 	vldr	s14, [r3, #4]
 8007a80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	edc3 7a01 	vstr	s15, [r3, #4]
            if(v->out < v->in)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	ed93 7a01 	vldr	s14, [r3, #4]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	edd3 7a00 	vldr	s15, [r3]
 8007a96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a9e:	d400      	bmi.n	8007aa2 <rampa_calc+0xa6>
}
 8007aa0:	e008      	b.n	8007ab4 <rampa_calc+0xb8>
                v->out = v->in;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	605a      	str	r2, [r3, #4]
}
 8007aaa:	e003      	b.n	8007ab4 <rampa_calc+0xb8>
        v->out = 0.0F;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f04f 0200 	mov.w	r2, #0
 8007ab2:	605a      	str	r2, [r3, #4]
}
 8007ab4:	bf00      	nop
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <rampa_dual_calc>:
 * @param v Pointer to the dual ramp structure.
 *
 * @note This function calculates the dual ramp.
 */
void rampa_dual_calc(volatile rampa_dual_struct *v)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
    if (v->enable)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	7c1b      	ldrb	r3, [r3, #16]
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d04e      	beq.n	8007b70 <rampa_dual_calc+0xb0>
    {
        if(v->out < v->in)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	ed93 7a01 	vldr	s14, [r3, #4]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	edd3 7a00 	vldr	s15, [r3]
 8007ade:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ae6:	d51b      	bpl.n	8007b20 <rampa_dual_calc+0x60>
        {
            v->out += v->Incr;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	ed93 7a02 	vldr	s14, [r3, #8]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	edd3 7a01 	vldr	s15, [r3, #4]
 8007af4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	edc3 7a01 	vstr	s15, [r3, #4]
            if(v->out > v->in)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	ed93 7a01 	vldr	s14, [r3, #4]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	edd3 7a00 	vldr	s15, [r3]
 8007b0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b12:	dc00      	bgt.n	8007b16 <rampa_dual_calc+0x56>
    }
    else
    {
        v->out = 0;
    }
}
 8007b14:	e030      	b.n	8007b78 <rampa_dual_calc+0xb8>
                v->out = v->in;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	605a      	str	r2, [r3, #4]
}
 8007b1e:	e02b      	b.n	8007b78 <rampa_dual_calc+0xb8>
        else if(v->out > v->in)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	ed93 7a01 	vldr	s14, [r3, #4]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	edd3 7a00 	vldr	s15, [r3]
 8007b2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b34:	dc00      	bgt.n	8007b38 <rampa_dual_calc+0x78>
}
 8007b36:	e01f      	b.n	8007b78 <rampa_dual_calc+0xb8>
            v->out -= v->Decr;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	edd3 7a03 	vldr	s15, [r3, #12]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	ed93 7a01 	vldr	s14, [r3, #4]
 8007b44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	edc3 7a01 	vstr	s15, [r3, #4]
            if(v->out < v->in)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	ed93 7a01 	vldr	s14, [r3, #4]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	edd3 7a00 	vldr	s15, [r3]
 8007b5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b62:	d400      	bmi.n	8007b66 <rampa_dual_calc+0xa6>
}
 8007b64:	e008      	b.n	8007b78 <rampa_dual_calc+0xb8>
                v->out = v->in;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	605a      	str	r2, [r3, #4]
}
 8007b6e:	e003      	b.n	8007b78 <rampa_dual_calc+0xb8>
        v->out = 0;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f04f 0200 	mov.w	r2, #0
 8007b76:	605a      	str	r2, [r3, #4]
}
 8007b78:	bf00      	nop
 8007b7a:	370c      	adds	r7, #12
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <RMS_calc>:
 *
 * @param v Pointer to the RMS structure.
 *
 * @note This function calculates the Root Mean Square (RMS).
 */
void RMS_calc(volatile RMS_struct *v){
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b082      	sub	sp, #8
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
    // Calculate RMS output current.
    //-----------------------------------------------------------------------------------------
    v->Sq_Sum += (float) (v->Measure * v->Measure)* v->T_exec;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	ed93 7a01 	vldr	s14, [r3, #4]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	edd3 7a01 	vldr	s15, [r3, #4]
 8007b98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	edd3 7a00 	vldr	s15, [r3]
 8007ba2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	edd3 7a02 	vldr	s15, [r3, #8]
 8007bac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	edc3 7a02 	vstr	s15, [r3, #8]
    // Execute calculation at the zero crossing of the angle
    //
    if (v->Freq > 0.0F) {
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	edd3 7a04 	vldr	s15, [r3, #16]
 8007bbc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bc4:	dd25      	ble.n	8007c12 <RMS_calc+0x8e>
        if (v->Angle_ant < 0.0F && v->Angle >= 0.0F) {
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	edd3 7a06 	vldr	s15, [r3, #24]
 8007bcc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bd4:	d54c      	bpl.n	8007c70 <RMS_calc+0xec>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	edd3 7a05 	vldr	s15, [r3, #20]
 8007bdc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007be4:	db44      	blt.n	8007c70 <RMS_calc+0xec>
           // Calculate RMS
            v->Out_RMS = sqrtf((float) v->Sq_Sum * v->Freq);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	ed93 7a02 	vldr	s14, [r3, #8]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	edd3 7a04 	vldr	s15, [r3, #16]
 8007bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bf6:	eeb0 0a67 	vmov.f32	s0, s15
 8007bfa:	f7ff faad 	bl	8007158 <sqrtf>
 8007bfe:	eef0 7a40 	vmov.f32	s15, s0
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	edc3 7a03 	vstr	s15, [r3, #12]
            v->Sq_Sum = 0;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f04f 0200 	mov.w	r2, #0
 8007c0e:	609a      	str	r2, [r3, #8]
 8007c10:	e02e      	b.n	8007c70 <RMS_calc+0xec>
        }
        else;
    }
    else if (v->Freq < 0.0F){
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	edd3 7a04 	vldr	s15, [r3, #16]
 8007c18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c20:	d526      	bpl.n	8007c70 <RMS_calc+0xec>
        if (v->Angle_ant > 0.0F && v->Angle <= 0.0F) {
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	edd3 7a06 	vldr	s15, [r3, #24]
 8007c28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c30:	dd1e      	ble.n	8007c70 <RMS_calc+0xec>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	edd3 7a05 	vldr	s15, [r3, #20]
 8007c38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c40:	d816      	bhi.n	8007c70 <RMS_calc+0xec>
            // Calculate RMS
            v->Out_RMS = sqrtf((float) v->Sq_Sum * v->Freq * (-1.0F));
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	ed93 7a02 	vldr	s14, [r3, #8]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	edd3 7a04 	vldr	s15, [r3, #16]
 8007c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c52:	eef1 7a67 	vneg.f32	s15, s15
 8007c56:	eeb0 0a67 	vmov.f32	s0, s15
 8007c5a:	f7ff fa7d 	bl	8007158 <sqrtf>
 8007c5e:	eef0 7a40 	vmov.f32	s15, s0
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	edc3 7a03 	vstr	s15, [r3, #12]
            v->Sq_Sum = 0;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f04f 0200 	mov.w	r2, #0
 8007c6e:	609a      	str	r2, [r3, #8]
        }
        else;
        //do nothing
    }
    else;
    v->Angle_ant = v->Angle;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	695a      	ldr	r2, [r3, #20]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	619a      	str	r2, [r3, #24]
}
 8007c78:	bf00      	nop
 8007c7a:	3708      	adds	r7, #8
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <filtreLP_calc>:
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
    if (v->enable)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	8a9b      	ldrh	r3, [r3, #20]
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d015      	beq.n	8007cbe <filtreLP_calc+0x3e>
        v->out = (v->alfa * (v->in - v->out)) + v->out;    // Filter out(k) = alfa*in(k) + (1-alfa)*out(k-1)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	ed93 7a02 	vldr	s14, [r3, #8]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	edd3 6a00 	vldr	s13, [r3]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	edd3 7a01 	vldr	s15, [r3, #4]
 8007ca4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007ca8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	edd3 7a01 	vldr	s15, [r3, #4]
 8007cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8007cbc:	e003      	b.n	8007cc6 <filtreLP_calc+0x46>
        v->out = v->in;        // Without filter. Out(k) = In(k)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	605a      	str	r2, [r3, #4]
}
 8007cc6:	bf00      	nop
 8007cc8:	370c      	adds	r7, #12
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr

08007cd2 <step_calc>:
 * @param v Pointer to the step structure.
 *
 * @note This function calculates the step function.
 */
void step_calc(volatile step_struct *v)
{
 8007cd2:	b480      	push	{r7}
 8007cd4:	b083      	sub	sp, #12
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
    // Calculate step width in pulses to count
    v->Pulses = (uint32_t)((v->fs) * (v->t_step));
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	ed93 7a00 	vldr	s14, [r3]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	edd3 7a04 	vldr	s15, [r3, #16]
 8007ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cee:	ee17 2a90 	vmov	r2, s15
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	615a      	str	r2, [r3, #20]

    // If enabled, perform the step and start counting
    if (v->enable == 1 && v->Counter < v->Pulses){
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	8b9b      	ldrh	r3, [r3, #28]
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d116      	bne.n	8007d2e <step_calc+0x5c>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	699a      	ldr	r2, [r3, #24]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	695b      	ldr	r3, [r3, #20]
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d210      	bcs.n	8007d2e <step_calc+0x5c>
        v->Out = v->In + v->Step;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	ed93 7a01 	vldr	s14, [r3, #4]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	edd3 7a03 	vldr	s15, [r3, #12]
 8007d18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	edc3 7a02 	vstr	s15, [r3, #8]
        v->Counter++;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	699b      	ldr	r3, [r3, #24]
 8007d26:	1c5a      	adds	r2, r3, #1
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	619a      	str	r2, [r3, #24]
 8007d2c:	e01a      	b.n	8007d64 <step_calc+0x92>
    }
    // When reaching the time limit, remove step and reset the counter
    else if (v->enable == 1 && v->Counter >= v->Pulses){
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	8b9b      	ldrh	r3, [r3, #28]
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d110      	bne.n	8007d5a <step_calc+0x88>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	699a      	ldr	r2, [r3, #24]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	695b      	ldr	r3, [r3, #20]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d30a      	bcc.n	8007d5a <step_calc+0x88>
        v->Out = v->In;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	685a      	ldr	r2, [r3, #4]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	609a      	str	r2, [r3, #8]
        v->Counter = 0;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	619a      	str	r2, [r3, #24]
        v->enable = 0;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	839a      	strh	r2, [r3, #28]
 8007d58:	e004      	b.n	8007d64 <step_calc+0x92>
    }
    // If not enabled
    else v->Out = v->In;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	685a      	ldr	r2, [r3, #4]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	609a      	str	r2, [r3, #8]
}
 8007d62:	bf00      	nop
 8007d64:	bf00      	nop
 8007d66:	370c      	adds	r7, #12
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr
