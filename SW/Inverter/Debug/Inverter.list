
Inverter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007210  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ccmram       00000868  08007408  08007408  00008408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000158  08007c70  08007c70  00008c70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08007dc8  08007dc8  0000908c  2**0
                  CONTENTS
  5 .ARM          00000008  08007dc8  08007dc8  00008dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08007dd0  08007dd0  0000908c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08007dd0  08007dd0  00008dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08007dd4  08007dd4  00008dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000008c  20000000  08007dd8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000063c  2000008c  08007e64  0000908c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200006c8  08007e64  000096c8  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0000908c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019ff6  00000000  00000000  000090ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000434e  00000000  00000000  000230b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014b8  00000000  00000000  00027400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fc3  00000000  00000000  000288b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002be12  00000000  00000000  0002987b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001eabe  00000000  00000000  0005568d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00103d50  00000000  00000000  0007414b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00177e9b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056bc  00000000  00000000  00177ee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  0017d59c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000008c 	.word	0x2000008c
 8000214:	00000000 	.word	0x00000000
 8000218:	080073f0 	.word	0x080073f0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000090 	.word	0x20000090
 8000234:	080073f0 	.word	0x080073f0

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	@ 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_uldivmod>:
 80005b0:	b953      	cbnz	r3, 80005c8 <__aeabi_uldivmod+0x18>
 80005b2:	b94a      	cbnz	r2, 80005c8 <__aeabi_uldivmod+0x18>
 80005b4:	2900      	cmp	r1, #0
 80005b6:	bf08      	it	eq
 80005b8:	2800      	cmpeq	r0, #0
 80005ba:	bf1c      	itt	ne
 80005bc:	f04f 31ff 	movne.w	r1, #4294967295
 80005c0:	f04f 30ff 	movne.w	r0, #4294967295
 80005c4:	f000 b96a 	b.w	800089c <__aeabi_idiv0>
 80005c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005d0:	f000 f806 	bl	80005e0 <__udivmoddi4>
 80005d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005dc:	b004      	add	sp, #16
 80005de:	4770      	bx	lr

080005e0 <__udivmoddi4>:
 80005e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005e4:	9d08      	ldr	r5, [sp, #32]
 80005e6:	460c      	mov	r4, r1
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d14e      	bne.n	800068a <__udivmoddi4+0xaa>
 80005ec:	4694      	mov	ip, r2
 80005ee:	458c      	cmp	ip, r1
 80005f0:	4686      	mov	lr, r0
 80005f2:	fab2 f282 	clz	r2, r2
 80005f6:	d962      	bls.n	80006be <__udivmoddi4+0xde>
 80005f8:	b14a      	cbz	r2, 800060e <__udivmoddi4+0x2e>
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	4091      	lsls	r1, r2
 8000600:	fa20 f303 	lsr.w	r3, r0, r3
 8000604:	fa0c fc02 	lsl.w	ip, ip, r2
 8000608:	4319      	orrs	r1, r3
 800060a:	fa00 fe02 	lsl.w	lr, r0, r2
 800060e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000612:	fa1f f68c 	uxth.w	r6, ip
 8000616:	fbb1 f4f7 	udiv	r4, r1, r7
 800061a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800061e:	fb07 1114 	mls	r1, r7, r4, r1
 8000622:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000626:	fb04 f106 	mul.w	r1, r4, r6
 800062a:	4299      	cmp	r1, r3
 800062c:	d90a      	bls.n	8000644 <__udivmoddi4+0x64>
 800062e:	eb1c 0303 	adds.w	r3, ip, r3
 8000632:	f104 30ff 	add.w	r0, r4, #4294967295
 8000636:	f080 8112 	bcs.w	800085e <__udivmoddi4+0x27e>
 800063a:	4299      	cmp	r1, r3
 800063c:	f240 810f 	bls.w	800085e <__udivmoddi4+0x27e>
 8000640:	3c02      	subs	r4, #2
 8000642:	4463      	add	r3, ip
 8000644:	1a59      	subs	r1, r3, r1
 8000646:	fa1f f38e 	uxth.w	r3, lr
 800064a:	fbb1 f0f7 	udiv	r0, r1, r7
 800064e:	fb07 1110 	mls	r1, r7, r0, r1
 8000652:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000656:	fb00 f606 	mul.w	r6, r0, r6
 800065a:	429e      	cmp	r6, r3
 800065c:	d90a      	bls.n	8000674 <__udivmoddi4+0x94>
 800065e:	eb1c 0303 	adds.w	r3, ip, r3
 8000662:	f100 31ff 	add.w	r1, r0, #4294967295
 8000666:	f080 80fc 	bcs.w	8000862 <__udivmoddi4+0x282>
 800066a:	429e      	cmp	r6, r3
 800066c:	f240 80f9 	bls.w	8000862 <__udivmoddi4+0x282>
 8000670:	4463      	add	r3, ip
 8000672:	3802      	subs	r0, #2
 8000674:	1b9b      	subs	r3, r3, r6
 8000676:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800067a:	2100      	movs	r1, #0
 800067c:	b11d      	cbz	r5, 8000686 <__udivmoddi4+0xa6>
 800067e:	40d3      	lsrs	r3, r2
 8000680:	2200      	movs	r2, #0
 8000682:	e9c5 3200 	strd	r3, r2, [r5]
 8000686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800068a:	428b      	cmp	r3, r1
 800068c:	d905      	bls.n	800069a <__udivmoddi4+0xba>
 800068e:	b10d      	cbz	r5, 8000694 <__udivmoddi4+0xb4>
 8000690:	e9c5 0100 	strd	r0, r1, [r5]
 8000694:	2100      	movs	r1, #0
 8000696:	4608      	mov	r0, r1
 8000698:	e7f5      	b.n	8000686 <__udivmoddi4+0xa6>
 800069a:	fab3 f183 	clz	r1, r3
 800069e:	2900      	cmp	r1, #0
 80006a0:	d146      	bne.n	8000730 <__udivmoddi4+0x150>
 80006a2:	42a3      	cmp	r3, r4
 80006a4:	d302      	bcc.n	80006ac <__udivmoddi4+0xcc>
 80006a6:	4290      	cmp	r0, r2
 80006a8:	f0c0 80f0 	bcc.w	800088c <__udivmoddi4+0x2ac>
 80006ac:	1a86      	subs	r6, r0, r2
 80006ae:	eb64 0303 	sbc.w	r3, r4, r3
 80006b2:	2001      	movs	r0, #1
 80006b4:	2d00      	cmp	r5, #0
 80006b6:	d0e6      	beq.n	8000686 <__udivmoddi4+0xa6>
 80006b8:	e9c5 6300 	strd	r6, r3, [r5]
 80006bc:	e7e3      	b.n	8000686 <__udivmoddi4+0xa6>
 80006be:	2a00      	cmp	r2, #0
 80006c0:	f040 8090 	bne.w	80007e4 <__udivmoddi4+0x204>
 80006c4:	eba1 040c 	sub.w	r4, r1, ip
 80006c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006cc:	fa1f f78c 	uxth.w	r7, ip
 80006d0:	2101      	movs	r1, #1
 80006d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80006d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006da:	fb08 4416 	mls	r4, r8, r6, r4
 80006de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80006e2:	fb07 f006 	mul.w	r0, r7, r6
 80006e6:	4298      	cmp	r0, r3
 80006e8:	d908      	bls.n	80006fc <__udivmoddi4+0x11c>
 80006ea:	eb1c 0303 	adds.w	r3, ip, r3
 80006ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80006f2:	d202      	bcs.n	80006fa <__udivmoddi4+0x11a>
 80006f4:	4298      	cmp	r0, r3
 80006f6:	f200 80cd 	bhi.w	8000894 <__udivmoddi4+0x2b4>
 80006fa:	4626      	mov	r6, r4
 80006fc:	1a1c      	subs	r4, r3, r0
 80006fe:	fa1f f38e 	uxth.w	r3, lr
 8000702:	fbb4 f0f8 	udiv	r0, r4, r8
 8000706:	fb08 4410 	mls	r4, r8, r0, r4
 800070a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800070e:	fb00 f707 	mul.w	r7, r0, r7
 8000712:	429f      	cmp	r7, r3
 8000714:	d908      	bls.n	8000728 <__udivmoddi4+0x148>
 8000716:	eb1c 0303 	adds.w	r3, ip, r3
 800071a:	f100 34ff 	add.w	r4, r0, #4294967295
 800071e:	d202      	bcs.n	8000726 <__udivmoddi4+0x146>
 8000720:	429f      	cmp	r7, r3
 8000722:	f200 80b0 	bhi.w	8000886 <__udivmoddi4+0x2a6>
 8000726:	4620      	mov	r0, r4
 8000728:	1bdb      	subs	r3, r3, r7
 800072a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800072e:	e7a5      	b.n	800067c <__udivmoddi4+0x9c>
 8000730:	f1c1 0620 	rsb	r6, r1, #32
 8000734:	408b      	lsls	r3, r1
 8000736:	fa22 f706 	lsr.w	r7, r2, r6
 800073a:	431f      	orrs	r7, r3
 800073c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000740:	fa04 f301 	lsl.w	r3, r4, r1
 8000744:	ea43 030c 	orr.w	r3, r3, ip
 8000748:	40f4      	lsrs	r4, r6
 800074a:	fa00 f801 	lsl.w	r8, r0, r1
 800074e:	0c38      	lsrs	r0, r7, #16
 8000750:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000754:	fbb4 fef0 	udiv	lr, r4, r0
 8000758:	fa1f fc87 	uxth.w	ip, r7
 800075c:	fb00 441e 	mls	r4, r0, lr, r4
 8000760:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000764:	fb0e f90c 	mul.w	r9, lr, ip
 8000768:	45a1      	cmp	r9, r4
 800076a:	fa02 f201 	lsl.w	r2, r2, r1
 800076e:	d90a      	bls.n	8000786 <__udivmoddi4+0x1a6>
 8000770:	193c      	adds	r4, r7, r4
 8000772:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000776:	f080 8084 	bcs.w	8000882 <__udivmoddi4+0x2a2>
 800077a:	45a1      	cmp	r9, r4
 800077c:	f240 8081 	bls.w	8000882 <__udivmoddi4+0x2a2>
 8000780:	f1ae 0e02 	sub.w	lr, lr, #2
 8000784:	443c      	add	r4, r7
 8000786:	eba4 0409 	sub.w	r4, r4, r9
 800078a:	fa1f f983 	uxth.w	r9, r3
 800078e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000792:	fb00 4413 	mls	r4, r0, r3, r4
 8000796:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800079a:	fb03 fc0c 	mul.w	ip, r3, ip
 800079e:	45a4      	cmp	ip, r4
 80007a0:	d907      	bls.n	80007b2 <__udivmoddi4+0x1d2>
 80007a2:	193c      	adds	r4, r7, r4
 80007a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80007a8:	d267      	bcs.n	800087a <__udivmoddi4+0x29a>
 80007aa:	45a4      	cmp	ip, r4
 80007ac:	d965      	bls.n	800087a <__udivmoddi4+0x29a>
 80007ae:	3b02      	subs	r3, #2
 80007b0:	443c      	add	r4, r7
 80007b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80007b6:	fba0 9302 	umull	r9, r3, r0, r2
 80007ba:	eba4 040c 	sub.w	r4, r4, ip
 80007be:	429c      	cmp	r4, r3
 80007c0:	46ce      	mov	lr, r9
 80007c2:	469c      	mov	ip, r3
 80007c4:	d351      	bcc.n	800086a <__udivmoddi4+0x28a>
 80007c6:	d04e      	beq.n	8000866 <__udivmoddi4+0x286>
 80007c8:	b155      	cbz	r5, 80007e0 <__udivmoddi4+0x200>
 80007ca:	ebb8 030e 	subs.w	r3, r8, lr
 80007ce:	eb64 040c 	sbc.w	r4, r4, ip
 80007d2:	fa04 f606 	lsl.w	r6, r4, r6
 80007d6:	40cb      	lsrs	r3, r1
 80007d8:	431e      	orrs	r6, r3
 80007da:	40cc      	lsrs	r4, r1
 80007dc:	e9c5 6400 	strd	r6, r4, [r5]
 80007e0:	2100      	movs	r1, #0
 80007e2:	e750      	b.n	8000686 <__udivmoddi4+0xa6>
 80007e4:	f1c2 0320 	rsb	r3, r2, #32
 80007e8:	fa20 f103 	lsr.w	r1, r0, r3
 80007ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80007f0:	fa24 f303 	lsr.w	r3, r4, r3
 80007f4:	4094      	lsls	r4, r2
 80007f6:	430c      	orrs	r4, r1
 80007f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000800:	fa1f f78c 	uxth.w	r7, ip
 8000804:	fbb3 f0f8 	udiv	r0, r3, r8
 8000808:	fb08 3110 	mls	r1, r8, r0, r3
 800080c:	0c23      	lsrs	r3, r4, #16
 800080e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000812:	fb00 f107 	mul.w	r1, r0, r7
 8000816:	4299      	cmp	r1, r3
 8000818:	d908      	bls.n	800082c <__udivmoddi4+0x24c>
 800081a:	eb1c 0303 	adds.w	r3, ip, r3
 800081e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000822:	d22c      	bcs.n	800087e <__udivmoddi4+0x29e>
 8000824:	4299      	cmp	r1, r3
 8000826:	d92a      	bls.n	800087e <__udivmoddi4+0x29e>
 8000828:	3802      	subs	r0, #2
 800082a:	4463      	add	r3, ip
 800082c:	1a5b      	subs	r3, r3, r1
 800082e:	b2a4      	uxth	r4, r4
 8000830:	fbb3 f1f8 	udiv	r1, r3, r8
 8000834:	fb08 3311 	mls	r3, r8, r1, r3
 8000838:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800083c:	fb01 f307 	mul.w	r3, r1, r7
 8000840:	42a3      	cmp	r3, r4
 8000842:	d908      	bls.n	8000856 <__udivmoddi4+0x276>
 8000844:	eb1c 0404 	adds.w	r4, ip, r4
 8000848:	f101 36ff 	add.w	r6, r1, #4294967295
 800084c:	d213      	bcs.n	8000876 <__udivmoddi4+0x296>
 800084e:	42a3      	cmp	r3, r4
 8000850:	d911      	bls.n	8000876 <__udivmoddi4+0x296>
 8000852:	3902      	subs	r1, #2
 8000854:	4464      	add	r4, ip
 8000856:	1ae4      	subs	r4, r4, r3
 8000858:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800085c:	e739      	b.n	80006d2 <__udivmoddi4+0xf2>
 800085e:	4604      	mov	r4, r0
 8000860:	e6f0      	b.n	8000644 <__udivmoddi4+0x64>
 8000862:	4608      	mov	r0, r1
 8000864:	e706      	b.n	8000674 <__udivmoddi4+0x94>
 8000866:	45c8      	cmp	r8, r9
 8000868:	d2ae      	bcs.n	80007c8 <__udivmoddi4+0x1e8>
 800086a:	ebb9 0e02 	subs.w	lr, r9, r2
 800086e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000872:	3801      	subs	r0, #1
 8000874:	e7a8      	b.n	80007c8 <__udivmoddi4+0x1e8>
 8000876:	4631      	mov	r1, r6
 8000878:	e7ed      	b.n	8000856 <__udivmoddi4+0x276>
 800087a:	4603      	mov	r3, r0
 800087c:	e799      	b.n	80007b2 <__udivmoddi4+0x1d2>
 800087e:	4630      	mov	r0, r6
 8000880:	e7d4      	b.n	800082c <__udivmoddi4+0x24c>
 8000882:	46d6      	mov	lr, sl
 8000884:	e77f      	b.n	8000786 <__udivmoddi4+0x1a6>
 8000886:	4463      	add	r3, ip
 8000888:	3802      	subs	r0, #2
 800088a:	e74d      	b.n	8000728 <__udivmoddi4+0x148>
 800088c:	4606      	mov	r6, r0
 800088e:	4623      	mov	r3, r4
 8000890:	4608      	mov	r0, r1
 8000892:	e70f      	b.n	80006b4 <__udivmoddi4+0xd4>
 8000894:	3e02      	subs	r6, #2
 8000896:	4463      	add	r3, ip
 8000898:	e730      	b.n	80006fc <__udivmoddi4+0x11c>
 800089a:	bf00      	nop

0800089c <__aeabi_idiv0>:
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop

080008a0 <calc_duties>:
 * @param[in] vq Voltage in the q-axis.
 * @param[in] vDC DC voltage.
 * @param[in] theta_e Electrical angle in radians (-pi..pi).
 * @param[out] duties Pointer to the duties structure.
 */
void calc_duties(float vd, float vq, float vDC, float theta_e, volatile Duties *duties) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	ed2d 8b02 	vpush	{d8}
 80008a6:	b08e      	sub	sp, #56	@ 0x38
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	ed87 0a05 	vstr	s0, [r7, #20]
 80008ae:	edc7 0a04 	vstr	s1, [r7, #16]
 80008b2:	ed87 1a03 	vstr	s2, [r7, #12]
 80008b6:	edc7 1a02 	vstr	s3, [r7, #8]
 80008ba:	6078      	str	r0, [r7, #4]


  // inverse Park transform
  float alpha = (vd/vDC)*cosf(theta_e) - (vq/vDC)*sinf(theta_e);              // Alpha(D) = d*cos(Fi) - q*sin(Fi)
 80008bc:	ed97 7a05 	vldr	s14, [r7, #20]
 80008c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80008c4:	ee87 8a27 	vdiv.f32	s16, s14, s15
 80008c8:	ed97 0a02 	vldr	s0, [r7, #8]
 80008cc:	f006 fcd0 	bl	8007270 <cosf>
 80008d0:	eef0 7a40 	vmov.f32	s15, s0
 80008d4:	ee28 8a27 	vmul.f32	s16, s16, s15
 80008d8:	ed97 7a04 	vldr	s14, [r7, #16]
 80008dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80008e0:	eec7 8a27 	vdiv.f32	s17, s14, s15
 80008e4:	ed97 0a02 	vldr	s0, [r7, #8]
 80008e8:	f006 fbfe 	bl	80070e8 <sinf>
 80008ec:	eef0 7a40 	vmov.f32	s15, s0
 80008f0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80008f4:	ee78 7a67 	vsub.f32	s15, s16, s15
 80008f8:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
  float beta = (vd/vDC)*sinf(theta_e) + (vq/vDC)*cosf(theta_e);              // Beta(Q) = d*sin(Fi) + q*cos(Fi)
 80008fc:	ed97 7a05 	vldr	s14, [r7, #20]
 8000900:	edd7 7a03 	vldr	s15, [r7, #12]
 8000904:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8000908:	ed97 0a02 	vldr	s0, [r7, #8]
 800090c:	f006 fbec 	bl	80070e8 <sinf>
 8000910:	eef0 7a40 	vmov.f32	s15, s0
 8000914:	ee28 8a27 	vmul.f32	s16, s16, s15
 8000918:	ed97 7a04 	vldr	s14, [r7, #16]
 800091c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000920:	eec7 8a27 	vdiv.f32	s17, s14, s15
 8000924:	ed97 0a02 	vldr	s0, [r7, #8]
 8000928:	f006 fca2 	bl	8007270 <cosf>
 800092c:	eef0 7a40 	vmov.f32	s15, s0
 8000930:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8000934:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000938:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30


  svpwm_struct svpwm;

  // Assign values to SVPWM structure, works with alpha/beta not a/b/c
  svpwm.alpha = alpha;
 800093c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800093e:	61bb      	str	r3, [r7, #24]
  svpwm.beta = beta;
 8000940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000942:	61fb      	str	r3, [r7, #28]
  svpwm_calc(&svpwm);
 8000944:	f107 0318 	add.w	r3, r7, #24
 8000948:	4618      	mov	r0, r3
 800094a:	f006 ff41 	bl	80077d0 <svpwm_calc>

  // Assign SVPWM duties (0 to 1, high side)
  duties->Da = svpwm.Da;
 800094e:	6a3a      	ldr	r2, [r7, #32]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	601a      	str	r2, [r3, #0]
  duties->Db = svpwm.Db;
 8000954:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	605a      	str	r2, [r3, #4]
  duties->Dc = svpwm.Dc;
 800095a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	609a      	str	r2, [r3, #8]

}
 8000960:	bf00      	nop
 8000962:	3738      	adds	r7, #56	@ 0x38
 8000964:	46bd      	mov	sp, r7
 8000966:	ecbd 8b02 	vpop	{d8}
 800096a:	bd80      	pop	{r7, pc}

0800096c <eval_inv_FSM>:
 *
 * This function executes the finite state machine to control the inverter based on its current state.
 *
 * @param inv Pointer to the inverter structure.
 */
void eval_inv_FSM(volatile inverterStruct *inv) {
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
    switch (inv->state) {
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	7d1b      	ldrb	r3, [r3, #20]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	2b03      	cmp	r3, #3
 800097c:	d81a      	bhi.n	80009b4 <eval_inv_FSM+0x48>
 800097e:	a201      	add	r2, pc, #4	@ (adr r2, 8000984 <eval_inv_FSM+0x18>)
 8000980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000984:	08000995 	.word	0x08000995
 8000988:	0800099d 	.word	0x0800099d
 800098c:	080009a5 	.word	0x080009a5
 8000990:	080009ad 	.word	0x080009ad
        case INV_STATE_IDLE:
        	handle_idle(inv);
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f000 f813 	bl	80009c0 <handle_idle>
            break;
 800099a:	e00c      	b.n	80009b6 <eval_inv_FSM+0x4a>
        case INV_STATE_STARTUP:
        	handle_startup(inv);
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f000 f829 	bl	80009f4 <handle_startup>
            break;
 80009a2:	e008      	b.n	80009b6 <eval_inv_FSM+0x4a>
        case INV_STATE_RUNNING:
        	handle_running(inv);
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f000 f83f 	bl	8000a28 <handle_running>
            break;
 80009aa:	e004      	b.n	80009b6 <eval_inv_FSM+0x4a>
        case INV_STATE_FAULT:
        	handle_fault(inv);
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f000 f855 	bl	8000a5c <handle_fault>
            break;
 80009b2:	e000      	b.n	80009b6 <eval_inv_FSM+0x4a>
        default:
            // Invalid state, handle error
            break;
 80009b4:	bf00      	nop
    }
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop

080009c0 <handle_idle>:
 *
 * This function handles the actions and transitions for the idle state of the inverter.
 *
 * @param inv Pointer to the inverter structure.
 */
void handle_idle(volatile inverterStruct *inv) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
    // Perform actions required in idle state
    // Transition conditions to other states:
    // - Start startup sequence based on input condition
    // - Transition to fault state based on error conditions
    inv->led->mode = LED_MODE_OFF;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2203      	movs	r2, #3
 80009ce:	719a      	strb	r2, [r3, #6]
    DISABLE(inv->enable_port, inv->enable_pin);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6858      	ldr	r0, [r3, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	891b      	ldrh	r3, [r3, #8]
 80009d8:	b29b      	uxth	r3, r3
 80009da:	2200      	movs	r2, #0
 80009dc:	4619      	mov	r1, r3
 80009de:	f003 fcd5 	bl	800438c <HAL_GPIO_WritePin>
    disable_PWM(inv->htim);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	68db      	ldr	r3, [r3, #12]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 f9ae 	bl	8000d48 <disable_PWM>

}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <handle_startup>:
 *
 * This function handles the actions and transitions for the startup state of the inverter.
 *
 * @param inv Pointer to the inverter structure.
 */
void handle_startup(volatile inverterStruct *inv) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
    // Perform actions required in startup state
    // Transition conditions to other states:
    // - Transition to running state when startup sequence completes successfully
    // - Transition to fault state based on error conditions during startup
    inv->led->mode = LED_MODE_BLINK_FAST;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2200      	movs	r2, #0
 8000a02:	719a      	strb	r2, [r3, #6]
    DISABLE(inv->enable_port, inv->enable_pin);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6858      	ldr	r0, [r3, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	891b      	ldrh	r3, [r3, #8]
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	2200      	movs	r2, #0
 8000a10:	4619      	mov	r1, r3
 8000a12:	f003 fcbb 	bl	800438c <HAL_GPIO_WritePin>
    enable_PWM(inv->htim);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	68db      	ldr	r3, [r3, #12]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 f96e 	bl	8000cfc <enable_PWM>

}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <handle_running>:
 *
 * This function handles the actions and transitions for the running state of the inverter.
 *
 * @param inv Pointer to the inverter structure.
 */
void handle_running(volatile inverterStruct *inv) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
    // Perform actions required in running state
    // This is where the main control loop resides
    // Monitor inverter variables, adjust control parameters, etc.
    // Transition conditions to other states:
    // - Transition to fault state based on error conditions during operation
    inv->led->mode = LED_MODE_ON;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2202      	movs	r2, #2
 8000a36:	719a      	strb	r2, [r3, #6]
    ENABLE(inv->enable_port, inv->enable_pin);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	6858      	ldr	r0, [r3, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	891b      	ldrh	r3, [r3, #8]
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	2201      	movs	r2, #1
 8000a44:	4619      	mov	r1, r3
 8000a46:	f003 fca1 	bl	800438c <HAL_GPIO_WritePin>
    enable_PWM(inv->htim);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	68db      	ldr	r3, [r3, #12]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 f954 	bl	8000cfc <enable_PWM>

}
 8000a54:	bf00      	nop
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <handle_fault>:
 *
 * This function handles the actions and transitions for the fault state of the inverter.
 *
 * @param inv Pointer to the inverter structure.
 */
void handle_fault(volatile inverterStruct *inv) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
    // Perform actions required in fault state
    // This could involve shutting down the inverter, logging error messages, etc.
    // Transition conditions to other states:
    // - Retry startup sequence after a delay if fault condition is recoverable
    // - Transition to idle state after fault is resolved
    inv->led->mode = LED_MODE_BLINK_SLOW;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2201      	movs	r2, #1
 8000a6a:	719a      	strb	r2, [r3, #6]
    DISABLE(inv->enable_port, inv->enable_pin);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6858      	ldr	r0, [r3, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	891b      	ldrh	r3, [r3, #8]
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	2200      	movs	r2, #0
 8000a78:	4619      	mov	r1, r3
 8000a7a:	f003 fc87 	bl	800438c <HAL_GPIO_WritePin>
    disable_PWM(inv->htim);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	68db      	ldr	r3, [r3, #12]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 f960 	bl	8000d48 <disable_PWM>
}
 8000a88:	bf00      	nop
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <initialize_inverter>:
 * @param enable_port Pointer to the GPIO port for enabling/disabling the inverter.
 * @param enable_pin Pin number for enabling/disabling the inverter.
 * @param htim Timer peripheral for the PWM output.
 * @param hadc ADC peripheral for the current phase current and DC voltage sensing.
 */
void initialize_inverter(volatile inverterStruct *inv, LED *led, GPIO_TypeDef *enable_port, uint16_t enable_pin, TIM_HandleTypeDef *htim, ADC_HandleTypeDef *hadc) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
 8000a9c:	807b      	strh	r3, [r7, #2]
    // Initialize inverter structure
    inv->state = INV_STATE_STARTUP;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	751a      	strb	r2, [r3, #20]
    inv->led = led;
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	68ba      	ldr	r2, [r7, #8]
 8000aa8:	601a      	str	r2, [r3, #0]
    inv->enable_pin = enable_pin;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	887a      	ldrh	r2, [r7, #2]
 8000aae:	811a      	strh	r2, [r3, #8]
    inv->enable_port = enable_port;
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	605a      	str	r2, [r3, #4]
    inv->htim = htim;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	69ba      	ldr	r2, [r7, #24]
 8000aba:	60da      	str	r2, [r3, #12]
    inv->hadc = hadc;
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	69fa      	ldr	r2, [r7, #28]
 8000ac0:	611a      	str	r2, [r3, #16]
    inv->duties.Da = 0.5;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8000ac8:	64da      	str	r2, [r3, #76]	@ 0x4c
    inv->duties.Db = 0.5;
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8000ad0:	651a      	str	r2, [r3, #80]	@ 0x50
    inv->duties.Dc = 0.5;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8000ad8:	655a      	str	r2, [r3, #84]	@ 0x54

    HAL_TIM_Base_Start_IT(inv->htim);
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f004 fec6 	bl	8005870 <HAL_TIM_Base_Start_IT>

}
 8000ae4:	bf00      	nop
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <get_ADC>:
  * @brief  Get electrical ADC measurements.
  * @param[in]  ADC_raw Pointer to the raw ADC values array.
  * @param[out]  analog Pointer to the ADC struct to store the results.
  * @retval OK 0 if an error occurred, 1 if successful.
  */
uint8_t get_ADC(volatile uint32_t ADC_raw[], volatile Analog* analog) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	6039      	str	r1, [r7, #0]

    // Calculate currents and voltage
    float ia = get_linear(ADC_raw[0], CURRENT_SLOPE, CURRENT_OFFSET);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 8000b78 <get_ADC+0x8c>
 8000afe:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8000b7c <get_ADC+0x90>
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 f840 	bl	8000b88 <get_linear>
 8000b08:	ed87 0a05 	vstr	s0, [r7, #20]
    float ib = get_linear(ADC_raw[1], CURRENT_SLOPE, CURRENT_OFFSET);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3304      	adds	r3, #4
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	eddf 0a19 	vldr	s1, [pc, #100]	@ 8000b78 <get_ADC+0x8c>
 8000b16:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8000b7c <get_ADC+0x90>
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 f834 	bl	8000b88 <get_linear>
 8000b20:	ed87 0a04 	vstr	s0, [r7, #16]
    float ic = get_linear(ADC_raw[2], CURRENT_SLOPE, CURRENT_OFFSET);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3308      	adds	r3, #8
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8000b78 <get_ADC+0x8c>
 8000b2e:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8000b7c <get_ADC+0x90>
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 f828 	bl	8000b88 <get_linear>
 8000b38:	ed87 0a03 	vstr	s0, [r7, #12]
    float vDC = get_linear(ADC_raw[3], VOLTAGE_SLOPE, VOLTAGE_OFFSET);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	330c      	adds	r3, #12
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 8000b80 <get_ADC+0x94>
 8000b46:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8000b84 <get_ADC+0x98>
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 f81c 	bl	8000b88 <get_linear>
 8000b50:	ed87 0a02 	vstr	s0, [r7, #8]

    // Store the measurements
    analog->ia = ia;
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	697a      	ldr	r2, [r7, #20]
 8000b58:	601a      	str	r2, [r3, #0]
    analog->ib = ib;
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	605a      	str	r2, [r3, #4]
    analog->ic = ic;
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	68fa      	ldr	r2, [r7, #12]
 8000b64:	609a      	str	r2, [r3, #8]
    analog->vDC = vDC;
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	68ba      	ldr	r2, [r7, #8]
 8000b6a:	60da      	str	r2, [r3, #12]

    return 1; // Success
 8000b6c:	2301      	movs	r3, #1
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	3fd9afe4 	.word	0x3fd9afe4
 8000b7c:	4259afe4 	.word	0x4259afe4
 8000b80:	3caaa3ad 	.word	0x3caaa3ad
 8000b84:	4383b7ae 	.word	0x4383b7ae

08000b88 <get_linear>:
  * @param[in]  bits The ADC reading.
  * @param[in]  slope The slope (units per volt).
  * @param[in]  offset The offset (volts at zero).
  * @retval measurement The physical measurement.
  */
float get_linear(uint32_t bits, float slope, float offset) {
 8000b88:	b480      	push	{r7}
 8000b8a:	b087      	sub	sp, #28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	ed87 0a02 	vstr	s0, [r7, #8]
 8000b94:	edc7 0a01 	vstr	s1, [r7, #4]
    // Convert ADC reading to voltage
    float voltage = (float) bits * 0.0008058608f; // Assuming 12-bit ADC and 3.3V reference (bits * (3.3 V / 4095.0 bits))
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	ee07 3a90 	vmov	s15, r3
 8000b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ba2:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000bdc <get_linear+0x54>
 8000ba6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000baa:	edc7 7a05 	vstr	s15, [r7, #20]

    // Convert voltage to physical measurement
    float measurement = (voltage - offset) * slope;
 8000bae:	ed97 7a05 	vldr	s14, [r7, #20]
 8000bb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bba:	ed97 7a02 	vldr	s14, [r7, #8]
 8000bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bc2:	edc7 7a04 	vstr	s15, [r7, #16]

    return measurement;
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	ee07 3a90 	vmov	s15, r3
}
 8000bcc:	eeb0 0a67 	vmov.f32	s0, s15
 8000bd0:	371c      	adds	r7, #28
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	3a534067 	.word	0x3a534067

08000be0 <handle_LED>:
 * This function handles the LED blinking modes based on the LED mode and current millisecond counter.
 *
 * @param led Pointer to the LED structure.
 * @param ms_counter Current millisecond counter.
 */
void handle_LED(LED *led, uint32_t ms_counter) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
    switch (led->mode) {
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	799b      	ldrb	r3, [r3, #6]
 8000bee:	2b03      	cmp	r3, #3
 8000bf0:	d858      	bhi.n	8000ca4 <handle_LED+0xc4>
 8000bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8000bf8 <handle_LED+0x18>)
 8000bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf8:	08000c09 	.word	0x08000c09
 8000bfc:	08000c43 	.word	0x08000c43
 8000c00:	08000c81 	.word	0x08000c81
 8000c04:	08000c93 	.word	0x08000c93
        case LED_MODE_BLINK_FAST:
            if (ms_counter % 200 < 100) {
 8000c08:	683a      	ldr	r2, [r7, #0]
 8000c0a:	4b29      	ldr	r3, [pc, #164]	@ (8000cb0 <handle_LED+0xd0>)
 8000c0c:	fba3 1302 	umull	r1, r3, r3, r2
 8000c10:	099b      	lsrs	r3, r3, #6
 8000c12:	21c8      	movs	r1, #200	@ 0xc8
 8000c14:	fb01 f303 	mul.w	r3, r1, r3
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	2b63      	cmp	r3, #99	@ 0x63
 8000c1c:	d808      	bhi.n	8000c30 <handle_LED+0x50>
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_SET);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6818      	ldr	r0, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	889b      	ldrh	r3, [r3, #4]
 8000c26:	2201      	movs	r2, #1
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f003 fbaf 	bl	800438c <HAL_GPIO_WritePin>
            } else {
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
            }
            break;
 8000c2e:	e03a      	b.n	8000ca6 <handle_LED+0xc6>
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6818      	ldr	r0, [r3, #0]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	889b      	ldrh	r3, [r3, #4]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	f003 fba6 	bl	800438c <HAL_GPIO_WritePin>
            break;
 8000c40:	e031      	b.n	8000ca6 <handle_LED+0xc6>
        case LED_MODE_BLINK_SLOW:
            if (ms_counter % 1000 < 500) {
 8000c42:	683a      	ldr	r2, [r7, #0]
 8000c44:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb4 <handle_LED+0xd4>)
 8000c46:	fba3 1302 	umull	r1, r3, r3, r2
 8000c4a:	099b      	lsrs	r3, r3, #6
 8000c4c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000c50:	fb01 f303 	mul.w	r3, r1, r3
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000c5a:	d208      	bcs.n	8000c6e <handle_LED+0x8e>
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_SET);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6818      	ldr	r0, [r3, #0]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	889b      	ldrh	r3, [r3, #4]
 8000c64:	2201      	movs	r2, #1
 8000c66:	4619      	mov	r1, r3
 8000c68:	f003 fb90 	bl	800438c <HAL_GPIO_WritePin>
            } else {
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
            }
            break;
 8000c6c:	e01b      	b.n	8000ca6 <handle_LED+0xc6>
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6818      	ldr	r0, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	889b      	ldrh	r3, [r3, #4]
 8000c76:	2200      	movs	r2, #0
 8000c78:	4619      	mov	r1, r3
 8000c7a:	f003 fb87 	bl	800438c <HAL_GPIO_WritePin>
            break;
 8000c7e:	e012      	b.n	8000ca6 <handle_LED+0xc6>
        case LED_MODE_ON:
            HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_SET);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6818      	ldr	r0, [r3, #0]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	889b      	ldrh	r3, [r3, #4]
 8000c88:	2201      	movs	r2, #1
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	f003 fb7e 	bl	800438c <HAL_GPIO_WritePin>
            break;
 8000c90:	e009      	b.n	8000ca6 <handle_LED+0xc6>
        case LED_MODE_OFF:
            HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6818      	ldr	r0, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	889b      	ldrh	r3, [r3, #4]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	f003 fb75 	bl	800438c <HAL_GPIO_WritePin>
            break;
 8000ca2:	e000      	b.n	8000ca6 <handle_LED+0xc6>
        default:
            // Invalid LED mode
            break;
 8000ca4:	bf00      	nop
    }
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	51eb851f 	.word	0x51eb851f
 8000cb4:	10624dd3 	.word	0x10624dd3

08000cb8 <handle_direction>:
 * and vice versa.
 *
 * @param invLeft Pointer to the left inverter structure.
 * @param invRight Pointer to the right inverter structure.
 */
void handle_direction(volatile int8_t *dirLeft, volatile int8_t *dirRight){
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
	// Read the state of the DIR switch
    GPIO_PinState dirState = HAL_GPIO_ReadPin(DIR_GPIO_Port, DIR_Pin);
 8000cc2:	2108      	movs	r1, #8
 8000cc4:	480c      	ldr	r0, [pc, #48]	@ (8000cf8 <handle_direction+0x40>)
 8000cc6:	f003 fb49 	bl	800435c <HAL_GPIO_ReadPin>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	73fb      	strb	r3, [r7, #15]

    // Update the directions of the inverters based on the DIR switch state
    if (dirState == GPIO_PIN_SET) {
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d106      	bne.n	8000ce2 <handle_direction+0x2a>
    	*dirLeft = 1;  // CW
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	701a      	strb	r2, [r3, #0]
    	*dirRight = -1;  // CCW
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	22ff      	movs	r2, #255	@ 0xff
 8000cde:	701a      	strb	r2, [r3, #0]
    } else {
    	*dirLeft = -1;  // CCW
    	*dirRight = 1;  // CW
    }
}
 8000ce0:	e005      	b.n	8000cee <handle_direction+0x36>
    	*dirLeft = -1;  // CCW
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	22ff      	movs	r2, #255	@ 0xff
 8000ce6:	701a      	strb	r2, [r3, #0]
    	*dirRight = 1;  // CW
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	2201      	movs	r2, #1
 8000cec:	701a      	strb	r2, [r3, #0]
}
 8000cee:	bf00      	nop
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40020c00 	.word	0x40020c00

08000cfc <enable_PWM>:
 *
 * This function enables PWM output for the specified timer.
 *
 * @param htim Pointer to the TIM_HandleTypeDef structure.
 */
void enable_PWM(TIM_HandleTypeDef *htim) {
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]

//	Reset the counter
//	htim->Instance->CNT=0;
	htim->Instance->CCMR1 = 0x6868; // Set Channel 1 and Channel 2 Output Compare mode to PWM Mode
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f646 0268 	movw	r2, #26728	@ 0x6868
 8000d0c:	619a      	str	r2, [r3, #24]

//	htim1.Instance->CCER = 0x888;
	htim->Instance->CCER = 0x10555;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a0c      	ldr	r2, [pc, #48]	@ (8000d44 <enable_PWM+0x48>)
 8000d14:	621a      	str	r2, [r3, #32]

//	Enable Main Output
	htim->Instance->BDTR |=(1<<15);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000d24:	645a      	str	r2, [r3, #68]	@ 0x44

//	Enable Counter
	htim->Instance->CR1 |=1;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f042 0201 	orr.w	r2, r2, #1
 8000d34:	601a      	str	r2, [r3, #0]

}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	00010555 	.word	0x00010555

08000d48 <disable_PWM>:
 *
 * This function disables PWM output for the specified timer.
 *
 * @param htim Pointer to the TIM_HandleTypeDef structure.
 */
void disable_PWM(TIM_HandleTypeDef *htim) {
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]

	//Disable outputs and select the polarity of each output
	htim->Instance->CNT=0;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2200      	movs	r2, #0
 8000d56:	625a      	str	r2, [r3, #36]	@ 0x24


	htim->Instance->CCER = 0xCCC;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f640 42cc 	movw	r2, #3276	@ 0xccc
 8000d60:	621a      	str	r2, [r3, #32]
	//	htim1.Instance->CCER |= 0x555;

		//Disable Main Output
	htim->Instance->BDTR &= 0xFFFF7FFF;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000d70:	645a      	str	r2, [r3, #68]	@ 0x44
	//	htim1.Instance->BDTR &=(0<<15);
}
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <update_PWM>:
 * This function sets the duty cycles for the PWM channels.
 *
 * @param htim Pointer to the TIM_HandleTypeDef structure.
 * @param duties Duties structure containing duty cycle values.
 */
void update_PWM(TIM_HandleTypeDef *htim, Duties duties) {
 8000d7e:	b480      	push	{r7}
 8000d80:	b085      	sub	sp, #20
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	60f8      	str	r0, [r7, #12]
 8000d86:	eef0 6a40 	vmov.f32	s13, s0
 8000d8a:	eeb0 7a60 	vmov.f32	s14, s1
 8000d8e:	eef0 7a41 	vmov.f32	s15, s2
 8000d92:	edc7 6a00 	vstr	s13, [r7]
 8000d96:	ed87 7a01 	vstr	s14, [r7, #4]
 8000d9a:	edc7 7a02 	vstr	s15, [r7, #8]


	htim->Instance->CCR1 = ((int32_t)(htim->Instance->ARR) * (1.0F-duties.Da));
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000da4:	ee07 3a90 	vmov	s15, r3
 8000da8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dac:	edd7 7a00 	vldr	s15, [r7]
 8000db0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000db4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000db8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dc4:	ee17 2a90 	vmov	r2, s15
 8000dc8:	635a      	str	r2, [r3, #52]	@ 0x34
	htim->Instance->CCR2 = ((int32_t)(htim->Instance->ARR) * (1.0F-duties.Db));
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dd0:	ee07 3a90 	vmov	s15, r3
 8000dd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ddc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000de0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000de4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000df0:	ee17 2a90 	vmov	r2, s15
 8000df4:	639a      	str	r2, [r3, #56]	@ 0x38
	htim->Instance->CCR3 = ((int32_t)(htim->Instance->ARR) * (1.0F-duties.Dc));
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dfc:	ee07 3a90 	vmov	s15, r3
 8000e00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e04:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000e0c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e1c:	ee17 2a90 	vmov	r2, s15
 8000e20:	63da      	str	r2, [r3, #60]	@ 0x3c

}
 8000e22:	bf00      	nop
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
	...

08000e30 <tasks_1ms>:
 *
 * This function is called by the TIM6 IRQ handler every millisecond.
 * It increments the millisecond counter and calls the LED handler
 * for left, right, and error LEDs.
 */
void tasks_1ms(void) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
    // Increment millisecond counter
    ms_counter++;
 8000e34:	4b0e      	ldr	r3, [pc, #56]	@ (8000e70 <tasks_1ms+0x40>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	4a0d      	ldr	r2, [pc, #52]	@ (8000e70 <tasks_1ms+0x40>)
 8000e3c:	6013      	str	r3, [r2, #0]

    // Call LED handler for left, right, and error LEDs
    handle_LED(&ledLeft, ms_counter);
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e70 <tasks_1ms+0x40>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4619      	mov	r1, r3
 8000e44:	480b      	ldr	r0, [pc, #44]	@ (8000e74 <tasks_1ms+0x44>)
 8000e46:	f7ff fecb 	bl	8000be0 <handle_LED>
    handle_LED(&ledRight, ms_counter);
 8000e4a:	4b09      	ldr	r3, [pc, #36]	@ (8000e70 <tasks_1ms+0x40>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4809      	ldr	r0, [pc, #36]	@ (8000e78 <tasks_1ms+0x48>)
 8000e52:	f7ff fec5 	bl	8000be0 <handle_LED>
    handle_LED(&ledError, ms_counter);
 8000e56:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <tasks_1ms+0x40>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4807      	ldr	r0, [pc, #28]	@ (8000e7c <tasks_1ms+0x4c>)
 8000e5e:	f7ff febf 	bl	8000be0 <handle_LED>

    // Read direction switch
    handle_direction(&invLeft.direction, &invRight.direction);
 8000e62:	4907      	ldr	r1, [pc, #28]	@ (8000e80 <tasks_1ms+0x50>)
 8000e64:	4807      	ldr	r0, [pc, #28]	@ (8000e84 <tasks_1ms+0x54>)
 8000e66:	f7ff ff27 	bl	8000cb8 <handle_direction>
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000180 	.word	0x20000180
 8000e74:	20000000 	.word	0x20000000
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	20000010 	.word	0x20000010
 8000e80:	2000015c 	.word	0x2000015c
 8000e84:	20000100 	.word	0x20000100

08000e88 <tasks_20us_LEFT>:

angle_struct angle = {
    .freq = 0.2F,
    .Ts = TS,
};
void tasks_20us_LEFT(void){
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0


  angle_calc(&angle);
 8000e8c:	481d      	ldr	r0, [pc, #116]	@ (8000f04 <tasks_20us_LEFT+0x7c>)
 8000e8e:	f006 fc6b 	bl	8007768 <angle_calc>

  invLeft.encoder.theta_e = angle.angle*PI;
 8000e92:	4b1c      	ldr	r3, [pc, #112]	@ (8000f04 <tasks_20us_LEFT+0x7c>)
 8000e94:	edd3 7a02 	vldr	s15, [r3, #8]
 8000e98:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8000f08 <tasks_20us_LEFT+0x80>
 8000e9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ea0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f0c <tasks_20us_LEFT+0x84>)
 8000ea2:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

  get_ADC(ADC_raw_L, &invLeft.analog);
 8000ea6:	491a      	ldr	r1, [pc, #104]	@ (8000f10 <tasks_20us_LEFT+0x88>)
 8000ea8:	481a      	ldr	r0, [pc, #104]	@ (8000f14 <tasks_20us_LEFT+0x8c>)
 8000eaa:	f7ff fe1f 	bl	8000aec <get_ADC>

  calc_duties(vd_L, vq_L, vDC_L, invLeft.encoder.theta_e, &invLeft.duties);
 8000eae:	4b1a      	ldr	r3, [pc, #104]	@ (8000f18 <tasks_20us_LEFT+0x90>)
 8000eb0:	edd3 7a00 	vldr	s15, [r3]
 8000eb4:	4b19      	ldr	r3, [pc, #100]	@ (8000f1c <tasks_20us_LEFT+0x94>)
 8000eb6:	ed93 7a00 	vldr	s14, [r3]
 8000eba:	4b19      	ldr	r3, [pc, #100]	@ (8000f20 <tasks_20us_LEFT+0x98>)
 8000ebc:	edd3 6a00 	vldr	s13, [r3]
 8000ec0:	4b12      	ldr	r3, [pc, #72]	@ (8000f0c <tasks_20us_LEFT+0x84>)
 8000ec2:	ed93 6a0d 	vldr	s12, [r3, #52]	@ 0x34
 8000ec6:	4817      	ldr	r0, [pc, #92]	@ (8000f24 <tasks_20us_LEFT+0x9c>)
 8000ec8:	eef0 1a46 	vmov.f32	s3, s12
 8000ecc:	eeb0 1a66 	vmov.f32	s2, s13
 8000ed0:	eef0 0a47 	vmov.f32	s1, s14
 8000ed4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ed8:	f7ff fce2 	bl	80008a0 <calc_duties>

  update_PWM(invLeft.htim, invLeft.duties);
 8000edc:	4b0b      	ldr	r3, [pc, #44]	@ (8000f0c <tasks_20us_LEFT+0x84>)
 8000ede:	68da      	ldr	r2, [r3, #12]
 8000ee0:	4b0a      	ldr	r3, [pc, #40]	@ (8000f0c <tasks_20us_LEFT+0x84>)
 8000ee2:	edd3 6a13 	vldr	s13, [r3, #76]	@ 0x4c
 8000ee6:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8000eea:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8000eee:	eeb0 0a66 	vmov.f32	s0, s13
 8000ef2:	eef0 0a47 	vmov.f32	s1, s14
 8000ef6:	eeb0 1a67 	vmov.f32	s2, s15
 8000efa:	4610      	mov	r0, r2
 8000efc:	f7ff ff3f 	bl	8000d7e <update_PWM>

}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000020 	.word	0x20000020
 8000f08:	40490fdb 	.word	0x40490fdb
 8000f0c:	200000a8 	.word	0x200000a8
 8000f10:	200000c0 	.word	0x200000c0
 8000f14:	20000160 	.word	0x20000160
 8000f18:	20000184 	.word	0x20000184
 8000f1c:	20000018 	.word	0x20000018
 8000f20:	2000001c 	.word	0x2000001c
 8000f24:	200000f4 	.word	0x200000f4

08000f28 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f2e:	463b      	mov	r3, r7
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f3a:	4b37      	ldr	r3, [pc, #220]	@ (8001018 <MX_ADC1_Init+0xf0>)
 8000f3c:	4a37      	ldr	r2, [pc, #220]	@ (800101c <MX_ADC1_Init+0xf4>)
 8000f3e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f40:	4b35      	ldr	r3, [pc, #212]	@ (8001018 <MX_ADC1_Init+0xf0>)
 8000f42:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f46:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f48:	4b33      	ldr	r3, [pc, #204]	@ (8001018 <MX_ADC1_Init+0xf0>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f4e:	4b32      	ldr	r3, [pc, #200]	@ (8001018 <MX_ADC1_Init+0xf0>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f54:	4b30      	ldr	r3, [pc, #192]	@ (8001018 <MX_ADC1_Init+0xf0>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f5a:	4b2f      	ldr	r3, [pc, #188]	@ (8001018 <MX_ADC1_Init+0xf0>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f62:	4b2d      	ldr	r3, [pc, #180]	@ (8001018 <MX_ADC1_Init+0xf0>)
 8000f64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000f68:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000f6a:	4b2b      	ldr	r3, [pc, #172]	@ (8001018 <MX_ADC1_Init+0xf0>)
 8000f6c:	f04f 6210 	mov.w	r2, #150994944	@ 0x9000000
 8000f70:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f72:	4b29      	ldr	r3, [pc, #164]	@ (8001018 <MX_ADC1_Init+0xf0>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000f78:	4b27      	ldr	r3, [pc, #156]	@ (8001018 <MX_ADC1_Init+0xf0>)
 8000f7a:	2204      	movs	r2, #4
 8000f7c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f7e:	4b26      	ldr	r3, [pc, #152]	@ (8001018 <MX_ADC1_Init+0xf0>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000f86:	4b24      	ldr	r3, [pc, #144]	@ (8001018 <MX_ADC1_Init+0xf0>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f8c:	4822      	ldr	r0, [pc, #136]	@ (8001018 <MX_ADC1_Init+0xf0>)
 8000f8e:	f001 fb6f 	bl	8002670 <HAL_ADC_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000f98:	f000 fe1a 	bl	8001bd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fa8:	463b      	mov	r3, r7
 8000faa:	4619      	mov	r1, r3
 8000fac:	481a      	ldr	r0, [pc, #104]	@ (8001018 <MX_ADC1_Init+0xf0>)
 8000fae:	f001 fcbb 	bl	8002928 <HAL_ADC_ConfigChannel>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000fb8:	f000 fe0a 	bl	8001bd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4813      	ldr	r0, [pc, #76]	@ (8001018 <MX_ADC1_Init+0xf0>)
 8000fca:	f001 fcad 	bl	8002928 <HAL_ADC_ConfigChannel>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000fd4:	f000 fdfc 	bl	8001bd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	480c      	ldr	r0, [pc, #48]	@ (8001018 <MX_ADC1_Init+0xf0>)
 8000fe6:	f001 fc9f 	bl	8002928 <HAL_ADC_ConfigChannel>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000ff0:	f000 fdee 	bl	8001bd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000ff8:	2304      	movs	r3, #4
 8000ffa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ffc:	463b      	mov	r3, r7
 8000ffe:	4619      	mov	r1, r3
 8001000:	4805      	ldr	r0, [pc, #20]	@ (8001018 <MX_ADC1_Init+0xf0>)
 8001002:	f001 fc91 	bl	8002928 <HAL_ADC_ConfigChannel>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 800100c:	f000 fde0 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001010:	bf00      	nop
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000188 	.word	0x20000188
 800101c:	40012000 	.word	0x40012000

08001020 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001026:	463b      	mov	r3, r7
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001032:	4b37      	ldr	r3, [pc, #220]	@ (8001110 <MX_ADC2_Init+0xf0>)
 8001034:	4a37      	ldr	r2, [pc, #220]	@ (8001114 <MX_ADC2_Init+0xf4>)
 8001036:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001038:	4b35      	ldr	r3, [pc, #212]	@ (8001110 <MX_ADC2_Init+0xf0>)
 800103a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800103e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001040:	4b33      	ldr	r3, [pc, #204]	@ (8001110 <MX_ADC2_Init+0xf0>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001046:	4b32      	ldr	r3, [pc, #200]	@ (8001110 <MX_ADC2_Init+0xf0>)
 8001048:	2201      	movs	r2, #1
 800104a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800104c:	4b30      	ldr	r3, [pc, #192]	@ (8001110 <MX_ADC2_Init+0xf0>)
 800104e:	2200      	movs	r2, #0
 8001050:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001052:	4b2f      	ldr	r3, [pc, #188]	@ (8001110 <MX_ADC2_Init+0xf0>)
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800105a:	4b2d      	ldr	r3, [pc, #180]	@ (8001110 <MX_ADC2_Init+0xf0>)
 800105c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001060:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8001062:	4b2b      	ldr	r3, [pc, #172]	@ (8001110 <MX_ADC2_Init+0xf0>)
 8001064:	f04f 6210 	mov.w	r2, #150994944	@ 0x9000000
 8001068:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800106a:	4b29      	ldr	r3, [pc, #164]	@ (8001110 <MX_ADC2_Init+0xf0>)
 800106c:	2200      	movs	r2, #0
 800106e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8001070:	4b27      	ldr	r3, [pc, #156]	@ (8001110 <MX_ADC2_Init+0xf0>)
 8001072:	2204      	movs	r2, #4
 8001074:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001076:	4b26      	ldr	r3, [pc, #152]	@ (8001110 <MX_ADC2_Init+0xf0>)
 8001078:	2201      	movs	r2, #1
 800107a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800107e:	4b24      	ldr	r3, [pc, #144]	@ (8001110 <MX_ADC2_Init+0xf0>)
 8001080:	2200      	movs	r2, #0
 8001082:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001084:	4822      	ldr	r0, [pc, #136]	@ (8001110 <MX_ADC2_Init+0xf0>)
 8001086:	f001 faf3 	bl	8002670 <HAL_ADC_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8001090:	f000 fd9e 	bl	8001bd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001094:	2306      	movs	r3, #6
 8001096:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001098:	2301      	movs	r3, #1
 800109a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800109c:	2303      	movs	r3, #3
 800109e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010a0:	463b      	mov	r3, r7
 80010a2:	4619      	mov	r1, r3
 80010a4:	481a      	ldr	r0, [pc, #104]	@ (8001110 <MX_ADC2_Init+0xf0>)
 80010a6:	f001 fc3f 	bl	8002928 <HAL_ADC_ConfigChannel>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 80010b0:	f000 fd8e 	bl	8001bd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80010b4:	2307      	movs	r3, #7
 80010b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010b8:	2302      	movs	r3, #2
 80010ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010bc:	463b      	mov	r3, r7
 80010be:	4619      	mov	r1, r3
 80010c0:	4813      	ldr	r0, [pc, #76]	@ (8001110 <MX_ADC2_Init+0xf0>)
 80010c2:	f001 fc31 	bl	8002928 <HAL_ADC_ConfigChannel>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 80010cc:	f000 fd80 	bl	8001bd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80010d0:	2308      	movs	r3, #8
 80010d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010d4:	2303      	movs	r3, #3
 80010d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010d8:	463b      	mov	r3, r7
 80010da:	4619      	mov	r1, r3
 80010dc:	480c      	ldr	r0, [pc, #48]	@ (8001110 <MX_ADC2_Init+0xf0>)
 80010de:	f001 fc23 	bl	8002928 <HAL_ADC_ConfigChannel>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_ADC2_Init+0xcc>
  {
    Error_Handler();
 80010e8:	f000 fd72 	bl	8001bd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80010ec:	2309      	movs	r3, #9
 80010ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80010f0:	2304      	movs	r3, #4
 80010f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010f4:	463b      	mov	r3, r7
 80010f6:	4619      	mov	r1, r3
 80010f8:	4805      	ldr	r0, [pc, #20]	@ (8001110 <MX_ADC2_Init+0xf0>)
 80010fa:	f001 fc15 	bl	8002928 <HAL_ADC_ConfigChannel>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_ADC2_Init+0xe8>
  {
    Error_Handler();
 8001104:	f000 fd64 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001108:	bf00      	nop
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	200001d0 	.word	0x200001d0
 8001114:	40012100 	.word	0x40012100

08001118 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800111e:	463b      	mov	r3, r7
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800112a:	4b21      	ldr	r3, [pc, #132]	@ (80011b0 <MX_ADC3_Init+0x98>)
 800112c:	4a21      	ldr	r2, [pc, #132]	@ (80011b4 <MX_ADC3_Init+0x9c>)
 800112e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001130:	4b1f      	ldr	r3, [pc, #124]	@ (80011b0 <MX_ADC3_Init+0x98>)
 8001132:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001136:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001138:	4b1d      	ldr	r3, [pc, #116]	@ (80011b0 <MX_ADC3_Init+0x98>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800113e:	4b1c      	ldr	r3, [pc, #112]	@ (80011b0 <MX_ADC3_Init+0x98>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001144:	4b1a      	ldr	r3, [pc, #104]	@ (80011b0 <MX_ADC3_Init+0x98>)
 8001146:	2200      	movs	r2, #0
 8001148:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800114a:	4b19      	ldr	r3, [pc, #100]	@ (80011b0 <MX_ADC3_Init+0x98>)
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001152:	4b17      	ldr	r3, [pc, #92]	@ (80011b0 <MX_ADC3_Init+0x98>)
 8001154:	2200      	movs	r2, #0
 8001156:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001158:	4b15      	ldr	r3, [pc, #84]	@ (80011b0 <MX_ADC3_Init+0x98>)
 800115a:	4a17      	ldr	r2, [pc, #92]	@ (80011b8 <MX_ADC3_Init+0xa0>)
 800115c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800115e:	4b14      	ldr	r3, [pc, #80]	@ (80011b0 <MX_ADC3_Init+0x98>)
 8001160:	2200      	movs	r2, #0
 8001162:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001164:	4b12      	ldr	r3, [pc, #72]	@ (80011b0 <MX_ADC3_Init+0x98>)
 8001166:	2201      	movs	r2, #1
 8001168:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800116a:	4b11      	ldr	r3, [pc, #68]	@ (80011b0 <MX_ADC3_Init+0x98>)
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001172:	4b0f      	ldr	r3, [pc, #60]	@ (80011b0 <MX_ADC3_Init+0x98>)
 8001174:	2201      	movs	r2, #1
 8001176:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001178:	480d      	ldr	r0, [pc, #52]	@ (80011b0 <MX_ADC3_Init+0x98>)
 800117a:	f001 fa79 	bl	8002670 <HAL_ADC_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001184:	f000 fd24 	bl	8001bd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001188:	230a      	movs	r3, #10
 800118a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800118c:	2301      	movs	r3, #1
 800118e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001190:	2300      	movs	r3, #0
 8001192:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001194:	463b      	mov	r3, r7
 8001196:	4619      	mov	r1, r3
 8001198:	4805      	ldr	r0, [pc, #20]	@ (80011b0 <MX_ADC3_Init+0x98>)
 800119a:	f001 fbc5 	bl	8002928 <HAL_ADC_ConfigChannel>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80011a4:	f000 fd14 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80011a8:	bf00      	nop
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000218 	.word	0x20000218
 80011b4:	40012200 	.word	0x40012200
 80011b8:	0f000001 	.word	0x0f000001

080011bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08e      	sub	sp, #56	@ 0x38
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a93      	ldr	r2, [pc, #588]	@ (8001428 <HAL_ADC_MspInit+0x26c>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d153      	bne.n	8001286 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011de:	4b93      	ldr	r3, [pc, #588]	@ (800142c <HAL_ADC_MspInit+0x270>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e2:	4a92      	ldr	r2, [pc, #584]	@ (800142c <HAL_ADC_MspInit+0x270>)
 80011e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ea:	4b90      	ldr	r3, [pc, #576]	@ (800142c <HAL_ADC_MspInit+0x270>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011f2:	623b      	str	r3, [r7, #32]
 80011f4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f6:	4b8d      	ldr	r3, [pc, #564]	@ (800142c <HAL_ADC_MspInit+0x270>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	4a8c      	ldr	r2, [pc, #560]	@ (800142c <HAL_ADC_MspInit+0x270>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6313      	str	r3, [r2, #48]	@ 0x30
 8001202:	4b8a      	ldr	r3, [pc, #552]	@ (800142c <HAL_ADC_MspInit+0x270>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	61fb      	str	r3, [r7, #28]
 800120c:	69fb      	ldr	r3, [r7, #28]
    PA0/WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ia_L_Pin|ib_L_Pin|ic_L_Pin|VDC_L_Pin;
 800120e:	230f      	movs	r3, #15
 8001210:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001212:	2303      	movs	r3, #3
 8001214:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800121e:	4619      	mov	r1, r3
 8001220:	4883      	ldr	r0, [pc, #524]	@ (8001430 <HAL_ADC_MspInit+0x274>)
 8001222:	f002 feef 	bl	8004004 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001226:	4b83      	ldr	r3, [pc, #524]	@ (8001434 <HAL_ADC_MspInit+0x278>)
 8001228:	4a83      	ldr	r2, [pc, #524]	@ (8001438 <HAL_ADC_MspInit+0x27c>)
 800122a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800122c:	4b81      	ldr	r3, [pc, #516]	@ (8001434 <HAL_ADC_MspInit+0x278>)
 800122e:	2200      	movs	r2, #0
 8001230:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001232:	4b80      	ldr	r3, [pc, #512]	@ (8001434 <HAL_ADC_MspInit+0x278>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001238:	4b7e      	ldr	r3, [pc, #504]	@ (8001434 <HAL_ADC_MspInit+0x278>)
 800123a:	2200      	movs	r2, #0
 800123c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800123e:	4b7d      	ldr	r3, [pc, #500]	@ (8001434 <HAL_ADC_MspInit+0x278>)
 8001240:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001244:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001246:	4b7b      	ldr	r3, [pc, #492]	@ (8001434 <HAL_ADC_MspInit+0x278>)
 8001248:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800124c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800124e:	4b79      	ldr	r3, [pc, #484]	@ (8001434 <HAL_ADC_MspInit+0x278>)
 8001250:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001254:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001256:	4b77      	ldr	r3, [pc, #476]	@ (8001434 <HAL_ADC_MspInit+0x278>)
 8001258:	2200      	movs	r2, #0
 800125a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800125c:	4b75      	ldr	r3, [pc, #468]	@ (8001434 <HAL_ADC_MspInit+0x278>)
 800125e:	2200      	movs	r2, #0
 8001260:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001262:	4b74      	ldr	r3, [pc, #464]	@ (8001434 <HAL_ADC_MspInit+0x278>)
 8001264:	2200      	movs	r2, #0
 8001266:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001268:	4872      	ldr	r0, [pc, #456]	@ (8001434 <HAL_ADC_MspInit+0x278>)
 800126a:	f002 fb53 	bl	8003914 <HAL_DMA_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8001274:	f000 fcac 	bl	8001bd0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4a6e      	ldr	r2, [pc, #440]	@ (8001434 <HAL_ADC_MspInit+0x278>)
 800127c:	639a      	str	r2, [r3, #56]	@ 0x38
 800127e:	4a6d      	ldr	r2, [pc, #436]	@ (8001434 <HAL_ADC_MspInit+0x278>)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001284:	e0cc      	b.n	8001420 <HAL_ADC_MspInit+0x264>
  else if(adcHandle->Instance==ADC2)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a6c      	ldr	r2, [pc, #432]	@ (800143c <HAL_ADC_MspInit+0x280>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d16e      	bne.n	800136e <HAL_ADC_MspInit+0x1b2>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001290:	4b66      	ldr	r3, [pc, #408]	@ (800142c <HAL_ADC_MspInit+0x270>)
 8001292:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001294:	4a65      	ldr	r2, [pc, #404]	@ (800142c <HAL_ADC_MspInit+0x270>)
 8001296:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800129a:	6453      	str	r3, [r2, #68]	@ 0x44
 800129c:	4b63      	ldr	r3, [pc, #396]	@ (800142c <HAL_ADC_MspInit+0x270>)
 800129e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012a4:	61bb      	str	r3, [r7, #24]
 80012a6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a8:	4b60      	ldr	r3, [pc, #384]	@ (800142c <HAL_ADC_MspInit+0x270>)
 80012aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ac:	4a5f      	ldr	r2, [pc, #380]	@ (800142c <HAL_ADC_MspInit+0x270>)
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b4:	4b5d      	ldr	r3, [pc, #372]	@ (800142c <HAL_ADC_MspInit+0x270>)
 80012b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	617b      	str	r3, [r7, #20]
 80012be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c0:	4b5a      	ldr	r3, [pc, #360]	@ (800142c <HAL_ADC_MspInit+0x270>)
 80012c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c4:	4a59      	ldr	r2, [pc, #356]	@ (800142c <HAL_ADC_MspInit+0x270>)
 80012c6:	f043 0302 	orr.w	r3, r3, #2
 80012ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80012cc:	4b57      	ldr	r3, [pc, #348]	@ (800142c <HAL_ADC_MspInit+0x270>)
 80012ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d0:	f003 0302 	and.w	r3, r3, #2
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ia_R_Pin|ib_R_Pin;
 80012d8:	23c0      	movs	r3, #192	@ 0xc0
 80012da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012dc:	2303      	movs	r3, #3
 80012de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012e8:	4619      	mov	r1, r3
 80012ea:	4851      	ldr	r0, [pc, #324]	@ (8001430 <HAL_ADC_MspInit+0x274>)
 80012ec:	f002 fe8a 	bl	8004004 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ic_R_Pin|VDC_R_Pin;
 80012f0:	2303      	movs	r3, #3
 80012f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012f4:	2303      	movs	r3, #3
 80012f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001300:	4619      	mov	r1, r3
 8001302:	484f      	ldr	r0, [pc, #316]	@ (8001440 <HAL_ADC_MspInit+0x284>)
 8001304:	f002 fe7e 	bl	8004004 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8001308:	4b4e      	ldr	r3, [pc, #312]	@ (8001444 <HAL_ADC_MspInit+0x288>)
 800130a:	4a4f      	ldr	r2, [pc, #316]	@ (8001448 <HAL_ADC_MspInit+0x28c>)
 800130c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800130e:	4b4d      	ldr	r3, [pc, #308]	@ (8001444 <HAL_ADC_MspInit+0x288>)
 8001310:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001314:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001316:	4b4b      	ldr	r3, [pc, #300]	@ (8001444 <HAL_ADC_MspInit+0x288>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800131c:	4b49      	ldr	r3, [pc, #292]	@ (8001444 <HAL_ADC_MspInit+0x288>)
 800131e:	2200      	movs	r2, #0
 8001320:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001322:	4b48      	ldr	r3, [pc, #288]	@ (8001444 <HAL_ADC_MspInit+0x288>)
 8001324:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001328:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800132a:	4b46      	ldr	r3, [pc, #280]	@ (8001444 <HAL_ADC_MspInit+0x288>)
 800132c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001330:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001332:	4b44      	ldr	r3, [pc, #272]	@ (8001444 <HAL_ADC_MspInit+0x288>)
 8001334:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001338:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800133a:	4b42      	ldr	r3, [pc, #264]	@ (8001444 <HAL_ADC_MspInit+0x288>)
 800133c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001340:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001342:	4b40      	ldr	r3, [pc, #256]	@ (8001444 <HAL_ADC_MspInit+0x288>)
 8001344:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001348:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800134a:	4b3e      	ldr	r3, [pc, #248]	@ (8001444 <HAL_ADC_MspInit+0x288>)
 800134c:	2200      	movs	r2, #0
 800134e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001350:	483c      	ldr	r0, [pc, #240]	@ (8001444 <HAL_ADC_MspInit+0x288>)
 8001352:	f002 fadf 	bl	8003914 <HAL_DMA_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <HAL_ADC_MspInit+0x1a4>
      Error_Handler();
 800135c:	f000 fc38 	bl	8001bd0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a38      	ldr	r2, [pc, #224]	@ (8001444 <HAL_ADC_MspInit+0x288>)
 8001364:	639a      	str	r2, [r3, #56]	@ 0x38
 8001366:	4a37      	ldr	r2, [pc, #220]	@ (8001444 <HAL_ADC_MspInit+0x288>)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800136c:	e058      	b.n	8001420 <HAL_ADC_MspInit+0x264>
  else if(adcHandle->Instance==ADC3)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a36      	ldr	r2, [pc, #216]	@ (800144c <HAL_ADC_MspInit+0x290>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d153      	bne.n	8001420 <HAL_ADC_MspInit+0x264>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001378:	4b2c      	ldr	r3, [pc, #176]	@ (800142c <HAL_ADC_MspInit+0x270>)
 800137a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800137c:	4a2b      	ldr	r2, [pc, #172]	@ (800142c <HAL_ADC_MspInit+0x270>)
 800137e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001382:	6453      	str	r3, [r2, #68]	@ 0x44
 8001384:	4b29      	ldr	r3, [pc, #164]	@ (800142c <HAL_ADC_MspInit+0x270>)
 8001386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001388:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001390:	4b26      	ldr	r3, [pc, #152]	@ (800142c <HAL_ADC_MspInit+0x270>)
 8001392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001394:	4a25      	ldr	r2, [pc, #148]	@ (800142c <HAL_ADC_MspInit+0x270>)
 8001396:	f043 0304 	orr.w	r3, r3, #4
 800139a:	6313      	str	r3, [r2, #48]	@ 0x30
 800139c:	4b23      	ldr	r3, [pc, #140]	@ (800142c <HAL_ADC_MspInit+0x270>)
 800139e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	60bb      	str	r3, [r7, #8]
 80013a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Tinv_L_Pin|Tinv_R_Pin|Tmot_L_Pin|Tmot_R_Pin;
 80013a8:	230f      	movs	r3, #15
 80013aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ac:	2303      	movs	r3, #3
 80013ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013b8:	4619      	mov	r1, r3
 80013ba:	4825      	ldr	r0, [pc, #148]	@ (8001450 <HAL_ADC_MspInit+0x294>)
 80013bc:	f002 fe22 	bl	8004004 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 80013c0:	4b24      	ldr	r3, [pc, #144]	@ (8001454 <HAL_ADC_MspInit+0x298>)
 80013c2:	4a25      	ldr	r2, [pc, #148]	@ (8001458 <HAL_ADC_MspInit+0x29c>)
 80013c4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80013c6:	4b23      	ldr	r3, [pc, #140]	@ (8001454 <HAL_ADC_MspInit+0x298>)
 80013c8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80013cc:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013ce:	4b21      	ldr	r3, [pc, #132]	@ (8001454 <HAL_ADC_MspInit+0x298>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80013d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001454 <HAL_ADC_MspInit+0x298>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80013da:	4b1e      	ldr	r3, [pc, #120]	@ (8001454 <HAL_ADC_MspInit+0x298>)
 80013dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013e0:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001454 <HAL_ADC_MspInit+0x298>)
 80013e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80013e8:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001454 <HAL_ADC_MspInit+0x298>)
 80013ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013f0:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 80013f2:	4b18      	ldr	r3, [pc, #96]	@ (8001454 <HAL_ADC_MspInit+0x298>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80013f8:	4b16      	ldr	r3, [pc, #88]	@ (8001454 <HAL_ADC_MspInit+0x298>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013fe:	4b15      	ldr	r3, [pc, #84]	@ (8001454 <HAL_ADC_MspInit+0x298>)
 8001400:	2200      	movs	r2, #0
 8001402:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001404:	4813      	ldr	r0, [pc, #76]	@ (8001454 <HAL_ADC_MspInit+0x298>)
 8001406:	f002 fa85 	bl	8003914 <HAL_DMA_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <HAL_ADC_MspInit+0x258>
      Error_Handler();
 8001410:	f000 fbde 	bl	8001bd0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4a0f      	ldr	r2, [pc, #60]	@ (8001454 <HAL_ADC_MspInit+0x298>)
 8001418:	639a      	str	r2, [r3, #56]	@ 0x38
 800141a:	4a0e      	ldr	r2, [pc, #56]	@ (8001454 <HAL_ADC_MspInit+0x298>)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001420:	bf00      	nop
 8001422:	3738      	adds	r7, #56	@ 0x38
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40012000 	.word	0x40012000
 800142c:	40023800 	.word	0x40023800
 8001430:	40020000 	.word	0x40020000
 8001434:	20000260 	.word	0x20000260
 8001438:	40026410 	.word	0x40026410
 800143c:	40012100 	.word	0x40012100
 8001440:	40020400 	.word	0x40020400
 8001444:	200002c0 	.word	0x200002c0
 8001448:	40026440 	.word	0x40026440
 800144c:	40012200 	.word	0x40012200
 8001450:	40020800 	.word	0x40020800
 8001454:	20000320 	.word	0x20000320
 8001458:	40026428 	.word	0x40026428

0800145c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001460:	4b17      	ldr	r3, [pc, #92]	@ (80014c0 <MX_CAN1_Init+0x64>)
 8001462:	4a18      	ldr	r2, [pc, #96]	@ (80014c4 <MX_CAN1_Init+0x68>)
 8001464:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 27;
 8001466:	4b16      	ldr	r3, [pc, #88]	@ (80014c0 <MX_CAN1_Init+0x64>)
 8001468:	221b      	movs	r2, #27
 800146a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800146c:	4b14      	ldr	r3, [pc, #80]	@ (80014c0 <MX_CAN1_Init+0x64>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001472:	4b13      	ldr	r3, [pc, #76]	@ (80014c0 <MX_CAN1_Init+0x64>)
 8001474:	2200      	movs	r2, #0
 8001476:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001478:	4b11      	ldr	r3, [pc, #68]	@ (80014c0 <MX_CAN1_Init+0x64>)
 800147a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800147e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001480:	4b0f      	ldr	r3, [pc, #60]	@ (80014c0 <MX_CAN1_Init+0x64>)
 8001482:	2200      	movs	r2, #0
 8001484:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001486:	4b0e      	ldr	r3, [pc, #56]	@ (80014c0 <MX_CAN1_Init+0x64>)
 8001488:	2200      	movs	r2, #0
 800148a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800148c:	4b0c      	ldr	r3, [pc, #48]	@ (80014c0 <MX_CAN1_Init+0x64>)
 800148e:	2200      	movs	r2, #0
 8001490:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001492:	4b0b      	ldr	r3, [pc, #44]	@ (80014c0 <MX_CAN1_Init+0x64>)
 8001494:	2200      	movs	r2, #0
 8001496:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001498:	4b09      	ldr	r3, [pc, #36]	@ (80014c0 <MX_CAN1_Init+0x64>)
 800149a:	2200      	movs	r2, #0
 800149c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800149e:	4b08      	ldr	r3, [pc, #32]	@ (80014c0 <MX_CAN1_Init+0x64>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80014a4:	4b06      	ldr	r3, [pc, #24]	@ (80014c0 <MX_CAN1_Init+0x64>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80014aa:	4805      	ldr	r0, [pc, #20]	@ (80014c0 <MX_CAN1_Init+0x64>)
 80014ac:	f001 fd0e 	bl	8002ecc <HAL_CAN_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80014b6:	f000 fb8b 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000380 	.word	0x20000380
 80014c4:	40006400 	.word	0x40006400

080014c8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	@ 0x28
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001554 <HAL_CAN_MspInit+0x8c>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d12f      	bne.n	800154a <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80014ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001558 <HAL_CAN_MspInit+0x90>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ee:	4a1a      	ldr	r2, [pc, #104]	@ (8001558 <HAL_CAN_MspInit+0x90>)
 80014f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014f6:	4b18      	ldr	r3, [pc, #96]	@ (8001558 <HAL_CAN_MspInit+0x90>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014fe:	613b      	str	r3, [r7, #16]
 8001500:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001502:	4b15      	ldr	r3, [pc, #84]	@ (8001558 <HAL_CAN_MspInit+0x90>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	4a14      	ldr	r2, [pc, #80]	@ (8001558 <HAL_CAN_MspInit+0x90>)
 8001508:	f043 0308 	orr.w	r3, r3, #8
 800150c:	6313      	str	r3, [r2, #48]	@ 0x30
 800150e:	4b12      	ldr	r3, [pc, #72]	@ (8001558 <HAL_CAN_MspInit+0x90>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	f003 0308 	and.w	r3, r3, #8
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800151a:	2303      	movs	r3, #3
 800151c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	2302      	movs	r3, #2
 8001520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001526:	2303      	movs	r3, #3
 8001528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800152a:	2309      	movs	r3, #9
 800152c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	4619      	mov	r1, r3
 8001534:	4809      	ldr	r0, [pc, #36]	@ (800155c <HAL_CAN_MspInit+0x94>)
 8001536:	f002 fd65 	bl	8004004 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2100      	movs	r1, #0
 800153e:	2014      	movs	r0, #20
 8001540:	f002 f8d3 	bl	80036ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001544:	2014      	movs	r0, #20
 8001546:	f002 f8ec 	bl	8003722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800154a:	bf00      	nop
 800154c:	3728      	adds	r7, #40	@ 0x28
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40006400 	.word	0x40006400
 8001558:	40023800 	.word	0x40023800
 800155c:	40020c00 	.word	0x40020c00

08001560 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001566:	463b      	mov	r3, r7
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800156e:	4b0f      	ldr	r3, [pc, #60]	@ (80015ac <MX_DAC_Init+0x4c>)
 8001570:	4a0f      	ldr	r2, [pc, #60]	@ (80015b0 <MX_DAC_Init+0x50>)
 8001572:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001574:	480d      	ldr	r0, [pc, #52]	@ (80015ac <MX_DAC_Init+0x4c>)
 8001576:	f002 f8ee 	bl	8003756 <HAL_DAC_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001580:	f000 fb26 	bl	8001bd0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001584:	2300      	movs	r3, #0
 8001586:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001588:	2300      	movs	r3, #0
 800158a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800158c:	463b      	mov	r3, r7
 800158e:	2200      	movs	r2, #0
 8001590:	4619      	mov	r1, r3
 8001592:	4806      	ldr	r0, [pc, #24]	@ (80015ac <MX_DAC_Init+0x4c>)
 8001594:	f002 f965 	bl	8003862 <HAL_DAC_ConfigChannel>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800159e:	f000 fb17 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	200003a8 	.word	0x200003a8
 80015b0:	40007400 	.word	0x40007400

080015b4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	@ 0x28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a19      	ldr	r2, [pc, #100]	@ (8001638 <HAL_DAC_MspInit+0x84>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d12b      	bne.n	800162e <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80015d6:	4b19      	ldr	r3, [pc, #100]	@ (800163c <HAL_DAC_MspInit+0x88>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015da:	4a18      	ldr	r2, [pc, #96]	@ (800163c <HAL_DAC_MspInit+0x88>)
 80015dc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80015e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80015e2:	4b16      	ldr	r3, [pc, #88]	@ (800163c <HAL_DAC_MspInit+0x88>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	4b13      	ldr	r3, [pc, #76]	@ (800163c <HAL_DAC_MspInit+0x88>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	4a12      	ldr	r2, [pc, #72]	@ (800163c <HAL_DAC_MspInit+0x88>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fa:	4b10      	ldr	r3, [pc, #64]	@ (800163c <HAL_DAC_MspInit+0x88>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = DAC_Pin;
 8001606:	2310      	movs	r3, #16
 8001608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800160a:	2303      	movs	r3, #3
 800160c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC_GPIO_Port, &GPIO_InitStruct);
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	4619      	mov	r1, r3
 8001618:	4809      	ldr	r0, [pc, #36]	@ (8001640 <HAL_DAC_MspInit+0x8c>)
 800161a:	f002 fcf3 	bl	8004004 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800161e:	2200      	movs	r2, #0
 8001620:	2100      	movs	r1, #0
 8001622:	2036      	movs	r0, #54	@ 0x36
 8001624:	f002 f861 	bl	80036ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001628:	2036      	movs	r0, #54	@ 0x36
 800162a:	f002 f87a 	bl	8003722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800162e:	bf00      	nop
 8001630:	3728      	adds	r7, #40	@ 0x28
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40007400 	.word	0x40007400
 800163c:	40023800 	.word	0x40023800
 8001640:	40020000 	.word	0x40020000

08001644 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800164a:	4b14      	ldr	r3, [pc, #80]	@ (800169c <MX_DMA_Init+0x58>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164e:	4a13      	ldr	r2, [pc, #76]	@ (800169c <MX_DMA_Init+0x58>)
 8001650:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001654:	6313      	str	r3, [r2, #48]	@ 0x30
 8001656:	4b11      	ldr	r3, [pc, #68]	@ (800169c <MX_DMA_Init+0x58>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800165e:	607b      	str	r3, [r7, #4]
 8001660:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	2100      	movs	r1, #0
 8001666:	2038      	movs	r0, #56	@ 0x38
 8001668:	f002 f83f 	bl	80036ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800166c:	2038      	movs	r0, #56	@ 0x38
 800166e:	f002 f858 	bl	8003722 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001672:	2200      	movs	r2, #0
 8001674:	2100      	movs	r1, #0
 8001676:	2039      	movs	r0, #57	@ 0x39
 8001678:	f002 f837 	bl	80036ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800167c:	2039      	movs	r0, #57	@ 0x39
 800167e:	f002 f850 	bl	8003722 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001682:	2200      	movs	r2, #0
 8001684:	2100      	movs	r1, #0
 8001686:	203a      	movs	r0, #58	@ 0x3a
 8001688:	f002 f82f 	bl	80036ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800168c:	203a      	movs	r0, #58	@ 0x3a
 800168e:	f002 f848 	bl	8003722 <HAL_NVIC_EnableIRQ>

}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40023800 	.word	0x40023800

080016a0 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08c      	sub	sp, #48	@ 0x30
 80016a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a6:	f107 031c 	add.w	r3, r7, #28
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
 80016b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016b6:	4b87      	ldr	r3, [pc, #540]	@ (80018d4 <MX_GPIO_Init+0x234>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	4a86      	ldr	r2, [pc, #536]	@ (80018d4 <MX_GPIO_Init+0x234>)
 80016bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016c2:	4b84      	ldr	r3, [pc, #528]	@ (80018d4 <MX_GPIO_Init+0x234>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016ca:	61bb      	str	r3, [r7, #24]
 80016cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ce:	4b81      	ldr	r3, [pc, #516]	@ (80018d4 <MX_GPIO_Init+0x234>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d2:	4a80      	ldr	r2, [pc, #512]	@ (80018d4 <MX_GPIO_Init+0x234>)
 80016d4:	f043 0304 	orr.w	r3, r3, #4
 80016d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016da:	4b7e      	ldr	r3, [pc, #504]	@ (80018d4 <MX_GPIO_Init+0x234>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016de:	f003 0304 	and.w	r3, r3, #4
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e6:	4b7b      	ldr	r3, [pc, #492]	@ (80018d4 <MX_GPIO_Init+0x234>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	4a7a      	ldr	r2, [pc, #488]	@ (80018d4 <MX_GPIO_Init+0x234>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f2:	4b78      	ldr	r3, [pc, #480]	@ (80018d4 <MX_GPIO_Init+0x234>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fe:	4b75      	ldr	r3, [pc, #468]	@ (80018d4 <MX_GPIO_Init+0x234>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001702:	4a74      	ldr	r2, [pc, #464]	@ (80018d4 <MX_GPIO_Init+0x234>)
 8001704:	f043 0302 	orr.w	r3, r3, #2
 8001708:	6313      	str	r3, [r2, #48]	@ 0x30
 800170a:	4b72      	ldr	r3, [pc, #456]	@ (80018d4 <MX_GPIO_Init+0x234>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001716:	4b6f      	ldr	r3, [pc, #444]	@ (80018d4 <MX_GPIO_Init+0x234>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171a:	4a6e      	ldr	r2, [pc, #440]	@ (80018d4 <MX_GPIO_Init+0x234>)
 800171c:	f043 0310 	orr.w	r3, r3, #16
 8001720:	6313      	str	r3, [r2, #48]	@ 0x30
 8001722:	4b6c      	ldr	r3, [pc, #432]	@ (80018d4 <MX_GPIO_Init+0x234>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	f003 0310 	and.w	r3, r3, #16
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800172e:	4b69      	ldr	r3, [pc, #420]	@ (80018d4 <MX_GPIO_Init+0x234>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	4a68      	ldr	r2, [pc, #416]	@ (80018d4 <MX_GPIO_Init+0x234>)
 8001734:	f043 0308 	orr.w	r3, r3, #8
 8001738:	6313      	str	r3, [r2, #48]	@ 0x30
 800173a:	4b66      	ldr	r3, [pc, #408]	@ (80018d4 <MX_GPIO_Init+0x234>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_R_GPIO_Port, ENABLE_R_Pin, GPIO_PIN_RESET);
 8001746:	2200      	movs	r2, #0
 8001748:	2104      	movs	r1, #4
 800174a:	4863      	ldr	r0, [pc, #396]	@ (80018d8 <MX_GPIO_Init+0x238>)
 800174c:	f002 fe1e 	bl	800438c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_L_GPIO_Port, ENABLE_L_Pin, GPIO_PIN_RESET);
 8001750:	2200      	movs	r2, #0
 8001752:	2180      	movs	r1, #128	@ 0x80
 8001754:	4861      	ldr	r0, [pc, #388]	@ (80018dc <MX_GPIO_Init+0x23c>)
 8001756:	f002 fe19 	bl	800438c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_LEFT_Pin|LED_RIGHT_Pin|LED_ERR_Pin, GPIO_PIN_RESET);
 800175a:	2200      	movs	r2, #0
 800175c:	2170      	movs	r1, #112	@ 0x70
 800175e:	4860      	ldr	r0, [pc, #384]	@ (80018e0 <MX_GPIO_Init+0x240>)
 8001760:	f002 fe14 	bl	800438c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SC_det_Pin;
 8001764:	2310      	movs	r3, #16
 8001766:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001768:	2300      	movs	r3, #0
 800176a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SC_det_GPIO_Port, &GPIO_InitStruct);
 8001770:	f107 031c 	add.w	r3, r7, #28
 8001774:	4619      	mov	r1, r3
 8001776:	485b      	ldr	r0, [pc, #364]	@ (80018e4 <MX_GPIO_Init+0x244>)
 8001778:	f002 fc44 	bl	8004004 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_R_Pin;
 800177c:	2304      	movs	r3, #4
 800177e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001780:	2301      	movs	r3, #1
 8001782:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001788:	2300      	movs	r3, #0
 800178a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ENABLE_R_GPIO_Port, &GPIO_InitStruct);
 800178c:	f107 031c 	add.w	r3, r7, #28
 8001790:	4619      	mov	r1, r3
 8001792:	4851      	ldr	r0, [pc, #324]	@ (80018d8 <MX_GPIO_Init+0x238>)
 8001794:	f002 fc36 	bl	8004004 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_L_Pin;
 8001798:	2380      	movs	r3, #128	@ 0x80
 800179a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179c:	2301      	movs	r3, #1
 800179e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a4:	2300      	movs	r3, #0
 80017a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ENABLE_L_GPIO_Port, &GPIO_InitStruct);
 80017a8:	f107 031c 	add.w	r3, r7, #28
 80017ac:	4619      	mov	r1, r3
 80017ae:	484b      	ldr	r0, [pc, #300]	@ (80018dc <MX_GPIO_Init+0x23c>)
 80017b0:	f002 fc28 	bl	8004004 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = WRN_L_Pin|WRN_R_Pin;
 80017b4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80017b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ba:	2300      	movs	r3, #0
 80017bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017c2:	f107 031c 	add.w	r3, r7, #28
 80017c6:	4619      	mov	r1, r3
 80017c8:	4844      	ldr	r0, [pc, #272]	@ (80018dc <MX_GPIO_Init+0x23c>)
 80017ca:	f002 fc1b 	bl	8004004 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Z_R_Pin;
 80017ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80017d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017d4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80017d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Z_R_GPIO_Port, &GPIO_InitStruct);
 80017de:	f107 031c 	add.w	r3, r7, #28
 80017e2:	4619      	mov	r1, r3
 80017e4:	483c      	ldr	r0, [pc, #240]	@ (80018d8 <MX_GPIO_Init+0x238>)
 80017e6:	f002 fc0d 	bl	8004004 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Z_L_Pin;
 80017ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80017ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017f0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80017f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Z_L_GPIO_Port, &GPIO_InitStruct);
 80017fa:	f107 031c 	add.w	r3, r7, #28
 80017fe:	4619      	mov	r1, r3
 8001800:	4837      	ldr	r0, [pc, #220]	@ (80018e0 <MX_GPIO_Init+0x240>)
 8001802:	f002 fbff 	bl	8004004 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIP_R_Pin;
 8001806:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800180a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800180c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TRIP_R_GPIO_Port, &GPIO_InitStruct);
 8001816:	f107 031c 	add.w	r3, r7, #28
 800181a:	4619      	mov	r1, r3
 800181c:	4831      	ldr	r0, [pc, #196]	@ (80018e4 <MX_GPIO_Init+0x244>)
 800181e:	f002 fbf1 	bl	8004004 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIP_L_Pin;
 8001822:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001828:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800182c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TRIP_L_GPIO_Port, &GPIO_InitStruct);
 8001832:	f107 031c 	add.w	r3, r7, #28
 8001836:	4619      	mov	r1, r3
 8001838:	482b      	ldr	r0, [pc, #172]	@ (80018e8 <MX_GPIO_Init+0x248>)
 800183a:	f002 fbe3 	bl	8004004 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800183e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001844:	2300      	movs	r3, #0
 8001846:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184c:	f107 031c 	add.w	r3, r7, #28
 8001850:	4619      	mov	r1, r3
 8001852:	4825      	ldr	r0, [pc, #148]	@ (80018e8 <MX_GPIO_Init+0x248>)
 8001854:	f002 fbd6 	bl	8004004 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001858:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800185c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185e:	2302      	movs	r3, #2
 8001860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001866:	2303      	movs	r3, #3
 8001868:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800186a:	230a      	movs	r3, #10
 800186c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186e:	f107 031c 	add.w	r3, r7, #28
 8001872:	4619      	mov	r1, r3
 8001874:	481c      	ldr	r0, [pc, #112]	@ (80018e8 <MX_GPIO_Init+0x248>)
 8001876:	f002 fbc5 	bl	8004004 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIR_Pin;
 800187a:	2308      	movs	r3, #8
 800187c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800187e:	2300      	movs	r3, #0
 8001880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 8001886:	f107 031c 	add.w	r3, r7, #28
 800188a:	4619      	mov	r1, r3
 800188c:	4814      	ldr	r0, [pc, #80]	@ (80018e0 <MX_GPIO_Init+0x240>)
 800188e:	f002 fbb9 	bl	8004004 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LED_LEFT_Pin|LED_RIGHT_Pin;
 8001892:	2330      	movs	r3, #48	@ 0x30
 8001894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001896:	2301      	movs	r3, #1
 8001898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189e:	2300      	movs	r3, #0
 80018a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018a2:	f107 031c 	add.w	r3, r7, #28
 80018a6:	4619      	mov	r1, r3
 80018a8:	480d      	ldr	r0, [pc, #52]	@ (80018e0 <MX_GPIO_Init+0x240>)
 80018aa:	f002 fbab 	bl	8004004 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_ERR_Pin;
 80018ae:	2340      	movs	r3, #64	@ 0x40
 80018b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b2:	2301      	movs	r3, #1
 80018b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018b6:	2302      	movs	r3, #2
 80018b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ba:	2300      	movs	r3, #0
 80018bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_ERR_GPIO_Port, &GPIO_InitStruct);
 80018be:	f107 031c 	add.w	r3, r7, #28
 80018c2:	4619      	mov	r1, r3
 80018c4:	4806      	ldr	r0, [pc, #24]	@ (80018e0 <MX_GPIO_Init+0x240>)
 80018c6:	f002 fb9d 	bl	8004004 <HAL_GPIO_Init>

}
 80018ca:	bf00      	nop
 80018cc:	3730      	adds	r7, #48	@ 0x30
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40020400 	.word	0x40020400
 80018dc:	40021000 	.word	0x40021000
 80018e0:	40020c00 	.word	0x40020c00
 80018e4:	40020800 	.word	0x40020800
 80018e8:	40020000 	.word	0x40020000

080018ec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001960 <MX_I2C1_Init+0x74>)
 80018f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001964 <MX_I2C1_Init+0x78>)
 80018f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80018f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001960 <MX_I2C1_Init+0x74>)
 80018f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001968 <MX_I2C1_Init+0x7c>)
 80018fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80018fc:	4b18      	ldr	r3, [pc, #96]	@ (8001960 <MX_I2C1_Init+0x74>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001902:	4b17      	ldr	r3, [pc, #92]	@ (8001960 <MX_I2C1_Init+0x74>)
 8001904:	2201      	movs	r2, #1
 8001906:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001908:	4b15      	ldr	r3, [pc, #84]	@ (8001960 <MX_I2C1_Init+0x74>)
 800190a:	2200      	movs	r2, #0
 800190c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800190e:	4b14      	ldr	r3, [pc, #80]	@ (8001960 <MX_I2C1_Init+0x74>)
 8001910:	2200      	movs	r2, #0
 8001912:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001914:	4b12      	ldr	r3, [pc, #72]	@ (8001960 <MX_I2C1_Init+0x74>)
 8001916:	2200      	movs	r2, #0
 8001918:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800191a:	4b11      	ldr	r3, [pc, #68]	@ (8001960 <MX_I2C1_Init+0x74>)
 800191c:	2200      	movs	r2, #0
 800191e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001920:	4b0f      	ldr	r3, [pc, #60]	@ (8001960 <MX_I2C1_Init+0x74>)
 8001922:	2200      	movs	r2, #0
 8001924:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001926:	480e      	ldr	r0, [pc, #56]	@ (8001960 <MX_I2C1_Init+0x74>)
 8001928:	f002 fd4a 	bl	80043c0 <HAL_I2C_Init>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001932:	f000 f94d 	bl	8001bd0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001936:	2100      	movs	r1, #0
 8001938:	4809      	ldr	r0, [pc, #36]	@ (8001960 <MX_I2C1_Init+0x74>)
 800193a:	f002 fdd1 	bl	80044e0 <HAL_I2CEx_ConfigAnalogFilter>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001944:	f000 f944 	bl	8001bd0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001948:	2100      	movs	r1, #0
 800194a:	4805      	ldr	r0, [pc, #20]	@ (8001960 <MX_I2C1_Init+0x74>)
 800194c:	f002 fe13 	bl	8004576 <HAL_I2CEx_ConfigDigitalFilter>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001956:	f000 f93b 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	200003bc 	.word	0x200003bc
 8001964:	40005400 	.word	0x40005400
 8001968:	20404768 	.word	0x20404768

0800196c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b0ae      	sub	sp, #184	@ 0xb8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001984:	f107 0314 	add.w	r3, r7, #20
 8001988:	2290      	movs	r2, #144	@ 0x90
 800198a:	2100      	movs	r1, #0
 800198c:	4618      	mov	r0, r3
 800198e:	f005 fb31 	bl	8006ff4 <memset>
  if(i2cHandle->Instance==I2C1)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a21      	ldr	r2, [pc, #132]	@ (8001a1c <HAL_I2C_MspInit+0xb0>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d13b      	bne.n	8001a14 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800199c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80019a0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80019a2:	2300      	movs	r3, #0
 80019a4:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019a6:	f107 0314 	add.w	r3, r7, #20
 80019aa:	4618      	mov	r0, r3
 80019ac:	f003 fae0 	bl	8004f70 <HAL_RCCEx_PeriphCLKConfig>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80019b6:	f000 f90b 	bl	8001bd0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ba:	4b19      	ldr	r3, [pc, #100]	@ (8001a20 <HAL_I2C_MspInit+0xb4>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	4a18      	ldr	r2, [pc, #96]	@ (8001a20 <HAL_I2C_MspInit+0xb4>)
 80019c0:	f043 0302 	orr.w	r3, r3, #2
 80019c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c6:	4b16      	ldr	r3, [pc, #88]	@ (8001a20 <HAL_I2C_MspInit+0xb4>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	613b      	str	r3, [r7, #16]
 80019d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019d2:	23c0      	movs	r3, #192	@ 0xc0
 80019d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019d8:	2312      	movs	r3, #18
 80019da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e4:	2303      	movs	r3, #3
 80019e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019ea:	2304      	movs	r3, #4
 80019ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80019f4:	4619      	mov	r1, r3
 80019f6:	480b      	ldr	r0, [pc, #44]	@ (8001a24 <HAL_I2C_MspInit+0xb8>)
 80019f8:	f002 fb04 	bl	8004004 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019fc:	4b08      	ldr	r3, [pc, #32]	@ (8001a20 <HAL_I2C_MspInit+0xb4>)
 80019fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a00:	4a07      	ldr	r2, [pc, #28]	@ (8001a20 <HAL_I2C_MspInit+0xb4>)
 8001a02:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a06:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a08:	4b05      	ldr	r3, [pc, #20]	@ (8001a20 <HAL_I2C_MspInit+0xb4>)
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001a14:	bf00      	nop
 8001a16:	37b8      	adds	r7, #184	@ 0xb8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40005400 	.word	0x40005400
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40020400 	.word	0x40020400

08001a28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a2e:	f000 fdc2 	bl	80025b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a32:	f000 f85f 	bl	8001af4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a36:	f7ff fe33 	bl	80016a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a3a:	f7ff fe03 	bl	8001644 <MX_DMA_Init>
  MX_ADC1_Init();
 8001a3e:	f7ff fa73 	bl	8000f28 <MX_ADC1_Init>
  MX_CAN1_Init();
 8001a42:	f7ff fd0b 	bl	800145c <MX_CAN1_Init>
  MX_USB_OTG_FS_USB_Init();
 8001a46:	f000 fd85 	bl	8002554 <MX_USB_OTG_FS_USB_Init>
  MX_ADC2_Init();
 8001a4a:	f7ff fae9 	bl	8001020 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001a4e:	f7ff fb63 	bl	8001118 <MX_ADC3_Init>
  MX_DAC_Init();
 8001a52:	f7ff fd85 	bl	8001560 <MX_DAC_Init>
  MX_I2C1_Init();
 8001a56:	f7ff ff49 	bl	80018ec <MX_I2C1_Init>
  MX_TIM1_Init();
 8001a5a:	f000 f969 	bl	8001d30 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001a5e:	f000 fb25 	bl	80020ac <MX_TIM8_Init>
  MX_TIM2_Init();
 8001a62:	f000 fa2f 	bl	8001ec4 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001a66:	f000 fa8b 	bl	8001f80 <MX_TIM4_Init>
  MX_TIM6_Init();
 8001a6a:	f000 fae9 	bl	8002040 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  // Initialize inverters
  initialize_inverter(&invLeft, &ledLeft, ENABLE_L_GPIO_Port, ENABLE_L_Pin, &htim1, &hadc2);
 8001a6e:	4b14      	ldr	r3, [pc, #80]	@ (8001ac0 <main+0x98>)
 8001a70:	9301      	str	r3, [sp, #4]
 8001a72:	4b14      	ldr	r3, [pc, #80]	@ (8001ac4 <main+0x9c>)
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	2380      	movs	r3, #128	@ 0x80
 8001a78:	4a13      	ldr	r2, [pc, #76]	@ (8001ac8 <main+0xa0>)
 8001a7a:	4914      	ldr	r1, [pc, #80]	@ (8001acc <main+0xa4>)
 8001a7c:	4814      	ldr	r0, [pc, #80]	@ (8001ad0 <main+0xa8>)
 8001a7e:	f7ff f807 	bl	8000a90 <initialize_inverter>
  initialize_inverter(&invRight, &ledRight, ENABLE_R_GPIO_Port, ENABLE_R_Pin, &htim8, &hadc1);
 8001a82:	4b14      	ldr	r3, [pc, #80]	@ (8001ad4 <main+0xac>)
 8001a84:	9301      	str	r3, [sp, #4]
 8001a86:	4b14      	ldr	r3, [pc, #80]	@ (8001ad8 <main+0xb0>)
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	2304      	movs	r3, #4
 8001a8c:	4a13      	ldr	r2, [pc, #76]	@ (8001adc <main+0xb4>)
 8001a8e:	4914      	ldr	r1, [pc, #80]	@ (8001ae0 <main+0xb8>)
 8001a90:	4814      	ldr	r0, [pc, #80]	@ (8001ae4 <main+0xbc>)
 8001a92:	f7fe fffd 	bl	8000a90 <initialize_inverter>

  HAL_ADC_Start_DMA(&hadc2, (uint32_t *) ADC_raw_L,4); // Starts ADC DMA
 8001a96:	2204      	movs	r2, #4
 8001a98:	4913      	ldr	r1, [pc, #76]	@ (8001ae8 <main+0xc0>)
 8001a9a:	4809      	ldr	r0, [pc, #36]	@ (8001ac0 <main+0x98>)
 8001a9c:	f000 fe2c 	bl	80026f8 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) ADC_raw_R,4); // Starts ADC DMA
 8001aa0:	2204      	movs	r2, #4
 8001aa2:	4912      	ldr	r1, [pc, #72]	@ (8001aec <main+0xc4>)
 8001aa4:	480b      	ldr	r0, [pc, #44]	@ (8001ad4 <main+0xac>)
 8001aa6:	f000 fe27 	bl	80026f8 <HAL_ADC_Start_DMA>

  // 1ms timer
  HAL_TIM_Base_Start_IT(&htim6);
 8001aaa:	4811      	ldr	r0, [pc, #68]	@ (8001af0 <main+0xc8>)
 8001aac:	f003 fee0 	bl	8005870 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

      // Run FSM for left inverter
	  eval_inv_FSM(&invLeft);
 8001ab0:	4807      	ldr	r0, [pc, #28]	@ (8001ad0 <main+0xa8>)
 8001ab2:	f7fe ff5b 	bl	800096c <eval_inv_FSM>

      // Run FSM for right inverter
	  eval_inv_FSM(&invRight);
 8001ab6:	480b      	ldr	r0, [pc, #44]	@ (8001ae4 <main+0xbc>)
 8001ab8:	f7fe ff58 	bl	800096c <eval_inv_FSM>
	  eval_inv_FSM(&invLeft);
 8001abc:	bf00      	nop
 8001abe:	e7f7      	b.n	8001ab0 <main+0x88>
 8001ac0:	200001d0 	.word	0x200001d0
 8001ac4:	20000410 	.word	0x20000410
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	20000000 	.word	0x20000000
 8001ad0:	200000a8 	.word	0x200000a8
 8001ad4:	20000188 	.word	0x20000188
 8001ad8:	20000540 	.word	0x20000540
 8001adc:	40020400 	.word	0x40020400
 8001ae0:	20000008 	.word	0x20000008
 8001ae4:	20000104 	.word	0x20000104
 8001ae8:	20000160 	.word	0x20000160
 8001aec:	20000170 	.word	0x20000170
 8001af0:	200004f4 	.word	0x200004f4

08001af4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b094      	sub	sp, #80	@ 0x50
 8001af8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001afa:	f107 031c 	add.w	r3, r7, #28
 8001afe:	2234      	movs	r2, #52	@ 0x34
 8001b00:	2100      	movs	r1, #0
 8001b02:	4618      	mov	r0, r3
 8001b04:	f005 fa76 	bl	8006ff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b08:	f107 0308 	add.w	r3, r7, #8
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b18:	4b2b      	ldr	r3, [pc, #172]	@ (8001bc8 <SystemClock_Config+0xd4>)
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1c:	4a2a      	ldr	r2, [pc, #168]	@ (8001bc8 <SystemClock_Config+0xd4>)
 8001b1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b22:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b24:	4b28      	ldr	r3, [pc, #160]	@ (8001bc8 <SystemClock_Config+0xd4>)
 8001b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b2c:	607b      	str	r3, [r7, #4]
 8001b2e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b30:	4b26      	ldr	r3, [pc, #152]	@ (8001bcc <SystemClock_Config+0xd8>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a25      	ldr	r2, [pc, #148]	@ (8001bcc <SystemClock_Config+0xd8>)
 8001b36:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	4b23      	ldr	r3, [pc, #140]	@ (8001bcc <SystemClock_Config+0xd8>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001b44:	603b      	str	r3, [r7, #0]
 8001b46:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b4c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b50:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b52:	2302      	movs	r3, #2
 8001b54:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b56:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 10;
 8001b5c:	230a      	movs	r3, #10
 8001b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001b60:	23d8      	movs	r3, #216	@ 0xd8
 8001b62:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b64:	2302      	movs	r3, #2
 8001b66:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001b68:	2309      	movs	r3, #9
 8001b6a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b70:	f107 031c 	add.w	r3, r7, #28
 8001b74:	4618      	mov	r0, r3
 8001b76:	f002 fd9b 	bl	80046b0 <HAL_RCC_OscConfig>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001b80:	f000 f826 	bl	8001bd0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001b84:	f002 fd44 	bl	8004610 <HAL_PWREx_EnableOverDrive>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001b8e:	f000 f81f 	bl	8001bd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b92:	230f      	movs	r3, #15
 8001b94:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b96:	2302      	movs	r3, #2
 8001b98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b9e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ba2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ba4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ba8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001baa:	f107 0308 	add.w	r3, r7, #8
 8001bae:	2107      	movs	r1, #7
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f003 f82b 	bl	8004c0c <HAL_RCC_ClockConfig>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001bbc:	f000 f808 	bl	8001bd0 <Error_Handler>
  }
}
 8001bc0:	bf00      	nop
 8001bc2:	3750      	adds	r7, #80	@ 0x50
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40007000 	.word	0x40007000

08001bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd4:	b672      	cpsid	i
}
 8001bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bd8:	bf00      	nop
 8001bda:	e7fd      	b.n	8001bd8 <Error_Handler+0x8>

08001bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001be2:	4b0f      	ldr	r3, [pc, #60]	@ (8001c20 <HAL_MspInit+0x44>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be6:	4a0e      	ldr	r2, [pc, #56]	@ (8001c20 <HAL_MspInit+0x44>)
 8001be8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bee:	4b0c      	ldr	r3, [pc, #48]	@ (8001c20 <HAL_MspInit+0x44>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bf6:	607b      	str	r3, [r7, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfa:	4b09      	ldr	r3, [pc, #36]	@ (8001c20 <HAL_MspInit+0x44>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bfe:	4a08      	ldr	r2, [pc, #32]	@ (8001c20 <HAL_MspInit+0x44>)
 8001c00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c04:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c06:	4b06      	ldr	r3, [pc, #24]	@ (8001c20 <HAL_MspInit+0x44>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c0e:	603b      	str	r3, [r7, #0]
 8001c10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40023800 	.word	0x40023800

08001c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c28:	bf00      	nop
 8001c2a:	e7fd      	b.n	8001c28 <NMI_Handler+0x4>

08001c2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c30:	bf00      	nop
 8001c32:	e7fd      	b.n	8001c30 <HardFault_Handler+0x4>

08001c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c38:	bf00      	nop
 8001c3a:	e7fd      	b.n	8001c38 <MemManage_Handler+0x4>

08001c3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c40:	bf00      	nop
 8001c42:	e7fd      	b.n	8001c40 <BusFault_Handler+0x4>

08001c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c48:	bf00      	nop
 8001c4a:	e7fd      	b.n	8001c48 <UsageFault_Handler+0x4>

08001c4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c7a:	f000 fcd9 	bl	8002630 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001c88:	4802      	ldr	r0, [pc, #8]	@ (8001c94 <CAN1_RX0_IRQHandler+0x10>)
 8001c8a:	f001 fa1a 	bl	80030c2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000380 	.word	0x20000380

08001c98 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c9c:	4803      	ldr	r0, [pc, #12]	@ (8001cac <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001c9e:	f003 ff78 	bl	8005b92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  tasks_20us_LEFT();
 8001ca2:	f7ff f8f1 	bl	8000e88 <tasks_20us_LEFT>
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000410 	.word	0x20000410

08001cb0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001cb4:	4804      	ldr	r0, [pc, #16]	@ (8001cc8 <TIM6_DAC_IRQHandler+0x18>)
 8001cb6:	f001 fd70 	bl	800379a <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8001cba:	4804      	ldr	r0, [pc, #16]	@ (8001ccc <TIM6_DAC_IRQHandler+0x1c>)
 8001cbc:	f003 ff69 	bl	8005b92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  tasks_1ms();
 8001cc0:	f7ff f8b6 	bl	8000e30 <tasks_1ms>
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001cc4:	bf00      	nop
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	200003a8 	.word	0x200003a8
 8001ccc:	200004f4 	.word	0x200004f4

08001cd0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001cd4:	4802      	ldr	r0, [pc, #8]	@ (8001ce0 <DMA2_Stream0_IRQHandler+0x10>)
 8001cd6:	f001 ff2b 	bl	8003b30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000260 	.word	0x20000260

08001ce4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001ce8:	4802      	ldr	r0, [pc, #8]	@ (8001cf4 <DMA2_Stream1_IRQHandler+0x10>)
 8001cea:	f001 ff21 	bl	8003b30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000320 	.word	0x20000320

08001cf8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001cfc:	4802      	ldr	r0, [pc, #8]	@ (8001d08 <DMA2_Stream2_IRQHandler+0x10>)
 8001cfe:	f001 ff17 	bl	8003b30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	200002c0 	.word	0x200002c0

08001d0c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d10:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <SystemInit+0x20>)
 8001d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d16:	4a05      	ldr	r2, [pc, #20]	@ (8001d2c <SystemInit+0x20>)
 8001d18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b09a      	sub	sp, #104	@ 0x68
 8001d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d36:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
 8001d40:	609a      	str	r2, [r3, #8]
 8001d42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d44:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d50:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	611a      	str	r2, [r3, #16]
 8001d60:	615a      	str	r2, [r3, #20]
 8001d62:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d64:	1d3b      	adds	r3, r7, #4
 8001d66:	222c      	movs	r2, #44	@ 0x2c
 8001d68:	2100      	movs	r1, #0
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f005 f942 	bl	8006ff4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d70:	4b52      	ldr	r3, [pc, #328]	@ (8001ebc <MX_TIM1_Init+0x18c>)
 8001d72:	4a53      	ldr	r2, [pc, #332]	@ (8001ec0 <MX_TIM1_Init+0x190>)
 8001d74:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d76:	4b51      	ldr	r3, [pc, #324]	@ (8001ebc <MX_TIM1_Init+0x18c>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001d7c:	4b4f      	ldr	r3, [pc, #316]	@ (8001ebc <MX_TIM1_Init+0x18c>)
 8001d7e:	2220      	movs	r2, #32
 8001d80:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = (216000000*TS)/2;
 8001d82:	4b4e      	ldr	r3, [pc, #312]	@ (8001ebc <MX_TIM1_Init+0x18c>)
 8001d84:	f44f 6207 	mov.w	r2, #2160	@ 0x870
 8001d88:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d8a:	4b4c      	ldr	r3, [pc, #304]	@ (8001ebc <MX_TIM1_Init+0x18c>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8001d90:	4b4a      	ldr	r3, [pc, #296]	@ (8001ebc <MX_TIM1_Init+0x18c>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d96:	4b49      	ldr	r3, [pc, #292]	@ (8001ebc <MX_TIM1_Init+0x18c>)
 8001d98:	2280      	movs	r2, #128	@ 0x80
 8001d9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d9c:	4847      	ldr	r0, [pc, #284]	@ (8001ebc <MX_TIM1_Init+0x18c>)
 8001d9e:	f003 fd0f 	bl	80057c0 <HAL_TIM_Base_Init>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001da8:	f7ff ff12 	bl	8001bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001db0:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001db2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001db6:	4619      	mov	r1, r3
 8001db8:	4840      	ldr	r0, [pc, #256]	@ (8001ebc <MX_TIM1_Init+0x18c>)
 8001dba:	f004 fa33 	bl	8006224 <HAL_TIM_ConfigClockSource>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001dc4:	f7ff ff04 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001dc8:	483c      	ldr	r0, [pc, #240]	@ (8001ebc <MX_TIM1_Init+0x18c>)
 8001dca:	f003 fe2a 	bl	8005a22 <HAL_TIM_PWM_Init>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001dd4:	f7ff fefc 	bl	8001bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001dd8:	2320      	movs	r3, #32
 8001dda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de0:	2300      	movs	r3, #0
 8001de2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001de4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001de8:	4619      	mov	r1, r3
 8001dea:	4834      	ldr	r0, [pc, #208]	@ (8001ebc <MX_TIM1_Init+0x18c>)
 8001dec:	f004 ffd8 	bl	8006da0 <HAL_TIMEx_MasterConfigSynchronization>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001df6:	f7ff feeb 	bl	8001bd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dfa:	2360      	movs	r3, #96	@ 0x60
 8001dfc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e02:	2300      	movs	r3, #0
 8001e04:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8001e06:	2308      	movs	r3, #8
 8001e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8001e12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e16:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e18:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4826      	ldr	r0, [pc, #152]	@ (8001ebc <MX_TIM1_Init+0x18c>)
 8001e22:	f004 f8eb 	bl	8005ffc <HAL_TIM_PWM_ConfigChannel>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001e2c:	f7ff fed0 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e30:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e34:	2204      	movs	r2, #4
 8001e36:	4619      	mov	r1, r3
 8001e38:	4820      	ldr	r0, [pc, #128]	@ (8001ebc <MX_TIM1_Init+0x18c>)
 8001e3a:	f004 f8df 	bl	8005ffc <HAL_TIM_PWM_ConfigChannel>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001e44:	f7ff fec4 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e48:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e4c:	2208      	movs	r2, #8
 8001e4e:	4619      	mov	r1, r3
 8001e50:	481a      	ldr	r0, [pc, #104]	@ (8001ebc <MX_TIM1_Init+0x18c>)
 8001e52:	f004 f8d3 	bl	8005ffc <HAL_TIM_PWM_ConfigChannel>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8001e5c:	f7ff feb8 	bl	8001bd0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001e60:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001e64:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001e66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e6a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 8001e6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e70:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = DT*216000000;
 8001e72:	2320      	movs	r3, #32
 8001e74:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e7e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8001e84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e88:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e8e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e94:	2300      	movs	r3, #0
 8001e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e98:	1d3b      	adds	r3, r7, #4
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4807      	ldr	r0, [pc, #28]	@ (8001ebc <MX_TIM1_Init+0x18c>)
 8001e9e:	f005 f80d 	bl	8006ebc <HAL_TIMEx_ConfigBreakDeadTime>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_TIM1_Init+0x17c>
  {
    Error_Handler();
 8001ea8:	f7ff fe92 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001eac:	4803      	ldr	r0, [pc, #12]	@ (8001ebc <MX_TIM1_Init+0x18c>)
 8001eae:	f000 fab5 	bl	800241c <HAL_TIM_MspPostInit>

}
 8001eb2:	bf00      	nop
 8001eb4:	3768      	adds	r7, #104	@ 0x68
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000410 	.word	0x20000410
 8001ec0:	40010000 	.word	0x40010000

08001ec4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b088      	sub	sp, #32
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eca:	f107 0314 	add.w	r3, r7, #20
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	605a      	str	r2, [r3, #4]
 8001ed4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ed6:	1d3b      	adds	r3, r7, #4
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ee2:	4b26      	ldr	r3, [pc, #152]	@ (8001f7c <MX_TIM2_Init+0xb8>)
 8001ee4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ee8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001eea:	4b24      	ldr	r3, [pc, #144]	@ (8001f7c <MX_TIM2_Init+0xb8>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef0:	4b22      	ldr	r3, [pc, #136]	@ (8001f7c <MX_TIM2_Init+0xb8>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001ef6:	4b21      	ldr	r3, [pc, #132]	@ (8001f7c <MX_TIM2_Init+0xb8>)
 8001ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8001efc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001efe:	4b1f      	ldr	r3, [pc, #124]	@ (8001f7c <MX_TIM2_Init+0xb8>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f04:	4b1d      	ldr	r3, [pc, #116]	@ (8001f7c <MX_TIM2_Init+0xb8>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001f0a:	481c      	ldr	r0, [pc, #112]	@ (8001f7c <MX_TIM2_Init+0xb8>)
 8001f0c:	f003 fdea 	bl	8005ae4 <HAL_TIM_IC_Init>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001f16:	f7ff fe5b 	bl	8001bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f22:	f107 0314 	add.w	r3, r7, #20
 8001f26:	4619      	mov	r1, r3
 8001f28:	4814      	ldr	r0, [pc, #80]	@ (8001f7c <MX_TIM2_Init+0xb8>)
 8001f2a:	f004 ff39 	bl	8006da0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001f34:	f7ff fe4c 	bl	8001bd0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001f40:	2300      	movs	r3, #0
 8001f42:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001f48:	1d3b      	adds	r3, r7, #4
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	480b      	ldr	r0, [pc, #44]	@ (8001f7c <MX_TIM2_Init+0xb8>)
 8001f50:	f003 ffb8 	bl	8005ec4 <HAL_TIM_IC_ConfigChannel>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001f5a:	f7ff fe39 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001f5e:	1d3b      	adds	r3, r7, #4
 8001f60:	2208      	movs	r2, #8
 8001f62:	4619      	mov	r1, r3
 8001f64:	4805      	ldr	r0, [pc, #20]	@ (8001f7c <MX_TIM2_Init+0xb8>)
 8001f66:	f003 ffad 	bl	8005ec4 <HAL_TIM_IC_ConfigChannel>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001f70:	f7ff fe2e 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f74:	bf00      	nop
 8001f76:	3720      	adds	r7, #32
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	2000045c 	.word	0x2000045c

08001f80 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b088      	sub	sp, #32
 8001f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f86:	f107 0314 	add.w	r3, r7, #20
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	605a      	str	r2, [r3, #4]
 8001f90:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001f92:	1d3b      	adds	r3, r7, #4
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f9e:	4b26      	ldr	r3, [pc, #152]	@ (8002038 <MX_TIM4_Init+0xb8>)
 8001fa0:	4a26      	ldr	r2, [pc, #152]	@ (800203c <MX_TIM4_Init+0xbc>)
 8001fa2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001fa4:	4b24      	ldr	r3, [pc, #144]	@ (8002038 <MX_TIM4_Init+0xb8>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001faa:	4b23      	ldr	r3, [pc, #140]	@ (8002038 <MX_TIM4_Init+0xb8>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001fb0:	4b21      	ldr	r3, [pc, #132]	@ (8002038 <MX_TIM4_Init+0xb8>)
 8001fb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fb6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fb8:	4b1f      	ldr	r3, [pc, #124]	@ (8002038 <MX_TIM4_Init+0xb8>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fbe:	4b1e      	ldr	r3, [pc, #120]	@ (8002038 <MX_TIM4_Init+0xb8>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001fc4:	481c      	ldr	r0, [pc, #112]	@ (8002038 <MX_TIM4_Init+0xb8>)
 8001fc6:	f003 fd8d 	bl	8005ae4 <HAL_TIM_IC_Init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001fd0:	f7ff fdfe 	bl	8001bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001fdc:	f107 0314 	add.w	r3, r7, #20
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4815      	ldr	r0, [pc, #84]	@ (8002038 <MX_TIM4_Init+0xb8>)
 8001fe4:	f004 fedc 	bl	8006da0 <HAL_TIMEx_MasterConfigSynchronization>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8001fee:	f7ff fdef 	bl	8001bd0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002002:	1d3b      	adds	r3, r7, #4
 8002004:	2200      	movs	r2, #0
 8002006:	4619      	mov	r1, r3
 8002008:	480b      	ldr	r0, [pc, #44]	@ (8002038 <MX_TIM4_Init+0xb8>)
 800200a:	f003 ff5b 	bl	8005ec4 <HAL_TIM_IC_ConfigChannel>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002014:	f7ff fddc 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002018:	1d3b      	adds	r3, r7, #4
 800201a:	2208      	movs	r2, #8
 800201c:	4619      	mov	r1, r3
 800201e:	4806      	ldr	r0, [pc, #24]	@ (8002038 <MX_TIM4_Init+0xb8>)
 8002020:	f003 ff50 	bl	8005ec4 <HAL_TIM_IC_ConfigChannel>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800202a:	f7ff fdd1 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800202e:	bf00      	nop
 8002030:	3720      	adds	r7, #32
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	200004a8 	.word	0x200004a8
 800203c:	40000800 	.word	0x40000800

08002040 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002046:	1d3b      	adds	r3, r7, #4
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002050:	4b14      	ldr	r3, [pc, #80]	@ (80020a4 <MX_TIM6_Init+0x64>)
 8002052:	4a15      	ldr	r2, [pc, #84]	@ (80020a8 <MX_TIM6_Init+0x68>)
 8002054:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1;
 8002056:	4b13      	ldr	r3, [pc, #76]	@ (80020a4 <MX_TIM6_Init+0x64>)
 8002058:	2201      	movs	r2, #1
 800205a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800205c:	4b11      	ldr	r3, [pc, #68]	@ (80020a4 <MX_TIM6_Init+0x64>)
 800205e:	2200      	movs	r2, #0
 8002060:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 53999;
 8002062:	4b10      	ldr	r3, [pc, #64]	@ (80020a4 <MX_TIM6_Init+0x64>)
 8002064:	f24d 22ef 	movw	r2, #53999	@ 0xd2ef
 8002068:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800206a:	4b0e      	ldr	r3, [pc, #56]	@ (80020a4 <MX_TIM6_Init+0x64>)
 800206c:	2280      	movs	r2, #128	@ 0x80
 800206e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002070:	480c      	ldr	r0, [pc, #48]	@ (80020a4 <MX_TIM6_Init+0x64>)
 8002072:	f003 fba5 	bl	80057c0 <HAL_TIM_Base_Init>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800207c:	f7ff fda8 	bl	8001bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002080:	2320      	movs	r3, #32
 8002082:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002084:	2300      	movs	r3, #0
 8002086:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002088:	1d3b      	adds	r3, r7, #4
 800208a:	4619      	mov	r1, r3
 800208c:	4805      	ldr	r0, [pc, #20]	@ (80020a4 <MX_TIM6_Init+0x64>)
 800208e:	f004 fe87 	bl	8006da0 <HAL_TIMEx_MasterConfigSynchronization>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002098:	f7ff fd9a 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800209c:	bf00      	nop
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	200004f4 	.word	0x200004f4
 80020a8:	40001000 	.word	0x40001000

080020ac <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b09a      	sub	sp, #104	@ 0x68
 80020b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020b2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	605a      	str	r2, [r3, #4]
 80020bc:	609a      	str	r2, [r3, #8]
 80020be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020c0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020cc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	609a      	str	r2, [r3, #8]
 80020d8:	60da      	str	r2, [r3, #12]
 80020da:	611a      	str	r2, [r3, #16]
 80020dc:	615a      	str	r2, [r3, #20]
 80020de:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020e0:	1d3b      	adds	r3, r7, #4
 80020e2:	222c      	movs	r2, #44	@ 0x2c
 80020e4:	2100      	movs	r1, #0
 80020e6:	4618      	mov	r0, r3
 80020e8:	f004 ff84 	bl	8006ff4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80020ec:	4b54      	ldr	r3, [pc, #336]	@ (8002240 <MX_TIM8_Init+0x194>)
 80020ee:	4a55      	ldr	r2, [pc, #340]	@ (8002244 <MX_TIM8_Init+0x198>)
 80020f0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80020f2:	4b53      	ldr	r3, [pc, #332]	@ (8002240 <MX_TIM8_Init+0x194>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f8:	4b51      	ldr	r3, [pc, #324]	@ (8002240 <MX_TIM8_Init+0x194>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80020fe:	4b50      	ldr	r3, [pc, #320]	@ (8002240 <MX_TIM8_Init+0x194>)
 8002100:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002104:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002106:	4b4e      	ldr	r3, [pc, #312]	@ (8002240 <MX_TIM8_Init+0x194>)
 8002108:	2200      	movs	r2, #0
 800210a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800210c:	4b4c      	ldr	r3, [pc, #304]	@ (8002240 <MX_TIM8_Init+0x194>)
 800210e:	2200      	movs	r2, #0
 8002110:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002112:	4b4b      	ldr	r3, [pc, #300]	@ (8002240 <MX_TIM8_Init+0x194>)
 8002114:	2200      	movs	r2, #0
 8002116:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002118:	4849      	ldr	r0, [pc, #292]	@ (8002240 <MX_TIM8_Init+0x194>)
 800211a:	f003 fb51 	bl	80057c0 <HAL_TIM_Base_Init>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8002124:	f7ff fd54 	bl	8001bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002128:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800212c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800212e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002132:	4619      	mov	r1, r3
 8002134:	4842      	ldr	r0, [pc, #264]	@ (8002240 <MX_TIM8_Init+0x194>)
 8002136:	f004 f875 	bl	8006224 <HAL_TIM_ConfigClockSource>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8002140:	f7ff fd46 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002144:	483e      	ldr	r0, [pc, #248]	@ (8002240 <MX_TIM8_Init+0x194>)
 8002146:	f003 fc6c 	bl	8005a22 <HAL_TIM_PWM_Init>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8002150:	f7ff fd3e 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8002154:	483a      	ldr	r0, [pc, #232]	@ (8002240 <MX_TIM8_Init+0x194>)
 8002156:	f003 fc03 	bl	8005960 <HAL_TIM_OC_Init>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_TIM8_Init+0xb8>
  {
    Error_Handler();
 8002160:	f7ff fd36 	bl	8001bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002164:	2300      	movs	r3, #0
 8002166:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002168:	2300      	movs	r3, #0
 800216a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800216c:	2300      	movs	r3, #0
 800216e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002170:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002174:	4619      	mov	r1, r3
 8002176:	4832      	ldr	r0, [pc, #200]	@ (8002240 <MX_TIM8_Init+0x194>)
 8002178:	f004 fe12 	bl	8006da0 <HAL_TIMEx_MasterConfigSynchronization>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_TIM8_Init+0xda>
  {
    Error_Handler();
 8002182:	f7ff fd25 	bl	8001bd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002186:	2360      	movs	r3, #96	@ 0x60
 8002188:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800218a:	2300      	movs	r3, #0
 800218c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800218e:	2300      	movs	r3, #0
 8002190:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002192:	2300      	movs	r3, #0
 8002194:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002196:	2300      	movs	r3, #0
 8002198:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800219a:	2300      	movs	r3, #0
 800219c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800219e:	2300      	movs	r3, #0
 80021a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021a2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80021a6:	2200      	movs	r2, #0
 80021a8:	4619      	mov	r1, r3
 80021aa:	4825      	ldr	r0, [pc, #148]	@ (8002240 <MX_TIM8_Init+0x194>)
 80021ac:	f003 ff26 	bl	8005ffc <HAL_TIM_PWM_ConfigChannel>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 80021b6:	f7ff fd0b 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021ba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80021be:	2204      	movs	r2, #4
 80021c0:	4619      	mov	r1, r3
 80021c2:	481f      	ldr	r0, [pc, #124]	@ (8002240 <MX_TIM8_Init+0x194>)
 80021c4:	f003 ff1a 	bl	8005ffc <HAL_TIM_PWM_ConfigChannel>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 80021ce:	f7ff fcff 	bl	8001bd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80021d2:	2300      	movs	r3, #0
 80021d4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021d6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80021da:	2208      	movs	r2, #8
 80021dc:	4619      	mov	r1, r3
 80021de:	4818      	ldr	r0, [pc, #96]	@ (8002240 <MX_TIM8_Init+0x194>)
 80021e0:	f003 fdf6 	bl	8005dd0 <HAL_TIM_OC_ConfigChannel>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80021ea:	f7ff fcf1 	bl	8001bd0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021ee:	2300      	movs	r3, #0
 80021f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021f2:	2300      	movs	r3, #0
 80021f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021f6:	2300      	movs	r3, #0
 80021f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002202:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002206:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002208:	2300      	movs	r3, #0
 800220a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800220c:	2300      	movs	r3, #0
 800220e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002210:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002214:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002216:	2300      	movs	r3, #0
 8002218:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800221a:	2300      	movs	r3, #0
 800221c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800221e:	1d3b      	adds	r3, r7, #4
 8002220:	4619      	mov	r1, r3
 8002222:	4807      	ldr	r0, [pc, #28]	@ (8002240 <MX_TIM8_Init+0x194>)
 8002224:	f004 fe4a 	bl	8006ebc <HAL_TIMEx_ConfigBreakDeadTime>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_TIM8_Init+0x186>
  {
    Error_Handler();
 800222e:	f7ff fccf 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002232:	4803      	ldr	r0, [pc, #12]	@ (8002240 <MX_TIM8_Init+0x194>)
 8002234:	f000 f8f2 	bl	800241c <HAL_TIM_MspPostInit>

}
 8002238:	bf00      	nop
 800223a:	3768      	adds	r7, #104	@ 0x68
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20000540 	.word	0x20000540
 8002244:	40010400 	.word	0x40010400

08002248 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a23      	ldr	r2, [pc, #140]	@ (80022e4 <HAL_TIM_Base_MspInit+0x9c>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d114      	bne.n	8002284 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800225a:	4b23      	ldr	r3, [pc, #140]	@ (80022e8 <HAL_TIM_Base_MspInit+0xa0>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225e:	4a22      	ldr	r2, [pc, #136]	@ (80022e8 <HAL_TIM_Base_MspInit+0xa0>)
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	6453      	str	r3, [r2, #68]	@ 0x44
 8002266:	4b20      	ldr	r3, [pc, #128]	@ (80022e8 <HAL_TIM_Base_MspInit+0xa0>)
 8002268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002272:	2200      	movs	r2, #0
 8002274:	2100      	movs	r1, #0
 8002276:	2019      	movs	r0, #25
 8002278:	f001 fa37 	bl	80036ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800227c:	2019      	movs	r0, #25
 800227e:	f001 fa50 	bl	8003722 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002282:	e02a      	b.n	80022da <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM6)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a18      	ldr	r2, [pc, #96]	@ (80022ec <HAL_TIM_Base_MspInit+0xa4>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d114      	bne.n	80022b8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800228e:	4b16      	ldr	r3, [pc, #88]	@ (80022e8 <HAL_TIM_Base_MspInit+0xa0>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002292:	4a15      	ldr	r2, [pc, #84]	@ (80022e8 <HAL_TIM_Base_MspInit+0xa0>)
 8002294:	f043 0310 	orr.w	r3, r3, #16
 8002298:	6413      	str	r3, [r2, #64]	@ 0x40
 800229a:	4b13      	ldr	r3, [pc, #76]	@ (80022e8 <HAL_TIM_Base_MspInit+0xa0>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229e:	f003 0310 	and.w	r3, r3, #16
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80022a6:	2200      	movs	r2, #0
 80022a8:	2100      	movs	r1, #0
 80022aa:	2036      	movs	r0, #54	@ 0x36
 80022ac:	f001 fa1d 	bl	80036ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022b0:	2036      	movs	r0, #54	@ 0x36
 80022b2:	f001 fa36 	bl	8003722 <HAL_NVIC_EnableIRQ>
}
 80022b6:	e010      	b.n	80022da <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM8)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a0c      	ldr	r2, [pc, #48]	@ (80022f0 <HAL_TIM_Base_MspInit+0xa8>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d10b      	bne.n	80022da <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80022c2:	4b09      	ldr	r3, [pc, #36]	@ (80022e8 <HAL_TIM_Base_MspInit+0xa0>)
 80022c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c6:	4a08      	ldr	r2, [pc, #32]	@ (80022e8 <HAL_TIM_Base_MspInit+0xa0>)
 80022c8:	f043 0302 	orr.w	r3, r3, #2
 80022cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80022ce:	4b06      	ldr	r3, [pc, #24]	@ (80022e8 <HAL_TIM_Base_MspInit+0xa0>)
 80022d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]
}
 80022da:	bf00      	nop
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40010000 	.word	0x40010000
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40001000 	.word	0x40001000
 80022f0:	40010400 	.word	0x40010400

080022f4 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08c      	sub	sp, #48	@ 0x30
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022fc:	f107 031c 	add.w	r3, r7, #28
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	60da      	str	r2, [r3, #12]
 800230a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002314:	d146      	bne.n	80023a4 <HAL_TIM_IC_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002316:	4b3c      	ldr	r3, [pc, #240]	@ (8002408 <HAL_TIM_IC_MspInit+0x114>)
 8002318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231a:	4a3b      	ldr	r2, [pc, #236]	@ (8002408 <HAL_TIM_IC_MspInit+0x114>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	6413      	str	r3, [r2, #64]	@ 0x40
 8002322:	4b39      	ldr	r3, [pc, #228]	@ (8002408 <HAL_TIM_IC_MspInit+0x114>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	61bb      	str	r3, [r7, #24]
 800232c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800232e:	4b36      	ldr	r3, [pc, #216]	@ (8002408 <HAL_TIM_IC_MspInit+0x114>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002332:	4a35      	ldr	r2, [pc, #212]	@ (8002408 <HAL_TIM_IC_MspInit+0x114>)
 8002334:	f043 0302 	orr.w	r3, r3, #2
 8002338:	6313      	str	r3, [r2, #48]	@ 0x30
 800233a:	4b33      	ldr	r3, [pc, #204]	@ (8002408 <HAL_TIM_IC_MspInit+0x114>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002346:	4b30      	ldr	r3, [pc, #192]	@ (8002408 <HAL_TIM_IC_MspInit+0x114>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234a:	4a2f      	ldr	r2, [pc, #188]	@ (8002408 <HAL_TIM_IC_MspInit+0x114>)
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	6313      	str	r3, [r2, #48]	@ 0x30
 8002352:	4b2d      	ldr	r3, [pc, #180]	@ (8002408 <HAL_TIM_IC_MspInit+0x114>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	613b      	str	r3, [r7, #16]
 800235c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = B_R_Pin;
 800235e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002362:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002364:	2302      	movs	r3, #2
 8002366:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	2300      	movs	r3, #0
 800236a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236c:	2300      	movs	r3, #0
 800236e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002370:	2301      	movs	r3, #1
 8002372:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(B_R_GPIO_Port, &GPIO_InitStruct);
 8002374:	f107 031c 	add.w	r3, r7, #28
 8002378:	4619      	mov	r1, r3
 800237a:	4824      	ldr	r0, [pc, #144]	@ (800240c <HAL_TIM_IC_MspInit+0x118>)
 800237c:	f001 fe42 	bl	8004004 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A_R_Pin;
 8002380:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002386:	2302      	movs	r3, #2
 8002388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238e:	2300      	movs	r3, #0
 8002390:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002392:	2301      	movs	r3, #1
 8002394:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(A_R_GPIO_Port, &GPIO_InitStruct);
 8002396:	f107 031c 	add.w	r3, r7, #28
 800239a:	4619      	mov	r1, r3
 800239c:	481c      	ldr	r0, [pc, #112]	@ (8002410 <HAL_TIM_IC_MspInit+0x11c>)
 800239e:	f001 fe31 	bl	8004004 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80023a2:	e02d      	b.n	8002400 <HAL_TIM_IC_MspInit+0x10c>
  else if(tim_icHandle->Instance==TIM4)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a1a      	ldr	r2, [pc, #104]	@ (8002414 <HAL_TIM_IC_MspInit+0x120>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d128      	bne.n	8002400 <HAL_TIM_IC_MspInit+0x10c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80023ae:	4b16      	ldr	r3, [pc, #88]	@ (8002408 <HAL_TIM_IC_MspInit+0x114>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b2:	4a15      	ldr	r2, [pc, #84]	@ (8002408 <HAL_TIM_IC_MspInit+0x114>)
 80023b4:	f043 0304 	orr.w	r3, r3, #4
 80023b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ba:	4b13      	ldr	r3, [pc, #76]	@ (8002408 <HAL_TIM_IC_MspInit+0x114>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023be:	f003 0304 	and.w	r3, r3, #4
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023c6:	4b10      	ldr	r3, [pc, #64]	@ (8002408 <HAL_TIM_IC_MspInit+0x114>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ca:	4a0f      	ldr	r2, [pc, #60]	@ (8002408 <HAL_TIM_IC_MspInit+0x114>)
 80023cc:	f043 0308 	orr.w	r3, r3, #8
 80023d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002408 <HAL_TIM_IC_MspInit+0x114>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	60bb      	str	r3, [r7, #8]
 80023dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = A_L_Pin|B_L_Pin;
 80023de:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80023e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e4:	2302      	movs	r3, #2
 80023e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ec:	2300      	movs	r3, #0
 80023ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80023f0:	2302      	movs	r3, #2
 80023f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023f4:	f107 031c 	add.w	r3, r7, #28
 80023f8:	4619      	mov	r1, r3
 80023fa:	4807      	ldr	r0, [pc, #28]	@ (8002418 <HAL_TIM_IC_MspInit+0x124>)
 80023fc:	f001 fe02 	bl	8004004 <HAL_GPIO_Init>
}
 8002400:	bf00      	nop
 8002402:	3730      	adds	r7, #48	@ 0x30
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40023800 	.word	0x40023800
 800240c:	40020400 	.word	0x40020400
 8002410:	40020000 	.word	0x40020000
 8002414:	40000800 	.word	0x40000800
 8002418:	40020c00 	.word	0x40020c00

0800241c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b08c      	sub	sp, #48	@ 0x30
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002424:	f107 031c 	add.w	r3, r7, #28
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	60da      	str	r2, [r3, #12]
 8002432:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a3f      	ldr	r2, [pc, #252]	@ (8002538 <HAL_TIM_MspPostInit+0x11c>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d11d      	bne.n	800247a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800243e:	4b3f      	ldr	r3, [pc, #252]	@ (800253c <HAL_TIM_MspPostInit+0x120>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002442:	4a3e      	ldr	r2, [pc, #248]	@ (800253c <HAL_TIM_MspPostInit+0x120>)
 8002444:	f043 0310 	orr.w	r3, r3, #16
 8002448:	6313      	str	r3, [r2, #48]	@ 0x30
 800244a:	4b3c      	ldr	r3, [pc, #240]	@ (800253c <HAL_TIM_MspPostInit+0x120>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244e:	f003 0310 	and.w	r3, r3, #16
 8002452:	61bb      	str	r3, [r7, #24]
 8002454:	69bb      	ldr	r3, [r7, #24]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWM1_L_Pin|PWM2_L_Pin|PWM3_L_Pin|PWM4_L_Pin
 8002456:	f44f 537c 	mov.w	r3, #16128	@ 0x3f00
 800245a:	61fb      	str	r3, [r7, #28]
                          |PWM5_L_Pin|PWM6_L_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245c:	2302      	movs	r3, #2
 800245e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002464:	2300      	movs	r3, #0
 8002466:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002468:	2301      	movs	r3, #1
 800246a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800246c:	f107 031c 	add.w	r3, r7, #28
 8002470:	4619      	mov	r1, r3
 8002472:	4833      	ldr	r0, [pc, #204]	@ (8002540 <HAL_TIM_MspPostInit+0x124>)
 8002474:	f001 fdc6 	bl	8004004 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002478:	e05a      	b.n	8002530 <HAL_TIM_MspPostInit+0x114>
  else if(timHandle->Instance==TIM8)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a31      	ldr	r2, [pc, #196]	@ (8002544 <HAL_TIM_MspPostInit+0x128>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d155      	bne.n	8002530 <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002484:	4b2d      	ldr	r3, [pc, #180]	@ (800253c <HAL_TIM_MspPostInit+0x120>)
 8002486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002488:	4a2c      	ldr	r2, [pc, #176]	@ (800253c <HAL_TIM_MspPostInit+0x120>)
 800248a:	f043 0301 	orr.w	r3, r3, #1
 800248e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002490:	4b2a      	ldr	r3, [pc, #168]	@ (800253c <HAL_TIM_MspPostInit+0x120>)
 8002492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800249c:	4b27      	ldr	r3, [pc, #156]	@ (800253c <HAL_TIM_MspPostInit+0x120>)
 800249e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a0:	4a26      	ldr	r2, [pc, #152]	@ (800253c <HAL_TIM_MspPostInit+0x120>)
 80024a2:	f043 0302 	orr.w	r3, r3, #2
 80024a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80024a8:	4b24      	ldr	r3, [pc, #144]	@ (800253c <HAL_TIM_MspPostInit+0x120>)
 80024aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	613b      	str	r3, [r7, #16]
 80024b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024b4:	4b21      	ldr	r3, [pc, #132]	@ (800253c <HAL_TIM_MspPostInit+0x120>)
 80024b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b8:	4a20      	ldr	r2, [pc, #128]	@ (800253c <HAL_TIM_MspPostInit+0x120>)
 80024ba:	f043 0304 	orr.w	r3, r3, #4
 80024be:	6313      	str	r3, [r2, #48]	@ 0x30
 80024c0:	4b1e      	ldr	r3, [pc, #120]	@ (800253c <HAL_TIM_MspPostInit+0x120>)
 80024c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM1_R_Pin;
 80024cc:	2320      	movs	r3, #32
 80024ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d0:	2302      	movs	r3, #2
 80024d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d8:	2300      	movs	r3, #0
 80024da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80024dc:	2303      	movs	r3, #3
 80024de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM1_R_GPIO_Port, &GPIO_InitStruct);
 80024e0:	f107 031c 	add.w	r3, r7, #28
 80024e4:	4619      	mov	r1, r3
 80024e6:	4818      	ldr	r0, [pc, #96]	@ (8002548 <HAL_TIM_MspPostInit+0x12c>)
 80024e8:	f001 fd8c 	bl	8004004 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM3_R_Pin|PWM5_R_Pin;
 80024ec:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80024f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f2:	2302      	movs	r3, #2
 80024f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fa:	2300      	movs	r3, #0
 80024fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80024fe:	2303      	movs	r3, #3
 8002500:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002502:	f107 031c 	add.w	r3, r7, #28
 8002506:	4619      	mov	r1, r3
 8002508:	4810      	ldr	r0, [pc, #64]	@ (800254c <HAL_TIM_MspPostInit+0x130>)
 800250a:	f001 fd7b 	bl	8004004 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM2_R_Pin|PWM4_R_Pin|PWM6_R_Pin;
 800250e:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8002512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002514:	2302      	movs	r3, #2
 8002516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002518:	2300      	movs	r3, #0
 800251a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251c:	2300      	movs	r3, #0
 800251e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002520:	2303      	movs	r3, #3
 8002522:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002524:	f107 031c 	add.w	r3, r7, #28
 8002528:	4619      	mov	r1, r3
 800252a:	4809      	ldr	r0, [pc, #36]	@ (8002550 <HAL_TIM_MspPostInit+0x134>)
 800252c:	f001 fd6a 	bl	8004004 <HAL_GPIO_Init>
}
 8002530:	bf00      	nop
 8002532:	3730      	adds	r7, #48	@ 0x30
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40010000 	.word	0x40010000
 800253c:	40023800 	.word	0x40023800
 8002540:	40021000 	.word	0x40021000
 8002544:	40010400 	.word	0x40010400
 8002548:	40020000 	.word	0x40020000
 800254c:	40020400 	.word	0x40020400
 8002550:	40020800 	.word	0x40020800

08002554 <MX_USB_OTG_FS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_USB_Init(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002558:	bf00      	nop
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
	...

08002564 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002564:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800259c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002568:	480d      	ldr	r0, [pc, #52]	@ (80025a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800256a:	490e      	ldr	r1, [pc, #56]	@ (80025a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800256c:	4a0e      	ldr	r2, [pc, #56]	@ (80025a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800256e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002570:	e002      	b.n	8002578 <LoopCopyDataInit>

08002572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002576:	3304      	adds	r3, #4

08002578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800257a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800257c:	d3f9      	bcc.n	8002572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800257e:	4a0b      	ldr	r2, [pc, #44]	@ (80025ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002580:	4c0b      	ldr	r4, [pc, #44]	@ (80025b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002584:	e001      	b.n	800258a <LoopFillZerobss>

08002586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002588:	3204      	adds	r2, #4

0800258a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800258a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800258c:	d3fb      	bcc.n	8002586 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800258e:	f7ff fbbd 	bl	8001d0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002592:	f004 fd3d 	bl	8007010 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002596:	f7ff fa47 	bl	8001a28 <main>
  bx  lr    
 800259a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800259c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80025a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025a4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80025a8:	08007dd8 	.word	0x08007dd8
  ldr r2, =_sbss
 80025ac:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80025b0:	200006c8 	.word	0x200006c8

080025b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025b4:	e7fe      	b.n	80025b4 <ADC_IRQHandler>

080025b6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025ba:	2003      	movs	r0, #3
 80025bc:	f001 f88a 	bl	80036d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025c0:	200f      	movs	r0, #15
 80025c2:	f000 f805 	bl	80025d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025c6:	f7ff fb09 	bl	8001bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025d8:	4b12      	ldr	r3, [pc, #72]	@ (8002624 <HAL_InitTick+0x54>)
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	4b12      	ldr	r3, [pc, #72]	@ (8002628 <HAL_InitTick+0x58>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	4619      	mov	r1, r3
 80025e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80025ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ee:	4618      	mov	r0, r3
 80025f0:	f001 f8a5 	bl	800373e <HAL_SYSTICK_Config>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e00e      	b.n	800261c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b0f      	cmp	r3, #15
 8002602:	d80a      	bhi.n	800261a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002604:	2200      	movs	r2, #0
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	f04f 30ff 	mov.w	r0, #4294967295
 800260c:	f001 f86d 	bl	80036ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002610:	4a06      	ldr	r2, [pc, #24]	@ (800262c <HAL_InitTick+0x5c>)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	e000      	b.n	800261c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
}
 800261c:	4618      	mov	r0, r3
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	20000030 	.word	0x20000030
 8002628:	20000038 	.word	0x20000038
 800262c:	20000034 	.word	0x20000034

08002630 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002634:	4b06      	ldr	r3, [pc, #24]	@ (8002650 <HAL_IncTick+0x20>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	461a      	mov	r2, r3
 800263a:	4b06      	ldr	r3, [pc, #24]	@ (8002654 <HAL_IncTick+0x24>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4413      	add	r3, r2
 8002640:	4a04      	ldr	r2, [pc, #16]	@ (8002654 <HAL_IncTick+0x24>)
 8002642:	6013      	str	r3, [r2, #0]
}
 8002644:	bf00      	nop
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	20000038 	.word	0x20000038
 8002654:	2000058c 	.word	0x2000058c

08002658 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  return uwTick;
 800265c:	4b03      	ldr	r3, [pc, #12]	@ (800266c <HAL_GetTick+0x14>)
 800265e:	681b      	ldr	r3, [r3, #0]
}
 8002660:	4618      	mov	r0, r3
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	2000058c 	.word	0x2000058c

08002670 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002678:	2300      	movs	r3, #0
 800267a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e031      	b.n	80026ea <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268a:	2b00      	cmp	r3, #0
 800268c:	d109      	bne.n	80026a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7fe fd94 	bl	80011bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a6:	f003 0310 	and.w	r3, r3, #16
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d116      	bne.n	80026dc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026b2:	4b10      	ldr	r3, [pc, #64]	@ (80026f4 <HAL_ADC_Init+0x84>)
 80026b4:	4013      	ands	r3, r2
 80026b6:	f043 0202 	orr.w	r2, r3, #2
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 fa88 	bl	8002bd4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ce:	f023 0303 	bic.w	r3, r3, #3
 80026d2:	f043 0201 	orr.w	r2, r3, #1
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	641a      	str	r2, [r3, #64]	@ 0x40
 80026da:	e001      	b.n	80026e0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	ffffeefd 	.word	0xffffeefd

080026f8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800270e:	2b01      	cmp	r3, #1
 8002710:	d101      	bne.n	8002716 <HAL_ADC_Start_DMA+0x1e>
 8002712:	2302      	movs	r3, #2
 8002714:	e0d4      	b.n	80028c0 <HAL_ADC_Start_DMA+0x1c8>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b01      	cmp	r3, #1
 800272a:	d018      	beq.n	800275e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f042 0201 	orr.w	r2, r2, #1
 800273a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800273c:	4b62      	ldr	r3, [pc, #392]	@ (80028c8 <HAL_ADC_Start_DMA+0x1d0>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a62      	ldr	r2, [pc, #392]	@ (80028cc <HAL_ADC_Start_DMA+0x1d4>)
 8002742:	fba2 2303 	umull	r2, r3, r2, r3
 8002746:	0c9a      	lsrs	r2, r3, #18
 8002748:	4613      	mov	r3, r2
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	4413      	add	r3, r2
 800274e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002750:	e002      	b.n	8002758 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	3b01      	subs	r3, #1
 8002756:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f9      	bne.n	8002752 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b01      	cmp	r3, #1
 800276a:	f040 809c 	bne.w	80028a6 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002772:	4b57      	ldr	r3, [pc, #348]	@ (80028d0 <HAL_ADC_Start_DMA+0x1d8>)
 8002774:	4013      	ands	r3, r2
 8002776:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002788:	2b00      	cmp	r3, #0
 800278a:	d007      	beq.n	800279c <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002790:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002794:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027a8:	d106      	bne.n	80027b8 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ae:	f023 0206 	bic.w	r2, r3, #6
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	645a      	str	r2, [r3, #68]	@ 0x44
 80027b6:	e002      	b.n	80027be <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ca:	4a42      	ldr	r2, [pc, #264]	@ (80028d4 <HAL_ADC_Start_DMA+0x1dc>)
 80027cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027d2:	4a41      	ldr	r2, [pc, #260]	@ (80028d8 <HAL_ADC_Start_DMA+0x1e0>)
 80027d4:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027da:	4a40      	ldr	r2, [pc, #256]	@ (80028dc <HAL_ADC_Start_DMA+0x1e4>)
 80027dc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80027e6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80027f6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689a      	ldr	r2, [r3, #8]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002806:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	334c      	adds	r3, #76	@ 0x4c
 8002812:	4619      	mov	r1, r3
 8002814:	68ba      	ldr	r2, [r7, #8]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f001 f92a 	bl	8003a70 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800281c:	4b30      	ldr	r3, [pc, #192]	@ (80028e0 <HAL_ADC_Start_DMA+0x1e8>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 031f 	and.w	r3, r3, #31
 8002824:	2b00      	cmp	r3, #0
 8002826:	d10f      	bne.n	8002848 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d143      	bne.n	80028be <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002844:	609a      	str	r2, [r3, #8]
 8002846:	e03a      	b.n	80028be <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a25      	ldr	r2, [pc, #148]	@ (80028e4 <HAL_ADC_Start_DMA+0x1ec>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d10e      	bne.n	8002870 <HAL_ADC_Start_DMA+0x178>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d107      	bne.n	8002870 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800286e:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002870:	4b1b      	ldr	r3, [pc, #108]	@ (80028e0 <HAL_ADC_Start_DMA+0x1e8>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f003 0310 	and.w	r3, r3, #16
 8002878:	2b00      	cmp	r3, #0
 800287a:	d120      	bne.n	80028be <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a19      	ldr	r2, [pc, #100]	@ (80028e8 <HAL_ADC_Start_DMA+0x1f0>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d11b      	bne.n	80028be <HAL_ADC_Start_DMA+0x1c6>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d114      	bne.n	80028be <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	e00b      	b.n	80028be <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028aa:	f043 0210 	orr.w	r2, r3, #16
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028b6:	f043 0201 	orr.w	r2, r3, #1
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3718      	adds	r7, #24
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	20000030 	.word	0x20000030
 80028cc:	431bde83 	.word	0x431bde83
 80028d0:	fffff8fe 	.word	0xfffff8fe
 80028d4:	08002dc9 	.word	0x08002dc9
 80028d8:	08002e83 	.word	0x08002e83
 80028dc:	08002e9f 	.word	0x08002e9f
 80028e0:	40012300 	.word	0x40012300
 80028e4:	40012000 	.word	0x40012000
 80028e8:	40012200 	.word	0x40012200

080028ec <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002932:	2300      	movs	r3, #0
 8002934:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800293c:	2b01      	cmp	r3, #1
 800293e:	d101      	bne.n	8002944 <HAL_ADC_ConfigChannel+0x1c>
 8002940:	2302      	movs	r3, #2
 8002942:	e136      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x28a>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b09      	cmp	r3, #9
 8002952:	d93a      	bls.n	80029ca <HAL_ADC_ConfigChannel+0xa2>
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800295c:	d035      	beq.n	80029ca <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68d9      	ldr	r1, [r3, #12]
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	b29b      	uxth	r3, r3
 800296a:	461a      	mov	r2, r3
 800296c:	4613      	mov	r3, r2
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	4413      	add	r3, r2
 8002972:	3b1e      	subs	r3, #30
 8002974:	2207      	movs	r2, #7
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43da      	mvns	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	400a      	ands	r2, r1
 8002982:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a8d      	ldr	r2, [pc, #564]	@ (8002bc0 <HAL_ADC_ConfigChannel+0x298>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d10a      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68d9      	ldr	r1, [r3, #12]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	061a      	lsls	r2, r3, #24
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029a2:	e035      	b.n	8002a10 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68d9      	ldr	r1, [r3, #12]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	689a      	ldr	r2, [r3, #8]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	4618      	mov	r0, r3
 80029b6:	4603      	mov	r3, r0
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	4403      	add	r3, r0
 80029bc:	3b1e      	subs	r3, #30
 80029be:	409a      	lsls	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029c8:	e022      	b.n	8002a10 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6919      	ldr	r1, [r3, #16]
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	461a      	mov	r2, r3
 80029d8:	4613      	mov	r3, r2
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	4413      	add	r3, r2
 80029de:	2207      	movs	r2, #7
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	43da      	mvns	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	400a      	ands	r2, r1
 80029ec:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6919      	ldr	r1, [r3, #16]
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	4618      	mov	r0, r3
 8002a00:	4603      	mov	r3, r0
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	4403      	add	r3, r0
 8002a06:	409a      	lsls	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	2b06      	cmp	r3, #6
 8002a16:	d824      	bhi.n	8002a62 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	4613      	mov	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	3b05      	subs	r3, #5
 8002a2a:	221f      	movs	r2, #31
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	43da      	mvns	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	400a      	ands	r2, r1
 8002a38:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	4618      	mov	r0, r3
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	3b05      	subs	r3, #5
 8002a54:	fa00 f203 	lsl.w	r2, r0, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a60:	e04c      	b.n	8002afc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b0c      	cmp	r3, #12
 8002a68:	d824      	bhi.n	8002ab4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	4613      	mov	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	3b23      	subs	r3, #35	@ 0x23
 8002a7c:	221f      	movs	r2, #31
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	43da      	mvns	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	400a      	ands	r2, r1
 8002a8a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	4618      	mov	r0, r3
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3b23      	subs	r3, #35	@ 0x23
 8002aa6:	fa00 f203 	lsl.w	r2, r0, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ab2:	e023      	b.n	8002afc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	3b41      	subs	r3, #65	@ 0x41
 8002ac6:	221f      	movs	r2, #31
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43da      	mvns	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	400a      	ands	r2, r1
 8002ad4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	3b41      	subs	r3, #65	@ 0x41
 8002af0:	fa00 f203 	lsl.w	r2, r0, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a30      	ldr	r2, [pc, #192]	@ (8002bc4 <HAL_ADC_ConfigChannel+0x29c>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d10a      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x1f4>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b0e:	d105      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002b10:	4b2d      	ldr	r3, [pc, #180]	@ (8002bc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	4a2c      	ldr	r2, [pc, #176]	@ (8002bc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b16:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002b1a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a28      	ldr	r2, [pc, #160]	@ (8002bc4 <HAL_ADC_ConfigChannel+0x29c>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d10f      	bne.n	8002b46 <HAL_ADC_ConfigChannel+0x21e>
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2b12      	cmp	r3, #18
 8002b2c:	d10b      	bne.n	8002b46 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002b2e:	4b26      	ldr	r3, [pc, #152]	@ (8002bc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	4a25      	ldr	r2, [pc, #148]	@ (8002bc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b34:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002b38:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002b3a:	4b23      	ldr	r3, [pc, #140]	@ (8002bc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	4a22      	ldr	r2, [pc, #136]	@ (8002bc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b40:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b44:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a1e      	ldr	r2, [pc, #120]	@ (8002bc4 <HAL_ADC_ConfigChannel+0x29c>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d12b      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x280>
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a1a      	ldr	r2, [pc, #104]	@ (8002bc0 <HAL_ADC_ConfigChannel+0x298>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d003      	beq.n	8002b62 <HAL_ADC_ConfigChannel+0x23a>
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b11      	cmp	r3, #17
 8002b60:	d122      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002b62:	4b19      	ldr	r3, [pc, #100]	@ (8002bc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	4a18      	ldr	r2, [pc, #96]	@ (8002bc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b68:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002b6c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002b6e:	4b16      	ldr	r3, [pc, #88]	@ (8002bc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	4a15      	ldr	r2, [pc, #84]	@ (8002bc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b74:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b78:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a10      	ldr	r2, [pc, #64]	@ (8002bc0 <HAL_ADC_ConfigChannel+0x298>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d111      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002b84:	4b11      	ldr	r3, [pc, #68]	@ (8002bcc <HAL_ADC_ConfigChannel+0x2a4>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a11      	ldr	r2, [pc, #68]	@ (8002bd0 <HAL_ADC_ConfigChannel+0x2a8>)
 8002b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8e:	0c9a      	lsrs	r2, r3, #18
 8002b90:	4613      	mov	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002b9a:	e002      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1f9      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	10000012 	.word	0x10000012
 8002bc4:	40012000 	.word	0x40012000
 8002bc8:	40012300 	.word	0x40012300
 8002bcc:	20000030 	.word	0x20000030
 8002bd0:	431bde83 	.word	0x431bde83

08002bd4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002bdc:	4b78      	ldr	r3, [pc, #480]	@ (8002dc0 <ADC_Init+0x1ec>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	4a77      	ldr	r2, [pc, #476]	@ (8002dc0 <ADC_Init+0x1ec>)
 8002be2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002be6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002be8:	4b75      	ldr	r3, [pc, #468]	@ (8002dc0 <ADC_Init+0x1ec>)
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	4973      	ldr	r1, [pc, #460]	@ (8002dc0 <ADC_Init+0x1ec>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6859      	ldr	r1, [r3, #4]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	021a      	lsls	r2, r3, #8
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002c28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6859      	ldr	r1, [r3, #4]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6899      	ldr	r1, [r3, #8]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68da      	ldr	r2, [r3, #12]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c62:	4a58      	ldr	r2, [pc, #352]	@ (8002dc4 <ADC_Init+0x1f0>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d022      	beq.n	8002cae <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689a      	ldr	r2, [r3, #8]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6899      	ldr	r1, [r3, #8]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002c98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6899      	ldr	r1, [r3, #8]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	609a      	str	r2, [r3, #8]
 8002cac:	e00f      	b.n	8002cce <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002cbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002ccc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 0202 	bic.w	r2, r2, #2
 8002cdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6899      	ldr	r1, [r3, #8]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	005a      	lsls	r2, r3, #1
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d01b      	beq.n	8002d34 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d0a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002d1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6859      	ldr	r1, [r3, #4]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d26:	3b01      	subs	r3, #1
 8002d28:	035a      	lsls	r2, r3, #13
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	605a      	str	r2, [r3, #4]
 8002d32:	e007      	b.n	8002d44 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d42:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002d52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	051a      	lsls	r2, r3, #20
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002d78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	6899      	ldr	r1, [r3, #8]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002d86:	025a      	lsls	r2, r3, #9
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689a      	ldr	r2, [r3, #8]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6899      	ldr	r1, [r3, #8]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	029a      	lsls	r2, r3, #10
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	609a      	str	r2, [r3, #8]
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	40012300 	.word	0x40012300
 8002dc4:	0f000001 	.word	0x0f000001

08002dc8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dd4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dda:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d13c      	bne.n	8002e5c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d12b      	bne.n	8002e54 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d127      	bne.n	8002e54 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e0a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d006      	beq.n	8002e20 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d119      	bne.n	8002e54 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 0220 	bic.w	r2, r2, #32
 8002e2e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e34:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d105      	bne.n	8002e54 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4c:	f043 0201 	orr.w	r2, r3, #1
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f7ff fd49 	bl	80028ec <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002e5a:	e00e      	b.n	8002e7a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e60:	f003 0310 	and.w	r3, r3, #16
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d003      	beq.n	8002e70 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f7ff fd53 	bl	8002914 <HAL_ADC_ErrorCallback>
}
 8002e6e:	e004      	b.n	8002e7a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	4798      	blx	r3
}
 8002e7a:	bf00      	nop
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b084      	sub	sp, #16
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e8e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f7ff fd35 	bl	8002900 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e96:	bf00      	nop
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b084      	sub	sp, #16
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eaa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2240      	movs	r2, #64	@ 0x40
 8002eb0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb6:	f043 0204 	orr.w	r2, r3, #4
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f7ff fd28 	bl	8002914 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ec4:	bf00      	nop
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e0ed      	b.n	80030ba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d102      	bne.n	8002ef0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f7fe faec 	bl	80014c8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f042 0201 	orr.w	r2, r2, #1
 8002efe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f00:	f7ff fbaa 	bl	8002658 <HAL_GetTick>
 8002f04:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f06:	e012      	b.n	8002f2e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f08:	f7ff fba6 	bl	8002658 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b0a      	cmp	r3, #10
 8002f14:	d90b      	bls.n	8002f2e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2205      	movs	r2, #5
 8002f26:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e0c5      	b.n	80030ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d0e5      	beq.n	8002f08 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0202 	bic.w	r2, r2, #2
 8002f4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f4c:	f7ff fb84 	bl	8002658 <HAL_GetTick>
 8002f50:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f52:	e012      	b.n	8002f7a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f54:	f7ff fb80 	bl	8002658 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b0a      	cmp	r3, #10
 8002f60:	d90b      	bls.n	8002f7a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f66:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2205      	movs	r2, #5
 8002f72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e09f      	b.n	80030ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1e5      	bne.n	8002f54 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	7e1b      	ldrb	r3, [r3, #24]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d108      	bne.n	8002fa2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	e007      	b.n	8002fb2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002fb0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	7e5b      	ldrb	r3, [r3, #25]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d108      	bne.n	8002fcc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	e007      	b.n	8002fdc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fda:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	7e9b      	ldrb	r3, [r3, #26]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d108      	bne.n	8002ff6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f042 0220 	orr.w	r2, r2, #32
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	e007      	b.n	8003006 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 0220 	bic.w	r2, r2, #32
 8003004:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	7edb      	ldrb	r3, [r3, #27]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d108      	bne.n	8003020 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 0210 	bic.w	r2, r2, #16
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	e007      	b.n	8003030 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0210 	orr.w	r2, r2, #16
 800302e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	7f1b      	ldrb	r3, [r3, #28]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d108      	bne.n	800304a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 0208 	orr.w	r2, r2, #8
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	e007      	b.n	800305a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0208 	bic.w	r2, r2, #8
 8003058:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	7f5b      	ldrb	r3, [r3, #29]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d108      	bne.n	8003074 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f042 0204 	orr.w	r2, r2, #4
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	e007      	b.n	8003084 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0204 	bic.w	r2, r2, #4
 8003082:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	431a      	orrs	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	ea42 0103 	orr.w	r1, r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	1e5a      	subs	r2, r3, #1
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b08a      	sub	sp, #40	@ 0x28
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80030ca:	2300      	movs	r3, #0
 80030cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	2b00      	cmp	r3, #0
 8003106:	d07c      	beq.n	8003202 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d023      	beq.n	800315a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2201      	movs	r2, #1
 8003118:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d003      	beq.n	800312c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 f983 	bl	8003430 <HAL_CAN_TxMailbox0CompleteCallback>
 800312a:	e016      	b.n	800315a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	f003 0304 	and.w	r3, r3, #4
 8003132:	2b00      	cmp	r3, #0
 8003134:	d004      	beq.n	8003140 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003138:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800313c:	627b      	str	r3, [r7, #36]	@ 0x24
 800313e:	e00c      	b.n	800315a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	f003 0308 	and.w	r3, r3, #8
 8003146:	2b00      	cmp	r3, #0
 8003148:	d004      	beq.n	8003154 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800314a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003150:	627b      	str	r3, [r7, #36]	@ 0x24
 8003152:	e002      	b.n	800315a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f989 	bl	800346c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003160:	2b00      	cmp	r3, #0
 8003162:	d024      	beq.n	80031ae <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800316c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 f963 	bl	8003444 <HAL_CAN_TxMailbox1CompleteCallback>
 800317e:	e016      	b.n	80031ae <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003186:	2b00      	cmp	r3, #0
 8003188:	d004      	beq.n	8003194 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800318a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003190:	627b      	str	r3, [r7, #36]	@ 0x24
 8003192:	e00c      	b.n	80031ae <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800319a:	2b00      	cmp	r3, #0
 800319c:	d004      	beq.n	80031a8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800319e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80031a6:	e002      	b.n	80031ae <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 f969 	bl	8003480 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d024      	beq.n	8003202 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80031c0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 f943 	bl	8003458 <HAL_CAN_TxMailbox2CompleteCallback>
 80031d2:	e016      	b.n	8003202 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d004      	beq.n	80031e8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80031de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80031e6:	e00c      	b.n	8003202 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d004      	beq.n	80031fc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80031f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80031fa:	e002      	b.n	8003202 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f949 	bl	8003494 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003202:	6a3b      	ldr	r3, [r7, #32]
 8003204:	f003 0308 	and.w	r3, r3, #8
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00c      	beq.n	8003226 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	f003 0310 	and.w	r3, r3, #16
 8003212:	2b00      	cmp	r3, #0
 8003214:	d007      	beq.n	8003226 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003218:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800321c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2210      	movs	r2, #16
 8003224:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003226:	6a3b      	ldr	r3, [r7, #32]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00b      	beq.n	8003248 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d006      	beq.n	8003248 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2208      	movs	r2, #8
 8003240:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f93a 	bl	80034bc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003248:	6a3b      	ldr	r3, [r7, #32]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d009      	beq.n	8003266 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f003 0303 	and.w	r3, r3, #3
 800325c:	2b00      	cmp	r3, #0
 800325e:	d002      	beq.n	8003266 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 f921 	bl	80034a8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003266:	6a3b      	ldr	r3, [r7, #32]
 8003268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00c      	beq.n	800328a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	f003 0310 	and.w	r3, r3, #16
 8003276:	2b00      	cmp	r3, #0
 8003278:	d007      	beq.n	800328a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800327a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003280:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2210      	movs	r2, #16
 8003288:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800328a:	6a3b      	ldr	r3, [r7, #32]
 800328c:	f003 0320 	and.w	r3, r3, #32
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00b      	beq.n	80032ac <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	f003 0308 	and.w	r3, r3, #8
 800329a:	2b00      	cmp	r3, #0
 800329c:	d006      	beq.n	80032ac <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2208      	movs	r2, #8
 80032a4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f91c 	bl	80034e4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80032ac:	6a3b      	ldr	r3, [r7, #32]
 80032ae:	f003 0310 	and.w	r3, r3, #16
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d009      	beq.n	80032ca <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	f003 0303 	and.w	r3, r3, #3
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d002      	beq.n	80032ca <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 f903 	bl	80034d0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00b      	beq.n	80032ec <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f003 0310 	and.w	r3, r3, #16
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d006      	beq.n	80032ec <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2210      	movs	r2, #16
 80032e4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f906 	bl	80034f8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00b      	beq.n	800330e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	f003 0308 	and.w	r3, r3, #8
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d006      	beq.n	800330e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2208      	movs	r2, #8
 8003306:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 f8ff 	bl	800350c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800330e:	6a3b      	ldr	r3, [r7, #32]
 8003310:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d07b      	beq.n	8003410 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	f003 0304 	and.w	r3, r3, #4
 800331e:	2b00      	cmp	r3, #0
 8003320:	d072      	beq.n	8003408 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003322:	6a3b      	ldr	r3, [r7, #32]
 8003324:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003328:	2b00      	cmp	r3, #0
 800332a:	d008      	beq.n	800333e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003338:	f043 0301 	orr.w	r3, r3, #1
 800333c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800333e:	6a3b      	ldr	r3, [r7, #32]
 8003340:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003344:	2b00      	cmp	r3, #0
 8003346:	d008      	beq.n	800335a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003354:	f043 0302 	orr.w	r3, r3, #2
 8003358:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003360:	2b00      	cmp	r3, #0
 8003362:	d008      	beq.n	8003376 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800336e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003370:	f043 0304 	orr.w	r3, r3, #4
 8003374:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003376:	6a3b      	ldr	r3, [r7, #32]
 8003378:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800337c:	2b00      	cmp	r3, #0
 800337e:	d043      	beq.n	8003408 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003386:	2b00      	cmp	r3, #0
 8003388:	d03e      	beq.n	8003408 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003390:	2b60      	cmp	r3, #96	@ 0x60
 8003392:	d02b      	beq.n	80033ec <HAL_CAN_IRQHandler+0x32a>
 8003394:	2b60      	cmp	r3, #96	@ 0x60
 8003396:	d82e      	bhi.n	80033f6 <HAL_CAN_IRQHandler+0x334>
 8003398:	2b50      	cmp	r3, #80	@ 0x50
 800339a:	d022      	beq.n	80033e2 <HAL_CAN_IRQHandler+0x320>
 800339c:	2b50      	cmp	r3, #80	@ 0x50
 800339e:	d82a      	bhi.n	80033f6 <HAL_CAN_IRQHandler+0x334>
 80033a0:	2b40      	cmp	r3, #64	@ 0x40
 80033a2:	d019      	beq.n	80033d8 <HAL_CAN_IRQHandler+0x316>
 80033a4:	2b40      	cmp	r3, #64	@ 0x40
 80033a6:	d826      	bhi.n	80033f6 <HAL_CAN_IRQHandler+0x334>
 80033a8:	2b30      	cmp	r3, #48	@ 0x30
 80033aa:	d010      	beq.n	80033ce <HAL_CAN_IRQHandler+0x30c>
 80033ac:	2b30      	cmp	r3, #48	@ 0x30
 80033ae:	d822      	bhi.n	80033f6 <HAL_CAN_IRQHandler+0x334>
 80033b0:	2b10      	cmp	r3, #16
 80033b2:	d002      	beq.n	80033ba <HAL_CAN_IRQHandler+0x2f8>
 80033b4:	2b20      	cmp	r3, #32
 80033b6:	d005      	beq.n	80033c4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80033b8:	e01d      	b.n	80033f6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80033ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033bc:	f043 0308 	orr.w	r3, r3, #8
 80033c0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80033c2:	e019      	b.n	80033f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80033c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c6:	f043 0310 	orr.w	r3, r3, #16
 80033ca:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80033cc:	e014      	b.n	80033f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80033ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d0:	f043 0320 	orr.w	r3, r3, #32
 80033d4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80033d6:	e00f      	b.n	80033f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80033d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033de:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80033e0:	e00a      	b.n	80033f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80033e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033e8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80033ea:	e005      	b.n	80033f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80033ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033f2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80033f4:	e000      	b.n	80033f8 <HAL_CAN_IRQHandler+0x336>
            break;
 80033f6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	699a      	ldr	r2, [r3, #24]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003406:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2204      	movs	r2, #4
 800340e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003412:	2b00      	cmp	r3, #0
 8003414:	d008      	beq.n	8003428 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800341a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341c:	431a      	orrs	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f87c 	bl	8003520 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003428:	bf00      	nop
 800342a:	3728      	adds	r7, #40	@ 0x28
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f003 0307 	and.w	r3, r3, #7
 8003542:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003544:	4b0b      	ldr	r3, [pc, #44]	@ (8003574 <__NVIC_SetPriorityGrouping+0x40>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003550:	4013      	ands	r3, r2
 8003552:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800355c:	4b06      	ldr	r3, [pc, #24]	@ (8003578 <__NVIC_SetPriorityGrouping+0x44>)
 800355e:	4313      	orrs	r3, r2
 8003560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003562:	4a04      	ldr	r2, [pc, #16]	@ (8003574 <__NVIC_SetPriorityGrouping+0x40>)
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	60d3      	str	r3, [r2, #12]
}
 8003568:	bf00      	nop
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	e000ed00 	.word	0xe000ed00
 8003578:	05fa0000 	.word	0x05fa0000

0800357c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003580:	4b04      	ldr	r3, [pc, #16]	@ (8003594 <__NVIC_GetPriorityGrouping+0x18>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	0a1b      	lsrs	r3, r3, #8
 8003586:	f003 0307 	and.w	r3, r3, #7
}
 800358a:	4618      	mov	r0, r3
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	e000ed00 	.word	0xe000ed00

08003598 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	4603      	mov	r3, r0
 80035a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	db0b      	blt.n	80035c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035aa:	79fb      	ldrb	r3, [r7, #7]
 80035ac:	f003 021f 	and.w	r2, r3, #31
 80035b0:	4907      	ldr	r1, [pc, #28]	@ (80035d0 <__NVIC_EnableIRQ+0x38>)
 80035b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b6:	095b      	lsrs	r3, r3, #5
 80035b8:	2001      	movs	r0, #1
 80035ba:	fa00 f202 	lsl.w	r2, r0, r2
 80035be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	e000e100 	.word	0xe000e100

080035d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	4603      	mov	r3, r0
 80035dc:	6039      	str	r1, [r7, #0]
 80035de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	db0a      	blt.n	80035fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	b2da      	uxtb	r2, r3
 80035ec:	490c      	ldr	r1, [pc, #48]	@ (8003620 <__NVIC_SetPriority+0x4c>)
 80035ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f2:	0112      	lsls	r2, r2, #4
 80035f4:	b2d2      	uxtb	r2, r2
 80035f6:	440b      	add	r3, r1
 80035f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035fc:	e00a      	b.n	8003614 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	b2da      	uxtb	r2, r3
 8003602:	4908      	ldr	r1, [pc, #32]	@ (8003624 <__NVIC_SetPriority+0x50>)
 8003604:	79fb      	ldrb	r3, [r7, #7]
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	3b04      	subs	r3, #4
 800360c:	0112      	lsls	r2, r2, #4
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	440b      	add	r3, r1
 8003612:	761a      	strb	r2, [r3, #24]
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	e000e100 	.word	0xe000e100
 8003624:	e000ed00 	.word	0xe000ed00

08003628 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003628:	b480      	push	{r7}
 800362a:	b089      	sub	sp, #36	@ 0x24
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	f1c3 0307 	rsb	r3, r3, #7
 8003642:	2b04      	cmp	r3, #4
 8003644:	bf28      	it	cs
 8003646:	2304      	movcs	r3, #4
 8003648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	3304      	adds	r3, #4
 800364e:	2b06      	cmp	r3, #6
 8003650:	d902      	bls.n	8003658 <NVIC_EncodePriority+0x30>
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	3b03      	subs	r3, #3
 8003656:	e000      	b.n	800365a <NVIC_EncodePriority+0x32>
 8003658:	2300      	movs	r3, #0
 800365a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800365c:	f04f 32ff 	mov.w	r2, #4294967295
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	43da      	mvns	r2, r3
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	401a      	ands	r2, r3
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003670:	f04f 31ff 	mov.w	r1, #4294967295
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	fa01 f303 	lsl.w	r3, r1, r3
 800367a:	43d9      	mvns	r1, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003680:	4313      	orrs	r3, r2
         );
}
 8003682:	4618      	mov	r0, r3
 8003684:	3724      	adds	r7, #36	@ 0x24
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
	...

08003690 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3b01      	subs	r3, #1
 800369c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036a0:	d301      	bcc.n	80036a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036a2:	2301      	movs	r3, #1
 80036a4:	e00f      	b.n	80036c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036a6:	4a0a      	ldr	r2, [pc, #40]	@ (80036d0 <SysTick_Config+0x40>)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3b01      	subs	r3, #1
 80036ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036ae:	210f      	movs	r1, #15
 80036b0:	f04f 30ff 	mov.w	r0, #4294967295
 80036b4:	f7ff ff8e 	bl	80035d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036b8:	4b05      	ldr	r3, [pc, #20]	@ (80036d0 <SysTick_Config+0x40>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036be:	4b04      	ldr	r3, [pc, #16]	@ (80036d0 <SysTick_Config+0x40>)
 80036c0:	2207      	movs	r2, #7
 80036c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3708      	adds	r7, #8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	e000e010 	.word	0xe000e010

080036d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f7ff ff29 	bl	8003534 <__NVIC_SetPriorityGrouping>
}
 80036e2:	bf00      	nop
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b086      	sub	sp, #24
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	4603      	mov	r3, r0
 80036f2:	60b9      	str	r1, [r7, #8]
 80036f4:	607a      	str	r2, [r7, #4]
 80036f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80036f8:	2300      	movs	r3, #0
 80036fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036fc:	f7ff ff3e 	bl	800357c <__NVIC_GetPriorityGrouping>
 8003700:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	68b9      	ldr	r1, [r7, #8]
 8003706:	6978      	ldr	r0, [r7, #20]
 8003708:	f7ff ff8e 	bl	8003628 <NVIC_EncodePriority>
 800370c:	4602      	mov	r2, r0
 800370e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003712:	4611      	mov	r1, r2
 8003714:	4618      	mov	r0, r3
 8003716:	f7ff ff5d 	bl	80035d4 <__NVIC_SetPriority>
}
 800371a:	bf00      	nop
 800371c:	3718      	adds	r7, #24
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b082      	sub	sp, #8
 8003726:	af00      	add	r7, sp, #0
 8003728:	4603      	mov	r3, r0
 800372a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800372c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003730:	4618      	mov	r0, r3
 8003732:	f7ff ff31 	bl	8003598 <__NVIC_EnableIRQ>
}
 8003736:	bf00      	nop
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b082      	sub	sp, #8
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7ff ffa2 	bl	8003690 <SysTick_Config>
 800374c:	4603      	mov	r3, r0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b082      	sub	sp, #8
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e014      	b.n	8003792 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	791b      	ldrb	r3, [r3, #4]
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d105      	bne.n	800377e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f7fd ff1b 	bl	80015b4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2202      	movs	r2, #2
 8003782:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b082      	sub	sp, #8
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037b0:	d120      	bne.n	80037f4 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037c0:	d118      	bne.n	80037f4 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2204      	movs	r2, #4
 80037c6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	f043 0201 	orr.w	r2, r3, #1
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80037dc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80037ec:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f82d 	bl	800384e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80037fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003802:	d120      	bne.n	8003846 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800380a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800380e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003812:	d118      	bne.n	8003846 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2204      	movs	r2, #4
 8003818:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	f043 0202 	orr.w	r2, r3, #2
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800382e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800383e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f85d 	bl	8003900 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8003846:	bf00      	nop
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003862:	b480      	push	{r7}
 8003864:	b087      	sub	sp, #28
 8003866:	af00      	add	r7, sp, #0
 8003868:	60f8      	str	r0, [r7, #12]
 800386a:	60b9      	str	r1, [r7, #8]
 800386c:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	795b      	ldrb	r3, [r3, #5]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d101      	bne.n	800387a <HAL_DAC_ConfigChannel+0x18>
 8003876:	2302      	movs	r3, #2
 8003878:	e03c      	b.n	80038f4 <HAL_DAC_ConfigChannel+0x92>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2201      	movs	r2, #1
 800387e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2202      	movs	r2, #2
 8003884:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f003 0310 	and.w	r3, r3, #16
 8003894:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	43db      	mvns	r3, r3
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	4013      	ands	r3, r2
 80038a2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f003 0310 	and.w	r3, r3, #16
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	4313      	orrs	r3, r2
 80038c0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	6819      	ldr	r1, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f003 0310 	and.w	r3, r3, #16
 80038d6:	22c0      	movs	r2, #192	@ 0xc0
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	43da      	mvns	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	400a      	ands	r2, r1
 80038e4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2201      	movs	r2, #1
 80038ea:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	371c      	adds	r7, #28
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800391c:	2300      	movs	r3, #0
 800391e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003920:	f7fe fe9a 	bl	8002658 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e099      	b.n	8003a64 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2202      	movs	r2, #2
 8003934:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 0201 	bic.w	r2, r2, #1
 800394e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003950:	e00f      	b.n	8003972 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003952:	f7fe fe81 	bl	8002658 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b05      	cmp	r3, #5
 800395e:	d908      	bls.n	8003972 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2220      	movs	r2, #32
 8003964:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2203      	movs	r2, #3
 800396a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e078      	b.n	8003a64 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1e8      	bne.n	8003952 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	4b38      	ldr	r3, [pc, #224]	@ (8003a6c <HAL_DMA_Init+0x158>)
 800398c:	4013      	ands	r3, r2
 800398e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800399e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	d107      	bne.n	80039dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d4:	4313      	orrs	r3, r2
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	4313      	orrs	r3, r2
 80039da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	f023 0307 	bic.w	r3, r3, #7
 80039f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	d117      	bne.n	8003a36 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00e      	beq.n	8003a36 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 fa77 	bl	8003f0c <DMA_CheckFifoParam>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d008      	beq.n	8003a36 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2240      	movs	r2, #64	@ 0x40
 8003a28:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003a32:	2301      	movs	r3, #1
 8003a34:	e016      	b.n	8003a64 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 fa2e 	bl	8003ea0 <DMA_CalcBaseAndBitshift>
 8003a44:	4603      	mov	r3, r0
 8003a46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a4c:	223f      	movs	r2, #63	@ 0x3f
 8003a4e:	409a      	lsls	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3718      	adds	r7, #24
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	e010803f 	.word	0xe010803f

08003a70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
 8003a7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a86:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d101      	bne.n	8003a96 <HAL_DMA_Start_IT+0x26>
 8003a92:	2302      	movs	r3, #2
 8003a94:	e048      	b.n	8003b28 <HAL_DMA_Start_IT+0xb8>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d137      	bne.n	8003b1a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2202      	movs	r2, #2
 8003aae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	68b9      	ldr	r1, [r7, #8]
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 f9c0 	bl	8003e44 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ac8:	223f      	movs	r2, #63	@ 0x3f
 8003aca:	409a      	lsls	r2, r3
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f042 0216 	orr.w	r2, r2, #22
 8003ade:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	695a      	ldr	r2, [r3, #20]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003aee:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d007      	beq.n	8003b08 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 0208 	orr.w	r2, r2, #8
 8003b06:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f042 0201 	orr.w	r2, r2, #1
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	e005      	b.n	8003b26 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b22:	2302      	movs	r3, #2
 8003b24:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b26:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3718      	adds	r7, #24
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003b3c:	4b8e      	ldr	r3, [pc, #568]	@ (8003d78 <HAL_DMA_IRQHandler+0x248>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a8e      	ldr	r2, [pc, #568]	@ (8003d7c <HAL_DMA_IRQHandler+0x24c>)
 8003b42:	fba2 2303 	umull	r2, r3, r2, r3
 8003b46:	0a9b      	lsrs	r3, r3, #10
 8003b48:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b4e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b5a:	2208      	movs	r2, #8
 8003b5c:	409a      	lsls	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	4013      	ands	r3, r2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d01a      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d013      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0204 	bic.w	r2, r2, #4
 8003b82:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b88:	2208      	movs	r2, #8
 8003b8a:	409a      	lsls	r2, r3
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b94:	f043 0201 	orr.w	r2, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	409a      	lsls	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d012      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00b      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	409a      	lsls	r2, r3
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bca:	f043 0202 	orr.w	r2, r3, #2
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bd6:	2204      	movs	r2, #4
 8003bd8:	409a      	lsls	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d012      	beq.n	8003c08 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00b      	beq.n	8003c08 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bf4:	2204      	movs	r2, #4
 8003bf6:	409a      	lsls	r2, r3
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c00:	f043 0204 	orr.w	r2, r3, #4
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c0c:	2210      	movs	r2, #16
 8003c0e:	409a      	lsls	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4013      	ands	r3, r2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d043      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d03c      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c2a:	2210      	movs	r2, #16
 8003c2c:	409a      	lsls	r2, r3
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d018      	beq.n	8003c72 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d108      	bne.n	8003c60 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d024      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	4798      	blx	r3
 8003c5e:	e01f      	b.n	8003ca0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d01b      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	4798      	blx	r3
 8003c70:	e016      	b.n	8003ca0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d107      	bne.n	8003c90 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 0208 	bic.w	r2, r2, #8
 8003c8e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d003      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	409a      	lsls	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4013      	ands	r3, r2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 808f 	beq.w	8003dd0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0310 	and.w	r3, r3, #16
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 8087 	beq.w	8003dd0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	409a      	lsls	r2, r3
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b05      	cmp	r3, #5
 8003cd8:	d136      	bne.n	8003d48 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 0216 	bic.w	r2, r2, #22
 8003ce8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	695a      	ldr	r2, [r3, #20]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003cf8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d103      	bne.n	8003d0a <HAL_DMA_IRQHandler+0x1da>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d007      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0208 	bic.w	r2, r2, #8
 8003d18:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d1e:	223f      	movs	r2, #63	@ 0x3f
 8003d20:	409a      	lsls	r2, r3
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d07e      	beq.n	8003e3c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	4798      	blx	r3
        }
        return;
 8003d46:	e079      	b.n	8003e3c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d01d      	beq.n	8003d92 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10d      	bne.n	8003d80 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d031      	beq.n	8003dd0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	4798      	blx	r3
 8003d74:	e02c      	b.n	8003dd0 <HAL_DMA_IRQHandler+0x2a0>
 8003d76:	bf00      	nop
 8003d78:	20000030 	.word	0x20000030
 8003d7c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d023      	beq.n	8003dd0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	4798      	blx	r3
 8003d90:	e01e      	b.n	8003dd0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10f      	bne.n	8003dc0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 0210 	bic.w	r2, r2, #16
 8003dae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d003      	beq.n	8003dd0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d032      	beq.n	8003e3e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d022      	beq.n	8003e2a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2205      	movs	r2, #5
 8003de8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 0201 	bic.w	r2, r2, #1
 8003dfa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	60bb      	str	r3, [r7, #8]
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d307      	bcc.n	8003e18 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1f2      	bne.n	8003dfc <HAL_DMA_IRQHandler+0x2cc>
 8003e16:	e000      	b.n	8003e1a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003e18:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d005      	beq.n	8003e3e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	4798      	blx	r3
 8003e3a:	e000      	b.n	8003e3e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003e3c:	bf00      	nop
    }
  }
}
 8003e3e:	3718      	adds	r7, #24
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
 8003e50:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003e60:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	2b40      	cmp	r3, #64	@ 0x40
 8003e70:	d108      	bne.n	8003e84 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e82:	e007      	b.n	8003e94 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	60da      	str	r2, [r3, #12]
}
 8003e94:	bf00      	nop
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	3b10      	subs	r3, #16
 8003eb0:	4a13      	ldr	r2, [pc, #76]	@ (8003f00 <DMA_CalcBaseAndBitshift+0x60>)
 8003eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb6:	091b      	lsrs	r3, r3, #4
 8003eb8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003eba:	4a12      	ldr	r2, [pc, #72]	@ (8003f04 <DMA_CalcBaseAndBitshift+0x64>)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2b03      	cmp	r3, #3
 8003ecc:	d908      	bls.n	8003ee0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8003f08 <DMA_CalcBaseAndBitshift+0x68>)
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	1d1a      	adds	r2, r3, #4
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	659a      	str	r2, [r3, #88]	@ 0x58
 8003ede:	e006      	b.n	8003eee <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	4b08      	ldr	r3, [pc, #32]	@ (8003f08 <DMA_CalcBaseAndBitshift+0x68>)
 8003ee8:	4013      	ands	r3, r2
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3714      	adds	r7, #20
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	aaaaaaab 	.word	0xaaaaaaab
 8003f04:	08007c80 	.word	0x08007c80
 8003f08:	fffffc00 	.word	0xfffffc00

08003f0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f14:	2300      	movs	r3, #0
 8003f16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d11f      	bne.n	8003f66 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	2b03      	cmp	r3, #3
 8003f2a:	d856      	bhi.n	8003fda <DMA_CheckFifoParam+0xce>
 8003f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f34 <DMA_CheckFifoParam+0x28>)
 8003f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f32:	bf00      	nop
 8003f34:	08003f45 	.word	0x08003f45
 8003f38:	08003f57 	.word	0x08003f57
 8003f3c:	08003f45 	.word	0x08003f45
 8003f40:	08003fdb 	.word	0x08003fdb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d046      	beq.n	8003fde <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f54:	e043      	b.n	8003fde <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f5a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003f5e:	d140      	bne.n	8003fe2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f64:	e03d      	b.n	8003fe2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f6e:	d121      	bne.n	8003fb4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	2b03      	cmp	r3, #3
 8003f74:	d837      	bhi.n	8003fe6 <DMA_CheckFifoParam+0xda>
 8003f76:	a201      	add	r2, pc, #4	@ (adr r2, 8003f7c <DMA_CheckFifoParam+0x70>)
 8003f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f7c:	08003f8d 	.word	0x08003f8d
 8003f80:	08003f93 	.word	0x08003f93
 8003f84:	08003f8d 	.word	0x08003f8d
 8003f88:	08003fa5 	.word	0x08003fa5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f90:	e030      	b.n	8003ff4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f96:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d025      	beq.n	8003fea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fa2:	e022      	b.n	8003fea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003fac:	d11f      	bne.n	8003fee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003fb2:	e01c      	b.n	8003fee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d903      	bls.n	8003fc2 <DMA_CheckFifoParam+0xb6>
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	2b03      	cmp	r3, #3
 8003fbe:	d003      	beq.n	8003fc8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003fc0:	e018      	b.n	8003ff4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	73fb      	strb	r3, [r7, #15]
      break;
 8003fc6:	e015      	b.n	8003ff4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fcc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00e      	beq.n	8003ff2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8003fd8:	e00b      	b.n	8003ff2 <DMA_CheckFifoParam+0xe6>
      break;
 8003fda:	bf00      	nop
 8003fdc:	e00a      	b.n	8003ff4 <DMA_CheckFifoParam+0xe8>
      break;
 8003fde:	bf00      	nop
 8003fe0:	e008      	b.n	8003ff4 <DMA_CheckFifoParam+0xe8>
      break;
 8003fe2:	bf00      	nop
 8003fe4:	e006      	b.n	8003ff4 <DMA_CheckFifoParam+0xe8>
      break;
 8003fe6:	bf00      	nop
 8003fe8:	e004      	b.n	8003ff4 <DMA_CheckFifoParam+0xe8>
      break;
 8003fea:	bf00      	nop
 8003fec:	e002      	b.n	8003ff4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003fee:	bf00      	nop
 8003ff0:	e000      	b.n	8003ff4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ff2:	bf00      	nop
    }
  } 
  
  return status; 
 8003ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3714      	adds	r7, #20
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop

08004004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004004:	b480      	push	{r7}
 8004006:	b089      	sub	sp, #36	@ 0x24
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800400e:	2300      	movs	r3, #0
 8004010:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004012:	2300      	movs	r3, #0
 8004014:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004016:	2300      	movs	r3, #0
 8004018:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800401a:	2300      	movs	r3, #0
 800401c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800401e:	2300      	movs	r3, #0
 8004020:	61fb      	str	r3, [r7, #28]
 8004022:	e175      	b.n	8004310 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004024:	2201      	movs	r2, #1
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	fa02 f303 	lsl.w	r3, r2, r3
 800402c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	4013      	ands	r3, r2
 8004036:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	429a      	cmp	r2, r3
 800403e:	f040 8164 	bne.w	800430a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	2b01      	cmp	r3, #1
 800404c:	d005      	beq.n	800405a <HAL_GPIO_Init+0x56>
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f003 0303 	and.w	r3, r3, #3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d130      	bne.n	80040bc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	2203      	movs	r2, #3
 8004066:	fa02 f303 	lsl.w	r3, r2, r3
 800406a:	43db      	mvns	r3, r3
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	4013      	ands	r3, r2
 8004070:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	68da      	ldr	r2, [r3, #12]
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	fa02 f303 	lsl.w	r3, r2, r3
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	4313      	orrs	r3, r2
 8004082:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	69ba      	ldr	r2, [r7, #24]
 8004088:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004090:	2201      	movs	r2, #1
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	fa02 f303 	lsl.w	r3, r2, r3
 8004098:	43db      	mvns	r3, r3
 800409a:	69ba      	ldr	r2, [r7, #24]
 800409c:	4013      	ands	r3, r2
 800409e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	091b      	lsrs	r3, r3, #4
 80040a6:	f003 0201 	and.w	r2, r3, #1
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	fa02 f303 	lsl.w	r3, r2, r3
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f003 0303 	and.w	r3, r3, #3
 80040c4:	2b03      	cmp	r3, #3
 80040c6:	d017      	beq.n	80040f8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	2203      	movs	r2, #3
 80040d4:	fa02 f303 	lsl.w	r3, r2, r3
 80040d8:	43db      	mvns	r3, r3
 80040da:	69ba      	ldr	r2, [r7, #24]
 80040dc:	4013      	ands	r3, r2
 80040de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f003 0303 	and.w	r3, r3, #3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d123      	bne.n	800414c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	08da      	lsrs	r2, r3, #3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3208      	adds	r2, #8
 800410c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	f003 0307 	and.w	r3, r3, #7
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	220f      	movs	r2, #15
 800411c:	fa02 f303 	lsl.w	r3, r2, r3
 8004120:	43db      	mvns	r3, r3
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	4013      	ands	r3, r2
 8004126:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	691a      	ldr	r2, [r3, #16]
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	f003 0307 	and.w	r3, r3, #7
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	fa02 f303 	lsl.w	r3, r2, r3
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	4313      	orrs	r3, r2
 800413c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	08da      	lsrs	r2, r3, #3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	3208      	adds	r2, #8
 8004146:	69b9      	ldr	r1, [r7, #24]
 8004148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	2203      	movs	r2, #3
 8004158:	fa02 f303 	lsl.w	r3, r2, r3
 800415c:	43db      	mvns	r3, r3
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	4013      	ands	r3, r2
 8004162:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f003 0203 	and.w	r2, r3, #3
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	005b      	lsls	r3, r3, #1
 8004170:	fa02 f303 	lsl.w	r3, r2, r3
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	4313      	orrs	r3, r2
 8004178:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 80be 	beq.w	800430a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800418e:	4b66      	ldr	r3, [pc, #408]	@ (8004328 <HAL_GPIO_Init+0x324>)
 8004190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004192:	4a65      	ldr	r2, [pc, #404]	@ (8004328 <HAL_GPIO_Init+0x324>)
 8004194:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004198:	6453      	str	r3, [r2, #68]	@ 0x44
 800419a:	4b63      	ldr	r3, [pc, #396]	@ (8004328 <HAL_GPIO_Init+0x324>)
 800419c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800419e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80041a6:	4a61      	ldr	r2, [pc, #388]	@ (800432c <HAL_GPIO_Init+0x328>)
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	089b      	lsrs	r3, r3, #2
 80041ac:	3302      	adds	r3, #2
 80041ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	f003 0303 	and.w	r3, r3, #3
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	220f      	movs	r2, #15
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	43db      	mvns	r3, r3
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	4013      	ands	r3, r2
 80041c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a58      	ldr	r2, [pc, #352]	@ (8004330 <HAL_GPIO_Init+0x32c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d037      	beq.n	8004242 <HAL_GPIO_Init+0x23e>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a57      	ldr	r2, [pc, #348]	@ (8004334 <HAL_GPIO_Init+0x330>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d031      	beq.n	800423e <HAL_GPIO_Init+0x23a>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a56      	ldr	r2, [pc, #344]	@ (8004338 <HAL_GPIO_Init+0x334>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d02b      	beq.n	800423a <HAL_GPIO_Init+0x236>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a55      	ldr	r2, [pc, #340]	@ (800433c <HAL_GPIO_Init+0x338>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d025      	beq.n	8004236 <HAL_GPIO_Init+0x232>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a54      	ldr	r2, [pc, #336]	@ (8004340 <HAL_GPIO_Init+0x33c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d01f      	beq.n	8004232 <HAL_GPIO_Init+0x22e>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a53      	ldr	r2, [pc, #332]	@ (8004344 <HAL_GPIO_Init+0x340>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d019      	beq.n	800422e <HAL_GPIO_Init+0x22a>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a52      	ldr	r2, [pc, #328]	@ (8004348 <HAL_GPIO_Init+0x344>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d013      	beq.n	800422a <HAL_GPIO_Init+0x226>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a51      	ldr	r2, [pc, #324]	@ (800434c <HAL_GPIO_Init+0x348>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d00d      	beq.n	8004226 <HAL_GPIO_Init+0x222>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a50      	ldr	r2, [pc, #320]	@ (8004350 <HAL_GPIO_Init+0x34c>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d007      	beq.n	8004222 <HAL_GPIO_Init+0x21e>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a4f      	ldr	r2, [pc, #316]	@ (8004354 <HAL_GPIO_Init+0x350>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d101      	bne.n	800421e <HAL_GPIO_Init+0x21a>
 800421a:	2309      	movs	r3, #9
 800421c:	e012      	b.n	8004244 <HAL_GPIO_Init+0x240>
 800421e:	230a      	movs	r3, #10
 8004220:	e010      	b.n	8004244 <HAL_GPIO_Init+0x240>
 8004222:	2308      	movs	r3, #8
 8004224:	e00e      	b.n	8004244 <HAL_GPIO_Init+0x240>
 8004226:	2307      	movs	r3, #7
 8004228:	e00c      	b.n	8004244 <HAL_GPIO_Init+0x240>
 800422a:	2306      	movs	r3, #6
 800422c:	e00a      	b.n	8004244 <HAL_GPIO_Init+0x240>
 800422e:	2305      	movs	r3, #5
 8004230:	e008      	b.n	8004244 <HAL_GPIO_Init+0x240>
 8004232:	2304      	movs	r3, #4
 8004234:	e006      	b.n	8004244 <HAL_GPIO_Init+0x240>
 8004236:	2303      	movs	r3, #3
 8004238:	e004      	b.n	8004244 <HAL_GPIO_Init+0x240>
 800423a:	2302      	movs	r3, #2
 800423c:	e002      	b.n	8004244 <HAL_GPIO_Init+0x240>
 800423e:	2301      	movs	r3, #1
 8004240:	e000      	b.n	8004244 <HAL_GPIO_Init+0x240>
 8004242:	2300      	movs	r3, #0
 8004244:	69fa      	ldr	r2, [r7, #28]
 8004246:	f002 0203 	and.w	r2, r2, #3
 800424a:	0092      	lsls	r2, r2, #2
 800424c:	4093      	lsls	r3, r2
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	4313      	orrs	r3, r2
 8004252:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004254:	4935      	ldr	r1, [pc, #212]	@ (800432c <HAL_GPIO_Init+0x328>)
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	089b      	lsrs	r3, r3, #2
 800425a:	3302      	adds	r3, #2
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004262:	4b3d      	ldr	r3, [pc, #244]	@ (8004358 <HAL_GPIO_Init+0x354>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	43db      	mvns	r3, r3
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	4013      	ands	r3, r2
 8004270:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800427e:	69ba      	ldr	r2, [r7, #24]
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	4313      	orrs	r3, r2
 8004284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004286:	4a34      	ldr	r2, [pc, #208]	@ (8004358 <HAL_GPIO_Init+0x354>)
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800428c:	4b32      	ldr	r3, [pc, #200]	@ (8004358 <HAL_GPIO_Init+0x354>)
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	43db      	mvns	r3, r3
 8004296:	69ba      	ldr	r2, [r7, #24]
 8004298:	4013      	ands	r3, r2
 800429a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d003      	beq.n	80042b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042b0:	4a29      	ldr	r2, [pc, #164]	@ (8004358 <HAL_GPIO_Init+0x354>)
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80042b6:	4b28      	ldr	r3, [pc, #160]	@ (8004358 <HAL_GPIO_Init+0x354>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	43db      	mvns	r3, r3
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	4013      	ands	r3, r2
 80042c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80042da:	4a1f      	ldr	r2, [pc, #124]	@ (8004358 <HAL_GPIO_Init+0x354>)
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042e0:	4b1d      	ldr	r3, [pc, #116]	@ (8004358 <HAL_GPIO_Init+0x354>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	43db      	mvns	r3, r3
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	4013      	ands	r3, r2
 80042ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d003      	beq.n	8004304 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	4313      	orrs	r3, r2
 8004302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004304:	4a14      	ldr	r2, [pc, #80]	@ (8004358 <HAL_GPIO_Init+0x354>)
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	3301      	adds	r3, #1
 800430e:	61fb      	str	r3, [r7, #28]
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	2b0f      	cmp	r3, #15
 8004314:	f67f ae86 	bls.w	8004024 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004318:	bf00      	nop
 800431a:	bf00      	nop
 800431c:	3724      	adds	r7, #36	@ 0x24
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	40023800 	.word	0x40023800
 800432c:	40013800 	.word	0x40013800
 8004330:	40020000 	.word	0x40020000
 8004334:	40020400 	.word	0x40020400
 8004338:	40020800 	.word	0x40020800
 800433c:	40020c00 	.word	0x40020c00
 8004340:	40021000 	.word	0x40021000
 8004344:	40021400 	.word	0x40021400
 8004348:	40021800 	.word	0x40021800
 800434c:	40021c00 	.word	0x40021c00
 8004350:	40022000 	.word	0x40022000
 8004354:	40022400 	.word	0x40022400
 8004358:	40013c00 	.word	0x40013c00

0800435c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	460b      	mov	r3, r1
 8004366:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	691a      	ldr	r2, [r3, #16]
 800436c:	887b      	ldrh	r3, [r7, #2]
 800436e:	4013      	ands	r3, r2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d002      	beq.n	800437a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004374:	2301      	movs	r3, #1
 8004376:	73fb      	strb	r3, [r7, #15]
 8004378:	e001      	b.n	800437e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800437a:	2300      	movs	r3, #0
 800437c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800437e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004380:	4618      	mov	r0, r3
 8004382:	3714      	adds	r7, #20
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	460b      	mov	r3, r1
 8004396:	807b      	strh	r3, [r7, #2]
 8004398:	4613      	mov	r3, r2
 800439a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800439c:	787b      	ldrb	r3, [r7, #1]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043a2:	887a      	ldrh	r2, [r7, #2]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80043a8:	e003      	b.n	80043b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80043aa:	887b      	ldrh	r3, [r7, #2]
 80043ac:	041a      	lsls	r2, r3, #16
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	619a      	str	r2, [r3, #24]
}
 80043b2:	bf00      	nop
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
	...

080043c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e07f      	b.n	80044d2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d106      	bne.n	80043ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7fd fac0 	bl	800196c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2224      	movs	r2, #36	@ 0x24
 80043f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 0201 	bic.w	r2, r2, #1
 8004402:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004410:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004420:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d107      	bne.n	800443a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	689a      	ldr	r2, [r3, #8]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004436:	609a      	str	r2, [r3, #8]
 8004438:	e006      	b.n	8004448 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	689a      	ldr	r2, [r3, #8]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004446:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	2b02      	cmp	r3, #2
 800444e:	d104      	bne.n	800445a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004458:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6859      	ldr	r1, [r3, #4]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	4b1d      	ldr	r3, [pc, #116]	@ (80044dc <HAL_I2C_Init+0x11c>)
 8004466:	430b      	orrs	r3, r1
 8004468:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68da      	ldr	r2, [r3, #12]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004478:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	691a      	ldr	r2, [r3, #16]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	69d9      	ldr	r1, [r3, #28]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a1a      	ldr	r2, [r3, #32]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f042 0201 	orr.w	r2, r2, #1
 80044b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2220      	movs	r2, #32
 80044be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	02008000 	.word	0x02008000

080044e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b20      	cmp	r3, #32
 80044f4:	d138      	bne.n	8004568 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d101      	bne.n	8004504 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004500:	2302      	movs	r3, #2
 8004502:	e032      	b.n	800456a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2224      	movs	r2, #36	@ 0x24
 8004510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 0201 	bic.w	r2, r2, #1
 8004522:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004532:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6819      	ldr	r1, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	430a      	orrs	r2, r1
 8004542:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0201 	orr.w	r2, r2, #1
 8004552:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2220      	movs	r2, #32
 8004558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004564:	2300      	movs	r3, #0
 8004566:	e000      	b.n	800456a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004568:	2302      	movs	r3, #2
  }
}
 800456a:	4618      	mov	r0, r3
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004576:	b480      	push	{r7}
 8004578:	b085      	sub	sp, #20
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
 800457e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b20      	cmp	r3, #32
 800458a:	d139      	bne.n	8004600 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004592:	2b01      	cmp	r3, #1
 8004594:	d101      	bne.n	800459a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004596:	2302      	movs	r3, #2
 8004598:	e033      	b.n	8004602 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2224      	movs	r2, #36	@ 0x24
 80045a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f022 0201 	bic.w	r2, r2, #1
 80045b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80045c8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	021b      	lsls	r3, r3, #8
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f042 0201 	orr.w	r2, r2, #1
 80045ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2220      	movs	r2, #32
 80045f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80045fc:	2300      	movs	r3, #0
 80045fe:	e000      	b.n	8004602 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004600:	2302      	movs	r3, #2
  }
}
 8004602:	4618      	mov	r0, r3
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
	...

08004610 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004616:	2300      	movs	r3, #0
 8004618:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800461a:	4b23      	ldr	r3, [pc, #140]	@ (80046a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800461c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461e:	4a22      	ldr	r2, [pc, #136]	@ (80046a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004620:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004624:	6413      	str	r3, [r2, #64]	@ 0x40
 8004626:	4b20      	ldr	r3, [pc, #128]	@ (80046a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800462e:	603b      	str	r3, [r7, #0]
 8004630:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004632:	4b1e      	ldr	r3, [pc, #120]	@ (80046ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a1d      	ldr	r2, [pc, #116]	@ (80046ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8004638:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800463c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800463e:	f7fe f80b 	bl	8002658 <HAL_GetTick>
 8004642:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004644:	e009      	b.n	800465a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004646:	f7fe f807 	bl	8002658 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004654:	d901      	bls.n	800465a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e022      	b.n	80046a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800465a:	4b14      	ldr	r3, [pc, #80]	@ (80046ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004662:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004666:	d1ee      	bne.n	8004646 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004668:	4b10      	ldr	r3, [pc, #64]	@ (80046ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a0f      	ldr	r2, [pc, #60]	@ (80046ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800466e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004672:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004674:	f7fd fff0 	bl	8002658 <HAL_GetTick>
 8004678:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800467a:	e009      	b.n	8004690 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800467c:	f7fd ffec 	bl	8002658 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800468a:	d901      	bls.n	8004690 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e007      	b.n	80046a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004690:	4b06      	ldr	r3, [pc, #24]	@ (80046ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004698:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800469c:	d1ee      	bne.n	800467c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	40023800 	.word	0x40023800
 80046ac:	40007000 	.word	0x40007000

080046b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80046b8:	2300      	movs	r3, #0
 80046ba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e29b      	b.n	8004bfe <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 8087 	beq.w	80047e2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046d4:	4b96      	ldr	r3, [pc, #600]	@ (8004930 <HAL_RCC_OscConfig+0x280>)
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f003 030c 	and.w	r3, r3, #12
 80046dc:	2b04      	cmp	r3, #4
 80046de:	d00c      	beq.n	80046fa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046e0:	4b93      	ldr	r3, [pc, #588]	@ (8004930 <HAL_RCC_OscConfig+0x280>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f003 030c 	and.w	r3, r3, #12
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d112      	bne.n	8004712 <HAL_RCC_OscConfig+0x62>
 80046ec:	4b90      	ldr	r3, [pc, #576]	@ (8004930 <HAL_RCC_OscConfig+0x280>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046f8:	d10b      	bne.n	8004712 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046fa:	4b8d      	ldr	r3, [pc, #564]	@ (8004930 <HAL_RCC_OscConfig+0x280>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d06c      	beq.n	80047e0 <HAL_RCC_OscConfig+0x130>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d168      	bne.n	80047e0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e275      	b.n	8004bfe <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800471a:	d106      	bne.n	800472a <HAL_RCC_OscConfig+0x7a>
 800471c:	4b84      	ldr	r3, [pc, #528]	@ (8004930 <HAL_RCC_OscConfig+0x280>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a83      	ldr	r2, [pc, #524]	@ (8004930 <HAL_RCC_OscConfig+0x280>)
 8004722:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004726:	6013      	str	r3, [r2, #0]
 8004728:	e02e      	b.n	8004788 <HAL_RCC_OscConfig+0xd8>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10c      	bne.n	800474c <HAL_RCC_OscConfig+0x9c>
 8004732:	4b7f      	ldr	r3, [pc, #508]	@ (8004930 <HAL_RCC_OscConfig+0x280>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a7e      	ldr	r2, [pc, #504]	@ (8004930 <HAL_RCC_OscConfig+0x280>)
 8004738:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800473c:	6013      	str	r3, [r2, #0]
 800473e:	4b7c      	ldr	r3, [pc, #496]	@ (8004930 <HAL_RCC_OscConfig+0x280>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a7b      	ldr	r2, [pc, #492]	@ (8004930 <HAL_RCC_OscConfig+0x280>)
 8004744:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004748:	6013      	str	r3, [r2, #0]
 800474a:	e01d      	b.n	8004788 <HAL_RCC_OscConfig+0xd8>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004754:	d10c      	bne.n	8004770 <HAL_RCC_OscConfig+0xc0>
 8004756:	4b76      	ldr	r3, [pc, #472]	@ (8004930 <HAL_RCC_OscConfig+0x280>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a75      	ldr	r2, [pc, #468]	@ (8004930 <HAL_RCC_OscConfig+0x280>)
 800475c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004760:	6013      	str	r3, [r2, #0]
 8004762:	4b73      	ldr	r3, [pc, #460]	@ (8004930 <HAL_RCC_OscConfig+0x280>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a72      	ldr	r2, [pc, #456]	@ (8004930 <HAL_RCC_OscConfig+0x280>)
 8004768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800476c:	6013      	str	r3, [r2, #0]
 800476e:	e00b      	b.n	8004788 <HAL_RCC_OscConfig+0xd8>
 8004770:	4b6f      	ldr	r3, [pc, #444]	@ (8004930 <HAL_RCC_OscConfig+0x280>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a6e      	ldr	r2, [pc, #440]	@ (8004930 <HAL_RCC_OscConfig+0x280>)
 8004776:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800477a:	6013      	str	r3, [r2, #0]
 800477c:	4b6c      	ldr	r3, [pc, #432]	@ (8004930 <HAL_RCC_OscConfig+0x280>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a6b      	ldr	r2, [pc, #428]	@ (8004930 <HAL_RCC_OscConfig+0x280>)
 8004782:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004786:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d013      	beq.n	80047b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004790:	f7fd ff62 	bl	8002658 <HAL_GetTick>
 8004794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004796:	e008      	b.n	80047aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004798:	f7fd ff5e 	bl	8002658 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b64      	cmp	r3, #100	@ 0x64
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e229      	b.n	8004bfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047aa:	4b61      	ldr	r3, [pc, #388]	@ (8004930 <HAL_RCC_OscConfig+0x280>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d0f0      	beq.n	8004798 <HAL_RCC_OscConfig+0xe8>
 80047b6:	e014      	b.n	80047e2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b8:	f7fd ff4e 	bl	8002658 <HAL_GetTick>
 80047bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047be:	e008      	b.n	80047d2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047c0:	f7fd ff4a 	bl	8002658 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b64      	cmp	r3, #100	@ 0x64
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e215      	b.n	8004bfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047d2:	4b57      	ldr	r3, [pc, #348]	@ (8004930 <HAL_RCC_OscConfig+0x280>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1f0      	bne.n	80047c0 <HAL_RCC_OscConfig+0x110>
 80047de:	e000      	b.n	80047e2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d069      	beq.n	80048c2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047ee:	4b50      	ldr	r3, [pc, #320]	@ (8004930 <HAL_RCC_OscConfig+0x280>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f003 030c 	and.w	r3, r3, #12
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00b      	beq.n	8004812 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047fa:	4b4d      	ldr	r3, [pc, #308]	@ (8004930 <HAL_RCC_OscConfig+0x280>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f003 030c 	and.w	r3, r3, #12
 8004802:	2b08      	cmp	r3, #8
 8004804:	d11c      	bne.n	8004840 <HAL_RCC_OscConfig+0x190>
 8004806:	4b4a      	ldr	r3, [pc, #296]	@ (8004930 <HAL_RCC_OscConfig+0x280>)
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d116      	bne.n	8004840 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004812:	4b47      	ldr	r3, [pc, #284]	@ (8004930 <HAL_RCC_OscConfig+0x280>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d005      	beq.n	800482a <HAL_RCC_OscConfig+0x17a>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d001      	beq.n	800482a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e1e9      	b.n	8004bfe <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800482a:	4b41      	ldr	r3, [pc, #260]	@ (8004930 <HAL_RCC_OscConfig+0x280>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	00db      	lsls	r3, r3, #3
 8004838:	493d      	ldr	r1, [pc, #244]	@ (8004930 <HAL_RCC_OscConfig+0x280>)
 800483a:	4313      	orrs	r3, r2
 800483c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800483e:	e040      	b.n	80048c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d023      	beq.n	8004890 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004848:	4b39      	ldr	r3, [pc, #228]	@ (8004930 <HAL_RCC_OscConfig+0x280>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a38      	ldr	r2, [pc, #224]	@ (8004930 <HAL_RCC_OscConfig+0x280>)
 800484e:	f043 0301 	orr.w	r3, r3, #1
 8004852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004854:	f7fd ff00 	bl	8002658 <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800485c:	f7fd fefc 	bl	8002658 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b02      	cmp	r3, #2
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e1c7      	b.n	8004bfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800486e:	4b30      	ldr	r3, [pc, #192]	@ (8004930 <HAL_RCC_OscConfig+0x280>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0f0      	beq.n	800485c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800487a:	4b2d      	ldr	r3, [pc, #180]	@ (8004930 <HAL_RCC_OscConfig+0x280>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	00db      	lsls	r3, r3, #3
 8004888:	4929      	ldr	r1, [pc, #164]	@ (8004930 <HAL_RCC_OscConfig+0x280>)
 800488a:	4313      	orrs	r3, r2
 800488c:	600b      	str	r3, [r1, #0]
 800488e:	e018      	b.n	80048c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004890:	4b27      	ldr	r3, [pc, #156]	@ (8004930 <HAL_RCC_OscConfig+0x280>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a26      	ldr	r2, [pc, #152]	@ (8004930 <HAL_RCC_OscConfig+0x280>)
 8004896:	f023 0301 	bic.w	r3, r3, #1
 800489a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800489c:	f7fd fedc 	bl	8002658 <HAL_GetTick>
 80048a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048a2:	e008      	b.n	80048b6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048a4:	f7fd fed8 	bl	8002658 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e1a3      	b.n	8004bfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048b6:	4b1e      	ldr	r3, [pc, #120]	@ (8004930 <HAL_RCC_OscConfig+0x280>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1f0      	bne.n	80048a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0308 	and.w	r3, r3, #8
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d038      	beq.n	8004940 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d019      	beq.n	800490a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048d6:	4b16      	ldr	r3, [pc, #88]	@ (8004930 <HAL_RCC_OscConfig+0x280>)
 80048d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048da:	4a15      	ldr	r2, [pc, #84]	@ (8004930 <HAL_RCC_OscConfig+0x280>)
 80048dc:	f043 0301 	orr.w	r3, r3, #1
 80048e0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e2:	f7fd feb9 	bl	8002658 <HAL_GetTick>
 80048e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048e8:	e008      	b.n	80048fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048ea:	f7fd feb5 	bl	8002658 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d901      	bls.n	80048fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e180      	b.n	8004bfe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004930 <HAL_RCC_OscConfig+0x280>)
 80048fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0f0      	beq.n	80048ea <HAL_RCC_OscConfig+0x23a>
 8004908:	e01a      	b.n	8004940 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800490a:	4b09      	ldr	r3, [pc, #36]	@ (8004930 <HAL_RCC_OscConfig+0x280>)
 800490c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800490e:	4a08      	ldr	r2, [pc, #32]	@ (8004930 <HAL_RCC_OscConfig+0x280>)
 8004910:	f023 0301 	bic.w	r3, r3, #1
 8004914:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004916:	f7fd fe9f 	bl	8002658 <HAL_GetTick>
 800491a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800491c:	e00a      	b.n	8004934 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800491e:	f7fd fe9b 	bl	8002658 <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	2b02      	cmp	r3, #2
 800492a:	d903      	bls.n	8004934 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e166      	b.n	8004bfe <HAL_RCC_OscConfig+0x54e>
 8004930:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004934:	4b92      	ldr	r3, [pc, #584]	@ (8004b80 <HAL_RCC_OscConfig+0x4d0>)
 8004936:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1ee      	bne.n	800491e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0304 	and.w	r3, r3, #4
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 80a4 	beq.w	8004a96 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800494e:	4b8c      	ldr	r3, [pc, #560]	@ (8004b80 <HAL_RCC_OscConfig+0x4d0>)
 8004950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10d      	bne.n	8004976 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800495a:	4b89      	ldr	r3, [pc, #548]	@ (8004b80 <HAL_RCC_OscConfig+0x4d0>)
 800495c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495e:	4a88      	ldr	r2, [pc, #544]	@ (8004b80 <HAL_RCC_OscConfig+0x4d0>)
 8004960:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004964:	6413      	str	r3, [r2, #64]	@ 0x40
 8004966:	4b86      	ldr	r3, [pc, #536]	@ (8004b80 <HAL_RCC_OscConfig+0x4d0>)
 8004968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800496e:	60bb      	str	r3, [r7, #8]
 8004970:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004972:	2301      	movs	r3, #1
 8004974:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004976:	4b83      	ldr	r3, [pc, #524]	@ (8004b84 <HAL_RCC_OscConfig+0x4d4>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800497e:	2b00      	cmp	r3, #0
 8004980:	d118      	bne.n	80049b4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004982:	4b80      	ldr	r3, [pc, #512]	@ (8004b84 <HAL_RCC_OscConfig+0x4d4>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a7f      	ldr	r2, [pc, #508]	@ (8004b84 <HAL_RCC_OscConfig+0x4d4>)
 8004988:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800498c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800498e:	f7fd fe63 	bl	8002658 <HAL_GetTick>
 8004992:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004994:	e008      	b.n	80049a8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004996:	f7fd fe5f 	bl	8002658 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	2b64      	cmp	r3, #100	@ 0x64
 80049a2:	d901      	bls.n	80049a8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e12a      	b.n	8004bfe <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049a8:	4b76      	ldr	r3, [pc, #472]	@ (8004b84 <HAL_RCC_OscConfig+0x4d4>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d0f0      	beq.n	8004996 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d106      	bne.n	80049ca <HAL_RCC_OscConfig+0x31a>
 80049bc:	4b70      	ldr	r3, [pc, #448]	@ (8004b80 <HAL_RCC_OscConfig+0x4d0>)
 80049be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049c0:	4a6f      	ldr	r2, [pc, #444]	@ (8004b80 <HAL_RCC_OscConfig+0x4d0>)
 80049c2:	f043 0301 	orr.w	r3, r3, #1
 80049c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80049c8:	e02d      	b.n	8004a26 <HAL_RCC_OscConfig+0x376>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10c      	bne.n	80049ec <HAL_RCC_OscConfig+0x33c>
 80049d2:	4b6b      	ldr	r3, [pc, #428]	@ (8004b80 <HAL_RCC_OscConfig+0x4d0>)
 80049d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049d6:	4a6a      	ldr	r2, [pc, #424]	@ (8004b80 <HAL_RCC_OscConfig+0x4d0>)
 80049d8:	f023 0301 	bic.w	r3, r3, #1
 80049dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80049de:	4b68      	ldr	r3, [pc, #416]	@ (8004b80 <HAL_RCC_OscConfig+0x4d0>)
 80049e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049e2:	4a67      	ldr	r2, [pc, #412]	@ (8004b80 <HAL_RCC_OscConfig+0x4d0>)
 80049e4:	f023 0304 	bic.w	r3, r3, #4
 80049e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80049ea:	e01c      	b.n	8004a26 <HAL_RCC_OscConfig+0x376>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	2b05      	cmp	r3, #5
 80049f2:	d10c      	bne.n	8004a0e <HAL_RCC_OscConfig+0x35e>
 80049f4:	4b62      	ldr	r3, [pc, #392]	@ (8004b80 <HAL_RCC_OscConfig+0x4d0>)
 80049f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049f8:	4a61      	ldr	r2, [pc, #388]	@ (8004b80 <HAL_RCC_OscConfig+0x4d0>)
 80049fa:	f043 0304 	orr.w	r3, r3, #4
 80049fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a00:	4b5f      	ldr	r3, [pc, #380]	@ (8004b80 <HAL_RCC_OscConfig+0x4d0>)
 8004a02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a04:	4a5e      	ldr	r2, [pc, #376]	@ (8004b80 <HAL_RCC_OscConfig+0x4d0>)
 8004a06:	f043 0301 	orr.w	r3, r3, #1
 8004a0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a0c:	e00b      	b.n	8004a26 <HAL_RCC_OscConfig+0x376>
 8004a0e:	4b5c      	ldr	r3, [pc, #368]	@ (8004b80 <HAL_RCC_OscConfig+0x4d0>)
 8004a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a12:	4a5b      	ldr	r2, [pc, #364]	@ (8004b80 <HAL_RCC_OscConfig+0x4d0>)
 8004a14:	f023 0301 	bic.w	r3, r3, #1
 8004a18:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a1a:	4b59      	ldr	r3, [pc, #356]	@ (8004b80 <HAL_RCC_OscConfig+0x4d0>)
 8004a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a1e:	4a58      	ldr	r2, [pc, #352]	@ (8004b80 <HAL_RCC_OscConfig+0x4d0>)
 8004a20:	f023 0304 	bic.w	r3, r3, #4
 8004a24:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d015      	beq.n	8004a5a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a2e:	f7fd fe13 	bl	8002658 <HAL_GetTick>
 8004a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a34:	e00a      	b.n	8004a4c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a36:	f7fd fe0f 	bl	8002658 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d901      	bls.n	8004a4c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e0d8      	b.n	8004bfe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a4c:	4b4c      	ldr	r3, [pc, #304]	@ (8004b80 <HAL_RCC_OscConfig+0x4d0>)
 8004a4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d0ee      	beq.n	8004a36 <HAL_RCC_OscConfig+0x386>
 8004a58:	e014      	b.n	8004a84 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a5a:	f7fd fdfd 	bl	8002658 <HAL_GetTick>
 8004a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a60:	e00a      	b.n	8004a78 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a62:	f7fd fdf9 	bl	8002658 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d901      	bls.n	8004a78 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e0c2      	b.n	8004bfe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a78:	4b41      	ldr	r3, [pc, #260]	@ (8004b80 <HAL_RCC_OscConfig+0x4d0>)
 8004a7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1ee      	bne.n	8004a62 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a84:	7dfb      	ldrb	r3, [r7, #23]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d105      	bne.n	8004a96 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a8a:	4b3d      	ldr	r3, [pc, #244]	@ (8004b80 <HAL_RCC_OscConfig+0x4d0>)
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8e:	4a3c      	ldr	r2, [pc, #240]	@ (8004b80 <HAL_RCC_OscConfig+0x4d0>)
 8004a90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a94:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f000 80ae 	beq.w	8004bfc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004aa0:	4b37      	ldr	r3, [pc, #220]	@ (8004b80 <HAL_RCC_OscConfig+0x4d0>)
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f003 030c 	and.w	r3, r3, #12
 8004aa8:	2b08      	cmp	r3, #8
 8004aaa:	d06d      	beq.n	8004b88 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d14b      	bne.n	8004b4c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ab4:	4b32      	ldr	r3, [pc, #200]	@ (8004b80 <HAL_RCC_OscConfig+0x4d0>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a31      	ldr	r2, [pc, #196]	@ (8004b80 <HAL_RCC_OscConfig+0x4d0>)
 8004aba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004abe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac0:	f7fd fdca 	bl	8002658 <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ac8:	f7fd fdc6 	bl	8002658 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e091      	b.n	8004bfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ada:	4b29      	ldr	r3, [pc, #164]	@ (8004b80 <HAL_RCC_OscConfig+0x4d0>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1f0      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	69da      	ldr	r2, [r3, #28]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af4:	019b      	lsls	r3, r3, #6
 8004af6:	431a      	orrs	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004afc:	085b      	lsrs	r3, r3, #1
 8004afe:	3b01      	subs	r3, #1
 8004b00:	041b      	lsls	r3, r3, #16
 8004b02:	431a      	orrs	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b08:	061b      	lsls	r3, r3, #24
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b10:	071b      	lsls	r3, r3, #28
 8004b12:	491b      	ldr	r1, [pc, #108]	@ (8004b80 <HAL_RCC_OscConfig+0x4d0>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b18:	4b19      	ldr	r3, [pc, #100]	@ (8004b80 <HAL_RCC_OscConfig+0x4d0>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a18      	ldr	r2, [pc, #96]	@ (8004b80 <HAL_RCC_OscConfig+0x4d0>)
 8004b1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b24:	f7fd fd98 	bl	8002658 <HAL_GetTick>
 8004b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b2a:	e008      	b.n	8004b3e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b2c:	f7fd fd94 	bl	8002658 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e05f      	b.n	8004bfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b3e:	4b10      	ldr	r3, [pc, #64]	@ (8004b80 <HAL_RCC_OscConfig+0x4d0>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d0f0      	beq.n	8004b2c <HAL_RCC_OscConfig+0x47c>
 8004b4a:	e057      	b.n	8004bfc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8004b80 <HAL_RCC_OscConfig+0x4d0>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a0b      	ldr	r2, [pc, #44]	@ (8004b80 <HAL_RCC_OscConfig+0x4d0>)
 8004b52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b58:	f7fd fd7e 	bl	8002658 <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b5e:	e008      	b.n	8004b72 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b60:	f7fd fd7a 	bl	8002658 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e045      	b.n	8004bfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b72:	4b03      	ldr	r3, [pc, #12]	@ (8004b80 <HAL_RCC_OscConfig+0x4d0>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1f0      	bne.n	8004b60 <HAL_RCC_OscConfig+0x4b0>
 8004b7e:	e03d      	b.n	8004bfc <HAL_RCC_OscConfig+0x54c>
 8004b80:	40023800 	.word	0x40023800
 8004b84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004b88:	4b1f      	ldr	r3, [pc, #124]	@ (8004c08 <HAL_RCC_OscConfig+0x558>)
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d030      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d129      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d122      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004bb8:	4013      	ands	r3, r2
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004bbe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d119      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bce:	085b      	lsrs	r3, r3, #1
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d10f      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004be2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d107      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bf2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d001      	beq.n	8004bfc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e000      	b.n	8004bfe <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3718      	adds	r7, #24
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	40023800 	.word	0x40023800

08004c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004c16:	2300      	movs	r3, #0
 8004c18:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e0d0      	b.n	8004dc6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c24:	4b6a      	ldr	r3, [pc, #424]	@ (8004dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 030f 	and.w	r3, r3, #15
 8004c2c:	683a      	ldr	r2, [r7, #0]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d910      	bls.n	8004c54 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c32:	4b67      	ldr	r3, [pc, #412]	@ (8004dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f023 020f 	bic.w	r2, r3, #15
 8004c3a:	4965      	ldr	r1, [pc, #404]	@ (8004dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c42:	4b63      	ldr	r3, [pc, #396]	@ (8004dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 030f 	and.w	r3, r3, #15
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d001      	beq.n	8004c54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e0b8      	b.n	8004dc6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0302 	and.w	r3, r3, #2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d020      	beq.n	8004ca2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0304 	and.w	r3, r3, #4
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d005      	beq.n	8004c78 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c6c:	4b59      	ldr	r3, [pc, #356]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	4a58      	ldr	r2, [pc, #352]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004c72:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004c76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0308 	and.w	r3, r3, #8
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d005      	beq.n	8004c90 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c84:	4b53      	ldr	r3, [pc, #332]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	4a52      	ldr	r2, [pc, #328]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004c8a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004c8e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c90:	4b50      	ldr	r3, [pc, #320]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	494d      	ldr	r1, [pc, #308]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d040      	beq.n	8004d30 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d107      	bne.n	8004cc6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cb6:	4b47      	ldr	r3, [pc, #284]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d115      	bne.n	8004cee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e07f      	b.n	8004dc6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d107      	bne.n	8004cde <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cce:	4b41      	ldr	r3, [pc, #260]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d109      	bne.n	8004cee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e073      	b.n	8004dc6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cde:	4b3d      	ldr	r3, [pc, #244]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e06b      	b.n	8004dc6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cee:	4b39      	ldr	r3, [pc, #228]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f023 0203 	bic.w	r2, r3, #3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	4936      	ldr	r1, [pc, #216]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d00:	f7fd fcaa 	bl	8002658 <HAL_GetTick>
 8004d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d06:	e00a      	b.n	8004d1e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d08:	f7fd fca6 	bl	8002658 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e053      	b.n	8004dc6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d1e:	4b2d      	ldr	r3, [pc, #180]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 020c 	and.w	r2, r3, #12
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d1eb      	bne.n	8004d08 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d30:	4b27      	ldr	r3, [pc, #156]	@ (8004dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 030f 	and.w	r3, r3, #15
 8004d38:	683a      	ldr	r2, [r7, #0]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d210      	bcs.n	8004d60 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d3e:	4b24      	ldr	r3, [pc, #144]	@ (8004dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f023 020f 	bic.w	r2, r3, #15
 8004d46:	4922      	ldr	r1, [pc, #136]	@ (8004dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d4e:	4b20      	ldr	r3, [pc, #128]	@ (8004dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 030f 	and.w	r3, r3, #15
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d001      	beq.n	8004d60 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e032      	b.n	8004dc6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0304 	and.w	r3, r3, #4
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d008      	beq.n	8004d7e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d6c:	4b19      	ldr	r3, [pc, #100]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	4916      	ldr	r1, [pc, #88]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0308 	and.w	r3, r3, #8
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d009      	beq.n	8004d9e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d8a:	4b12      	ldr	r3, [pc, #72]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	00db      	lsls	r3, r3, #3
 8004d98:	490e      	ldr	r1, [pc, #56]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d9e:	f000 f821 	bl	8004de4 <HAL_RCC_GetSysClockFreq>
 8004da2:	4602      	mov	r2, r0
 8004da4:	4b0b      	ldr	r3, [pc, #44]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	091b      	lsrs	r3, r3, #4
 8004daa:	f003 030f 	and.w	r3, r3, #15
 8004dae:	490a      	ldr	r1, [pc, #40]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1cc>)
 8004db0:	5ccb      	ldrb	r3, [r1, r3]
 8004db2:	fa22 f303 	lsr.w	r3, r2, r3
 8004db6:	4a09      	ldr	r2, [pc, #36]	@ (8004ddc <HAL_RCC_ClockConfig+0x1d0>)
 8004db8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004dba:	4b09      	ldr	r3, [pc, #36]	@ (8004de0 <HAL_RCC_ClockConfig+0x1d4>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7fd fc06 	bl	80025d0 <HAL_InitTick>

  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	40023c00 	.word	0x40023c00
 8004dd4:	40023800 	.word	0x40023800
 8004dd8:	08007c70 	.word	0x08007c70
 8004ddc:	20000030 	.word	0x20000030
 8004de0:	20000034 	.word	0x20000034

08004de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004de8:	b090      	sub	sp, #64	@ 0x40
 8004dea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004dec:	2300      	movs	r3, #0
 8004dee:	637b      	str	r3, [r7, #52]	@ 0x34
 8004df0:	2300      	movs	r3, #0
 8004df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004df4:	2300      	movs	r3, #0
 8004df6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004dfc:	4b59      	ldr	r3, [pc, #356]	@ (8004f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f003 030c 	and.w	r3, r3, #12
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d00d      	beq.n	8004e24 <HAL_RCC_GetSysClockFreq+0x40>
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	f200 80a1 	bhi.w	8004f50 <HAL_RCC_GetSysClockFreq+0x16c>
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d002      	beq.n	8004e18 <HAL_RCC_GetSysClockFreq+0x34>
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d003      	beq.n	8004e1e <HAL_RCC_GetSysClockFreq+0x3a>
 8004e16:	e09b      	b.n	8004f50 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e18:	4b53      	ldr	r3, [pc, #332]	@ (8004f68 <HAL_RCC_GetSysClockFreq+0x184>)
 8004e1a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004e1c:	e09b      	b.n	8004f56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e1e:	4b53      	ldr	r3, [pc, #332]	@ (8004f6c <HAL_RCC_GetSysClockFreq+0x188>)
 8004e20:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004e22:	e098      	b.n	8004f56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e24:	4b4f      	ldr	r3, [pc, #316]	@ (8004f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e2c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004e2e:	4b4d      	ldr	r3, [pc, #308]	@ (8004f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d028      	beq.n	8004e8c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e3a:	4b4a      	ldr	r3, [pc, #296]	@ (8004f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	099b      	lsrs	r3, r3, #6
 8004e40:	2200      	movs	r2, #0
 8004e42:	623b      	str	r3, [r7, #32]
 8004e44:	627a      	str	r2, [r7, #36]	@ 0x24
 8004e46:	6a3b      	ldr	r3, [r7, #32]
 8004e48:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	4b47      	ldr	r3, [pc, #284]	@ (8004f6c <HAL_RCC_GetSysClockFreq+0x188>)
 8004e50:	fb03 f201 	mul.w	r2, r3, r1
 8004e54:	2300      	movs	r3, #0
 8004e56:	fb00 f303 	mul.w	r3, r0, r3
 8004e5a:	4413      	add	r3, r2
 8004e5c:	4a43      	ldr	r2, [pc, #268]	@ (8004f6c <HAL_RCC_GetSysClockFreq+0x188>)
 8004e5e:	fba0 1202 	umull	r1, r2, r0, r2
 8004e62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e64:	460a      	mov	r2, r1
 8004e66:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004e68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e6a:	4413      	add	r3, r2
 8004e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e70:	2200      	movs	r2, #0
 8004e72:	61bb      	str	r3, [r7, #24]
 8004e74:	61fa      	str	r2, [r7, #28]
 8004e76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004e7e:	f7fb fb97 	bl	80005b0 <__aeabi_uldivmod>
 8004e82:	4602      	mov	r2, r0
 8004e84:	460b      	mov	r3, r1
 8004e86:	4613      	mov	r3, r2
 8004e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e8a:	e053      	b.n	8004f34 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e8c:	4b35      	ldr	r3, [pc, #212]	@ (8004f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	099b      	lsrs	r3, r3, #6
 8004e92:	2200      	movs	r2, #0
 8004e94:	613b      	str	r3, [r7, #16]
 8004e96:	617a      	str	r2, [r7, #20]
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004e9e:	f04f 0b00 	mov.w	fp, #0
 8004ea2:	4652      	mov	r2, sl
 8004ea4:	465b      	mov	r3, fp
 8004ea6:	f04f 0000 	mov.w	r0, #0
 8004eaa:	f04f 0100 	mov.w	r1, #0
 8004eae:	0159      	lsls	r1, r3, #5
 8004eb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004eb4:	0150      	lsls	r0, r2, #5
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	460b      	mov	r3, r1
 8004eba:	ebb2 080a 	subs.w	r8, r2, sl
 8004ebe:	eb63 090b 	sbc.w	r9, r3, fp
 8004ec2:	f04f 0200 	mov.w	r2, #0
 8004ec6:	f04f 0300 	mov.w	r3, #0
 8004eca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004ece:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004ed2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004ed6:	ebb2 0408 	subs.w	r4, r2, r8
 8004eda:	eb63 0509 	sbc.w	r5, r3, r9
 8004ede:	f04f 0200 	mov.w	r2, #0
 8004ee2:	f04f 0300 	mov.w	r3, #0
 8004ee6:	00eb      	lsls	r3, r5, #3
 8004ee8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004eec:	00e2      	lsls	r2, r4, #3
 8004eee:	4614      	mov	r4, r2
 8004ef0:	461d      	mov	r5, r3
 8004ef2:	eb14 030a 	adds.w	r3, r4, sl
 8004ef6:	603b      	str	r3, [r7, #0]
 8004ef8:	eb45 030b 	adc.w	r3, r5, fp
 8004efc:	607b      	str	r3, [r7, #4]
 8004efe:	f04f 0200 	mov.w	r2, #0
 8004f02:	f04f 0300 	mov.w	r3, #0
 8004f06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f0a:	4629      	mov	r1, r5
 8004f0c:	028b      	lsls	r3, r1, #10
 8004f0e:	4621      	mov	r1, r4
 8004f10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f14:	4621      	mov	r1, r4
 8004f16:	028a      	lsls	r2, r1, #10
 8004f18:	4610      	mov	r0, r2
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f1e:	2200      	movs	r2, #0
 8004f20:	60bb      	str	r3, [r7, #8]
 8004f22:	60fa      	str	r2, [r7, #12]
 8004f24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f28:	f7fb fb42 	bl	80005b0 <__aeabi_uldivmod>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	460b      	mov	r3, r1
 8004f30:	4613      	mov	r3, r2
 8004f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004f34:	4b0b      	ldr	r3, [pc, #44]	@ (8004f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	0c1b      	lsrs	r3, r3, #16
 8004f3a:	f003 0303 	and.w	r3, r3, #3
 8004f3e:	3301      	adds	r3, #1
 8004f40:	005b      	lsls	r3, r3, #1
 8004f42:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004f44:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f4c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004f4e:	e002      	b.n	8004f56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f50:	4b05      	ldr	r3, [pc, #20]	@ (8004f68 <HAL_RCC_GetSysClockFreq+0x184>)
 8004f52:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004f54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3740      	adds	r7, #64	@ 0x40
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f62:	bf00      	nop
 8004f64:	40023800 	.word	0x40023800
 8004f68:	00f42400 	.word	0x00f42400
 8004f6c:	01312d00 	.word	0x01312d00

08004f70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b088      	sub	sp, #32
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004f80:	2300      	movs	r3, #0
 8004f82:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004f84:	2300      	movs	r3, #0
 8004f86:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d012      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f98:	4b69      	ldr	r3, [pc, #420]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	4a68      	ldr	r2, [pc, #416]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f9e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004fa2:	6093      	str	r3, [r2, #8]
 8004fa4:	4b66      	ldr	r3, [pc, #408]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fa6:	689a      	ldr	r2, [r3, #8]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fac:	4964      	ldr	r1, [pc, #400]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d017      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fca:	4b5d      	ldr	r3, [pc, #372]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fd0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fd8:	4959      	ldr	r1, [pc, #356]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fe4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fe8:	d101      	bne.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004fea:	2301      	movs	r3, #1
 8004fec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d017      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005006:	4b4e      	ldr	r3, [pc, #312]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005008:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800500c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005014:	494a      	ldr	r1, [pc, #296]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005016:	4313      	orrs	r3, r2
 8005018:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005020:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005024:	d101      	bne.n	800502a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005026:	2301      	movs	r3, #1
 8005028:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005032:	2301      	movs	r3, #1
 8005034:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d001      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005042:	2301      	movs	r3, #1
 8005044:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0320 	and.w	r3, r3, #32
 800504e:	2b00      	cmp	r3, #0
 8005050:	f000 808b 	beq.w	800516a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005054:	4b3a      	ldr	r3, [pc, #232]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005058:	4a39      	ldr	r2, [pc, #228]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800505a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800505e:	6413      	str	r3, [r2, #64]	@ 0x40
 8005060:	4b37      	ldr	r3, [pc, #220]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005064:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005068:	60bb      	str	r3, [r7, #8]
 800506a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800506c:	4b35      	ldr	r3, [pc, #212]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a34      	ldr	r2, [pc, #208]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005072:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005076:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005078:	f7fd faee 	bl	8002658 <HAL_GetTick>
 800507c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800507e:	e008      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005080:	f7fd faea 	bl	8002658 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b64      	cmp	r3, #100	@ 0x64
 800508c:	d901      	bls.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e38f      	b.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005092:	4b2c      	ldr	r3, [pc, #176]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800509a:	2b00      	cmp	r3, #0
 800509c:	d0f0      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800509e:	4b28      	ldr	r3, [pc, #160]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050a6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d035      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d02e      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050bc:	4b20      	ldr	r3, [pc, #128]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050c4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050c6:	4b1e      	ldr	r3, [pc, #120]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ca:	4a1d      	ldr	r2, [pc, #116]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050d0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050d6:	4a1a      	ldr	r2, [pc, #104]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050dc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80050de:	4a18      	ldr	r2, [pc, #96]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80050e4:	4b16      	ldr	r3, [pc, #88]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050e8:	f003 0301 	and.w	r3, r3, #1
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d114      	bne.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f0:	f7fd fab2 	bl	8002658 <HAL_GetTick>
 80050f4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050f6:	e00a      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050f8:	f7fd faae 	bl	8002658 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005106:	4293      	cmp	r3, r2
 8005108:	d901      	bls.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e351      	b.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800510e:	4b0c      	ldr	r3, [pc, #48]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d0ee      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800511e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005122:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005126:	d111      	bne.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005128:	4b05      	ldr	r3, [pc, #20]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005134:	4b04      	ldr	r3, [pc, #16]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005136:	400b      	ands	r3, r1
 8005138:	4901      	ldr	r1, [pc, #4]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800513a:	4313      	orrs	r3, r2
 800513c:	608b      	str	r3, [r1, #8]
 800513e:	e00b      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005140:	40023800 	.word	0x40023800
 8005144:	40007000 	.word	0x40007000
 8005148:	0ffffcff 	.word	0x0ffffcff
 800514c:	4bac      	ldr	r3, [pc, #688]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	4aab      	ldr	r2, [pc, #684]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005152:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005156:	6093      	str	r3, [r2, #8]
 8005158:	4ba9      	ldr	r3, [pc, #676]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800515a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005164:	49a6      	ldr	r1, [pc, #664]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005166:	4313      	orrs	r3, r2
 8005168:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0310 	and.w	r3, r3, #16
 8005172:	2b00      	cmp	r3, #0
 8005174:	d010      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005176:	4ba2      	ldr	r3, [pc, #648]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005178:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800517c:	4aa0      	ldr	r2, [pc, #640]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800517e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005182:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005186:	4b9e      	ldr	r3, [pc, #632]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005188:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005190:	499b      	ldr	r1, [pc, #620]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005192:	4313      	orrs	r3, r2
 8005194:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00a      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051a4:	4b96      	ldr	r3, [pc, #600]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051aa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051b2:	4993      	ldr	r1, [pc, #588]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00a      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051c6:	4b8e      	ldr	r3, [pc, #568]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051cc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80051d4:	498a      	ldr	r1, [pc, #552]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00a      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051e8:	4b85      	ldr	r3, [pc, #532]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051f6:	4982      	ldr	r1, [pc, #520]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00a      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800520a:	4b7d      	ldr	r3, [pc, #500]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800520c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005210:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005218:	4979      	ldr	r1, [pc, #484]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800521a:	4313      	orrs	r3, r2
 800521c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00a      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800522c:	4b74      	ldr	r3, [pc, #464]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800522e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005232:	f023 0203 	bic.w	r2, r3, #3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800523a:	4971      	ldr	r1, [pc, #452]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800523c:	4313      	orrs	r3, r2
 800523e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00a      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800524e:	4b6c      	ldr	r3, [pc, #432]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005250:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005254:	f023 020c 	bic.w	r2, r3, #12
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800525c:	4968      	ldr	r1, [pc, #416]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800525e:	4313      	orrs	r3, r2
 8005260:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00a      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005270:	4b63      	ldr	r3, [pc, #396]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005276:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800527e:	4960      	ldr	r1, [pc, #384]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005280:	4313      	orrs	r3, r2
 8005282:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00a      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005292:	4b5b      	ldr	r3, [pc, #364]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005294:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005298:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052a0:	4957      	ldr	r1, [pc, #348]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00a      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80052b4:	4b52      	ldr	r3, [pc, #328]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ba:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052c2:	494f      	ldr	r1, [pc, #316]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00a      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80052d6:	4b4a      	ldr	r3, [pc, #296]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052dc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052e4:	4946      	ldr	r1, [pc, #280]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00a      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80052f8:	4b41      	ldr	r3, [pc, #260]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052fe:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005306:	493e      	ldr	r1, [pc, #248]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005308:	4313      	orrs	r3, r2
 800530a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00a      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800531a:	4b39      	ldr	r3, [pc, #228]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800531c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005320:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005328:	4935      	ldr	r1, [pc, #212]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800532a:	4313      	orrs	r3, r2
 800532c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00a      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800533c:	4b30      	ldr	r3, [pc, #192]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800533e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005342:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800534a:	492d      	ldr	r1, [pc, #180]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800534c:	4313      	orrs	r3, r2
 800534e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d011      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800535e:	4b28      	ldr	r3, [pc, #160]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005364:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800536c:	4924      	ldr	r1, [pc, #144]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800536e:	4313      	orrs	r3, r2
 8005370:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005378:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800537c:	d101      	bne.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800537e:	2301      	movs	r3, #1
 8005380:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0308 	and.w	r3, r3, #8
 800538a:	2b00      	cmp	r3, #0
 800538c:	d001      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800538e:	2301      	movs	r3, #1
 8005390:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00a      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800539e:	4b18      	ldr	r3, [pc, #96]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053a4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053ac:	4914      	ldr	r1, [pc, #80]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00b      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80053c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053c6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053d0:	490b      	ldr	r1, [pc, #44]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00f      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80053e4:	4b06      	ldr	r3, [pc, #24]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053ea:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053f4:	4902      	ldr	r1, [pc, #8]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80053fc:	e002      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80053fe:	bf00      	nop
 8005400:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00b      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005410:	4b8a      	ldr	r3, [pc, #552]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005412:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005416:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005420:	4986      	ldr	r1, [pc, #536]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005422:	4313      	orrs	r3, r2
 8005424:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00b      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005434:	4b81      	ldr	r3, [pc, #516]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005436:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800543a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005444:	497d      	ldr	r1, [pc, #500]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005446:	4313      	orrs	r3, r2
 8005448:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	2b01      	cmp	r3, #1
 8005450:	d006      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800545a:	2b00      	cmp	r3, #0
 800545c:	f000 80d6 	beq.w	800560c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005460:	4b76      	ldr	r3, [pc, #472]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a75      	ldr	r2, [pc, #468]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005466:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800546a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800546c:	f7fd f8f4 	bl	8002658 <HAL_GetTick>
 8005470:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005472:	e008      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005474:	f7fd f8f0 	bl	8002658 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	2b64      	cmp	r3, #100	@ 0x64
 8005480:	d901      	bls.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e195      	b.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005486:	4b6d      	ldr	r3, [pc, #436]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1f0      	bne.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b00      	cmp	r3, #0
 800549c:	d021      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d11d      	bne.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80054a6:	4b65      	ldr	r3, [pc, #404]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054ac:	0c1b      	lsrs	r3, r3, #16
 80054ae:	f003 0303 	and.w	r3, r3, #3
 80054b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80054b4:	4b61      	ldr	r3, [pc, #388]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054ba:	0e1b      	lsrs	r3, r3, #24
 80054bc:	f003 030f 	and.w	r3, r3, #15
 80054c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	019a      	lsls	r2, r3, #6
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	041b      	lsls	r3, r3, #16
 80054cc:	431a      	orrs	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	061b      	lsls	r3, r3, #24
 80054d2:	431a      	orrs	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	071b      	lsls	r3, r3, #28
 80054da:	4958      	ldr	r1, [pc, #352]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d004      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054f6:	d00a      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005500:	2b00      	cmp	r3, #0
 8005502:	d02e      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005508:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800550c:	d129      	bne.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800550e:	4b4b      	ldr	r3, [pc, #300]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005510:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005514:	0c1b      	lsrs	r3, r3, #16
 8005516:	f003 0303 	and.w	r3, r3, #3
 800551a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800551c:	4b47      	ldr	r3, [pc, #284]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800551e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005522:	0f1b      	lsrs	r3, r3, #28
 8005524:	f003 0307 	and.w	r3, r3, #7
 8005528:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	019a      	lsls	r2, r3, #6
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	041b      	lsls	r3, r3, #16
 8005534:	431a      	orrs	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	061b      	lsls	r3, r3, #24
 800553c:	431a      	orrs	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	071b      	lsls	r3, r3, #28
 8005542:	493e      	ldr	r1, [pc, #248]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005544:	4313      	orrs	r3, r2
 8005546:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800554a:	4b3c      	ldr	r3, [pc, #240]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800554c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005550:	f023 021f 	bic.w	r2, r3, #31
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005558:	3b01      	subs	r3, #1
 800555a:	4938      	ldr	r1, [pc, #224]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800555c:	4313      	orrs	r3, r2
 800555e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d01d      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800556e:	4b33      	ldr	r3, [pc, #204]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005570:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005574:	0e1b      	lsrs	r3, r3, #24
 8005576:	f003 030f 	and.w	r3, r3, #15
 800557a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800557c:	4b2f      	ldr	r3, [pc, #188]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800557e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005582:	0f1b      	lsrs	r3, r3, #28
 8005584:	f003 0307 	and.w	r3, r3, #7
 8005588:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	019a      	lsls	r2, r3, #6
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	041b      	lsls	r3, r3, #16
 8005596:	431a      	orrs	r2, r3
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	061b      	lsls	r3, r3, #24
 800559c:	431a      	orrs	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	071b      	lsls	r3, r3, #28
 80055a2:	4926      	ldr	r1, [pc, #152]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055a4:	4313      	orrs	r3, r2
 80055a6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d011      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	019a      	lsls	r2, r3, #6
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	041b      	lsls	r3, r3, #16
 80055c2:	431a      	orrs	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	061b      	lsls	r3, r3, #24
 80055ca:	431a      	orrs	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	071b      	lsls	r3, r3, #28
 80055d2:	491a      	ldr	r1, [pc, #104]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80055da:	4b18      	ldr	r3, [pc, #96]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a17      	ldr	r2, [pc, #92]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055e0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80055e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055e6:	f7fd f837 	bl	8002658 <HAL_GetTick>
 80055ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055ec:	e008      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80055ee:	f7fd f833 	bl	8002658 <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	2b64      	cmp	r3, #100	@ 0x64
 80055fa:	d901      	bls.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e0d8      	b.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005600:	4b0e      	ldr	r3, [pc, #56]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d0f0      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	2b01      	cmp	r3, #1
 8005610:	f040 80ce 	bne.w	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005614:	4b09      	ldr	r3, [pc, #36]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a08      	ldr	r2, [pc, #32]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800561a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800561e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005620:	f7fd f81a 	bl	8002658 <HAL_GetTick>
 8005624:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005626:	e00b      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005628:	f7fd f816 	bl	8002658 <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	2b64      	cmp	r3, #100	@ 0x64
 8005634:	d904      	bls.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e0bb      	b.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800563a:	bf00      	nop
 800563c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005640:	4b5e      	ldr	r3, [pc, #376]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005648:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800564c:	d0ec      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d003      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800565e:	2b00      	cmp	r3, #0
 8005660:	d009      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800566a:	2b00      	cmp	r3, #0
 800566c:	d02e      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005672:	2b00      	cmp	r3, #0
 8005674:	d12a      	bne.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005676:	4b51      	ldr	r3, [pc, #324]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005678:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800567c:	0c1b      	lsrs	r3, r3, #16
 800567e:	f003 0303 	and.w	r3, r3, #3
 8005682:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005684:	4b4d      	ldr	r3, [pc, #308]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800568a:	0f1b      	lsrs	r3, r3, #28
 800568c:	f003 0307 	and.w	r3, r3, #7
 8005690:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	019a      	lsls	r2, r3, #6
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	041b      	lsls	r3, r3, #16
 800569c:	431a      	orrs	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	061b      	lsls	r3, r3, #24
 80056a4:	431a      	orrs	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	071b      	lsls	r3, r3, #28
 80056aa:	4944      	ldr	r1, [pc, #272]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80056b2:	4b42      	ldr	r3, [pc, #264]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056b8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c0:	3b01      	subs	r3, #1
 80056c2:	021b      	lsls	r3, r3, #8
 80056c4:	493d      	ldr	r1, [pc, #244]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d022      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056e0:	d11d      	bne.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80056e2:	4b36      	ldr	r3, [pc, #216]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056e8:	0e1b      	lsrs	r3, r3, #24
 80056ea:	f003 030f 	and.w	r3, r3, #15
 80056ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80056f0:	4b32      	ldr	r3, [pc, #200]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056f6:	0f1b      	lsrs	r3, r3, #28
 80056f8:	f003 0307 	and.w	r3, r3, #7
 80056fc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	019a      	lsls	r2, r3, #6
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	041b      	lsls	r3, r3, #16
 800570a:	431a      	orrs	r2, r3
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	061b      	lsls	r3, r3, #24
 8005710:	431a      	orrs	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	071b      	lsls	r3, r3, #28
 8005716:	4929      	ldr	r1, [pc, #164]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005718:	4313      	orrs	r3, r2
 800571a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0308 	and.w	r3, r3, #8
 8005726:	2b00      	cmp	r3, #0
 8005728:	d028      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800572a:	4b24      	ldr	r3, [pc, #144]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800572c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005730:	0e1b      	lsrs	r3, r3, #24
 8005732:	f003 030f 	and.w	r3, r3, #15
 8005736:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005738:	4b20      	ldr	r3, [pc, #128]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800573a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800573e:	0c1b      	lsrs	r3, r3, #16
 8005740:	f003 0303 	and.w	r3, r3, #3
 8005744:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	019a      	lsls	r2, r3, #6
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	041b      	lsls	r3, r3, #16
 8005750:	431a      	orrs	r2, r3
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	061b      	lsls	r3, r3, #24
 8005756:	431a      	orrs	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	69db      	ldr	r3, [r3, #28]
 800575c:	071b      	lsls	r3, r3, #28
 800575e:	4917      	ldr	r1, [pc, #92]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005760:	4313      	orrs	r3, r2
 8005762:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005766:	4b15      	ldr	r3, [pc, #84]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005768:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800576c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005774:	4911      	ldr	r1, [pc, #68]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005776:	4313      	orrs	r3, r2
 8005778:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800577c:	4b0f      	ldr	r3, [pc, #60]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a0e      	ldr	r2, [pc, #56]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005782:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005786:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005788:	f7fc ff66 	bl	8002658 <HAL_GetTick>
 800578c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800578e:	e008      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005790:	f7fc ff62 	bl	8002658 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	2b64      	cmp	r3, #100	@ 0x64
 800579c:	d901      	bls.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e007      	b.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80057a2:	4b06      	ldr	r3, [pc, #24]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057ae:	d1ef      	bne.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3720      	adds	r7, #32
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	40023800 	.word	0x40023800

080057c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e049      	b.n	8005866 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d106      	bne.n	80057ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7fc fd2e 	bl	8002248 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	3304      	adds	r3, #4
 80057fc:	4619      	mov	r1, r3
 80057fe:	4610      	mov	r0, r2
 8005800:	f000 fe0c 	bl	800641c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3708      	adds	r7, #8
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
	...

08005870 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b01      	cmp	r3, #1
 8005882:	d001      	beq.n	8005888 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e054      	b.n	8005932 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2202      	movs	r2, #2
 800588c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68da      	ldr	r2, [r3, #12]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f042 0201 	orr.w	r2, r2, #1
 800589e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a26      	ldr	r2, [pc, #152]	@ (8005940 <HAL_TIM_Base_Start_IT+0xd0>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d022      	beq.n	80058f0 <HAL_TIM_Base_Start_IT+0x80>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058b2:	d01d      	beq.n	80058f0 <HAL_TIM_Base_Start_IT+0x80>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a22      	ldr	r2, [pc, #136]	@ (8005944 <HAL_TIM_Base_Start_IT+0xd4>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d018      	beq.n	80058f0 <HAL_TIM_Base_Start_IT+0x80>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a21      	ldr	r2, [pc, #132]	@ (8005948 <HAL_TIM_Base_Start_IT+0xd8>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d013      	beq.n	80058f0 <HAL_TIM_Base_Start_IT+0x80>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a1f      	ldr	r2, [pc, #124]	@ (800594c <HAL_TIM_Base_Start_IT+0xdc>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d00e      	beq.n	80058f0 <HAL_TIM_Base_Start_IT+0x80>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a1e      	ldr	r2, [pc, #120]	@ (8005950 <HAL_TIM_Base_Start_IT+0xe0>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d009      	beq.n	80058f0 <HAL_TIM_Base_Start_IT+0x80>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a1c      	ldr	r2, [pc, #112]	@ (8005954 <HAL_TIM_Base_Start_IT+0xe4>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d004      	beq.n	80058f0 <HAL_TIM_Base_Start_IT+0x80>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a1b      	ldr	r2, [pc, #108]	@ (8005958 <HAL_TIM_Base_Start_IT+0xe8>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d115      	bne.n	800591c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689a      	ldr	r2, [r3, #8]
 80058f6:	4b19      	ldr	r3, [pc, #100]	@ (800595c <HAL_TIM_Base_Start_IT+0xec>)
 80058f8:	4013      	ands	r3, r2
 80058fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2b06      	cmp	r3, #6
 8005900:	d015      	beq.n	800592e <HAL_TIM_Base_Start_IT+0xbe>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005908:	d011      	beq.n	800592e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f042 0201 	orr.w	r2, r2, #1
 8005918:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800591a:	e008      	b.n	800592e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f042 0201 	orr.w	r2, r2, #1
 800592a:	601a      	str	r2, [r3, #0]
 800592c:	e000      	b.n	8005930 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800592e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3714      	adds	r7, #20
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	40010000 	.word	0x40010000
 8005944:	40000400 	.word	0x40000400
 8005948:	40000800 	.word	0x40000800
 800594c:	40000c00 	.word	0x40000c00
 8005950:	40010400 	.word	0x40010400
 8005954:	40014000 	.word	0x40014000
 8005958:	40001800 	.word	0x40001800
 800595c:	00010007 	.word	0x00010007

08005960 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d101      	bne.n	8005972 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e049      	b.n	8005a06 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d106      	bne.n	800598c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f841 	bl	8005a0e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2202      	movs	r2, #2
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	3304      	adds	r3, #4
 800599c:	4619      	mov	r1, r3
 800599e:	4610      	mov	r0, r2
 80059a0:	f000 fd3c 	bl	800641c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3708      	adds	r7, #8
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b083      	sub	sp, #12
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005a16:	bf00      	nop
 8005a18:	370c      	adds	r7, #12
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr

08005a22 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b082      	sub	sp, #8
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e049      	b.n	8005ac8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d106      	bne.n	8005a4e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 f841 	bl	8005ad0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2202      	movs	r2, #2
 8005a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	3304      	adds	r3, #4
 8005a5e:	4619      	mov	r1, r3
 8005a60:	4610      	mov	r0, r2
 8005a62:	f000 fcdb 	bl	800641c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2201      	movs	r2, #1
 8005a92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3708      	adds	r7, #8
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d101      	bne.n	8005af6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e049      	b.n	8005b8a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d106      	bne.n	8005b10 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f7fc fbf2 	bl	80022f4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2202      	movs	r2, #2
 8005b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	3304      	adds	r3, #4
 8005b20:	4619      	mov	r1, r3
 8005b22:	4610      	mov	r0, r2
 8005b24:	f000 fc7a 	bl	800641c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3708      	adds	r7, #8
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b082      	sub	sp, #8
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	f003 0302 	and.w	r3, r3, #2
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d122      	bne.n	8005bee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	f003 0302 	and.w	r3, r3, #2
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d11b      	bne.n	8005bee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f06f 0202 	mvn.w	r2, #2
 8005bbe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	f003 0303 	and.w	r3, r3, #3
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d003      	beq.n	8005bdc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 fc03 	bl	80063e0 <HAL_TIM_IC_CaptureCallback>
 8005bda:	e005      	b.n	8005be8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 fbf5 	bl	80063cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 fc06 	bl	80063f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	f003 0304 	and.w	r3, r3, #4
 8005bf8:	2b04      	cmp	r3, #4
 8005bfa:	d122      	bne.n	8005c42 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	f003 0304 	and.w	r3, r3, #4
 8005c06:	2b04      	cmp	r3, #4
 8005c08:	d11b      	bne.n	8005c42 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f06f 0204 	mvn.w	r2, #4
 8005c12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2202      	movs	r2, #2
 8005c18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d003      	beq.n	8005c30 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 fbd9 	bl	80063e0 <HAL_TIM_IC_CaptureCallback>
 8005c2e:	e005      	b.n	8005c3c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 fbcb 	bl	80063cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 fbdc 	bl	80063f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	f003 0308 	and.w	r3, r3, #8
 8005c4c:	2b08      	cmp	r3, #8
 8005c4e:	d122      	bne.n	8005c96 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	f003 0308 	and.w	r3, r3, #8
 8005c5a:	2b08      	cmp	r3, #8
 8005c5c:	d11b      	bne.n	8005c96 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f06f 0208 	mvn.w	r2, #8
 8005c66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2204      	movs	r2, #4
 8005c6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	69db      	ldr	r3, [r3, #28]
 8005c74:	f003 0303 	and.w	r3, r3, #3
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d003      	beq.n	8005c84 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 fbaf 	bl	80063e0 <HAL_TIM_IC_CaptureCallback>
 8005c82:	e005      	b.n	8005c90 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 fba1 	bl	80063cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 fbb2 	bl	80063f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	f003 0310 	and.w	r3, r3, #16
 8005ca0:	2b10      	cmp	r3, #16
 8005ca2:	d122      	bne.n	8005cea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	f003 0310 	and.w	r3, r3, #16
 8005cae:	2b10      	cmp	r3, #16
 8005cb0:	d11b      	bne.n	8005cea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f06f 0210 	mvn.w	r2, #16
 8005cba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2208      	movs	r2, #8
 8005cc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	69db      	ldr	r3, [r3, #28]
 8005cc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d003      	beq.n	8005cd8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 fb85 	bl	80063e0 <HAL_TIM_IC_CaptureCallback>
 8005cd6:	e005      	b.n	8005ce4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 fb77 	bl	80063cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fb88 	bl	80063f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d10e      	bne.n	8005d16 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d107      	bne.n	8005d16 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f06f 0201 	mvn.w	r2, #1
 8005d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 fb51 	bl	80063b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d20:	2b80      	cmp	r3, #128	@ 0x80
 8005d22:	d10e      	bne.n	8005d42 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d2e:	2b80      	cmp	r3, #128	@ 0x80
 8005d30:	d107      	bne.n	8005d42 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f001 f945 	bl	8006fcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d50:	d10e      	bne.n	8005d70 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d5c:	2b80      	cmp	r3, #128	@ 0x80
 8005d5e:	d107      	bne.n	8005d70 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f001 f938 	bl	8006fe0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d7a:	2b40      	cmp	r3, #64	@ 0x40
 8005d7c:	d10e      	bne.n	8005d9c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d88:	2b40      	cmp	r3, #64	@ 0x40
 8005d8a:	d107      	bne.n	8005d9c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 fb36 	bl	8006408 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	f003 0320 	and.w	r3, r3, #32
 8005da6:	2b20      	cmp	r3, #32
 8005da8:	d10e      	bne.n	8005dc8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	f003 0320 	and.w	r3, r3, #32
 8005db4:	2b20      	cmp	r3, #32
 8005db6:	d107      	bne.n	8005dc8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f06f 0220 	mvn.w	r2, #32
 8005dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f001 f8f8 	bl	8006fb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dc8:	bf00      	nop
 8005dca:	3708      	adds	r7, #8
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d101      	bne.n	8005dee <HAL_TIM_OC_ConfigChannel+0x1e>
 8005dea:	2302      	movs	r3, #2
 8005dec:	e066      	b.n	8005ebc <HAL_TIM_OC_ConfigChannel+0xec>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2b14      	cmp	r3, #20
 8005dfa:	d857      	bhi.n	8005eac <HAL_TIM_OC_ConfigChannel+0xdc>
 8005dfc:	a201      	add	r2, pc, #4	@ (adr r2, 8005e04 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e02:	bf00      	nop
 8005e04:	08005e59 	.word	0x08005e59
 8005e08:	08005ead 	.word	0x08005ead
 8005e0c:	08005ead 	.word	0x08005ead
 8005e10:	08005ead 	.word	0x08005ead
 8005e14:	08005e67 	.word	0x08005e67
 8005e18:	08005ead 	.word	0x08005ead
 8005e1c:	08005ead 	.word	0x08005ead
 8005e20:	08005ead 	.word	0x08005ead
 8005e24:	08005e75 	.word	0x08005e75
 8005e28:	08005ead 	.word	0x08005ead
 8005e2c:	08005ead 	.word	0x08005ead
 8005e30:	08005ead 	.word	0x08005ead
 8005e34:	08005e83 	.word	0x08005e83
 8005e38:	08005ead 	.word	0x08005ead
 8005e3c:	08005ead 	.word	0x08005ead
 8005e40:	08005ead 	.word	0x08005ead
 8005e44:	08005e91 	.word	0x08005e91
 8005e48:	08005ead 	.word	0x08005ead
 8005e4c:	08005ead 	.word	0x08005ead
 8005e50:	08005ead 	.word	0x08005ead
 8005e54:	08005e9f 	.word	0x08005e9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68b9      	ldr	r1, [r7, #8]
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f000 fb7c 	bl	800655c <TIM_OC1_SetConfig>
      break;
 8005e64:	e025      	b.n	8005eb2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68b9      	ldr	r1, [r7, #8]
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f000 fbe7 	bl	8006640 <TIM_OC2_SetConfig>
      break;
 8005e72:	e01e      	b.n	8005eb2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68b9      	ldr	r1, [r7, #8]
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f000 fc58 	bl	8006730 <TIM_OC3_SetConfig>
      break;
 8005e80:	e017      	b.n	8005eb2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68b9      	ldr	r1, [r7, #8]
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f000 fcc7 	bl	800681c <TIM_OC4_SetConfig>
      break;
 8005e8e:	e010      	b.n	8005eb2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68b9      	ldr	r1, [r7, #8]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f000 fd18 	bl	80068cc <TIM_OC5_SetConfig>
      break;
 8005e9c:	e009      	b.n	8005eb2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68b9      	ldr	r1, [r7, #8]
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f000 fd63 	bl	8006970 <TIM_OC6_SetConfig>
      break;
 8005eaa:	e002      	b.n	8005eb2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	75fb      	strb	r3, [r7, #23]
      break;
 8005eb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3718      	adds	r7, #24
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d101      	bne.n	8005ee2 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005ede:	2302      	movs	r3, #2
 8005ee0:	e088      	b.n	8005ff4 <HAL_TIM_IC_ConfigChannel+0x130>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d11b      	bne.n	8005f28 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005f00:	f000 fd8a 	bl	8006a18 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	699a      	ldr	r2, [r3, #24]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f022 020c 	bic.w	r2, r2, #12
 8005f12:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6999      	ldr	r1, [r3, #24]
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	689a      	ldr	r2, [r3, #8]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	430a      	orrs	r2, r1
 8005f24:	619a      	str	r2, [r3, #24]
 8005f26:	e060      	b.n	8005fea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2b04      	cmp	r3, #4
 8005f2c:	d11c      	bne.n	8005f68 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005f3e:	f000 fe0e 	bl	8006b5e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	699a      	ldr	r2, [r3, #24]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005f50:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	6999      	ldr	r1, [r3, #24]
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	021a      	lsls	r2, r3, #8
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	430a      	orrs	r2, r1
 8005f64:	619a      	str	r2, [r3, #24]
 8005f66:	e040      	b.n	8005fea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b08      	cmp	r3, #8
 8005f6c:	d11b      	bne.n	8005fa6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005f7e:	f000 fe5b 	bl	8006c38 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	69da      	ldr	r2, [r3, #28]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f022 020c 	bic.w	r2, r2, #12
 8005f90:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	69d9      	ldr	r1, [r3, #28]
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	689a      	ldr	r2, [r3, #8]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	61da      	str	r2, [r3, #28]
 8005fa4:	e021      	b.n	8005fea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2b0c      	cmp	r3, #12
 8005faa:	d11c      	bne.n	8005fe6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005fbc:	f000 fe78 	bl	8006cb0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	69da      	ldr	r2, [r3, #28]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005fce:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	69d9      	ldr	r1, [r3, #28]
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	021a      	lsls	r2, r3, #8
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	61da      	str	r2, [r3, #28]
 8005fe4:	e001      	b.n	8005fea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3718      	adds	r7, #24
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b086      	sub	sp, #24
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006008:	2300      	movs	r3, #0
 800600a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006012:	2b01      	cmp	r3, #1
 8006014:	d101      	bne.n	800601a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006016:	2302      	movs	r3, #2
 8006018:	e0ff      	b.n	800621a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2b14      	cmp	r3, #20
 8006026:	f200 80f0 	bhi.w	800620a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800602a:	a201      	add	r2, pc, #4	@ (adr r2, 8006030 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800602c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006030:	08006085 	.word	0x08006085
 8006034:	0800620b 	.word	0x0800620b
 8006038:	0800620b 	.word	0x0800620b
 800603c:	0800620b 	.word	0x0800620b
 8006040:	080060c5 	.word	0x080060c5
 8006044:	0800620b 	.word	0x0800620b
 8006048:	0800620b 	.word	0x0800620b
 800604c:	0800620b 	.word	0x0800620b
 8006050:	08006107 	.word	0x08006107
 8006054:	0800620b 	.word	0x0800620b
 8006058:	0800620b 	.word	0x0800620b
 800605c:	0800620b 	.word	0x0800620b
 8006060:	08006147 	.word	0x08006147
 8006064:	0800620b 	.word	0x0800620b
 8006068:	0800620b 	.word	0x0800620b
 800606c:	0800620b 	.word	0x0800620b
 8006070:	08006189 	.word	0x08006189
 8006074:	0800620b 	.word	0x0800620b
 8006078:	0800620b 	.word	0x0800620b
 800607c:	0800620b 	.word	0x0800620b
 8006080:	080061c9 	.word	0x080061c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68b9      	ldr	r1, [r7, #8]
 800608a:	4618      	mov	r0, r3
 800608c:	f000 fa66 	bl	800655c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	699a      	ldr	r2, [r3, #24]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f042 0208 	orr.w	r2, r2, #8
 800609e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	699a      	ldr	r2, [r3, #24]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f022 0204 	bic.w	r2, r2, #4
 80060ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6999      	ldr	r1, [r3, #24]
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	691a      	ldr	r2, [r3, #16]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	430a      	orrs	r2, r1
 80060c0:	619a      	str	r2, [r3, #24]
      break;
 80060c2:	e0a5      	b.n	8006210 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68b9      	ldr	r1, [r7, #8]
 80060ca:	4618      	mov	r0, r3
 80060cc:	f000 fab8 	bl	8006640 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	699a      	ldr	r2, [r3, #24]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	699a      	ldr	r2, [r3, #24]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6999      	ldr	r1, [r3, #24]
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	021a      	lsls	r2, r3, #8
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	430a      	orrs	r2, r1
 8006102:	619a      	str	r2, [r3, #24]
      break;
 8006104:	e084      	b.n	8006210 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68b9      	ldr	r1, [r7, #8]
 800610c:	4618      	mov	r0, r3
 800610e:	f000 fb0f 	bl	8006730 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	69da      	ldr	r2, [r3, #28]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f042 0208 	orr.w	r2, r2, #8
 8006120:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	69da      	ldr	r2, [r3, #28]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f022 0204 	bic.w	r2, r2, #4
 8006130:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	69d9      	ldr	r1, [r3, #28]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	691a      	ldr	r2, [r3, #16]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	430a      	orrs	r2, r1
 8006142:	61da      	str	r2, [r3, #28]
      break;
 8006144:	e064      	b.n	8006210 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68b9      	ldr	r1, [r7, #8]
 800614c:	4618      	mov	r0, r3
 800614e:	f000 fb65 	bl	800681c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	69da      	ldr	r2, [r3, #28]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006160:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	69da      	ldr	r2, [r3, #28]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006170:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	69d9      	ldr	r1, [r3, #28]
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	021a      	lsls	r2, r3, #8
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	430a      	orrs	r2, r1
 8006184:	61da      	str	r2, [r3, #28]
      break;
 8006186:	e043      	b.n	8006210 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68b9      	ldr	r1, [r7, #8]
 800618e:	4618      	mov	r0, r3
 8006190:	f000 fb9c 	bl	80068cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f042 0208 	orr.w	r2, r2, #8
 80061a2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f022 0204 	bic.w	r2, r2, #4
 80061b2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	691a      	ldr	r2, [r3, #16]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	430a      	orrs	r2, r1
 80061c4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80061c6:	e023      	b.n	8006210 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68b9      	ldr	r1, [r7, #8]
 80061ce:	4618      	mov	r0, r3
 80061d0:	f000 fbce 	bl	8006970 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061e2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061f2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	021a      	lsls	r2, r3, #8
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	430a      	orrs	r2, r1
 8006206:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006208:	e002      	b.n	8006210 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	75fb      	strb	r3, [r7, #23]
      break;
 800620e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006218:	7dfb      	ldrb	r3, [r7, #23]
}
 800621a:	4618      	mov	r0, r3
 800621c:	3718      	adds	r7, #24
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop

08006224 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800622e:	2300      	movs	r3, #0
 8006230:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006238:	2b01      	cmp	r3, #1
 800623a:	d101      	bne.n	8006240 <HAL_TIM_ConfigClockSource+0x1c>
 800623c:	2302      	movs	r3, #2
 800623e:	e0b4      	b.n	80063aa <HAL_TIM_ConfigClockSource+0x186>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2202      	movs	r2, #2
 800624c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	4b56      	ldr	r3, [pc, #344]	@ (80063b4 <HAL_TIM_ConfigClockSource+0x190>)
 800625c:	4013      	ands	r3, r2
 800625e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006266:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006278:	d03e      	beq.n	80062f8 <HAL_TIM_ConfigClockSource+0xd4>
 800627a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800627e:	f200 8087 	bhi.w	8006390 <HAL_TIM_ConfigClockSource+0x16c>
 8006282:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006286:	f000 8086 	beq.w	8006396 <HAL_TIM_ConfigClockSource+0x172>
 800628a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800628e:	d87f      	bhi.n	8006390 <HAL_TIM_ConfigClockSource+0x16c>
 8006290:	2b70      	cmp	r3, #112	@ 0x70
 8006292:	d01a      	beq.n	80062ca <HAL_TIM_ConfigClockSource+0xa6>
 8006294:	2b70      	cmp	r3, #112	@ 0x70
 8006296:	d87b      	bhi.n	8006390 <HAL_TIM_ConfigClockSource+0x16c>
 8006298:	2b60      	cmp	r3, #96	@ 0x60
 800629a:	d050      	beq.n	800633e <HAL_TIM_ConfigClockSource+0x11a>
 800629c:	2b60      	cmp	r3, #96	@ 0x60
 800629e:	d877      	bhi.n	8006390 <HAL_TIM_ConfigClockSource+0x16c>
 80062a0:	2b50      	cmp	r3, #80	@ 0x50
 80062a2:	d03c      	beq.n	800631e <HAL_TIM_ConfigClockSource+0xfa>
 80062a4:	2b50      	cmp	r3, #80	@ 0x50
 80062a6:	d873      	bhi.n	8006390 <HAL_TIM_ConfigClockSource+0x16c>
 80062a8:	2b40      	cmp	r3, #64	@ 0x40
 80062aa:	d058      	beq.n	800635e <HAL_TIM_ConfigClockSource+0x13a>
 80062ac:	2b40      	cmp	r3, #64	@ 0x40
 80062ae:	d86f      	bhi.n	8006390 <HAL_TIM_ConfigClockSource+0x16c>
 80062b0:	2b30      	cmp	r3, #48	@ 0x30
 80062b2:	d064      	beq.n	800637e <HAL_TIM_ConfigClockSource+0x15a>
 80062b4:	2b30      	cmp	r3, #48	@ 0x30
 80062b6:	d86b      	bhi.n	8006390 <HAL_TIM_ConfigClockSource+0x16c>
 80062b8:	2b20      	cmp	r3, #32
 80062ba:	d060      	beq.n	800637e <HAL_TIM_ConfigClockSource+0x15a>
 80062bc:	2b20      	cmp	r3, #32
 80062be:	d867      	bhi.n	8006390 <HAL_TIM_ConfigClockSource+0x16c>
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d05c      	beq.n	800637e <HAL_TIM_ConfigClockSource+0x15a>
 80062c4:	2b10      	cmp	r3, #16
 80062c6:	d05a      	beq.n	800637e <HAL_TIM_ConfigClockSource+0x15a>
 80062c8:	e062      	b.n	8006390 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062da:	f000 fd41 	bl	8006d60 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80062ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68ba      	ldr	r2, [r7, #8]
 80062f4:	609a      	str	r2, [r3, #8]
      break;
 80062f6:	e04f      	b.n	8006398 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006308:	f000 fd2a 	bl	8006d60 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	689a      	ldr	r2, [r3, #8]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800631a:	609a      	str	r2, [r3, #8]
      break;
 800631c:	e03c      	b.n	8006398 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800632a:	461a      	mov	r2, r3
 800632c:	f000 fbe8 	bl	8006b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2150      	movs	r1, #80	@ 0x50
 8006336:	4618      	mov	r0, r3
 8006338:	f000 fcf7 	bl	8006d2a <TIM_ITRx_SetConfig>
      break;
 800633c:	e02c      	b.n	8006398 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800634a:	461a      	mov	r2, r3
 800634c:	f000 fc44 	bl	8006bd8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2160      	movs	r1, #96	@ 0x60
 8006356:	4618      	mov	r0, r3
 8006358:	f000 fce7 	bl	8006d2a <TIM_ITRx_SetConfig>
      break;
 800635c:	e01c      	b.n	8006398 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800636a:	461a      	mov	r2, r3
 800636c:	f000 fbc8 	bl	8006b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2140      	movs	r1, #64	@ 0x40
 8006376:	4618      	mov	r0, r3
 8006378:	f000 fcd7 	bl	8006d2a <TIM_ITRx_SetConfig>
      break;
 800637c:	e00c      	b.n	8006398 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4619      	mov	r1, r3
 8006388:	4610      	mov	r0, r2
 800638a:	f000 fcce 	bl	8006d2a <TIM_ITRx_SetConfig>
      break;
 800638e:	e003      	b.n	8006398 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	73fb      	strb	r3, [r7, #15]
      break;
 8006394:	e000      	b.n	8006398 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006396:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80063a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	fffeff88 	.word	0xfffeff88

080063b8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063e8:	bf00      	nop
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800641c:	b480      	push	{r7}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a40      	ldr	r2, [pc, #256]	@ (8006530 <TIM_Base_SetConfig+0x114>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d013      	beq.n	800645c <TIM_Base_SetConfig+0x40>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800643a:	d00f      	beq.n	800645c <TIM_Base_SetConfig+0x40>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a3d      	ldr	r2, [pc, #244]	@ (8006534 <TIM_Base_SetConfig+0x118>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d00b      	beq.n	800645c <TIM_Base_SetConfig+0x40>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a3c      	ldr	r2, [pc, #240]	@ (8006538 <TIM_Base_SetConfig+0x11c>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d007      	beq.n	800645c <TIM_Base_SetConfig+0x40>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a3b      	ldr	r2, [pc, #236]	@ (800653c <TIM_Base_SetConfig+0x120>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d003      	beq.n	800645c <TIM_Base_SetConfig+0x40>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a3a      	ldr	r2, [pc, #232]	@ (8006540 <TIM_Base_SetConfig+0x124>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d108      	bne.n	800646e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006462:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	4313      	orrs	r3, r2
 800646c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a2f      	ldr	r2, [pc, #188]	@ (8006530 <TIM_Base_SetConfig+0x114>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d02b      	beq.n	80064ce <TIM_Base_SetConfig+0xb2>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800647c:	d027      	beq.n	80064ce <TIM_Base_SetConfig+0xb2>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a2c      	ldr	r2, [pc, #176]	@ (8006534 <TIM_Base_SetConfig+0x118>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d023      	beq.n	80064ce <TIM_Base_SetConfig+0xb2>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a2b      	ldr	r2, [pc, #172]	@ (8006538 <TIM_Base_SetConfig+0x11c>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d01f      	beq.n	80064ce <TIM_Base_SetConfig+0xb2>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a2a      	ldr	r2, [pc, #168]	@ (800653c <TIM_Base_SetConfig+0x120>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d01b      	beq.n	80064ce <TIM_Base_SetConfig+0xb2>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a29      	ldr	r2, [pc, #164]	@ (8006540 <TIM_Base_SetConfig+0x124>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d017      	beq.n	80064ce <TIM_Base_SetConfig+0xb2>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a28      	ldr	r2, [pc, #160]	@ (8006544 <TIM_Base_SetConfig+0x128>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d013      	beq.n	80064ce <TIM_Base_SetConfig+0xb2>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a27      	ldr	r2, [pc, #156]	@ (8006548 <TIM_Base_SetConfig+0x12c>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d00f      	beq.n	80064ce <TIM_Base_SetConfig+0xb2>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a26      	ldr	r2, [pc, #152]	@ (800654c <TIM_Base_SetConfig+0x130>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d00b      	beq.n	80064ce <TIM_Base_SetConfig+0xb2>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a25      	ldr	r2, [pc, #148]	@ (8006550 <TIM_Base_SetConfig+0x134>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d007      	beq.n	80064ce <TIM_Base_SetConfig+0xb2>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a24      	ldr	r2, [pc, #144]	@ (8006554 <TIM_Base_SetConfig+0x138>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d003      	beq.n	80064ce <TIM_Base_SetConfig+0xb2>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a23      	ldr	r2, [pc, #140]	@ (8006558 <TIM_Base_SetConfig+0x13c>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d108      	bne.n	80064e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	4313      	orrs	r3, r2
 80064de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	695b      	ldr	r3, [r3, #20]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	689a      	ldr	r2, [r3, #8]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a0a      	ldr	r2, [pc, #40]	@ (8006530 <TIM_Base_SetConfig+0x114>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d003      	beq.n	8006514 <TIM_Base_SetConfig+0xf8>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a0c      	ldr	r2, [pc, #48]	@ (8006540 <TIM_Base_SetConfig+0x124>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d103      	bne.n	800651c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	691a      	ldr	r2, [r3, #16]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	615a      	str	r2, [r3, #20]
}
 8006522:	bf00      	nop
 8006524:	3714      	adds	r7, #20
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	40010000 	.word	0x40010000
 8006534:	40000400 	.word	0x40000400
 8006538:	40000800 	.word	0x40000800
 800653c:	40000c00 	.word	0x40000c00
 8006540:	40010400 	.word	0x40010400
 8006544:	40014000 	.word	0x40014000
 8006548:	40014400 	.word	0x40014400
 800654c:	40014800 	.word	0x40014800
 8006550:	40001800 	.word	0x40001800
 8006554:	40001c00 	.word	0x40001c00
 8006558:	40002000 	.word	0x40002000

0800655c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800655c:	b480      	push	{r7}
 800655e:	b087      	sub	sp, #28
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	f023 0201 	bic.w	r2, r3, #1
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a1b      	ldr	r3, [r3, #32]
 8006576:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	4b2b      	ldr	r3, [pc, #172]	@ (8006634 <TIM_OC1_SetConfig+0xd8>)
 8006588:	4013      	ands	r3, r2
 800658a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f023 0303 	bic.w	r3, r3, #3
 8006592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	4313      	orrs	r3, r2
 800659c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	f023 0302 	bic.w	r3, r3, #2
 80065a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	697a      	ldr	r2, [r7, #20]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a21      	ldr	r2, [pc, #132]	@ (8006638 <TIM_OC1_SetConfig+0xdc>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d003      	beq.n	80065c0 <TIM_OC1_SetConfig+0x64>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a20      	ldr	r2, [pc, #128]	@ (800663c <TIM_OC1_SetConfig+0xe0>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d10c      	bne.n	80065da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	f023 0308 	bic.w	r3, r3, #8
 80065c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	697a      	ldr	r2, [r7, #20]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f023 0304 	bic.w	r3, r3, #4
 80065d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a16      	ldr	r2, [pc, #88]	@ (8006638 <TIM_OC1_SetConfig+0xdc>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d003      	beq.n	80065ea <TIM_OC1_SetConfig+0x8e>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a15      	ldr	r2, [pc, #84]	@ (800663c <TIM_OC1_SetConfig+0xe0>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d111      	bne.n	800660e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	693a      	ldr	r2, [r7, #16]
 8006600:	4313      	orrs	r3, r2
 8006602:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	699b      	ldr	r3, [r3, #24]
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	4313      	orrs	r3, r2
 800660c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	685a      	ldr	r2, [r3, #4]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	697a      	ldr	r2, [r7, #20]
 8006626:	621a      	str	r2, [r3, #32]
}
 8006628:	bf00      	nop
 800662a:	371c      	adds	r7, #28
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr
 8006634:	fffeff8f 	.word	0xfffeff8f
 8006638:	40010000 	.word	0x40010000
 800663c:	40010400 	.word	0x40010400

08006640 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006640:	b480      	push	{r7}
 8006642:	b087      	sub	sp, #28
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	f023 0210 	bic.w	r2, r3, #16
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	4b2e      	ldr	r3, [pc, #184]	@ (8006724 <TIM_OC2_SetConfig+0xe4>)
 800666c:	4013      	ands	r3, r2
 800666e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006676:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	021b      	lsls	r3, r3, #8
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	4313      	orrs	r3, r2
 8006682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	f023 0320 	bic.w	r3, r3, #32
 800668a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	011b      	lsls	r3, r3, #4
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	4313      	orrs	r3, r2
 8006696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a23      	ldr	r2, [pc, #140]	@ (8006728 <TIM_OC2_SetConfig+0xe8>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d003      	beq.n	80066a8 <TIM_OC2_SetConfig+0x68>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a22      	ldr	r2, [pc, #136]	@ (800672c <TIM_OC2_SetConfig+0xec>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d10d      	bne.n	80066c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	011b      	lsls	r3, r3, #4
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a18      	ldr	r2, [pc, #96]	@ (8006728 <TIM_OC2_SetConfig+0xe8>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d003      	beq.n	80066d4 <TIM_OC2_SetConfig+0x94>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a17      	ldr	r2, [pc, #92]	@ (800672c <TIM_OC2_SetConfig+0xec>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d113      	bne.n	80066fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	695b      	ldr	r3, [r3, #20]
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	685a      	ldr	r2, [r3, #4]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	621a      	str	r2, [r3, #32]
}
 8006716:	bf00      	nop
 8006718:	371c      	adds	r7, #28
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	feff8fff 	.word	0xfeff8fff
 8006728:	40010000 	.word	0x40010000
 800672c:	40010400 	.word	0x40010400

08006730 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006730:	b480      	push	{r7}
 8006732:	b087      	sub	sp, #28
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	69db      	ldr	r3, [r3, #28]
 8006756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	4b2d      	ldr	r3, [pc, #180]	@ (8006810 <TIM_OC3_SetConfig+0xe0>)
 800675c:	4013      	ands	r3, r2
 800675e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f023 0303 	bic.w	r3, r3, #3
 8006766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	4313      	orrs	r3, r2
 8006770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006778:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	021b      	lsls	r3, r3, #8
 8006780:	697a      	ldr	r2, [r7, #20]
 8006782:	4313      	orrs	r3, r2
 8006784:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a22      	ldr	r2, [pc, #136]	@ (8006814 <TIM_OC3_SetConfig+0xe4>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d003      	beq.n	8006796 <TIM_OC3_SetConfig+0x66>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a21      	ldr	r2, [pc, #132]	@ (8006818 <TIM_OC3_SetConfig+0xe8>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d10d      	bne.n	80067b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800679c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	021b      	lsls	r3, r3, #8
 80067a4:	697a      	ldr	r2, [r7, #20]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a17      	ldr	r2, [pc, #92]	@ (8006814 <TIM_OC3_SetConfig+0xe4>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d003      	beq.n	80067c2 <TIM_OC3_SetConfig+0x92>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a16      	ldr	r2, [pc, #88]	@ (8006818 <TIM_OC3_SetConfig+0xe8>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d113      	bne.n	80067ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	695b      	ldr	r3, [r3, #20]
 80067d6:	011b      	lsls	r3, r3, #4
 80067d8:	693a      	ldr	r2, [r7, #16]
 80067da:	4313      	orrs	r3, r2
 80067dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	011b      	lsls	r3, r3, #4
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	685a      	ldr	r2, [r3, #4]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	697a      	ldr	r2, [r7, #20]
 8006802:	621a      	str	r2, [r3, #32]
}
 8006804:	bf00      	nop
 8006806:	371c      	adds	r7, #28
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr
 8006810:	fffeff8f 	.word	0xfffeff8f
 8006814:	40010000 	.word	0x40010000
 8006818:	40010400 	.word	0x40010400

0800681c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800681c:	b480      	push	{r7}
 800681e:	b087      	sub	sp, #28
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	69db      	ldr	r3, [r3, #28]
 8006842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	4b1e      	ldr	r3, [pc, #120]	@ (80068c0 <TIM_OC4_SetConfig+0xa4>)
 8006848:	4013      	ands	r3, r2
 800684a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006852:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	021b      	lsls	r3, r3, #8
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	4313      	orrs	r3, r2
 800685e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006866:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	031b      	lsls	r3, r3, #12
 800686e:	693a      	ldr	r2, [r7, #16]
 8006870:	4313      	orrs	r3, r2
 8006872:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a13      	ldr	r2, [pc, #76]	@ (80068c4 <TIM_OC4_SetConfig+0xa8>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d003      	beq.n	8006884 <TIM_OC4_SetConfig+0x68>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a12      	ldr	r2, [pc, #72]	@ (80068c8 <TIM_OC4_SetConfig+0xac>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d109      	bne.n	8006898 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800688a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	695b      	ldr	r3, [r3, #20]
 8006890:	019b      	lsls	r3, r3, #6
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	4313      	orrs	r3, r2
 8006896:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	697a      	ldr	r2, [r7, #20]
 800689c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	685a      	ldr	r2, [r3, #4]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	693a      	ldr	r2, [r7, #16]
 80068b0:	621a      	str	r2, [r3, #32]
}
 80068b2:	bf00      	nop
 80068b4:	371c      	adds	r7, #28
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	feff8fff 	.word	0xfeff8fff
 80068c4:	40010000 	.word	0x40010000
 80068c8:	40010400 	.word	0x40010400

080068cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b087      	sub	sp, #28
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	4b1b      	ldr	r3, [pc, #108]	@ (8006964 <TIM_OC5_SetConfig+0x98>)
 80068f8:	4013      	ands	r3, r2
 80068fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	4313      	orrs	r3, r2
 8006904:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800690c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	041b      	lsls	r3, r3, #16
 8006914:	693a      	ldr	r2, [r7, #16]
 8006916:	4313      	orrs	r3, r2
 8006918:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a12      	ldr	r2, [pc, #72]	@ (8006968 <TIM_OC5_SetConfig+0x9c>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d003      	beq.n	800692a <TIM_OC5_SetConfig+0x5e>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a11      	ldr	r2, [pc, #68]	@ (800696c <TIM_OC5_SetConfig+0xa0>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d109      	bne.n	800693e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006930:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	021b      	lsls	r3, r3, #8
 8006938:	697a      	ldr	r2, [r7, #20]
 800693a:	4313      	orrs	r3, r2
 800693c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	697a      	ldr	r2, [r7, #20]
 8006942:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	685a      	ldr	r2, [r3, #4]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	693a      	ldr	r2, [r7, #16]
 8006956:	621a      	str	r2, [r3, #32]
}
 8006958:	bf00      	nop
 800695a:	371c      	adds	r7, #28
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr
 8006964:	fffeff8f 	.word	0xfffeff8f
 8006968:	40010000 	.word	0x40010000
 800696c:	40010400 	.word	0x40010400

08006970 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006970:	b480      	push	{r7}
 8006972:	b087      	sub	sp, #28
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a1b      	ldr	r3, [r3, #32]
 800698a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	4b1c      	ldr	r3, [pc, #112]	@ (8006a0c <TIM_OC6_SetConfig+0x9c>)
 800699c:	4013      	ands	r3, r2
 800699e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	021b      	lsls	r3, r3, #8
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80069b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	051b      	lsls	r3, r3, #20
 80069ba:	693a      	ldr	r2, [r7, #16]
 80069bc:	4313      	orrs	r3, r2
 80069be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a13      	ldr	r2, [pc, #76]	@ (8006a10 <TIM_OC6_SetConfig+0xa0>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d003      	beq.n	80069d0 <TIM_OC6_SetConfig+0x60>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a12      	ldr	r2, [pc, #72]	@ (8006a14 <TIM_OC6_SetConfig+0xa4>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d109      	bne.n	80069e4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80069d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	695b      	ldr	r3, [r3, #20]
 80069dc:	029b      	lsls	r3, r3, #10
 80069de:	697a      	ldr	r2, [r7, #20]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	693a      	ldr	r2, [r7, #16]
 80069fc:	621a      	str	r2, [r3, #32]
}
 80069fe:	bf00      	nop
 8006a00:	371c      	adds	r7, #28
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	feff8fff 	.word	0xfeff8fff
 8006a10:	40010000 	.word	0x40010000
 8006a14:	40010400 	.word	0x40010400

08006a18 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b087      	sub	sp, #28
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
 8006a24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6a1b      	ldr	r3, [r3, #32]
 8006a2a:	f023 0201 	bic.w	r2, r3, #1
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6a1b      	ldr	r3, [r3, #32]
 8006a3c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	4a28      	ldr	r2, [pc, #160]	@ (8006ae4 <TIM_TI1_SetConfig+0xcc>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d01b      	beq.n	8006a7e <TIM_TI1_SetConfig+0x66>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a4c:	d017      	beq.n	8006a7e <TIM_TI1_SetConfig+0x66>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	4a25      	ldr	r2, [pc, #148]	@ (8006ae8 <TIM_TI1_SetConfig+0xd0>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d013      	beq.n	8006a7e <TIM_TI1_SetConfig+0x66>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	4a24      	ldr	r2, [pc, #144]	@ (8006aec <TIM_TI1_SetConfig+0xd4>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d00f      	beq.n	8006a7e <TIM_TI1_SetConfig+0x66>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	4a23      	ldr	r2, [pc, #140]	@ (8006af0 <TIM_TI1_SetConfig+0xd8>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d00b      	beq.n	8006a7e <TIM_TI1_SetConfig+0x66>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	4a22      	ldr	r2, [pc, #136]	@ (8006af4 <TIM_TI1_SetConfig+0xdc>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d007      	beq.n	8006a7e <TIM_TI1_SetConfig+0x66>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	4a21      	ldr	r2, [pc, #132]	@ (8006af8 <TIM_TI1_SetConfig+0xe0>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d003      	beq.n	8006a7e <TIM_TI1_SetConfig+0x66>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	4a20      	ldr	r2, [pc, #128]	@ (8006afc <TIM_TI1_SetConfig+0xe4>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d101      	bne.n	8006a82 <TIM_TI1_SetConfig+0x6a>
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e000      	b.n	8006a84 <TIM_TI1_SetConfig+0x6c>
 8006a82:	2300      	movs	r3, #0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d008      	beq.n	8006a9a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	f023 0303 	bic.w	r3, r3, #3
 8006a8e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006a90:	697a      	ldr	r2, [r7, #20]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	617b      	str	r3, [r7, #20]
 8006a98:	e003      	b.n	8006aa2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	f043 0301 	orr.w	r3, r3, #1
 8006aa0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006aa8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	011b      	lsls	r3, r3, #4
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	697a      	ldr	r2, [r7, #20]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	f023 030a 	bic.w	r3, r3, #10
 8006abc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	f003 030a 	and.w	r3, r3, #10
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	697a      	ldr	r2, [r7, #20]
 8006ace:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	693a      	ldr	r2, [r7, #16]
 8006ad4:	621a      	str	r2, [r3, #32]
}
 8006ad6:	bf00      	nop
 8006ad8:	371c      	adds	r7, #28
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	40010000 	.word	0x40010000
 8006ae8:	40000400 	.word	0x40000400
 8006aec:	40000800 	.word	0x40000800
 8006af0:	40000c00 	.word	0x40000c00
 8006af4:	40010400 	.word	0x40010400
 8006af8:	40014000 	.word	0x40014000
 8006afc:	40001800 	.word	0x40001800

08006b00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b087      	sub	sp, #28
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	f023 0201 	bic.w	r2, r3, #1
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	699b      	ldr	r3, [r3, #24]
 8006b22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	011b      	lsls	r3, r3, #4
 8006b30:	693a      	ldr	r2, [r7, #16]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	f023 030a 	bic.w	r3, r3, #10
 8006b3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	693a      	ldr	r2, [r7, #16]
 8006b4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	697a      	ldr	r2, [r7, #20]
 8006b50:	621a      	str	r2, [r3, #32]
}
 8006b52:	bf00      	nop
 8006b54:	371c      	adds	r7, #28
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr

08006b5e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b5e:	b480      	push	{r7}
 8006b60:	b087      	sub	sp, #28
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	60f8      	str	r0, [r7, #12]
 8006b66:	60b9      	str	r1, [r7, #8]
 8006b68:	607a      	str	r2, [r7, #4]
 8006b6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6a1b      	ldr	r3, [r3, #32]
 8006b70:	f023 0210 	bic.w	r2, r3, #16
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	699b      	ldr	r3, [r3, #24]
 8006b7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6a1b      	ldr	r3, [r3, #32]
 8006b82:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b8a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	021b      	lsls	r3, r3, #8
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	031b      	lsls	r3, r3, #12
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006bb0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	011b      	lsls	r3, r3, #4
 8006bb6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006bba:	693a      	ldr	r2, [r7, #16]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	697a      	ldr	r2, [r7, #20]
 8006bc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	693a      	ldr	r2, [r7, #16]
 8006bca:	621a      	str	r2, [r3, #32]
}
 8006bcc:	bf00      	nop
 8006bce:	371c      	adds	r7, #28
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b087      	sub	sp, #28
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6a1b      	ldr	r3, [r3, #32]
 8006be8:	f023 0210 	bic.w	r2, r3, #16
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	699b      	ldr	r3, [r3, #24]
 8006bf4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6a1b      	ldr	r3, [r3, #32]
 8006bfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006c02:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	031b      	lsls	r3, r3, #12
 8006c08:	697a      	ldr	r2, [r7, #20]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006c14:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	011b      	lsls	r3, r3, #4
 8006c1a:	693a      	ldr	r2, [r7, #16]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	697a      	ldr	r2, [r7, #20]
 8006c24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	693a      	ldr	r2, [r7, #16]
 8006c2a:	621a      	str	r2, [r3, #32]
}
 8006c2c:	bf00      	nop
 8006c2e:	371c      	adds	r7, #28
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b087      	sub	sp, #28
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]
 8006c44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6a1b      	ldr	r3, [r3, #32]
 8006c4a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	69db      	ldr	r3, [r3, #28]
 8006c56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6a1b      	ldr	r3, [r3, #32]
 8006c5c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	f023 0303 	bic.w	r3, r3, #3
 8006c64:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006c66:	697a      	ldr	r2, [r7, #20]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c74:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	011b      	lsls	r3, r3, #4
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	697a      	ldr	r2, [r7, #20]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006c88:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	021b      	lsls	r3, r3, #8
 8006c8e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	693a      	ldr	r2, [r7, #16]
 8006ca2:	621a      	str	r2, [r3, #32]
}
 8006ca4:	bf00      	nop
 8006ca6:	371c      	adds	r7, #28
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b087      	sub	sp, #28
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
 8006cbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	69db      	ldr	r3, [r3, #28]
 8006cce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6a1b      	ldr	r3, [r3, #32]
 8006cd4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cdc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	021b      	lsls	r3, r3, #8
 8006ce2:	697a      	ldr	r2, [r7, #20]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006cee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	031b      	lsls	r3, r3, #12
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	697a      	ldr	r2, [r7, #20]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006d02:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	031b      	lsls	r3, r3, #12
 8006d08:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	697a      	ldr	r2, [r7, #20]
 8006d16:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	693a      	ldr	r2, [r7, #16]
 8006d1c:	621a      	str	r2, [r3, #32]
}
 8006d1e:	bf00      	nop
 8006d20:	371c      	adds	r7, #28
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr

08006d2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b085      	sub	sp, #20
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
 8006d32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d42:	683a      	ldr	r2, [r7, #0]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	f043 0307 	orr.w	r3, r3, #7
 8006d4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	609a      	str	r2, [r3, #8]
}
 8006d54:	bf00      	nop
 8006d56:	3714      	adds	r7, #20
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b087      	sub	sp, #28
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
 8006d6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006d7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	021a      	lsls	r2, r3, #8
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	431a      	orrs	r2, r3
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	697a      	ldr	r2, [r7, #20]
 8006d92:	609a      	str	r2, [r3, #8]
}
 8006d94:	bf00      	nop
 8006d96:	371c      	adds	r7, #28
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d101      	bne.n	8006db8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006db4:	2302      	movs	r3, #2
 8006db6:	e06d      	b.n	8006e94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2202      	movs	r2, #2
 8006dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a30      	ldr	r2, [pc, #192]	@ (8006ea0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d004      	beq.n	8006dec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a2f      	ldr	r2, [pc, #188]	@ (8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d108      	bne.n	8006dfe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006df2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a20      	ldr	r2, [pc, #128]	@ (8006ea0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d022      	beq.n	8006e68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e2a:	d01d      	beq.n	8006e68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a1d      	ldr	r2, [pc, #116]	@ (8006ea8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d018      	beq.n	8006e68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a1c      	ldr	r2, [pc, #112]	@ (8006eac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d013      	beq.n	8006e68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a1a      	ldr	r2, [pc, #104]	@ (8006eb0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d00e      	beq.n	8006e68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a15      	ldr	r2, [pc, #84]	@ (8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d009      	beq.n	8006e68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a16      	ldr	r2, [pc, #88]	@ (8006eb4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d004      	beq.n	8006e68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a15      	ldr	r2, [pc, #84]	@ (8006eb8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d10c      	bne.n	8006e82 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68ba      	ldr	r2, [r7, #8]
 8006e80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3714      	adds	r7, #20
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr
 8006ea0:	40010000 	.word	0x40010000
 8006ea4:	40010400 	.word	0x40010400
 8006ea8:	40000400 	.word	0x40000400
 8006eac:	40000800 	.word	0x40000800
 8006eb0:	40000c00 	.word	0x40000c00
 8006eb4:	40014000 	.word	0x40014000
 8006eb8:	40001800 	.word	0x40001800

08006ebc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b085      	sub	sp, #20
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d101      	bne.n	8006ed8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006ed4:	2302      	movs	r3, #2
 8006ed6:	e065      	b.n	8006fa4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	695b      	ldr	r3, [r3, #20]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	699b      	ldr	r3, [r3, #24]
 8006f4c:	041b      	lsls	r3, r3, #16
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a16      	ldr	r2, [pc, #88]	@ (8006fb0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d004      	beq.n	8006f66 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a14      	ldr	r2, [pc, #80]	@ (8006fb4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d115      	bne.n	8006f92 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f70:	051b      	lsls	r3, r3, #20
 8006f72:	4313      	orrs	r3, r2
 8006f74:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	69db      	ldr	r3, [r3, #28]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006fa2:	2300      	movs	r3, #0
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3714      	adds	r7, #20
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr
 8006fb0:	40010000 	.word	0x40010000
 8006fb4:	40010400 	.word	0x40010400

08006fb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006fd4:	bf00      	nop
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006fe8:	bf00      	nop
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <memset>:
 8006ff4:	4402      	add	r2, r0
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d100      	bne.n	8006ffe <memset+0xa>
 8006ffc:	4770      	bx	lr
 8006ffe:	f803 1b01 	strb.w	r1, [r3], #1
 8007002:	e7f9      	b.n	8006ff8 <memset+0x4>

08007004 <__errno>:
 8007004:	4b01      	ldr	r3, [pc, #4]	@ (800700c <__errno+0x8>)
 8007006:	6818      	ldr	r0, [r3, #0]
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	2000003c 	.word	0x2000003c

08007010 <__libc_init_array>:
 8007010:	b570      	push	{r4, r5, r6, lr}
 8007012:	4d0d      	ldr	r5, [pc, #52]	@ (8007048 <__libc_init_array+0x38>)
 8007014:	4c0d      	ldr	r4, [pc, #52]	@ (800704c <__libc_init_array+0x3c>)
 8007016:	1b64      	subs	r4, r4, r5
 8007018:	10a4      	asrs	r4, r4, #2
 800701a:	2600      	movs	r6, #0
 800701c:	42a6      	cmp	r6, r4
 800701e:	d109      	bne.n	8007034 <__libc_init_array+0x24>
 8007020:	4d0b      	ldr	r5, [pc, #44]	@ (8007050 <__libc_init_array+0x40>)
 8007022:	4c0c      	ldr	r4, [pc, #48]	@ (8007054 <__libc_init_array+0x44>)
 8007024:	f000 f9e4 	bl	80073f0 <_init>
 8007028:	1b64      	subs	r4, r4, r5
 800702a:	10a4      	asrs	r4, r4, #2
 800702c:	2600      	movs	r6, #0
 800702e:	42a6      	cmp	r6, r4
 8007030:	d105      	bne.n	800703e <__libc_init_array+0x2e>
 8007032:	bd70      	pop	{r4, r5, r6, pc}
 8007034:	f855 3b04 	ldr.w	r3, [r5], #4
 8007038:	4798      	blx	r3
 800703a:	3601      	adds	r6, #1
 800703c:	e7ee      	b.n	800701c <__libc_init_array+0xc>
 800703e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007042:	4798      	blx	r3
 8007044:	3601      	adds	r6, #1
 8007046:	e7f2      	b.n	800702e <__libc_init_array+0x1e>
 8007048:	08007dd0 	.word	0x08007dd0
 800704c:	08007dd0 	.word	0x08007dd0
 8007050:	08007dd0 	.word	0x08007dd0
 8007054:	08007dd4 	.word	0x08007dd4

08007058 <sqrtf>:
 8007058:	b508      	push	{r3, lr}
 800705a:	ed2d 8b02 	vpush	{d8}
 800705e:	eeb0 8a40 	vmov.f32	s16, s0
 8007062:	f000 f9c2 	bl	80073ea <__ieee754_sqrtf>
 8007066:	eeb4 8a48 	vcmp.f32	s16, s16
 800706a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800706e:	d60c      	bvs.n	800708a <sqrtf+0x32>
 8007070:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8007090 <sqrtf+0x38>
 8007074:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800707c:	d505      	bpl.n	800708a <sqrtf+0x32>
 800707e:	f7ff ffc1 	bl	8007004 <__errno>
 8007082:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8007086:	2321      	movs	r3, #33	@ 0x21
 8007088:	6003      	str	r3, [r0, #0]
 800708a:	ecbd 8b02 	vpop	{d8}
 800708e:	bd08      	pop	{r3, pc}
 8007090:	00000000 	.word	0x00000000

08007094 <sinf_poly>:
 8007094:	07cb      	lsls	r3, r1, #31
 8007096:	d412      	bmi.n	80070be <sinf_poly+0x2a>
 8007098:	ee21 5b00 	vmul.f64	d5, d1, d0
 800709c:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 80070a0:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 80070a4:	eea6 7b01 	vfma.f64	d7, d6, d1
 80070a8:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 80070ac:	ee21 1b05 	vmul.f64	d1, d1, d5
 80070b0:	eea6 0b05 	vfma.f64	d0, d6, d5
 80070b4:	eea7 0b01 	vfma.f64	d0, d7, d1
 80070b8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80070bc:	4770      	bx	lr
 80070be:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 80070c2:	ee21 5b01 	vmul.f64	d5, d1, d1
 80070c6:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 80070ca:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 80070ce:	eea1 7b06 	vfma.f64	d7, d1, d6
 80070d2:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 80070d6:	eea1 0b06 	vfma.f64	d0, d1, d6
 80070da:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 80070de:	ee21 1b05 	vmul.f64	d1, d1, d5
 80070e2:	eea5 0b06 	vfma.f64	d0, d5, d6
 80070e6:	e7e5      	b.n	80070b4 <sinf_poly+0x20>

080070e8 <sinf>:
 80070e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070ea:	ee10 4a10 	vmov	r4, s0
 80070ee:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80070f2:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 80070f6:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 80070fa:	eef0 7a40 	vmov.f32	s15, s0
 80070fe:	ea4f 5214 	mov.w	r2, r4, lsr #20
 8007102:	d218      	bcs.n	8007136 <sinf+0x4e>
 8007104:	ee26 1b06 	vmul.f64	d1, d6, d6
 8007108:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 800710c:	d20a      	bcs.n	8007124 <sinf+0x3c>
 800710e:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 8007112:	d103      	bne.n	800711c <sinf+0x34>
 8007114:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8007118:	ed8d 1a01 	vstr	s2, [sp, #4]
 800711c:	eeb0 0a67 	vmov.f32	s0, s15
 8007120:	b003      	add	sp, #12
 8007122:	bd30      	pop	{r4, r5, pc}
 8007124:	483a      	ldr	r0, [pc, #232]	@ (8007210 <sinf+0x128>)
 8007126:	eeb0 0b46 	vmov.f64	d0, d6
 800712a:	2100      	movs	r1, #0
 800712c:	b003      	add	sp, #12
 800712e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007132:	f7ff bfaf 	b.w	8007094 <sinf_poly>
 8007136:	f240 422e 	movw	r2, #1070	@ 0x42e
 800713a:	4293      	cmp	r3, r2
 800713c:	d824      	bhi.n	8007188 <sinf+0xa0>
 800713e:	4b34      	ldr	r3, [pc, #208]	@ (8007210 <sinf+0x128>)
 8007140:	ed93 7b08 	vldr	d7, [r3, #32]
 8007144:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007148:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800714c:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8007150:	ee17 1a90 	vmov	r1, s15
 8007154:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8007158:	1609      	asrs	r1, r1, #24
 800715a:	ee07 1a90 	vmov	s15, r1
 800715e:	f001 0203 	and.w	r2, r1, #3
 8007162:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8007166:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800716a:	ed92 0b00 	vldr	d0, [r2]
 800716e:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8007172:	f011 0f02 	tst.w	r1, #2
 8007176:	eea5 6b47 	vfms.f64	d6, d5, d7
 800717a:	bf08      	it	eq
 800717c:	4618      	moveq	r0, r3
 800717e:	ee26 1b06 	vmul.f64	d1, d6, d6
 8007182:	ee20 0b06 	vmul.f64	d0, d0, d6
 8007186:	e7d1      	b.n	800712c <sinf+0x44>
 8007188:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 800718c:	d237      	bcs.n	80071fe <sinf+0x116>
 800718e:	4921      	ldr	r1, [pc, #132]	@ (8007214 <sinf+0x12c>)
 8007190:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8007194:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8007198:	f3c4 0316 	ubfx	r3, r4, #0, #23
 800719c:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 80071a0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80071a4:	6a10      	ldr	r0, [r2, #32]
 80071a6:	6912      	ldr	r2, [r2, #16]
 80071a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80071ac:	40ab      	lsls	r3, r5
 80071ae:	fba0 5003 	umull	r5, r0, r0, r3
 80071b2:	4359      	muls	r1, r3
 80071b4:	fbe3 0102 	umlal	r0, r1, r3, r2
 80071b8:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 80071bc:	0f9d      	lsrs	r5, r3, #30
 80071be:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80071c2:	1ac9      	subs	r1, r1, r3
 80071c4:	f7f9 f9c6 	bl	8000554 <__aeabi_l2d>
 80071c8:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 80071cc:	4b10      	ldr	r3, [pc, #64]	@ (8007210 <sinf+0x128>)
 80071ce:	f004 0203 	and.w	r2, r4, #3
 80071d2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80071d6:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8007208 <sinf+0x120>
 80071da:	ed92 0b00 	vldr	d0, [r2]
 80071de:	ec41 0b17 	vmov	d7, r0, r1
 80071e2:	f014 0f02 	tst.w	r4, #2
 80071e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80071ea:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80071ee:	4629      	mov	r1, r5
 80071f0:	bf08      	it	eq
 80071f2:	4618      	moveq	r0, r3
 80071f4:	ee27 1b07 	vmul.f64	d1, d7, d7
 80071f8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80071fc:	e796      	b.n	800712c <sinf+0x44>
 80071fe:	b003      	add	sp, #12
 8007200:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007204:	f000 b8e2 	b.w	80073cc <__math_invalidf>
 8007208:	54442d18 	.word	0x54442d18
 800720c:	3c1921fb 	.word	0x3c1921fb
 8007210:	08007ce8 	.word	0x08007ce8
 8007214:	08007c88 	.word	0x08007c88

08007218 <sinf_poly>:
 8007218:	07cb      	lsls	r3, r1, #31
 800721a:	d412      	bmi.n	8007242 <sinf_poly+0x2a>
 800721c:	ee21 5b00 	vmul.f64	d5, d1, d0
 8007220:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8007224:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8007228:	eea6 7b01 	vfma.f64	d7, d6, d1
 800722c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8007230:	ee21 1b05 	vmul.f64	d1, d1, d5
 8007234:	eea6 0b05 	vfma.f64	d0, d6, d5
 8007238:	eea7 0b01 	vfma.f64	d0, d7, d1
 800723c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8007240:	4770      	bx	lr
 8007242:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8007246:	ee21 5b01 	vmul.f64	d5, d1, d1
 800724a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 800724e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8007252:	eea1 7b06 	vfma.f64	d7, d1, d6
 8007256:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 800725a:	eea1 0b06 	vfma.f64	d0, d1, d6
 800725e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8007262:	ee21 1b05 	vmul.f64	d1, d1, d5
 8007266:	eea5 0b06 	vfma.f64	d0, d5, d6
 800726a:	e7e5      	b.n	8007238 <sinf_poly+0x20>
 800726c:	0000      	movs	r0, r0
	...

08007270 <cosf>:
 8007270:	b538      	push	{r3, r4, r5, lr}
 8007272:	ee10 4a10 	vmov	r4, s0
 8007276:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800727a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 800727e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8007282:	d21f      	bcs.n	80072c4 <cosf+0x54>
 8007284:	ee27 7b07 	vmul.f64	d7, d7, d7
 8007288:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 800728c:	f0c0 8082 	bcc.w	8007394 <cosf+0x124>
 8007290:	ee27 4b07 	vmul.f64	d4, d7, d7
 8007294:	4b44      	ldr	r3, [pc, #272]	@ (80073a8 <cosf+0x138>)
 8007296:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 800729a:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 800729e:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 80072a2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80072a6:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 80072aa:	eea7 0b05 	vfma.f64	d0, d7, d5
 80072ae:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 80072b2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80072b6:	eea4 0b05 	vfma.f64	d0, d4, d5
 80072ba:	eea6 0b07 	vfma.f64	d0, d6, d7
 80072be:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80072c2:	bd38      	pop	{r3, r4, r5, pc}
 80072c4:	f240 422e 	movw	r2, #1070	@ 0x42e
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d829      	bhi.n	8007320 <cosf+0xb0>
 80072cc:	4b36      	ldr	r3, [pc, #216]	@ (80073a8 <cosf+0x138>)
 80072ce:	ed93 6b08 	vldr	d6, [r3, #32]
 80072d2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80072d6:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 80072da:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80072de:	ee16 1a90 	vmov	r1, s13
 80072e2:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 80072e6:	1609      	asrs	r1, r1, #24
 80072e8:	ee06 1a90 	vmov	s13, r1
 80072ec:	f001 0203 	and.w	r2, r1, #3
 80072f0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80072f4:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80072f8:	ed92 0b00 	vldr	d0, [r2]
 80072fc:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8007300:	f011 0f02 	tst.w	r1, #2
 8007304:	f081 0101 	eor.w	r1, r1, #1
 8007308:	eea5 7b46 	vfms.f64	d7, d5, d6
 800730c:	bf08      	it	eq
 800730e:	4618      	moveq	r0, r3
 8007310:	ee27 1b07 	vmul.f64	d1, d7, d7
 8007314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007318:	ee20 0b07 	vmul.f64	d0, d0, d7
 800731c:	f7ff bf7c 	b.w	8007218 <sinf_poly>
 8007320:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8007324:	d232      	bcs.n	800738c <cosf+0x11c>
 8007326:	4921      	ldr	r1, [pc, #132]	@ (80073ac <cosf+0x13c>)
 8007328:	f3c4 6083 	ubfx	r0, r4, #26, #4
 800732c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8007330:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8007334:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8007338:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800733c:	6a10      	ldr	r0, [r2, #32]
 800733e:	6912      	ldr	r2, [r2, #16]
 8007340:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007344:	40ab      	lsls	r3, r5
 8007346:	fba0 5003 	umull	r5, r0, r0, r3
 800734a:	4359      	muls	r1, r3
 800734c:	fbe3 0102 	umlal	r0, r1, r3, r2
 8007350:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8007354:	0f9d      	lsrs	r5, r3, #30
 8007356:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800735a:	1ac9      	subs	r1, r1, r3
 800735c:	f7f9 f8fa 	bl	8000554 <__aeabi_l2d>
 8007360:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8007364:	4b10      	ldr	r3, [pc, #64]	@ (80073a8 <cosf+0x138>)
 8007366:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 80073a0 <cosf+0x130>
 800736a:	ec41 0b17 	vmov	d7, r0, r1
 800736e:	f004 0203 	and.w	r2, r4, #3
 8007372:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8007376:	ed92 0b00 	vldr	d0, [r2]
 800737a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800737e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8007382:	f014 0f02 	tst.w	r4, #2
 8007386:	f085 0101 	eor.w	r1, r5, #1
 800738a:	e7bf      	b.n	800730c <cosf+0x9c>
 800738c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007390:	f000 b81c 	b.w	80073cc <__math_invalidf>
 8007394:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007398:	e793      	b.n	80072c2 <cosf+0x52>
 800739a:	bf00      	nop
 800739c:	f3af 8000 	nop.w
 80073a0:	54442d18 	.word	0x54442d18
 80073a4:	3c1921fb 	.word	0x3c1921fb
 80073a8:	08007ce8 	.word	0x08007ce8
 80073ac:	08007c88 	.word	0x08007c88

080073b0 <with_errnof>:
 80073b0:	b510      	push	{r4, lr}
 80073b2:	ed2d 8b02 	vpush	{d8}
 80073b6:	eeb0 8a40 	vmov.f32	s16, s0
 80073ba:	4604      	mov	r4, r0
 80073bc:	f7ff fe22 	bl	8007004 <__errno>
 80073c0:	eeb0 0a48 	vmov.f32	s0, s16
 80073c4:	ecbd 8b02 	vpop	{d8}
 80073c8:	6004      	str	r4, [r0, #0]
 80073ca:	bd10      	pop	{r4, pc}

080073cc <__math_invalidf>:
 80073cc:	eef0 7a40 	vmov.f32	s15, s0
 80073d0:	ee30 7a40 	vsub.f32	s14, s0, s0
 80073d4:	eef4 7a67 	vcmp.f32	s15, s15
 80073d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073dc:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80073e0:	d602      	bvs.n	80073e8 <__math_invalidf+0x1c>
 80073e2:	2021      	movs	r0, #33	@ 0x21
 80073e4:	f7ff bfe4 	b.w	80073b0 <with_errnof>
 80073e8:	4770      	bx	lr

080073ea <__ieee754_sqrtf>:
 80073ea:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80073ee:	4770      	bx	lr

080073f0 <_init>:
 80073f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073f2:	bf00      	nop
 80073f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073f6:	bc08      	pop	{r3}
 80073f8:	469e      	mov	lr, r3
 80073fa:	4770      	bx	lr

080073fc <_fini>:
 80073fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073fe:	bf00      	nop
 8007400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007402:	bc08      	pop	{r3}
 8007404:	469e      	mov	lr, r3
 8007406:	4770      	bx	lr

Disassembly of section .ccmram:

08007408 <pi_aw_calc>:
 * @param v Pointer to the PI control structure.
 *
 * @note This function computes the PI control action with anti-windup.
 */
void pi_aw_calc(volatile pi_aw_struct *v)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
    if(v->enable)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	881b      	ldrh	r3, [r3, #0]
 8007414:	b29b      	uxth	r3, r3
 8007416:	2b00      	cmp	r3, #0
 8007418:	d063      	beq.n	80074e2 <pi_aw_calc+0xda>
    {
        v->e[0] = v->pi_consig - v->pi_fdb; // Calculate error
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	ed93 7a07 	vldr	s14, [r3, #28]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	edd3 7a08 	vldr	s15, [r3, #32]
 8007426:	ee77 7a67 	vsub.f32	s15, s14, s15
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	edc3 7a05 	vstr	s15, [r3, #20]

        // PI trapezoidal with feedforward
        v->pi_int[0] =  v->Ki * v->e[0] * v->Ts + v->pi_int[1] + (v->pi_out_postsat - v->pi_out_presat) * v->Kaw * v->Ts;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	ed93 7a03 	vldr	s14, [r3, #12]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	edd3 7a05 	vldr	s15, [r3, #20]
 800743c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	edd3 7a01 	vldr	s15, [r3, #4]
 8007446:	ee27 7a27 	vmul.f32	s14, s14, s15
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8007450:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8007460:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	edd3 7a04 	vldr	s15, [r3, #16]
 800746a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	edd3 7a01 	vldr	s15, [r3, #4]
 8007474:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007478:	ee77 7a27 	vadd.f32	s15, s14, s15
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

        v->pi_out_presat = v->pi_out;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	62da      	str	r2, [r3, #44]	@ 0x2c

        // Output voltage saturation
        if (v->pi_out > v->pi_out_max)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8007496:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800749a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800749e:	dd04      	ble.n	80074aa <pi_aw_calc+0xa2>
            v->pi_out = v->pi_out_max;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	635a      	str	r2, [r3, #52]	@ 0x34
 80074a8:	e00e      	b.n	80074c8 <pi_aw_calc+0xc0>
        else if (v->pi_out < v->pi_out_min)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80074b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80074ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074be:	d503      	bpl.n	80074c8 <pi_aw_calc+0xc0>
            v->pi_out = v->pi_out_min;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	635a      	str	r2, [r3, #52]	@ 0x34
        else;

        // Copy previous values
        v->e[1] = v->e[0];                      // Copy previous error
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	695a      	ldr	r2, [r3, #20]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	619a      	str	r2, [r3, #24]
        v->pi_ffw[1] = v->pi_ffw[0];            // Copy previous feedforward
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	645a      	str	r2, [r3, #68]	@ 0x44
        v->pi_int[1] = v->pi_int[0];			// Copy previous integrator
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	63da      	str	r2, [r3, #60]	@ 0x3c
        v->e[1] = 0.0F;
        v->pi_ffw[1] = 0.0F;
        v->pi_int[1] = 0.0F;
        v->pi_out = 0.0F;
    }
}
 80074e0:	e00f      	b.n	8007502 <pi_aw_calc+0xfa>
        v->e[1] = 0.0F;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f04f 0200 	mov.w	r2, #0
 80074e8:	619a      	str	r2, [r3, #24]
        v->pi_ffw[1] = 0.0F;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f04f 0200 	mov.w	r2, #0
 80074f0:	645a      	str	r2, [r3, #68]	@ 0x44
        v->pi_int[1] = 0.0F;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f04f 0200 	mov.w	r2, #0
 80074f8:	63da      	str	r2, [r3, #60]	@ 0x3c
        v->pi_out = 0.0F;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f04f 0200 	mov.w	r2, #0
 8007500:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8007502:	bf00      	nop
 8007504:	370c      	adds	r7, #12
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr

0800750e <pi_init>:
 *
 * @param v Pointer to the PI structure.
 *
 * @note This function initializes the constants used in the PI controller.
 */
void pi_init(volatile pi_struct *v){
 800750e:	b480      	push	{r7}
 8007510:	b083      	sub	sp, #12
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
    v->K0 = v->Kp + v->Ki * v->Ts * 0.5F;   // K0 = Kp + Ki*Ts/2
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	ed93 7a02 	vldr	s14, [r3, #8]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	edd3 6a03 	vldr	s13, [r3, #12]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	edd3 7a01 	vldr	s15, [r3, #4]
 8007528:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800752c:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8007530:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007534:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	edc3 7a04 	vstr	s15, [r3, #16]
    v->K1 = -v->Kp + v->Ki * v->Ts * 0.5F;  // K1 = -Kp + Ki*Ts/2
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	ed93 7a03 	vldr	s14, [r3, #12]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	edd3 7a01 	vldr	s15, [r3, #4]
 800754a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800754e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007552:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	edd3 7a02 	vldr	s15, [r3, #8]
 800755c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8007566:	bf00      	nop
 8007568:	370c      	adds	r7, #12
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr

08007572 <pi_calc>:
 * @param v Pointer to the PI structure.
 *
 * @note This function computes the PI control action with feedforward and saturation.
 */
void pi_calc(volatile pi_struct *v)
{
 8007572:	b480      	push	{r7}
 8007574:	b083      	sub	sp, #12
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
    if(v->enable)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	881b      	ldrh	r3, [r3, #0]
 800757e:	b29b      	uxth	r3, r3
 8007580:	2b00      	cmp	r3, #0
 8007582:	d056      	beq.n	8007632 <pi_calc+0xc0>
    {
        v->e[0] = v->pi_consig - v->pi_fdb; // Calculate error
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	ed93 7a08 	vldr	s14, [r3, #32]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8007590:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	edc3 7a06 	vstr	s15, [r3, #24]
        v->pi_out += v->K0 * v->e[0] + v->K1 * v->e[1] + v->pi_ffw[0] - v->pi_ffw[1];   // PI trapezoidal with feedforward
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	ed93 7a04 	vldr	s14, [r3, #16]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	edd3 7a06 	vldr	s15, [r3, #24]
 80075a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	edd3 6a05 	vldr	s13, [r3, #20]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	edd3 7a07 	vldr	s15, [r3, #28]
 80075b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80075ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80075c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80075ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80075d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        // Output voltage saturation
        if (v->pi_out > v->pi_out_max)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80075ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80075f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075f6:	dd04      	ble.n	8007602 <pi_calc+0x90>
            v->pi_out = v->pi_out_max;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8007600:	e00e      	b.n	8007620 <pi_calc+0xae>
        else if (v->pi_out < v->pi_out_min)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800760e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007616:	d503      	bpl.n	8007620 <pi_calc+0xae>
            v->pi_out = v->pi_out_min;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	631a      	str	r2, [r3, #48]	@ 0x30
        else;
        // Copy previous values
        v->e[1] = v->e[0];                      // Copy previous error
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	699a      	ldr	r2, [r3, #24]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	61da      	str	r2, [r3, #28]
        v->pi_ffw[1] = v->pi_ffw[0];            // Copy previous feedforward
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	639a      	str	r2, [r3, #56]	@ 0x38
        // Reset previous control variables
        v->e[1] = 0.0F;
        v->pi_ffw[1] = 0.0F;
        v->pi_out = 0.0F;
    }
}
 8007630:	e00b      	b.n	800764a <pi_calc+0xd8>
        v->e[1] = 0.0F;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f04f 0200 	mov.w	r2, #0
 8007638:	61da      	str	r2, [r3, #28]
        v->pi_ffw[1] = 0.0F;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f04f 0200 	mov.w	r2, #0
 8007640:	639a      	str	r2, [r3, #56]	@ 0x38
        v->pi_out = 0.0F;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f04f 0200 	mov.w	r2, #0
 8007648:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800764a:	bf00      	nop
 800764c:	370c      	adds	r7, #12
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr

08007656 <clarke3F_calc>:
 * @param v Pointer to the Clarke transformation structure.
 *
 * @note This function computes the Clarke transformation for three-phase signals.
 */
void clarke3F_calc(volatile clarke3F_struct *v)
{
 8007656:	b480      	push	{r7}
 8007658:	b083      	sub	sp, #12
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
    v->D = v->a;                                       // Alfa = A
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	609a      	str	r2, [r3, #8]
    v->Q = ISQ3*( v->a + 2.0F * v->b );              // Beta = 1/sqrt(3)*(A + 2*B) = 1/sqrt(3)*(B - C)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	ed93 7a00 	vldr	s14, [r3]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	edd3 7a01 	vldr	s15, [r3, #4]
 8007672:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007676:	ee77 7a27 	vadd.f32	s15, s14, s15
 800767a:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8007694 <clarke3F_calc+0x3e>
 800767e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8007688:	bf00      	nop
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr
 8007694:	3f13cd3a 	.word	0x3f13cd3a

08007698 <rot_calc>:
 * @param v Pointer to the rotation transformation structure.
 *
 * @note This function computes the rotation transformation (clockwise).
 */
void rot_calc(volatile rot_struct *v)
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
    v->d = v->D*v->cosFi + v->Q*v->sinFi;              // d = Alfa(D)*cos(Fi) + Beta(Q)*sin(Fi)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	ed93 7a00 	vldr	s14, [r3]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	edd3 7a03 	vldr	s15, [r3, #12]
 80076ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	edd3 6a01 	vldr	s13, [r3, #4]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80076bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80076c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	edc3 7a04 	vstr	s15, [r3, #16]
    v->q = v->Q*v->cosFi - v->D*v->sinFi ;             // q = -Alfa(D)*sin(Fi) + Beta(Q)*cos(Fi)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	ed93 7a01 	vldr	s14, [r3, #4]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	edd3 7a03 	vldr	s15, [r3, #12]
 80076d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	edd3 6a00 	vldr	s13, [r3]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80076e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80076ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	edc3 7a05 	vstr	s15, [r3, #20]
}
 80076f4:	bf00      	nop
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <irot_calc>:
 * @param v Pointer to the inverse rotation transformation structure.
 *
 * @note This function computes the inverse rotation transformation (counterclockwise).
 */
void irot_calc(volatile irot_struct *v)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
    v->alpha = v->d*v->cosFi - v->q*v->sinFi;              // Alfa(D) = d*cos(Fi) - q*sin(Fi)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	ed93 7a00 	vldr	s14, [r3]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	edd3 7a03 	vldr	s15, [r3, #12]
 8007714:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	edd3 6a01 	vldr	s13, [r3, #4]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	edd3 7a02 	vldr	s15, [r3, #8]
 8007724:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007728:	ee77 7a67 	vsub.f32	s15, s14, s15
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	edc3 7a04 	vstr	s15, [r3, #16]
    v->beta = v->d*v->sinFi + v->q*v->cosFi;              // Beta(Q) = d*sin(Fi) + q*cos(Fi)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	ed93 7a00 	vldr	s14, [r3]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	edd3 7a02 	vldr	s15, [r3, #8]
 800773e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	edd3 6a01 	vldr	s13, [r3, #4]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	edd3 7a03 	vldr	s15, [r3, #12]
 800774e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007752:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	edc3 7a05 	vstr	s15, [r3, #20]
}
 800775c:	bf00      	nop
 800775e:	370c      	adds	r7, #12
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <angle_calc>:
 * @param v Pointer to the angle generation structure.
 *
 * @note This function generates the angle.
 */
void angle_calc(volatile angle_struct *v)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
    // Integrator
    v->angle += v->freq*v->Ts*2;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	ed93 7a00 	vldr	s14, [r3]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	edd3 7a01 	vldr	s15, [r3, #4]
 800777c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007780:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	edd3 7a02 	vldr	s15, [r3, #8]
 800778a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	edc3 7a02 	vstr	s15, [r3, #8]
    v->angle = (v->angle > 1) ? (v->angle - 2) : v->angle;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	edd3 7a02 	vldr	s15, [r3, #8]
 800779a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800779e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077a6:	dd07      	ble.n	80077b8 <angle_calc+0x50>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80077ae:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80077b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80077b6:	e002      	b.n	80077be <angle_calc+0x56>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80077c4:	bf00      	nop
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <svpwm_calc>:
 * @param v Pointer to the SVPWM structure.
 *
 * @note This function calculates the Space Vector Pulse Width Modulation (SVPWM).
 */
void svpwm_calc(volatile svpwm_struct *v)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b089      	sub	sp, #36	@ 0x24
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]

    // Auxiliary variables for SVPWM
    float Va, Vb, Vc, max, min, h;

    // Calculate Va, Vb, and Vc for three-phase system without neutral
    Va = v->alpha;                                      // A = Alfa
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	61fb      	str	r3, [r7, #28]
    //Vb = (- v->valfa + SQ3*v->vbeta)*0.5;              // B = -1/2*Alfa + sqrt(3)/2*Beta
    Vb = (- v->alpha + SQ3*v->beta)*DIV2;              // B = -1/2*Alfa + sqrt(3)/2*Beta
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80077e4:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 80078f8 <svpwm_calc+0x128>
 80077e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	edd3 7a00 	vldr	s15, [r3]
 80077f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80077f6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80077fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80077fe:	edc7 7a06 	vstr	s15, [r7, #24]
    Vc = - Va - Vb;                                     // C = - A - B
 8007802:	edd7 7a07 	vldr	s15, [r7, #28]
 8007806:	eeb1 7a67 	vneg.f32	s14, s15
 800780a:	edd7 7a06 	vldr	s15, [r7, #24]
 800780e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007812:	edc7 7a05 	vstr	s15, [r7, #20]

    // Homopolar addition
    // Select maximum
    max = Va;
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	613b      	str	r3, [r7, #16]
    max = (Vb >= max) ? Vb : max;
 800781a:	ed97 7a06 	vldr	s14, [r7, #24]
 800781e:	edd7 7a04 	vldr	s15, [r7, #16]
 8007822:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800782a:	db01      	blt.n	8007830 <svpwm_calc+0x60>
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	e000      	b.n	8007832 <svpwm_calc+0x62>
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	613b      	str	r3, [r7, #16]
    max = (Vc >= max) ? Vc : max;
 8007834:	ed97 7a05 	vldr	s14, [r7, #20]
 8007838:	edd7 7a04 	vldr	s15, [r7, #16]
 800783c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007844:	db01      	blt.n	800784a <svpwm_calc+0x7a>
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	e000      	b.n	800784c <svpwm_calc+0x7c>
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	613b      	str	r3, [r7, #16]
    // Select minimum
    min = Va;
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	60fb      	str	r3, [r7, #12]
    min = (Vb <= min) ? Vb : min;
 8007852:	ed97 7a06 	vldr	s14, [r7, #24]
 8007856:	edd7 7a03 	vldr	s15, [r7, #12]
 800785a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800785e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007862:	d801      	bhi.n	8007868 <svpwm_calc+0x98>
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	e000      	b.n	800786a <svpwm_calc+0x9a>
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	60fb      	str	r3, [r7, #12]
    min = (Vc <= min) ? Vc : min;
 800786c:	ed97 7a05 	vldr	s14, [r7, #20]
 8007870:	edd7 7a03 	vldr	s15, [r7, #12]
 8007874:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800787c:	d801      	bhi.n	8007882 <svpwm_calc+0xb2>
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	e000      	b.n	8007884 <svpwm_calc+0xb4>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	60fb      	str	r3, [r7, #12]
    // Calculate homopolar component
    h = (max + min)*DIV2;
 8007886:	ed97 7a04 	vldr	s14, [r7, #16]
 800788a:	edd7 7a03 	vldr	s15, [r7, #12]
 800788e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007892:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007896:	ee67 7a87 	vmul.f32	s15, s15, s14
 800789a:	edc7 7a02 	vstr	s15, [r7, #8]

    // Generate duty cycles (range from 0 to 1)
    // Convert sinusoids ranging up to 0.5 to sinusoids ranging from 0 to 1
    v->Da = (Va - h + 0.5F);
 800789e:	ed97 7a07 	vldr	s14, [r7, #28]
 80078a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80078a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078aa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80078ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	edc3 7a02 	vstr	s15, [r3, #8]
    v->Db = (Vb - h + 0.5F);
 80078b8:	ed97 7a06 	vldr	s14, [r7, #24]
 80078bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80078c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078c4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80078c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	edc3 7a03 	vstr	s15, [r3, #12]
    v->Dc = (Vc - h + 0.5F);
 80078d2:	ed97 7a05 	vldr	s14, [r7, #20]
 80078d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80078da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078de:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80078e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	edc3 7a04 	vstr	s15, [r3, #16]
}
 80078ec:	bf00      	nop
 80078ee:	3724      	adds	r7, #36	@ 0x24
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr
 80078f8:	3fddb3d7 	.word	0x3fddb3d7

080078fc <rampa_calc>:
 * @param v Pointer to the ramp structure.
 *
 * @note This function calculates the ramp.
 */
void rampa_calc(volatile rampa_struct *v)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
    if (v->enable)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	7b1b      	ldrb	r3, [r3, #12]
 8007908:	b2db      	uxtb	r3, r3
 800790a:	2b00      	cmp	r3, #0
 800790c:	d04e      	beq.n	80079ac <rampa_calc+0xb0>
    {
        if(v->out < v->in)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	ed93 7a01 	vldr	s14, [r3, #4]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	edd3 7a00 	vldr	s15, [r3]
 800791a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800791e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007922:	d51b      	bpl.n	800795c <rampa_calc+0x60>
        {
            v->out += v->Incr;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	ed93 7a02 	vldr	s14, [r3, #8]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	edd3 7a01 	vldr	s15, [r3, #4]
 8007930:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	edc3 7a01 	vstr	s15, [r3, #4]
            if(v->out > v->in)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	ed93 7a01 	vldr	s14, [r3, #4]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	edd3 7a00 	vldr	s15, [r3]
 8007946:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800794a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800794e:	dc00      	bgt.n	8007952 <rampa_calc+0x56>
    }
    else
    {
        v->out = 0.0F;
    }
}
 8007950:	e030      	b.n	80079b4 <rampa_calc+0xb8>
                v->out = v->in;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	605a      	str	r2, [r3, #4]
}
 800795a:	e02b      	b.n	80079b4 <rampa_calc+0xb8>
        else if(v->out > v->in)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	ed93 7a01 	vldr	s14, [r3, #4]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	edd3 7a00 	vldr	s15, [r3]
 8007968:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800796c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007970:	dc00      	bgt.n	8007974 <rampa_calc+0x78>
}
 8007972:	e01f      	b.n	80079b4 <rampa_calc+0xb8>
            v->out -= v->Incr;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	edd3 7a02 	vldr	s15, [r3, #8]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	ed93 7a01 	vldr	s14, [r3, #4]
 8007980:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	edc3 7a01 	vstr	s15, [r3, #4]
            if(v->out < v->in)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	ed93 7a01 	vldr	s14, [r3, #4]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	edd3 7a00 	vldr	s15, [r3]
 8007996:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800799a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800799e:	d400      	bmi.n	80079a2 <rampa_calc+0xa6>
}
 80079a0:	e008      	b.n	80079b4 <rampa_calc+0xb8>
                v->out = v->in;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	605a      	str	r2, [r3, #4]
}
 80079aa:	e003      	b.n	80079b4 <rampa_calc+0xb8>
        v->out = 0.0F;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f04f 0200 	mov.w	r2, #0
 80079b2:	605a      	str	r2, [r3, #4]
}
 80079b4:	bf00      	nop
 80079b6:	370c      	adds	r7, #12
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <rampa_dual_calc>:
 * @param v Pointer to the dual ramp structure.
 *
 * @note This function calculates the dual ramp.
 */
void rampa_dual_calc(volatile rampa_dual_struct *v)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
    if (v->enable)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	7c1b      	ldrb	r3, [r3, #16]
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d04e      	beq.n	8007a70 <rampa_dual_calc+0xb0>
    {
        if(v->out < v->in)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	ed93 7a01 	vldr	s14, [r3, #4]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	edd3 7a00 	vldr	s15, [r3]
 80079de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80079e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079e6:	d51b      	bpl.n	8007a20 <rampa_dual_calc+0x60>
        {
            v->out += v->Incr;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	ed93 7a02 	vldr	s14, [r3, #8]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80079f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	edc3 7a01 	vstr	s15, [r3, #4]
            if(v->out > v->in)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	ed93 7a01 	vldr	s14, [r3, #4]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	edd3 7a00 	vldr	s15, [r3]
 8007a0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a12:	dc00      	bgt.n	8007a16 <rampa_dual_calc+0x56>
    }
    else
    {
        v->out = 0;
    }
}
 8007a14:	e030      	b.n	8007a78 <rampa_dual_calc+0xb8>
                v->out = v->in;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	605a      	str	r2, [r3, #4]
}
 8007a1e:	e02b      	b.n	8007a78 <rampa_dual_calc+0xb8>
        else if(v->out > v->in)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	ed93 7a01 	vldr	s14, [r3, #4]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	edd3 7a00 	vldr	s15, [r3]
 8007a2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a34:	dc00      	bgt.n	8007a38 <rampa_dual_calc+0x78>
}
 8007a36:	e01f      	b.n	8007a78 <rampa_dual_calc+0xb8>
            v->out -= v->Decr;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	edd3 7a03 	vldr	s15, [r3, #12]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	ed93 7a01 	vldr	s14, [r3, #4]
 8007a44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	edc3 7a01 	vstr	s15, [r3, #4]
            if(v->out < v->in)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	ed93 7a01 	vldr	s14, [r3, #4]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	edd3 7a00 	vldr	s15, [r3]
 8007a5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a62:	d400      	bmi.n	8007a66 <rampa_dual_calc+0xa6>
}
 8007a64:	e008      	b.n	8007a78 <rampa_dual_calc+0xb8>
                v->out = v->in;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	605a      	str	r2, [r3, #4]
}
 8007a6e:	e003      	b.n	8007a78 <rampa_dual_calc+0xb8>
        v->out = 0;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f04f 0200 	mov.w	r2, #0
 8007a76:	605a      	str	r2, [r3, #4]
}
 8007a78:	bf00      	nop
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <RMS_calc>:
 *
 * @param v Pointer to the RMS structure.
 *
 * @note This function calculates the Root Mean Square (RMS).
 */
void RMS_calc(volatile RMS_struct *v){
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
    // Calculate RMS output current.
    //-----------------------------------------------------------------------------------------
    v->Sq_Sum += (float) (v->Measure * v->Measure)* v->T_exec;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	ed93 7a01 	vldr	s14, [r3, #4]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	edd3 7a01 	vldr	s15, [r3, #4]
 8007a98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	edd3 7a00 	vldr	s15, [r3]
 8007aa2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	edd3 7a02 	vldr	s15, [r3, #8]
 8007aac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	edc3 7a02 	vstr	s15, [r3, #8]
    // Execute calculation at the zero crossing of the angle
    //
    if (v->Freq > 0.0F) {
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	edd3 7a04 	vldr	s15, [r3, #16]
 8007abc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ac4:	dd25      	ble.n	8007b12 <RMS_calc+0x8e>
        if (v->Angle_ant < 0.0F && v->Angle >= 0.0F) {
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	edd3 7a06 	vldr	s15, [r3, #24]
 8007acc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ad4:	d54c      	bpl.n	8007b70 <RMS_calc+0xec>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	edd3 7a05 	vldr	s15, [r3, #20]
 8007adc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ae4:	db44      	blt.n	8007b70 <RMS_calc+0xec>
           // Calculate RMS
            v->Out_RMS = sqrtf((float) v->Sq_Sum * v->Freq);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	ed93 7a02 	vldr	s14, [r3, #8]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	edd3 7a04 	vldr	s15, [r3, #16]
 8007af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007af6:	eeb0 0a67 	vmov.f32	s0, s15
 8007afa:	f7ff faad 	bl	8007058 <sqrtf>
 8007afe:	eef0 7a40 	vmov.f32	s15, s0
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	edc3 7a03 	vstr	s15, [r3, #12]
            v->Sq_Sum = 0;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f04f 0200 	mov.w	r2, #0
 8007b0e:	609a      	str	r2, [r3, #8]
 8007b10:	e02e      	b.n	8007b70 <RMS_calc+0xec>
        }
        else;
    }
    else if (v->Freq < 0.0F){
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	edd3 7a04 	vldr	s15, [r3, #16]
 8007b18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b20:	d526      	bpl.n	8007b70 <RMS_calc+0xec>
        if (v->Angle_ant > 0.0F && v->Angle <= 0.0F) {
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	edd3 7a06 	vldr	s15, [r3, #24]
 8007b28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b30:	dd1e      	ble.n	8007b70 <RMS_calc+0xec>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	edd3 7a05 	vldr	s15, [r3, #20]
 8007b38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b40:	d816      	bhi.n	8007b70 <RMS_calc+0xec>
            // Calculate RMS
            v->Out_RMS = sqrtf((float) v->Sq_Sum * v->Freq * (-1.0F));
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	ed93 7a02 	vldr	s14, [r3, #8]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	edd3 7a04 	vldr	s15, [r3, #16]
 8007b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b52:	eef1 7a67 	vneg.f32	s15, s15
 8007b56:	eeb0 0a67 	vmov.f32	s0, s15
 8007b5a:	f7ff fa7d 	bl	8007058 <sqrtf>
 8007b5e:	eef0 7a40 	vmov.f32	s15, s0
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	edc3 7a03 	vstr	s15, [r3, #12]
            v->Sq_Sum = 0;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f04f 0200 	mov.w	r2, #0
 8007b6e:	609a      	str	r2, [r3, #8]
        }
        else;
        //do nothing
    }
    else;
    v->Angle_ant = v->Angle;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	695a      	ldr	r2, [r3, #20]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	619a      	str	r2, [r3, #24]
}
 8007b78:	bf00      	nop
 8007b7a:	3708      	adds	r7, #8
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <filtreLP_calc>:
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
    if (v->enable)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	8a9b      	ldrh	r3, [r3, #20]
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d015      	beq.n	8007bbe <filtreLP_calc+0x3e>
        v->out = (v->alfa * (v->in - v->out)) + v->out;    // Filter out(k) = alfa*in(k) + (1-alfa)*out(k-1)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	ed93 7a02 	vldr	s14, [r3, #8]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	edd3 6a00 	vldr	s13, [r3]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	edd3 7a01 	vldr	s15, [r3, #4]
 8007ba4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007ba8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	edd3 7a01 	vldr	s15, [r3, #4]
 8007bb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8007bbc:	e003      	b.n	8007bc6 <filtreLP_calc+0x46>
        v->out = v->in;        // Without filter. Out(k) = In(k)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	605a      	str	r2, [r3, #4]
}
 8007bc6:	bf00      	nop
 8007bc8:	370c      	adds	r7, #12
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr

08007bd2 <step_calc>:
 * @param v Pointer to the step structure.
 *
 * @note This function calculates the step function.
 */
void step_calc(volatile step_struct *v)
{
 8007bd2:	b480      	push	{r7}
 8007bd4:	b083      	sub	sp, #12
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
    // Calculate step width in pulses to count
    v->Pulses = (uint32_t)((v->fs) * (v->t_step));
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	ed93 7a00 	vldr	s14, [r3]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	edd3 7a04 	vldr	s15, [r3, #16]
 8007be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bee:	ee17 2a90 	vmov	r2, s15
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	615a      	str	r2, [r3, #20]

    // If enabled, perform the step and start counting
    if (v->enable == 1 && v->Counter < v->Pulses){
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	8b9b      	ldrh	r3, [r3, #28]
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d116      	bne.n	8007c2e <step_calc+0x5c>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	699a      	ldr	r2, [r3, #24]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	695b      	ldr	r3, [r3, #20]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d210      	bcs.n	8007c2e <step_calc+0x5c>
        v->Out = v->In + v->Step;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	ed93 7a01 	vldr	s14, [r3, #4]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	edd3 7a03 	vldr	s15, [r3, #12]
 8007c18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	edc3 7a02 	vstr	s15, [r3, #8]
        v->Counter++;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	699b      	ldr	r3, [r3, #24]
 8007c26:	1c5a      	adds	r2, r3, #1
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	619a      	str	r2, [r3, #24]
 8007c2c:	e01a      	b.n	8007c64 <step_calc+0x92>
    }
    // When reaching the time limit, remove step and reset the counter
    else if (v->enable == 1 && v->Counter >= v->Pulses){
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	8b9b      	ldrh	r3, [r3, #28]
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d110      	bne.n	8007c5a <step_calc+0x88>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	699a      	ldr	r2, [r3, #24]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	695b      	ldr	r3, [r3, #20]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d30a      	bcc.n	8007c5a <step_calc+0x88>
        v->Out = v->In;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	685a      	ldr	r2, [r3, #4]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	609a      	str	r2, [r3, #8]
        v->Counter = 0;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	619a      	str	r2, [r3, #24]
        v->enable = 0;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	839a      	strh	r2, [r3, #28]
 8007c58:	e004      	b.n	8007c64 <step_calc+0x92>
    }
    // If not enabled
    else v->Out = v->In;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	685a      	ldr	r2, [r3, #4]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	609a      	str	r2, [r3, #8]
}
 8007c62:	bf00      	nop
 8007c64:	bf00      	nop
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr
