
Inverter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000688c  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08006a84  08006a84  00007a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006aa8  08006aa8  00008024  2**0
                  CONTENTS
  4 .ARM          00000008  08006aa8  08006aa8  00007aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ab0  08006ab0  00008024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ab0  08006ab0  00007ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ab4  08006ab4  00007ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08006ab8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  20000024  08006adc  00008024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  08006adc  000084a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016325  00000000  00000000  00008052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cd4  00000000  00000000  0001e377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b0  00000000  00000000  00022050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f04  00000000  00000000  00023400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aa8b  00000000  00000000  00024304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c5df  00000000  00000000  0004ed8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100087  00000000  00000000  0006b36e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016b3f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f6c  00000000  00000000  0016b438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  001703a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000024 	.word	0x20000024
 8000214:	00000000 	.word	0x00000000
 8000218:	08006a6c 	.word	0x08006a6c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000028 	.word	0x20000028
 8000234:	08006a6c 	.word	0x08006a6c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <inv_init>:
 * @param inv Pointer to the inverter operation structure.
 * @param led Pointer to the LED structure.
 * @param enable_port Pointer to the GPIO port for enabling/disabling the inverter.
 * @param enable_pin Pin number for enabling/disabling the inverter.
 */
void inv_init(InverterOperation *inv, LED *led, GPIO_TypeDef *enable_port, uint16_t enable_pin) {
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
 8000534:	807b      	strh	r3, [r7, #2]
    // Initialize inverter operation structure
    inv->state = INV_STATE_STARTUP;
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	2201      	movs	r2, #1
 800053a:	729a      	strb	r2, [r3, #10]
    inv->led = led;
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	68ba      	ldr	r2, [r7, #8]
 8000540:	601a      	str	r2, [r3, #0]
    inv->enable_pin = enable_pin;
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	887a      	ldrh	r2, [r7, #2]
 8000546:	811a      	strh	r2, [r3, #8]
    inv->enable_port = enable_port;
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	605a      	str	r2, [r3, #4]
    // Add initialization of other inverter-specific variables here
}
 800054e:	bf00      	nop
 8000550:	3714      	adds	r7, #20
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
	...

0800055c <inv_FSM>:
 *
 * This function executes the finite state machine to control the inverter operation based on its current state.
 *
 * @param inv Pointer to the inverter operation structure.
 */
void inv_FSM(InverterOperation *inv) {
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
    switch (inv->state) {
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	7a9b      	ldrb	r3, [r3, #10]
 8000568:	2b03      	cmp	r3, #3
 800056a:	d81b      	bhi.n	80005a4 <inv_FSM+0x48>
 800056c:	a201      	add	r2, pc, #4	@ (adr r2, 8000574 <inv_FSM+0x18>)
 800056e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000572:	bf00      	nop
 8000574:	08000585 	.word	0x08000585
 8000578:	0800058d 	.word	0x0800058d
 800057c:	08000595 	.word	0x08000595
 8000580:	0800059d 	.word	0x0800059d
        case INV_STATE_IDLE:
            idle_handler(inv);
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f000 f813 	bl	80005b0 <idle_handler>
            break;
 800058a:	e00c      	b.n	80005a6 <inv_FSM+0x4a>
        case INV_STATE_STARTUP:
            startup_handler(inv);
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f000 f823 	bl	80005d8 <startup_handler>
            break;
 8000592:	e008      	b.n	80005a6 <inv_FSM+0x4a>
        case INV_STATE_RUNNING:
            running_handler(inv);
 8000594:	6878      	ldr	r0, [r7, #4]
 8000596:	f000 f833 	bl	8000600 <running_handler>
            break;
 800059a:	e004      	b.n	80005a6 <inv_FSM+0x4a>
        case INV_STATE_FAULT:
            fault_handler(inv);
 800059c:	6878      	ldr	r0, [r7, #4]
 800059e:	f000 f843 	bl	8000628 <fault_handler>
            break;
 80005a2:	e000      	b.n	80005a6 <inv_FSM+0x4a>
        default:
            // Invalid state, handle error
            break;
 80005a4:	bf00      	nop
    }
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop

080005b0 <idle_handler>:
 *
 * This function handles the actions and transitions for the idle state of the inverter operation.
 *
 * @param inv Pointer to the inverter operation structure.
 */
static void idle_handler(InverterOperation *inv) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
    // Perform actions required in idle state
    // Transition conditions to other states:
    // - Start startup sequence based on input condition
    // - Transition to fault state based on error conditions
    inv->led->mode = LED_MODE_OFF;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2203      	movs	r2, #3
 80005be:	719a      	strb	r2, [r3, #6]
    DISABLE(inv->enable_port, inv->enable_pin);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6858      	ldr	r0, [r3, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	891b      	ldrh	r3, [r3, #8]
 80005c8:	2200      	movs	r2, #0
 80005ca:	4619      	mov	r1, r3
 80005cc:	f003 fbee 	bl	8003dac <HAL_GPIO_WritePin>
}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <startup_handler>:
 *
 * This function handles the actions and transitions for the startup state of the inverter operation.
 *
 * @param inv Pointer to the inverter operation structure.
 */
static void startup_handler(InverterOperation *inv) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
    // Perform actions required in startup state
    // Transition conditions to other states:
    // - Transition to running state when startup sequence completes successfully
    // - Transition to fault state based on error conditions during startup
    inv->led->mode = LED_MODE_BLINK_FAST;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2200      	movs	r2, #0
 80005e6:	719a      	strb	r2, [r3, #6]
    DISABLE(inv->enable_port, inv->enable_pin);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	6858      	ldr	r0, [r3, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	891b      	ldrh	r3, [r3, #8]
 80005f0:	2200      	movs	r2, #0
 80005f2:	4619      	mov	r1, r3
 80005f4:	f003 fbda 	bl	8003dac <HAL_GPIO_WritePin>
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <running_handler>:
 *
 * This function handles the actions and transitions for the running state of the inverter operation.
 *
 * @param inv Pointer to the inverter operation structure.
 */
static void running_handler(InverterOperation *inv) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
    // Perform actions required in running state
    // This is where the main control loop resides
    // Monitor inverter variables, adjust control parameters, etc.
    // Transition conditions to other states:
    // - Transition to fault state based on error conditions during operation
    inv->led->mode = LED_MODE_ON;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2202      	movs	r2, #2
 800060e:	719a      	strb	r2, [r3, #6]
    ENABLE(inv->enable_port, inv->enable_pin);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	6858      	ldr	r0, [r3, #4]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	891b      	ldrh	r3, [r3, #8]
 8000618:	2201      	movs	r2, #1
 800061a:	4619      	mov	r1, r3
 800061c:	f003 fbc6 	bl	8003dac <HAL_GPIO_WritePin>
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <fault_handler>:
 *
 * This function handles the actions and transitions for the fault state of the inverter operation.
 *
 * @param inv Pointer to the inverter operation structure.
 */
static void fault_handler(InverterOperation *inv) {
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
    // Perform actions required in fault state
    // This could involve shutting down the inverter, logging error messages, etc.
    // Transition conditions to other states:
    // - Retry startup sequence after a delay if fault condition is recoverable
    // - Transition to idle state after fault is resolved
    inv->led->mode = LED_MODE_BLINK_SLOW;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2201      	movs	r2, #1
 8000636:	719a      	strb	r2, [r3, #6]
    DISABLE(inv->enable_port, inv->enable_pin);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	6858      	ldr	r0, [r3, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	891b      	ldrh	r3, [r3, #8]
 8000640:	2200      	movs	r2, #0
 8000642:	4619      	mov	r1, r3
 8000644:	f003 fbb2 	bl	8003dac <HAL_GPIO_WritePin>
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <getADCelec>:
  * @param  ADC_raw Pointer to the raw ADC values array.
  * @param  encoder Pointer to the encoder struct.
  * @param  measurements Pointer to the measurements struct to store the results.
  * @retval OK 0 if an error occurred, 1 if successful.
  */
uint8_t getADCelec(volatile uint32_t* ADC_raw, volatile Encoder* encoder, volatile Measurements* measurements) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af00      	add	r7, sp, #0
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	60b9      	str	r1, [r7, #8]
 800065a:	607a      	str	r2, [r7, #4]
    // Check for null pointers
    if (ADC_raw == NULL || encoder == NULL || measurements == NULL) {
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d005      	beq.n	800066e <getADCelec+0x1e>
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d002      	beq.n	800066e <getADCelec+0x1e>
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d101      	bne.n	8000672 <getADCelec+0x22>
        return 0; // Error: Null pointer detected
 800066e:	2300      	movs	r3, #0
 8000670:	e03b      	b.n	80006ea <getADCelec+0x9a>
    }

    // Calculate currents and voltage
    float ia = getLinear(ADC_raw[0], CURRENT_SLOPE, CURRENT_OFFSET);
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 80006f4 <getADCelec+0xa4>
 800067a:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 80006f8 <getADCelec+0xa8>
 800067e:	4618      	mov	r0, r3
 8000680:	f000 f840 	bl	8000704 <getLinear>
 8000684:	ed87 0a07 	vstr	s0, [r7, #28]
    float ib = getLinear(ADC_raw[1], CURRENT_SLOPE, CURRENT_OFFSET);
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	3304      	adds	r3, #4
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	eddf 0a19 	vldr	s1, [pc, #100]	@ 80006f4 <getADCelec+0xa4>
 8000692:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 80006f8 <getADCelec+0xa8>
 8000696:	4618      	mov	r0, r3
 8000698:	f000 f834 	bl	8000704 <getLinear>
 800069c:	ed87 0a06 	vstr	s0, [r7, #24]
    float ic = getLinear(ADC_raw[2], CURRENT_SLOPE, CURRENT_OFFSET);
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	3308      	adds	r3, #8
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	eddf 0a13 	vldr	s1, [pc, #76]	@ 80006f4 <getADCelec+0xa4>
 80006aa:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 80006f8 <getADCelec+0xa8>
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 f828 	bl	8000704 <getLinear>
 80006b4:	ed87 0a05 	vstr	s0, [r7, #20]
    float VDC = getLinear(ADC_raw[3], VOLTAGE_SLOPE, VOLTAGE_OFFSET);
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	330c      	adds	r3, #12
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 80006fc <getADCelec+0xac>
 80006c2:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8000700 <getADCelec+0xb0>
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 f81c 	bl	8000704 <getLinear>
 80006cc:	ed87 0a04 	vstr	s0, [r7, #16]

    // Store the measurements
    measurements->ia = ia;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	69fa      	ldr	r2, [r7, #28]
 80006d4:	601a      	str	r2, [r3, #0]
    measurements->ib = ib;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	69ba      	ldr	r2, [r7, #24]
 80006da:	605a      	str	r2, [r3, #4]
    measurements->ic = ic;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	697a      	ldr	r2, [r7, #20]
 80006e0:	609a      	str	r2, [r3, #8]
    measurements->VDC = VDC;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	693a      	ldr	r2, [r7, #16]
 80006e6:	60da      	str	r2, [r3, #12]

    return 1; // Success
 80006e8:	2301      	movs	r3, #1
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3720      	adds	r7, #32
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	3fd9afe4 	.word	0x3fd9afe4
 80006f8:	4259afe4 	.word	0x4259afe4
 80006fc:	3caaa3ad 	.word	0x3caaa3ad
 8000700:	3b78c650 	.word	0x3b78c650

08000704 <getLinear>:
  * @param  bits The ADC reading.
  * @param  slope The slope (units per volt).
  * @param  offset The offset (volts at zero).
  * @retval measurement The physical measurement.
  */
float getLinear(uint32_t bits, float slope, float offset) {
 8000704:	b480      	push	{r7}
 8000706:	b087      	sub	sp, #28
 8000708:	af00      	add	r7, sp, #0
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000710:	edc7 0a01 	vstr	s1, [r7, #4]
    // Convert ADC reading to voltage
    float voltage = (float) bits * 0.0008058608f; // Assuming 12-bit ADC and 3.3V reference (bits * (3.3 V / 4095.0 bits))
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	ee07 3a90 	vmov	s15, r3
 800071a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800071e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000758 <getLinear+0x54>
 8000722:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000726:	edc7 7a05 	vstr	s15, [r7, #20]

    // Convert voltage to physical measurement
    float measurement = (voltage - offset) * slope;
 800072a:	ed97 7a05 	vldr	s14, [r7, #20]
 800072e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000732:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000736:	ed97 7a02 	vldr	s14, [r7, #8]
 800073a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800073e:	edc7 7a04 	vstr	s15, [r7, #16]

    return measurement;
 8000742:	693b      	ldr	r3, [r7, #16]
 8000744:	ee07 3a90 	vmov	s15, r3
}
 8000748:	eeb0 0a67 	vmov.f32	s0, s15
 800074c:	371c      	adds	r7, #28
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	3a534067 	.word	0x3a534067

0800075c <LED_handler>:
 * This function handles the LED blinking modes based on the LED mode and current millisecond counter.
 *
 * @param led Pointer to the LED structure.
 * @param ms_counter Current millisecond counter.
 */
void LED_handler(LED *led, uint32_t ms_counter) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	6039      	str	r1, [r7, #0]
    switch (led->mode) {
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	799b      	ldrb	r3, [r3, #6]
 800076a:	2b03      	cmp	r3, #3
 800076c:	d858      	bhi.n	8000820 <LED_handler+0xc4>
 800076e:	a201      	add	r2, pc, #4	@ (adr r2, 8000774 <LED_handler+0x18>)
 8000770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000774:	08000785 	.word	0x08000785
 8000778:	080007bf 	.word	0x080007bf
 800077c:	080007fd 	.word	0x080007fd
 8000780:	0800080f 	.word	0x0800080f
        case LED_MODE_BLINK_FAST:
            if (ms_counter % 200 < 100) {
 8000784:	683a      	ldr	r2, [r7, #0]
 8000786:	4b29      	ldr	r3, [pc, #164]	@ (800082c <LED_handler+0xd0>)
 8000788:	fba3 1302 	umull	r1, r3, r3, r2
 800078c:	099b      	lsrs	r3, r3, #6
 800078e:	21c8      	movs	r1, #200	@ 0xc8
 8000790:	fb01 f303 	mul.w	r3, r1, r3
 8000794:	1ad3      	subs	r3, r2, r3
 8000796:	2b63      	cmp	r3, #99	@ 0x63
 8000798:	d808      	bhi.n	80007ac <LED_handler+0x50>
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_SET);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	6818      	ldr	r0, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	889b      	ldrh	r3, [r3, #4]
 80007a2:	2201      	movs	r2, #1
 80007a4:	4619      	mov	r1, r3
 80007a6:	f003 fb01 	bl	8003dac <HAL_GPIO_WritePin>
            } else {
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
            }
            break;
 80007aa:	e03a      	b.n	8000822 <LED_handler+0xc6>
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	6818      	ldr	r0, [r3, #0]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	889b      	ldrh	r3, [r3, #4]
 80007b4:	2200      	movs	r2, #0
 80007b6:	4619      	mov	r1, r3
 80007b8:	f003 faf8 	bl	8003dac <HAL_GPIO_WritePin>
            break;
 80007bc:	e031      	b.n	8000822 <LED_handler+0xc6>
        case LED_MODE_BLINK_SLOW:
            if (ms_counter % 1000 < 500) {
 80007be:	683a      	ldr	r2, [r7, #0]
 80007c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000830 <LED_handler+0xd4>)
 80007c2:	fba3 1302 	umull	r1, r3, r3, r2
 80007c6:	099b      	lsrs	r3, r3, #6
 80007c8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80007cc:	fb01 f303 	mul.w	r3, r1, r3
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80007d6:	d208      	bcs.n	80007ea <LED_handler+0x8e>
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_SET);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	6818      	ldr	r0, [r3, #0]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	889b      	ldrh	r3, [r3, #4]
 80007e0:	2201      	movs	r2, #1
 80007e2:	4619      	mov	r1, r3
 80007e4:	f003 fae2 	bl	8003dac <HAL_GPIO_WritePin>
            } else {
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
            }
            break;
 80007e8:	e01b      	b.n	8000822 <LED_handler+0xc6>
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	6818      	ldr	r0, [r3, #0]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	889b      	ldrh	r3, [r3, #4]
 80007f2:	2200      	movs	r2, #0
 80007f4:	4619      	mov	r1, r3
 80007f6:	f003 fad9 	bl	8003dac <HAL_GPIO_WritePin>
            break;
 80007fa:	e012      	b.n	8000822 <LED_handler+0xc6>
        case LED_MODE_ON:
            HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_SET);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	6818      	ldr	r0, [r3, #0]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	889b      	ldrh	r3, [r3, #4]
 8000804:	2201      	movs	r2, #1
 8000806:	4619      	mov	r1, r3
 8000808:	f003 fad0 	bl	8003dac <HAL_GPIO_WritePin>
            break;
 800080c:	e009      	b.n	8000822 <LED_handler+0xc6>
        case LED_MODE_OFF:
            HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	6818      	ldr	r0, [r3, #0]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	889b      	ldrh	r3, [r3, #4]
 8000816:	2200      	movs	r2, #0
 8000818:	4619      	mov	r1, r3
 800081a:	f003 fac7 	bl	8003dac <HAL_GPIO_WritePin>
            break;
 800081e:	e000      	b.n	8000822 <LED_handler+0xc6>
        default:
            // Invalid LED mode
            break;
 8000820:	bf00      	nop
    }
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	51eb851f 	.word	0x51eb851f
 8000830:	10624dd3 	.word	0x10624dd3

08000834 <enable_PWM>:
 *
 * This function enables PWM output for the specified timer.
 *
 * @param htim Pointer to the TIM_HandleTypeDef structure.
 */
void enable_PWM(TIM_HandleTypeDef *htim) {
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]

//	//Reset the counter
//	htim->Instance->CNT=0;
//
	htim->Instance->CCMR1 = 0x6868; // Set Channel 1 and Channel 2 Output Compare mode to PWM Mode
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f646 0268 	movw	r2, #26728	@ 0x6868
 8000844:	619a      	str	r2, [r3, #24]
//
//	//	htim1.Instance->CCER = 0x888;
	htim->Instance->CCER = 0x10555;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a11      	ldr	r2, [pc, #68]	@ (8000890 <enable_PWM+0x5c>)
 800084c:	621a      	str	r2, [r3, #32]
//
//	//Enable Main Output
	htim->Instance->BDTR |=(1<<15);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800085c:	645a      	str	r2, [r3, #68]	@ 0x44
//
//	//Enable Counter
	htim->Instance->CR1 |=1;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f042 0201 	orr.w	r2, r2, #1
 800086c:	601a      	str	r2, [r3, #0]

    Duties duties = {0.7F,0.7F,0.7F};
 800086e:	4a09      	ldr	r2, [pc, #36]	@ (8000894 <enable_PWM+0x60>)
 8000870:	f107 030c 	add.w	r3, r7, #12
 8000874:	ca07      	ldmia	r2, {r0, r1, r2}
 8000876:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    set_PWM(htim, &duties);
 800087a:	f107 030c 	add.w	r3, r7, #12
 800087e:	4619      	mov	r1, r3
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f000 f809 	bl	8000898 <set_PWM>
}
 8000886:	bf00      	nop
 8000888:	3718      	adds	r7, #24
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	00010555 	.word	0x00010555
 8000894:	08006a84 	.word	0x08006a84

08000898 <set_PWM>:
 * This function sets the duty cycles for the PWM channels.
 *
 * @param htim Pointer to the TIM_HandleTypeDef structure.
 * @param duties Pointer to the Duties structure containing duty cycle values.
 */
void set_PWM(TIM_HandleTypeDef *htim, Duties *duties) {
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]
	htim->Instance->CCR1 = (1.0F-duties->Da)*htim->Instance->ARR;
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	edd3 7a00 	vldr	s15, [r3]
 80008a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80008ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008b6:	ee07 3a90 	vmov	s15, r3
 80008ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008ca:	ee17 2a90 	vmov	r2, s15
 80008ce:	635a      	str	r2, [r3, #52]	@ 0x34
	htim->Instance->CCR2 = (1.0F-duties->Db)*htim->Instance->ARR;
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80008d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80008da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008e4:	ee07 3a90 	vmov	s15, r3
 80008e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008f8:	ee17 2a90 	vmov	r2, s15
 80008fc:	639a      	str	r2, [r3, #56]	@ 0x38
	htim->Instance->CCR3 = (1.0F-duties->Dc)*htim->Instance->ARR;
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	edd3 7a02 	vldr	s15, [r3, #8]
 8000904:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000908:	ee37 7a67 	vsub.f32	s14, s14, s15
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000912:	ee07 3a90 	vmov	s15, r3
 8000916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800091a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000926:	ee17 2a90 	vmov	r2, s15
 800092a:	63da      	str	r2, [r3, #60]	@ 0x3c

}
 800092c:	bf00      	nop
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <tasks_1ms>:
 *
 * This function is called by the TIM6 IRQ handler every millisecond.
 * It increments the millisecond counter and calls the LED handler
 * for left, right, and error LEDs.
 */
void tasks_1ms(void) {
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
    // Increment millisecond counter
    ms_counter++;
 800093c:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <tasks_1ms+0x38>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	3301      	adds	r3, #1
 8000942:	4a0b      	ldr	r2, [pc, #44]	@ (8000970 <tasks_1ms+0x38>)
 8000944:	6013      	str	r3, [r2, #0]

    // Call LED handler for left, right, and error LEDs
    LED_handler(&led_left, ms_counter);
 8000946:	4b0a      	ldr	r3, [pc, #40]	@ (8000970 <tasks_1ms+0x38>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4619      	mov	r1, r3
 800094c:	4809      	ldr	r0, [pc, #36]	@ (8000974 <tasks_1ms+0x3c>)
 800094e:	f7ff ff05 	bl	800075c <LED_handler>
    LED_handler(&led_right, ms_counter);
 8000952:	4b07      	ldr	r3, [pc, #28]	@ (8000970 <tasks_1ms+0x38>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4619      	mov	r1, r3
 8000958:	4807      	ldr	r0, [pc, #28]	@ (8000978 <tasks_1ms+0x40>)
 800095a:	f7ff feff 	bl	800075c <LED_handler>
    LED_handler(&led_error, ms_counter);
 800095e:	4b04      	ldr	r3, [pc, #16]	@ (8000970 <tasks_1ms+0x38>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4619      	mov	r1, r3
 8000964:	4805      	ldr	r0, [pc, #20]	@ (800097c <tasks_1ms+0x44>)
 8000966:	f7ff fef9 	bl	800075c <LED_handler>
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	2000007c 	.word	0x2000007c
 8000974:	20000000 	.word	0x20000000
 8000978:	20000008 	.word	0x20000008
 800097c:	20000010 	.word	0x20000010

08000980 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000986:	463b      	mov	r3, r7
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000992:	4b2f      	ldr	r3, [pc, #188]	@ (8000a50 <MX_ADC1_Init+0xd0>)
 8000994:	4a2f      	ldr	r2, [pc, #188]	@ (8000a54 <MX_ADC1_Init+0xd4>)
 8000996:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000998:	4b2d      	ldr	r3, [pc, #180]	@ (8000a50 <MX_ADC1_Init+0xd0>)
 800099a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800099e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000a50 <MX_ADC1_Init+0xd0>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80009a6:	4b2a      	ldr	r3, [pc, #168]	@ (8000a50 <MX_ADC1_Init+0xd0>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009ac:	4b28      	ldr	r3, [pc, #160]	@ (8000a50 <MX_ADC1_Init+0xd0>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009b2:	4b27      	ldr	r3, [pc, #156]	@ (8000a50 <MX_ADC1_Init+0xd0>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009ba:	4b25      	ldr	r3, [pc, #148]	@ (8000a50 <MX_ADC1_Init+0xd0>)
 80009bc:	2200      	movs	r2, #0
 80009be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009c0:	4b23      	ldr	r3, [pc, #140]	@ (8000a50 <MX_ADC1_Init+0xd0>)
 80009c2:	4a25      	ldr	r2, [pc, #148]	@ (8000a58 <MX_ADC1_Init+0xd8>)
 80009c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009c6:	4b22      	ldr	r3, [pc, #136]	@ (8000a50 <MX_ADC1_Init+0xd0>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80009cc:	4b20      	ldr	r3, [pc, #128]	@ (8000a50 <MX_ADC1_Init+0xd0>)
 80009ce:	2203      	movs	r2, #3
 80009d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a50 <MX_ADC1_Init+0xd0>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009da:	4b1d      	ldr	r3, [pc, #116]	@ (8000a50 <MX_ADC1_Init+0xd0>)
 80009dc:	2201      	movs	r2, #1
 80009de:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009e0:	481b      	ldr	r0, [pc, #108]	@ (8000a50 <MX_ADC1_Init+0xd0>)
 80009e2:	f001 fb6d 	bl	80020c0 <HAL_ADC_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80009ec:	f000 fe06 	bl	80015fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009f4:	2301      	movs	r3, #1
 80009f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009fc:	463b      	mov	r3, r7
 80009fe:	4619      	mov	r1, r3
 8000a00:	4813      	ldr	r0, [pc, #76]	@ (8000a50 <MX_ADC1_Init+0xd0>)
 8000a02:	f001 fcb9 	bl	8002378 <HAL_ADC_ConfigChannel>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a0c:	f000 fdf6 	bl	80015fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a10:	2301      	movs	r3, #1
 8000a12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a14:	2302      	movs	r3, #2
 8000a16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a18:	463b      	mov	r3, r7
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	480c      	ldr	r0, [pc, #48]	@ (8000a50 <MX_ADC1_Init+0xd0>)
 8000a1e:	f001 fcab 	bl	8002378 <HAL_ADC_ConfigChannel>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000a28:	f000 fde8 	bl	80015fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8000a2c:	2312      	movs	r3, #18
 8000a2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a30:	2303      	movs	r3, #3
 8000a32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a34:	463b      	mov	r3, r7
 8000a36:	4619      	mov	r1, r3
 8000a38:	4805      	ldr	r0, [pc, #20]	@ (8000a50 <MX_ADC1_Init+0xd0>)
 8000a3a:	f001 fc9d 	bl	8002378 <HAL_ADC_ConfigChannel>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000a44:	f000 fdda 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a48:	bf00      	nop
 8000a4a:	3710      	adds	r7, #16
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000080 	.word	0x20000080
 8000a54:	40012000 	.word	0x40012000
 8000a58:	0f000001 	.word	0x0f000001

08000a5c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a62:	463b      	mov	r3, r7
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000a6e:	4b37      	ldr	r3, [pc, #220]	@ (8000b4c <MX_ADC2_Init+0xf0>)
 8000a70:	4a37      	ldr	r2, [pc, #220]	@ (8000b50 <MX_ADC2_Init+0xf4>)
 8000a72:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a74:	4b35      	ldr	r3, [pc, #212]	@ (8000b4c <MX_ADC2_Init+0xf0>)
 8000a76:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000a7a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000a7c:	4b33      	ldr	r3, [pc, #204]	@ (8000b4c <MX_ADC2_Init+0xf0>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a82:	4b32      	ldr	r3, [pc, #200]	@ (8000b4c <MX_ADC2_Init+0xf0>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a88:	4b30      	ldr	r3, [pc, #192]	@ (8000b4c <MX_ADC2_Init+0xf0>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a8e:	4b2f      	ldr	r3, [pc, #188]	@ (8000b4c <MX_ADC2_Init+0xf0>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 8000a96:	4b2d      	ldr	r3, [pc, #180]	@ (8000b4c <MX_ADC2_Init+0xf0>)
 8000a98:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000a9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000a9e:	4b2b      	ldr	r3, [pc, #172]	@ (8000b4c <MX_ADC2_Init+0xf0>)
 8000aa0:	f04f 6210 	mov.w	r2, #150994944	@ 0x9000000
 8000aa4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aa6:	4b29      	ldr	r3, [pc, #164]	@ (8000b4c <MX_ADC2_Init+0xf0>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8000aac:	4b27      	ldr	r3, [pc, #156]	@ (8000b4c <MX_ADC2_Init+0xf0>)
 8000aae:	2204      	movs	r2, #4
 8000ab0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000ab2:	4b26      	ldr	r3, [pc, #152]	@ (8000b4c <MX_ADC2_Init+0xf0>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000aba:	4b24      	ldr	r3, [pc, #144]	@ (8000b4c <MX_ADC2_Init+0xf0>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ac0:	4822      	ldr	r0, [pc, #136]	@ (8000b4c <MX_ADC2_Init+0xf0>)
 8000ac2:	f001 fafd 	bl	80020c0 <HAL_ADC_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8000acc:	f000 fd96 	bl	80015fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000ad0:	2306      	movs	r3, #6
 8000ad2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000adc:	463b      	mov	r3, r7
 8000ade:	4619      	mov	r1, r3
 8000ae0:	481a      	ldr	r0, [pc, #104]	@ (8000b4c <MX_ADC2_Init+0xf0>)
 8000ae2:	f001 fc49 	bl	8002378 <HAL_ADC_ConfigChannel>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8000aec:	f000 fd86 	bl	80015fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000af0:	2307      	movs	r3, #7
 8000af2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000af4:	2302      	movs	r3, #2
 8000af6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000af8:	463b      	mov	r3, r7
 8000afa:	4619      	mov	r1, r3
 8000afc:	4813      	ldr	r0, [pc, #76]	@ (8000b4c <MX_ADC2_Init+0xf0>)
 8000afe:	f001 fc3b 	bl	8002378 <HAL_ADC_ConfigChannel>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8000b08:	f000 fd78 	bl	80015fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000b0c:	2308      	movs	r3, #8
 8000b0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000b10:	2303      	movs	r3, #3
 8000b12:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b14:	463b      	mov	r3, r7
 8000b16:	4619      	mov	r1, r3
 8000b18:	480c      	ldr	r0, [pc, #48]	@ (8000b4c <MX_ADC2_Init+0xf0>)
 8000b1a:	f001 fc2d 	bl	8002378 <HAL_ADC_ConfigChannel>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_ADC2_Init+0xcc>
  {
    Error_Handler();
 8000b24:	f000 fd6a 	bl	80015fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000b28:	2309      	movs	r3, #9
 8000b2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b30:	463b      	mov	r3, r7
 8000b32:	4619      	mov	r1, r3
 8000b34:	4805      	ldr	r0, [pc, #20]	@ (8000b4c <MX_ADC2_Init+0xf0>)
 8000b36:	f001 fc1f 	bl	8002378 <HAL_ADC_ConfigChannel>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_ADC2_Init+0xe8>
  {
    Error_Handler();
 8000b40:	f000 fd5c 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	200000c8 	.word	0x200000c8
 8000b50:	40012100 	.word	0x40012100

08000b54 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b5a:	463b      	mov	r3, r7
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000b66:	4b21      	ldr	r3, [pc, #132]	@ (8000bec <MX_ADC3_Init+0x98>)
 8000b68:	4a21      	ldr	r2, [pc, #132]	@ (8000bf0 <MX_ADC3_Init+0x9c>)
 8000b6a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bec <MX_ADC3_Init+0x98>)
 8000b6e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000b72:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000b74:	4b1d      	ldr	r3, [pc, #116]	@ (8000bec <MX_ADC3_Init+0x98>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bec <MX_ADC3_Init+0x98>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000b80:	4b1a      	ldr	r3, [pc, #104]	@ (8000bec <MX_ADC3_Init+0x98>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000b86:	4b19      	ldr	r3, [pc, #100]	@ (8000bec <MX_ADC3_Init+0x98>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b8e:	4b17      	ldr	r3, [pc, #92]	@ (8000bec <MX_ADC3_Init+0x98>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b94:	4b15      	ldr	r3, [pc, #84]	@ (8000bec <MX_ADC3_Init+0x98>)
 8000b96:	4a17      	ldr	r2, [pc, #92]	@ (8000bf4 <MX_ADC3_Init+0xa0>)
 8000b98:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b9a:	4b14      	ldr	r3, [pc, #80]	@ (8000bec <MX_ADC3_Init+0x98>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000ba0:	4b12      	ldr	r3, [pc, #72]	@ (8000bec <MX_ADC3_Init+0x98>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000ba6:	4b11      	ldr	r3, [pc, #68]	@ (8000bec <MX_ADC3_Init+0x98>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bae:	4b0f      	ldr	r3, [pc, #60]	@ (8000bec <MX_ADC3_Init+0x98>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000bb4:	480d      	ldr	r0, [pc, #52]	@ (8000bec <MX_ADC3_Init+0x98>)
 8000bb6:	f001 fa83 	bl	80020c0 <HAL_ADC_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000bc0:	f000 fd1c 	bl	80015fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000bc4:	230a      	movs	r3, #10
 8000bc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000bd0:	463b      	mov	r3, r7
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4805      	ldr	r0, [pc, #20]	@ (8000bec <MX_ADC3_Init+0x98>)
 8000bd6:	f001 fbcf 	bl	8002378 <HAL_ADC_ConfigChannel>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000be0:	f000 fd0c 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000be4:	bf00      	nop
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000110 	.word	0x20000110
 8000bf0:	40012200 	.word	0x40012200
 8000bf4:	0f000001 	.word	0x0f000001

08000bf8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08e      	sub	sp, #56	@ 0x38
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a93      	ldr	r2, [pc, #588]	@ (8000e64 <HAL_ADC_MspInit+0x26c>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d154      	bne.n	8000cc4 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c1a:	4b93      	ldr	r3, [pc, #588]	@ (8000e68 <HAL_ADC_MspInit+0x270>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c1e:	4a92      	ldr	r2, [pc, #584]	@ (8000e68 <HAL_ADC_MspInit+0x270>)
 8000c20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c24:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c26:	4b90      	ldr	r3, [pc, #576]	@ (8000e68 <HAL_ADC_MspInit+0x270>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c2e:	623b      	str	r3, [r7, #32]
 8000c30:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	4b8d      	ldr	r3, [pc, #564]	@ (8000e68 <HAL_ADC_MspInit+0x270>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	4a8c      	ldr	r2, [pc, #560]	@ (8000e68 <HAL_ADC_MspInit+0x270>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3e:	4b8a      	ldr	r3, [pc, #552]	@ (8000e68 <HAL_ADC_MspInit+0x270>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	61fb      	str	r3, [r7, #28]
 8000c48:	69fb      	ldr	r3, [r7, #28]
    PA0/WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ia_L_Pin|ib_L_Pin|ic_L_Pin|VDC_L_Pin;
 8000c4a:	230f      	movs	r3, #15
 8000c4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4883      	ldr	r0, [pc, #524]	@ (8000e6c <HAL_ADC_MspInit+0x274>)
 8000c5e:	f002 fef9 	bl	8003a54 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c62:	4b83      	ldr	r3, [pc, #524]	@ (8000e70 <HAL_ADC_MspInit+0x278>)
 8000c64:	4a83      	ldr	r2, [pc, #524]	@ (8000e74 <HAL_ADC_MspInit+0x27c>)
 8000c66:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c68:	4b81      	ldr	r3, [pc, #516]	@ (8000e70 <HAL_ADC_MspInit+0x278>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c6e:	4b80      	ldr	r3, [pc, #512]	@ (8000e70 <HAL_ADC_MspInit+0x278>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c74:	4b7e      	ldr	r3, [pc, #504]	@ (8000e70 <HAL_ADC_MspInit+0x278>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c7a:	4b7d      	ldr	r3, [pc, #500]	@ (8000e70 <HAL_ADC_MspInit+0x278>)
 8000c7c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c80:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c82:	4b7b      	ldr	r3, [pc, #492]	@ (8000e70 <HAL_ADC_MspInit+0x278>)
 8000c84:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c88:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c8a:	4b79      	ldr	r3, [pc, #484]	@ (8000e70 <HAL_ADC_MspInit+0x278>)
 8000c8c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c90:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c92:	4b77      	ldr	r3, [pc, #476]	@ (8000e70 <HAL_ADC_MspInit+0x278>)
 8000c94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c98:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c9a:	4b75      	ldr	r3, [pc, #468]	@ (8000e70 <HAL_ADC_MspInit+0x278>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ca0:	4b73      	ldr	r3, [pc, #460]	@ (8000e70 <HAL_ADC_MspInit+0x278>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ca6:	4872      	ldr	r0, [pc, #456]	@ (8000e70 <HAL_ADC_MspInit+0x278>)
 8000ca8:	f002 fb5c 	bl	8003364 <HAL_DMA_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000cb2:	f000 fca3 	bl	80015fc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4a6d      	ldr	r2, [pc, #436]	@ (8000e70 <HAL_ADC_MspInit+0x278>)
 8000cba:	639a      	str	r2, [r3, #56]	@ 0x38
 8000cbc:	4a6c      	ldr	r2, [pc, #432]	@ (8000e70 <HAL_ADC_MspInit+0x278>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000cc2:	e0cb      	b.n	8000e5c <HAL_ADC_MspInit+0x264>
  else if(adcHandle->Instance==ADC2)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a6b      	ldr	r2, [pc, #428]	@ (8000e78 <HAL_ADC_MspInit+0x280>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d16d      	bne.n	8000daa <HAL_ADC_MspInit+0x1b2>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000cce:	4b66      	ldr	r3, [pc, #408]	@ (8000e68 <HAL_ADC_MspInit+0x270>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd2:	4a65      	ldr	r2, [pc, #404]	@ (8000e68 <HAL_ADC_MspInit+0x270>)
 8000cd4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cda:	4b63      	ldr	r3, [pc, #396]	@ (8000e68 <HAL_ADC_MspInit+0x270>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ce2:	61bb      	str	r3, [r7, #24]
 8000ce4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	4b60      	ldr	r3, [pc, #384]	@ (8000e68 <HAL_ADC_MspInit+0x270>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	4a5f      	ldr	r2, [pc, #380]	@ (8000e68 <HAL_ADC_MspInit+0x270>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf2:	4b5d      	ldr	r3, [pc, #372]	@ (8000e68 <HAL_ADC_MspInit+0x270>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	617b      	str	r3, [r7, #20]
 8000cfc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfe:	4b5a      	ldr	r3, [pc, #360]	@ (8000e68 <HAL_ADC_MspInit+0x270>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	4a59      	ldr	r2, [pc, #356]	@ (8000e68 <HAL_ADC_MspInit+0x270>)
 8000d04:	f043 0302 	orr.w	r3, r3, #2
 8000d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0a:	4b57      	ldr	r3, [pc, #348]	@ (8000e68 <HAL_ADC_MspInit+0x270>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ia_R_Pin|ib_R_Pin;
 8000d16:	23c0      	movs	r3, #192	@ 0xc0
 8000d18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d26:	4619      	mov	r1, r3
 8000d28:	4850      	ldr	r0, [pc, #320]	@ (8000e6c <HAL_ADC_MspInit+0x274>)
 8000d2a:	f002 fe93 	bl	8003a54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ic_R_Pin|VDC_R_Pin;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d32:	2303      	movs	r3, #3
 8000d34:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d3e:	4619      	mov	r1, r3
 8000d40:	484e      	ldr	r0, [pc, #312]	@ (8000e7c <HAL_ADC_MspInit+0x284>)
 8000d42:	f002 fe87 	bl	8003a54 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8000d46:	4b4e      	ldr	r3, [pc, #312]	@ (8000e80 <HAL_ADC_MspInit+0x288>)
 8000d48:	4a4e      	ldr	r2, [pc, #312]	@ (8000e84 <HAL_ADC_MspInit+0x28c>)
 8000d4a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8000d4c:	4b4c      	ldr	r3, [pc, #304]	@ (8000e80 <HAL_ADC_MspInit+0x288>)
 8000d4e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000d52:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d54:	4b4a      	ldr	r3, [pc, #296]	@ (8000e80 <HAL_ADC_MspInit+0x288>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d5a:	4b49      	ldr	r3, [pc, #292]	@ (8000e80 <HAL_ADC_MspInit+0x288>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000d60:	4b47      	ldr	r3, [pc, #284]	@ (8000e80 <HAL_ADC_MspInit+0x288>)
 8000d62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d66:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d68:	4b45      	ldr	r3, [pc, #276]	@ (8000e80 <HAL_ADC_MspInit+0x288>)
 8000d6a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d6e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d70:	4b43      	ldr	r3, [pc, #268]	@ (8000e80 <HAL_ADC_MspInit+0x288>)
 8000d72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d76:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000d78:	4b41      	ldr	r3, [pc, #260]	@ (8000e80 <HAL_ADC_MspInit+0x288>)
 8000d7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d7e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000d80:	4b3f      	ldr	r3, [pc, #252]	@ (8000e80 <HAL_ADC_MspInit+0x288>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d86:	4b3e      	ldr	r3, [pc, #248]	@ (8000e80 <HAL_ADC_MspInit+0x288>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000d8c:	483c      	ldr	r0, [pc, #240]	@ (8000e80 <HAL_ADC_MspInit+0x288>)
 8000d8e:	f002 fae9 	bl	8003364 <HAL_DMA_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <HAL_ADC_MspInit+0x1a4>
      Error_Handler();
 8000d98:	f000 fc30 	bl	80015fc <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4a38      	ldr	r2, [pc, #224]	@ (8000e80 <HAL_ADC_MspInit+0x288>)
 8000da0:	639a      	str	r2, [r3, #56]	@ 0x38
 8000da2:	4a37      	ldr	r2, [pc, #220]	@ (8000e80 <HAL_ADC_MspInit+0x288>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000da8:	e058      	b.n	8000e5c <HAL_ADC_MspInit+0x264>
  else if(adcHandle->Instance==ADC3)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a36      	ldr	r2, [pc, #216]	@ (8000e88 <HAL_ADC_MspInit+0x290>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d153      	bne.n	8000e5c <HAL_ADC_MspInit+0x264>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000db4:	4b2c      	ldr	r3, [pc, #176]	@ (8000e68 <HAL_ADC_MspInit+0x270>)
 8000db6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000db8:	4a2b      	ldr	r2, [pc, #172]	@ (8000e68 <HAL_ADC_MspInit+0x270>)
 8000dba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dbe:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dc0:	4b29      	ldr	r3, [pc, #164]	@ (8000e68 <HAL_ADC_MspInit+0x270>)
 8000dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dcc:	4b26      	ldr	r3, [pc, #152]	@ (8000e68 <HAL_ADC_MspInit+0x270>)
 8000dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd0:	4a25      	ldr	r2, [pc, #148]	@ (8000e68 <HAL_ADC_MspInit+0x270>)
 8000dd2:	f043 0304 	orr.w	r3, r3, #4
 8000dd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd8:	4b23      	ldr	r3, [pc, #140]	@ (8000e68 <HAL_ADC_MspInit+0x270>)
 8000dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ddc:	f003 0304 	and.w	r3, r3, #4
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Tinv_L_Pin|Tinv_R_Pin|Tmot_L_Pin|Tmot_R_Pin;
 8000de4:	230f      	movs	r3, #15
 8000de6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000de8:	2303      	movs	r3, #3
 8000dea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000df4:	4619      	mov	r1, r3
 8000df6:	4825      	ldr	r0, [pc, #148]	@ (8000e8c <HAL_ADC_MspInit+0x294>)
 8000df8:	f002 fe2c 	bl	8003a54 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8000dfc:	4b24      	ldr	r3, [pc, #144]	@ (8000e90 <HAL_ADC_MspInit+0x298>)
 8000dfe:	4a25      	ldr	r2, [pc, #148]	@ (8000e94 <HAL_ADC_MspInit+0x29c>)
 8000e00:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000e02:	4b23      	ldr	r3, [pc, #140]	@ (8000e90 <HAL_ADC_MspInit+0x298>)
 8000e04:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000e08:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e0a:	4b21      	ldr	r3, [pc, #132]	@ (8000e90 <HAL_ADC_MspInit+0x298>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e10:	4b1f      	ldr	r3, [pc, #124]	@ (8000e90 <HAL_ADC_MspInit+0x298>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000e16:	4b1e      	ldr	r3, [pc, #120]	@ (8000e90 <HAL_ADC_MspInit+0x298>)
 8000e18:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e1c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000e90 <HAL_ADC_MspInit+0x298>)
 8000e20:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e24:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e26:	4b1a      	ldr	r3, [pc, #104]	@ (8000e90 <HAL_ADC_MspInit+0x298>)
 8000e28:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e2c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8000e2e:	4b18      	ldr	r3, [pc, #96]	@ (8000e90 <HAL_ADC_MspInit+0x298>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000e34:	4b16      	ldr	r3, [pc, #88]	@ (8000e90 <HAL_ADC_MspInit+0x298>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e3a:	4b15      	ldr	r3, [pc, #84]	@ (8000e90 <HAL_ADC_MspInit+0x298>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000e40:	4813      	ldr	r0, [pc, #76]	@ (8000e90 <HAL_ADC_MspInit+0x298>)
 8000e42:	f002 fa8f 	bl	8003364 <HAL_DMA_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <HAL_ADC_MspInit+0x258>
      Error_Handler();
 8000e4c:	f000 fbd6 	bl	80015fc <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4a0f      	ldr	r2, [pc, #60]	@ (8000e90 <HAL_ADC_MspInit+0x298>)
 8000e54:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e56:	4a0e      	ldr	r2, [pc, #56]	@ (8000e90 <HAL_ADC_MspInit+0x298>)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000e5c:	bf00      	nop
 8000e5e:	3738      	adds	r7, #56	@ 0x38
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40012000 	.word	0x40012000
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40020000 	.word	0x40020000
 8000e70:	20000158 	.word	0x20000158
 8000e74:	40026410 	.word	0x40026410
 8000e78:	40012100 	.word	0x40012100
 8000e7c:	40020400 	.word	0x40020400
 8000e80:	200001b8 	.word	0x200001b8
 8000e84:	40026440 	.word	0x40026440
 8000e88:	40012200 	.word	0x40012200
 8000e8c:	40020800 	.word	0x40020800
 8000e90:	20000218 	.word	0x20000218
 8000e94:	40026428 	.word	0x40026428

08000e98 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000e9c:	4b17      	ldr	r3, [pc, #92]	@ (8000efc <MX_CAN1_Init+0x64>)
 8000e9e:	4a18      	ldr	r2, [pc, #96]	@ (8000f00 <MX_CAN1_Init+0x68>)
 8000ea0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 8000ea2:	4b16      	ldr	r3, [pc, #88]	@ (8000efc <MX_CAN1_Init+0x64>)
 8000ea4:	220c      	movs	r2, #12
 8000ea6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ea8:	4b14      	ldr	r3, [pc, #80]	@ (8000efc <MX_CAN1_Init+0x64>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000eae:	4b13      	ldr	r3, [pc, #76]	@ (8000efc <MX_CAN1_Init+0x64>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 8000eb4:	4b11      	ldr	r3, [pc, #68]	@ (8000efc <MX_CAN1_Init+0x64>)
 8000eb6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000eba:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8000efc <MX_CAN1_Init+0x64>)
 8000ebe:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000ec2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ec4:	4b0d      	ldr	r3, [pc, #52]	@ (8000efc <MX_CAN1_Init+0x64>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000eca:	4b0c      	ldr	r3, [pc, #48]	@ (8000efc <MX_CAN1_Init+0x64>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8000efc <MX_CAN1_Init+0x64>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ed6:	4b09      	ldr	r3, [pc, #36]	@ (8000efc <MX_CAN1_Init+0x64>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000edc:	4b07      	ldr	r3, [pc, #28]	@ (8000efc <MX_CAN1_Init+0x64>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ee2:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <MX_CAN1_Init+0x64>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ee8:	4804      	ldr	r0, [pc, #16]	@ (8000efc <MX_CAN1_Init+0x64>)
 8000eea:	f001 fd17 	bl	800291c <HAL_CAN_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000ef4:	f000 fb82 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000278 	.word	0x20000278
 8000f00:	40006400 	.word	0x40006400

08000f04 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	@ 0x28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a1f      	ldr	r2, [pc, #124]	@ (8000fa0 <HAL_CAN_MspInit+0x9c>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d137      	bne.n	8000f96 <HAL_CAN_MspInit+0x92>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f26:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa4 <HAL_CAN_MspInit+0xa0>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2a:	4a1e      	ldr	r2, [pc, #120]	@ (8000fa4 <HAL_CAN_MspInit+0xa0>)
 8000f2c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f32:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa4 <HAL_CAN_MspInit+0xa0>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f3e:	4b19      	ldr	r3, [pc, #100]	@ (8000fa4 <HAL_CAN_MspInit+0xa0>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f42:	4a18      	ldr	r2, [pc, #96]	@ (8000fa4 <HAL_CAN_MspInit+0xa0>)
 8000f44:	f043 0308 	orr.w	r3, r3, #8
 8000f48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4a:	4b16      	ldr	r3, [pc, #88]	@ (8000fa4 <HAL_CAN_MspInit+0xa0>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4e:	f003 0308 	and.w	r3, r3, #8
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f56:	2303      	movs	r3, #3
 8000f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f62:	2303      	movs	r3, #3
 8000f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f66:	2309      	movs	r3, #9
 8000f68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4619      	mov	r1, r3
 8000f70:	480d      	ldr	r0, [pc, #52]	@ (8000fa8 <HAL_CAN_MspInit+0xa4>)
 8000f72:	f002 fd6f 	bl	8003a54 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2100      	movs	r1, #0
 8000f7a:	2014      	movs	r0, #20
 8000f7c:	f002 f8dd 	bl	800313a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000f80:	2014      	movs	r0, #20
 8000f82:	f002 f8f6 	bl	8003172 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2100      	movs	r1, #0
 8000f8a:	2015      	movs	r0, #21
 8000f8c:	f002 f8d5 	bl	800313a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000f90:	2015      	movs	r0, #21
 8000f92:	f002 f8ee 	bl	8003172 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000f96:	bf00      	nop
 8000f98:	3728      	adds	r7, #40	@ 0x28
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40006400 	.word	0x40006400
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40020c00 	.word	0x40020c00

08000fac <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000fb2:	463b      	mov	r3, r7
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000fba:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <MX_DAC_Init+0x4c>)
 8000fbc:	4a0f      	ldr	r2, [pc, #60]	@ (8000ffc <MX_DAC_Init+0x50>)
 8000fbe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000fc0:	480d      	ldr	r0, [pc, #52]	@ (8000ff8 <MX_DAC_Init+0x4c>)
 8000fc2:	f002 f8f0 	bl	80031a6 <HAL_DAC_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000fcc:	f000 fb16 	bl	80015fc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000fd8:	463b      	mov	r3, r7
 8000fda:	2200      	movs	r2, #0
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4806      	ldr	r0, [pc, #24]	@ (8000ff8 <MX_DAC_Init+0x4c>)
 8000fe0:	f002 f967 	bl	80032b2 <HAL_DAC_ConfigChannel>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000fea:	f000 fb07 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200002a0 	.word	0x200002a0
 8000ffc:	40007400 	.word	0x40007400

08001000 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	@ 0x28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a19      	ldr	r2, [pc, #100]	@ (8001084 <HAL_DAC_MspInit+0x84>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d12b      	bne.n	800107a <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001022:	4b19      	ldr	r3, [pc, #100]	@ (8001088 <HAL_DAC_MspInit+0x88>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001026:	4a18      	ldr	r2, [pc, #96]	@ (8001088 <HAL_DAC_MspInit+0x88>)
 8001028:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800102c:	6413      	str	r3, [r2, #64]	@ 0x40
 800102e:	4b16      	ldr	r3, [pc, #88]	@ (8001088 <HAL_DAC_MspInit+0x88>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001032:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	4b13      	ldr	r3, [pc, #76]	@ (8001088 <HAL_DAC_MspInit+0x88>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	4a12      	ldr	r2, [pc, #72]	@ (8001088 <HAL_DAC_MspInit+0x88>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6313      	str	r3, [r2, #48]	@ 0x30
 8001046:	4b10      	ldr	r3, [pc, #64]	@ (8001088 <HAL_DAC_MspInit+0x88>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = DAC_Pin;
 8001052:	2310      	movs	r3, #16
 8001054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001056:	2303      	movs	r3, #3
 8001058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC_GPIO_Port, &GPIO_InitStruct);
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4619      	mov	r1, r3
 8001064:	4809      	ldr	r0, [pc, #36]	@ (800108c <HAL_DAC_MspInit+0x8c>)
 8001066:	f002 fcf5 	bl	8003a54 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2100      	movs	r1, #0
 800106e:	2036      	movs	r0, #54	@ 0x36
 8001070:	f002 f863 	bl	800313a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001074:	2036      	movs	r0, #54	@ 0x36
 8001076:	f002 f87c 	bl	8003172 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800107a:	bf00      	nop
 800107c:	3728      	adds	r7, #40	@ 0x28
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40007400 	.word	0x40007400
 8001088:	40023800 	.word	0x40023800
 800108c:	40020000 	.word	0x40020000

08001090 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001096:	4b14      	ldr	r3, [pc, #80]	@ (80010e8 <MX_DMA_Init+0x58>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	4a13      	ldr	r2, [pc, #76]	@ (80010e8 <MX_DMA_Init+0x58>)
 800109c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a2:	4b11      	ldr	r3, [pc, #68]	@ (80010e8 <MX_DMA_Init+0x58>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	2038      	movs	r0, #56	@ 0x38
 80010b4:	f002 f841 	bl	800313a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80010b8:	2038      	movs	r0, #56	@ 0x38
 80010ba:	f002 f85a 	bl	8003172 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	2100      	movs	r1, #0
 80010c2:	2039      	movs	r0, #57	@ 0x39
 80010c4:	f002 f839 	bl	800313a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80010c8:	2039      	movs	r0, #57	@ 0x39
 80010ca:	f002 f852 	bl	8003172 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	203a      	movs	r0, #58	@ 0x3a
 80010d4:	f002 f831 	bl	800313a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80010d8:	203a      	movs	r0, #58	@ 0x3a
 80010da:	f002 f84a 	bl	8003172 <HAL_NVIC_EnableIRQ>

}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40023800 	.word	0x40023800

080010ec <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08c      	sub	sp, #48	@ 0x30
 80010f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f2:	f107 031c 	add.w	r3, r7, #28
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
 8001100:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001102:	4b87      	ldr	r3, [pc, #540]	@ (8001320 <MX_GPIO_Init+0x234>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	4a86      	ldr	r2, [pc, #536]	@ (8001320 <MX_GPIO_Init+0x234>)
 8001108:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800110c:	6313      	str	r3, [r2, #48]	@ 0x30
 800110e:	4b84      	ldr	r3, [pc, #528]	@ (8001320 <MX_GPIO_Init+0x234>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001116:	61bb      	str	r3, [r7, #24]
 8001118:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800111a:	4b81      	ldr	r3, [pc, #516]	@ (8001320 <MX_GPIO_Init+0x234>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	4a80      	ldr	r2, [pc, #512]	@ (8001320 <MX_GPIO_Init+0x234>)
 8001120:	f043 0304 	orr.w	r3, r3, #4
 8001124:	6313      	str	r3, [r2, #48]	@ 0x30
 8001126:	4b7e      	ldr	r3, [pc, #504]	@ (8001320 <MX_GPIO_Init+0x234>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	f003 0304 	and.w	r3, r3, #4
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	4b7b      	ldr	r3, [pc, #492]	@ (8001320 <MX_GPIO_Init+0x234>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	4a7a      	ldr	r2, [pc, #488]	@ (8001320 <MX_GPIO_Init+0x234>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6313      	str	r3, [r2, #48]	@ 0x30
 800113e:	4b78      	ldr	r3, [pc, #480]	@ (8001320 <MX_GPIO_Init+0x234>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800114a:	4b75      	ldr	r3, [pc, #468]	@ (8001320 <MX_GPIO_Init+0x234>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	4a74      	ldr	r2, [pc, #464]	@ (8001320 <MX_GPIO_Init+0x234>)
 8001150:	f043 0302 	orr.w	r3, r3, #2
 8001154:	6313      	str	r3, [r2, #48]	@ 0x30
 8001156:	4b72      	ldr	r3, [pc, #456]	@ (8001320 <MX_GPIO_Init+0x234>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001162:	4b6f      	ldr	r3, [pc, #444]	@ (8001320 <MX_GPIO_Init+0x234>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	4a6e      	ldr	r2, [pc, #440]	@ (8001320 <MX_GPIO_Init+0x234>)
 8001168:	f043 0310 	orr.w	r3, r3, #16
 800116c:	6313      	str	r3, [r2, #48]	@ 0x30
 800116e:	4b6c      	ldr	r3, [pc, #432]	@ (8001320 <MX_GPIO_Init+0x234>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	f003 0310 	and.w	r3, r3, #16
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800117a:	4b69      	ldr	r3, [pc, #420]	@ (8001320 <MX_GPIO_Init+0x234>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117e:	4a68      	ldr	r2, [pc, #416]	@ (8001320 <MX_GPIO_Init+0x234>)
 8001180:	f043 0308 	orr.w	r3, r3, #8
 8001184:	6313      	str	r3, [r2, #48]	@ 0x30
 8001186:	4b66      	ldr	r3, [pc, #408]	@ (8001320 <MX_GPIO_Init+0x234>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	f003 0308 	and.w	r3, r3, #8
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_R_GPIO_Port, ENABLE_R_Pin, GPIO_PIN_RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	2104      	movs	r1, #4
 8001196:	4863      	ldr	r0, [pc, #396]	@ (8001324 <MX_GPIO_Init+0x238>)
 8001198:	f002 fe08 	bl	8003dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_L_GPIO_Port, ENABLE_L_Pin, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	2180      	movs	r1, #128	@ 0x80
 80011a0:	4861      	ldr	r0, [pc, #388]	@ (8001328 <MX_GPIO_Init+0x23c>)
 80011a2:	f002 fe03 	bl	8003dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_LEFT_Pin|LED_RIGHT_Pin|LED_ERR_Pin, GPIO_PIN_RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2170      	movs	r1, #112	@ 0x70
 80011aa:	4860      	ldr	r0, [pc, #384]	@ (800132c <MX_GPIO_Init+0x240>)
 80011ac:	f002 fdfe 	bl	8003dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SC_det_Pin;
 80011b0:	2310      	movs	r3, #16
 80011b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b4:	2300      	movs	r3, #0
 80011b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SC_det_GPIO_Port, &GPIO_InitStruct);
 80011bc:	f107 031c 	add.w	r3, r7, #28
 80011c0:	4619      	mov	r1, r3
 80011c2:	485b      	ldr	r0, [pc, #364]	@ (8001330 <MX_GPIO_Init+0x244>)
 80011c4:	f002 fc46 	bl	8003a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_R_Pin;
 80011c8:	2304      	movs	r3, #4
 80011ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ENABLE_R_GPIO_Port, &GPIO_InitStruct);
 80011d8:	f107 031c 	add.w	r3, r7, #28
 80011dc:	4619      	mov	r1, r3
 80011de:	4851      	ldr	r0, [pc, #324]	@ (8001324 <MX_GPIO_Init+0x238>)
 80011e0:	f002 fc38 	bl	8003a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_L_Pin;
 80011e4:	2380      	movs	r3, #128	@ 0x80
 80011e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e8:	2301      	movs	r3, #1
 80011ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ENABLE_L_GPIO_Port, &GPIO_InitStruct);
 80011f4:	f107 031c 	add.w	r3, r7, #28
 80011f8:	4619      	mov	r1, r3
 80011fa:	484b      	ldr	r0, [pc, #300]	@ (8001328 <MX_GPIO_Init+0x23c>)
 80011fc:	f002 fc2a 	bl	8003a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = WRN_L_Pin|WRN_R_Pin;
 8001200:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001204:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001206:	2300      	movs	r3, #0
 8001208:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	4619      	mov	r1, r3
 8001214:	4844      	ldr	r0, [pc, #272]	@ (8001328 <MX_GPIO_Init+0x23c>)
 8001216:	f002 fc1d 	bl	8003a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Z_R_Pin;
 800121a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800121e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001220:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001224:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Z_R_GPIO_Port, &GPIO_InitStruct);
 800122a:	f107 031c 	add.w	r3, r7, #28
 800122e:	4619      	mov	r1, r3
 8001230:	483c      	ldr	r0, [pc, #240]	@ (8001324 <MX_GPIO_Init+0x238>)
 8001232:	f002 fc0f 	bl	8003a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Z_L_Pin;
 8001236:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800123a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800123c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001240:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Z_L_GPIO_Port, &GPIO_InitStruct);
 8001246:	f107 031c 	add.w	r3, r7, #28
 800124a:	4619      	mov	r1, r3
 800124c:	4837      	ldr	r0, [pc, #220]	@ (800132c <MX_GPIO_Init+0x240>)
 800124e:	f002 fc01 	bl	8003a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIP_R_Pin;
 8001252:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001256:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001258:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800125c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TRIP_R_GPIO_Port, &GPIO_InitStruct);
 8001262:	f107 031c 	add.w	r3, r7, #28
 8001266:	4619      	mov	r1, r3
 8001268:	4831      	ldr	r0, [pc, #196]	@ (8001330 <MX_GPIO_Init+0x244>)
 800126a:	f002 fbf3 	bl	8003a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIP_L_Pin;
 800126e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001272:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001274:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001278:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TRIP_L_GPIO_Port, &GPIO_InitStruct);
 800127e:	f107 031c 	add.w	r3, r7, #28
 8001282:	4619      	mov	r1, r3
 8001284:	482b      	ldr	r0, [pc, #172]	@ (8001334 <MX_GPIO_Init+0x248>)
 8001286:	f002 fbe5 	bl	8003a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800128a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800128e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001290:	2300      	movs	r3, #0
 8001292:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001298:	f107 031c 	add.w	r3, r7, #28
 800129c:	4619      	mov	r1, r3
 800129e:	4825      	ldr	r0, [pc, #148]	@ (8001334 <MX_GPIO_Init+0x248>)
 80012a0:	f002 fbd8 	bl	8003a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80012a4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80012a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012aa:	2302      	movs	r3, #2
 80012ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b2:	2303      	movs	r3, #3
 80012b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012b6:	230a      	movs	r3, #10
 80012b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ba:	f107 031c 	add.w	r3, r7, #28
 80012be:	4619      	mov	r1, r3
 80012c0:	481c      	ldr	r0, [pc, #112]	@ (8001334 <MX_GPIO_Init+0x248>)
 80012c2:	f002 fbc7 	bl	8003a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIR_Pin;
 80012c6:	2308      	movs	r3, #8
 80012c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ca:	2300      	movs	r3, #0
 80012cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 80012d2:	f107 031c 	add.w	r3, r7, #28
 80012d6:	4619      	mov	r1, r3
 80012d8:	4814      	ldr	r0, [pc, #80]	@ (800132c <MX_GPIO_Init+0x240>)
 80012da:	f002 fbbb 	bl	8003a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LED_LEFT_Pin|LED_RIGHT_Pin;
 80012de:	2330      	movs	r3, #48	@ 0x30
 80012e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e2:	2301      	movs	r3, #1
 80012e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2300      	movs	r3, #0
 80012ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ee:	f107 031c 	add.w	r3, r7, #28
 80012f2:	4619      	mov	r1, r3
 80012f4:	480d      	ldr	r0, [pc, #52]	@ (800132c <MX_GPIO_Init+0x240>)
 80012f6:	f002 fbad 	bl	8003a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_ERR_Pin;
 80012fa:	2340      	movs	r3, #64	@ 0x40
 80012fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fe:	2301      	movs	r3, #1
 8001300:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001302:	2302      	movs	r3, #2
 8001304:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2300      	movs	r3, #0
 8001308:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_ERR_GPIO_Port, &GPIO_InitStruct);
 800130a:	f107 031c 	add.w	r3, r7, #28
 800130e:	4619      	mov	r1, r3
 8001310:	4806      	ldr	r0, [pc, #24]	@ (800132c <MX_GPIO_Init+0x240>)
 8001312:	f002 fb9f 	bl	8003a54 <HAL_GPIO_Init>

}
 8001316:	bf00      	nop
 8001318:	3730      	adds	r7, #48	@ 0x30
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40023800 	.word	0x40023800
 8001324:	40020400 	.word	0x40020400
 8001328:	40021000 	.word	0x40021000
 800132c:	40020c00 	.word	0x40020c00
 8001330:	40020800 	.word	0x40020800
 8001334:	40020000 	.word	0x40020000

08001338 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800133c:	4b1b      	ldr	r3, [pc, #108]	@ (80013ac <MX_I2C1_Init+0x74>)
 800133e:	4a1c      	ldr	r2, [pc, #112]	@ (80013b0 <MX_I2C1_Init+0x78>)
 8001340:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8001342:	4b1a      	ldr	r3, [pc, #104]	@ (80013ac <MX_I2C1_Init+0x74>)
 8001344:	4a1b      	ldr	r2, [pc, #108]	@ (80013b4 <MX_I2C1_Init+0x7c>)
 8001346:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001348:	4b18      	ldr	r3, [pc, #96]	@ (80013ac <MX_I2C1_Init+0x74>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800134e:	4b17      	ldr	r3, [pc, #92]	@ (80013ac <MX_I2C1_Init+0x74>)
 8001350:	2201      	movs	r2, #1
 8001352:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001354:	4b15      	ldr	r3, [pc, #84]	@ (80013ac <MX_I2C1_Init+0x74>)
 8001356:	2200      	movs	r2, #0
 8001358:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800135a:	4b14      	ldr	r3, [pc, #80]	@ (80013ac <MX_I2C1_Init+0x74>)
 800135c:	2200      	movs	r2, #0
 800135e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001360:	4b12      	ldr	r3, [pc, #72]	@ (80013ac <MX_I2C1_Init+0x74>)
 8001362:	2200      	movs	r2, #0
 8001364:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001366:	4b11      	ldr	r3, [pc, #68]	@ (80013ac <MX_I2C1_Init+0x74>)
 8001368:	2200      	movs	r2, #0
 800136a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800136c:	4b0f      	ldr	r3, [pc, #60]	@ (80013ac <MX_I2C1_Init+0x74>)
 800136e:	2200      	movs	r2, #0
 8001370:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001372:	480e      	ldr	r0, [pc, #56]	@ (80013ac <MX_I2C1_Init+0x74>)
 8001374:	f002 fd34 	bl	8003de0 <HAL_I2C_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800137e:	f000 f93d 	bl	80015fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001382:	2100      	movs	r1, #0
 8001384:	4809      	ldr	r0, [pc, #36]	@ (80013ac <MX_I2C1_Init+0x74>)
 8001386:	f002 fdbb 	bl	8003f00 <HAL_I2CEx_ConfigAnalogFilter>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001390:	f000 f934 	bl	80015fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001394:	2100      	movs	r1, #0
 8001396:	4805      	ldr	r0, [pc, #20]	@ (80013ac <MX_I2C1_Init+0x74>)
 8001398:	f002 fdfd 	bl	8003f96 <HAL_I2CEx_ConfigDigitalFilter>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013a2:	f000 f92b 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200002b4 	.word	0x200002b4
 80013b0:	40005400 	.word	0x40005400
 80013b4:	20404768 	.word	0x20404768

080013b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b0ae      	sub	sp, #184	@ 0xb8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	2290      	movs	r2, #144	@ 0x90
 80013d6:	2100      	movs	r1, #0
 80013d8:	4618      	mov	r0, r3
 80013da:	f005 fb1b 	bl	8006a14 <memset>
  if(i2cHandle->Instance==I2C1)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a21      	ldr	r2, [pc, #132]	@ (8001468 <HAL_I2C_MspInit+0xb0>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d13b      	bne.n	8001460 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013e8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80013ec:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013ee:	2300      	movs	r3, #0
 80013f0:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	4618      	mov	r0, r3
 80013f8:	f003 faca 	bl	8004990 <HAL_RCCEx_PeriphCLKConfig>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001402:	f000 f8fb 	bl	80015fc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001406:	4b19      	ldr	r3, [pc, #100]	@ (800146c <HAL_I2C_MspInit+0xb4>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	4a18      	ldr	r2, [pc, #96]	@ (800146c <HAL_I2C_MspInit+0xb4>)
 800140c:	f043 0302 	orr.w	r3, r3, #2
 8001410:	6313      	str	r3, [r2, #48]	@ 0x30
 8001412:	4b16      	ldr	r3, [pc, #88]	@ (800146c <HAL_I2C_MspInit+0xb4>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800141e:	23c0      	movs	r3, #192	@ 0xc0
 8001420:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001424:	2312      	movs	r3, #18
 8001426:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001430:	2303      	movs	r3, #3
 8001432:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001436:	2304      	movs	r3, #4
 8001438:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001440:	4619      	mov	r1, r3
 8001442:	480b      	ldr	r0, [pc, #44]	@ (8001470 <HAL_I2C_MspInit+0xb8>)
 8001444:	f002 fb06 	bl	8003a54 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001448:	4b08      	ldr	r3, [pc, #32]	@ (800146c <HAL_I2C_MspInit+0xb4>)
 800144a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144c:	4a07      	ldr	r2, [pc, #28]	@ (800146c <HAL_I2C_MspInit+0xb4>)
 800144e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001452:	6413      	str	r3, [r2, #64]	@ 0x40
 8001454:	4b05      	ldr	r3, [pc, #20]	@ (800146c <HAL_I2C_MspInit+0xb4>)
 8001456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001458:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001460:	bf00      	nop
 8001462:	37b8      	adds	r7, #184	@ 0xb8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40005400 	.word	0x40005400
 800146c:	40023800 	.word	0x40023800
 8001470:	40020400 	.word	0x40020400

08001474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001478:	f000 fdc5 	bl	8002006 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800147c:	f000 f850 	bl	8001520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001480:	f7ff fe34 	bl	80010ec <MX_GPIO_Init>
  MX_DMA_Init();
 8001484:	f7ff fe04 	bl	8001090 <MX_DMA_Init>
  MX_ADC1_Init();
 8001488:	f7ff fa7a 	bl	8000980 <MX_ADC1_Init>
  MX_CAN1_Init();
 800148c:	f7ff fd04 	bl	8000e98 <MX_CAN1_Init>
  MX_USB_OTG_FS_USB_Init();
 8001490:	f000 fd88 	bl	8001fa4 <MX_USB_OTG_FS_USB_Init>
  MX_ADC2_Init();
 8001494:	f7ff fae2 	bl	8000a5c <MX_ADC2_Init>
  MX_ADC3_Init();
 8001498:	f7ff fb5c 	bl	8000b54 <MX_ADC3_Init>
  MX_DAC_Init();
 800149c:	f7ff fd86 	bl	8000fac <MX_DAC_Init>
  MX_I2C1_Init();
 80014a0:	f7ff ff4a 	bl	8001338 <MX_I2C1_Init>
  MX_TIM1_Init();
 80014a4:	f000 f970 	bl	8001788 <MX_TIM1_Init>
  MX_TIM8_Init();
 80014a8:	f000 fb28 	bl	8001afc <MX_TIM8_Init>
  MX_TIM2_Init();
 80014ac:	f000 fa32 	bl	8001914 <MX_TIM2_Init>
  MX_TIM4_Init();
 80014b0:	f000 fa8e 	bl	80019d0 <MX_TIM4_Init>
  MX_TIM6_Init();
 80014b4:	f000 faec 	bl	8001a90 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim1);
 80014b8:	480f      	ldr	r0, [pc, #60]	@ (80014f8 <main+0x84>)
 80014ba:	f003 fee9 	bl	8005290 <HAL_TIM_Base_Start_IT>
//	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_BREAK);	  /* Enable the TIM Break interrupt */

  HAL_TIM_Base_Start_IT(&htim6);
 80014be:	480f      	ldr	r0, [pc, #60]	@ (80014fc <main+0x88>)
 80014c0:	f003 fee6 	bl	8005290 <HAL_TIM_Base_Start_IT>



  HAL_ADC_Start_DMA(&hadc2, (uint32_t *) ADC_LEFT_raw,4);
 80014c4:	2204      	movs	r2, #4
 80014c6:	490e      	ldr	r1, [pc, #56]	@ (8001500 <main+0x8c>)
 80014c8:	480e      	ldr	r0, [pc, #56]	@ (8001504 <main+0x90>)
 80014ca:	f000 fe3d 	bl	8002148 <HAL_ADC_Start_DMA>

  inv_init(&invLeft, &led_left, ENABLE_L_GPIO_Port, ENABLE_L_Pin);
 80014ce:	2380      	movs	r3, #128	@ 0x80
 80014d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001508 <main+0x94>)
 80014d2:	490e      	ldr	r1, [pc, #56]	@ (800150c <main+0x98>)
 80014d4:	480e      	ldr	r0, [pc, #56]	@ (8001510 <main+0x9c>)
 80014d6:	f7ff f827 	bl	8000528 <inv_init>
  inv_init(&invRight, &led_right, ENABLE_R_GPIO_Port, ENABLE_R_Pin);
 80014da:	2304      	movs	r3, #4
 80014dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001514 <main+0xa0>)
 80014de:	490e      	ldr	r1, [pc, #56]	@ (8001518 <main+0xa4>)
 80014e0:	480e      	ldr	r0, [pc, #56]	@ (800151c <main+0xa8>)
 80014e2:	f7ff f821 	bl	8000528 <inv_init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

      // Run FSM for left inverter
	  inv_FSM(&invLeft);
 80014e6:	480a      	ldr	r0, [pc, #40]	@ (8001510 <main+0x9c>)
 80014e8:	f7ff f838 	bl	800055c <inv_FSM>

      // Run FSM for right inverter
	  inv_FSM(&invRight);
 80014ec:	480b      	ldr	r0, [pc, #44]	@ (800151c <main+0xa8>)
 80014ee:	f7ff f835 	bl	800055c <inv_FSM>
	  inv_FSM(&invLeft);
 80014f2:	bf00      	nop
 80014f4:	e7f7      	b.n	80014e6 <main+0x72>
 80014f6:	bf00      	nop
 80014f8:	20000320 	.word	0x20000320
 80014fc:	20000404 	.word	0x20000404
 8001500:	20000040 	.word	0x20000040
 8001504:	200000c8 	.word	0x200000c8
 8001508:	40021000 	.word	0x40021000
 800150c:	20000000 	.word	0x20000000
 8001510:	20000308 	.word	0x20000308
 8001514:	40020400 	.word	0x40020400
 8001518:	20000008 	.word	0x20000008
 800151c:	20000314 	.word	0x20000314

08001520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b094      	sub	sp, #80	@ 0x50
 8001524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001526:	f107 031c 	add.w	r3, r7, #28
 800152a:	2234      	movs	r2, #52	@ 0x34
 800152c:	2100      	movs	r1, #0
 800152e:	4618      	mov	r0, r3
 8001530:	f005 fa70 	bl	8006a14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001534:	f107 0308 	add.w	r3, r7, #8
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001544:	4b2b      	ldr	r3, [pc, #172]	@ (80015f4 <SystemClock_Config+0xd4>)
 8001546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001548:	4a2a      	ldr	r2, [pc, #168]	@ (80015f4 <SystemClock_Config+0xd4>)
 800154a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800154e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001550:	4b28      	ldr	r3, [pc, #160]	@ (80015f4 <SystemClock_Config+0xd4>)
 8001552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001554:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001558:	607b      	str	r3, [r7, #4]
 800155a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800155c:	4b26      	ldr	r3, [pc, #152]	@ (80015f8 <SystemClock_Config+0xd8>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a25      	ldr	r2, [pc, #148]	@ (80015f8 <SystemClock_Config+0xd8>)
 8001562:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001566:	6013      	str	r3, [r2, #0]
 8001568:	4b23      	ldr	r3, [pc, #140]	@ (80015f8 <SystemClock_Config+0xd8>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001570:	603b      	str	r3, [r7, #0]
 8001572:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001574:	2301      	movs	r3, #1
 8001576:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001578:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800157c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800157e:	2302      	movs	r3, #2
 8001580:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001582:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001586:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 10;
 8001588:	230a      	movs	r3, #10
 800158a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 800158c:	23d8      	movs	r3, #216	@ 0xd8
 800158e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001590:	2302      	movs	r3, #2
 8001592:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001594:	2309      	movs	r3, #9
 8001596:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001598:	2302      	movs	r3, #2
 800159a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800159c:	f107 031c 	add.w	r3, r7, #28
 80015a0:	4618      	mov	r0, r3
 80015a2:	f002 fd95 	bl	80040d0 <HAL_RCC_OscConfig>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80015ac:	f000 f826 	bl	80015fc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80015b0:	f002 fd3e 	bl	8004030 <HAL_PWREx_EnableOverDrive>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80015ba:	f000 f81f 	bl	80015fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015be:	230f      	movs	r3, #15
 80015c0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015c2:	2302      	movs	r3, #2
 80015c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015ca:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80015ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015d4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80015d6:	f107 0308 	add.w	r3, r7, #8
 80015da:	2107      	movs	r1, #7
 80015dc:	4618      	mov	r0, r3
 80015de:	f003 f825 	bl	800462c <HAL_RCC_ClockConfig>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80015e8:	f000 f808 	bl	80015fc <Error_Handler>
  }
}
 80015ec:	bf00      	nop
 80015ee:	3750      	adds	r7, #80	@ 0x50
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40007000 	.word	0x40007000

080015fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001600:	b672      	cpsid	i
}
 8001602:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <Error_Handler+0x8>

08001608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800160e:	4b0f      	ldr	r3, [pc, #60]	@ (800164c <HAL_MspInit+0x44>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001612:	4a0e      	ldr	r2, [pc, #56]	@ (800164c <HAL_MspInit+0x44>)
 8001614:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001618:	6413      	str	r3, [r2, #64]	@ 0x40
 800161a:	4b0c      	ldr	r3, [pc, #48]	@ (800164c <HAL_MspInit+0x44>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001626:	4b09      	ldr	r3, [pc, #36]	@ (800164c <HAL_MspInit+0x44>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162a:	4a08      	ldr	r2, [pc, #32]	@ (800164c <HAL_MspInit+0x44>)
 800162c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001630:	6453      	str	r3, [r2, #68]	@ 0x44
 8001632:	4b06      	ldr	r3, [pc, #24]	@ (800164c <HAL_MspInit+0x44>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001636:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800163a:	603b      	str	r3, [r7, #0]
 800163c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800

08001650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001654:	bf00      	nop
 8001656:	e7fd      	b.n	8001654 <NMI_Handler+0x4>

08001658 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800165c:	bf00      	nop
 800165e:	e7fd      	b.n	800165c <HardFault_Handler+0x4>

08001660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <MemManage_Handler+0x4>

08001668 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800166c:	bf00      	nop
 800166e:	e7fd      	b.n	800166c <BusFault_Handler+0x4>

08001670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001674:	bf00      	nop
 8001676:	e7fd      	b.n	8001674 <UsageFault_Handler+0x4>

08001678 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a6:	f000 fceb 	bl	8002080 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80016b4:	4802      	ldr	r0, [pc, #8]	@ (80016c0 <CAN1_RX0_IRQHandler+0x10>)
 80016b6:	f001 fa2c 	bl	8002b12 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000278 	.word	0x20000278

080016c4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80016c8:	4802      	ldr	r0, [pc, #8]	@ (80016d4 <CAN1_RX1_IRQHandler+0x10>)
 80016ca:	f001 fa22 	bl	8002b12 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000278 	.word	0x20000278

080016d8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016dc:	4806      	ldr	r0, [pc, #24]	@ (80016f8 <TIM1_UP_TIM10_IRQHandler+0x20>)
 80016de:	f003 ff68 	bl	80055b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  getADCelec(ADC_LEFT_raw, &encoder_LEFT, &measurements_LEFT);
 80016e2:	4a06      	ldr	r2, [pc, #24]	@ (80016fc <TIM1_UP_TIM10_IRQHandler+0x24>)
 80016e4:	4906      	ldr	r1, [pc, #24]	@ (8001700 <TIM1_UP_TIM10_IRQHandler+0x28>)
 80016e6:	4807      	ldr	r0, [pc, #28]	@ (8001704 <TIM1_UP_TIM10_IRQHandler+0x2c>)
 80016e8:	f7fe ffb2 	bl	8000650 <getADCelec>

  enable_PWM(&htim1);
 80016ec:	4802      	ldr	r0, [pc, #8]	@ (80016f8 <TIM1_UP_TIM10_IRQHandler+0x20>)
 80016ee:	f7ff f8a1 	bl	8000834 <enable_PWM>
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000320 	.word	0x20000320
 80016fc:	2000006c 	.word	0x2000006c
 8001700:	20000050 	.word	0x20000050
 8001704:	20000040 	.word	0x20000040

08001708 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 800170c:	4804      	ldr	r0, [pc, #16]	@ (8001720 <TIM6_DAC_IRQHandler+0x18>)
 800170e:	f001 fd6c 	bl	80031ea <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8001712:	4804      	ldr	r0, [pc, #16]	@ (8001724 <TIM6_DAC_IRQHandler+0x1c>)
 8001714:	f003 ff4d 	bl	80055b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  tasks_1ms();
 8001718:	f7ff f90e 	bl	8000938 <tasks_1ms>
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}
 8001720:	200002a0 	.word	0x200002a0
 8001724:	20000404 	.word	0x20000404

08001728 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800172c:	4802      	ldr	r0, [pc, #8]	@ (8001738 <DMA2_Stream0_IRQHandler+0x10>)
 800172e:	f001 ff27 	bl	8003580 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000158 	.word	0x20000158

0800173c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001740:	4802      	ldr	r0, [pc, #8]	@ (800174c <DMA2_Stream1_IRQHandler+0x10>)
 8001742:	f001 ff1d 	bl	8003580 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000218 	.word	0x20000218

08001750 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001754:	4802      	ldr	r0, [pc, #8]	@ (8001760 <DMA2_Stream2_IRQHandler+0x10>)
 8001756:	f001 ff13 	bl	8003580 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	200001b8 	.word	0x200001b8

08001764 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001768:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <SystemInit+0x20>)
 800176a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800176e:	4a05      	ldr	r2, [pc, #20]	@ (8001784 <SystemInit+0x20>)
 8001770:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001774:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b09a      	sub	sp, #104	@ 0x68
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800178e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	609a      	str	r2, [r3, #8]
 800179a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800179c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017a8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]
 80017b8:	615a      	str	r2, [r3, #20]
 80017ba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	222c      	movs	r2, #44	@ 0x2c
 80017c0:	2100      	movs	r1, #0
 80017c2:	4618      	mov	r0, r3
 80017c4:	f005 f926 	bl	8006a14 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017c8:	4b50      	ldr	r3, [pc, #320]	@ (800190c <MX_TIM1_Init+0x184>)
 80017ca:	4a51      	ldr	r2, [pc, #324]	@ (8001910 <MX_TIM1_Init+0x188>)
 80017cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80017ce:	4b4f      	ldr	r3, [pc, #316]	@ (800190c <MX_TIM1_Init+0x184>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80017d4:	4b4d      	ldr	r3, [pc, #308]	@ (800190c <MX_TIM1_Init+0x184>)
 80017d6:	2220      	movs	r2, #32
 80017d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = (216000000*TS)/2;
 80017da:	4b4c      	ldr	r3, [pc, #304]	@ (800190c <MX_TIM1_Init+0x184>)
 80017dc:	f44f 6207 	mov.w	r2, #2160	@ 0x870
 80017e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e2:	4b4a      	ldr	r3, [pc, #296]	@ (800190c <MX_TIM1_Init+0x184>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017e8:	4b48      	ldr	r3, [pc, #288]	@ (800190c <MX_TIM1_Init+0x184>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017ee:	4b47      	ldr	r3, [pc, #284]	@ (800190c <MX_TIM1_Init+0x184>)
 80017f0:	2280      	movs	r2, #128	@ 0x80
 80017f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017f4:	4845      	ldr	r0, [pc, #276]	@ (800190c <MX_TIM1_Init+0x184>)
 80017f6:	f003 fcf3 	bl	80051e0 <HAL_TIM_Base_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001800:	f7ff fefc 	bl	80015fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001804:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001808:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800180a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800180e:	4619      	mov	r1, r3
 8001810:	483e      	ldr	r0, [pc, #248]	@ (800190c <MX_TIM1_Init+0x184>)
 8001812:	f004 fa17 	bl	8005c44 <HAL_TIM_ConfigClockSource>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800181c:	f7ff feee 	bl	80015fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001820:	483a      	ldr	r0, [pc, #232]	@ (800190c <MX_TIM1_Init+0x184>)
 8001822:	f003 fe0e 	bl	8005442 <HAL_TIM_PWM_Init>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800182c:	f7ff fee6 	bl	80015fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001830:	2320      	movs	r3, #32
 8001832:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001834:	2300      	movs	r3, #0
 8001836:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001838:	2300      	movs	r3, #0
 800183a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800183c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001840:	4619      	mov	r1, r3
 8001842:	4832      	ldr	r0, [pc, #200]	@ (800190c <MX_TIM1_Init+0x184>)
 8001844:	f004 ffbc 	bl	80067c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800184e:	f7ff fed5 	bl	80015fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001852:	2360      	movs	r3, #96	@ 0x60
 8001854:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001856:	2300      	movs	r3, #0
 8001858:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800185a:	2300      	movs	r3, #0
 800185c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 800185e:	2308      	movs	r3, #8
 8001860:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001862:	2300      	movs	r3, #0
 8001864:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8001866:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800186a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800186c:	2300      	movs	r3, #0
 800186e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001870:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001874:	2200      	movs	r2, #0
 8001876:	4619      	mov	r1, r3
 8001878:	4824      	ldr	r0, [pc, #144]	@ (800190c <MX_TIM1_Init+0x184>)
 800187a:	f004 f8cf 	bl	8005a1c <HAL_TIM_PWM_ConfigChannel>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001884:	f7ff feba 	bl	80015fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001888:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800188c:	2204      	movs	r2, #4
 800188e:	4619      	mov	r1, r3
 8001890:	481e      	ldr	r0, [pc, #120]	@ (800190c <MX_TIM1_Init+0x184>)
 8001892:	f004 f8c3 	bl	8005a1c <HAL_TIM_PWM_ConfigChannel>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 800189c:	f7ff feae 	bl	80015fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018a0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80018a4:	2208      	movs	r2, #8
 80018a6:	4619      	mov	r1, r3
 80018a8:	4818      	ldr	r0, [pc, #96]	@ (800190c <MX_TIM1_Init+0x184>)
 80018aa:	f004 f8b7 	bl	8005a1c <HAL_TIM_PWM_ConfigChannel>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 80018b4:	f7ff fea2 	bl	80015fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018b8:	2300      	movs	r3, #0
 80018ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018bc:	2300      	movs	r3, #0
 80018be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = DT*216000000;
 80018c4:	2320      	movs	r3, #32
 80018c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018de:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018e4:	2300      	movs	r3, #0
 80018e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018e8:	1d3b      	adds	r3, r7, #4
 80018ea:	4619      	mov	r1, r3
 80018ec:	4807      	ldr	r0, [pc, #28]	@ (800190c <MX_TIM1_Init+0x184>)
 80018ee:	f004 fff5 	bl	80068dc <HAL_TIMEx_ConfigBreakDeadTime>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 80018f8:	f7ff fe80 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018fc:	4803      	ldr	r0, [pc, #12]	@ (800190c <MX_TIM1_Init+0x184>)
 80018fe:	f000 fab5 	bl	8001e6c <HAL_TIM_MspPostInit>

}
 8001902:	bf00      	nop
 8001904:	3768      	adds	r7, #104	@ 0x68
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000320 	.word	0x20000320
 8001910:	40010000 	.word	0x40010000

08001914 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b088      	sub	sp, #32
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800191a:	f107 0314 	add.w	r3, r7, #20
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001932:	4b26      	ldr	r3, [pc, #152]	@ (80019cc <MX_TIM2_Init+0xb8>)
 8001934:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001938:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800193a:	4b24      	ldr	r3, [pc, #144]	@ (80019cc <MX_TIM2_Init+0xb8>)
 800193c:	2200      	movs	r2, #0
 800193e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001940:	4b22      	ldr	r3, [pc, #136]	@ (80019cc <MX_TIM2_Init+0xb8>)
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001946:	4b21      	ldr	r3, [pc, #132]	@ (80019cc <MX_TIM2_Init+0xb8>)
 8001948:	f04f 32ff 	mov.w	r2, #4294967295
 800194c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800194e:	4b1f      	ldr	r3, [pc, #124]	@ (80019cc <MX_TIM2_Init+0xb8>)
 8001950:	2200      	movs	r2, #0
 8001952:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001954:	4b1d      	ldr	r3, [pc, #116]	@ (80019cc <MX_TIM2_Init+0xb8>)
 8001956:	2200      	movs	r2, #0
 8001958:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800195a:	481c      	ldr	r0, [pc, #112]	@ (80019cc <MX_TIM2_Init+0xb8>)
 800195c:	f003 fdd2 	bl	8005504 <HAL_TIM_IC_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001966:	f7ff fe49 	bl	80015fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001972:	f107 0314 	add.w	r3, r7, #20
 8001976:	4619      	mov	r1, r3
 8001978:	4814      	ldr	r0, [pc, #80]	@ (80019cc <MX_TIM2_Init+0xb8>)
 800197a:	f004 ff21 	bl	80067c0 <HAL_TIMEx_MasterConfigSynchronization>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001984:	f7ff fe3a 	bl	80015fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001988:	2300      	movs	r3, #0
 800198a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800198c:	2301      	movs	r3, #1
 800198e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001994:	2300      	movs	r3, #0
 8001996:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001998:	1d3b      	adds	r3, r7, #4
 800199a:	2200      	movs	r2, #0
 800199c:	4619      	mov	r1, r3
 800199e:	480b      	ldr	r0, [pc, #44]	@ (80019cc <MX_TIM2_Init+0xb8>)
 80019a0:	f003 ffa0 	bl	80058e4 <HAL_TIM_IC_ConfigChannel>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80019aa:	f7ff fe27 	bl	80015fc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80019ae:	1d3b      	adds	r3, r7, #4
 80019b0:	2208      	movs	r2, #8
 80019b2:	4619      	mov	r1, r3
 80019b4:	4805      	ldr	r0, [pc, #20]	@ (80019cc <MX_TIM2_Init+0xb8>)
 80019b6:	f003 ff95 	bl	80058e4 <HAL_TIM_IC_ConfigChannel>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80019c0:	f7ff fe1c 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019c4:	bf00      	nop
 80019c6:	3720      	adds	r7, #32
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	2000036c 	.word	0x2000036c

080019d0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b088      	sub	sp, #32
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d6:	f107 0314 	add.w	r3, r7, #20
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80019e2:	1d3b      	adds	r3, r7, #4
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019ee:	4b26      	ldr	r3, [pc, #152]	@ (8001a88 <MX_TIM4_Init+0xb8>)
 80019f0:	4a26      	ldr	r2, [pc, #152]	@ (8001a8c <MX_TIM4_Init+0xbc>)
 80019f2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80019f4:	4b24      	ldr	r3, [pc, #144]	@ (8001a88 <MX_TIM4_Init+0xb8>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019fa:	4b23      	ldr	r3, [pc, #140]	@ (8001a88 <MX_TIM4_Init+0xb8>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001a00:	4b21      	ldr	r3, [pc, #132]	@ (8001a88 <MX_TIM4_Init+0xb8>)
 8001a02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a06:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a08:	4b1f      	ldr	r3, [pc, #124]	@ (8001a88 <MX_TIM4_Init+0xb8>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8001a88 <MX_TIM4_Init+0xb8>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001a14:	481c      	ldr	r0, [pc, #112]	@ (8001a88 <MX_TIM4_Init+0xb8>)
 8001a16:	f003 fd75 	bl	8005504 <HAL_TIM_IC_Init>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001a20:	f7ff fdec 	bl	80015fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	4619      	mov	r1, r3
 8001a32:	4815      	ldr	r0, [pc, #84]	@ (8001a88 <MX_TIM4_Init+0xb8>)
 8001a34:	f004 fec4 	bl	80067c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8001a3e:	f7ff fddd 	bl	80015fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a42:	2300      	movs	r3, #0
 8001a44:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a46:	2301      	movs	r3, #1
 8001a48:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001a52:	1d3b      	adds	r3, r7, #4
 8001a54:	2200      	movs	r2, #0
 8001a56:	4619      	mov	r1, r3
 8001a58:	480b      	ldr	r0, [pc, #44]	@ (8001a88 <MX_TIM4_Init+0xb8>)
 8001a5a:	f003 ff43 	bl	80058e4 <HAL_TIM_IC_ConfigChannel>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001a64:	f7ff fdca 	bl	80015fc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001a68:	1d3b      	adds	r3, r7, #4
 8001a6a:	2208      	movs	r2, #8
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4806      	ldr	r0, [pc, #24]	@ (8001a88 <MX_TIM4_Init+0xb8>)
 8001a70:	f003 ff38 	bl	80058e4 <HAL_TIM_IC_ConfigChannel>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8001a7a:	f7ff fdbf 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a7e:	bf00      	nop
 8001a80:	3720      	adds	r7, #32
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	200003b8 	.word	0x200003b8
 8001a8c:	40000800 	.word	0x40000800

08001a90 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a96:	1d3b      	adds	r3, r7, #4
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001aa0:	4b14      	ldr	r3, [pc, #80]	@ (8001af4 <MX_TIM6_Init+0x64>)
 8001aa2:	4a15      	ldr	r2, [pc, #84]	@ (8001af8 <MX_TIM6_Init+0x68>)
 8001aa4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1;
 8001aa6:	4b13      	ldr	r3, [pc, #76]	@ (8001af4 <MX_TIM6_Init+0x64>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aac:	4b11      	ldr	r3, [pc, #68]	@ (8001af4 <MX_TIM6_Init+0x64>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 53999;
 8001ab2:	4b10      	ldr	r3, [pc, #64]	@ (8001af4 <MX_TIM6_Init+0x64>)
 8001ab4:	f24d 22ef 	movw	r2, #53999	@ 0xd2ef
 8001ab8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001aba:	4b0e      	ldr	r3, [pc, #56]	@ (8001af4 <MX_TIM6_Init+0x64>)
 8001abc:	2280      	movs	r2, #128	@ 0x80
 8001abe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ac0:	480c      	ldr	r0, [pc, #48]	@ (8001af4 <MX_TIM6_Init+0x64>)
 8001ac2:	f003 fb8d 	bl	80051e0 <HAL_TIM_Base_Init>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001acc:	f7ff fd96 	bl	80015fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ad0:	2320      	movs	r3, #32
 8001ad2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ad8:	1d3b      	adds	r3, r7, #4
 8001ada:	4619      	mov	r1, r3
 8001adc:	4805      	ldr	r0, [pc, #20]	@ (8001af4 <MX_TIM6_Init+0x64>)
 8001ade:	f004 fe6f 	bl	80067c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001ae8:	f7ff fd88 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001aec:	bf00      	nop
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20000404 	.word	0x20000404
 8001af8:	40001000 	.word	0x40001000

08001afc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b09a      	sub	sp, #104	@ 0x68
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b02:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b10:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b1c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	611a      	str	r2, [r3, #16]
 8001b2c:	615a      	str	r2, [r3, #20]
 8001b2e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b30:	1d3b      	adds	r3, r7, #4
 8001b32:	222c      	movs	r2, #44	@ 0x2c
 8001b34:	2100      	movs	r1, #0
 8001b36:	4618      	mov	r0, r3
 8001b38:	f004 ff6c 	bl	8006a14 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001b3c:	4b54      	ldr	r3, [pc, #336]	@ (8001c90 <MX_TIM8_Init+0x194>)
 8001b3e:	4a55      	ldr	r2, [pc, #340]	@ (8001c94 <MX_TIM8_Init+0x198>)
 8001b40:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001b42:	4b53      	ldr	r3, [pc, #332]	@ (8001c90 <MX_TIM8_Init+0x194>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b48:	4b51      	ldr	r3, [pc, #324]	@ (8001c90 <MX_TIM8_Init+0x194>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001b4e:	4b50      	ldr	r3, [pc, #320]	@ (8001c90 <MX_TIM8_Init+0x194>)
 8001b50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b54:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b56:	4b4e      	ldr	r3, [pc, #312]	@ (8001c90 <MX_TIM8_Init+0x194>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001b5c:	4b4c      	ldr	r3, [pc, #304]	@ (8001c90 <MX_TIM8_Init+0x194>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b62:	4b4b      	ldr	r3, [pc, #300]	@ (8001c90 <MX_TIM8_Init+0x194>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001b68:	4849      	ldr	r0, [pc, #292]	@ (8001c90 <MX_TIM8_Init+0x194>)
 8001b6a:	f003 fb39 	bl	80051e0 <HAL_TIM_Base_Init>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001b74:	f7ff fd42 	bl	80015fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b7c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001b7e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001b82:	4619      	mov	r1, r3
 8001b84:	4842      	ldr	r0, [pc, #264]	@ (8001c90 <MX_TIM8_Init+0x194>)
 8001b86:	f004 f85d 	bl	8005c44 <HAL_TIM_ConfigClockSource>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001b90:	f7ff fd34 	bl	80015fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001b94:	483e      	ldr	r0, [pc, #248]	@ (8001c90 <MX_TIM8_Init+0x194>)
 8001b96:	f003 fc54 	bl	8005442 <HAL_TIM_PWM_Init>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001ba0:	f7ff fd2c 	bl	80015fc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8001ba4:	483a      	ldr	r0, [pc, #232]	@ (8001c90 <MX_TIM8_Init+0x194>)
 8001ba6:	f003 fbeb 	bl	8005380 <HAL_TIM_OC_Init>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_TIM8_Init+0xb8>
  {
    Error_Handler();
 8001bb0:	f7ff fd24 	bl	80015fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001bc0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4832      	ldr	r0, [pc, #200]	@ (8001c90 <MX_TIM8_Init+0x194>)
 8001bc8:	f004 fdfa 	bl	80067c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_TIM8_Init+0xda>
  {
    Error_Handler();
 8001bd2:	f7ff fd13 	bl	80015fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bd6:	2360      	movs	r3, #96	@ 0x60
 8001bd8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bde:	2300      	movs	r3, #0
 8001be0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001be2:	2300      	movs	r3, #0
 8001be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001be6:	2300      	movs	r3, #0
 8001be8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bea:	2300      	movs	r3, #0
 8001bec:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bf2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4825      	ldr	r0, [pc, #148]	@ (8001c90 <MX_TIM8_Init+0x194>)
 8001bfc:	f003 ff0e 	bl	8005a1c <HAL_TIM_PWM_ConfigChannel>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8001c06:	f7ff fcf9 	bl	80015fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c0a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c0e:	2204      	movs	r2, #4
 8001c10:	4619      	mov	r1, r3
 8001c12:	481f      	ldr	r0, [pc, #124]	@ (8001c90 <MX_TIM8_Init+0x194>)
 8001c14:	f003 ff02 	bl	8005a1c <HAL_TIM_PWM_ConfigChannel>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 8001c1e:	f7ff fced 	bl	80015fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001c22:	2300      	movs	r3, #0
 8001c24:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c26:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c2a:	2208      	movs	r2, #8
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4818      	ldr	r0, [pc, #96]	@ (8001c90 <MX_TIM8_Init+0x194>)
 8001c30:	f003 fdde 	bl	80057f0 <HAL_TIM_OC_ConfigChannel>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001c3a:	f7ff fcdf 	bl	80015fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c42:	2300      	movs	r3, #0
 8001c44:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c46:	2300      	movs	r3, #0
 8001c48:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c56:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c60:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c64:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	4619      	mov	r1, r3
 8001c72:	4807      	ldr	r0, [pc, #28]	@ (8001c90 <MX_TIM8_Init+0x194>)
 8001c74:	f004 fe32 	bl	80068dc <HAL_TIMEx_ConfigBreakDeadTime>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM8_Init+0x186>
  {
    Error_Handler();
 8001c7e:	f7ff fcbd 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001c82:	4803      	ldr	r0, [pc, #12]	@ (8001c90 <MX_TIM8_Init+0x194>)
 8001c84:	f000 f8f2 	bl	8001e6c <HAL_TIM_MspPostInit>

}
 8001c88:	bf00      	nop
 8001c8a:	3768      	adds	r7, #104	@ 0x68
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20000450 	.word	0x20000450
 8001c94:	40010400 	.word	0x40010400

08001c98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a23      	ldr	r2, [pc, #140]	@ (8001d34 <HAL_TIM_Base_MspInit+0x9c>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d114      	bne.n	8001cd4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001caa:	4b23      	ldr	r3, [pc, #140]	@ (8001d38 <HAL_TIM_Base_MspInit+0xa0>)
 8001cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cae:	4a22      	ldr	r2, [pc, #136]	@ (8001d38 <HAL_TIM_Base_MspInit+0xa0>)
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cb6:	4b20      	ldr	r3, [pc, #128]	@ (8001d38 <HAL_TIM_Base_MspInit+0xa0>)
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	2019      	movs	r0, #25
 8001cc8:	f001 fa37 	bl	800313a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ccc:	2019      	movs	r0, #25
 8001cce:	f001 fa50 	bl	8003172 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001cd2:	e02a      	b.n	8001d2a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM6)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a18      	ldr	r2, [pc, #96]	@ (8001d3c <HAL_TIM_Base_MspInit+0xa4>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d114      	bne.n	8001d08 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001cde:	4b16      	ldr	r3, [pc, #88]	@ (8001d38 <HAL_TIM_Base_MspInit+0xa0>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce2:	4a15      	ldr	r2, [pc, #84]	@ (8001d38 <HAL_TIM_Base_MspInit+0xa0>)
 8001ce4:	f043 0310 	orr.w	r3, r3, #16
 8001ce8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cea:	4b13      	ldr	r3, [pc, #76]	@ (8001d38 <HAL_TIM_Base_MspInit+0xa0>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cee:	f003 0310 	and.w	r3, r3, #16
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	2036      	movs	r0, #54	@ 0x36
 8001cfc:	f001 fa1d 	bl	800313a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d00:	2036      	movs	r0, #54	@ 0x36
 8001d02:	f001 fa36 	bl	8003172 <HAL_NVIC_EnableIRQ>
}
 8001d06:	e010      	b.n	8001d2a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM8)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a0c      	ldr	r2, [pc, #48]	@ (8001d40 <HAL_TIM_Base_MspInit+0xa8>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d10b      	bne.n	8001d2a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001d12:	4b09      	ldr	r3, [pc, #36]	@ (8001d38 <HAL_TIM_Base_MspInit+0xa0>)
 8001d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d16:	4a08      	ldr	r2, [pc, #32]	@ (8001d38 <HAL_TIM_Base_MspInit+0xa0>)
 8001d18:	f043 0302 	orr.w	r3, r3, #2
 8001d1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d1e:	4b06      	ldr	r3, [pc, #24]	@ (8001d38 <HAL_TIM_Base_MspInit+0xa0>)
 8001d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
}
 8001d2a:	bf00      	nop
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40010000 	.word	0x40010000
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	40001000 	.word	0x40001000
 8001d40:	40010400 	.word	0x40010400

08001d44 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08c      	sub	sp, #48	@ 0x30
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 031c 	add.w	r3, r7, #28
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d64:	d146      	bne.n	8001df4 <HAL_TIM_IC_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d66:	4b3c      	ldr	r3, [pc, #240]	@ (8001e58 <HAL_TIM_IC_MspInit+0x114>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6a:	4a3b      	ldr	r2, [pc, #236]	@ (8001e58 <HAL_TIM_IC_MspInit+0x114>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d72:	4b39      	ldr	r3, [pc, #228]	@ (8001e58 <HAL_TIM_IC_MspInit+0x114>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	61bb      	str	r3, [r7, #24]
 8001d7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d7e:	4b36      	ldr	r3, [pc, #216]	@ (8001e58 <HAL_TIM_IC_MspInit+0x114>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d82:	4a35      	ldr	r2, [pc, #212]	@ (8001e58 <HAL_TIM_IC_MspInit+0x114>)
 8001d84:	f043 0302 	orr.w	r3, r3, #2
 8001d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d8a:	4b33      	ldr	r3, [pc, #204]	@ (8001e58 <HAL_TIM_IC_MspInit+0x114>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	617b      	str	r3, [r7, #20]
 8001d94:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d96:	4b30      	ldr	r3, [pc, #192]	@ (8001e58 <HAL_TIM_IC_MspInit+0x114>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9a:	4a2f      	ldr	r2, [pc, #188]	@ (8001e58 <HAL_TIM_IC_MspInit+0x114>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001da2:	4b2d      	ldr	r3, [pc, #180]	@ (8001e58 <HAL_TIM_IC_MspInit+0x114>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	613b      	str	r3, [r7, #16]
 8001dac:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = B_R_Pin;
 8001dae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db4:	2302      	movs	r3, #2
 8001db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(B_R_GPIO_Port, &GPIO_InitStruct);
 8001dc4:	f107 031c 	add.w	r3, r7, #28
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4824      	ldr	r0, [pc, #144]	@ (8001e5c <HAL_TIM_IC_MspInit+0x118>)
 8001dcc:	f001 fe42 	bl	8003a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A_R_Pin;
 8001dd0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dde:	2300      	movs	r3, #0
 8001de0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001de2:	2301      	movs	r3, #1
 8001de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(A_R_GPIO_Port, &GPIO_InitStruct);
 8001de6:	f107 031c 	add.w	r3, r7, #28
 8001dea:	4619      	mov	r1, r3
 8001dec:	481c      	ldr	r0, [pc, #112]	@ (8001e60 <HAL_TIM_IC_MspInit+0x11c>)
 8001dee:	f001 fe31 	bl	8003a54 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001df2:	e02d      	b.n	8001e50 <HAL_TIM_IC_MspInit+0x10c>
  else if(tim_icHandle->Instance==TIM4)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a1a      	ldr	r2, [pc, #104]	@ (8001e64 <HAL_TIM_IC_MspInit+0x120>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d128      	bne.n	8001e50 <HAL_TIM_IC_MspInit+0x10c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001dfe:	4b16      	ldr	r3, [pc, #88]	@ (8001e58 <HAL_TIM_IC_MspInit+0x114>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e02:	4a15      	ldr	r2, [pc, #84]	@ (8001e58 <HAL_TIM_IC_MspInit+0x114>)
 8001e04:	f043 0304 	orr.w	r3, r3, #4
 8001e08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e0a:	4b13      	ldr	r3, [pc, #76]	@ (8001e58 <HAL_TIM_IC_MspInit+0x114>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e16:	4b10      	ldr	r3, [pc, #64]	@ (8001e58 <HAL_TIM_IC_MspInit+0x114>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1a:	4a0f      	ldr	r2, [pc, #60]	@ (8001e58 <HAL_TIM_IC_MspInit+0x114>)
 8001e1c:	f043 0308 	orr.w	r3, r3, #8
 8001e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e22:	4b0d      	ldr	r3, [pc, #52]	@ (8001e58 <HAL_TIM_IC_MspInit+0x114>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e26:	f003 0308 	and.w	r3, r3, #8
 8001e2a:	60bb      	str	r3, [r7, #8]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = A_L_Pin|B_L_Pin;
 8001e2e:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8001e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e34:	2302      	movs	r3, #2
 8001e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e40:	2302      	movs	r3, #2
 8001e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e44:	f107 031c 	add.w	r3, r7, #28
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4807      	ldr	r0, [pc, #28]	@ (8001e68 <HAL_TIM_IC_MspInit+0x124>)
 8001e4c:	f001 fe02 	bl	8003a54 <HAL_GPIO_Init>
}
 8001e50:	bf00      	nop
 8001e52:	3730      	adds	r7, #48	@ 0x30
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40020400 	.word	0x40020400
 8001e60:	40020000 	.word	0x40020000
 8001e64:	40000800 	.word	0x40000800
 8001e68:	40020c00 	.word	0x40020c00

08001e6c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08c      	sub	sp, #48	@ 0x30
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	f107 031c 	add.w	r3, r7, #28
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a3f      	ldr	r2, [pc, #252]	@ (8001f88 <HAL_TIM_MspPostInit+0x11c>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d11d      	bne.n	8001eca <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e8e:	4b3f      	ldr	r3, [pc, #252]	@ (8001f8c <HAL_TIM_MspPostInit+0x120>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e92:	4a3e      	ldr	r2, [pc, #248]	@ (8001f8c <HAL_TIM_MspPostInit+0x120>)
 8001e94:	f043 0310 	orr.w	r3, r3, #16
 8001e98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e9a:	4b3c      	ldr	r3, [pc, #240]	@ (8001f8c <HAL_TIM_MspPostInit+0x120>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9e:	f003 0310 	and.w	r3, r3, #16
 8001ea2:	61bb      	str	r3, [r7, #24]
 8001ea4:	69bb      	ldr	r3, [r7, #24]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWM1_L_Pin|PWM2_L_Pin|PWM3_L_Pin|PWM4_L_Pin
 8001ea6:	f44f 537c 	mov.w	r3, #16128	@ 0x3f00
 8001eaa:	61fb      	str	r3, [r7, #28]
                          |PWM5_L_Pin|PWM6_L_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eac:	2302      	movs	r3, #2
 8001eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ebc:	f107 031c 	add.w	r3, r7, #28
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4833      	ldr	r0, [pc, #204]	@ (8001f90 <HAL_TIM_MspPostInit+0x124>)
 8001ec4:	f001 fdc6 	bl	8003a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001ec8:	e05a      	b.n	8001f80 <HAL_TIM_MspPostInit+0x114>
  else if(timHandle->Instance==TIM8)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a31      	ldr	r2, [pc, #196]	@ (8001f94 <HAL_TIM_MspPostInit+0x128>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d155      	bne.n	8001f80 <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed4:	4b2d      	ldr	r3, [pc, #180]	@ (8001f8c <HAL_TIM_MspPostInit+0x120>)
 8001ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed8:	4a2c      	ldr	r2, [pc, #176]	@ (8001f8c <HAL_TIM_MspPostInit+0x120>)
 8001eda:	f043 0301 	orr.w	r3, r3, #1
 8001ede:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ee0:	4b2a      	ldr	r3, [pc, #168]	@ (8001f8c <HAL_TIM_MspPostInit+0x120>)
 8001ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	617b      	str	r3, [r7, #20]
 8001eea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eec:	4b27      	ldr	r3, [pc, #156]	@ (8001f8c <HAL_TIM_MspPostInit+0x120>)
 8001eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef0:	4a26      	ldr	r2, [pc, #152]	@ (8001f8c <HAL_TIM_MspPostInit+0x120>)
 8001ef2:	f043 0302 	orr.w	r3, r3, #2
 8001ef6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ef8:	4b24      	ldr	r3, [pc, #144]	@ (8001f8c <HAL_TIM_MspPostInit+0x120>)
 8001efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f04:	4b21      	ldr	r3, [pc, #132]	@ (8001f8c <HAL_TIM_MspPostInit+0x120>)
 8001f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f08:	4a20      	ldr	r2, [pc, #128]	@ (8001f8c <HAL_TIM_MspPostInit+0x120>)
 8001f0a:	f043 0304 	orr.w	r3, r3, #4
 8001f0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f10:	4b1e      	ldr	r3, [pc, #120]	@ (8001f8c <HAL_TIM_MspPostInit+0x120>)
 8001f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM1_R_Pin;
 8001f1c:	2320      	movs	r3, #32
 8001f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f20:	2302      	movs	r3, #2
 8001f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM1_R_GPIO_Port, &GPIO_InitStruct);
 8001f30:	f107 031c 	add.w	r3, r7, #28
 8001f34:	4619      	mov	r1, r3
 8001f36:	4818      	ldr	r0, [pc, #96]	@ (8001f98 <HAL_TIM_MspPostInit+0x12c>)
 8001f38:	f001 fd8c 	bl	8003a54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM3_R_Pin|PWM5_R_Pin;
 8001f3c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f42:	2302      	movs	r3, #2
 8001f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f46:	2300      	movs	r3, #0
 8001f48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f52:	f107 031c 	add.w	r3, r7, #28
 8001f56:	4619      	mov	r1, r3
 8001f58:	4810      	ldr	r0, [pc, #64]	@ (8001f9c <HAL_TIM_MspPostInit+0x130>)
 8001f5a:	f001 fd7b 	bl	8003a54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM2_R_Pin|PWM4_R_Pin|PWM6_R_Pin;
 8001f5e:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f64:	2302      	movs	r3, #2
 8001f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001f70:	2303      	movs	r3, #3
 8001f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f74:	f107 031c 	add.w	r3, r7, #28
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4809      	ldr	r0, [pc, #36]	@ (8001fa0 <HAL_TIM_MspPostInit+0x134>)
 8001f7c:	f001 fd6a 	bl	8003a54 <HAL_GPIO_Init>
}
 8001f80:	bf00      	nop
 8001f82:	3730      	adds	r7, #48	@ 0x30
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40010000 	.word	0x40010000
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40021000 	.word	0x40021000
 8001f94:	40010400 	.word	0x40010400
 8001f98:	40020000 	.word	0x40020000
 8001f9c:	40020400 	.word	0x40020400
 8001fa0:	40020800 	.word	0x40020800

08001fa4 <MX_USB_OTG_FS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_USB_Init(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
	...

08001fb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fb8:	480d      	ldr	r0, [pc, #52]	@ (8001ff0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fba:	490e      	ldr	r1, [pc, #56]	@ (8001ff4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fbc:	4a0e      	ldr	r2, [pc, #56]	@ (8001ff8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fc0:	e002      	b.n	8001fc8 <LoopCopyDataInit>

08001fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fc6:	3304      	adds	r3, #4

08001fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fcc:	d3f9      	bcc.n	8001fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fce:	4a0b      	ldr	r2, [pc, #44]	@ (8001ffc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fd0:	4c0b      	ldr	r4, [pc, #44]	@ (8002000 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fd4:	e001      	b.n	8001fda <LoopFillZerobss>

08001fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fd8:	3204      	adds	r2, #4

08001fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fdc:	d3fb      	bcc.n	8001fd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001fde:	f7ff fbc1 	bl	8001764 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fe2:	f004 fd1f 	bl	8006a24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fe6:	f7ff fa45 	bl	8001474 <main>
  bx  lr    
 8001fea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fec:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001ff0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ff4:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001ff8:	08006ab8 	.word	0x08006ab8
  ldr r2, =_sbss
 8001ffc:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8002000:	200004a0 	.word	0x200004a0

08002004 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002004:	e7fe      	b.n	8002004 <ADC_IRQHandler>

08002006 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800200a:	2003      	movs	r0, #3
 800200c:	f001 f88a 	bl	8003124 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002010:	200f      	movs	r0, #15
 8002012:	f000 f805 	bl	8002020 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002016:	f7ff faf7 	bl	8001608 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002028:	4b12      	ldr	r3, [pc, #72]	@ (8002074 <HAL_InitTick+0x54>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	4b12      	ldr	r3, [pc, #72]	@ (8002078 <HAL_InitTick+0x58>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	4619      	mov	r1, r3
 8002032:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002036:	fbb3 f3f1 	udiv	r3, r3, r1
 800203a:	fbb2 f3f3 	udiv	r3, r2, r3
 800203e:	4618      	mov	r0, r3
 8002040:	f001 f8a5 	bl	800318e <HAL_SYSTICK_Config>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e00e      	b.n	800206c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b0f      	cmp	r3, #15
 8002052:	d80a      	bhi.n	800206a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002054:	2200      	movs	r2, #0
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	f04f 30ff 	mov.w	r0, #4294967295
 800205c:	f001 f86d 	bl	800313a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002060:	4a06      	ldr	r2, [pc, #24]	@ (800207c <HAL_InitTick+0x5c>)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002066:	2300      	movs	r3, #0
 8002068:	e000      	b.n	800206c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
}
 800206c:	4618      	mov	r0, r3
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000018 	.word	0x20000018
 8002078:	20000020 	.word	0x20000020
 800207c:	2000001c 	.word	0x2000001c

08002080 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002084:	4b06      	ldr	r3, [pc, #24]	@ (80020a0 <HAL_IncTick+0x20>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	461a      	mov	r2, r3
 800208a:	4b06      	ldr	r3, [pc, #24]	@ (80020a4 <HAL_IncTick+0x24>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4413      	add	r3, r2
 8002090:	4a04      	ldr	r2, [pc, #16]	@ (80020a4 <HAL_IncTick+0x24>)
 8002092:	6013      	str	r3, [r2, #0]
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	20000020 	.word	0x20000020
 80020a4:	2000049c 	.word	0x2000049c

080020a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  return uwTick;
 80020ac:	4b03      	ldr	r3, [pc, #12]	@ (80020bc <HAL_GetTick+0x14>)
 80020ae:	681b      	ldr	r3, [r3, #0]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	2000049c 	.word	0x2000049c

080020c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020c8:	2300      	movs	r3, #0
 80020ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e031      	b.n	800213a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d109      	bne.n	80020f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7fe fd8a 	bl	8000bf8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f6:	f003 0310 	and.w	r3, r3, #16
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d116      	bne.n	800212c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002102:	4b10      	ldr	r3, [pc, #64]	@ (8002144 <HAL_ADC_Init+0x84>)
 8002104:	4013      	ands	r3, r2
 8002106:	f043 0202 	orr.w	r2, r3, #2
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 fa88 	bl	8002624 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211e:	f023 0303 	bic.w	r3, r3, #3
 8002122:	f043 0201 	orr.w	r2, r3, #1
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	641a      	str	r2, [r3, #64]	@ 0x40
 800212a:	e001      	b.n	8002130 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002138:	7bfb      	ldrb	r3, [r7, #15]
}
 800213a:	4618      	mov	r0, r3
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	ffffeefd 	.word	0xffffeefd

08002148 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800215e:	2b01      	cmp	r3, #1
 8002160:	d101      	bne.n	8002166 <HAL_ADC_Start_DMA+0x1e>
 8002162:	2302      	movs	r3, #2
 8002164:	e0d4      	b.n	8002310 <HAL_ADC_Start_DMA+0x1c8>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b01      	cmp	r3, #1
 800217a:	d018      	beq.n	80021ae <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 0201 	orr.w	r2, r2, #1
 800218a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800218c:	4b62      	ldr	r3, [pc, #392]	@ (8002318 <HAL_ADC_Start_DMA+0x1d0>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a62      	ldr	r2, [pc, #392]	@ (800231c <HAL_ADC_Start_DMA+0x1d4>)
 8002192:	fba2 2303 	umull	r2, r3, r2, r3
 8002196:	0c9a      	lsrs	r2, r3, #18
 8002198:	4613      	mov	r3, r2
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	4413      	add	r3, r2
 800219e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80021a0:	e002      	b.n	80021a8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	3b01      	subs	r3, #1
 80021a6:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f9      	bne.n	80021a2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	f040 809c 	bne.w	80022f6 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021c2:	4b57      	ldr	r3, [pc, #348]	@ (8002320 <HAL_ADC_Start_DMA+0x1d8>)
 80021c4:	4013      	ands	r3, r2
 80021c6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d007      	beq.n	80021ec <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021e4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021f8:	d106      	bne.n	8002208 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fe:	f023 0206 	bic.w	r2, r3, #6
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	645a      	str	r2, [r3, #68]	@ 0x44
 8002206:	e002      	b.n	800220e <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800221a:	4a42      	ldr	r2, [pc, #264]	@ (8002324 <HAL_ADC_Start_DMA+0x1dc>)
 800221c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002222:	4a41      	ldr	r2, [pc, #260]	@ (8002328 <HAL_ADC_Start_DMA+0x1e0>)
 8002224:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800222a:	4a40      	ldr	r2, [pc, #256]	@ (800232c <HAL_ADC_Start_DMA+0x1e4>)
 800222c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002236:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002246:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689a      	ldr	r2, [r3, #8]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002256:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	334c      	adds	r3, #76	@ 0x4c
 8002262:	4619      	mov	r1, r3
 8002264:	68ba      	ldr	r2, [r7, #8]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f001 f92a 	bl	80034c0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800226c:	4b30      	ldr	r3, [pc, #192]	@ (8002330 <HAL_ADC_Start_DMA+0x1e8>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 031f 	and.w	r3, r3, #31
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10f      	bne.n	8002298 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d143      	bne.n	800230e <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002294:	609a      	str	r2, [r3, #8]
 8002296:	e03a      	b.n	800230e <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a25      	ldr	r2, [pc, #148]	@ (8002334 <HAL_ADC_Start_DMA+0x1ec>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d10e      	bne.n	80022c0 <HAL_ADC_Start_DMA+0x178>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d107      	bne.n	80022c0 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	689a      	ldr	r2, [r3, #8]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80022be:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80022c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002330 <HAL_ADC_Start_DMA+0x1e8>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 0310 	and.w	r3, r3, #16
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d120      	bne.n	800230e <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a19      	ldr	r2, [pc, #100]	@ (8002338 <HAL_ADC_Start_DMA+0x1f0>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d11b      	bne.n	800230e <HAL_ADC_Start_DMA+0x1c6>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d114      	bne.n	800230e <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80022f2:	609a      	str	r2, [r3, #8]
 80022f4:	e00b      	b.n	800230e <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fa:	f043 0210 	orr.w	r2, r3, #16
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002306:	f043 0201 	orr.w	r2, r3, #1
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3718      	adds	r7, #24
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	20000018 	.word	0x20000018
 800231c:	431bde83 	.word	0x431bde83
 8002320:	fffff8fe 	.word	0xfffff8fe
 8002324:	08002819 	.word	0x08002819
 8002328:	080028d3 	.word	0x080028d3
 800232c:	080028ef 	.word	0x080028ef
 8002330:	40012300 	.word	0x40012300
 8002334:	40012000 	.word	0x40012000
 8002338:	40012200 	.word	0x40012200

0800233c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002382:	2300      	movs	r3, #0
 8002384:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800238c:	2b01      	cmp	r3, #1
 800238e:	d101      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x1c>
 8002390:	2302      	movs	r3, #2
 8002392:	e136      	b.n	8002602 <HAL_ADC_ConfigChannel+0x28a>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b09      	cmp	r3, #9
 80023a2:	d93a      	bls.n	800241a <HAL_ADC_ConfigChannel+0xa2>
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80023ac:	d035      	beq.n	800241a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68d9      	ldr	r1, [r3, #12]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	461a      	mov	r2, r3
 80023bc:	4613      	mov	r3, r2
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	4413      	add	r3, r2
 80023c2:	3b1e      	subs	r3, #30
 80023c4:	2207      	movs	r2, #7
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43da      	mvns	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	400a      	ands	r2, r1
 80023d2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a8d      	ldr	r2, [pc, #564]	@ (8002610 <HAL_ADC_ConfigChannel+0x298>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d10a      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68d9      	ldr	r1, [r3, #12]
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	061a      	lsls	r2, r3, #24
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023f2:	e035      	b.n	8002460 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68d9      	ldr	r1, [r3, #12]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	b29b      	uxth	r3, r3
 8002404:	4618      	mov	r0, r3
 8002406:	4603      	mov	r3, r0
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	4403      	add	r3, r0
 800240c:	3b1e      	subs	r3, #30
 800240e:	409a      	lsls	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	430a      	orrs	r2, r1
 8002416:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002418:	e022      	b.n	8002460 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6919      	ldr	r1, [r3, #16]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	b29b      	uxth	r3, r3
 8002426:	461a      	mov	r2, r3
 8002428:	4613      	mov	r3, r2
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	4413      	add	r3, r2
 800242e:	2207      	movs	r2, #7
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43da      	mvns	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	400a      	ands	r2, r1
 800243c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	6919      	ldr	r1, [r3, #16]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	b29b      	uxth	r3, r3
 800244e:	4618      	mov	r0, r3
 8002450:	4603      	mov	r3, r0
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	4403      	add	r3, r0
 8002456:	409a      	lsls	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b06      	cmp	r3, #6
 8002466:	d824      	bhi.n	80024b2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	4613      	mov	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	3b05      	subs	r3, #5
 800247a:	221f      	movs	r2, #31
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	43da      	mvns	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	400a      	ands	r2, r1
 8002488:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	b29b      	uxth	r3, r3
 8002496:	4618      	mov	r0, r3
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	4613      	mov	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	3b05      	subs	r3, #5
 80024a4:	fa00 f203 	lsl.w	r2, r0, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	635a      	str	r2, [r3, #52]	@ 0x34
 80024b0:	e04c      	b.n	800254c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b0c      	cmp	r3, #12
 80024b8:	d824      	bhi.n	8002504 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	4613      	mov	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4413      	add	r3, r2
 80024ca:	3b23      	subs	r3, #35	@ 0x23
 80024cc:	221f      	movs	r2, #31
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43da      	mvns	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	400a      	ands	r2, r1
 80024da:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	4618      	mov	r0, r3
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	4613      	mov	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	3b23      	subs	r3, #35	@ 0x23
 80024f6:	fa00 f203 	lsl.w	r2, r0, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	631a      	str	r2, [r3, #48]	@ 0x30
 8002502:	e023      	b.n	800254c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	4613      	mov	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	3b41      	subs	r3, #65	@ 0x41
 8002516:	221f      	movs	r2, #31
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43da      	mvns	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	400a      	ands	r2, r1
 8002524:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	b29b      	uxth	r3, r3
 8002532:	4618      	mov	r0, r3
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	4613      	mov	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4413      	add	r3, r2
 800253e:	3b41      	subs	r3, #65	@ 0x41
 8002540:	fa00 f203 	lsl.w	r2, r0, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	430a      	orrs	r2, r1
 800254a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a30      	ldr	r2, [pc, #192]	@ (8002614 <HAL_ADC_ConfigChannel+0x29c>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d10a      	bne.n	800256c <HAL_ADC_ConfigChannel+0x1f4>
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800255e:	d105      	bne.n	800256c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002560:	4b2d      	ldr	r3, [pc, #180]	@ (8002618 <HAL_ADC_ConfigChannel+0x2a0>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	4a2c      	ldr	r2, [pc, #176]	@ (8002618 <HAL_ADC_ConfigChannel+0x2a0>)
 8002566:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800256a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a28      	ldr	r2, [pc, #160]	@ (8002614 <HAL_ADC_ConfigChannel+0x29c>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d10f      	bne.n	8002596 <HAL_ADC_ConfigChannel+0x21e>
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2b12      	cmp	r3, #18
 800257c:	d10b      	bne.n	8002596 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800257e:	4b26      	ldr	r3, [pc, #152]	@ (8002618 <HAL_ADC_ConfigChannel+0x2a0>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	4a25      	ldr	r2, [pc, #148]	@ (8002618 <HAL_ADC_ConfigChannel+0x2a0>)
 8002584:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002588:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800258a:	4b23      	ldr	r3, [pc, #140]	@ (8002618 <HAL_ADC_ConfigChannel+0x2a0>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	4a22      	ldr	r2, [pc, #136]	@ (8002618 <HAL_ADC_ConfigChannel+0x2a0>)
 8002590:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002594:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a1e      	ldr	r2, [pc, #120]	@ (8002614 <HAL_ADC_ConfigChannel+0x29c>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d12b      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x280>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a1a      	ldr	r2, [pc, #104]	@ (8002610 <HAL_ADC_ConfigChannel+0x298>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d003      	beq.n	80025b2 <HAL_ADC_ConfigChannel+0x23a>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2b11      	cmp	r3, #17
 80025b0:	d122      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80025b2:	4b19      	ldr	r3, [pc, #100]	@ (8002618 <HAL_ADC_ConfigChannel+0x2a0>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	4a18      	ldr	r2, [pc, #96]	@ (8002618 <HAL_ADC_ConfigChannel+0x2a0>)
 80025b8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80025bc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80025be:	4b16      	ldr	r3, [pc, #88]	@ (8002618 <HAL_ADC_ConfigChannel+0x2a0>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	4a15      	ldr	r2, [pc, #84]	@ (8002618 <HAL_ADC_ConfigChannel+0x2a0>)
 80025c4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80025c8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a10      	ldr	r2, [pc, #64]	@ (8002610 <HAL_ADC_ConfigChannel+0x298>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d111      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80025d4:	4b11      	ldr	r3, [pc, #68]	@ (800261c <HAL_ADC_ConfigChannel+0x2a4>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a11      	ldr	r2, [pc, #68]	@ (8002620 <HAL_ADC_ConfigChannel+0x2a8>)
 80025da:	fba2 2303 	umull	r2, r3, r2, r3
 80025de:	0c9a      	lsrs	r2, r3, #18
 80025e0:	4613      	mov	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80025ea:	e002      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1f9      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	10000012 	.word	0x10000012
 8002614:	40012000 	.word	0x40012000
 8002618:	40012300 	.word	0x40012300
 800261c:	20000018 	.word	0x20000018
 8002620:	431bde83 	.word	0x431bde83

08002624 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800262c:	4b78      	ldr	r3, [pc, #480]	@ (8002810 <ADC_Init+0x1ec>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	4a77      	ldr	r2, [pc, #476]	@ (8002810 <ADC_Init+0x1ec>)
 8002632:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002636:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002638:	4b75      	ldr	r3, [pc, #468]	@ (8002810 <ADC_Init+0x1ec>)
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	4973      	ldr	r1, [pc, #460]	@ (8002810 <ADC_Init+0x1ec>)
 8002642:	4313      	orrs	r3, r2
 8002644:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002654:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6859      	ldr	r1, [r3, #4]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	021a      	lsls	r2, r3, #8
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	430a      	orrs	r2, r1
 8002668:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002678:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6859      	ldr	r1, [r3, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	430a      	orrs	r2, r1
 800268a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689a      	ldr	r2, [r3, #8]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800269a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6899      	ldr	r1, [r3, #8]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68da      	ldr	r2, [r3, #12]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b2:	4a58      	ldr	r2, [pc, #352]	@ (8002814 <ADC_Init+0x1f0>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d022      	beq.n	80026fe <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80026c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6899      	ldr	r1, [r3, #8]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	430a      	orrs	r2, r1
 80026d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80026e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6899      	ldr	r1, [r3, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	609a      	str	r2, [r3, #8]
 80026fc:	e00f      	b.n	800271e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800270c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800271c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 0202 	bic.w	r2, r2, #2
 800272c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6899      	ldr	r1, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	005a      	lsls	r2, r3, #1
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	430a      	orrs	r2, r1
 8002740:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d01b      	beq.n	8002784 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800275a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800276a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6859      	ldr	r1, [r3, #4]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002776:	3b01      	subs	r3, #1
 8002778:	035a      	lsls	r2, r3, #13
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	605a      	str	r2, [r3, #4]
 8002782:	e007      	b.n	8002794 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002792:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80027a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	051a      	lsls	r2, r3, #20
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80027c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6899      	ldr	r1, [r3, #8]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80027d6:	025a      	lsls	r2, r3, #9
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6899      	ldr	r1, [r3, #8]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	029a      	lsls	r2, r3, #10
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	609a      	str	r2, [r3, #8]
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	40012300 	.word	0x40012300
 8002814:	0f000001 	.word	0x0f000001

08002818 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002824:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800282e:	2b00      	cmp	r3, #0
 8002830:	d13c      	bne.n	80028ac <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002836:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d12b      	bne.n	80028a4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002850:	2b00      	cmp	r3, #0
 8002852:	d127      	bne.n	80028a4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800285e:	2b00      	cmp	r3, #0
 8002860:	d006      	beq.n	8002870 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800286c:	2b00      	cmp	r3, #0
 800286e:	d119      	bne.n	80028a4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0220 	bic.w	r2, r2, #32
 800287e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002884:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002890:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d105      	bne.n	80028a4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289c:	f043 0201 	orr.w	r2, r3, #1
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f7ff fd49 	bl	800233c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80028aa:	e00e      	b.n	80028ca <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b0:	f003 0310 	and.w	r3, r3, #16
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f7ff fd53 	bl	8002364 <HAL_ADC_ErrorCallback>
}
 80028be:	e004      	b.n	80028ca <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	4798      	blx	r3
}
 80028ca:	bf00      	nop
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b084      	sub	sp, #16
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028de:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f7ff fd35 	bl	8002350 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028e6:	bf00      	nop
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b084      	sub	sp, #16
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028fa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2240      	movs	r2, #64	@ 0x40
 8002900:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002906:	f043 0204 	orr.w	r2, r3, #4
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f7ff fd28 	bl	8002364 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002914:	bf00      	nop
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e0ed      	b.n	8002b0a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d102      	bne.n	8002940 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7fe fae2 	bl	8000f04 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0201 	orr.w	r2, r2, #1
 800294e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002950:	f7ff fbaa 	bl	80020a8 <HAL_GetTick>
 8002954:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002956:	e012      	b.n	800297e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002958:	f7ff fba6 	bl	80020a8 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b0a      	cmp	r3, #10
 8002964:	d90b      	bls.n	800297e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2205      	movs	r2, #5
 8002976:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e0c5      	b.n	8002b0a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0e5      	beq.n	8002958 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0202 	bic.w	r2, r2, #2
 800299a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800299c:	f7ff fb84 	bl	80020a8 <HAL_GetTick>
 80029a0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80029a2:	e012      	b.n	80029ca <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80029a4:	f7ff fb80 	bl	80020a8 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b0a      	cmp	r3, #10
 80029b0:	d90b      	bls.n	80029ca <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2205      	movs	r2, #5
 80029c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e09f      	b.n	8002b0a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1e5      	bne.n	80029a4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	7e1b      	ldrb	r3, [r3, #24]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d108      	bne.n	80029f2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	e007      	b.n	8002a02 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	7e5b      	ldrb	r3, [r3, #25]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d108      	bne.n	8002a1c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	e007      	b.n	8002a2c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	7e9b      	ldrb	r3, [r3, #26]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d108      	bne.n	8002a46 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f042 0220 	orr.w	r2, r2, #32
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	e007      	b.n	8002a56 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0220 	bic.w	r2, r2, #32
 8002a54:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	7edb      	ldrb	r3, [r3, #27]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d108      	bne.n	8002a70 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 0210 	bic.w	r2, r2, #16
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	e007      	b.n	8002a80 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0210 	orr.w	r2, r2, #16
 8002a7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	7f1b      	ldrb	r3, [r3, #28]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d108      	bne.n	8002a9a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0208 	orr.w	r2, r2, #8
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	e007      	b.n	8002aaa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 0208 	bic.w	r2, r2, #8
 8002aa8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	7f5b      	ldrb	r3, [r3, #29]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d108      	bne.n	8002ac4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f042 0204 	orr.w	r2, r2, #4
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	e007      	b.n	8002ad4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0204 	bic.w	r2, r2, #4
 8002ad2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	431a      	orrs	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	ea42 0103 	orr.w	r1, r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	1e5a      	subs	r2, r3, #1
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b08a      	sub	sp, #40	@ 0x28
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d07c      	beq.n	8002c52 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d023      	beq.n	8002baa <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2201      	movs	r2, #1
 8002b68:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d003      	beq.n	8002b7c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 f983 	bl	8002e80 <HAL_CAN_TxMailbox0CompleteCallback>
 8002b7a:	e016      	b.n	8002baa <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	f003 0304 	and.w	r3, r3, #4
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d004      	beq.n	8002b90 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b88:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002b8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b8e:	e00c      	b.n	8002baa <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	f003 0308 	and.w	r3, r3, #8
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d004      	beq.n	8002ba4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ba0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ba2:	e002      	b.n	8002baa <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f989 	bl	8002ebc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d024      	beq.n	8002bfe <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002bbc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d003      	beq.n	8002bd0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f963 	bl	8002e94 <HAL_CAN_TxMailbox1CompleteCallback>
 8002bce:	e016      	b.n	8002bfe <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d004      	beq.n	8002be4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bdc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002be0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002be2:	e00c      	b.n	8002bfe <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d004      	beq.n	8002bf8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bf6:	e002      	b.n	8002bfe <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f969 	bl	8002ed0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d024      	beq.n	8002c52 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002c10:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 f943 	bl	8002ea8 <HAL_CAN_TxMailbox2CompleteCallback>
 8002c22:	e016      	b.n	8002c52 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d004      	beq.n	8002c38 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c34:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c36:	e00c      	b.n	8002c52 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d004      	beq.n	8002c4c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c48:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c4a:	e002      	b.n	8002c52 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 f949 	bl	8002ee4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002c52:	6a3b      	ldr	r3, [r7, #32]
 8002c54:	f003 0308 	and.w	r3, r3, #8
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00c      	beq.n	8002c76 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	f003 0310 	and.w	r3, r3, #16
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d007      	beq.n	8002c76 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c68:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c6c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2210      	movs	r2, #16
 8002c74:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002c76:	6a3b      	ldr	r3, [r7, #32]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00b      	beq.n	8002c98 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d006      	beq.n	8002c98 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2208      	movs	r2, #8
 8002c90:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f93a 	bl	8002f0c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d009      	beq.n	8002cb6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f003 0303 	and.w	r3, r3, #3
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d002      	beq.n	8002cb6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 f921 	bl	8002ef8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002cb6:	6a3b      	ldr	r3, [r7, #32]
 8002cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00c      	beq.n	8002cda <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	f003 0310 	and.w	r3, r3, #16
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d007      	beq.n	8002cda <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ccc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cd0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2210      	movs	r2, #16
 8002cd8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	f003 0320 	and.w	r3, r3, #32
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00b      	beq.n	8002cfc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d006      	beq.n	8002cfc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2208      	movs	r2, #8
 8002cf4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f91c 	bl	8002f34 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002cfc:	6a3b      	ldr	r3, [r7, #32]
 8002cfe:	f003 0310 	and.w	r3, r3, #16
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d009      	beq.n	8002d1a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	f003 0303 	and.w	r3, r3, #3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d002      	beq.n	8002d1a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 f903 	bl	8002f20 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00b      	beq.n	8002d3c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	f003 0310 	and.w	r3, r3, #16
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d006      	beq.n	8002d3c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2210      	movs	r2, #16
 8002d34:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f906 	bl	8002f48 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00b      	beq.n	8002d5e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	f003 0308 	and.w	r3, r3, #8
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d006      	beq.n	8002d5e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2208      	movs	r2, #8
 8002d56:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 f8ff 	bl	8002f5c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d07b      	beq.n	8002e60 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f003 0304 	and.w	r3, r3, #4
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d072      	beq.n	8002e58 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d72:	6a3b      	ldr	r3, [r7, #32]
 8002d74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d008      	beq.n	8002d8e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d008      	beq.n	8002daa <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da4:	f043 0302 	orr.w	r3, r3, #2
 8002da8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d008      	beq.n	8002dc6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc0:	f043 0304 	orr.w	r3, r3, #4
 8002dc4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002dc6:	6a3b      	ldr	r3, [r7, #32]
 8002dc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d043      	beq.n	8002e58 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d03e      	beq.n	8002e58 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002de0:	2b60      	cmp	r3, #96	@ 0x60
 8002de2:	d02b      	beq.n	8002e3c <HAL_CAN_IRQHandler+0x32a>
 8002de4:	2b60      	cmp	r3, #96	@ 0x60
 8002de6:	d82e      	bhi.n	8002e46 <HAL_CAN_IRQHandler+0x334>
 8002de8:	2b50      	cmp	r3, #80	@ 0x50
 8002dea:	d022      	beq.n	8002e32 <HAL_CAN_IRQHandler+0x320>
 8002dec:	2b50      	cmp	r3, #80	@ 0x50
 8002dee:	d82a      	bhi.n	8002e46 <HAL_CAN_IRQHandler+0x334>
 8002df0:	2b40      	cmp	r3, #64	@ 0x40
 8002df2:	d019      	beq.n	8002e28 <HAL_CAN_IRQHandler+0x316>
 8002df4:	2b40      	cmp	r3, #64	@ 0x40
 8002df6:	d826      	bhi.n	8002e46 <HAL_CAN_IRQHandler+0x334>
 8002df8:	2b30      	cmp	r3, #48	@ 0x30
 8002dfa:	d010      	beq.n	8002e1e <HAL_CAN_IRQHandler+0x30c>
 8002dfc:	2b30      	cmp	r3, #48	@ 0x30
 8002dfe:	d822      	bhi.n	8002e46 <HAL_CAN_IRQHandler+0x334>
 8002e00:	2b10      	cmp	r3, #16
 8002e02:	d002      	beq.n	8002e0a <HAL_CAN_IRQHandler+0x2f8>
 8002e04:	2b20      	cmp	r3, #32
 8002e06:	d005      	beq.n	8002e14 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002e08:	e01d      	b.n	8002e46 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0c:	f043 0308 	orr.w	r3, r3, #8
 8002e10:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e12:	e019      	b.n	8002e48 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e16:	f043 0310 	orr.w	r3, r3, #16
 8002e1a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e1c:	e014      	b.n	8002e48 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e20:	f043 0320 	orr.w	r3, r3, #32
 8002e24:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e26:	e00f      	b.n	8002e48 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e2e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e30:	e00a      	b.n	8002e48 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e38:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e3a:	e005      	b.n	8002e48 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e42:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e44:	e000      	b.n	8002e48 <HAL_CAN_IRQHandler+0x336>
            break;
 8002e46:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	699a      	ldr	r2, [r3, #24]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002e56:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2204      	movs	r2, #4
 8002e5e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d008      	beq.n	8002e78 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 f87c 	bl	8002f70 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002e78:	bf00      	nop
 8002e7a:	3728      	adds	r7, #40	@ 0x28
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f94:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc4 <__NVIC_SetPriorityGrouping+0x40>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f9a:	68ba      	ldr	r2, [r7, #8]
 8002f9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002fac:	4b06      	ldr	r3, [pc, #24]	@ (8002fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fb2:	4a04      	ldr	r2, [pc, #16]	@ (8002fc4 <__NVIC_SetPriorityGrouping+0x40>)
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	60d3      	str	r3, [r2, #12]
}
 8002fb8:	bf00      	nop
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	e000ed00 	.word	0xe000ed00
 8002fc8:	05fa0000 	.word	0x05fa0000

08002fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fd0:	4b04      	ldr	r3, [pc, #16]	@ (8002fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	0a1b      	lsrs	r3, r3, #8
 8002fd6:	f003 0307 	and.w	r3, r3, #7
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	e000ed00 	.word	0xe000ed00

08002fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	4603      	mov	r3, r0
 8002ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	db0b      	blt.n	8003012 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ffa:	79fb      	ldrb	r3, [r7, #7]
 8002ffc:	f003 021f 	and.w	r2, r3, #31
 8003000:	4907      	ldr	r1, [pc, #28]	@ (8003020 <__NVIC_EnableIRQ+0x38>)
 8003002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003006:	095b      	lsrs	r3, r3, #5
 8003008:	2001      	movs	r0, #1
 800300a:	fa00 f202 	lsl.w	r2, r0, r2
 800300e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	e000e100 	.word	0xe000e100

08003024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	4603      	mov	r3, r0
 800302c:	6039      	str	r1, [r7, #0]
 800302e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003034:	2b00      	cmp	r3, #0
 8003036:	db0a      	blt.n	800304e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	b2da      	uxtb	r2, r3
 800303c:	490c      	ldr	r1, [pc, #48]	@ (8003070 <__NVIC_SetPriority+0x4c>)
 800303e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003042:	0112      	lsls	r2, r2, #4
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	440b      	add	r3, r1
 8003048:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800304c:	e00a      	b.n	8003064 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	b2da      	uxtb	r2, r3
 8003052:	4908      	ldr	r1, [pc, #32]	@ (8003074 <__NVIC_SetPriority+0x50>)
 8003054:	79fb      	ldrb	r3, [r7, #7]
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	3b04      	subs	r3, #4
 800305c:	0112      	lsls	r2, r2, #4
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	440b      	add	r3, r1
 8003062:	761a      	strb	r2, [r3, #24]
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	e000e100 	.word	0xe000e100
 8003074:	e000ed00 	.word	0xe000ed00

08003078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003078:	b480      	push	{r7}
 800307a:	b089      	sub	sp, #36	@ 0x24
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	f1c3 0307 	rsb	r3, r3, #7
 8003092:	2b04      	cmp	r3, #4
 8003094:	bf28      	it	cs
 8003096:	2304      	movcs	r3, #4
 8003098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	3304      	adds	r3, #4
 800309e:	2b06      	cmp	r3, #6
 80030a0:	d902      	bls.n	80030a8 <NVIC_EncodePriority+0x30>
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	3b03      	subs	r3, #3
 80030a6:	e000      	b.n	80030aa <NVIC_EncodePriority+0x32>
 80030a8:	2300      	movs	r3, #0
 80030aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030ac:	f04f 32ff 	mov.w	r2, #4294967295
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	43da      	mvns	r2, r3
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	401a      	ands	r2, r3
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030c0:	f04f 31ff 	mov.w	r1, #4294967295
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ca:	43d9      	mvns	r1, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d0:	4313      	orrs	r3, r2
         );
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3724      	adds	r7, #36	@ 0x24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
	...

080030e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3b01      	subs	r3, #1
 80030ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030f0:	d301      	bcc.n	80030f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030f2:	2301      	movs	r3, #1
 80030f4:	e00f      	b.n	8003116 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003120 <SysTick_Config+0x40>)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030fe:	210f      	movs	r1, #15
 8003100:	f04f 30ff 	mov.w	r0, #4294967295
 8003104:	f7ff ff8e 	bl	8003024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003108:	4b05      	ldr	r3, [pc, #20]	@ (8003120 <SysTick_Config+0x40>)
 800310a:	2200      	movs	r2, #0
 800310c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800310e:	4b04      	ldr	r3, [pc, #16]	@ (8003120 <SysTick_Config+0x40>)
 8003110:	2207      	movs	r2, #7
 8003112:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	e000e010 	.word	0xe000e010

08003124 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7ff ff29 	bl	8002f84 <__NVIC_SetPriorityGrouping>
}
 8003132:	bf00      	nop
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800313a:	b580      	push	{r7, lr}
 800313c:	b086      	sub	sp, #24
 800313e:	af00      	add	r7, sp, #0
 8003140:	4603      	mov	r3, r0
 8003142:	60b9      	str	r1, [r7, #8]
 8003144:	607a      	str	r2, [r7, #4]
 8003146:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003148:	2300      	movs	r3, #0
 800314a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800314c:	f7ff ff3e 	bl	8002fcc <__NVIC_GetPriorityGrouping>
 8003150:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	68b9      	ldr	r1, [r7, #8]
 8003156:	6978      	ldr	r0, [r7, #20]
 8003158:	f7ff ff8e 	bl	8003078 <NVIC_EncodePriority>
 800315c:	4602      	mov	r2, r0
 800315e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003162:	4611      	mov	r1, r2
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff ff5d 	bl	8003024 <__NVIC_SetPriority>
}
 800316a:	bf00      	nop
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b082      	sub	sp, #8
 8003176:	af00      	add	r7, sp, #0
 8003178:	4603      	mov	r3, r0
 800317a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800317c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff ff31 	bl	8002fe8 <__NVIC_EnableIRQ>
}
 8003186:	bf00      	nop
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b082      	sub	sp, #8
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7ff ffa2 	bl	80030e0 <SysTick_Config>
 800319c:	4603      	mov	r3, r0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b082      	sub	sp, #8
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e014      	b.n	80031e2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	791b      	ldrb	r3, [r3, #4]
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d105      	bne.n	80031ce <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f7fd ff19 	bl	8001000 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2202      	movs	r2, #2
 80031d2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b082      	sub	sp, #8
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003200:	d120      	bne.n	8003244 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003208:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800320c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003210:	d118      	bne.n	8003244 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2204      	movs	r2, #4
 8003216:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	f043 0201 	orr.w	r2, r3, #1
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800322c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800323c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f82d 	bl	800329e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800324e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003252:	d120      	bne.n	8003296 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800325a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800325e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003262:	d118      	bne.n	8003296 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2204      	movs	r2, #4
 8003268:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	f043 0202 	orr.w	r2, r3, #2
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800327e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800328e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 f85d 	bl	8003350 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8003296:	bf00      	nop
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800329e:	b480      	push	{r7}
 80032a0:	b083      	sub	sp, #12
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b087      	sub	sp, #28
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	60f8      	str	r0, [r7, #12]
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	795b      	ldrb	r3, [r3, #5]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d101      	bne.n	80032ca <HAL_DAC_ConfigChannel+0x18>
 80032c6:	2302      	movs	r3, #2
 80032c8:	e03c      	b.n	8003344 <HAL_DAC_ConfigChannel+0x92>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2201      	movs	r2, #1
 80032ce:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2202      	movs	r2, #2
 80032d4:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f003 0310 	and.w	r3, r3, #16
 80032e4:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	43db      	mvns	r3, r3
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	4013      	ands	r3, r2
 80032f2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f003 0310 	and.w	r3, r3, #16
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	4313      	orrs	r3, r2
 8003310:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6819      	ldr	r1, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f003 0310 	and.w	r3, r3, #16
 8003326:	22c0      	movs	r2, #192	@ 0xc0
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	43da      	mvns	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	400a      	ands	r2, r1
 8003334:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2201      	movs	r2, #1
 800333a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	371c      	adds	r7, #28
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003370:	f7fe fe9a 	bl	80020a8 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e099      	b.n	80034b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2202      	movs	r2, #2
 8003384:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0201 	bic.w	r2, r2, #1
 800339e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033a0:	e00f      	b.n	80033c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033a2:	f7fe fe81 	bl	80020a8 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b05      	cmp	r3, #5
 80033ae:	d908      	bls.n	80033c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2220      	movs	r2, #32
 80033b4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2203      	movs	r2, #3
 80033ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e078      	b.n	80034b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1e8      	bne.n	80033a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	4b38      	ldr	r3, [pc, #224]	@ (80034bc <HAL_DMA_Init+0x158>)
 80033dc:	4013      	ands	r3, r2
 80033de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003406:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	4313      	orrs	r3, r2
 8003412:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003418:	2b04      	cmp	r3, #4
 800341a:	d107      	bne.n	800342c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003424:	4313      	orrs	r3, r2
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	4313      	orrs	r3, r2
 800342a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	f023 0307 	bic.w	r3, r3, #7
 8003442:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	4313      	orrs	r3, r2
 800344c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003452:	2b04      	cmp	r3, #4
 8003454:	d117      	bne.n	8003486 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	4313      	orrs	r3, r2
 800345e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00e      	beq.n	8003486 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 fa77 	bl	800395c <DMA_CheckFifoParam>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d008      	beq.n	8003486 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2240      	movs	r2, #64	@ 0x40
 8003478:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003482:	2301      	movs	r3, #1
 8003484:	e016      	b.n	80034b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 fa2e 	bl	80038f0 <DMA_CalcBaseAndBitshift>
 8003494:	4603      	mov	r3, r0
 8003496:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800349c:	223f      	movs	r2, #63	@ 0x3f
 800349e:	409a      	lsls	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3718      	adds	r7, #24
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	e010803f 	.word	0xe010803f

080034c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
 80034cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034ce:	2300      	movs	r3, #0
 80034d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d101      	bne.n	80034e6 <HAL_DMA_Start_IT+0x26>
 80034e2:	2302      	movs	r3, #2
 80034e4:	e048      	b.n	8003578 <HAL_DMA_Start_IT+0xb8>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d137      	bne.n	800356a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2202      	movs	r2, #2
 80034fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	68b9      	ldr	r1, [r7, #8]
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 f9c0 	bl	8003894 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003518:	223f      	movs	r2, #63	@ 0x3f
 800351a:	409a      	lsls	r2, r3
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 0216 	orr.w	r2, r2, #22
 800352e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	695a      	ldr	r2, [r3, #20]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800353e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003544:	2b00      	cmp	r3, #0
 8003546:	d007      	beq.n	8003558 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f042 0208 	orr.w	r2, r2, #8
 8003556:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0201 	orr.w	r2, r2, #1
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	e005      	b.n	8003576 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003572:	2302      	movs	r3, #2
 8003574:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003576:	7dfb      	ldrb	r3, [r7, #23]
}
 8003578:	4618      	mov	r0, r3
 800357a:	3718      	adds	r7, #24
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003588:	2300      	movs	r3, #0
 800358a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800358c:	4b8e      	ldr	r3, [pc, #568]	@ (80037c8 <HAL_DMA_IRQHandler+0x248>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a8e      	ldr	r2, [pc, #568]	@ (80037cc <HAL_DMA_IRQHandler+0x24c>)
 8003592:	fba2 2303 	umull	r2, r3, r2, r3
 8003596:	0a9b      	lsrs	r3, r3, #10
 8003598:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800359e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035aa:	2208      	movs	r2, #8
 80035ac:	409a      	lsls	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	4013      	ands	r3, r2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d01a      	beq.n	80035ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d013      	beq.n	80035ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0204 	bic.w	r2, r2, #4
 80035d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035d8:	2208      	movs	r2, #8
 80035da:	409a      	lsls	r2, r3
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e4:	f043 0201 	orr.w	r2, r3, #1
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035f0:	2201      	movs	r2, #1
 80035f2:	409a      	lsls	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	4013      	ands	r3, r2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d012      	beq.n	8003622 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00b      	beq.n	8003622 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800360e:	2201      	movs	r2, #1
 8003610:	409a      	lsls	r2, r3
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800361a:	f043 0202 	orr.w	r2, r3, #2
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003626:	2204      	movs	r2, #4
 8003628:	409a      	lsls	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	4013      	ands	r3, r2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d012      	beq.n	8003658 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00b      	beq.n	8003658 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003644:	2204      	movs	r2, #4
 8003646:	409a      	lsls	r2, r3
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003650:	f043 0204 	orr.w	r2, r3, #4
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800365c:	2210      	movs	r2, #16
 800365e:	409a      	lsls	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	4013      	ands	r3, r2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d043      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0308 	and.w	r3, r3, #8
 8003672:	2b00      	cmp	r3, #0
 8003674:	d03c      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800367a:	2210      	movs	r2, #16
 800367c:	409a      	lsls	r2, r3
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d018      	beq.n	80036c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d108      	bne.n	80036b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d024      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	4798      	blx	r3
 80036ae:	e01f      	b.n	80036f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d01b      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	4798      	blx	r3
 80036c0:	e016      	b.n	80036f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d107      	bne.n	80036e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 0208 	bic.w	r2, r2, #8
 80036de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d003      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036f4:	2220      	movs	r2, #32
 80036f6:	409a      	lsls	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4013      	ands	r3, r2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 808f 	beq.w	8003820 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0310 	and.w	r3, r3, #16
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 8087 	beq.w	8003820 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003716:	2220      	movs	r2, #32
 8003718:	409a      	lsls	r2, r3
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b05      	cmp	r3, #5
 8003728:	d136      	bne.n	8003798 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0216 	bic.w	r2, r2, #22
 8003738:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	695a      	ldr	r2, [r3, #20]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003748:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374e:	2b00      	cmp	r3, #0
 8003750:	d103      	bne.n	800375a <HAL_DMA_IRQHandler+0x1da>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003756:	2b00      	cmp	r3, #0
 8003758:	d007      	beq.n	800376a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 0208 	bic.w	r2, r2, #8
 8003768:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800376e:	223f      	movs	r2, #63	@ 0x3f
 8003770:	409a      	lsls	r2, r3
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800378a:	2b00      	cmp	r3, #0
 800378c:	d07e      	beq.n	800388c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	4798      	blx	r3
        }
        return;
 8003796:	e079      	b.n	800388c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d01d      	beq.n	80037e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10d      	bne.n	80037d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d031      	beq.n	8003820 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	4798      	blx	r3
 80037c4:	e02c      	b.n	8003820 <HAL_DMA_IRQHandler+0x2a0>
 80037c6:	bf00      	nop
 80037c8:	20000018 	.word	0x20000018
 80037cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d023      	beq.n	8003820 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	4798      	blx	r3
 80037e0:	e01e      	b.n	8003820 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10f      	bne.n	8003810 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0210 	bic.w	r2, r2, #16
 80037fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003814:	2b00      	cmp	r3, #0
 8003816:	d003      	beq.n	8003820 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003824:	2b00      	cmp	r3, #0
 8003826:	d032      	beq.n	800388e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b00      	cmp	r3, #0
 8003832:	d022      	beq.n	800387a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2205      	movs	r2, #5
 8003838:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0201 	bic.w	r2, r2, #1
 800384a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	3301      	adds	r3, #1
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	429a      	cmp	r2, r3
 8003856:	d307      	bcc.n	8003868 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1f2      	bne.n	800384c <HAL_DMA_IRQHandler+0x2cc>
 8003866:	e000      	b.n	800386a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003868:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800387e:	2b00      	cmp	r3, #0
 8003880:	d005      	beq.n	800388e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	4798      	blx	r3
 800388a:	e000      	b.n	800388e <HAL_DMA_IRQHandler+0x30e>
        return;
 800388c:	bf00      	nop
    }
  }
}
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
 80038a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80038b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	2b40      	cmp	r3, #64	@ 0x40
 80038c0:	d108      	bne.n	80038d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80038d2:	e007      	b.n	80038e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	60da      	str	r2, [r3, #12]
}
 80038e4:	bf00      	nop
 80038e6:	3714      	adds	r7, #20
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	3b10      	subs	r3, #16
 8003900:	4a13      	ldr	r2, [pc, #76]	@ (8003950 <DMA_CalcBaseAndBitshift+0x60>)
 8003902:	fba2 2303 	umull	r2, r3, r2, r3
 8003906:	091b      	lsrs	r3, r3, #4
 8003908:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800390a:	4a12      	ldr	r2, [pc, #72]	@ (8003954 <DMA_CalcBaseAndBitshift+0x64>)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	4413      	add	r3, r2
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	461a      	mov	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2b03      	cmp	r3, #3
 800391c:	d908      	bls.n	8003930 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	461a      	mov	r2, r3
 8003924:	4b0c      	ldr	r3, [pc, #48]	@ (8003958 <DMA_CalcBaseAndBitshift+0x68>)
 8003926:	4013      	ands	r3, r2
 8003928:	1d1a      	adds	r2, r3, #4
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	659a      	str	r2, [r3, #88]	@ 0x58
 800392e:	e006      	b.n	800393e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	461a      	mov	r2, r3
 8003936:	4b08      	ldr	r3, [pc, #32]	@ (8003958 <DMA_CalcBaseAndBitshift+0x68>)
 8003938:	4013      	ands	r3, r2
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003942:	4618      	mov	r0, r3
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	aaaaaaab 	.word	0xaaaaaaab
 8003954:	08006aa0 	.word	0x08006aa0
 8003958:	fffffc00 	.word	0xfffffc00

0800395c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003964:	2300      	movs	r3, #0
 8003966:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800396c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d11f      	bne.n	80039b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	2b03      	cmp	r3, #3
 800397a:	d856      	bhi.n	8003a2a <DMA_CheckFifoParam+0xce>
 800397c:	a201      	add	r2, pc, #4	@ (adr r2, 8003984 <DMA_CheckFifoParam+0x28>)
 800397e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003982:	bf00      	nop
 8003984:	08003995 	.word	0x08003995
 8003988:	080039a7 	.word	0x080039a7
 800398c:	08003995 	.word	0x08003995
 8003990:	08003a2b 	.word	0x08003a2b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003998:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d046      	beq.n	8003a2e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039a4:	e043      	b.n	8003a2e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039aa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80039ae:	d140      	bne.n	8003a32 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039b4:	e03d      	b.n	8003a32 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039be:	d121      	bne.n	8003a04 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	2b03      	cmp	r3, #3
 80039c4:	d837      	bhi.n	8003a36 <DMA_CheckFifoParam+0xda>
 80039c6:	a201      	add	r2, pc, #4	@ (adr r2, 80039cc <DMA_CheckFifoParam+0x70>)
 80039c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039cc:	080039dd 	.word	0x080039dd
 80039d0:	080039e3 	.word	0x080039e3
 80039d4:	080039dd 	.word	0x080039dd
 80039d8:	080039f5 	.word	0x080039f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	73fb      	strb	r3, [r7, #15]
      break;
 80039e0:	e030      	b.n	8003a44 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d025      	beq.n	8003a3a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039f2:	e022      	b.n	8003a3a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80039fc:	d11f      	bne.n	8003a3e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a02:	e01c      	b.n	8003a3e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d903      	bls.n	8003a12 <DMA_CheckFifoParam+0xb6>
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	2b03      	cmp	r3, #3
 8003a0e:	d003      	beq.n	8003a18 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a10:	e018      	b.n	8003a44 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	73fb      	strb	r3, [r7, #15]
      break;
 8003a16:	e015      	b.n	8003a44 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00e      	beq.n	8003a42 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	73fb      	strb	r3, [r7, #15]
      break;
 8003a28:	e00b      	b.n	8003a42 <DMA_CheckFifoParam+0xe6>
      break;
 8003a2a:	bf00      	nop
 8003a2c:	e00a      	b.n	8003a44 <DMA_CheckFifoParam+0xe8>
      break;
 8003a2e:	bf00      	nop
 8003a30:	e008      	b.n	8003a44 <DMA_CheckFifoParam+0xe8>
      break;
 8003a32:	bf00      	nop
 8003a34:	e006      	b.n	8003a44 <DMA_CheckFifoParam+0xe8>
      break;
 8003a36:	bf00      	nop
 8003a38:	e004      	b.n	8003a44 <DMA_CheckFifoParam+0xe8>
      break;
 8003a3a:	bf00      	nop
 8003a3c:	e002      	b.n	8003a44 <DMA_CheckFifoParam+0xe8>
      break;   
 8003a3e:	bf00      	nop
 8003a40:	e000      	b.n	8003a44 <DMA_CheckFifoParam+0xe8>
      break;
 8003a42:	bf00      	nop
    }
  } 
  
  return status; 
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3714      	adds	r7, #20
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop

08003a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b089      	sub	sp, #36	@ 0x24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003a62:	2300      	movs	r3, #0
 8003a64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003a66:	2300      	movs	r3, #0
 8003a68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003a6e:	2300      	movs	r3, #0
 8003a70:	61fb      	str	r3, [r7, #28]
 8003a72:	e175      	b.n	8003d60 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003a74:	2201      	movs	r2, #1
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	4013      	ands	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	f040 8164 	bne.w	8003d5a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d005      	beq.n	8003aaa <HAL_GPIO_Init+0x56>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f003 0303 	and.w	r3, r3, #3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d130      	bne.n	8003b0c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	2203      	movs	r2, #3
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	43db      	mvns	r3, r3
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	68da      	ldr	r2, [r3, #12]
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	4013      	ands	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	091b      	lsrs	r3, r3, #4
 8003af6:	f003 0201 	and.w	r2, r3, #1
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f003 0303 	and.w	r3, r3, #3
 8003b14:	2b03      	cmp	r3, #3
 8003b16:	d017      	beq.n	8003b48 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	2203      	movs	r2, #3
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	43db      	mvns	r3, r3
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f003 0303 	and.w	r3, r3, #3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d123      	bne.n	8003b9c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	08da      	lsrs	r2, r3, #3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3208      	adds	r2, #8
 8003b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	f003 0307 	and.w	r3, r3, #7
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	220f      	movs	r2, #15
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	43db      	mvns	r3, r3
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	4013      	ands	r3, r2
 8003b76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	691a      	ldr	r2, [r3, #16]
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	08da      	lsrs	r2, r3, #3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	3208      	adds	r2, #8
 8003b96:	69b9      	ldr	r1, [r7, #24]
 8003b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	2203      	movs	r2, #3
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	43db      	mvns	r3, r3
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f003 0203 	and.w	r2, r3, #3
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 80be 	beq.w	8003d5a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bde:	4b66      	ldr	r3, [pc, #408]	@ (8003d78 <HAL_GPIO_Init+0x324>)
 8003be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be2:	4a65      	ldr	r2, [pc, #404]	@ (8003d78 <HAL_GPIO_Init+0x324>)
 8003be4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003be8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bea:	4b63      	ldr	r3, [pc, #396]	@ (8003d78 <HAL_GPIO_Init+0x324>)
 8003bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bf2:	60fb      	str	r3, [r7, #12]
 8003bf4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003bf6:	4a61      	ldr	r2, [pc, #388]	@ (8003d7c <HAL_GPIO_Init+0x328>)
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	089b      	lsrs	r3, r3, #2
 8003bfc:	3302      	adds	r3, #2
 8003bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	f003 0303 	and.w	r3, r3, #3
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	220f      	movs	r2, #15
 8003c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c12:	43db      	mvns	r3, r3
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	4013      	ands	r3, r2
 8003c18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a58      	ldr	r2, [pc, #352]	@ (8003d80 <HAL_GPIO_Init+0x32c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d037      	beq.n	8003c92 <HAL_GPIO_Init+0x23e>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a57      	ldr	r2, [pc, #348]	@ (8003d84 <HAL_GPIO_Init+0x330>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d031      	beq.n	8003c8e <HAL_GPIO_Init+0x23a>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a56      	ldr	r2, [pc, #344]	@ (8003d88 <HAL_GPIO_Init+0x334>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d02b      	beq.n	8003c8a <HAL_GPIO_Init+0x236>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a55      	ldr	r2, [pc, #340]	@ (8003d8c <HAL_GPIO_Init+0x338>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d025      	beq.n	8003c86 <HAL_GPIO_Init+0x232>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a54      	ldr	r2, [pc, #336]	@ (8003d90 <HAL_GPIO_Init+0x33c>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d01f      	beq.n	8003c82 <HAL_GPIO_Init+0x22e>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a53      	ldr	r2, [pc, #332]	@ (8003d94 <HAL_GPIO_Init+0x340>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d019      	beq.n	8003c7e <HAL_GPIO_Init+0x22a>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a52      	ldr	r2, [pc, #328]	@ (8003d98 <HAL_GPIO_Init+0x344>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d013      	beq.n	8003c7a <HAL_GPIO_Init+0x226>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a51      	ldr	r2, [pc, #324]	@ (8003d9c <HAL_GPIO_Init+0x348>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d00d      	beq.n	8003c76 <HAL_GPIO_Init+0x222>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a50      	ldr	r2, [pc, #320]	@ (8003da0 <HAL_GPIO_Init+0x34c>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d007      	beq.n	8003c72 <HAL_GPIO_Init+0x21e>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a4f      	ldr	r2, [pc, #316]	@ (8003da4 <HAL_GPIO_Init+0x350>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d101      	bne.n	8003c6e <HAL_GPIO_Init+0x21a>
 8003c6a:	2309      	movs	r3, #9
 8003c6c:	e012      	b.n	8003c94 <HAL_GPIO_Init+0x240>
 8003c6e:	230a      	movs	r3, #10
 8003c70:	e010      	b.n	8003c94 <HAL_GPIO_Init+0x240>
 8003c72:	2308      	movs	r3, #8
 8003c74:	e00e      	b.n	8003c94 <HAL_GPIO_Init+0x240>
 8003c76:	2307      	movs	r3, #7
 8003c78:	e00c      	b.n	8003c94 <HAL_GPIO_Init+0x240>
 8003c7a:	2306      	movs	r3, #6
 8003c7c:	e00a      	b.n	8003c94 <HAL_GPIO_Init+0x240>
 8003c7e:	2305      	movs	r3, #5
 8003c80:	e008      	b.n	8003c94 <HAL_GPIO_Init+0x240>
 8003c82:	2304      	movs	r3, #4
 8003c84:	e006      	b.n	8003c94 <HAL_GPIO_Init+0x240>
 8003c86:	2303      	movs	r3, #3
 8003c88:	e004      	b.n	8003c94 <HAL_GPIO_Init+0x240>
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	e002      	b.n	8003c94 <HAL_GPIO_Init+0x240>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e000      	b.n	8003c94 <HAL_GPIO_Init+0x240>
 8003c92:	2300      	movs	r3, #0
 8003c94:	69fa      	ldr	r2, [r7, #28]
 8003c96:	f002 0203 	and.w	r2, r2, #3
 8003c9a:	0092      	lsls	r2, r2, #2
 8003c9c:	4093      	lsls	r3, r2
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003ca4:	4935      	ldr	r1, [pc, #212]	@ (8003d7c <HAL_GPIO_Init+0x328>)
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	089b      	lsrs	r3, r3, #2
 8003caa:	3302      	adds	r3, #2
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cb2:	4b3d      	ldr	r3, [pc, #244]	@ (8003da8 <HAL_GPIO_Init+0x354>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	43db      	mvns	r3, r3
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cd6:	4a34      	ldr	r2, [pc, #208]	@ (8003da8 <HAL_GPIO_Init+0x354>)
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cdc:	4b32      	ldr	r3, [pc, #200]	@ (8003da8 <HAL_GPIO_Init+0x354>)
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	43db      	mvns	r3, r3
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d003      	beq.n	8003d00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d00:	4a29      	ldr	r2, [pc, #164]	@ (8003da8 <HAL_GPIO_Init+0x354>)
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d06:	4b28      	ldr	r3, [pc, #160]	@ (8003da8 <HAL_GPIO_Init+0x354>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	4013      	ands	r3, r2
 8003d14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d2a:	4a1f      	ldr	r2, [pc, #124]	@ (8003da8 <HAL_GPIO_Init+0x354>)
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d30:	4b1d      	ldr	r3, [pc, #116]	@ (8003da8 <HAL_GPIO_Init+0x354>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	43db      	mvns	r3, r3
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d003      	beq.n	8003d54 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d54:	4a14      	ldr	r2, [pc, #80]	@ (8003da8 <HAL_GPIO_Init+0x354>)
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	61fb      	str	r3, [r7, #28]
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	2b0f      	cmp	r3, #15
 8003d64:	f67f ae86 	bls.w	8003a74 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003d68:	bf00      	nop
 8003d6a:	bf00      	nop
 8003d6c:	3724      	adds	r7, #36	@ 0x24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	40023800 	.word	0x40023800
 8003d7c:	40013800 	.word	0x40013800
 8003d80:	40020000 	.word	0x40020000
 8003d84:	40020400 	.word	0x40020400
 8003d88:	40020800 	.word	0x40020800
 8003d8c:	40020c00 	.word	0x40020c00
 8003d90:	40021000 	.word	0x40021000
 8003d94:	40021400 	.word	0x40021400
 8003d98:	40021800 	.word	0x40021800
 8003d9c:	40021c00 	.word	0x40021c00
 8003da0:	40022000 	.word	0x40022000
 8003da4:	40022400 	.word	0x40022400
 8003da8:	40013c00 	.word	0x40013c00

08003dac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	460b      	mov	r3, r1
 8003db6:	807b      	strh	r3, [r7, #2]
 8003db8:	4613      	mov	r3, r2
 8003dba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003dbc:	787b      	ldrb	r3, [r7, #1]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dc2:	887a      	ldrh	r2, [r7, #2]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003dc8:	e003      	b.n	8003dd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003dca:	887b      	ldrh	r3, [r7, #2]
 8003dcc:	041a      	lsls	r2, r3, #16
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	619a      	str	r2, [r3, #24]
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
	...

08003de0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e07f      	b.n	8003ef2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d106      	bne.n	8003e0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7fd fad6 	bl	80013b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2224      	movs	r2, #36	@ 0x24
 8003e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 0201 	bic.w	r2, r2, #1
 8003e22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003e30:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e40:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d107      	bne.n	8003e5a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	689a      	ldr	r2, [r3, #8]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e56:	609a      	str	r2, [r3, #8]
 8003e58:	e006      	b.n	8003e68 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689a      	ldr	r2, [r3, #8]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003e66:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d104      	bne.n	8003e7a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e78:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6859      	ldr	r1, [r3, #4]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	4b1d      	ldr	r3, [pc, #116]	@ (8003efc <HAL_I2C_Init+0x11c>)
 8003e86:	430b      	orrs	r3, r1
 8003e88:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68da      	ldr	r2, [r3, #12]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e98:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691a      	ldr	r2, [r3, #16]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	69d9      	ldr	r1, [r3, #28]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a1a      	ldr	r2, [r3, #32]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 0201 	orr.w	r2, r2, #1
 8003ed2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2220      	movs	r2, #32
 8003ede:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	02008000 	.word	0x02008000

08003f00 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b20      	cmp	r3, #32
 8003f14:	d138      	bne.n	8003f88 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d101      	bne.n	8003f24 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f20:	2302      	movs	r3, #2
 8003f22:	e032      	b.n	8003f8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2224      	movs	r2, #36	@ 0x24
 8003f30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 0201 	bic.w	r2, r2, #1
 8003f42:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003f52:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	6819      	ldr	r1, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	430a      	orrs	r2, r1
 8003f62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f042 0201 	orr.w	r2, r2, #1
 8003f72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f84:	2300      	movs	r3, #0
 8003f86:	e000      	b.n	8003f8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f88:	2302      	movs	r3, #2
  }
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b085      	sub	sp, #20
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
 8003f9e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b20      	cmp	r3, #32
 8003faa:	d139      	bne.n	8004020 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d101      	bne.n	8003fba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	e033      	b.n	8004022 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2224      	movs	r2, #36	@ 0x24
 8003fc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0201 	bic.w	r2, r2, #1
 8003fd8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003fe8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	021b      	lsls	r3, r3, #8
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0201 	orr.w	r2, r2, #1
 800400a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2220      	movs	r2, #32
 8004010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800401c:	2300      	movs	r3, #0
 800401e:	e000      	b.n	8004022 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004020:	2302      	movs	r3, #2
  }
}
 8004022:	4618      	mov	r0, r3
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
	...

08004030 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004036:	2300      	movs	r3, #0
 8004038:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800403a:	4b23      	ldr	r3, [pc, #140]	@ (80040c8 <HAL_PWREx_EnableOverDrive+0x98>)
 800403c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403e:	4a22      	ldr	r2, [pc, #136]	@ (80040c8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004040:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004044:	6413      	str	r3, [r2, #64]	@ 0x40
 8004046:	4b20      	ldr	r3, [pc, #128]	@ (80040c8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800404e:	603b      	str	r3, [r7, #0]
 8004050:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004052:	4b1e      	ldr	r3, [pc, #120]	@ (80040cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a1d      	ldr	r2, [pc, #116]	@ (80040cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004058:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800405c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800405e:	f7fe f823 	bl	80020a8 <HAL_GetTick>
 8004062:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004064:	e009      	b.n	800407a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004066:	f7fe f81f 	bl	80020a8 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004074:	d901      	bls.n	800407a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e022      	b.n	80040c0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800407a:	4b14      	ldr	r3, [pc, #80]	@ (80040cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004082:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004086:	d1ee      	bne.n	8004066 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004088:	4b10      	ldr	r3, [pc, #64]	@ (80040cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a0f      	ldr	r2, [pc, #60]	@ (80040cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800408e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004092:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004094:	f7fe f808 	bl	80020a8 <HAL_GetTick>
 8004098:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800409a:	e009      	b.n	80040b0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800409c:	f7fe f804 	bl	80020a8 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80040aa:	d901      	bls.n	80040b0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e007      	b.n	80040c0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80040b0:	4b06      	ldr	r3, [pc, #24]	@ (80040cc <HAL_PWREx_EnableOverDrive+0x9c>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040bc:	d1ee      	bne.n	800409c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3708      	adds	r7, #8
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	40023800 	.word	0x40023800
 80040cc:	40007000 	.word	0x40007000

080040d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80040d8:	2300      	movs	r3, #0
 80040da:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e29b      	b.n	800461e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 8087 	beq.w	8004202 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80040f4:	4b96      	ldr	r3, [pc, #600]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f003 030c 	and.w	r3, r3, #12
 80040fc:	2b04      	cmp	r3, #4
 80040fe:	d00c      	beq.n	800411a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004100:	4b93      	ldr	r3, [pc, #588]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f003 030c 	and.w	r3, r3, #12
 8004108:	2b08      	cmp	r3, #8
 800410a:	d112      	bne.n	8004132 <HAL_RCC_OscConfig+0x62>
 800410c:	4b90      	ldr	r3, [pc, #576]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004114:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004118:	d10b      	bne.n	8004132 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800411a:	4b8d      	ldr	r3, [pc, #564]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d06c      	beq.n	8004200 <HAL_RCC_OscConfig+0x130>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d168      	bne.n	8004200 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e275      	b.n	800461e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800413a:	d106      	bne.n	800414a <HAL_RCC_OscConfig+0x7a>
 800413c:	4b84      	ldr	r3, [pc, #528]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a83      	ldr	r2, [pc, #524]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 8004142:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004146:	6013      	str	r3, [r2, #0]
 8004148:	e02e      	b.n	80041a8 <HAL_RCC_OscConfig+0xd8>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10c      	bne.n	800416c <HAL_RCC_OscConfig+0x9c>
 8004152:	4b7f      	ldr	r3, [pc, #508]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a7e      	ldr	r2, [pc, #504]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 8004158:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800415c:	6013      	str	r3, [r2, #0]
 800415e:	4b7c      	ldr	r3, [pc, #496]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a7b      	ldr	r2, [pc, #492]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 8004164:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004168:	6013      	str	r3, [r2, #0]
 800416a:	e01d      	b.n	80041a8 <HAL_RCC_OscConfig+0xd8>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004174:	d10c      	bne.n	8004190 <HAL_RCC_OscConfig+0xc0>
 8004176:	4b76      	ldr	r3, [pc, #472]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a75      	ldr	r2, [pc, #468]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 800417c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004180:	6013      	str	r3, [r2, #0]
 8004182:	4b73      	ldr	r3, [pc, #460]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a72      	ldr	r2, [pc, #456]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 8004188:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800418c:	6013      	str	r3, [r2, #0]
 800418e:	e00b      	b.n	80041a8 <HAL_RCC_OscConfig+0xd8>
 8004190:	4b6f      	ldr	r3, [pc, #444]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a6e      	ldr	r2, [pc, #440]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 8004196:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800419a:	6013      	str	r3, [r2, #0]
 800419c:	4b6c      	ldr	r3, [pc, #432]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a6b      	ldr	r2, [pc, #428]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 80041a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d013      	beq.n	80041d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b0:	f7fd ff7a 	bl	80020a8 <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041b8:	f7fd ff76 	bl	80020a8 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b64      	cmp	r3, #100	@ 0x64
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e229      	b.n	800461e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ca:	4b61      	ldr	r3, [pc, #388]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d0f0      	beq.n	80041b8 <HAL_RCC_OscConfig+0xe8>
 80041d6:	e014      	b.n	8004202 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d8:	f7fd ff66 	bl	80020a8 <HAL_GetTick>
 80041dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041de:	e008      	b.n	80041f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041e0:	f7fd ff62 	bl	80020a8 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b64      	cmp	r3, #100	@ 0x64
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e215      	b.n	800461e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041f2:	4b57      	ldr	r3, [pc, #348]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1f0      	bne.n	80041e0 <HAL_RCC_OscConfig+0x110>
 80041fe:	e000      	b.n	8004202 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004200:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d069      	beq.n	80042e2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800420e:	4b50      	ldr	r3, [pc, #320]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 030c 	and.w	r3, r3, #12
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00b      	beq.n	8004232 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800421a:	4b4d      	ldr	r3, [pc, #308]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f003 030c 	and.w	r3, r3, #12
 8004222:	2b08      	cmp	r3, #8
 8004224:	d11c      	bne.n	8004260 <HAL_RCC_OscConfig+0x190>
 8004226:	4b4a      	ldr	r3, [pc, #296]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d116      	bne.n	8004260 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004232:	4b47      	ldr	r3, [pc, #284]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d005      	beq.n	800424a <HAL_RCC_OscConfig+0x17a>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d001      	beq.n	800424a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e1e9      	b.n	800461e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800424a:	4b41      	ldr	r3, [pc, #260]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	493d      	ldr	r1, [pc, #244]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 800425a:	4313      	orrs	r3, r2
 800425c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800425e:	e040      	b.n	80042e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d023      	beq.n	80042b0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004268:	4b39      	ldr	r3, [pc, #228]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a38      	ldr	r2, [pc, #224]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 800426e:	f043 0301 	orr.w	r3, r3, #1
 8004272:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004274:	f7fd ff18 	bl	80020a8 <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800427c:	f7fd ff14 	bl	80020a8 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e1c7      	b.n	800461e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800428e:	4b30      	ldr	r3, [pc, #192]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d0f0      	beq.n	800427c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800429a:	4b2d      	ldr	r3, [pc, #180]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	4929      	ldr	r1, [pc, #164]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	600b      	str	r3, [r1, #0]
 80042ae:	e018      	b.n	80042e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042b0:	4b27      	ldr	r3, [pc, #156]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a26      	ldr	r2, [pc, #152]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 80042b6:	f023 0301 	bic.w	r3, r3, #1
 80042ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042bc:	f7fd fef4 	bl	80020a8 <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042c2:	e008      	b.n	80042d6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042c4:	f7fd fef0 	bl	80020a8 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e1a3      	b.n	800461e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042d6:	4b1e      	ldr	r3, [pc, #120]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1f0      	bne.n	80042c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0308 	and.w	r3, r3, #8
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d038      	beq.n	8004360 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d019      	beq.n	800432a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042f6:	4b16      	ldr	r3, [pc, #88]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 80042f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042fa:	4a15      	ldr	r2, [pc, #84]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 80042fc:	f043 0301 	orr.w	r3, r3, #1
 8004300:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004302:	f7fd fed1 	bl	80020a8 <HAL_GetTick>
 8004306:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004308:	e008      	b.n	800431c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800430a:	f7fd fecd 	bl	80020a8 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e180      	b.n	800461e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800431c:	4b0c      	ldr	r3, [pc, #48]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 800431e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d0f0      	beq.n	800430a <HAL_RCC_OscConfig+0x23a>
 8004328:	e01a      	b.n	8004360 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800432a:	4b09      	ldr	r3, [pc, #36]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 800432c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800432e:	4a08      	ldr	r2, [pc, #32]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 8004330:	f023 0301 	bic.w	r3, r3, #1
 8004334:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004336:	f7fd feb7 	bl	80020a8 <HAL_GetTick>
 800433a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800433c:	e00a      	b.n	8004354 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800433e:	f7fd feb3 	bl	80020a8 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	d903      	bls.n	8004354 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e166      	b.n	800461e <HAL_RCC_OscConfig+0x54e>
 8004350:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004354:	4b92      	ldr	r3, [pc, #584]	@ (80045a0 <HAL_RCC_OscConfig+0x4d0>)
 8004356:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1ee      	bne.n	800433e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 80a4 	beq.w	80044b6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800436e:	4b8c      	ldr	r3, [pc, #560]	@ (80045a0 <HAL_RCC_OscConfig+0x4d0>)
 8004370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004372:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10d      	bne.n	8004396 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800437a:	4b89      	ldr	r3, [pc, #548]	@ (80045a0 <HAL_RCC_OscConfig+0x4d0>)
 800437c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437e:	4a88      	ldr	r2, [pc, #544]	@ (80045a0 <HAL_RCC_OscConfig+0x4d0>)
 8004380:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004384:	6413      	str	r3, [r2, #64]	@ 0x40
 8004386:	4b86      	ldr	r3, [pc, #536]	@ (80045a0 <HAL_RCC_OscConfig+0x4d0>)
 8004388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800438e:	60bb      	str	r3, [r7, #8]
 8004390:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004392:	2301      	movs	r3, #1
 8004394:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004396:	4b83      	ldr	r3, [pc, #524]	@ (80045a4 <HAL_RCC_OscConfig+0x4d4>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d118      	bne.n	80043d4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80043a2:	4b80      	ldr	r3, [pc, #512]	@ (80045a4 <HAL_RCC_OscConfig+0x4d4>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a7f      	ldr	r2, [pc, #508]	@ (80045a4 <HAL_RCC_OscConfig+0x4d4>)
 80043a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ae:	f7fd fe7b 	bl	80020a8 <HAL_GetTick>
 80043b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043b4:	e008      	b.n	80043c8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043b6:	f7fd fe77 	bl	80020a8 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b64      	cmp	r3, #100	@ 0x64
 80043c2:	d901      	bls.n	80043c8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e12a      	b.n	800461e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043c8:	4b76      	ldr	r3, [pc, #472]	@ (80045a4 <HAL_RCC_OscConfig+0x4d4>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0f0      	beq.n	80043b6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d106      	bne.n	80043ea <HAL_RCC_OscConfig+0x31a>
 80043dc:	4b70      	ldr	r3, [pc, #448]	@ (80045a0 <HAL_RCC_OscConfig+0x4d0>)
 80043de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043e0:	4a6f      	ldr	r2, [pc, #444]	@ (80045a0 <HAL_RCC_OscConfig+0x4d0>)
 80043e2:	f043 0301 	orr.w	r3, r3, #1
 80043e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80043e8:	e02d      	b.n	8004446 <HAL_RCC_OscConfig+0x376>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10c      	bne.n	800440c <HAL_RCC_OscConfig+0x33c>
 80043f2:	4b6b      	ldr	r3, [pc, #428]	@ (80045a0 <HAL_RCC_OscConfig+0x4d0>)
 80043f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043f6:	4a6a      	ldr	r2, [pc, #424]	@ (80045a0 <HAL_RCC_OscConfig+0x4d0>)
 80043f8:	f023 0301 	bic.w	r3, r3, #1
 80043fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80043fe:	4b68      	ldr	r3, [pc, #416]	@ (80045a0 <HAL_RCC_OscConfig+0x4d0>)
 8004400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004402:	4a67      	ldr	r2, [pc, #412]	@ (80045a0 <HAL_RCC_OscConfig+0x4d0>)
 8004404:	f023 0304 	bic.w	r3, r3, #4
 8004408:	6713      	str	r3, [r2, #112]	@ 0x70
 800440a:	e01c      	b.n	8004446 <HAL_RCC_OscConfig+0x376>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	2b05      	cmp	r3, #5
 8004412:	d10c      	bne.n	800442e <HAL_RCC_OscConfig+0x35e>
 8004414:	4b62      	ldr	r3, [pc, #392]	@ (80045a0 <HAL_RCC_OscConfig+0x4d0>)
 8004416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004418:	4a61      	ldr	r2, [pc, #388]	@ (80045a0 <HAL_RCC_OscConfig+0x4d0>)
 800441a:	f043 0304 	orr.w	r3, r3, #4
 800441e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004420:	4b5f      	ldr	r3, [pc, #380]	@ (80045a0 <HAL_RCC_OscConfig+0x4d0>)
 8004422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004424:	4a5e      	ldr	r2, [pc, #376]	@ (80045a0 <HAL_RCC_OscConfig+0x4d0>)
 8004426:	f043 0301 	orr.w	r3, r3, #1
 800442a:	6713      	str	r3, [r2, #112]	@ 0x70
 800442c:	e00b      	b.n	8004446 <HAL_RCC_OscConfig+0x376>
 800442e:	4b5c      	ldr	r3, [pc, #368]	@ (80045a0 <HAL_RCC_OscConfig+0x4d0>)
 8004430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004432:	4a5b      	ldr	r2, [pc, #364]	@ (80045a0 <HAL_RCC_OscConfig+0x4d0>)
 8004434:	f023 0301 	bic.w	r3, r3, #1
 8004438:	6713      	str	r3, [r2, #112]	@ 0x70
 800443a:	4b59      	ldr	r3, [pc, #356]	@ (80045a0 <HAL_RCC_OscConfig+0x4d0>)
 800443c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800443e:	4a58      	ldr	r2, [pc, #352]	@ (80045a0 <HAL_RCC_OscConfig+0x4d0>)
 8004440:	f023 0304 	bic.w	r3, r3, #4
 8004444:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d015      	beq.n	800447a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800444e:	f7fd fe2b 	bl	80020a8 <HAL_GetTick>
 8004452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004454:	e00a      	b.n	800446c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004456:	f7fd fe27 	bl	80020a8 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004464:	4293      	cmp	r3, r2
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e0d8      	b.n	800461e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800446c:	4b4c      	ldr	r3, [pc, #304]	@ (80045a0 <HAL_RCC_OscConfig+0x4d0>)
 800446e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d0ee      	beq.n	8004456 <HAL_RCC_OscConfig+0x386>
 8004478:	e014      	b.n	80044a4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800447a:	f7fd fe15 	bl	80020a8 <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004480:	e00a      	b.n	8004498 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004482:	f7fd fe11 	bl	80020a8 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004490:	4293      	cmp	r3, r2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e0c2      	b.n	800461e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004498:	4b41      	ldr	r3, [pc, #260]	@ (80045a0 <HAL_RCC_OscConfig+0x4d0>)
 800449a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1ee      	bne.n	8004482 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044a4:	7dfb      	ldrb	r3, [r7, #23]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d105      	bne.n	80044b6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044aa:	4b3d      	ldr	r3, [pc, #244]	@ (80045a0 <HAL_RCC_OscConfig+0x4d0>)
 80044ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ae:	4a3c      	ldr	r2, [pc, #240]	@ (80045a0 <HAL_RCC_OscConfig+0x4d0>)
 80044b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044b4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f000 80ae 	beq.w	800461c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044c0:	4b37      	ldr	r3, [pc, #220]	@ (80045a0 <HAL_RCC_OscConfig+0x4d0>)
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f003 030c 	and.w	r3, r3, #12
 80044c8:	2b08      	cmp	r3, #8
 80044ca:	d06d      	beq.n	80045a8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d14b      	bne.n	800456c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044d4:	4b32      	ldr	r3, [pc, #200]	@ (80045a0 <HAL_RCC_OscConfig+0x4d0>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a31      	ldr	r2, [pc, #196]	@ (80045a0 <HAL_RCC_OscConfig+0x4d0>)
 80044da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e0:	f7fd fde2 	bl	80020a8 <HAL_GetTick>
 80044e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044e6:	e008      	b.n	80044fa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044e8:	f7fd fdde 	bl	80020a8 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e091      	b.n	800461e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044fa:	4b29      	ldr	r3, [pc, #164]	@ (80045a0 <HAL_RCC_OscConfig+0x4d0>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1f0      	bne.n	80044e8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	69da      	ldr	r2, [r3, #28]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	431a      	orrs	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004514:	019b      	lsls	r3, r3, #6
 8004516:	431a      	orrs	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800451c:	085b      	lsrs	r3, r3, #1
 800451e:	3b01      	subs	r3, #1
 8004520:	041b      	lsls	r3, r3, #16
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004528:	061b      	lsls	r3, r3, #24
 800452a:	431a      	orrs	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004530:	071b      	lsls	r3, r3, #28
 8004532:	491b      	ldr	r1, [pc, #108]	@ (80045a0 <HAL_RCC_OscConfig+0x4d0>)
 8004534:	4313      	orrs	r3, r2
 8004536:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004538:	4b19      	ldr	r3, [pc, #100]	@ (80045a0 <HAL_RCC_OscConfig+0x4d0>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a18      	ldr	r2, [pc, #96]	@ (80045a0 <HAL_RCC_OscConfig+0x4d0>)
 800453e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004542:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004544:	f7fd fdb0 	bl	80020a8 <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800454c:	f7fd fdac 	bl	80020a8 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b02      	cmp	r3, #2
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e05f      	b.n	800461e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800455e:	4b10      	ldr	r3, [pc, #64]	@ (80045a0 <HAL_RCC_OscConfig+0x4d0>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d0f0      	beq.n	800454c <HAL_RCC_OscConfig+0x47c>
 800456a:	e057      	b.n	800461c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800456c:	4b0c      	ldr	r3, [pc, #48]	@ (80045a0 <HAL_RCC_OscConfig+0x4d0>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a0b      	ldr	r2, [pc, #44]	@ (80045a0 <HAL_RCC_OscConfig+0x4d0>)
 8004572:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004578:	f7fd fd96 	bl	80020a8 <HAL_GetTick>
 800457c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004580:	f7fd fd92 	bl	80020a8 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e045      	b.n	800461e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004592:	4b03      	ldr	r3, [pc, #12]	@ (80045a0 <HAL_RCC_OscConfig+0x4d0>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1f0      	bne.n	8004580 <HAL_RCC_OscConfig+0x4b0>
 800459e:	e03d      	b.n	800461c <HAL_RCC_OscConfig+0x54c>
 80045a0:	40023800 	.word	0x40023800
 80045a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80045a8:	4b1f      	ldr	r3, [pc, #124]	@ (8004628 <HAL_RCC_OscConfig+0x558>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d030      	beq.n	8004618 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d129      	bne.n	8004618 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d122      	bne.n	8004618 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80045d8:	4013      	ands	r3, r2
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80045de:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d119      	bne.n	8004618 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ee:	085b      	lsrs	r3, r3, #1
 80045f0:	3b01      	subs	r3, #1
 80045f2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d10f      	bne.n	8004618 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004602:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004604:	429a      	cmp	r2, r3
 8004606:	d107      	bne.n	8004618 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004612:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004614:	429a      	cmp	r2, r3
 8004616:	d001      	beq.n	800461c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e000      	b.n	800461e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3718      	adds	r7, #24
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	40023800 	.word	0x40023800

0800462c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004636:	2300      	movs	r3, #0
 8004638:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e0d0      	b.n	80047e6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004644:	4b6a      	ldr	r3, [pc, #424]	@ (80047f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 030f 	and.w	r3, r3, #15
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	429a      	cmp	r2, r3
 8004650:	d910      	bls.n	8004674 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004652:	4b67      	ldr	r3, [pc, #412]	@ (80047f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f023 020f 	bic.w	r2, r3, #15
 800465a:	4965      	ldr	r1, [pc, #404]	@ (80047f0 <HAL_RCC_ClockConfig+0x1c4>)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	4313      	orrs	r3, r2
 8004660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004662:	4b63      	ldr	r3, [pc, #396]	@ (80047f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 030f 	and.w	r3, r3, #15
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	429a      	cmp	r2, r3
 800466e:	d001      	beq.n	8004674 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e0b8      	b.n	80047e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d020      	beq.n	80046c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b00      	cmp	r3, #0
 800468a:	d005      	beq.n	8004698 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800468c:	4b59      	ldr	r3, [pc, #356]	@ (80047f4 <HAL_RCC_ClockConfig+0x1c8>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	4a58      	ldr	r2, [pc, #352]	@ (80047f4 <HAL_RCC_ClockConfig+0x1c8>)
 8004692:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004696:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0308 	and.w	r3, r3, #8
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d005      	beq.n	80046b0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046a4:	4b53      	ldr	r3, [pc, #332]	@ (80047f4 <HAL_RCC_ClockConfig+0x1c8>)
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	4a52      	ldr	r2, [pc, #328]	@ (80047f4 <HAL_RCC_ClockConfig+0x1c8>)
 80046aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80046ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046b0:	4b50      	ldr	r3, [pc, #320]	@ (80047f4 <HAL_RCC_ClockConfig+0x1c8>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	494d      	ldr	r1, [pc, #308]	@ (80047f4 <HAL_RCC_ClockConfig+0x1c8>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d040      	beq.n	8004750 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d107      	bne.n	80046e6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046d6:	4b47      	ldr	r3, [pc, #284]	@ (80047f4 <HAL_RCC_ClockConfig+0x1c8>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d115      	bne.n	800470e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e07f      	b.n	80047e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d107      	bne.n	80046fe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ee:	4b41      	ldr	r3, [pc, #260]	@ (80047f4 <HAL_RCC_ClockConfig+0x1c8>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d109      	bne.n	800470e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e073      	b.n	80047e6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046fe:	4b3d      	ldr	r3, [pc, #244]	@ (80047f4 <HAL_RCC_ClockConfig+0x1c8>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e06b      	b.n	80047e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800470e:	4b39      	ldr	r3, [pc, #228]	@ (80047f4 <HAL_RCC_ClockConfig+0x1c8>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f023 0203 	bic.w	r2, r3, #3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	4936      	ldr	r1, [pc, #216]	@ (80047f4 <HAL_RCC_ClockConfig+0x1c8>)
 800471c:	4313      	orrs	r3, r2
 800471e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004720:	f7fd fcc2 	bl	80020a8 <HAL_GetTick>
 8004724:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004726:	e00a      	b.n	800473e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004728:	f7fd fcbe 	bl	80020a8 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004736:	4293      	cmp	r3, r2
 8004738:	d901      	bls.n	800473e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e053      	b.n	80047e6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800473e:	4b2d      	ldr	r3, [pc, #180]	@ (80047f4 <HAL_RCC_ClockConfig+0x1c8>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f003 020c 	and.w	r2, r3, #12
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	429a      	cmp	r2, r3
 800474e:	d1eb      	bne.n	8004728 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004750:	4b27      	ldr	r3, [pc, #156]	@ (80047f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 030f 	and.w	r3, r3, #15
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	429a      	cmp	r2, r3
 800475c:	d210      	bcs.n	8004780 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800475e:	4b24      	ldr	r3, [pc, #144]	@ (80047f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f023 020f 	bic.w	r2, r3, #15
 8004766:	4922      	ldr	r1, [pc, #136]	@ (80047f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	4313      	orrs	r3, r2
 800476c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800476e:	4b20      	ldr	r3, [pc, #128]	@ (80047f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 030f 	and.w	r3, r3, #15
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	429a      	cmp	r2, r3
 800477a:	d001      	beq.n	8004780 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e032      	b.n	80047e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b00      	cmp	r3, #0
 800478a:	d008      	beq.n	800479e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800478c:	4b19      	ldr	r3, [pc, #100]	@ (80047f4 <HAL_RCC_ClockConfig+0x1c8>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	4916      	ldr	r1, [pc, #88]	@ (80047f4 <HAL_RCC_ClockConfig+0x1c8>)
 800479a:	4313      	orrs	r3, r2
 800479c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0308 	and.w	r3, r3, #8
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d009      	beq.n	80047be <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80047aa:	4b12      	ldr	r3, [pc, #72]	@ (80047f4 <HAL_RCC_ClockConfig+0x1c8>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	00db      	lsls	r3, r3, #3
 80047b8:	490e      	ldr	r1, [pc, #56]	@ (80047f4 <HAL_RCC_ClockConfig+0x1c8>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80047be:	f000 f821 	bl	8004804 <HAL_RCC_GetSysClockFreq>
 80047c2:	4602      	mov	r2, r0
 80047c4:	4b0b      	ldr	r3, [pc, #44]	@ (80047f4 <HAL_RCC_ClockConfig+0x1c8>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	091b      	lsrs	r3, r3, #4
 80047ca:	f003 030f 	and.w	r3, r3, #15
 80047ce:	490a      	ldr	r1, [pc, #40]	@ (80047f8 <HAL_RCC_ClockConfig+0x1cc>)
 80047d0:	5ccb      	ldrb	r3, [r1, r3]
 80047d2:	fa22 f303 	lsr.w	r3, r2, r3
 80047d6:	4a09      	ldr	r2, [pc, #36]	@ (80047fc <HAL_RCC_ClockConfig+0x1d0>)
 80047d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80047da:	4b09      	ldr	r3, [pc, #36]	@ (8004800 <HAL_RCC_ClockConfig+0x1d4>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4618      	mov	r0, r3
 80047e0:	f7fd fc1e 	bl	8002020 <HAL_InitTick>

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	40023c00 	.word	0x40023c00
 80047f4:	40023800 	.word	0x40023800
 80047f8:	08006a90 	.word	0x08006a90
 80047fc:	20000018 	.word	0x20000018
 8004800:	2000001c 	.word	0x2000001c

08004804 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004808:	b090      	sub	sp, #64	@ 0x40
 800480a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800480c:	2300      	movs	r3, #0
 800480e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004810:	2300      	movs	r3, #0
 8004812:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004814:	2300      	movs	r3, #0
 8004816:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8004818:	2300      	movs	r3, #0
 800481a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800481c:	4b59      	ldr	r3, [pc, #356]	@ (8004984 <HAL_RCC_GetSysClockFreq+0x180>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f003 030c 	and.w	r3, r3, #12
 8004824:	2b08      	cmp	r3, #8
 8004826:	d00d      	beq.n	8004844 <HAL_RCC_GetSysClockFreq+0x40>
 8004828:	2b08      	cmp	r3, #8
 800482a:	f200 80a1 	bhi.w	8004970 <HAL_RCC_GetSysClockFreq+0x16c>
 800482e:	2b00      	cmp	r3, #0
 8004830:	d002      	beq.n	8004838 <HAL_RCC_GetSysClockFreq+0x34>
 8004832:	2b04      	cmp	r3, #4
 8004834:	d003      	beq.n	800483e <HAL_RCC_GetSysClockFreq+0x3a>
 8004836:	e09b      	b.n	8004970 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004838:	4b53      	ldr	r3, [pc, #332]	@ (8004988 <HAL_RCC_GetSysClockFreq+0x184>)
 800483a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800483c:	e09b      	b.n	8004976 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800483e:	4b53      	ldr	r3, [pc, #332]	@ (800498c <HAL_RCC_GetSysClockFreq+0x188>)
 8004840:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004842:	e098      	b.n	8004976 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004844:	4b4f      	ldr	r3, [pc, #316]	@ (8004984 <HAL_RCC_GetSysClockFreq+0x180>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800484c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800484e:	4b4d      	ldr	r3, [pc, #308]	@ (8004984 <HAL_RCC_GetSysClockFreq+0x180>)
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d028      	beq.n	80048ac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800485a:	4b4a      	ldr	r3, [pc, #296]	@ (8004984 <HAL_RCC_GetSysClockFreq+0x180>)
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	099b      	lsrs	r3, r3, #6
 8004860:	2200      	movs	r2, #0
 8004862:	623b      	str	r3, [r7, #32]
 8004864:	627a      	str	r2, [r7, #36]	@ 0x24
 8004866:	6a3b      	ldr	r3, [r7, #32]
 8004868:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800486c:	2100      	movs	r1, #0
 800486e:	4b47      	ldr	r3, [pc, #284]	@ (800498c <HAL_RCC_GetSysClockFreq+0x188>)
 8004870:	fb03 f201 	mul.w	r2, r3, r1
 8004874:	2300      	movs	r3, #0
 8004876:	fb00 f303 	mul.w	r3, r0, r3
 800487a:	4413      	add	r3, r2
 800487c:	4a43      	ldr	r2, [pc, #268]	@ (800498c <HAL_RCC_GetSysClockFreq+0x188>)
 800487e:	fba0 1202 	umull	r1, r2, r0, r2
 8004882:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004884:	460a      	mov	r2, r1
 8004886:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004888:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800488a:	4413      	add	r3, r2
 800488c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800488e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004890:	2200      	movs	r2, #0
 8004892:	61bb      	str	r3, [r7, #24]
 8004894:	61fa      	str	r2, [r7, #28]
 8004896:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800489a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800489e:	f7fb fccb 	bl	8000238 <__aeabi_uldivmod>
 80048a2:	4602      	mov	r2, r0
 80048a4:	460b      	mov	r3, r1
 80048a6:	4613      	mov	r3, r2
 80048a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048aa:	e053      	b.n	8004954 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048ac:	4b35      	ldr	r3, [pc, #212]	@ (8004984 <HAL_RCC_GetSysClockFreq+0x180>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	099b      	lsrs	r3, r3, #6
 80048b2:	2200      	movs	r2, #0
 80048b4:	613b      	str	r3, [r7, #16]
 80048b6:	617a      	str	r2, [r7, #20]
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80048be:	f04f 0b00 	mov.w	fp, #0
 80048c2:	4652      	mov	r2, sl
 80048c4:	465b      	mov	r3, fp
 80048c6:	f04f 0000 	mov.w	r0, #0
 80048ca:	f04f 0100 	mov.w	r1, #0
 80048ce:	0159      	lsls	r1, r3, #5
 80048d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048d4:	0150      	lsls	r0, r2, #5
 80048d6:	4602      	mov	r2, r0
 80048d8:	460b      	mov	r3, r1
 80048da:	ebb2 080a 	subs.w	r8, r2, sl
 80048de:	eb63 090b 	sbc.w	r9, r3, fp
 80048e2:	f04f 0200 	mov.w	r2, #0
 80048e6:	f04f 0300 	mov.w	r3, #0
 80048ea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80048ee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80048f2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80048f6:	ebb2 0408 	subs.w	r4, r2, r8
 80048fa:	eb63 0509 	sbc.w	r5, r3, r9
 80048fe:	f04f 0200 	mov.w	r2, #0
 8004902:	f04f 0300 	mov.w	r3, #0
 8004906:	00eb      	lsls	r3, r5, #3
 8004908:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800490c:	00e2      	lsls	r2, r4, #3
 800490e:	4614      	mov	r4, r2
 8004910:	461d      	mov	r5, r3
 8004912:	eb14 030a 	adds.w	r3, r4, sl
 8004916:	603b      	str	r3, [r7, #0]
 8004918:	eb45 030b 	adc.w	r3, r5, fp
 800491c:	607b      	str	r3, [r7, #4]
 800491e:	f04f 0200 	mov.w	r2, #0
 8004922:	f04f 0300 	mov.w	r3, #0
 8004926:	e9d7 4500 	ldrd	r4, r5, [r7]
 800492a:	4629      	mov	r1, r5
 800492c:	028b      	lsls	r3, r1, #10
 800492e:	4621      	mov	r1, r4
 8004930:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004934:	4621      	mov	r1, r4
 8004936:	028a      	lsls	r2, r1, #10
 8004938:	4610      	mov	r0, r2
 800493a:	4619      	mov	r1, r3
 800493c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800493e:	2200      	movs	r2, #0
 8004940:	60bb      	str	r3, [r7, #8]
 8004942:	60fa      	str	r2, [r7, #12]
 8004944:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004948:	f7fb fc76 	bl	8000238 <__aeabi_uldivmod>
 800494c:	4602      	mov	r2, r0
 800494e:	460b      	mov	r3, r1
 8004950:	4613      	mov	r3, r2
 8004952:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004954:	4b0b      	ldr	r3, [pc, #44]	@ (8004984 <HAL_RCC_GetSysClockFreq+0x180>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	0c1b      	lsrs	r3, r3, #16
 800495a:	f003 0303 	and.w	r3, r3, #3
 800495e:	3301      	adds	r3, #1
 8004960:	005b      	lsls	r3, r3, #1
 8004962:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004964:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004968:	fbb2 f3f3 	udiv	r3, r2, r3
 800496c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800496e:	e002      	b.n	8004976 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004970:	4b05      	ldr	r3, [pc, #20]	@ (8004988 <HAL_RCC_GetSysClockFreq+0x184>)
 8004972:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004974:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004978:	4618      	mov	r0, r3
 800497a:	3740      	adds	r7, #64	@ 0x40
 800497c:	46bd      	mov	sp, r7
 800497e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004982:	bf00      	nop
 8004984:	40023800 	.word	0x40023800
 8004988:	00f42400 	.word	0x00f42400
 800498c:	01312d00 	.word	0x01312d00

08004990 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b088      	sub	sp, #32
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004998:	2300      	movs	r3, #0
 800499a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800499c:	2300      	movs	r3, #0
 800499e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80049a0:	2300      	movs	r3, #0
 80049a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80049a4:	2300      	movs	r3, #0
 80049a6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80049a8:	2300      	movs	r3, #0
 80049aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d012      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80049b8:	4b69      	ldr	r3, [pc, #420]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	4a68      	ldr	r2, [pc, #416]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049be:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80049c2:	6093      	str	r3, [r2, #8]
 80049c4:	4b66      	ldr	r3, [pc, #408]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049c6:	689a      	ldr	r2, [r3, #8]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049cc:	4964      	ldr	r1, [pc, #400]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80049da:	2301      	movs	r3, #1
 80049dc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d017      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049ea:	4b5d      	ldr	r3, [pc, #372]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049f0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049f8:	4959      	ldr	r1, [pc, #356]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a04:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a08:	d101      	bne.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004a16:	2301      	movs	r3, #1
 8004a18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d017      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a26:	4b4e      	ldr	r3, [pc, #312]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a2c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a34:	494a      	ldr	r1, [pc, #296]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a44:	d101      	bne.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004a46:	2301      	movs	r3, #1
 8004a48:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004a52:	2301      	movs	r3, #1
 8004a54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004a62:	2301      	movs	r3, #1
 8004a64:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0320 	and.w	r3, r3, #32
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f000 808b 	beq.w	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a74:	4b3a      	ldr	r3, [pc, #232]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a78:	4a39      	ldr	r2, [pc, #228]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a80:	4b37      	ldr	r3, [pc, #220]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a88:	60bb      	str	r3, [r7, #8]
 8004a8a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a8c:	4b35      	ldr	r3, [pc, #212]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a34      	ldr	r2, [pc, #208]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a98:	f7fd fb06 	bl	80020a8 <HAL_GetTick>
 8004a9c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aa0:	f7fd fb02 	bl	80020a8 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b64      	cmp	r3, #100	@ 0x64
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e38f      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004ab2:	4b2c      	ldr	r3, [pc, #176]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0f0      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004abe:	4b28      	ldr	r3, [pc, #160]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ac2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ac6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d035      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d02e      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004adc:	4b20      	ldr	r3, [pc, #128]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ae0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ae4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ae6:	4b1e      	ldr	r3, [pc, #120]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aea:	4a1d      	ldr	r2, [pc, #116]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004af0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004af2:	4b1b      	ldr	r3, [pc, #108]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004af6:	4a1a      	ldr	r2, [pc, #104]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004af8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004afc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004afe:	4a18      	ldr	r2, [pc, #96]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b04:	4b16      	ldr	r3, [pc, #88]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b08:	f003 0301 	and.w	r3, r3, #1
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d114      	bne.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b10:	f7fd faca 	bl	80020a8 <HAL_GetTick>
 8004b14:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b16:	e00a      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b18:	f7fd fac6 	bl	80020a8 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e351      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d0ee      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b46:	d111      	bne.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004b48:	4b05      	ldr	r3, [pc, #20]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004b54:	4b04      	ldr	r3, [pc, #16]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004b56:	400b      	ands	r3, r1
 8004b58:	4901      	ldr	r1, [pc, #4]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	608b      	str	r3, [r1, #8]
 8004b5e:	e00b      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004b60:	40023800 	.word	0x40023800
 8004b64:	40007000 	.word	0x40007000
 8004b68:	0ffffcff 	.word	0x0ffffcff
 8004b6c:	4bac      	ldr	r3, [pc, #688]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	4aab      	ldr	r2, [pc, #684]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b72:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004b76:	6093      	str	r3, [r2, #8]
 8004b78:	4ba9      	ldr	r3, [pc, #676]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b7a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b84:	49a6      	ldr	r1, [pc, #664]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0310 	and.w	r3, r3, #16
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d010      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b96:	4ba2      	ldr	r3, [pc, #648]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b9c:	4aa0      	ldr	r2, [pc, #640]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ba2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004ba6:	4b9e      	ldr	r3, [pc, #632]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ba8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb0:	499b      	ldr	r1, [pc, #620]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00a      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bc4:	4b96      	ldr	r3, [pc, #600]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bca:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bd2:	4993      	ldr	r1, [pc, #588]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00a      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004be6:	4b8e      	ldr	r3, [pc, #568]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004bf4:	498a      	ldr	r1, [pc, #552]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00a      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c08:	4b85      	ldr	r3, [pc, #532]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c0e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c16:	4982      	ldr	r1, [pc, #520]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00a      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c2a:	4b7d      	ldr	r3, [pc, #500]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c30:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c38:	4979      	ldr	r1, [pc, #484]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00a      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c4c:	4b74      	ldr	r3, [pc, #464]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c52:	f023 0203 	bic.w	r2, r3, #3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c5a:	4971      	ldr	r1, [pc, #452]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00a      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c6e:	4b6c      	ldr	r3, [pc, #432]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c74:	f023 020c 	bic.w	r2, r3, #12
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c7c:	4968      	ldr	r1, [pc, #416]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00a      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c90:	4b63      	ldr	r3, [pc, #396]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c96:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c9e:	4960      	ldr	r1, [pc, #384]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00a      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004cb2:	4b5b      	ldr	r3, [pc, #364]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cb8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cc0:	4957      	ldr	r1, [pc, #348]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00a      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004cd4:	4b52      	ldr	r3, [pc, #328]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cda:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ce2:	494f      	ldr	r1, [pc, #316]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00a      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004cf6:	4b4a      	ldr	r3, [pc, #296]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cfc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d04:	4946      	ldr	r1, [pc, #280]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00a      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004d18:	4b41      	ldr	r3, [pc, #260]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d1e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d26:	493e      	ldr	r1, [pc, #248]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00a      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004d3a:	4b39      	ldr	r3, [pc, #228]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d40:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d48:	4935      	ldr	r1, [pc, #212]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00a      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d5c:	4b30      	ldr	r3, [pc, #192]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d62:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d6a:	492d      	ldr	r1, [pc, #180]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d011      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004d7e:	4b28      	ldr	r3, [pc, #160]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d84:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d8c:	4924      	ldr	r1, [pc, #144]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d9c:	d101      	bne.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0308 	and.w	r3, r3, #8
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004dae:	2301      	movs	r3, #1
 8004db0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00a      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004dbe:	4b18      	ldr	r3, [pc, #96]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dc4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dcc:	4914      	ldr	r1, [pc, #80]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00b      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004de0:	4b0f      	ldr	r3, [pc, #60]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004de6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004df0:	490b      	ldr	r1, [pc, #44]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00f      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004e04:	4b06      	ldr	r3, [pc, #24]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e0a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e14:	4902      	ldr	r1, [pc, #8]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004e1c:	e002      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004e1e:	bf00      	nop
 8004e20:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00b      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e30:	4b8a      	ldr	r3, [pc, #552]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e36:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e40:	4986      	ldr	r1, [pc, #536]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00b      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004e54:	4b81      	ldr	r3, [pc, #516]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e5a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e64:	497d      	ldr	r1, [pc, #500]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d006      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f000 80d6 	beq.w	800502c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e80:	4b76      	ldr	r3, [pc, #472]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a75      	ldr	r2, [pc, #468]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e86:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e8c:	f7fd f90c 	bl	80020a8 <HAL_GetTick>
 8004e90:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e92:	e008      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e94:	f7fd f908 	bl	80020a8 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b64      	cmp	r3, #100	@ 0x64
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e195      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ea6:	4b6d      	ldr	r3, [pc, #436]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1f0      	bne.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d021      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d11d      	bne.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004ec6:	4b65      	ldr	r3, [pc, #404]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ecc:	0c1b      	lsrs	r3, r3, #16
 8004ece:	f003 0303 	and.w	r3, r3, #3
 8004ed2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ed4:	4b61      	ldr	r3, [pc, #388]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004eda:	0e1b      	lsrs	r3, r3, #24
 8004edc:	f003 030f 	and.w	r3, r3, #15
 8004ee0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	019a      	lsls	r2, r3, #6
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	041b      	lsls	r3, r3, #16
 8004eec:	431a      	orrs	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	061b      	lsls	r3, r3, #24
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	071b      	lsls	r3, r3, #28
 8004efa:	4958      	ldr	r1, [pc, #352]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d004      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f16:	d00a      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d02e      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f2c:	d129      	bne.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f2e:	4b4b      	ldr	r3, [pc, #300]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f34:	0c1b      	lsrs	r3, r3, #16
 8004f36:	f003 0303 	and.w	r3, r3, #3
 8004f3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f3c:	4b47      	ldr	r3, [pc, #284]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f42:	0f1b      	lsrs	r3, r3, #28
 8004f44:	f003 0307 	and.w	r3, r3, #7
 8004f48:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	019a      	lsls	r2, r3, #6
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	041b      	lsls	r3, r3, #16
 8004f54:	431a      	orrs	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	061b      	lsls	r3, r3, #24
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	071b      	lsls	r3, r3, #28
 8004f62:	493e      	ldr	r1, [pc, #248]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004f6a:	4b3c      	ldr	r3, [pc, #240]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f70:	f023 021f 	bic.w	r2, r3, #31
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	4938      	ldr	r1, [pc, #224]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d01d      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f8e:	4b33      	ldr	r3, [pc, #204]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f94:	0e1b      	lsrs	r3, r3, #24
 8004f96:	f003 030f 	and.w	r3, r3, #15
 8004f9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f9c:	4b2f      	ldr	r3, [pc, #188]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fa2:	0f1b      	lsrs	r3, r3, #28
 8004fa4:	f003 0307 	and.w	r3, r3, #7
 8004fa8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	019a      	lsls	r2, r3, #6
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	041b      	lsls	r3, r3, #16
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	061b      	lsls	r3, r3, #24
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	071b      	lsls	r3, r3, #28
 8004fc2:	4926      	ldr	r1, [pc, #152]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d011      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	019a      	lsls	r2, r3, #6
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	041b      	lsls	r3, r3, #16
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	061b      	lsls	r3, r3, #24
 8004fea:	431a      	orrs	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	071b      	lsls	r3, r3, #28
 8004ff2:	491a      	ldr	r1, [pc, #104]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ffa:	4b18      	ldr	r3, [pc, #96]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a17      	ldr	r2, [pc, #92]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005000:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005004:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005006:	f7fd f84f 	bl	80020a8 <HAL_GetTick>
 800500a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800500c:	e008      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800500e:	f7fd f84b 	bl	80020a8 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	2b64      	cmp	r3, #100	@ 0x64
 800501a:	d901      	bls.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e0d8      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005020:	4b0e      	ldr	r3, [pc, #56]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d0f0      	beq.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	2b01      	cmp	r3, #1
 8005030:	f040 80ce 	bne.w	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005034:	4b09      	ldr	r3, [pc, #36]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a08      	ldr	r2, [pc, #32]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800503a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800503e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005040:	f7fd f832 	bl	80020a8 <HAL_GetTick>
 8005044:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005046:	e00b      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005048:	f7fd f82e 	bl	80020a8 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b64      	cmp	r3, #100	@ 0x64
 8005054:	d904      	bls.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e0bb      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800505a:	bf00      	nop
 800505c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005060:	4b5e      	ldr	r3, [pc, #376]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005068:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800506c:	d0ec      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d003      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800507e:	2b00      	cmp	r3, #0
 8005080:	d009      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800508a:	2b00      	cmp	r3, #0
 800508c:	d02e      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005092:	2b00      	cmp	r3, #0
 8005094:	d12a      	bne.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005096:	4b51      	ldr	r3, [pc, #324]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800509c:	0c1b      	lsrs	r3, r3, #16
 800509e:	f003 0303 	and.w	r3, r3, #3
 80050a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80050a4:	4b4d      	ldr	r3, [pc, #308]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050aa:	0f1b      	lsrs	r3, r3, #28
 80050ac:	f003 0307 	and.w	r3, r3, #7
 80050b0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	019a      	lsls	r2, r3, #6
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	041b      	lsls	r3, r3, #16
 80050bc:	431a      	orrs	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	061b      	lsls	r3, r3, #24
 80050c4:	431a      	orrs	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	071b      	lsls	r3, r3, #28
 80050ca:	4944      	ldr	r1, [pc, #272]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80050d2:	4b42      	ldr	r3, [pc, #264]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80050d8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e0:	3b01      	subs	r3, #1
 80050e2:	021b      	lsls	r3, r3, #8
 80050e4:	493d      	ldr	r1, [pc, #244]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d022      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005100:	d11d      	bne.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005102:	4b36      	ldr	r3, [pc, #216]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005108:	0e1b      	lsrs	r3, r3, #24
 800510a:	f003 030f 	and.w	r3, r3, #15
 800510e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005110:	4b32      	ldr	r3, [pc, #200]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005116:	0f1b      	lsrs	r3, r3, #28
 8005118:	f003 0307 	and.w	r3, r3, #7
 800511c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	019a      	lsls	r2, r3, #6
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	041b      	lsls	r3, r3, #16
 800512a:	431a      	orrs	r2, r3
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	061b      	lsls	r3, r3, #24
 8005130:	431a      	orrs	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	071b      	lsls	r3, r3, #28
 8005136:	4929      	ldr	r1, [pc, #164]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005138:	4313      	orrs	r3, r2
 800513a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0308 	and.w	r3, r3, #8
 8005146:	2b00      	cmp	r3, #0
 8005148:	d028      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800514a:	4b24      	ldr	r3, [pc, #144]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800514c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005150:	0e1b      	lsrs	r3, r3, #24
 8005152:	f003 030f 	and.w	r3, r3, #15
 8005156:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005158:	4b20      	ldr	r3, [pc, #128]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800515a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800515e:	0c1b      	lsrs	r3, r3, #16
 8005160:	f003 0303 	and.w	r3, r3, #3
 8005164:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	019a      	lsls	r2, r3, #6
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	041b      	lsls	r3, r3, #16
 8005170:	431a      	orrs	r2, r3
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	061b      	lsls	r3, r3, #24
 8005176:	431a      	orrs	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	69db      	ldr	r3, [r3, #28]
 800517c:	071b      	lsls	r3, r3, #28
 800517e:	4917      	ldr	r1, [pc, #92]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005180:	4313      	orrs	r3, r2
 8005182:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005186:	4b15      	ldr	r3, [pc, #84]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005188:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800518c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005194:	4911      	ldr	r1, [pc, #68]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005196:	4313      	orrs	r3, r2
 8005198:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800519c:	4b0f      	ldr	r3, [pc, #60]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a0e      	ldr	r2, [pc, #56]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051a8:	f7fc ff7e 	bl	80020a8 <HAL_GetTick>
 80051ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051ae:	e008      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80051b0:	f7fc ff7a 	bl	80020a8 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b64      	cmp	r3, #100	@ 0x64
 80051bc:	d901      	bls.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e007      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051c2:	4b06      	ldr	r3, [pc, #24]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051ce:	d1ef      	bne.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3720      	adds	r7, #32
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	40023800 	.word	0x40023800

080051e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e049      	b.n	8005286 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d106      	bne.n	800520c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7fc fd46 	bl	8001c98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	3304      	adds	r3, #4
 800521c:	4619      	mov	r1, r3
 800521e:	4610      	mov	r0, r2
 8005220:	f000 fe0c 	bl	8005e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3708      	adds	r7, #8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
	...

08005290 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d001      	beq.n	80052a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e054      	b.n	8005352 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2202      	movs	r2, #2
 80052ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68da      	ldr	r2, [r3, #12]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f042 0201 	orr.w	r2, r2, #1
 80052be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a26      	ldr	r2, [pc, #152]	@ (8005360 <HAL_TIM_Base_Start_IT+0xd0>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d022      	beq.n	8005310 <HAL_TIM_Base_Start_IT+0x80>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052d2:	d01d      	beq.n	8005310 <HAL_TIM_Base_Start_IT+0x80>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a22      	ldr	r2, [pc, #136]	@ (8005364 <HAL_TIM_Base_Start_IT+0xd4>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d018      	beq.n	8005310 <HAL_TIM_Base_Start_IT+0x80>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a21      	ldr	r2, [pc, #132]	@ (8005368 <HAL_TIM_Base_Start_IT+0xd8>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d013      	beq.n	8005310 <HAL_TIM_Base_Start_IT+0x80>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a1f      	ldr	r2, [pc, #124]	@ (800536c <HAL_TIM_Base_Start_IT+0xdc>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d00e      	beq.n	8005310 <HAL_TIM_Base_Start_IT+0x80>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a1e      	ldr	r2, [pc, #120]	@ (8005370 <HAL_TIM_Base_Start_IT+0xe0>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d009      	beq.n	8005310 <HAL_TIM_Base_Start_IT+0x80>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a1c      	ldr	r2, [pc, #112]	@ (8005374 <HAL_TIM_Base_Start_IT+0xe4>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d004      	beq.n	8005310 <HAL_TIM_Base_Start_IT+0x80>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a1b      	ldr	r2, [pc, #108]	@ (8005378 <HAL_TIM_Base_Start_IT+0xe8>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d115      	bne.n	800533c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689a      	ldr	r2, [r3, #8]
 8005316:	4b19      	ldr	r3, [pc, #100]	@ (800537c <HAL_TIM_Base_Start_IT+0xec>)
 8005318:	4013      	ands	r3, r2
 800531a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2b06      	cmp	r3, #6
 8005320:	d015      	beq.n	800534e <HAL_TIM_Base_Start_IT+0xbe>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005328:	d011      	beq.n	800534e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f042 0201 	orr.w	r2, r2, #1
 8005338:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800533a:	e008      	b.n	800534e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f042 0201 	orr.w	r2, r2, #1
 800534a:	601a      	str	r2, [r3, #0]
 800534c:	e000      	b.n	8005350 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800534e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	40010000 	.word	0x40010000
 8005364:	40000400 	.word	0x40000400
 8005368:	40000800 	.word	0x40000800
 800536c:	40000c00 	.word	0x40000c00
 8005370:	40010400 	.word	0x40010400
 8005374:	40014000 	.word	0x40014000
 8005378:	40001800 	.word	0x40001800
 800537c:	00010007 	.word	0x00010007

08005380 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e049      	b.n	8005426 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d106      	bne.n	80053ac <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f841 	bl	800542e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2202      	movs	r2, #2
 80053b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	3304      	adds	r3, #4
 80053bc:	4619      	mov	r1, r3
 80053be:	4610      	mov	r0, r2
 80053c0:	f000 fd3c 	bl	8005e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3708      	adds	r7, #8
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800542e:	b480      	push	{r7}
 8005430:	b083      	sub	sp, #12
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005436:	bf00      	nop
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b082      	sub	sp, #8
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e049      	b.n	80054e8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b00      	cmp	r3, #0
 800545e:	d106      	bne.n	800546e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 f841 	bl	80054f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2202      	movs	r2, #2
 8005472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	3304      	adds	r3, #4
 800547e:	4619      	mov	r1, r3
 8005480:	4610      	mov	r0, r2
 8005482:	f000 fcdb 	bl	8005e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3708      	adds	r7, #8
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e049      	b.n	80055aa <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d106      	bne.n	8005530 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f7fc fc0a 	bl	8001d44 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2202      	movs	r2, #2
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	3304      	adds	r3, #4
 8005540:	4619      	mov	r1, r3
 8005542:	4610      	mov	r0, r2
 8005544:	f000 fc7a 	bl	8005e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3708      	adds	r7, #8
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b082      	sub	sp, #8
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	f003 0302 	and.w	r3, r3, #2
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d122      	bne.n	800560e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	f003 0302 	and.w	r3, r3, #2
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d11b      	bne.n	800560e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f06f 0202 	mvn.w	r2, #2
 80055de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	f003 0303 	and.w	r3, r3, #3
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d003      	beq.n	80055fc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 fc03 	bl	8005e00 <HAL_TIM_IC_CaptureCallback>
 80055fa:	e005      	b.n	8005608 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 fbf5 	bl	8005dec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 fc06 	bl	8005e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	f003 0304 	and.w	r3, r3, #4
 8005618:	2b04      	cmp	r3, #4
 800561a:	d122      	bne.n	8005662 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	f003 0304 	and.w	r3, r3, #4
 8005626:	2b04      	cmp	r3, #4
 8005628:	d11b      	bne.n	8005662 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f06f 0204 	mvn.w	r2, #4
 8005632:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2202      	movs	r2, #2
 8005638:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005644:	2b00      	cmp	r3, #0
 8005646:	d003      	beq.n	8005650 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 fbd9 	bl	8005e00 <HAL_TIM_IC_CaptureCallback>
 800564e:	e005      	b.n	800565c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 fbcb 	bl	8005dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 fbdc 	bl	8005e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	f003 0308 	and.w	r3, r3, #8
 800566c:	2b08      	cmp	r3, #8
 800566e:	d122      	bne.n	80056b6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	f003 0308 	and.w	r3, r3, #8
 800567a:	2b08      	cmp	r3, #8
 800567c:	d11b      	bne.n	80056b6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f06f 0208 	mvn.w	r2, #8
 8005686:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2204      	movs	r2, #4
 800568c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	69db      	ldr	r3, [r3, #28]
 8005694:	f003 0303 	and.w	r3, r3, #3
 8005698:	2b00      	cmp	r3, #0
 800569a:	d003      	beq.n	80056a4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 fbaf 	bl	8005e00 <HAL_TIM_IC_CaptureCallback>
 80056a2:	e005      	b.n	80056b0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 fba1 	bl	8005dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 fbb2 	bl	8005e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	f003 0310 	and.w	r3, r3, #16
 80056c0:	2b10      	cmp	r3, #16
 80056c2:	d122      	bne.n	800570a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	f003 0310 	and.w	r3, r3, #16
 80056ce:	2b10      	cmp	r3, #16
 80056d0:	d11b      	bne.n	800570a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f06f 0210 	mvn.w	r2, #16
 80056da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2208      	movs	r2, #8
 80056e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	69db      	ldr	r3, [r3, #28]
 80056e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d003      	beq.n	80056f8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 fb85 	bl	8005e00 <HAL_TIM_IC_CaptureCallback>
 80056f6:	e005      	b.n	8005704 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 fb77 	bl	8005dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 fb88 	bl	8005e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	2b01      	cmp	r3, #1
 8005716:	d10e      	bne.n	8005736 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b01      	cmp	r3, #1
 8005724:	d107      	bne.n	8005736 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f06f 0201 	mvn.w	r2, #1
 800572e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 fb51 	bl	8005dd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005740:	2b80      	cmp	r3, #128	@ 0x80
 8005742:	d10e      	bne.n	8005762 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800574e:	2b80      	cmp	r3, #128	@ 0x80
 8005750:	d107      	bne.n	8005762 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800575a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f001 f945 	bl	80069ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800576c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005770:	d10e      	bne.n	8005790 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800577c:	2b80      	cmp	r3, #128	@ 0x80
 800577e:	d107      	bne.n	8005790 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f001 f938 	bl	8006a00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800579a:	2b40      	cmp	r3, #64	@ 0x40
 800579c:	d10e      	bne.n	80057bc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057a8:	2b40      	cmp	r3, #64	@ 0x40
 80057aa:	d107      	bne.n	80057bc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80057b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 fb36 	bl	8005e28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	f003 0320 	and.w	r3, r3, #32
 80057c6:	2b20      	cmp	r3, #32
 80057c8:	d10e      	bne.n	80057e8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	f003 0320 	and.w	r3, r3, #32
 80057d4:	2b20      	cmp	r3, #32
 80057d6:	d107      	bne.n	80057e8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f06f 0220 	mvn.w	r2, #32
 80057e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f001 f8f8 	bl	80069d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057e8:	bf00      	nop
 80057ea:	3708      	adds	r7, #8
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057fc:	2300      	movs	r3, #0
 80057fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005806:	2b01      	cmp	r3, #1
 8005808:	d101      	bne.n	800580e <HAL_TIM_OC_ConfigChannel+0x1e>
 800580a:	2302      	movs	r3, #2
 800580c:	e066      	b.n	80058dc <HAL_TIM_OC_ConfigChannel+0xec>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2201      	movs	r2, #1
 8005812:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2b14      	cmp	r3, #20
 800581a:	d857      	bhi.n	80058cc <HAL_TIM_OC_ConfigChannel+0xdc>
 800581c:	a201      	add	r2, pc, #4	@ (adr r2, 8005824 <HAL_TIM_OC_ConfigChannel+0x34>)
 800581e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005822:	bf00      	nop
 8005824:	08005879 	.word	0x08005879
 8005828:	080058cd 	.word	0x080058cd
 800582c:	080058cd 	.word	0x080058cd
 8005830:	080058cd 	.word	0x080058cd
 8005834:	08005887 	.word	0x08005887
 8005838:	080058cd 	.word	0x080058cd
 800583c:	080058cd 	.word	0x080058cd
 8005840:	080058cd 	.word	0x080058cd
 8005844:	08005895 	.word	0x08005895
 8005848:	080058cd 	.word	0x080058cd
 800584c:	080058cd 	.word	0x080058cd
 8005850:	080058cd 	.word	0x080058cd
 8005854:	080058a3 	.word	0x080058a3
 8005858:	080058cd 	.word	0x080058cd
 800585c:	080058cd 	.word	0x080058cd
 8005860:	080058cd 	.word	0x080058cd
 8005864:	080058b1 	.word	0x080058b1
 8005868:	080058cd 	.word	0x080058cd
 800586c:	080058cd 	.word	0x080058cd
 8005870:	080058cd 	.word	0x080058cd
 8005874:	080058bf 	.word	0x080058bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68b9      	ldr	r1, [r7, #8]
 800587e:	4618      	mov	r0, r3
 8005880:	f000 fb7c 	bl	8005f7c <TIM_OC1_SetConfig>
      break;
 8005884:	e025      	b.n	80058d2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68b9      	ldr	r1, [r7, #8]
 800588c:	4618      	mov	r0, r3
 800588e:	f000 fbe7 	bl	8006060 <TIM_OC2_SetConfig>
      break;
 8005892:	e01e      	b.n	80058d2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68b9      	ldr	r1, [r7, #8]
 800589a:	4618      	mov	r0, r3
 800589c:	f000 fc58 	bl	8006150 <TIM_OC3_SetConfig>
      break;
 80058a0:	e017      	b.n	80058d2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68b9      	ldr	r1, [r7, #8]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f000 fcc7 	bl	800623c <TIM_OC4_SetConfig>
      break;
 80058ae:	e010      	b.n	80058d2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68b9      	ldr	r1, [r7, #8]
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 fd18 	bl	80062ec <TIM_OC5_SetConfig>
      break;
 80058bc:	e009      	b.n	80058d2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68b9      	ldr	r1, [r7, #8]
 80058c4:	4618      	mov	r0, r3
 80058c6:	f000 fd63 	bl	8006390 <TIM_OC6_SetConfig>
      break;
 80058ca:	e002      	b.n	80058d2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	75fb      	strb	r3, [r7, #23]
      break;
 80058d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80058da:	7dfb      	ldrb	r3, [r7, #23]
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3718      	adds	r7, #24
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b086      	sub	sp, #24
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058f0:	2300      	movs	r3, #0
 80058f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d101      	bne.n	8005902 <HAL_TIM_IC_ConfigChannel+0x1e>
 80058fe:	2302      	movs	r3, #2
 8005900:	e088      	b.n	8005a14 <HAL_TIM_IC_ConfigChannel+0x130>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d11b      	bne.n	8005948 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005920:	f000 fd8a 	bl	8006438 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	699a      	ldr	r2, [r3, #24]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f022 020c 	bic.w	r2, r2, #12
 8005932:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6999      	ldr	r1, [r3, #24]
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	689a      	ldr	r2, [r3, #8]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	430a      	orrs	r2, r1
 8005944:	619a      	str	r2, [r3, #24]
 8005946:	e060      	b.n	8005a0a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b04      	cmp	r3, #4
 800594c:	d11c      	bne.n	8005988 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800595e:	f000 fe0e 	bl	800657e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	699a      	ldr	r2, [r3, #24]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005970:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	6999      	ldr	r1, [r3, #24]
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	021a      	lsls	r2, r3, #8
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	430a      	orrs	r2, r1
 8005984:	619a      	str	r2, [r3, #24]
 8005986:	e040      	b.n	8005a0a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2b08      	cmp	r3, #8
 800598c:	d11b      	bne.n	80059c6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800599e:	f000 fe5b 	bl	8006658 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	69da      	ldr	r2, [r3, #28]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f022 020c 	bic.w	r2, r2, #12
 80059b0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	69d9      	ldr	r1, [r3, #28]
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	689a      	ldr	r2, [r3, #8]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	430a      	orrs	r2, r1
 80059c2:	61da      	str	r2, [r3, #28]
 80059c4:	e021      	b.n	8005a0a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2b0c      	cmp	r3, #12
 80059ca:	d11c      	bne.n	8005a06 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80059dc:	f000 fe78 	bl	80066d0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	69da      	ldr	r2, [r3, #28]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80059ee:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	69d9      	ldr	r1, [r3, #28]
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	021a      	lsls	r2, r3, #8
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	430a      	orrs	r2, r1
 8005a02:	61da      	str	r2, [r3, #28]
 8005a04:	e001      	b.n	8005a0a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3718      	adds	r7, #24
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b086      	sub	sp, #24
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d101      	bne.n	8005a3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a36:	2302      	movs	r3, #2
 8005a38:	e0ff      	b.n	8005c3a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2b14      	cmp	r3, #20
 8005a46:	f200 80f0 	bhi.w	8005c2a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8005a50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a50:	08005aa5 	.word	0x08005aa5
 8005a54:	08005c2b 	.word	0x08005c2b
 8005a58:	08005c2b 	.word	0x08005c2b
 8005a5c:	08005c2b 	.word	0x08005c2b
 8005a60:	08005ae5 	.word	0x08005ae5
 8005a64:	08005c2b 	.word	0x08005c2b
 8005a68:	08005c2b 	.word	0x08005c2b
 8005a6c:	08005c2b 	.word	0x08005c2b
 8005a70:	08005b27 	.word	0x08005b27
 8005a74:	08005c2b 	.word	0x08005c2b
 8005a78:	08005c2b 	.word	0x08005c2b
 8005a7c:	08005c2b 	.word	0x08005c2b
 8005a80:	08005b67 	.word	0x08005b67
 8005a84:	08005c2b 	.word	0x08005c2b
 8005a88:	08005c2b 	.word	0x08005c2b
 8005a8c:	08005c2b 	.word	0x08005c2b
 8005a90:	08005ba9 	.word	0x08005ba9
 8005a94:	08005c2b 	.word	0x08005c2b
 8005a98:	08005c2b 	.word	0x08005c2b
 8005a9c:	08005c2b 	.word	0x08005c2b
 8005aa0:	08005be9 	.word	0x08005be9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68b9      	ldr	r1, [r7, #8]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 fa66 	bl	8005f7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	699a      	ldr	r2, [r3, #24]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f042 0208 	orr.w	r2, r2, #8
 8005abe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	699a      	ldr	r2, [r3, #24]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f022 0204 	bic.w	r2, r2, #4
 8005ace:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	6999      	ldr	r1, [r3, #24]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	691a      	ldr	r2, [r3, #16]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	619a      	str	r2, [r3, #24]
      break;
 8005ae2:	e0a5      	b.n	8005c30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68b9      	ldr	r1, [r7, #8]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f000 fab8 	bl	8006060 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	699a      	ldr	r2, [r3, #24]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005afe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	699a      	ldr	r2, [r3, #24]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6999      	ldr	r1, [r3, #24]
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	021a      	lsls	r2, r3, #8
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	430a      	orrs	r2, r1
 8005b22:	619a      	str	r2, [r3, #24]
      break;
 8005b24:	e084      	b.n	8005c30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68b9      	ldr	r1, [r7, #8]
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f000 fb0f 	bl	8006150 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	69da      	ldr	r2, [r3, #28]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f042 0208 	orr.w	r2, r2, #8
 8005b40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	69da      	ldr	r2, [r3, #28]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f022 0204 	bic.w	r2, r2, #4
 8005b50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	69d9      	ldr	r1, [r3, #28]
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	691a      	ldr	r2, [r3, #16]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	430a      	orrs	r2, r1
 8005b62:	61da      	str	r2, [r3, #28]
      break;
 8005b64:	e064      	b.n	8005c30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68b9      	ldr	r1, [r7, #8]
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f000 fb65 	bl	800623c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	69da      	ldr	r2, [r3, #28]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	69da      	ldr	r2, [r3, #28]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	69d9      	ldr	r1, [r3, #28]
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	021a      	lsls	r2, r3, #8
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	430a      	orrs	r2, r1
 8005ba4:	61da      	str	r2, [r3, #28]
      break;
 8005ba6:	e043      	b.n	8005c30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68b9      	ldr	r1, [r7, #8]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 fb9c 	bl	80062ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f042 0208 	orr.w	r2, r2, #8
 8005bc2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f022 0204 	bic.w	r2, r2, #4
 8005bd2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	691a      	ldr	r2, [r3, #16]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	430a      	orrs	r2, r1
 8005be4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005be6:	e023      	b.n	8005c30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68b9      	ldr	r1, [r7, #8]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f000 fbce 	bl	8006390 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c02:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c12:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	021a      	lsls	r2, r3, #8
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	430a      	orrs	r2, r1
 8005c26:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005c28:	e002      	b.n	8005c30 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	75fb      	strb	r3, [r7, #23]
      break;
 8005c2e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c38:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3718      	adds	r7, #24
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop

08005c44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d101      	bne.n	8005c60 <HAL_TIM_ConfigClockSource+0x1c>
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	e0b4      	b.n	8005dca <HAL_TIM_ConfigClockSource+0x186>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	4b56      	ldr	r3, [pc, #344]	@ (8005dd4 <HAL_TIM_ConfigClockSource+0x190>)
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68ba      	ldr	r2, [r7, #8]
 8005c8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c98:	d03e      	beq.n	8005d18 <HAL_TIM_ConfigClockSource+0xd4>
 8005c9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c9e:	f200 8087 	bhi.w	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ca2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ca6:	f000 8086 	beq.w	8005db6 <HAL_TIM_ConfigClockSource+0x172>
 8005caa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cae:	d87f      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cb0:	2b70      	cmp	r3, #112	@ 0x70
 8005cb2:	d01a      	beq.n	8005cea <HAL_TIM_ConfigClockSource+0xa6>
 8005cb4:	2b70      	cmp	r3, #112	@ 0x70
 8005cb6:	d87b      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cb8:	2b60      	cmp	r3, #96	@ 0x60
 8005cba:	d050      	beq.n	8005d5e <HAL_TIM_ConfigClockSource+0x11a>
 8005cbc:	2b60      	cmp	r3, #96	@ 0x60
 8005cbe:	d877      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cc0:	2b50      	cmp	r3, #80	@ 0x50
 8005cc2:	d03c      	beq.n	8005d3e <HAL_TIM_ConfigClockSource+0xfa>
 8005cc4:	2b50      	cmp	r3, #80	@ 0x50
 8005cc6:	d873      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cc8:	2b40      	cmp	r3, #64	@ 0x40
 8005cca:	d058      	beq.n	8005d7e <HAL_TIM_ConfigClockSource+0x13a>
 8005ccc:	2b40      	cmp	r3, #64	@ 0x40
 8005cce:	d86f      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cd0:	2b30      	cmp	r3, #48	@ 0x30
 8005cd2:	d064      	beq.n	8005d9e <HAL_TIM_ConfigClockSource+0x15a>
 8005cd4:	2b30      	cmp	r3, #48	@ 0x30
 8005cd6:	d86b      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cd8:	2b20      	cmp	r3, #32
 8005cda:	d060      	beq.n	8005d9e <HAL_TIM_ConfigClockSource+0x15a>
 8005cdc:	2b20      	cmp	r3, #32
 8005cde:	d867      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d05c      	beq.n	8005d9e <HAL_TIM_ConfigClockSource+0x15a>
 8005ce4:	2b10      	cmp	r3, #16
 8005ce6:	d05a      	beq.n	8005d9e <HAL_TIM_ConfigClockSource+0x15a>
 8005ce8:	e062      	b.n	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cfa:	f000 fd41 	bl	8006780 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005d0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	609a      	str	r2, [r3, #8]
      break;
 8005d16:	e04f      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d28:	f000 fd2a 	bl	8006780 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689a      	ldr	r2, [r3, #8]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d3a:	609a      	str	r2, [r3, #8]
      break;
 8005d3c:	e03c      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	f000 fbe8 	bl	8006520 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2150      	movs	r1, #80	@ 0x50
 8005d56:	4618      	mov	r0, r3
 8005d58:	f000 fcf7 	bl	800674a <TIM_ITRx_SetConfig>
      break;
 8005d5c:	e02c      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	f000 fc44 	bl	80065f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2160      	movs	r1, #96	@ 0x60
 8005d76:	4618      	mov	r0, r3
 8005d78:	f000 fce7 	bl	800674a <TIM_ITRx_SetConfig>
      break;
 8005d7c:	e01c      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	f000 fbc8 	bl	8006520 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2140      	movs	r1, #64	@ 0x40
 8005d96:	4618      	mov	r0, r3
 8005d98:	f000 fcd7 	bl	800674a <TIM_ITRx_SetConfig>
      break;
 8005d9c:	e00c      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4619      	mov	r1, r3
 8005da8:	4610      	mov	r0, r2
 8005daa:	f000 fcce 	bl	800674a <TIM_ITRx_SetConfig>
      break;
 8005dae:	e003      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	73fb      	strb	r3, [r7, #15]
      break;
 8005db4:	e000      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005db6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	fffeff88 	.word	0xfffeff88

08005dd8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005de0:	bf00      	nop
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e1c:	bf00      	nop
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a40      	ldr	r2, [pc, #256]	@ (8005f50 <TIM_Base_SetConfig+0x114>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d013      	beq.n	8005e7c <TIM_Base_SetConfig+0x40>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e5a:	d00f      	beq.n	8005e7c <TIM_Base_SetConfig+0x40>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a3d      	ldr	r2, [pc, #244]	@ (8005f54 <TIM_Base_SetConfig+0x118>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d00b      	beq.n	8005e7c <TIM_Base_SetConfig+0x40>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a3c      	ldr	r2, [pc, #240]	@ (8005f58 <TIM_Base_SetConfig+0x11c>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d007      	beq.n	8005e7c <TIM_Base_SetConfig+0x40>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a3b      	ldr	r2, [pc, #236]	@ (8005f5c <TIM_Base_SetConfig+0x120>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d003      	beq.n	8005e7c <TIM_Base_SetConfig+0x40>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a3a      	ldr	r2, [pc, #232]	@ (8005f60 <TIM_Base_SetConfig+0x124>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d108      	bne.n	8005e8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a2f      	ldr	r2, [pc, #188]	@ (8005f50 <TIM_Base_SetConfig+0x114>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d02b      	beq.n	8005eee <TIM_Base_SetConfig+0xb2>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e9c:	d027      	beq.n	8005eee <TIM_Base_SetConfig+0xb2>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a2c      	ldr	r2, [pc, #176]	@ (8005f54 <TIM_Base_SetConfig+0x118>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d023      	beq.n	8005eee <TIM_Base_SetConfig+0xb2>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a2b      	ldr	r2, [pc, #172]	@ (8005f58 <TIM_Base_SetConfig+0x11c>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d01f      	beq.n	8005eee <TIM_Base_SetConfig+0xb2>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a2a      	ldr	r2, [pc, #168]	@ (8005f5c <TIM_Base_SetConfig+0x120>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d01b      	beq.n	8005eee <TIM_Base_SetConfig+0xb2>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a29      	ldr	r2, [pc, #164]	@ (8005f60 <TIM_Base_SetConfig+0x124>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d017      	beq.n	8005eee <TIM_Base_SetConfig+0xb2>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a28      	ldr	r2, [pc, #160]	@ (8005f64 <TIM_Base_SetConfig+0x128>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d013      	beq.n	8005eee <TIM_Base_SetConfig+0xb2>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a27      	ldr	r2, [pc, #156]	@ (8005f68 <TIM_Base_SetConfig+0x12c>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d00f      	beq.n	8005eee <TIM_Base_SetConfig+0xb2>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a26      	ldr	r2, [pc, #152]	@ (8005f6c <TIM_Base_SetConfig+0x130>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d00b      	beq.n	8005eee <TIM_Base_SetConfig+0xb2>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a25      	ldr	r2, [pc, #148]	@ (8005f70 <TIM_Base_SetConfig+0x134>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d007      	beq.n	8005eee <TIM_Base_SetConfig+0xb2>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a24      	ldr	r2, [pc, #144]	@ (8005f74 <TIM_Base_SetConfig+0x138>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d003      	beq.n	8005eee <TIM_Base_SetConfig+0xb2>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a23      	ldr	r2, [pc, #140]	@ (8005f78 <TIM_Base_SetConfig+0x13c>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d108      	bne.n	8005f00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	689a      	ldr	r2, [r3, #8]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a0a      	ldr	r2, [pc, #40]	@ (8005f50 <TIM_Base_SetConfig+0x114>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d003      	beq.n	8005f34 <TIM_Base_SetConfig+0xf8>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a0c      	ldr	r2, [pc, #48]	@ (8005f60 <TIM_Base_SetConfig+0x124>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d103      	bne.n	8005f3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	691a      	ldr	r2, [r3, #16]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	615a      	str	r2, [r3, #20]
}
 8005f42:	bf00      	nop
 8005f44:	3714      	adds	r7, #20
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	40010000 	.word	0x40010000
 8005f54:	40000400 	.word	0x40000400
 8005f58:	40000800 	.word	0x40000800
 8005f5c:	40000c00 	.word	0x40000c00
 8005f60:	40010400 	.word	0x40010400
 8005f64:	40014000 	.word	0x40014000
 8005f68:	40014400 	.word	0x40014400
 8005f6c:	40014800 	.word	0x40014800
 8005f70:	40001800 	.word	0x40001800
 8005f74:	40001c00 	.word	0x40001c00
 8005f78:	40002000 	.word	0x40002000

08005f7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b087      	sub	sp, #28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a1b      	ldr	r3, [r3, #32]
 8005f8a:	f023 0201 	bic.w	r2, r3, #1
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	4b2b      	ldr	r3, [pc, #172]	@ (8006054 <TIM_OC1_SetConfig+0xd8>)
 8005fa8:	4013      	ands	r3, r2
 8005faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f023 0303 	bic.w	r3, r3, #3
 8005fb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	f023 0302 	bic.w	r3, r3, #2
 8005fc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a21      	ldr	r2, [pc, #132]	@ (8006058 <TIM_OC1_SetConfig+0xdc>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d003      	beq.n	8005fe0 <TIM_OC1_SetConfig+0x64>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a20      	ldr	r2, [pc, #128]	@ (800605c <TIM_OC1_SetConfig+0xe0>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d10c      	bne.n	8005ffa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	f023 0308 	bic.w	r3, r3, #8
 8005fe6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	f023 0304 	bic.w	r3, r3, #4
 8005ff8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a16      	ldr	r2, [pc, #88]	@ (8006058 <TIM_OC1_SetConfig+0xdc>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d003      	beq.n	800600a <TIM_OC1_SetConfig+0x8e>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a15      	ldr	r2, [pc, #84]	@ (800605c <TIM_OC1_SetConfig+0xe0>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d111      	bne.n	800602e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006010:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006018:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	4313      	orrs	r3, r2
 8006022:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	4313      	orrs	r3, r2
 800602c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	685a      	ldr	r2, [r3, #4]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	621a      	str	r2, [r3, #32]
}
 8006048:	bf00      	nop
 800604a:	371c      	adds	r7, #28
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr
 8006054:	fffeff8f 	.word	0xfffeff8f
 8006058:	40010000 	.word	0x40010000
 800605c:	40010400 	.word	0x40010400

08006060 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006060:	b480      	push	{r7}
 8006062:	b087      	sub	sp, #28
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	f023 0210 	bic.w	r2, r3, #16
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	4b2e      	ldr	r3, [pc, #184]	@ (8006144 <TIM_OC2_SetConfig+0xe4>)
 800608c:	4013      	ands	r3, r2
 800608e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006096:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	021b      	lsls	r3, r3, #8
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	f023 0320 	bic.w	r3, r3, #32
 80060aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	011b      	lsls	r3, r3, #4
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a23      	ldr	r2, [pc, #140]	@ (8006148 <TIM_OC2_SetConfig+0xe8>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d003      	beq.n	80060c8 <TIM_OC2_SetConfig+0x68>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a22      	ldr	r2, [pc, #136]	@ (800614c <TIM_OC2_SetConfig+0xec>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d10d      	bne.n	80060e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	011b      	lsls	r3, r3, #4
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	4313      	orrs	r3, r2
 80060da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a18      	ldr	r2, [pc, #96]	@ (8006148 <TIM_OC2_SetConfig+0xe8>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d003      	beq.n	80060f4 <TIM_OC2_SetConfig+0x94>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a17      	ldr	r2, [pc, #92]	@ (800614c <TIM_OC2_SetConfig+0xec>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d113      	bne.n	800611c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80060fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006102:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	695b      	ldr	r3, [r3, #20]
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	4313      	orrs	r3, r2
 800610e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	4313      	orrs	r3, r2
 800611a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	621a      	str	r2, [r3, #32]
}
 8006136:	bf00      	nop
 8006138:	371c      	adds	r7, #28
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	feff8fff 	.word	0xfeff8fff
 8006148:	40010000 	.word	0x40010000
 800614c:	40010400 	.word	0x40010400

08006150 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006150:	b480      	push	{r7}
 8006152:	b087      	sub	sp, #28
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a1b      	ldr	r3, [r3, #32]
 800615e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	69db      	ldr	r3, [r3, #28]
 8006176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	4b2d      	ldr	r3, [pc, #180]	@ (8006230 <TIM_OC3_SetConfig+0xe0>)
 800617c:	4013      	ands	r3, r2
 800617e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f023 0303 	bic.w	r3, r3, #3
 8006186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	4313      	orrs	r3, r2
 8006190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006198:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	021b      	lsls	r3, r3, #8
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a22      	ldr	r2, [pc, #136]	@ (8006234 <TIM_OC3_SetConfig+0xe4>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d003      	beq.n	80061b6 <TIM_OC3_SetConfig+0x66>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a21      	ldr	r2, [pc, #132]	@ (8006238 <TIM_OC3_SetConfig+0xe8>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d10d      	bne.n	80061d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80061bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	021b      	lsls	r3, r3, #8
 80061c4:	697a      	ldr	r2, [r7, #20]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80061d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a17      	ldr	r2, [pc, #92]	@ (8006234 <TIM_OC3_SetConfig+0xe4>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d003      	beq.n	80061e2 <TIM_OC3_SetConfig+0x92>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a16      	ldr	r2, [pc, #88]	@ (8006238 <TIM_OC3_SetConfig+0xe8>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d113      	bne.n	800620a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80061e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80061f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	011b      	lsls	r3, r3, #4
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	011b      	lsls	r3, r3, #4
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	4313      	orrs	r3, r2
 8006208:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	685a      	ldr	r2, [r3, #4]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	621a      	str	r2, [r3, #32]
}
 8006224:	bf00      	nop
 8006226:	371c      	adds	r7, #28
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr
 8006230:	fffeff8f 	.word	0xfffeff8f
 8006234:	40010000 	.word	0x40010000
 8006238:	40010400 	.word	0x40010400

0800623c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800623c:	b480      	push	{r7}
 800623e:	b087      	sub	sp, #28
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a1b      	ldr	r3, [r3, #32]
 8006256:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	69db      	ldr	r3, [r3, #28]
 8006262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	4b1e      	ldr	r3, [pc, #120]	@ (80062e0 <TIM_OC4_SetConfig+0xa4>)
 8006268:	4013      	ands	r3, r2
 800626a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006272:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	021b      	lsls	r3, r3, #8
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	4313      	orrs	r3, r2
 800627e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006286:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	031b      	lsls	r3, r3, #12
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	4313      	orrs	r3, r2
 8006292:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a13      	ldr	r2, [pc, #76]	@ (80062e4 <TIM_OC4_SetConfig+0xa8>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d003      	beq.n	80062a4 <TIM_OC4_SetConfig+0x68>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a12      	ldr	r2, [pc, #72]	@ (80062e8 <TIM_OC4_SetConfig+0xac>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d109      	bne.n	80062b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80062aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	695b      	ldr	r3, [r3, #20]
 80062b0:	019b      	lsls	r3, r3, #6
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	697a      	ldr	r2, [r7, #20]
 80062bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	685a      	ldr	r2, [r3, #4]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	621a      	str	r2, [r3, #32]
}
 80062d2:	bf00      	nop
 80062d4:	371c      	adds	r7, #28
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	feff8fff 	.word	0xfeff8fff
 80062e4:	40010000 	.word	0x40010000
 80062e8:	40010400 	.word	0x40010400

080062ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b087      	sub	sp, #28
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a1b      	ldr	r3, [r3, #32]
 80062fa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a1b      	ldr	r3, [r3, #32]
 8006306:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	4b1b      	ldr	r3, [pc, #108]	@ (8006384 <TIM_OC5_SetConfig+0x98>)
 8006318:	4013      	ands	r3, r2
 800631a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	4313      	orrs	r3, r2
 8006324:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800632c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	041b      	lsls	r3, r3, #16
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	4313      	orrs	r3, r2
 8006338:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a12      	ldr	r2, [pc, #72]	@ (8006388 <TIM_OC5_SetConfig+0x9c>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d003      	beq.n	800634a <TIM_OC5_SetConfig+0x5e>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a11      	ldr	r2, [pc, #68]	@ (800638c <TIM_OC5_SetConfig+0xa0>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d109      	bne.n	800635e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006350:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	021b      	lsls	r3, r3, #8
 8006358:	697a      	ldr	r2, [r7, #20]
 800635a:	4313      	orrs	r3, r2
 800635c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	697a      	ldr	r2, [r7, #20]
 8006362:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	685a      	ldr	r2, [r3, #4]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	621a      	str	r2, [r3, #32]
}
 8006378:	bf00      	nop
 800637a:	371c      	adds	r7, #28
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr
 8006384:	fffeff8f 	.word	0xfffeff8f
 8006388:	40010000 	.word	0x40010000
 800638c:	40010400 	.word	0x40010400

08006390 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006390:	b480      	push	{r7}
 8006392:	b087      	sub	sp, #28
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a1b      	ldr	r3, [r3, #32]
 80063aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	4b1c      	ldr	r3, [pc, #112]	@ (800642c <TIM_OC6_SetConfig+0x9c>)
 80063bc:	4013      	ands	r3, r2
 80063be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	021b      	lsls	r3, r3, #8
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80063d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	051b      	lsls	r3, r3, #20
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	4313      	orrs	r3, r2
 80063de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a13      	ldr	r2, [pc, #76]	@ (8006430 <TIM_OC6_SetConfig+0xa0>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d003      	beq.n	80063f0 <TIM_OC6_SetConfig+0x60>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a12      	ldr	r2, [pc, #72]	@ (8006434 <TIM_OC6_SetConfig+0xa4>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d109      	bne.n	8006404 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	695b      	ldr	r3, [r3, #20]
 80063fc:	029b      	lsls	r3, r3, #10
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	4313      	orrs	r3, r2
 8006402:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	697a      	ldr	r2, [r7, #20]
 8006408:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	685a      	ldr	r2, [r3, #4]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	621a      	str	r2, [r3, #32]
}
 800641e:	bf00      	nop
 8006420:	371c      	adds	r7, #28
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	feff8fff 	.word	0xfeff8fff
 8006430:	40010000 	.word	0x40010000
 8006434:	40010400 	.word	0x40010400

08006438 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006438:	b480      	push	{r7}
 800643a:	b087      	sub	sp, #28
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	607a      	str	r2, [r7, #4]
 8006444:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	f023 0201 	bic.w	r2, r3, #1
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6a1b      	ldr	r3, [r3, #32]
 800645c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	4a28      	ldr	r2, [pc, #160]	@ (8006504 <TIM_TI1_SetConfig+0xcc>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d01b      	beq.n	800649e <TIM_TI1_SetConfig+0x66>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800646c:	d017      	beq.n	800649e <TIM_TI1_SetConfig+0x66>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	4a25      	ldr	r2, [pc, #148]	@ (8006508 <TIM_TI1_SetConfig+0xd0>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d013      	beq.n	800649e <TIM_TI1_SetConfig+0x66>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	4a24      	ldr	r2, [pc, #144]	@ (800650c <TIM_TI1_SetConfig+0xd4>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d00f      	beq.n	800649e <TIM_TI1_SetConfig+0x66>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	4a23      	ldr	r2, [pc, #140]	@ (8006510 <TIM_TI1_SetConfig+0xd8>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d00b      	beq.n	800649e <TIM_TI1_SetConfig+0x66>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	4a22      	ldr	r2, [pc, #136]	@ (8006514 <TIM_TI1_SetConfig+0xdc>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d007      	beq.n	800649e <TIM_TI1_SetConfig+0x66>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	4a21      	ldr	r2, [pc, #132]	@ (8006518 <TIM_TI1_SetConfig+0xe0>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d003      	beq.n	800649e <TIM_TI1_SetConfig+0x66>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	4a20      	ldr	r2, [pc, #128]	@ (800651c <TIM_TI1_SetConfig+0xe4>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d101      	bne.n	80064a2 <TIM_TI1_SetConfig+0x6a>
 800649e:	2301      	movs	r3, #1
 80064a0:	e000      	b.n	80064a4 <TIM_TI1_SetConfig+0x6c>
 80064a2:	2300      	movs	r3, #0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d008      	beq.n	80064ba <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f023 0303 	bic.w	r3, r3, #3
 80064ae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80064b0:	697a      	ldr	r2, [r7, #20]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	617b      	str	r3, [r7, #20]
 80064b8:	e003      	b.n	80064c2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	f043 0301 	orr.w	r3, r3, #1
 80064c0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80064c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	011b      	lsls	r3, r3, #4
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	f023 030a 	bic.w	r3, r3, #10
 80064dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	f003 030a 	and.w	r3, r3, #10
 80064e4:	693a      	ldr	r2, [r7, #16]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	693a      	ldr	r2, [r7, #16]
 80064f4:	621a      	str	r2, [r3, #32]
}
 80064f6:	bf00      	nop
 80064f8:	371c      	adds	r7, #28
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	40010000 	.word	0x40010000
 8006508:	40000400 	.word	0x40000400
 800650c:	40000800 	.word	0x40000800
 8006510:	40000c00 	.word	0x40000c00
 8006514:	40010400 	.word	0x40010400
 8006518:	40014000 	.word	0x40014000
 800651c:	40001800 	.word	0x40001800

08006520 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006520:	b480      	push	{r7}
 8006522:	b087      	sub	sp, #28
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6a1b      	ldr	r3, [r3, #32]
 8006530:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6a1b      	ldr	r3, [r3, #32]
 8006536:	f023 0201 	bic.w	r2, r3, #1
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800654a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	011b      	lsls	r3, r3, #4
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	4313      	orrs	r3, r2
 8006554:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	f023 030a 	bic.w	r3, r3, #10
 800655c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800655e:	697a      	ldr	r2, [r7, #20]
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	4313      	orrs	r3, r2
 8006564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	693a      	ldr	r2, [r7, #16]
 800656a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	621a      	str	r2, [r3, #32]
}
 8006572:	bf00      	nop
 8006574:	371c      	adds	r7, #28
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr

0800657e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800657e:	b480      	push	{r7}
 8006580:	b087      	sub	sp, #28
 8006582:	af00      	add	r7, sp, #0
 8006584:	60f8      	str	r0, [r7, #12]
 8006586:	60b9      	str	r1, [r7, #8]
 8006588:	607a      	str	r2, [r7, #4]
 800658a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6a1b      	ldr	r3, [r3, #32]
 8006590:	f023 0210 	bic.w	r2, r3, #16
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	699b      	ldr	r3, [r3, #24]
 800659c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	021b      	lsls	r3, r3, #8
 80065b0:	697a      	ldr	r2, [r7, #20]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80065bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	031b      	lsls	r3, r3, #12
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	697a      	ldr	r2, [r7, #20]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80065d0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	011b      	lsls	r3, r3, #4
 80065d6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80065da:	693a      	ldr	r2, [r7, #16]
 80065dc:	4313      	orrs	r3, r2
 80065de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	621a      	str	r2, [r3, #32]
}
 80065ec:	bf00      	nop
 80065ee:	371c      	adds	r7, #28
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b087      	sub	sp, #28
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6a1b      	ldr	r3, [r3, #32]
 8006608:	f023 0210 	bic.w	r2, r3, #16
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	699b      	ldr	r3, [r3, #24]
 8006614:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006622:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	031b      	lsls	r3, r3, #12
 8006628:	697a      	ldr	r2, [r7, #20]
 800662a:	4313      	orrs	r3, r2
 800662c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006634:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	011b      	lsls	r3, r3, #4
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	4313      	orrs	r3, r2
 800663e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	693a      	ldr	r2, [r7, #16]
 800664a:	621a      	str	r2, [r3, #32]
}
 800664c:	bf00      	nop
 800664e:	371c      	adds	r7, #28
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006658:	b480      	push	{r7}
 800665a:	b087      	sub	sp, #28
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	607a      	str	r2, [r7, #4]
 8006664:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6a1b      	ldr	r3, [r3, #32]
 800666a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	69db      	ldr	r3, [r3, #28]
 8006676:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6a1b      	ldr	r3, [r3, #32]
 800667c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	f023 0303 	bic.w	r3, r3, #3
 8006684:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006686:	697a      	ldr	r2, [r7, #20]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4313      	orrs	r3, r2
 800668c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006694:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	011b      	lsls	r3, r3, #4
 800669a:	b2db      	uxtb	r3, r3
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	4313      	orrs	r3, r2
 80066a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80066a8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	021b      	lsls	r3, r3, #8
 80066ae:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80066b2:	693a      	ldr	r2, [r7, #16]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	621a      	str	r2, [r3, #32]
}
 80066c4:	bf00      	nop
 80066c6:	371c      	adds	r7, #28
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b087      	sub	sp, #28
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]
 80066dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6a1b      	ldr	r3, [r3, #32]
 80066f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	021b      	lsls	r3, r3, #8
 8006702:	697a      	ldr	r2, [r7, #20]
 8006704:	4313      	orrs	r3, r2
 8006706:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800670e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	031b      	lsls	r3, r3, #12
 8006714:	b29b      	uxth	r3, r3
 8006716:	697a      	ldr	r2, [r7, #20]
 8006718:	4313      	orrs	r3, r2
 800671a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006722:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	031b      	lsls	r3, r3, #12
 8006728:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	4313      	orrs	r3, r2
 8006730:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	697a      	ldr	r2, [r7, #20]
 8006736:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	621a      	str	r2, [r3, #32]
}
 800673e:	bf00      	nop
 8006740:	371c      	adds	r7, #28
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr

0800674a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800674a:	b480      	push	{r7}
 800674c:	b085      	sub	sp, #20
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
 8006752:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006760:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006762:	683a      	ldr	r2, [r7, #0]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	4313      	orrs	r3, r2
 8006768:	f043 0307 	orr.w	r3, r3, #7
 800676c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	609a      	str	r2, [r3, #8]
}
 8006774:	bf00      	nop
 8006776:	3714      	adds	r7, #20
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006780:	b480      	push	{r7}
 8006782:	b087      	sub	sp, #28
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
 800678c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800679a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	021a      	lsls	r2, r3, #8
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	431a      	orrs	r2, r3
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	697a      	ldr	r2, [r7, #20]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	697a      	ldr	r2, [r7, #20]
 80067b2:	609a      	str	r2, [r3, #8]
}
 80067b4:	bf00      	nop
 80067b6:	371c      	adds	r7, #28
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d101      	bne.n	80067d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067d4:	2302      	movs	r3, #2
 80067d6:	e06d      	b.n	80068b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2202      	movs	r2, #2
 80067e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a30      	ldr	r2, [pc, #192]	@ (80068c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d004      	beq.n	800680c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a2f      	ldr	r2, [pc, #188]	@ (80068c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d108      	bne.n	800681e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006812:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	4313      	orrs	r3, r2
 800681c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006824:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	4313      	orrs	r3, r2
 800682e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a20      	ldr	r2, [pc, #128]	@ (80068c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d022      	beq.n	8006888 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800684a:	d01d      	beq.n	8006888 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a1d      	ldr	r2, [pc, #116]	@ (80068c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d018      	beq.n	8006888 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a1c      	ldr	r2, [pc, #112]	@ (80068cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d013      	beq.n	8006888 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a1a      	ldr	r2, [pc, #104]	@ (80068d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d00e      	beq.n	8006888 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a15      	ldr	r2, [pc, #84]	@ (80068c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d009      	beq.n	8006888 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a16      	ldr	r2, [pc, #88]	@ (80068d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d004      	beq.n	8006888 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a15      	ldr	r2, [pc, #84]	@ (80068d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d10c      	bne.n	80068a2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800688e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	4313      	orrs	r3, r2
 8006898:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3714      	adds	r7, #20
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr
 80068c0:	40010000 	.word	0x40010000
 80068c4:	40010400 	.word	0x40010400
 80068c8:	40000400 	.word	0x40000400
 80068cc:	40000800 	.word	0x40000800
 80068d0:	40000c00 	.word	0x40000c00
 80068d4:	40014000 	.word	0x40014000
 80068d8:	40001800 	.word	0x40001800

080068dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80068e6:	2300      	movs	r3, #0
 80068e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d101      	bne.n	80068f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80068f4:	2302      	movs	r3, #2
 80068f6:	e065      	b.n	80069c4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	4313      	orrs	r3, r2
 800690c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	4313      	orrs	r3, r2
 800691a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	4313      	orrs	r3, r2
 8006928:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4313      	orrs	r3, r2
 8006936:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	4313      	orrs	r3, r2
 8006944:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	695b      	ldr	r3, [r3, #20]
 8006950:	4313      	orrs	r3, r2
 8006952:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800695e:	4313      	orrs	r3, r2
 8006960:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	699b      	ldr	r3, [r3, #24]
 800696c:	041b      	lsls	r3, r3, #16
 800696e:	4313      	orrs	r3, r2
 8006970:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a16      	ldr	r2, [pc, #88]	@ (80069d0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d004      	beq.n	8006986 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a14      	ldr	r2, [pc, #80]	@ (80069d4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d115      	bne.n	80069b2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006990:	051b      	lsls	r3, r3, #20
 8006992:	4313      	orrs	r3, r2
 8006994:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	69db      	ldr	r3, [r3, #28]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80069c2:	2300      	movs	r3, #0
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3714      	adds	r7, #20
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr
 80069d0:	40010000 	.word	0x40010000
 80069d4:	40010400 	.word	0x40010400

080069d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <memset>:
 8006a14:	4402      	add	r2, r0
 8006a16:	4603      	mov	r3, r0
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d100      	bne.n	8006a1e <memset+0xa>
 8006a1c:	4770      	bx	lr
 8006a1e:	f803 1b01 	strb.w	r1, [r3], #1
 8006a22:	e7f9      	b.n	8006a18 <memset+0x4>

08006a24 <__libc_init_array>:
 8006a24:	b570      	push	{r4, r5, r6, lr}
 8006a26:	4d0d      	ldr	r5, [pc, #52]	@ (8006a5c <__libc_init_array+0x38>)
 8006a28:	4c0d      	ldr	r4, [pc, #52]	@ (8006a60 <__libc_init_array+0x3c>)
 8006a2a:	1b64      	subs	r4, r4, r5
 8006a2c:	10a4      	asrs	r4, r4, #2
 8006a2e:	2600      	movs	r6, #0
 8006a30:	42a6      	cmp	r6, r4
 8006a32:	d109      	bne.n	8006a48 <__libc_init_array+0x24>
 8006a34:	4d0b      	ldr	r5, [pc, #44]	@ (8006a64 <__libc_init_array+0x40>)
 8006a36:	4c0c      	ldr	r4, [pc, #48]	@ (8006a68 <__libc_init_array+0x44>)
 8006a38:	f000 f818 	bl	8006a6c <_init>
 8006a3c:	1b64      	subs	r4, r4, r5
 8006a3e:	10a4      	asrs	r4, r4, #2
 8006a40:	2600      	movs	r6, #0
 8006a42:	42a6      	cmp	r6, r4
 8006a44:	d105      	bne.n	8006a52 <__libc_init_array+0x2e>
 8006a46:	bd70      	pop	{r4, r5, r6, pc}
 8006a48:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a4c:	4798      	blx	r3
 8006a4e:	3601      	adds	r6, #1
 8006a50:	e7ee      	b.n	8006a30 <__libc_init_array+0xc>
 8006a52:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a56:	4798      	blx	r3
 8006a58:	3601      	adds	r6, #1
 8006a5a:	e7f2      	b.n	8006a42 <__libc_init_array+0x1e>
 8006a5c:	08006ab0 	.word	0x08006ab0
 8006a60:	08006ab0 	.word	0x08006ab0
 8006a64:	08006ab0 	.word	0x08006ab0
 8006a68:	08006ab4 	.word	0x08006ab4

08006a6c <_init>:
 8006a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a6e:	bf00      	nop
 8006a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a72:	bc08      	pop	{r3}
 8006a74:	469e      	mov	lr, r3
 8006a76:	4770      	bx	lr

08006a78 <_fini>:
 8006a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a7a:	bf00      	nop
 8006a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a7e:	bc08      	pop	{r3}
 8006a80:	469e      	mov	lr, r3
 8006a82:	4770      	bx	lr
