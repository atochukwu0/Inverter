
Inverter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007400  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ccmram       00000868  080075f8  080075f8  000085f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00008158  08007e60  08007e60  00008e60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800ffb8  0800ffb8  0001108c  2**0
                  CONTENTS
  5 .ARM          00000008  0800ffb8  0800ffb8  00010fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800ffc0  0800ffc0  0001108c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800ffc0  0800ffc0  00010fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800ffc4  0800ffc4  00010fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000008c  20000000  0800ffc8  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000065c  2000008c  08010054  0001108c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200006e8  08010054  000116e8  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0001108c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a255  00000000  00000000  000110ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000043f3  00000000  00000000  0002b30f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014c8  00000000  00000000  0002f708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fd0  00000000  00000000  00030bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002be37  00000000  00000000  00031ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001eb3b  00000000  00000000  0005d9d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00103de9  00000000  00000000  0007c512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001802fb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056f8  00000000  00000000  00180340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  00185a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000008c 	.word	0x2000008c
 8000214:	00000000 	.word	0x00000000
 8000218:	080075e0 	.word	0x080075e0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000090 	.word	0x20000090
 8000234:	080075e0 	.word	0x080075e0

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	@ 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_uldivmod>:
 80005b0:	b953      	cbnz	r3, 80005c8 <__aeabi_uldivmod+0x18>
 80005b2:	b94a      	cbnz	r2, 80005c8 <__aeabi_uldivmod+0x18>
 80005b4:	2900      	cmp	r1, #0
 80005b6:	bf08      	it	eq
 80005b8:	2800      	cmpeq	r0, #0
 80005ba:	bf1c      	itt	ne
 80005bc:	f04f 31ff 	movne.w	r1, #4294967295
 80005c0:	f04f 30ff 	movne.w	r0, #4294967295
 80005c4:	f000 b96a 	b.w	800089c <__aeabi_idiv0>
 80005c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005d0:	f000 f806 	bl	80005e0 <__udivmoddi4>
 80005d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005dc:	b004      	add	sp, #16
 80005de:	4770      	bx	lr

080005e0 <__udivmoddi4>:
 80005e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005e4:	9d08      	ldr	r5, [sp, #32]
 80005e6:	460c      	mov	r4, r1
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d14e      	bne.n	800068a <__udivmoddi4+0xaa>
 80005ec:	4694      	mov	ip, r2
 80005ee:	458c      	cmp	ip, r1
 80005f0:	4686      	mov	lr, r0
 80005f2:	fab2 f282 	clz	r2, r2
 80005f6:	d962      	bls.n	80006be <__udivmoddi4+0xde>
 80005f8:	b14a      	cbz	r2, 800060e <__udivmoddi4+0x2e>
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	4091      	lsls	r1, r2
 8000600:	fa20 f303 	lsr.w	r3, r0, r3
 8000604:	fa0c fc02 	lsl.w	ip, ip, r2
 8000608:	4319      	orrs	r1, r3
 800060a:	fa00 fe02 	lsl.w	lr, r0, r2
 800060e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000612:	fa1f f68c 	uxth.w	r6, ip
 8000616:	fbb1 f4f7 	udiv	r4, r1, r7
 800061a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800061e:	fb07 1114 	mls	r1, r7, r4, r1
 8000622:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000626:	fb04 f106 	mul.w	r1, r4, r6
 800062a:	4299      	cmp	r1, r3
 800062c:	d90a      	bls.n	8000644 <__udivmoddi4+0x64>
 800062e:	eb1c 0303 	adds.w	r3, ip, r3
 8000632:	f104 30ff 	add.w	r0, r4, #4294967295
 8000636:	f080 8112 	bcs.w	800085e <__udivmoddi4+0x27e>
 800063a:	4299      	cmp	r1, r3
 800063c:	f240 810f 	bls.w	800085e <__udivmoddi4+0x27e>
 8000640:	3c02      	subs	r4, #2
 8000642:	4463      	add	r3, ip
 8000644:	1a59      	subs	r1, r3, r1
 8000646:	fa1f f38e 	uxth.w	r3, lr
 800064a:	fbb1 f0f7 	udiv	r0, r1, r7
 800064e:	fb07 1110 	mls	r1, r7, r0, r1
 8000652:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000656:	fb00 f606 	mul.w	r6, r0, r6
 800065a:	429e      	cmp	r6, r3
 800065c:	d90a      	bls.n	8000674 <__udivmoddi4+0x94>
 800065e:	eb1c 0303 	adds.w	r3, ip, r3
 8000662:	f100 31ff 	add.w	r1, r0, #4294967295
 8000666:	f080 80fc 	bcs.w	8000862 <__udivmoddi4+0x282>
 800066a:	429e      	cmp	r6, r3
 800066c:	f240 80f9 	bls.w	8000862 <__udivmoddi4+0x282>
 8000670:	4463      	add	r3, ip
 8000672:	3802      	subs	r0, #2
 8000674:	1b9b      	subs	r3, r3, r6
 8000676:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800067a:	2100      	movs	r1, #0
 800067c:	b11d      	cbz	r5, 8000686 <__udivmoddi4+0xa6>
 800067e:	40d3      	lsrs	r3, r2
 8000680:	2200      	movs	r2, #0
 8000682:	e9c5 3200 	strd	r3, r2, [r5]
 8000686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800068a:	428b      	cmp	r3, r1
 800068c:	d905      	bls.n	800069a <__udivmoddi4+0xba>
 800068e:	b10d      	cbz	r5, 8000694 <__udivmoddi4+0xb4>
 8000690:	e9c5 0100 	strd	r0, r1, [r5]
 8000694:	2100      	movs	r1, #0
 8000696:	4608      	mov	r0, r1
 8000698:	e7f5      	b.n	8000686 <__udivmoddi4+0xa6>
 800069a:	fab3 f183 	clz	r1, r3
 800069e:	2900      	cmp	r1, #0
 80006a0:	d146      	bne.n	8000730 <__udivmoddi4+0x150>
 80006a2:	42a3      	cmp	r3, r4
 80006a4:	d302      	bcc.n	80006ac <__udivmoddi4+0xcc>
 80006a6:	4290      	cmp	r0, r2
 80006a8:	f0c0 80f0 	bcc.w	800088c <__udivmoddi4+0x2ac>
 80006ac:	1a86      	subs	r6, r0, r2
 80006ae:	eb64 0303 	sbc.w	r3, r4, r3
 80006b2:	2001      	movs	r0, #1
 80006b4:	2d00      	cmp	r5, #0
 80006b6:	d0e6      	beq.n	8000686 <__udivmoddi4+0xa6>
 80006b8:	e9c5 6300 	strd	r6, r3, [r5]
 80006bc:	e7e3      	b.n	8000686 <__udivmoddi4+0xa6>
 80006be:	2a00      	cmp	r2, #0
 80006c0:	f040 8090 	bne.w	80007e4 <__udivmoddi4+0x204>
 80006c4:	eba1 040c 	sub.w	r4, r1, ip
 80006c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006cc:	fa1f f78c 	uxth.w	r7, ip
 80006d0:	2101      	movs	r1, #1
 80006d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80006d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006da:	fb08 4416 	mls	r4, r8, r6, r4
 80006de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80006e2:	fb07 f006 	mul.w	r0, r7, r6
 80006e6:	4298      	cmp	r0, r3
 80006e8:	d908      	bls.n	80006fc <__udivmoddi4+0x11c>
 80006ea:	eb1c 0303 	adds.w	r3, ip, r3
 80006ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80006f2:	d202      	bcs.n	80006fa <__udivmoddi4+0x11a>
 80006f4:	4298      	cmp	r0, r3
 80006f6:	f200 80cd 	bhi.w	8000894 <__udivmoddi4+0x2b4>
 80006fa:	4626      	mov	r6, r4
 80006fc:	1a1c      	subs	r4, r3, r0
 80006fe:	fa1f f38e 	uxth.w	r3, lr
 8000702:	fbb4 f0f8 	udiv	r0, r4, r8
 8000706:	fb08 4410 	mls	r4, r8, r0, r4
 800070a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800070e:	fb00 f707 	mul.w	r7, r0, r7
 8000712:	429f      	cmp	r7, r3
 8000714:	d908      	bls.n	8000728 <__udivmoddi4+0x148>
 8000716:	eb1c 0303 	adds.w	r3, ip, r3
 800071a:	f100 34ff 	add.w	r4, r0, #4294967295
 800071e:	d202      	bcs.n	8000726 <__udivmoddi4+0x146>
 8000720:	429f      	cmp	r7, r3
 8000722:	f200 80b0 	bhi.w	8000886 <__udivmoddi4+0x2a6>
 8000726:	4620      	mov	r0, r4
 8000728:	1bdb      	subs	r3, r3, r7
 800072a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800072e:	e7a5      	b.n	800067c <__udivmoddi4+0x9c>
 8000730:	f1c1 0620 	rsb	r6, r1, #32
 8000734:	408b      	lsls	r3, r1
 8000736:	fa22 f706 	lsr.w	r7, r2, r6
 800073a:	431f      	orrs	r7, r3
 800073c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000740:	fa04 f301 	lsl.w	r3, r4, r1
 8000744:	ea43 030c 	orr.w	r3, r3, ip
 8000748:	40f4      	lsrs	r4, r6
 800074a:	fa00 f801 	lsl.w	r8, r0, r1
 800074e:	0c38      	lsrs	r0, r7, #16
 8000750:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000754:	fbb4 fef0 	udiv	lr, r4, r0
 8000758:	fa1f fc87 	uxth.w	ip, r7
 800075c:	fb00 441e 	mls	r4, r0, lr, r4
 8000760:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000764:	fb0e f90c 	mul.w	r9, lr, ip
 8000768:	45a1      	cmp	r9, r4
 800076a:	fa02 f201 	lsl.w	r2, r2, r1
 800076e:	d90a      	bls.n	8000786 <__udivmoddi4+0x1a6>
 8000770:	193c      	adds	r4, r7, r4
 8000772:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000776:	f080 8084 	bcs.w	8000882 <__udivmoddi4+0x2a2>
 800077a:	45a1      	cmp	r9, r4
 800077c:	f240 8081 	bls.w	8000882 <__udivmoddi4+0x2a2>
 8000780:	f1ae 0e02 	sub.w	lr, lr, #2
 8000784:	443c      	add	r4, r7
 8000786:	eba4 0409 	sub.w	r4, r4, r9
 800078a:	fa1f f983 	uxth.w	r9, r3
 800078e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000792:	fb00 4413 	mls	r4, r0, r3, r4
 8000796:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800079a:	fb03 fc0c 	mul.w	ip, r3, ip
 800079e:	45a4      	cmp	ip, r4
 80007a0:	d907      	bls.n	80007b2 <__udivmoddi4+0x1d2>
 80007a2:	193c      	adds	r4, r7, r4
 80007a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80007a8:	d267      	bcs.n	800087a <__udivmoddi4+0x29a>
 80007aa:	45a4      	cmp	ip, r4
 80007ac:	d965      	bls.n	800087a <__udivmoddi4+0x29a>
 80007ae:	3b02      	subs	r3, #2
 80007b0:	443c      	add	r4, r7
 80007b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80007b6:	fba0 9302 	umull	r9, r3, r0, r2
 80007ba:	eba4 040c 	sub.w	r4, r4, ip
 80007be:	429c      	cmp	r4, r3
 80007c0:	46ce      	mov	lr, r9
 80007c2:	469c      	mov	ip, r3
 80007c4:	d351      	bcc.n	800086a <__udivmoddi4+0x28a>
 80007c6:	d04e      	beq.n	8000866 <__udivmoddi4+0x286>
 80007c8:	b155      	cbz	r5, 80007e0 <__udivmoddi4+0x200>
 80007ca:	ebb8 030e 	subs.w	r3, r8, lr
 80007ce:	eb64 040c 	sbc.w	r4, r4, ip
 80007d2:	fa04 f606 	lsl.w	r6, r4, r6
 80007d6:	40cb      	lsrs	r3, r1
 80007d8:	431e      	orrs	r6, r3
 80007da:	40cc      	lsrs	r4, r1
 80007dc:	e9c5 6400 	strd	r6, r4, [r5]
 80007e0:	2100      	movs	r1, #0
 80007e2:	e750      	b.n	8000686 <__udivmoddi4+0xa6>
 80007e4:	f1c2 0320 	rsb	r3, r2, #32
 80007e8:	fa20 f103 	lsr.w	r1, r0, r3
 80007ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80007f0:	fa24 f303 	lsr.w	r3, r4, r3
 80007f4:	4094      	lsls	r4, r2
 80007f6:	430c      	orrs	r4, r1
 80007f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000800:	fa1f f78c 	uxth.w	r7, ip
 8000804:	fbb3 f0f8 	udiv	r0, r3, r8
 8000808:	fb08 3110 	mls	r1, r8, r0, r3
 800080c:	0c23      	lsrs	r3, r4, #16
 800080e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000812:	fb00 f107 	mul.w	r1, r0, r7
 8000816:	4299      	cmp	r1, r3
 8000818:	d908      	bls.n	800082c <__udivmoddi4+0x24c>
 800081a:	eb1c 0303 	adds.w	r3, ip, r3
 800081e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000822:	d22c      	bcs.n	800087e <__udivmoddi4+0x29e>
 8000824:	4299      	cmp	r1, r3
 8000826:	d92a      	bls.n	800087e <__udivmoddi4+0x29e>
 8000828:	3802      	subs	r0, #2
 800082a:	4463      	add	r3, ip
 800082c:	1a5b      	subs	r3, r3, r1
 800082e:	b2a4      	uxth	r4, r4
 8000830:	fbb3 f1f8 	udiv	r1, r3, r8
 8000834:	fb08 3311 	mls	r3, r8, r1, r3
 8000838:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800083c:	fb01 f307 	mul.w	r3, r1, r7
 8000840:	42a3      	cmp	r3, r4
 8000842:	d908      	bls.n	8000856 <__udivmoddi4+0x276>
 8000844:	eb1c 0404 	adds.w	r4, ip, r4
 8000848:	f101 36ff 	add.w	r6, r1, #4294967295
 800084c:	d213      	bcs.n	8000876 <__udivmoddi4+0x296>
 800084e:	42a3      	cmp	r3, r4
 8000850:	d911      	bls.n	8000876 <__udivmoddi4+0x296>
 8000852:	3902      	subs	r1, #2
 8000854:	4464      	add	r4, ip
 8000856:	1ae4      	subs	r4, r4, r3
 8000858:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800085c:	e739      	b.n	80006d2 <__udivmoddi4+0xf2>
 800085e:	4604      	mov	r4, r0
 8000860:	e6f0      	b.n	8000644 <__udivmoddi4+0x64>
 8000862:	4608      	mov	r0, r1
 8000864:	e706      	b.n	8000674 <__udivmoddi4+0x94>
 8000866:	45c8      	cmp	r8, r9
 8000868:	d2ae      	bcs.n	80007c8 <__udivmoddi4+0x1e8>
 800086a:	ebb9 0e02 	subs.w	lr, r9, r2
 800086e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000872:	3801      	subs	r0, #1
 8000874:	e7a8      	b.n	80007c8 <__udivmoddi4+0x1e8>
 8000876:	4631      	mov	r1, r6
 8000878:	e7ed      	b.n	8000856 <__udivmoddi4+0x276>
 800087a:	4603      	mov	r3, r0
 800087c:	e799      	b.n	80007b2 <__udivmoddi4+0x1d2>
 800087e:	4630      	mov	r0, r6
 8000880:	e7d4      	b.n	800082c <__udivmoddi4+0x24c>
 8000882:	46d6      	mov	lr, sl
 8000884:	e77f      	b.n	8000786 <__udivmoddi4+0x1a6>
 8000886:	4463      	add	r3, ip
 8000888:	3802      	subs	r0, #2
 800088a:	e74d      	b.n	8000728 <__udivmoddi4+0x148>
 800088c:	4606      	mov	r6, r0
 800088e:	4623      	mov	r3, r4
 8000890:	4608      	mov	r0, r1
 8000892:	e70f      	b.n	80006b4 <__udivmoddi4+0xd4>
 8000894:	3e02      	subs	r6, #2
 8000896:	4463      	add	r3, ip
 8000898:	e730      	b.n	80006fc <__udivmoddi4+0x11c>
 800089a:	bf00      	nop

0800089c <__aeabi_idiv0>:
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop

080008a0 <calc_duties>:
 * @param[in] vq Voltage in the q-axis.
 * @param[in] vDC DC voltage.
 * @param[in] theta_e Electrical angle in radians (-pi..pi).
 * @param[out] duties Pointer to the duties structure.
 */
void calc_duties(float vd, float vq, float vDC, float theta_e, volatile Duties *duties) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	ed2d 8b02 	vpush	{d8}
 80008a6:	b08e      	sub	sp, #56	@ 0x38
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	ed87 0a05 	vstr	s0, [r7, #20]
 80008ae:	edc7 0a04 	vstr	s1, [r7, #16]
 80008b2:	ed87 1a03 	vstr	s2, [r7, #12]
 80008b6:	edc7 1a02 	vstr	s3, [r7, #8]
 80008ba:	6078      	str	r0, [r7, #4]


  // inverse Park transform
  float alpha = (vd/vDC)*cosf(theta_e) - (vq/vDC)*sinf(theta_e);              // Alpha(D) = d*cos(Fi) - q*sin(Fi)
 80008bc:	ed97 7a05 	vldr	s14, [r7, #20]
 80008c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80008c4:	ee87 8a27 	vdiv.f32	s16, s14, s15
 80008c8:	ed97 0a02 	vldr	s0, [r7, #8]
 80008cc:	f006 fdc8 	bl	8007460 <cosf>
 80008d0:	eef0 7a40 	vmov.f32	s15, s0
 80008d4:	ee28 8a27 	vmul.f32	s16, s16, s15
 80008d8:	ed97 7a04 	vldr	s14, [r7, #16]
 80008dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80008e0:	eec7 8a27 	vdiv.f32	s17, s14, s15
 80008e4:	ed97 0a02 	vldr	s0, [r7, #8]
 80008e8:	f006 fcf6 	bl	80072d8 <sinf>
 80008ec:	eef0 7a40 	vmov.f32	s15, s0
 80008f0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80008f4:	ee78 7a67 	vsub.f32	s15, s16, s15
 80008f8:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
  float beta = (vd/vDC)*sinf(theta_e) + (vq/vDC)*cosf(theta_e);              // Beta(Q) = d*sin(Fi) + q*cos(Fi)
 80008fc:	ed97 7a05 	vldr	s14, [r7, #20]
 8000900:	edd7 7a03 	vldr	s15, [r7, #12]
 8000904:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8000908:	ed97 0a02 	vldr	s0, [r7, #8]
 800090c:	f006 fce4 	bl	80072d8 <sinf>
 8000910:	eef0 7a40 	vmov.f32	s15, s0
 8000914:	ee28 8a27 	vmul.f32	s16, s16, s15
 8000918:	ed97 7a04 	vldr	s14, [r7, #16]
 800091c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000920:	eec7 8a27 	vdiv.f32	s17, s14, s15
 8000924:	ed97 0a02 	vldr	s0, [r7, #8]
 8000928:	f006 fd9a 	bl	8007460 <cosf>
 800092c:	eef0 7a40 	vmov.f32	s15, s0
 8000930:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8000934:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000938:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30


  svpwm_struct svpwm;

  // Assign values to SVPWM structure, works with alpha/beta not a/b/c
  svpwm.alpha = alpha;
 800093c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800093e:	61bb      	str	r3, [r7, #24]
  svpwm.beta = beta;
 8000940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000942:	61fb      	str	r3, [r7, #28]
  svpwm_calc(&svpwm);
 8000944:	f107 0318 	add.w	r3, r7, #24
 8000948:	4618      	mov	r0, r3
 800094a:	f007 f839 	bl	80079c0 <svpwm_calc>

  // Assign SVPWM duties (0 to 1, high side)
  duties->Da = svpwm.Da;
 800094e:	6a3a      	ldr	r2, [r7, #32]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	601a      	str	r2, [r3, #0]
  duties->Db = svpwm.Db;
 8000954:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	605a      	str	r2, [r3, #4]
  duties->Dc = svpwm.Dc;
 800095a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	609a      	str	r2, [r3, #8]

}
 8000960:	bf00      	nop
 8000962:	3738      	adds	r7, #56	@ 0x38
 8000964:	46bd      	mov	sp, r7
 8000966:	ecbd 8b02 	vpop	{d8}
 800096a:	bd80      	pop	{r7, pc}

0800096c <eval_inv_FSM>:
 *
 * This function executes the finite state machine to control the inverter based on its current state.
 *
 * @param inv Pointer to the inverter structure.
 */
void eval_inv_FSM(volatile InverterStruct *inv) {
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
    switch (inv->state) {
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	7d1b      	ldrb	r3, [r3, #20]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	2b03      	cmp	r3, #3
 800097c:	d81a      	bhi.n	80009b4 <eval_inv_FSM+0x48>
 800097e:	a201      	add	r2, pc, #4	@ (adr r2, 8000984 <eval_inv_FSM+0x18>)
 8000980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000984:	08000995 	.word	0x08000995
 8000988:	0800099d 	.word	0x0800099d
 800098c:	080009a5 	.word	0x080009a5
 8000990:	080009ad 	.word	0x080009ad
        case INV_STATE_IDLE:
        	handle_idle(inv);
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f000 f813 	bl	80009c0 <handle_idle>
            break;
 800099a:	e00c      	b.n	80009b6 <eval_inv_FSM+0x4a>
        case INV_STATE_STARTUP:
        	handle_startup(inv);
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f000 f829 	bl	80009f4 <handle_startup>
            break;
 80009a2:	e008      	b.n	80009b6 <eval_inv_FSM+0x4a>
        case INV_STATE_RUNNING:
        	handle_running(inv);
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f000 f83f 	bl	8000a28 <handle_running>
            break;
 80009aa:	e004      	b.n	80009b6 <eval_inv_FSM+0x4a>
        case INV_STATE_FAULT:
        	handle_fault(inv);
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f000 f855 	bl	8000a5c <handle_fault>
            break;
 80009b2:	e000      	b.n	80009b6 <eval_inv_FSM+0x4a>
        default:
            // Invalid state, handle error
            break;
 80009b4:	bf00      	nop
    }
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop

080009c0 <handle_idle>:
 *
 * This function handles the actions and transitions for the idle state of the inverter.
 *
 * @param inv Pointer to the inverter structure.
 */
void handle_idle(volatile InverterStruct *inv) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
    // Perform actions required in idle state
    // Transition conditions to other states:
    // - Start startup sequence based on input condition
    // - Transition to fault state based on error conditions
    inv->led->mode = LED_MODE_OFF;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2203      	movs	r2, #3
 80009ce:	719a      	strb	r2, [r3, #6]
    DISABLE(inv->enable_port, inv->enable_pin);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6858      	ldr	r0, [r3, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	891b      	ldrh	r3, [r3, #8]
 80009d8:	b29b      	uxth	r3, r3
 80009da:	2200      	movs	r2, #0
 80009dc:	4619      	mov	r1, r3
 80009de:	f003 fdcd 	bl	800457c <HAL_GPIO_WritePin>
    disable_PWM(inv->htim);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	68db      	ldr	r3, [r3, #12]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 fa32 	bl	8000e50 <disable_PWM>

}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <handle_startup>:
 *
 * This function handles the actions and transitions for the startup state of the inverter.
 *
 * @param inv Pointer to the inverter structure.
 */
void handle_startup(volatile InverterStruct *inv) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
    // Perform actions required in startup state
    // Transition conditions to other states:
    // - Transition to running state when startup sequence completes successfully
    // - Transition to fault state based on error conditions during startup
    inv->led->mode = LED_MODE_BLINK_FAST;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2200      	movs	r2, #0
 8000a02:	719a      	strb	r2, [r3, #6]
    DISABLE(inv->enable_port, inv->enable_pin);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6858      	ldr	r0, [r3, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	891b      	ldrh	r3, [r3, #8]
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	2200      	movs	r2, #0
 8000a10:	4619      	mov	r1, r3
 8000a12:	f003 fdb3 	bl	800457c <HAL_GPIO_WritePin>
    enable_PWM(inv->htim);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	68db      	ldr	r3, [r3, #12]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 f9f2 	bl	8000e04 <enable_PWM>

}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <handle_running>:
 *
 * This function handles the actions and transitions for the running state of the inverter.
 *
 * @param inv Pointer to the inverter structure.
 */
void handle_running(volatile InverterStruct *inv) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
    // Perform actions required in running state
    // This is where the main control loop resides
    // Monitor inverter variables, adjust control parameters, etc.
    // Transition conditions to other states:
    // - Transition to fault state based on error conditions during operation
    inv->led->mode = LED_MODE_ON;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2202      	movs	r2, #2
 8000a36:	719a      	strb	r2, [r3, #6]
    ENABLE(inv->enable_port, inv->enable_pin);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	6858      	ldr	r0, [r3, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	891b      	ldrh	r3, [r3, #8]
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	2201      	movs	r2, #1
 8000a44:	4619      	mov	r1, r3
 8000a46:	f003 fd99 	bl	800457c <HAL_GPIO_WritePin>
    enable_PWM(inv->htim);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	68db      	ldr	r3, [r3, #12]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 f9d8 	bl	8000e04 <enable_PWM>

}
 8000a54:	bf00      	nop
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <handle_fault>:
 *
 * This function handles the actions and transitions for the fault state of the inverter.
 *
 * @param inv Pointer to the inverter structure.
 */
void handle_fault(volatile InverterStruct *inv) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
    // Perform actions required in fault state
    // This could involve shutting down the inverter, logging error messages, etc.
    // Transition conditions to other states:
    // - Retry startup sequence after a delay if fault condition is recoverable
    // - Transition to idle state after fault is resolved
    inv->led->mode = LED_MODE_BLINK_SLOW;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2201      	movs	r2, #1
 8000a6a:	719a      	strb	r2, [r3, #6]
    DISABLE(inv->enable_port, inv->enable_pin);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6858      	ldr	r0, [r3, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	891b      	ldrh	r3, [r3, #8]
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	2200      	movs	r2, #0
 8000a78:	4619      	mov	r1, r3
 8000a7a:	f003 fd7f 	bl	800457c <HAL_GPIO_WritePin>
    disable_PWM(inv->htim);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	68db      	ldr	r3, [r3, #12]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 f9e4 	bl	8000e50 <disable_PWM>
}
 8000a88:	bf00      	nop
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <initialize_inverter>:
 * @param[in] enable_port Pointer to the GPIO port for enabling/disabling the inverter.
 * @param[in] enable_pin Pin number for enabling/disabling the inverter.
 * @param[in] htim Timer peripheral for the PWM output.
 * @param[in] hadc ADC peripheral for the current phase current and DC voltage sensing.
 */
void initialize_inverter(volatile InverterStruct *inv, LED *led, GPIO_TypeDef *enable_port, uint16_t enable_pin, TIM_HandleTypeDef *htim, ADC_HandleTypeDef *hadc) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
 8000a9c:	807b      	strh	r3, [r7, #2]
    // Initialize inverter structure
    inv->state = INV_STATE_STARTUP;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	751a      	strb	r2, [r3, #20]
    inv->led = led;
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	68ba      	ldr	r2, [r7, #8]
 8000aa8:	601a      	str	r2, [r3, #0]
    inv->enable_pin = enable_pin;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	887a      	ldrh	r2, [r7, #2]
 8000aae:	811a      	strh	r2, [r3, #8]
    inv->enable_port = enable_port;
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	605a      	str	r2, [r3, #4]
    inv->htim = htim;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	69ba      	ldr	r2, [r7, #24]
 8000aba:	60da      	str	r2, [r3, #12]
    inv->hadc = hadc;
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	69fa      	ldr	r2, [r7, #28]
 8000ac0:	611a      	str	r2, [r3, #16]
    inv->duties.Da = 0.5;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8000ac8:	64da      	str	r2, [r3, #76]	@ 0x4c
    inv->duties.Db = 0.5;
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8000ad0:	651a      	str	r2, [r3, #80]	@ 0x50
    inv->duties.Dc = 0.5;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8000ad8:	655a      	str	r2, [r3, #84]	@ 0x54

    HAL_TIM_Base_Start_IT(inv->htim);
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f004 ffbe 	bl	8005a60 <HAL_TIM_Base_Start_IT>

}
 8000ae4:	bf00      	nop
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <get_currents_voltage>:
  * @param[out]  analog Pointer to the ADC struct to store the results.
  * @param[out] feedback Pointer to the Feedback struct to store id and iq.
  * @param[in]  theta_e Electrical angle in radians.
  * @retval OK 0 if an error occurred, 1 if successful.
  */
uint8_t get_currents_voltage(volatile uint32_t ADC_raw[], volatile Analog* analog, volatile Feedback* feedback, float theta_e){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	@ 0x28
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
 8000af8:	ed87 0a00 	vstr	s0, [r7]

    // Calculate currents and voltage
    float ia = get_linear(ADC_raw[0], CURRENT_SLOPE, CURRENT_OFFSET);
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	eddf 0a29 	vldr	s1, [pc, #164]	@ 8000ba8 <get_currents_voltage+0xbc>
 8000b04:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 8000bac <get_currents_voltage+0xc0>
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f000 f855 	bl	8000bb8 <get_linear>
 8000b0e:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    float ib = get_linear(ADC_raw[1], CURRENT_SLOPE, CURRENT_OFFSET);
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	3304      	adds	r3, #4
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	eddf 0a23 	vldr	s1, [pc, #140]	@ 8000ba8 <get_currents_voltage+0xbc>
 8000b1c:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 8000bac <get_currents_voltage+0xc0>
 8000b20:	4618      	mov	r0, r3
 8000b22:	f000 f849 	bl	8000bb8 <get_linear>
 8000b26:	ed87 0a08 	vstr	s0, [r7, #32]
    float ic = get_linear(ADC_raw[2], CURRENT_SLOPE, CURRENT_OFFSET);
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	3308      	adds	r3, #8
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8000ba8 <get_currents_voltage+0xbc>
 8000b34:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 8000bac <get_currents_voltage+0xc0>
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f000 f83d 	bl	8000bb8 <get_linear>
 8000b3e:	ed87 0a07 	vstr	s0, [r7, #28]
    float vDC = get_linear(ADC_raw[3], VOLTAGE_SLOPE, VOLTAGE_OFFSET);
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	330c      	adds	r3, #12
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	eddf 0a19 	vldr	s1, [pc, #100]	@ 8000bb0 <get_currents_voltage+0xc4>
 8000b4c:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8000bb4 <get_currents_voltage+0xc8>
 8000b50:	4618      	mov	r0, r3
 8000b52:	f000 f831 	bl	8000bb8 <get_linear>
 8000b56:	ed87 0a06 	vstr	s0, [r7, #24]

    // Store the measurements
    analog->ia = ia;
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b5e:	601a      	str	r2, [r3, #0]
    analog->ib = ib;
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	6a3a      	ldr	r2, [r7, #32]
 8000b64:	605a      	str	r2, [r3, #4]
    analog->ic = ic;
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	69fa      	ldr	r2, [r7, #28]
 8000b6a:	609a      	str	r2, [r3, #8]
    analog->vDC = vDC;
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	69ba      	ldr	r2, [r7, #24]
 8000b70:	60da      	str	r2, [r3, #12]

    // Define variables to store DQ currents
    float id_meas, iq_meas;

    // Pass pointers to id_meas and iq_meas
    get_idiq(ia, ib, ic, theta_e, &id_meas, &iq_meas);
 8000b72:	f107 0210 	add.w	r2, r7, #16
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	4611      	mov	r1, r2
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	edd7 1a00 	vldr	s3, [r7]
 8000b82:	ed97 1a07 	vldr	s2, [r7, #28]
 8000b86:	edd7 0a08 	vldr	s1, [r7, #32]
 8000b8a:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8000b8e:	f000 f83f 	bl	8000c10 <get_idiq>

    // Store DQ currents in feedback struct
    feedback->id_meas = id_meas;
 8000b92:	697a      	ldr	r2, [r7, #20]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	601a      	str	r2, [r3, #0]
    feedback->iq_meas = iq_meas;
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	605a      	str	r2, [r3, #4]

    return 1; // Success
 8000b9e:	2301      	movs	r3, #1
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3728      	adds	r7, #40	@ 0x28
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	3fd9afe4 	.word	0x3fd9afe4
 8000bac:	4259afe4 	.word	0x4259afe4
 8000bb0:	3caaa3ad 	.word	0x3caaa3ad
 8000bb4:	4383b7ae 	.word	0x4383b7ae

08000bb8 <get_linear>:
  * @param[in]  bits The ADC reading.
  * @param[in]  slope The slope (units per volt).
  * @param[in]  offset The offset (volts at zero).
  * @retval measurement The physical measurement.
  */
float get_linear(uint32_t bits, float slope, float offset) {
 8000bb8:	b480      	push	{r7}
 8000bba:	b087      	sub	sp, #28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	ed87 0a02 	vstr	s0, [r7, #8]
 8000bc4:	edc7 0a01 	vstr	s1, [r7, #4]
    // Convert ADC reading to voltage
    float voltage = (float) bits * 0.0008058608f; // Assuming 12-bit ADC and 3.3V reference (bits * (3.3 V / 4095.0 bits))
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	ee07 3a90 	vmov	s15, r3
 8000bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bd2:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000c0c <get_linear+0x54>
 8000bd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bda:	edc7 7a05 	vstr	s15, [r7, #20]

    // Convert voltage to physical measurement
    float measurement = (voltage - offset) * slope;
 8000bde:	ed97 7a05 	vldr	s14, [r7, #20]
 8000be2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000be6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bea:	ed97 7a02 	vldr	s14, [r7, #8]
 8000bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bf2:	edc7 7a04 	vstr	s15, [r7, #16]

    return measurement;
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	ee07 3a90 	vmov	s15, r3
}
 8000bfc:	eeb0 0a67 	vmov.f32	s0, s15
 8000c00:	371c      	adds	r7, #28
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	3a534067 	.word	0x3a534067

08000c10 <get_idiq>:
 * @param[in] ic Phase C current in A.
 * @param[in] theta_e Electrical rotor position in radians.
 * @param[out] id_meas Pointer to store the D-axis current.
 * @param[out] iq_meas Pointer to store the Q-axis current.
 */
void get_idiq(float ia, float ib, float ic, float theta_e, float *id_meas, float *iq_meas) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	ed2d 8b02 	vpush	{d8}
 8000c16:	b088      	sub	sp, #32
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	ed87 0a05 	vstr	s0, [r7, #20]
 8000c1e:	edc7 0a04 	vstr	s1, [r7, #16]
 8000c22:	ed87 1a03 	vstr	s2, [r7, #12]
 8000c26:	edc7 1a02 	vstr	s3, [r7, #8]
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	6039      	str	r1, [r7, #0]

	// Compute alpha beta using Clarke transformation
    float alpha = ia;
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	61fb      	str	r3, [r7, #28]
    float beta = (ib - ic) * ISQ3;
 8000c32:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c36:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c3e:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000cbc <get_idiq+0xac>
 8000c42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c46:	edc7 7a06 	vstr	s15, [r7, #24]
    // float beta = (ia + 2.0F*ib) * ISQ3;

    // Park transformation
    *id_meas = alpha * cosf(theta_e) + beta * sinf(theta_e);  // d = alpha * cos(theta_e) + beta * sin(theta_e)
 8000c4a:	ed97 0a02 	vldr	s0, [r7, #8]
 8000c4e:	f006 fc07 	bl	8007460 <cosf>
 8000c52:	eeb0 7a40 	vmov.f32	s14, s0
 8000c56:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c5a:	ee27 8a27 	vmul.f32	s16, s14, s15
 8000c5e:	ed97 0a02 	vldr	s0, [r7, #8]
 8000c62:	f006 fb39 	bl	80072d8 <sinf>
 8000c66:	eeb0 7a40 	vmov.f32	s14, s0
 8000c6a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c72:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	edc3 7a00 	vstr	s15, [r3]
    *iq_meas = beta * cosf(theta_e) - alpha * sinf(theta_e);  // q = beta * cos(theta_e) - alpha * sin(theta_e)
 8000c7c:	ed97 0a02 	vldr	s0, [r7, #8]
 8000c80:	f006 fbee 	bl	8007460 <cosf>
 8000c84:	eeb0 7a40 	vmov.f32	s14, s0
 8000c88:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c8c:	ee27 8a27 	vmul.f32	s16, s14, s15
 8000c90:	ed97 0a02 	vldr	s0, [r7, #8]
 8000c94:	f006 fb20 	bl	80072d8 <sinf>
 8000c98:	eeb0 7a40 	vmov.f32	s14, s0
 8000c9c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000ca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ca4:	ee78 7a67 	vsub.f32	s15, s16, s15
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	edc3 7a00 	vstr	s15, [r3]

}
 8000cae:	bf00      	nop
 8000cb0:	3720      	adds	r7, #32
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	ecbd 8b02 	vpop	{d8}
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	3f13cd3a 	.word	0x3f13cd3a

08000cc0 <get_temperature>:
 *
 * @param[in] bits ADC reading converted to bits.
 * @param[in] tempLUT Lookup table containing temperature values.
 * @return Temperature corresponding to the provided ADC bits.
 */
float get_temperature(uint32_t bits, const float tempLUT[]){
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
    return tempLUT[bits];
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	683a      	ldr	r2, [r7, #0]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	ee07 3a90 	vmov	s15, r3
}
 8000cd8:	eeb0 0a67 	vmov.f32	s0, s15
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
	...

08000ce8 <handle_LED>:
 * This function handles the LED blinking modes based on the LED mode and current millisecond counter.
 *
 * @param led Pointer to the LED structure.
 * @param ms_counter Current millisecond counter.
 */
void handle_LED(LED *led, uint32_t ms_counter) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
    switch (led->mode) {
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	799b      	ldrb	r3, [r3, #6]
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	d858      	bhi.n	8000dac <handle_LED+0xc4>
 8000cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8000d00 <handle_LED+0x18>)
 8000cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d00:	08000d11 	.word	0x08000d11
 8000d04:	08000d4b 	.word	0x08000d4b
 8000d08:	08000d89 	.word	0x08000d89
 8000d0c:	08000d9b 	.word	0x08000d9b
        case LED_MODE_BLINK_FAST:
            if (ms_counter % 200 < 100) {
 8000d10:	683a      	ldr	r2, [r7, #0]
 8000d12:	4b29      	ldr	r3, [pc, #164]	@ (8000db8 <handle_LED+0xd0>)
 8000d14:	fba3 1302 	umull	r1, r3, r3, r2
 8000d18:	099b      	lsrs	r3, r3, #6
 8000d1a:	21c8      	movs	r1, #200	@ 0xc8
 8000d1c:	fb01 f303 	mul.w	r3, r1, r3
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	2b63      	cmp	r3, #99	@ 0x63
 8000d24:	d808      	bhi.n	8000d38 <handle_LED+0x50>
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_SET);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6818      	ldr	r0, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	889b      	ldrh	r3, [r3, #4]
 8000d2e:	2201      	movs	r2, #1
 8000d30:	4619      	mov	r1, r3
 8000d32:	f003 fc23 	bl	800457c <HAL_GPIO_WritePin>
            } else {
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
            }
            break;
 8000d36:	e03a      	b.n	8000dae <handle_LED+0xc6>
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6818      	ldr	r0, [r3, #0]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	889b      	ldrh	r3, [r3, #4]
 8000d40:	2200      	movs	r2, #0
 8000d42:	4619      	mov	r1, r3
 8000d44:	f003 fc1a 	bl	800457c <HAL_GPIO_WritePin>
            break;
 8000d48:	e031      	b.n	8000dae <handle_LED+0xc6>
        case LED_MODE_BLINK_SLOW:
            if (ms_counter % 1000 < 500) {
 8000d4a:	683a      	ldr	r2, [r7, #0]
 8000d4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000dbc <handle_LED+0xd4>)
 8000d4e:	fba3 1302 	umull	r1, r3, r3, r2
 8000d52:	099b      	lsrs	r3, r3, #6
 8000d54:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000d58:	fb01 f303 	mul.w	r3, r1, r3
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000d62:	d208      	bcs.n	8000d76 <handle_LED+0x8e>
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_SET);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6818      	ldr	r0, [r3, #0]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	889b      	ldrh	r3, [r3, #4]
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	4619      	mov	r1, r3
 8000d70:	f003 fc04 	bl	800457c <HAL_GPIO_WritePin>
            } else {
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
            }
            break;
 8000d74:	e01b      	b.n	8000dae <handle_LED+0xc6>
                HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6818      	ldr	r0, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	889b      	ldrh	r3, [r3, #4]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	4619      	mov	r1, r3
 8000d82:	f003 fbfb 	bl	800457c <HAL_GPIO_WritePin>
            break;
 8000d86:	e012      	b.n	8000dae <handle_LED+0xc6>
        case LED_MODE_ON:
            HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_SET);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6818      	ldr	r0, [r3, #0]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	889b      	ldrh	r3, [r3, #4]
 8000d90:	2201      	movs	r2, #1
 8000d92:	4619      	mov	r1, r3
 8000d94:	f003 fbf2 	bl	800457c <HAL_GPIO_WritePin>
            break;
 8000d98:	e009      	b.n	8000dae <handle_LED+0xc6>
        case LED_MODE_OFF:
            HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6818      	ldr	r0, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	889b      	ldrh	r3, [r3, #4]
 8000da2:	2200      	movs	r2, #0
 8000da4:	4619      	mov	r1, r3
 8000da6:	f003 fbe9 	bl	800457c <HAL_GPIO_WritePin>
            break;
 8000daa:	e000      	b.n	8000dae <handle_LED+0xc6>
        default:
            // Invalid LED mode
            break;
 8000dac:	bf00      	nop
    }
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	51eb851f 	.word	0x51eb851f
 8000dbc:	10624dd3 	.word	0x10624dd3

08000dc0 <handle_direction>:
 * and vice versa.
 *
 * @param dir_left Pointer to the direction parameter in the left inverter structure.
 * @param dir_right Pointer to the direction parameter in the right inverter structure.
 */
void handle_direction(volatile int8_t *dir_left, volatile int8_t *dir_right){
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
	// Read the state of the DIR switch
    GPIO_PinState dirState = HAL_GPIO_ReadPin(DIR_GPIO_Port, DIR_Pin);
 8000dca:	2108      	movs	r1, #8
 8000dcc:	480c      	ldr	r0, [pc, #48]	@ (8000e00 <handle_direction+0x40>)
 8000dce:	f003 fbbd 	bl	800454c <HAL_GPIO_ReadPin>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	73fb      	strb	r3, [r7, #15]

    // Update the directions of the inverters based on the DIR switch state
    if (dirState == GPIO_PIN_SET) {
 8000dd6:	7bfb      	ldrb	r3, [r7, #15]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d106      	bne.n	8000dea <handle_direction+0x2a>
    	*dir_left = 1;  // CW
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2201      	movs	r2, #1
 8000de0:	701a      	strb	r2, [r3, #0]
    	*dir_right = -1;  // CCW
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	22ff      	movs	r2, #255	@ 0xff
 8000de6:	701a      	strb	r2, [r3, #0]
    } else {
    	*dir_left = -1;  // CCW
    	*dir_right = 1;  // CW
    }
}
 8000de8:	e005      	b.n	8000df6 <handle_direction+0x36>
    	*dir_left = -1;  // CCW
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	22ff      	movs	r2, #255	@ 0xff
 8000dee:	701a      	strb	r2, [r3, #0]
    	*dir_right = 1;  // CW
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	2201      	movs	r2, #1
 8000df4:	701a      	strb	r2, [r3, #0]
}
 8000df6:	bf00      	nop
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40020c00 	.word	0x40020c00

08000e04 <enable_PWM>:
 *
 * This function enables PWM output for the specified timer.
 *
 * @param htim Pointer to the TIM_HandleTypeDef structure.
 */
void enable_PWM(TIM_HandleTypeDef *htim) {
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]

//	Reset the counter
//	htim->Instance->CNT=0;
	htim->Instance->CCMR1 = 0x6868; // Set Channel 1 and Channel 2 Output Compare mode to PWM Mode
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f646 0268 	movw	r2, #26728	@ 0x6868
 8000e14:	619a      	str	r2, [r3, #24]

//	htim1.Instance->CCER = 0x888;
	htim->Instance->CCER = 0x10555;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a0c      	ldr	r2, [pc, #48]	@ (8000e4c <enable_PWM+0x48>)
 8000e1c:	621a      	str	r2, [r3, #32]

//	Enable Main Output
	htim->Instance->BDTR |=(1<<15);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000e2c:	645a      	str	r2, [r3, #68]	@ 0x44

//	Enable Counter
	htim->Instance->CR1 |=1;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f042 0201 	orr.w	r2, r2, #1
 8000e3c:	601a      	str	r2, [r3, #0]

}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	00010555 	.word	0x00010555

08000e50 <disable_PWM>:
 *
 * This function disables PWM output for the specified timer.
 *
 * @param htim Pointer to the TIM_HandleTypeDef structure.
 */
void disable_PWM(TIM_HandleTypeDef *htim) {
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]

	//Disable outputs and select the polarity of each output
	htim->Instance->CNT=0;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	625a      	str	r2, [r3, #36]	@ 0x24


	htim->Instance->CCER = 0xCCC;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f640 42cc 	movw	r2, #3276	@ 0xccc
 8000e68:	621a      	str	r2, [r3, #32]
	//	htim1.Instance->CCER |= 0x555;

		//Disable Main Output
	htim->Instance->BDTR &= 0xFFFF7FFF;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000e78:	645a      	str	r2, [r3, #68]	@ 0x44
	//	htim1.Instance->BDTR &=(0<<15);
}
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <update_PWM>:
 * This function sets the duty cycles for the PWM channels.
 *
 * @param htim Pointer to the TIM_HandleTypeDef structure.
 * @param duties Duties structure containing duty cycle values.
 */
void update_PWM(TIM_HandleTypeDef *htim, Duties duties) {
 8000e86:	b480      	push	{r7}
 8000e88:	b085      	sub	sp, #20
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	60f8      	str	r0, [r7, #12]
 8000e8e:	eef0 6a40 	vmov.f32	s13, s0
 8000e92:	eeb0 7a60 	vmov.f32	s14, s1
 8000e96:	eef0 7a41 	vmov.f32	s15, s2
 8000e9a:	edc7 6a00 	vstr	s13, [r7]
 8000e9e:	ed87 7a01 	vstr	s14, [r7, #4]
 8000ea2:	edc7 7a02 	vstr	s15, [r7, #8]


	htim->Instance->CCR1 = ((int32_t)(htim->Instance->ARR) * (1.0F-duties.Da));
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eac:	ee07 3a90 	vmov	s15, r3
 8000eb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eb4:	edd7 7a00 	vldr	s15, [r7]
 8000eb8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000ebc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ecc:	ee17 2a90 	vmov	r2, s15
 8000ed0:	635a      	str	r2, [r3, #52]	@ 0x34
	htim->Instance->CCR2 = ((int32_t)(htim->Instance->ARR) * (1.0F-duties.Db));
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ed8:	ee07 3a90 	vmov	s15, r3
 8000edc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ee0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ee4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000ee8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ef8:	ee17 2a90 	vmov	r2, s15
 8000efc:	639a      	str	r2, [r3, #56]	@ 0x38
	htim->Instance->CCR3 = ((int32_t)(htim->Instance->ARR) * (1.0F-duties.Dc));
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f04:	ee07 3a90 	vmov	s15, r3
 8000f08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f10:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000f14:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000f18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f24:	ee17 2a90 	vmov	r2, s15
 8000f28:	63da      	str	r2, [r3, #60]	@ 0x3c

}
 8000f2a:	bf00      	nop
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
	...

08000f38 <tasks_1ms>:
 * @brief Function to be executed every 1ms.
 *
 * This function is called by the TIM6 IRQ handler every millisecond.
 * It increments the millisecond counter and executes all the low priority tasks.
 */
void tasks_1ms(void) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
    // Increment millisecond counter
    ms_counter++;
 8000f3c:	4b24      	ldr	r3, [pc, #144]	@ (8000fd0 <tasks_1ms+0x98>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	3301      	adds	r3, #1
 8000f42:	4a23      	ldr	r2, [pc, #140]	@ (8000fd0 <tasks_1ms+0x98>)
 8000f44:	6013      	str	r3, [r2, #0]

    // Call LED handler for left, right, and error LEDs
    handle_LED(&led_left, ms_counter);
 8000f46:	4b22      	ldr	r3, [pc, #136]	@ (8000fd0 <tasks_1ms+0x98>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4821      	ldr	r0, [pc, #132]	@ (8000fd4 <tasks_1ms+0x9c>)
 8000f4e:	f7ff fecb 	bl	8000ce8 <handle_LED>
    handle_LED(&led_right, ms_counter);
 8000f52:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd0 <tasks_1ms+0x98>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4619      	mov	r1, r3
 8000f58:	481f      	ldr	r0, [pc, #124]	@ (8000fd8 <tasks_1ms+0xa0>)
 8000f5a:	f7ff fec5 	bl	8000ce8 <handle_LED>
    handle_LED(&ledError, ms_counter);
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <tasks_1ms+0x98>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4619      	mov	r1, r3
 8000f64:	481d      	ldr	r0, [pc, #116]	@ (8000fdc <tasks_1ms+0xa4>)
 8000f66:	f7ff febf 	bl	8000ce8 <handle_LED>

    // Read direction switch
    handle_direction(&inverter_left.direction, &inverter_right.direction);
 8000f6a:	491d      	ldr	r1, [pc, #116]	@ (8000fe0 <tasks_1ms+0xa8>)
 8000f6c:	481d      	ldr	r0, [pc, #116]	@ (8000fe4 <tasks_1ms+0xac>)
 8000f6e:	f7ff ff27 	bl	8000dc0 <handle_direction>


    inverter_left.temp_inverter = get_temperature(rawADC_temp[0], tempLUT_inverter);
 8000f72:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe8 <tasks_1ms+0xb0>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	491d      	ldr	r1, [pc, #116]	@ (8000fec <tasks_1ms+0xb4>)
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff fea1 	bl	8000cc0 <get_temperature>
 8000f7e:	eef0 7a40 	vmov.f32	s15, s0
 8000f82:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff0 <tasks_1ms+0xb8>)
 8000f84:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
    inverter_right.temp_inverter = get_temperature(rawADC_temp[1], tempLUT_inverter);
 8000f88:	4b17      	ldr	r3, [pc, #92]	@ (8000fe8 <tasks_1ms+0xb0>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	4917      	ldr	r1, [pc, #92]	@ (8000fec <tasks_1ms+0xb4>)
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fe96 	bl	8000cc0 <get_temperature>
 8000f94:	eef0 7a40 	vmov.f32	s15, s0
 8000f98:	4b16      	ldr	r3, [pc, #88]	@ (8000ff4 <tasks_1ms+0xbc>)
 8000f9a:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
    inverter_left.temp_motor = get_temperature(rawADC_temp[2], tempLUT_motor);
 8000f9e:	4b12      	ldr	r3, [pc, #72]	@ (8000fe8 <tasks_1ms+0xb0>)
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	4915      	ldr	r1, [pc, #84]	@ (8000ff8 <tasks_1ms+0xc0>)
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fe8b 	bl	8000cc0 <get_temperature>
 8000faa:	eef0 7a40 	vmov.f32	s15, s0
 8000fae:	4b10      	ldr	r3, [pc, #64]	@ (8000ff0 <tasks_1ms+0xb8>)
 8000fb0:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
    inverter_right.temp_motor = get_temperature(rawADC_temp[3], tempLUT_motor);
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe8 <tasks_1ms+0xb0>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	490f      	ldr	r1, [pc, #60]	@ (8000ff8 <tasks_1ms+0xc0>)
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff fe80 	bl	8000cc0 <get_temperature>
 8000fc0:	eef0 7a40 	vmov.f32	s15, s0
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff4 <tasks_1ms+0xbc>)
 8000fc6:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200001a0 	.word	0x200001a0
 8000fd4:	20000000 	.word	0x20000000
 8000fd8:	20000008 	.word	0x20000008
 8000fdc:	20000010 	.word	0x20000010
 8000fe0:	20000164 	.word	0x20000164
 8000fe4:	20000100 	.word	0x20000100
 8000fe8:	20000190 	.word	0x20000190
 8000fec:	08007e60 	.word	0x08007e60
 8000ff0:	200000a8 	.word	0x200000a8
 8000ff4:	2000010c 	.word	0x2000010c
 8000ff8:	0800be60 	.word	0x0800be60

08000ffc <tasks_20us_left>:
/**
 * @brief Function to be executed every TS.
 *
 * This function is called by the TIM1 trigger handler every TS.
 */
void tasks_20us_left(void){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0


  angle_calc(&angle_left);
 8001000:	4820      	ldr	r0, [pc, #128]	@ (8001084 <tasks_20us_left+0x88>)
 8001002:	f006 fca9 	bl	8007958 <angle_calc>
  inverter_left.encoder.theta_e = angle_left.angle*PI; // angle simulation
 8001006:	4b1f      	ldr	r3, [pc, #124]	@ (8001084 <tasks_20us_left+0x88>)
 8001008:	edd3 7a02 	vldr	s15, [r3, #8]
 800100c:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001088 <tasks_20us_left+0x8c>
 8001010:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001014:	4b1d      	ldr	r3, [pc, #116]	@ (800108c <tasks_20us_left+0x90>)
 8001016:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

  get_currents_voltage(rawADC_left, &inverter_left.analog, &inverter_left.feedback, inverter_left.encoder.theta_e);
 800101a:	4b1c      	ldr	r3, [pc, #112]	@ (800108c <tasks_20us_left+0x90>)
 800101c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001020:	eeb0 0a67 	vmov.f32	s0, s15
 8001024:	4a1a      	ldr	r2, [pc, #104]	@ (8001090 <tasks_20us_left+0x94>)
 8001026:	491b      	ldr	r1, [pc, #108]	@ (8001094 <tasks_20us_left+0x98>)
 8001028:	481b      	ldr	r0, [pc, #108]	@ (8001098 <tasks_20us_left+0x9c>)
 800102a:	f7ff fd5f 	bl	8000aec <get_currents_voltage>

  calc_duties(vd_left, vq_left, vDC_left, inverter_left.encoder.theta_e, &inverter_left.duties);
 800102e:	4b1b      	ldr	r3, [pc, #108]	@ (800109c <tasks_20us_left+0xa0>)
 8001030:	edd3 7a00 	vldr	s15, [r3]
 8001034:	4b1a      	ldr	r3, [pc, #104]	@ (80010a0 <tasks_20us_left+0xa4>)
 8001036:	ed93 7a00 	vldr	s14, [r3]
 800103a:	4b1a      	ldr	r3, [pc, #104]	@ (80010a4 <tasks_20us_left+0xa8>)
 800103c:	edd3 6a00 	vldr	s13, [r3]
 8001040:	4b12      	ldr	r3, [pc, #72]	@ (800108c <tasks_20us_left+0x90>)
 8001042:	ed93 6a0d 	vldr	s12, [r3, #52]	@ 0x34
 8001046:	4818      	ldr	r0, [pc, #96]	@ (80010a8 <tasks_20us_left+0xac>)
 8001048:	eef0 1a46 	vmov.f32	s3, s12
 800104c:	eeb0 1a66 	vmov.f32	s2, s13
 8001050:	eef0 0a47 	vmov.f32	s1, s14
 8001054:	eeb0 0a67 	vmov.f32	s0, s15
 8001058:	f7ff fc22 	bl	80008a0 <calc_duties>

  update_PWM(inverter_left.htim, inverter_left.duties);
 800105c:	4b0b      	ldr	r3, [pc, #44]	@ (800108c <tasks_20us_left+0x90>)
 800105e:	68da      	ldr	r2, [r3, #12]
 8001060:	4b0a      	ldr	r3, [pc, #40]	@ (800108c <tasks_20us_left+0x90>)
 8001062:	edd3 6a13 	vldr	s13, [r3, #76]	@ 0x4c
 8001066:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 800106a:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800106e:	eeb0 0a66 	vmov.f32	s0, s13
 8001072:	eef0 0a47 	vmov.f32	s1, s14
 8001076:	eeb0 1a67 	vmov.f32	s2, s15
 800107a:	4610      	mov	r0, r2
 800107c:	f7ff ff03 	bl	8000e86 <update_PWM>

}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000020 	.word	0x20000020
 8001088:	40490fdb 	.word	0x40490fdb
 800108c:	200000a8 	.word	0x200000a8
 8001090:	200000e4 	.word	0x200000e4
 8001094:	200000c0 	.word	0x200000c0
 8001098:	20000170 	.word	0x20000170
 800109c:	200001a4 	.word	0x200001a4
 80010a0:	20000018 	.word	0x20000018
 80010a4:	2000001c 	.word	0x2000001c
 80010a8:	200000f4 	.word	0x200000f4

080010ac <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010b2:	463b      	mov	r3, r7
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010be:	4b37      	ldr	r3, [pc, #220]	@ (800119c <MX_ADC1_Init+0xf0>)
 80010c0:	4a37      	ldr	r2, [pc, #220]	@ (80011a0 <MX_ADC1_Init+0xf4>)
 80010c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010c4:	4b35      	ldr	r3, [pc, #212]	@ (800119c <MX_ADC1_Init+0xf0>)
 80010c6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80010ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010cc:	4b33      	ldr	r3, [pc, #204]	@ (800119c <MX_ADC1_Init+0xf0>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010d2:	4b32      	ldr	r3, [pc, #200]	@ (800119c <MX_ADC1_Init+0xf0>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010d8:	4b30      	ldr	r3, [pc, #192]	@ (800119c <MX_ADC1_Init+0xf0>)
 80010da:	2200      	movs	r2, #0
 80010dc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010de:	4b2f      	ldr	r3, [pc, #188]	@ (800119c <MX_ADC1_Init+0xf0>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010e6:	4b2d      	ldr	r3, [pc, #180]	@ (800119c <MX_ADC1_Init+0xf0>)
 80010e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80010ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 80010ee:	4b2b      	ldr	r3, [pc, #172]	@ (800119c <MX_ADC1_Init+0xf0>)
 80010f0:	f04f 6210 	mov.w	r2, #150994944	@ 0x9000000
 80010f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010f6:	4b29      	ldr	r3, [pc, #164]	@ (800119c <MX_ADC1_Init+0xf0>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80010fc:	4b27      	ldr	r3, [pc, #156]	@ (800119c <MX_ADC1_Init+0xf0>)
 80010fe:	2204      	movs	r2, #4
 8001100:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001102:	4b26      	ldr	r3, [pc, #152]	@ (800119c <MX_ADC1_Init+0xf0>)
 8001104:	2201      	movs	r2, #1
 8001106:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800110a:	4b24      	ldr	r3, [pc, #144]	@ (800119c <MX_ADC1_Init+0xf0>)
 800110c:	2200      	movs	r2, #0
 800110e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001110:	4822      	ldr	r0, [pc, #136]	@ (800119c <MX_ADC1_Init+0xf0>)
 8001112:	f001 fba5 	bl	8002860 <HAL_ADC_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800111c:	f000 fe50 	bl	8001dc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001120:	2300      	movs	r3, #0
 8001122:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001124:	2301      	movs	r3, #1
 8001126:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001128:	2300      	movs	r3, #0
 800112a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800112c:	463b      	mov	r3, r7
 800112e:	4619      	mov	r1, r3
 8001130:	481a      	ldr	r0, [pc, #104]	@ (800119c <MX_ADC1_Init+0xf0>)
 8001132:	f001 fcf1 	bl	8002b18 <HAL_ADC_ConfigChannel>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800113c:	f000 fe40 	bl	8001dc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001140:	2301      	movs	r3, #1
 8001142:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001144:	2302      	movs	r3, #2
 8001146:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001148:	463b      	mov	r3, r7
 800114a:	4619      	mov	r1, r3
 800114c:	4813      	ldr	r0, [pc, #76]	@ (800119c <MX_ADC1_Init+0xf0>)
 800114e:	f001 fce3 	bl	8002b18 <HAL_ADC_ConfigChannel>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001158:	f000 fe32 	bl	8001dc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800115c:	2302      	movs	r3, #2
 800115e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001160:	2303      	movs	r3, #3
 8001162:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001164:	463b      	mov	r3, r7
 8001166:	4619      	mov	r1, r3
 8001168:	480c      	ldr	r0, [pc, #48]	@ (800119c <MX_ADC1_Init+0xf0>)
 800116a:	f001 fcd5 	bl	8002b18 <HAL_ADC_ConfigChannel>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001174:	f000 fe24 	bl	8001dc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001178:	2303      	movs	r3, #3
 800117a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800117c:	2304      	movs	r3, #4
 800117e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001180:	463b      	mov	r3, r7
 8001182:	4619      	mov	r1, r3
 8001184:	4805      	ldr	r0, [pc, #20]	@ (800119c <MX_ADC1_Init+0xf0>)
 8001186:	f001 fcc7 	bl	8002b18 <HAL_ADC_ConfigChannel>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8001190:	f000 fe16 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001194:	bf00      	nop
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	200001a8 	.word	0x200001a8
 80011a0:	40012000 	.word	0x40012000

080011a4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011aa:	463b      	mov	r3, r7
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80011b6:	4b37      	ldr	r3, [pc, #220]	@ (8001294 <MX_ADC2_Init+0xf0>)
 80011b8:	4a37      	ldr	r2, [pc, #220]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011ba:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011bc:	4b35      	ldr	r3, [pc, #212]	@ (8001294 <MX_ADC2_Init+0xf0>)
 80011be:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011c2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80011c4:	4b33      	ldr	r3, [pc, #204]	@ (8001294 <MX_ADC2_Init+0xf0>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011ca:	4b32      	ldr	r3, [pc, #200]	@ (8001294 <MX_ADC2_Init+0xf0>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80011d0:	4b30      	ldr	r3, [pc, #192]	@ (8001294 <MX_ADC2_Init+0xf0>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80011d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001294 <MX_ADC2_Init+0xf0>)
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80011de:	4b2d      	ldr	r3, [pc, #180]	@ (8001294 <MX_ADC2_Init+0xf0>)
 80011e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80011e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 80011e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001294 <MX_ADC2_Init+0xf0>)
 80011e8:	f04f 6210 	mov.w	r2, #150994944	@ 0x9000000
 80011ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ee:	4b29      	ldr	r3, [pc, #164]	@ (8001294 <MX_ADC2_Init+0xf0>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 80011f4:	4b27      	ldr	r3, [pc, #156]	@ (8001294 <MX_ADC2_Init+0xf0>)
 80011f6:	2204      	movs	r2, #4
 80011f8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80011fa:	4b26      	ldr	r3, [pc, #152]	@ (8001294 <MX_ADC2_Init+0xf0>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001202:	4b24      	ldr	r3, [pc, #144]	@ (8001294 <MX_ADC2_Init+0xf0>)
 8001204:	2200      	movs	r2, #0
 8001206:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001208:	4822      	ldr	r0, [pc, #136]	@ (8001294 <MX_ADC2_Init+0xf0>)
 800120a:	f001 fb29 	bl	8002860 <HAL_ADC_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8001214:	f000 fdd4 	bl	8001dc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001218:	2306      	movs	r3, #6
 800121a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800121c:	2301      	movs	r3, #1
 800121e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001220:	2303      	movs	r3, #3
 8001222:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001224:	463b      	mov	r3, r7
 8001226:	4619      	mov	r1, r3
 8001228:	481a      	ldr	r0, [pc, #104]	@ (8001294 <MX_ADC2_Init+0xf0>)
 800122a:	f001 fc75 	bl	8002b18 <HAL_ADC_ConfigChannel>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8001234:	f000 fdc4 	bl	8001dc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001238:	2307      	movs	r3, #7
 800123a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800123c:	2302      	movs	r3, #2
 800123e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001240:	463b      	mov	r3, r7
 8001242:	4619      	mov	r1, r3
 8001244:	4813      	ldr	r0, [pc, #76]	@ (8001294 <MX_ADC2_Init+0xf0>)
 8001246:	f001 fc67 	bl	8002b18 <HAL_ADC_ConfigChannel>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8001250:	f000 fdb6 	bl	8001dc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001254:	2308      	movs	r3, #8
 8001256:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001258:	2303      	movs	r3, #3
 800125a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800125c:	463b      	mov	r3, r7
 800125e:	4619      	mov	r1, r3
 8001260:	480c      	ldr	r0, [pc, #48]	@ (8001294 <MX_ADC2_Init+0xf0>)
 8001262:	f001 fc59 	bl	8002b18 <HAL_ADC_ConfigChannel>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_ADC2_Init+0xcc>
  {
    Error_Handler();
 800126c:	f000 fda8 	bl	8001dc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001270:	2309      	movs	r3, #9
 8001272:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001274:	2304      	movs	r3, #4
 8001276:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001278:	463b      	mov	r3, r7
 800127a:	4619      	mov	r1, r3
 800127c:	4805      	ldr	r0, [pc, #20]	@ (8001294 <MX_ADC2_Init+0xf0>)
 800127e:	f001 fc4b 	bl	8002b18 <HAL_ADC_ConfigChannel>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_ADC2_Init+0xe8>
  {
    Error_Handler();
 8001288:	f000 fd9a 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800128c:	bf00      	nop
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	200001f0 	.word	0x200001f0
 8001298:	40012100 	.word	0x40012100

0800129c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012a2:	463b      	mov	r3, r7
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80012ae:	4b37      	ldr	r3, [pc, #220]	@ (800138c <MX_ADC3_Init+0xf0>)
 80012b0:	4a37      	ldr	r2, [pc, #220]	@ (8001390 <MX_ADC3_Init+0xf4>)
 80012b2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012b4:	4b35      	ldr	r3, [pc, #212]	@ (800138c <MX_ADC3_Init+0xf0>)
 80012b6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80012ba:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80012bc:	4b33      	ldr	r3, [pc, #204]	@ (800138c <MX_ADC3_Init+0xf0>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012c2:	4b32      	ldr	r3, [pc, #200]	@ (800138c <MX_ADC3_Init+0xf0>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80012c8:	4b30      	ldr	r3, [pc, #192]	@ (800138c <MX_ADC3_Init+0xf0>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80012ce:	4b2f      	ldr	r3, [pc, #188]	@ (800138c <MX_ADC3_Init+0xf0>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80012d6:	4b2d      	ldr	r3, [pc, #180]	@ (800138c <MX_ADC3_Init+0xf0>)
 80012d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80012dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 80012de:	4b2b      	ldr	r3, [pc, #172]	@ (800138c <MX_ADC3_Init+0xf0>)
 80012e0:	f04f 6250 	mov.w	r2, #218103808	@ 0xd000000
 80012e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012e6:	4b29      	ldr	r3, [pc, #164]	@ (800138c <MX_ADC3_Init+0xf0>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 4;
 80012ec:	4b27      	ldr	r3, [pc, #156]	@ (800138c <MX_ADC3_Init+0xf0>)
 80012ee:	2204      	movs	r2, #4
 80012f0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80012f2:	4b26      	ldr	r3, [pc, #152]	@ (800138c <MX_ADC3_Init+0xf0>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80012fa:	4b24      	ldr	r3, [pc, #144]	@ (800138c <MX_ADC3_Init+0xf0>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001300:	4822      	ldr	r0, [pc, #136]	@ (800138c <MX_ADC3_Init+0xf0>)
 8001302:	f001 faad 	bl	8002860 <HAL_ADC_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 800130c:	f000 fd58 	bl	8001dc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001310:	230a      	movs	r3, #10
 8001312:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001314:	2301      	movs	r3, #1
 8001316:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001318:	2300      	movs	r3, #0
 800131a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800131c:	463b      	mov	r3, r7
 800131e:	4619      	mov	r1, r3
 8001320:	481a      	ldr	r0, [pc, #104]	@ (800138c <MX_ADC3_Init+0xf0>)
 8001322:	f001 fbf9 	bl	8002b18 <HAL_ADC_ConfigChannel>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 800132c:	f000 fd48 	bl	8001dc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001330:	230b      	movs	r3, #11
 8001332:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001334:	2302      	movs	r3, #2
 8001336:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001338:	463b      	mov	r3, r7
 800133a:	4619      	mov	r1, r3
 800133c:	4813      	ldr	r0, [pc, #76]	@ (800138c <MX_ADC3_Init+0xf0>)
 800133e:	f001 fbeb 	bl	8002b18 <HAL_ADC_ConfigChannel>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8001348:	f000 fd3a 	bl	8001dc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800134c:	230c      	movs	r3, #12
 800134e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001350:	2303      	movs	r3, #3
 8001352:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001354:	463b      	mov	r3, r7
 8001356:	4619      	mov	r1, r3
 8001358:	480c      	ldr	r0, [pc, #48]	@ (800138c <MX_ADC3_Init+0xf0>)
 800135a:	f001 fbdd 	bl	8002b18 <HAL_ADC_ConfigChannel>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 8001364:	f000 fd2c 	bl	8001dc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001368:	230d      	movs	r3, #13
 800136a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800136c:	2304      	movs	r3, #4
 800136e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001370:	463b      	mov	r3, r7
 8001372:	4619      	mov	r1, r3
 8001374:	4805      	ldr	r0, [pc, #20]	@ (800138c <MX_ADC3_Init+0xf0>)
 8001376:	f001 fbcf 	bl	8002b18 <HAL_ADC_ConfigChannel>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_ADC3_Init+0xe8>
  {
    Error_Handler();
 8001380:	f000 fd1e 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001384:	bf00      	nop
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000238 	.word	0x20000238
 8001390:	40012200 	.word	0x40012200

08001394 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08e      	sub	sp, #56	@ 0x38
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a94      	ldr	r2, [pc, #592]	@ (8001604 <HAL_ADC_MspInit+0x270>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d153      	bne.n	800145e <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013b6:	4b94      	ldr	r3, [pc, #592]	@ (8001608 <HAL_ADC_MspInit+0x274>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ba:	4a93      	ldr	r2, [pc, #588]	@ (8001608 <HAL_ADC_MspInit+0x274>)
 80013bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013c2:	4b91      	ldr	r3, [pc, #580]	@ (8001608 <HAL_ADC_MspInit+0x274>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013ca:	623b      	str	r3, [r7, #32]
 80013cc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	4b8e      	ldr	r3, [pc, #568]	@ (8001608 <HAL_ADC_MspInit+0x274>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	4a8d      	ldr	r2, [pc, #564]	@ (8001608 <HAL_ADC_MspInit+0x274>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013da:	4b8b      	ldr	r3, [pc, #556]	@ (8001608 <HAL_ADC_MspInit+0x274>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	61fb      	str	r3, [r7, #28]
 80013e4:	69fb      	ldr	r3, [r7, #28]
    PA0/WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ia_L_Pin|ib_L_Pin|ic_L_Pin|VDC_L_Pin;
 80013e6:	230f      	movs	r3, #15
 80013e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ea:	2303      	movs	r3, #3
 80013ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013f6:	4619      	mov	r1, r3
 80013f8:	4884      	ldr	r0, [pc, #528]	@ (800160c <HAL_ADC_MspInit+0x278>)
 80013fa:	f002 fefb 	bl	80041f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80013fe:	4b84      	ldr	r3, [pc, #528]	@ (8001610 <HAL_ADC_MspInit+0x27c>)
 8001400:	4a84      	ldr	r2, [pc, #528]	@ (8001614 <HAL_ADC_MspInit+0x280>)
 8001402:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001404:	4b82      	ldr	r3, [pc, #520]	@ (8001610 <HAL_ADC_MspInit+0x27c>)
 8001406:	2200      	movs	r2, #0
 8001408:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800140a:	4b81      	ldr	r3, [pc, #516]	@ (8001610 <HAL_ADC_MspInit+0x27c>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001410:	4b7f      	ldr	r3, [pc, #508]	@ (8001610 <HAL_ADC_MspInit+0x27c>)
 8001412:	2200      	movs	r2, #0
 8001414:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001416:	4b7e      	ldr	r3, [pc, #504]	@ (8001610 <HAL_ADC_MspInit+0x27c>)
 8001418:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800141c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800141e:	4b7c      	ldr	r3, [pc, #496]	@ (8001610 <HAL_ADC_MspInit+0x27c>)
 8001420:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001424:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001426:	4b7a      	ldr	r3, [pc, #488]	@ (8001610 <HAL_ADC_MspInit+0x27c>)
 8001428:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800142c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800142e:	4b78      	ldr	r3, [pc, #480]	@ (8001610 <HAL_ADC_MspInit+0x27c>)
 8001430:	2200      	movs	r2, #0
 8001432:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001434:	4b76      	ldr	r3, [pc, #472]	@ (8001610 <HAL_ADC_MspInit+0x27c>)
 8001436:	2200      	movs	r2, #0
 8001438:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800143a:	4b75      	ldr	r3, [pc, #468]	@ (8001610 <HAL_ADC_MspInit+0x27c>)
 800143c:	2200      	movs	r2, #0
 800143e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001440:	4873      	ldr	r0, [pc, #460]	@ (8001610 <HAL_ADC_MspInit+0x27c>)
 8001442:	f002 fb5f 	bl	8003b04 <HAL_DMA_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 800144c:	f000 fcb8 	bl	8001dc0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a6f      	ldr	r2, [pc, #444]	@ (8001610 <HAL_ADC_MspInit+0x27c>)
 8001454:	639a      	str	r2, [r3, #56]	@ 0x38
 8001456:	4a6e      	ldr	r2, [pc, #440]	@ (8001610 <HAL_ADC_MspInit+0x27c>)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800145c:	e0cd      	b.n	80015fa <HAL_ADC_MspInit+0x266>
  else if(adcHandle->Instance==ADC2)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a6d      	ldr	r2, [pc, #436]	@ (8001618 <HAL_ADC_MspInit+0x284>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d16e      	bne.n	8001546 <HAL_ADC_MspInit+0x1b2>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001468:	4b67      	ldr	r3, [pc, #412]	@ (8001608 <HAL_ADC_MspInit+0x274>)
 800146a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146c:	4a66      	ldr	r2, [pc, #408]	@ (8001608 <HAL_ADC_MspInit+0x274>)
 800146e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001472:	6453      	str	r3, [r2, #68]	@ 0x44
 8001474:	4b64      	ldr	r3, [pc, #400]	@ (8001608 <HAL_ADC_MspInit+0x274>)
 8001476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001478:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800147c:	61bb      	str	r3, [r7, #24]
 800147e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001480:	4b61      	ldr	r3, [pc, #388]	@ (8001608 <HAL_ADC_MspInit+0x274>)
 8001482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001484:	4a60      	ldr	r2, [pc, #384]	@ (8001608 <HAL_ADC_MspInit+0x274>)
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	6313      	str	r3, [r2, #48]	@ 0x30
 800148c:	4b5e      	ldr	r3, [pc, #376]	@ (8001608 <HAL_ADC_MspInit+0x274>)
 800148e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	617b      	str	r3, [r7, #20]
 8001496:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001498:	4b5b      	ldr	r3, [pc, #364]	@ (8001608 <HAL_ADC_MspInit+0x274>)
 800149a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149c:	4a5a      	ldr	r2, [pc, #360]	@ (8001608 <HAL_ADC_MspInit+0x274>)
 800149e:	f043 0302 	orr.w	r3, r3, #2
 80014a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a4:	4b58      	ldr	r3, [pc, #352]	@ (8001608 <HAL_ADC_MspInit+0x274>)
 80014a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	613b      	str	r3, [r7, #16]
 80014ae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ia_R_Pin|ib_R_Pin;
 80014b0:	23c0      	movs	r3, #192	@ 0xc0
 80014b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014b4:	2303      	movs	r3, #3
 80014b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014c0:	4619      	mov	r1, r3
 80014c2:	4852      	ldr	r0, [pc, #328]	@ (800160c <HAL_ADC_MspInit+0x278>)
 80014c4:	f002 fe96 	bl	80041f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ic_R_Pin|VDC_R_Pin;
 80014c8:	2303      	movs	r3, #3
 80014ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014cc:	2303      	movs	r3, #3
 80014ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014d8:	4619      	mov	r1, r3
 80014da:	4850      	ldr	r0, [pc, #320]	@ (800161c <HAL_ADC_MspInit+0x288>)
 80014dc:	f002 fe8a 	bl	80041f4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80014e0:	4b4f      	ldr	r3, [pc, #316]	@ (8001620 <HAL_ADC_MspInit+0x28c>)
 80014e2:	4a50      	ldr	r2, [pc, #320]	@ (8001624 <HAL_ADC_MspInit+0x290>)
 80014e4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80014e6:	4b4e      	ldr	r3, [pc, #312]	@ (8001620 <HAL_ADC_MspInit+0x28c>)
 80014e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80014ec:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014ee:	4b4c      	ldr	r3, [pc, #304]	@ (8001620 <HAL_ADC_MspInit+0x28c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80014f4:	4b4a      	ldr	r3, [pc, #296]	@ (8001620 <HAL_ADC_MspInit+0x28c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80014fa:	4b49      	ldr	r3, [pc, #292]	@ (8001620 <HAL_ADC_MspInit+0x28c>)
 80014fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001500:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001502:	4b47      	ldr	r3, [pc, #284]	@ (8001620 <HAL_ADC_MspInit+0x28c>)
 8001504:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001508:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800150a:	4b45      	ldr	r3, [pc, #276]	@ (8001620 <HAL_ADC_MspInit+0x28c>)
 800150c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001510:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001512:	4b43      	ldr	r3, [pc, #268]	@ (8001620 <HAL_ADC_MspInit+0x28c>)
 8001514:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001518:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 800151a:	4b41      	ldr	r3, [pc, #260]	@ (8001620 <HAL_ADC_MspInit+0x28c>)
 800151c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001520:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001522:	4b3f      	ldr	r3, [pc, #252]	@ (8001620 <HAL_ADC_MspInit+0x28c>)
 8001524:	2200      	movs	r2, #0
 8001526:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001528:	483d      	ldr	r0, [pc, #244]	@ (8001620 <HAL_ADC_MspInit+0x28c>)
 800152a:	f002 faeb 	bl	8003b04 <HAL_DMA_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <HAL_ADC_MspInit+0x1a4>
      Error_Handler();
 8001534:	f000 fc44 	bl	8001dc0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a39      	ldr	r2, [pc, #228]	@ (8001620 <HAL_ADC_MspInit+0x28c>)
 800153c:	639a      	str	r2, [r3, #56]	@ 0x38
 800153e:	4a38      	ldr	r2, [pc, #224]	@ (8001620 <HAL_ADC_MspInit+0x28c>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001544:	e059      	b.n	80015fa <HAL_ADC_MspInit+0x266>
  else if(adcHandle->Instance==ADC3)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a37      	ldr	r2, [pc, #220]	@ (8001628 <HAL_ADC_MspInit+0x294>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d154      	bne.n	80015fa <HAL_ADC_MspInit+0x266>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001550:	4b2d      	ldr	r3, [pc, #180]	@ (8001608 <HAL_ADC_MspInit+0x274>)
 8001552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001554:	4a2c      	ldr	r2, [pc, #176]	@ (8001608 <HAL_ADC_MspInit+0x274>)
 8001556:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800155a:	6453      	str	r3, [r2, #68]	@ 0x44
 800155c:	4b2a      	ldr	r3, [pc, #168]	@ (8001608 <HAL_ADC_MspInit+0x274>)
 800155e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001560:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001568:	4b27      	ldr	r3, [pc, #156]	@ (8001608 <HAL_ADC_MspInit+0x274>)
 800156a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156c:	4a26      	ldr	r2, [pc, #152]	@ (8001608 <HAL_ADC_MspInit+0x274>)
 800156e:	f043 0304 	orr.w	r3, r3, #4
 8001572:	6313      	str	r3, [r2, #48]	@ 0x30
 8001574:	4b24      	ldr	r3, [pc, #144]	@ (8001608 <HAL_ADC_MspInit+0x274>)
 8001576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Tinv_L_Pin|Tinv_R_Pin|Tmot_L_Pin|Tmot_R_Pin;
 8001580:	230f      	movs	r3, #15
 8001582:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001584:	2303      	movs	r3, #3
 8001586:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800158c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001590:	4619      	mov	r1, r3
 8001592:	4826      	ldr	r0, [pc, #152]	@ (800162c <HAL_ADC_MspInit+0x298>)
 8001594:	f002 fe2e 	bl	80041f4 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8001598:	4b25      	ldr	r3, [pc, #148]	@ (8001630 <HAL_ADC_MspInit+0x29c>)
 800159a:	4a26      	ldr	r2, [pc, #152]	@ (8001634 <HAL_ADC_MspInit+0x2a0>)
 800159c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 800159e:	4b24      	ldr	r3, [pc, #144]	@ (8001630 <HAL_ADC_MspInit+0x29c>)
 80015a0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80015a4:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015a6:	4b22      	ldr	r3, [pc, #136]	@ (8001630 <HAL_ADC_MspInit+0x29c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ac:	4b20      	ldr	r3, [pc, #128]	@ (8001630 <HAL_ADC_MspInit+0x29c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80015b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001630 <HAL_ADC_MspInit+0x29c>)
 80015b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015b8:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001630 <HAL_ADC_MspInit+0x29c>)
 80015bc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80015c0:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001630 <HAL_ADC_MspInit+0x29c>)
 80015c4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015c8:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80015ca:	4b19      	ldr	r3, [pc, #100]	@ (8001630 <HAL_ADC_MspInit+0x29c>)
 80015cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015d0:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80015d2:	4b17      	ldr	r3, [pc, #92]	@ (8001630 <HAL_ADC_MspInit+0x29c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015d8:	4b15      	ldr	r3, [pc, #84]	@ (8001630 <HAL_ADC_MspInit+0x29c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80015de:	4814      	ldr	r0, [pc, #80]	@ (8001630 <HAL_ADC_MspInit+0x29c>)
 80015e0:	f002 fa90 	bl	8003b04 <HAL_DMA_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <HAL_ADC_MspInit+0x25a>
      Error_Handler();
 80015ea:	f000 fbe9 	bl	8001dc0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a0f      	ldr	r2, [pc, #60]	@ (8001630 <HAL_ADC_MspInit+0x29c>)
 80015f2:	639a      	str	r2, [r3, #56]	@ 0x38
 80015f4:	4a0e      	ldr	r2, [pc, #56]	@ (8001630 <HAL_ADC_MspInit+0x29c>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80015fa:	bf00      	nop
 80015fc:	3738      	adds	r7, #56	@ 0x38
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40012000 	.word	0x40012000
 8001608:	40023800 	.word	0x40023800
 800160c:	40020000 	.word	0x40020000
 8001610:	20000280 	.word	0x20000280
 8001614:	40026410 	.word	0x40026410
 8001618:	40012100 	.word	0x40012100
 800161c:	40020400 	.word	0x40020400
 8001620:	200002e0 	.word	0x200002e0
 8001624:	40026440 	.word	0x40026440
 8001628:	40012200 	.word	0x40012200
 800162c:	40020800 	.word	0x40020800
 8001630:	20000340 	.word	0x20000340
 8001634:	40026428 	.word	0x40026428

08001638 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800163c:	4b17      	ldr	r3, [pc, #92]	@ (800169c <MX_CAN1_Init+0x64>)
 800163e:	4a18      	ldr	r2, [pc, #96]	@ (80016a0 <MX_CAN1_Init+0x68>)
 8001640:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 27;
 8001642:	4b16      	ldr	r3, [pc, #88]	@ (800169c <MX_CAN1_Init+0x64>)
 8001644:	221b      	movs	r2, #27
 8001646:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001648:	4b14      	ldr	r3, [pc, #80]	@ (800169c <MX_CAN1_Init+0x64>)
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800164e:	4b13      	ldr	r3, [pc, #76]	@ (800169c <MX_CAN1_Init+0x64>)
 8001650:	2200      	movs	r2, #0
 8001652:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001654:	4b11      	ldr	r3, [pc, #68]	@ (800169c <MX_CAN1_Init+0x64>)
 8001656:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800165a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800165c:	4b0f      	ldr	r3, [pc, #60]	@ (800169c <MX_CAN1_Init+0x64>)
 800165e:	2200      	movs	r2, #0
 8001660:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001662:	4b0e      	ldr	r3, [pc, #56]	@ (800169c <MX_CAN1_Init+0x64>)
 8001664:	2200      	movs	r2, #0
 8001666:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001668:	4b0c      	ldr	r3, [pc, #48]	@ (800169c <MX_CAN1_Init+0x64>)
 800166a:	2200      	movs	r2, #0
 800166c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800166e:	4b0b      	ldr	r3, [pc, #44]	@ (800169c <MX_CAN1_Init+0x64>)
 8001670:	2200      	movs	r2, #0
 8001672:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001674:	4b09      	ldr	r3, [pc, #36]	@ (800169c <MX_CAN1_Init+0x64>)
 8001676:	2200      	movs	r2, #0
 8001678:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800167a:	4b08      	ldr	r3, [pc, #32]	@ (800169c <MX_CAN1_Init+0x64>)
 800167c:	2200      	movs	r2, #0
 800167e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001680:	4b06      	ldr	r3, [pc, #24]	@ (800169c <MX_CAN1_Init+0x64>)
 8001682:	2200      	movs	r2, #0
 8001684:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001686:	4805      	ldr	r0, [pc, #20]	@ (800169c <MX_CAN1_Init+0x64>)
 8001688:	f001 fd18 	bl	80030bc <HAL_CAN_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001692:	f000 fb95 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	200003a0 	.word	0x200003a0
 80016a0:	40006400 	.word	0x40006400

080016a4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08a      	sub	sp, #40	@ 0x28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a1b      	ldr	r2, [pc, #108]	@ (8001730 <HAL_CAN_MspInit+0x8c>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d12f      	bne.n	8001726 <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80016c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001734 <HAL_CAN_MspInit+0x90>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ca:	4a1a      	ldr	r2, [pc, #104]	@ (8001734 <HAL_CAN_MspInit+0x90>)
 80016cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016d2:	4b18      	ldr	r3, [pc, #96]	@ (8001734 <HAL_CAN_MspInit+0x90>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016de:	4b15      	ldr	r3, [pc, #84]	@ (8001734 <HAL_CAN_MspInit+0x90>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	4a14      	ldr	r2, [pc, #80]	@ (8001734 <HAL_CAN_MspInit+0x90>)
 80016e4:	f043 0308 	orr.w	r3, r3, #8
 80016e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ea:	4b12      	ldr	r3, [pc, #72]	@ (8001734 <HAL_CAN_MspInit+0x90>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	f003 0308 	and.w	r3, r3, #8
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016f6:	2303      	movs	r3, #3
 80016f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fa:	2302      	movs	r3, #2
 80016fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001702:	2303      	movs	r3, #3
 8001704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001706:	2309      	movs	r3, #9
 8001708:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	4619      	mov	r1, r3
 8001710:	4809      	ldr	r0, [pc, #36]	@ (8001738 <HAL_CAN_MspInit+0x94>)
 8001712:	f002 fd6f 	bl	80041f4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2100      	movs	r1, #0
 800171a:	2014      	movs	r0, #20
 800171c:	f002 f8dd 	bl	80038da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001720:	2014      	movs	r0, #20
 8001722:	f002 f8f6 	bl	8003912 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001726:	bf00      	nop
 8001728:	3728      	adds	r7, #40	@ 0x28
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40006400 	.word	0x40006400
 8001734:	40023800 	.word	0x40023800
 8001738:	40020c00 	.word	0x40020c00

0800173c <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001742:	463b      	mov	r3, r7
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800174a:	4b0f      	ldr	r3, [pc, #60]	@ (8001788 <MX_DAC_Init+0x4c>)
 800174c:	4a0f      	ldr	r2, [pc, #60]	@ (800178c <MX_DAC_Init+0x50>)
 800174e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001750:	480d      	ldr	r0, [pc, #52]	@ (8001788 <MX_DAC_Init+0x4c>)
 8001752:	f002 f8f8 	bl	8003946 <HAL_DAC_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800175c:	f000 fb30 	bl	8001dc0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001760:	2300      	movs	r3, #0
 8001762:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001764:	2300      	movs	r3, #0
 8001766:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001768:	463b      	mov	r3, r7
 800176a:	2200      	movs	r2, #0
 800176c:	4619      	mov	r1, r3
 800176e:	4806      	ldr	r0, [pc, #24]	@ (8001788 <MX_DAC_Init+0x4c>)
 8001770:	f002 f96f 	bl	8003a52 <HAL_DAC_ConfigChannel>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800177a:	f000 fb21 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	200003c8 	.word	0x200003c8
 800178c:	40007400 	.word	0x40007400

08001790 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08a      	sub	sp, #40	@ 0x28
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a19      	ldr	r2, [pc, #100]	@ (8001814 <HAL_DAC_MspInit+0x84>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d12b      	bne.n	800180a <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80017b2:	4b19      	ldr	r3, [pc, #100]	@ (8001818 <HAL_DAC_MspInit+0x88>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b6:	4a18      	ldr	r2, [pc, #96]	@ (8001818 <HAL_DAC_MspInit+0x88>)
 80017b8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80017bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80017be:	4b16      	ldr	r3, [pc, #88]	@ (8001818 <HAL_DAC_MspInit+0x88>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ca:	4b13      	ldr	r3, [pc, #76]	@ (8001818 <HAL_DAC_MspInit+0x88>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ce:	4a12      	ldr	r2, [pc, #72]	@ (8001818 <HAL_DAC_MspInit+0x88>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017d6:	4b10      	ldr	r3, [pc, #64]	@ (8001818 <HAL_DAC_MspInit+0x88>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = DAC_Pin;
 80017e2:	2310      	movs	r3, #16
 80017e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017e6:	2303      	movs	r3, #3
 80017e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC_GPIO_Port, &GPIO_InitStruct);
 80017ee:	f107 0314 	add.w	r3, r7, #20
 80017f2:	4619      	mov	r1, r3
 80017f4:	4809      	ldr	r0, [pc, #36]	@ (800181c <HAL_DAC_MspInit+0x8c>)
 80017f6:	f002 fcfd 	bl	80041f4 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2100      	movs	r1, #0
 80017fe:	2036      	movs	r0, #54	@ 0x36
 8001800:	f002 f86b 	bl	80038da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001804:	2036      	movs	r0, #54	@ 0x36
 8001806:	f002 f884 	bl	8003912 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800180a:	bf00      	nop
 800180c:	3728      	adds	r7, #40	@ 0x28
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40007400 	.word	0x40007400
 8001818:	40023800 	.word	0x40023800
 800181c:	40020000 	.word	0x40020000

08001820 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001826:	4b14      	ldr	r3, [pc, #80]	@ (8001878 <MX_DMA_Init+0x58>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	4a13      	ldr	r2, [pc, #76]	@ (8001878 <MX_DMA_Init+0x58>)
 800182c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001830:	6313      	str	r3, [r2, #48]	@ 0x30
 8001832:	4b11      	ldr	r3, [pc, #68]	@ (8001878 <MX_DMA_Init+0x58>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001836:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800183e:	2200      	movs	r2, #0
 8001840:	2100      	movs	r1, #0
 8001842:	2038      	movs	r0, #56	@ 0x38
 8001844:	f002 f849 	bl	80038da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001848:	2038      	movs	r0, #56	@ 0x38
 800184a:	f002 f862 	bl	8003912 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800184e:	2200      	movs	r2, #0
 8001850:	2100      	movs	r1, #0
 8001852:	2039      	movs	r0, #57	@ 0x39
 8001854:	f002 f841 	bl	80038da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001858:	2039      	movs	r0, #57	@ 0x39
 800185a:	f002 f85a 	bl	8003912 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800185e:	2200      	movs	r2, #0
 8001860:	2100      	movs	r1, #0
 8001862:	203a      	movs	r0, #58	@ 0x3a
 8001864:	f002 f839 	bl	80038da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001868:	203a      	movs	r0, #58	@ 0x3a
 800186a:	f002 f852 	bl	8003912 <HAL_NVIC_EnableIRQ>

}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800

0800187c <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b08c      	sub	sp, #48	@ 0x30
 8001880:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001882:	f107 031c 	add.w	r3, r7, #28
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	609a      	str	r2, [r3, #8]
 800188e:	60da      	str	r2, [r3, #12]
 8001890:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001892:	4b87      	ldr	r3, [pc, #540]	@ (8001ab0 <MX_GPIO_Init+0x234>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001896:	4a86      	ldr	r2, [pc, #536]	@ (8001ab0 <MX_GPIO_Init+0x234>)
 8001898:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800189c:	6313      	str	r3, [r2, #48]	@ 0x30
 800189e:	4b84      	ldr	r3, [pc, #528]	@ (8001ab0 <MX_GPIO_Init+0x234>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018a6:	61bb      	str	r3, [r7, #24]
 80018a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018aa:	4b81      	ldr	r3, [pc, #516]	@ (8001ab0 <MX_GPIO_Init+0x234>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ae:	4a80      	ldr	r2, [pc, #512]	@ (8001ab0 <MX_GPIO_Init+0x234>)
 80018b0:	f043 0304 	orr.w	r3, r3, #4
 80018b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018b6:	4b7e      	ldr	r3, [pc, #504]	@ (8001ab0 <MX_GPIO_Init+0x234>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ba:	f003 0304 	and.w	r3, r3, #4
 80018be:	617b      	str	r3, [r7, #20]
 80018c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c2:	4b7b      	ldr	r3, [pc, #492]	@ (8001ab0 <MX_GPIO_Init+0x234>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c6:	4a7a      	ldr	r2, [pc, #488]	@ (8001ab0 <MX_GPIO_Init+0x234>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ce:	4b78      	ldr	r3, [pc, #480]	@ (8001ab0 <MX_GPIO_Init+0x234>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018da:	4b75      	ldr	r3, [pc, #468]	@ (8001ab0 <MX_GPIO_Init+0x234>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018de:	4a74      	ldr	r2, [pc, #464]	@ (8001ab0 <MX_GPIO_Init+0x234>)
 80018e0:	f043 0302 	orr.w	r3, r3, #2
 80018e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e6:	4b72      	ldr	r3, [pc, #456]	@ (8001ab0 <MX_GPIO_Init+0x234>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018f2:	4b6f      	ldr	r3, [pc, #444]	@ (8001ab0 <MX_GPIO_Init+0x234>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f6:	4a6e      	ldr	r2, [pc, #440]	@ (8001ab0 <MX_GPIO_Init+0x234>)
 80018f8:	f043 0310 	orr.w	r3, r3, #16
 80018fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018fe:	4b6c      	ldr	r3, [pc, #432]	@ (8001ab0 <MX_GPIO_Init+0x234>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001902:	f003 0310 	and.w	r3, r3, #16
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800190a:	4b69      	ldr	r3, [pc, #420]	@ (8001ab0 <MX_GPIO_Init+0x234>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	4a68      	ldr	r2, [pc, #416]	@ (8001ab0 <MX_GPIO_Init+0x234>)
 8001910:	f043 0308 	orr.w	r3, r3, #8
 8001914:	6313      	str	r3, [r2, #48]	@ 0x30
 8001916:	4b66      	ldr	r3, [pc, #408]	@ (8001ab0 <MX_GPIO_Init+0x234>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	607b      	str	r3, [r7, #4]
 8001920:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_R_GPIO_Port, ENABLE_R_Pin, GPIO_PIN_RESET);
 8001922:	2200      	movs	r2, #0
 8001924:	2104      	movs	r1, #4
 8001926:	4863      	ldr	r0, [pc, #396]	@ (8001ab4 <MX_GPIO_Init+0x238>)
 8001928:	f002 fe28 	bl	800457c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_L_GPIO_Port, ENABLE_L_Pin, GPIO_PIN_RESET);
 800192c:	2200      	movs	r2, #0
 800192e:	2180      	movs	r1, #128	@ 0x80
 8001930:	4861      	ldr	r0, [pc, #388]	@ (8001ab8 <MX_GPIO_Init+0x23c>)
 8001932:	f002 fe23 	bl	800457c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_LEFT_Pin|LED_RIGHT_Pin|LED_ERR_Pin, GPIO_PIN_RESET);
 8001936:	2200      	movs	r2, #0
 8001938:	2170      	movs	r1, #112	@ 0x70
 800193a:	4860      	ldr	r0, [pc, #384]	@ (8001abc <MX_GPIO_Init+0x240>)
 800193c:	f002 fe1e 	bl	800457c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SC_det_Pin;
 8001940:	2310      	movs	r3, #16
 8001942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001944:	2300      	movs	r3, #0
 8001946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SC_det_GPIO_Port, &GPIO_InitStruct);
 800194c:	f107 031c 	add.w	r3, r7, #28
 8001950:	4619      	mov	r1, r3
 8001952:	485b      	ldr	r0, [pc, #364]	@ (8001ac0 <MX_GPIO_Init+0x244>)
 8001954:	f002 fc4e 	bl	80041f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_R_Pin;
 8001958:	2304      	movs	r3, #4
 800195a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195c:	2301      	movs	r3, #1
 800195e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001964:	2300      	movs	r3, #0
 8001966:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ENABLE_R_GPIO_Port, &GPIO_InitStruct);
 8001968:	f107 031c 	add.w	r3, r7, #28
 800196c:	4619      	mov	r1, r3
 800196e:	4851      	ldr	r0, [pc, #324]	@ (8001ab4 <MX_GPIO_Init+0x238>)
 8001970:	f002 fc40 	bl	80041f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_L_Pin;
 8001974:	2380      	movs	r3, #128	@ 0x80
 8001976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001978:	2301      	movs	r3, #1
 800197a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001980:	2300      	movs	r3, #0
 8001982:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ENABLE_L_GPIO_Port, &GPIO_InitStruct);
 8001984:	f107 031c 	add.w	r3, r7, #28
 8001988:	4619      	mov	r1, r3
 800198a:	484b      	ldr	r0, [pc, #300]	@ (8001ab8 <MX_GPIO_Init+0x23c>)
 800198c:	f002 fc32 	bl	80041f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = WRN_L_Pin|WRN_R_Pin;
 8001990:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001996:	2300      	movs	r3, #0
 8001998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800199e:	f107 031c 	add.w	r3, r7, #28
 80019a2:	4619      	mov	r1, r3
 80019a4:	4844      	ldr	r0, [pc, #272]	@ (8001ab8 <MX_GPIO_Init+0x23c>)
 80019a6:	f002 fc25 	bl	80041f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Z_R_Pin;
 80019aa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80019ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019b0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Z_R_GPIO_Port, &GPIO_InitStruct);
 80019ba:	f107 031c 	add.w	r3, r7, #28
 80019be:	4619      	mov	r1, r3
 80019c0:	483c      	ldr	r0, [pc, #240]	@ (8001ab4 <MX_GPIO_Init+0x238>)
 80019c2:	f002 fc17 	bl	80041f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Z_L_Pin;
 80019c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80019ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019cc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Z_L_GPIO_Port, &GPIO_InitStruct);
 80019d6:	f107 031c 	add.w	r3, r7, #28
 80019da:	4619      	mov	r1, r3
 80019dc:	4837      	ldr	r0, [pc, #220]	@ (8001abc <MX_GPIO_Init+0x240>)
 80019de:	f002 fc09 	bl	80041f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIP_R_Pin;
 80019e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019e8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TRIP_R_GPIO_Port, &GPIO_InitStruct);
 80019f2:	f107 031c 	add.w	r3, r7, #28
 80019f6:	4619      	mov	r1, r3
 80019f8:	4831      	ldr	r0, [pc, #196]	@ (8001ac0 <MX_GPIO_Init+0x244>)
 80019fa:	f002 fbfb 	bl	80041f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIP_L_Pin;
 80019fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a04:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TRIP_L_GPIO_Port, &GPIO_InitStruct);
 8001a0e:	f107 031c 	add.w	r3, r7, #28
 8001a12:	4619      	mov	r1, r3
 8001a14:	482b      	ldr	r0, [pc, #172]	@ (8001ac4 <MX_GPIO_Init+0x248>)
 8001a16:	f002 fbed 	bl	80041f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a20:	2300      	movs	r3, #0
 8001a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a28:	f107 031c 	add.w	r3, r7, #28
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4825      	ldr	r0, [pc, #148]	@ (8001ac4 <MX_GPIO_Init+0x248>)
 8001a30:	f002 fbe0 	bl	80041f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001a34:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a42:	2303      	movs	r3, #3
 8001a44:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a46:	230a      	movs	r3, #10
 8001a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4a:	f107 031c 	add.w	r3, r7, #28
 8001a4e:	4619      	mov	r1, r3
 8001a50:	481c      	ldr	r0, [pc, #112]	@ (8001ac4 <MX_GPIO_Init+0x248>)
 8001a52:	f002 fbcf 	bl	80041f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIR_Pin;
 8001a56:	2308      	movs	r3, #8
 8001a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 8001a62:	f107 031c 	add.w	r3, r7, #28
 8001a66:	4619      	mov	r1, r3
 8001a68:	4814      	ldr	r0, [pc, #80]	@ (8001abc <MX_GPIO_Init+0x240>)
 8001a6a:	f002 fbc3 	bl	80041f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LED_LEFT_Pin|LED_RIGHT_Pin;
 8001a6e:	2330      	movs	r3, #48	@ 0x30
 8001a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a72:	2301      	movs	r3, #1
 8001a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a7e:	f107 031c 	add.w	r3, r7, #28
 8001a82:	4619      	mov	r1, r3
 8001a84:	480d      	ldr	r0, [pc, #52]	@ (8001abc <MX_GPIO_Init+0x240>)
 8001a86:	f002 fbb5 	bl	80041f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_ERR_Pin;
 8001a8a:	2340      	movs	r3, #64	@ 0x40
 8001a8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a92:	2302      	movs	r3, #2
 8001a94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a96:	2300      	movs	r3, #0
 8001a98:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_ERR_GPIO_Port, &GPIO_InitStruct);
 8001a9a:	f107 031c 	add.w	r3, r7, #28
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4806      	ldr	r0, [pc, #24]	@ (8001abc <MX_GPIO_Init+0x240>)
 8001aa2:	f002 fba7 	bl	80041f4 <HAL_GPIO_Init>

}
 8001aa6:	bf00      	nop
 8001aa8:	3730      	adds	r7, #48	@ 0x30
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40020400 	.word	0x40020400
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40020c00 	.word	0x40020c00
 8001ac0:	40020800 	.word	0x40020800
 8001ac4:	40020000 	.word	0x40020000

08001ac8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001acc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b3c <MX_I2C1_Init+0x74>)
 8001ace:	4a1c      	ldr	r2, [pc, #112]	@ (8001b40 <MX_I2C1_Init+0x78>)
 8001ad0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8001ad2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b3c <MX_I2C1_Init+0x74>)
 8001ad4:	4a1b      	ldr	r2, [pc, #108]	@ (8001b44 <MX_I2C1_Init+0x7c>)
 8001ad6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ad8:	4b18      	ldr	r3, [pc, #96]	@ (8001b3c <MX_I2C1_Init+0x74>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ade:	4b17      	ldr	r3, [pc, #92]	@ (8001b3c <MX_I2C1_Init+0x74>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ae4:	4b15      	ldr	r3, [pc, #84]	@ (8001b3c <MX_I2C1_Init+0x74>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001aea:	4b14      	ldr	r3, [pc, #80]	@ (8001b3c <MX_I2C1_Init+0x74>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001af0:	4b12      	ldr	r3, [pc, #72]	@ (8001b3c <MX_I2C1_Init+0x74>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001af6:	4b11      	ldr	r3, [pc, #68]	@ (8001b3c <MX_I2C1_Init+0x74>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001afc:	4b0f      	ldr	r3, [pc, #60]	@ (8001b3c <MX_I2C1_Init+0x74>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b02:	480e      	ldr	r0, [pc, #56]	@ (8001b3c <MX_I2C1_Init+0x74>)
 8001b04:	f002 fd54 	bl	80045b0 <HAL_I2C_Init>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b0e:	f000 f957 	bl	8001dc0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b12:	2100      	movs	r1, #0
 8001b14:	4809      	ldr	r0, [pc, #36]	@ (8001b3c <MX_I2C1_Init+0x74>)
 8001b16:	f002 fddb 	bl	80046d0 <HAL_I2CEx_ConfigAnalogFilter>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b20:	f000 f94e 	bl	8001dc0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b24:	2100      	movs	r1, #0
 8001b26:	4805      	ldr	r0, [pc, #20]	@ (8001b3c <MX_I2C1_Init+0x74>)
 8001b28:	f002 fe1d 	bl	8004766 <HAL_I2CEx_ConfigDigitalFilter>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b32:	f000 f945 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	200003dc 	.word	0x200003dc
 8001b40:	40005400 	.word	0x40005400
 8001b44:	20404768 	.word	0x20404768

08001b48 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b0ae      	sub	sp, #184	@ 0xb8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	2290      	movs	r2, #144	@ 0x90
 8001b66:	2100      	movs	r1, #0
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f005 fb3b 	bl	80071e4 <memset>
  if(i2cHandle->Instance==I2C1)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a21      	ldr	r2, [pc, #132]	@ (8001bf8 <HAL_I2C_MspInit+0xb0>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d13b      	bne.n	8001bf0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b78:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b7c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b82:	f107 0314 	add.w	r3, r7, #20
 8001b86:	4618      	mov	r0, r3
 8001b88:	f003 faea 	bl	8005160 <HAL_RCCEx_PeriphCLKConfig>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001b92:	f000 f915 	bl	8001dc0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b96:	4b19      	ldr	r3, [pc, #100]	@ (8001bfc <HAL_I2C_MspInit+0xb4>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9a:	4a18      	ldr	r2, [pc, #96]	@ (8001bfc <HAL_I2C_MspInit+0xb4>)
 8001b9c:	f043 0302 	orr.w	r3, r3, #2
 8001ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ba2:	4b16      	ldr	r3, [pc, #88]	@ (8001bfc <HAL_I2C_MspInit+0xb4>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	613b      	str	r3, [r7, #16]
 8001bac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bae:	23c0      	movs	r3, #192	@ 0xc0
 8001bb0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bb4:	2312      	movs	r3, #18
 8001bb6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bc6:	2304      	movs	r3, #4
 8001bc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bcc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	480b      	ldr	r0, [pc, #44]	@ (8001c00 <HAL_I2C_MspInit+0xb8>)
 8001bd4:	f002 fb0e 	bl	80041f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bd8:	4b08      	ldr	r3, [pc, #32]	@ (8001bfc <HAL_I2C_MspInit+0xb4>)
 8001bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bdc:	4a07      	ldr	r2, [pc, #28]	@ (8001bfc <HAL_I2C_MspInit+0xb4>)
 8001bde:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001be2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001be4:	4b05      	ldr	r3, [pc, #20]	@ (8001bfc <HAL_I2C_MspInit+0xb4>)
 8001be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001bf0:	bf00      	nop
 8001bf2:	37b8      	adds	r7, #184	@ 0xb8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40005400 	.word	0x40005400
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40020400 	.word	0x40020400

08001c04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c0a:	f000 fdcc 	bl	80027a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c0e:	f000 f869 	bl	8001ce4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c12:	f7ff fe33 	bl	800187c <MX_GPIO_Init>
  MX_DMA_Init();
 8001c16:	f7ff fe03 	bl	8001820 <MX_DMA_Init>
  MX_ADC1_Init();
 8001c1a:	f7ff fa47 	bl	80010ac <MX_ADC1_Init>
  MX_CAN1_Init();
 8001c1e:	f7ff fd0b 	bl	8001638 <MX_CAN1_Init>
  MX_USB_OTG_FS_USB_Init();
 8001c22:	f000 fd8f 	bl	8002744 <MX_USB_OTG_FS_USB_Init>
  MX_ADC2_Init();
 8001c26:	f7ff fabd 	bl	80011a4 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001c2a:	f7ff fb37 	bl	800129c <MX_ADC3_Init>
  MX_DAC_Init();
 8001c2e:	f7ff fd85 	bl	800173c <MX_DAC_Init>
  MX_I2C1_Init();
 8001c32:	f7ff ff49 	bl	8001ac8 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001c36:	f000 f973 	bl	8001f20 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001c3a:	f000 fb2f 	bl	800229c <MX_TIM8_Init>
  MX_TIM2_Init();
 8001c3e:	f000 fa39 	bl	80020b4 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001c42:	f000 fa95 	bl	8002170 <MX_TIM4_Init>
  MX_TIM6_Init();
 8001c46:	f000 faf3 	bl	8002230 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  // Initialize inverters
  initialize_inverter(&inverter_left, &led_left, ENABLE_L_GPIO_Port, ENABLE_L_Pin, &htim1, &hadc2);
 8001c4a:	4b17      	ldr	r3, [pc, #92]	@ (8001ca8 <main+0xa4>)
 8001c4c:	9301      	str	r3, [sp, #4]
 8001c4e:	4b17      	ldr	r3, [pc, #92]	@ (8001cac <main+0xa8>)
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	2380      	movs	r3, #128	@ 0x80
 8001c54:	4a16      	ldr	r2, [pc, #88]	@ (8001cb0 <main+0xac>)
 8001c56:	4917      	ldr	r1, [pc, #92]	@ (8001cb4 <main+0xb0>)
 8001c58:	4817      	ldr	r0, [pc, #92]	@ (8001cb8 <main+0xb4>)
 8001c5a:	f7fe ff19 	bl	8000a90 <initialize_inverter>
  initialize_inverter(&inverter_right, &led_right, ENABLE_R_GPIO_Port, ENABLE_R_Pin, &htim8, &hadc1);
 8001c5e:	4b17      	ldr	r3, [pc, #92]	@ (8001cbc <main+0xb8>)
 8001c60:	9301      	str	r3, [sp, #4]
 8001c62:	4b17      	ldr	r3, [pc, #92]	@ (8001cc0 <main+0xbc>)
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	2304      	movs	r3, #4
 8001c68:	4a16      	ldr	r2, [pc, #88]	@ (8001cc4 <main+0xc0>)
 8001c6a:	4917      	ldr	r1, [pc, #92]	@ (8001cc8 <main+0xc4>)
 8001c6c:	4817      	ldr	r0, [pc, #92]	@ (8001ccc <main+0xc8>)
 8001c6e:	f7fe ff0f 	bl	8000a90 <initialize_inverter>

  HAL_ADC_Start_DMA(&hadc2, (uint32_t *) rawADC_left,4); // Starts ADC DMA for left inverter
 8001c72:	2204      	movs	r2, #4
 8001c74:	4916      	ldr	r1, [pc, #88]	@ (8001cd0 <main+0xcc>)
 8001c76:	480c      	ldr	r0, [pc, #48]	@ (8001ca8 <main+0xa4>)
 8001c78:	f000 fe36 	bl	80028e8 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) rawADC_right,4); // Starts ADC DMA for right inverter
 8001c7c:	2204      	movs	r2, #4
 8001c7e:	4915      	ldr	r1, [pc, #84]	@ (8001cd4 <main+0xd0>)
 8001c80:	480e      	ldr	r0, [pc, #56]	@ (8001cbc <main+0xb8>)
 8001c82:	f000 fe31 	bl	80028e8 <HAL_ADC_Start_DMA>


  HAL_ADC_Start_DMA(&hadc3, (uint32_t *) rawADC_temp,4); // Starts ADC DMA for temperatures
 8001c86:	2204      	movs	r2, #4
 8001c88:	4913      	ldr	r1, [pc, #76]	@ (8001cd8 <main+0xd4>)
 8001c8a:	4814      	ldr	r0, [pc, #80]	@ (8001cdc <main+0xd8>)
 8001c8c:	f000 fe2c 	bl	80028e8 <HAL_ADC_Start_DMA>

  // 1ms timer
  HAL_TIM_Base_Start_IT(&htim6);
 8001c90:	4813      	ldr	r0, [pc, #76]	@ (8001ce0 <main+0xdc>)
 8001c92:	f003 fee5 	bl	8005a60 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

      // Run FSM for left inverter
	  eval_inv_FSM(&inverter_left);
 8001c96:	4808      	ldr	r0, [pc, #32]	@ (8001cb8 <main+0xb4>)
 8001c98:	f7fe fe68 	bl	800096c <eval_inv_FSM>

      // Run FSM for right inverter
	  eval_inv_FSM(&inverter_right);
 8001c9c:	480b      	ldr	r0, [pc, #44]	@ (8001ccc <main+0xc8>)
 8001c9e:	f7fe fe65 	bl	800096c <eval_inv_FSM>
	  eval_inv_FSM(&inverter_left);
 8001ca2:	bf00      	nop
 8001ca4:	e7f7      	b.n	8001c96 <main+0x92>
 8001ca6:	bf00      	nop
 8001ca8:	200001f0 	.word	0x200001f0
 8001cac:	20000430 	.word	0x20000430
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	200000a8 	.word	0x200000a8
 8001cbc:	200001a8 	.word	0x200001a8
 8001cc0:	20000560 	.word	0x20000560
 8001cc4:	40020400 	.word	0x40020400
 8001cc8:	20000008 	.word	0x20000008
 8001ccc:	2000010c 	.word	0x2000010c
 8001cd0:	20000170 	.word	0x20000170
 8001cd4:	20000180 	.word	0x20000180
 8001cd8:	20000190 	.word	0x20000190
 8001cdc:	20000238 	.word	0x20000238
 8001ce0:	20000514 	.word	0x20000514

08001ce4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b094      	sub	sp, #80	@ 0x50
 8001ce8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cea:	f107 031c 	add.w	r3, r7, #28
 8001cee:	2234      	movs	r2, #52	@ 0x34
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f005 fa76 	bl	80071e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cf8:	f107 0308 	add.w	r3, r7, #8
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d08:	4b2b      	ldr	r3, [pc, #172]	@ (8001db8 <SystemClock_Config+0xd4>)
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0c:	4a2a      	ldr	r2, [pc, #168]	@ (8001db8 <SystemClock_Config+0xd4>)
 8001d0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d12:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d14:	4b28      	ldr	r3, [pc, #160]	@ (8001db8 <SystemClock_Config+0xd4>)
 8001d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d1c:	607b      	str	r3, [r7, #4]
 8001d1e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d20:	4b26      	ldr	r3, [pc, #152]	@ (8001dbc <SystemClock_Config+0xd8>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a25      	ldr	r2, [pc, #148]	@ (8001dbc <SystemClock_Config+0xd8>)
 8001d26:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d2a:	6013      	str	r3, [r2, #0]
 8001d2c:	4b23      	ldr	r3, [pc, #140]	@ (8001dbc <SystemClock_Config+0xd8>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001d34:	603b      	str	r3, [r7, #0]
 8001d36:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d3c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d40:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d42:	2302      	movs	r3, #2
 8001d44:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d46:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 10;
 8001d4c:	230a      	movs	r3, #10
 8001d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001d50:	23d8      	movs	r3, #216	@ 0xd8
 8001d52:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d54:	2302      	movs	r3, #2
 8001d56:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001d58:	2309      	movs	r3, #9
 8001d5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d60:	f107 031c 	add.w	r3, r7, #28
 8001d64:	4618      	mov	r0, r3
 8001d66:	f002 fd9b 	bl	80048a0 <HAL_RCC_OscConfig>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001d70:	f000 f826 	bl	8001dc0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001d74:	f002 fd44 	bl	8004800 <HAL_PWREx_EnableOverDrive>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001d7e:	f000 f81f 	bl	8001dc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d82:	230f      	movs	r3, #15
 8001d84:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d86:	2302      	movs	r3, #2
 8001d88:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d8e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001d92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d98:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001d9a:	f107 0308 	add.w	r3, r7, #8
 8001d9e:	2107      	movs	r1, #7
 8001da0:	4618      	mov	r0, r3
 8001da2:	f003 f82b 	bl	8004dfc <HAL_RCC_ClockConfig>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001dac:	f000 f808 	bl	8001dc0 <Error_Handler>
  }
}
 8001db0:	bf00      	nop
 8001db2:	3750      	adds	r7, #80	@ 0x50
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	40007000 	.word	0x40007000

08001dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dc4:	b672      	cpsid	i
}
 8001dc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dc8:	bf00      	nop
 8001dca:	e7fd      	b.n	8001dc8 <Error_Handler+0x8>

08001dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8001e10 <HAL_MspInit+0x44>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd6:	4a0e      	ldr	r2, [pc, #56]	@ (8001e10 <HAL_MspInit+0x44>)
 8001dd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ddc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dde:	4b0c      	ldr	r3, [pc, #48]	@ (8001e10 <HAL_MspInit+0x44>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001de6:	607b      	str	r3, [r7, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dea:	4b09      	ldr	r3, [pc, #36]	@ (8001e10 <HAL_MspInit+0x44>)
 8001dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dee:	4a08      	ldr	r2, [pc, #32]	@ (8001e10 <HAL_MspInit+0x44>)
 8001df0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001df4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001df6:	4b06      	ldr	r3, [pc, #24]	@ (8001e10 <HAL_MspInit+0x44>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dfe:	603b      	str	r3, [r7, #0]
 8001e00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40023800 	.word	0x40023800

08001e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e18:	bf00      	nop
 8001e1a:	e7fd      	b.n	8001e18 <NMI_Handler+0x4>

08001e1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e20:	bf00      	nop
 8001e22:	e7fd      	b.n	8001e20 <HardFault_Handler+0x4>

08001e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e28:	bf00      	nop
 8001e2a:	e7fd      	b.n	8001e28 <MemManage_Handler+0x4>

08001e2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e30:	bf00      	nop
 8001e32:	e7fd      	b.n	8001e30 <BusFault_Handler+0x4>

08001e34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e38:	bf00      	nop
 8001e3a:	e7fd      	b.n	8001e38 <UsageFault_Handler+0x4>

08001e3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e6a:	f000 fcd9 	bl	8002820 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001e78:	4802      	ldr	r0, [pc, #8]	@ (8001e84 <CAN1_RX0_IRQHandler+0x10>)
 8001e7a:	f001 fa1a 	bl	80032b2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	200003a0 	.word	0x200003a0

08001e88 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e8c:	4803      	ldr	r0, [pc, #12]	@ (8001e9c <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001e8e:	f003 ff78 	bl	8005d82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  tasks_20us_left();
 8001e92:	f7ff f8b3 	bl	8000ffc <tasks_20us_left>
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000430 	.word	0x20000430

08001ea0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001ea4:	4804      	ldr	r0, [pc, #16]	@ (8001eb8 <TIM6_DAC_IRQHandler+0x18>)
 8001ea6:	f001 fd70 	bl	800398a <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8001eaa:	4804      	ldr	r0, [pc, #16]	@ (8001ebc <TIM6_DAC_IRQHandler+0x1c>)
 8001eac:	f003 ff69 	bl	8005d82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  tasks_1ms();
 8001eb0:	f7ff f842 	bl	8000f38 <tasks_1ms>
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001eb4:	bf00      	nop
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	200003c8 	.word	0x200003c8
 8001ebc:	20000514 	.word	0x20000514

08001ec0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ec4:	4802      	ldr	r0, [pc, #8]	@ (8001ed0 <DMA2_Stream0_IRQHandler+0x10>)
 8001ec6:	f001 ff2b 	bl	8003d20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000280 	.word	0x20000280

08001ed4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001ed8:	4802      	ldr	r0, [pc, #8]	@ (8001ee4 <DMA2_Stream1_IRQHandler+0x10>)
 8001eda:	f001 ff21 	bl	8003d20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000340 	.word	0x20000340

08001ee8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001eec:	4802      	ldr	r0, [pc, #8]	@ (8001ef8 <DMA2_Stream2_IRQHandler+0x10>)
 8001eee:	f001 ff17 	bl	8003d20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	200002e0 	.word	0x200002e0

08001efc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f00:	4b06      	ldr	r3, [pc, #24]	@ (8001f1c <SystemInit+0x20>)
 8001f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f06:	4a05      	ldr	r2, [pc, #20]	@ (8001f1c <SystemInit+0x20>)
 8001f08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b09a      	sub	sp, #104	@ 0x68
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f26:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	605a      	str	r2, [r3, #4]
 8001f30:	609a      	str	r2, [r3, #8]
 8001f32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f34:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f40:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]
 8001f50:	615a      	str	r2, [r3, #20]
 8001f52:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f54:	1d3b      	adds	r3, r7, #4
 8001f56:	222c      	movs	r2, #44	@ 0x2c
 8001f58:	2100      	movs	r1, #0
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f005 f942 	bl	80071e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f60:	4b52      	ldr	r3, [pc, #328]	@ (80020ac <MX_TIM1_Init+0x18c>)
 8001f62:	4a53      	ldr	r2, [pc, #332]	@ (80020b0 <MX_TIM1_Init+0x190>)
 8001f64:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f66:	4b51      	ldr	r3, [pc, #324]	@ (80020ac <MX_TIM1_Init+0x18c>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001f6c:	4b4f      	ldr	r3, [pc, #316]	@ (80020ac <MX_TIM1_Init+0x18c>)
 8001f6e:	2220      	movs	r2, #32
 8001f70:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = (216000000*TS)/2;
 8001f72:	4b4e      	ldr	r3, [pc, #312]	@ (80020ac <MX_TIM1_Init+0x18c>)
 8001f74:	f241 5218 	movw	r2, #5400	@ 0x1518
 8001f78:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f7a:	4b4c      	ldr	r3, [pc, #304]	@ (80020ac <MX_TIM1_Init+0x18c>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8001f80:	4b4a      	ldr	r3, [pc, #296]	@ (80020ac <MX_TIM1_Init+0x18c>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f86:	4b49      	ldr	r3, [pc, #292]	@ (80020ac <MX_TIM1_Init+0x18c>)
 8001f88:	2280      	movs	r2, #128	@ 0x80
 8001f8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f8c:	4847      	ldr	r0, [pc, #284]	@ (80020ac <MX_TIM1_Init+0x18c>)
 8001f8e:	f003 fd0f 	bl	80059b0 <HAL_TIM_Base_Init>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001f98:	f7ff ff12 	bl	8001dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fa0:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001fa2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4840      	ldr	r0, [pc, #256]	@ (80020ac <MX_TIM1_Init+0x18c>)
 8001faa:	f004 fa33 	bl	8006414 <HAL_TIM_ConfigClockSource>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001fb4:	f7ff ff04 	bl	8001dc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001fb8:	483c      	ldr	r0, [pc, #240]	@ (80020ac <MX_TIM1_Init+0x18c>)
 8001fba:	f003 fe2a 	bl	8005c12 <HAL_TIM_PWM_Init>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001fc4:	f7ff fefc 	bl	8001dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001fc8:	2320      	movs	r3, #32
 8001fca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fd4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4834      	ldr	r0, [pc, #208]	@ (80020ac <MX_TIM1_Init+0x18c>)
 8001fdc:	f004 ffd8 	bl	8006f90 <HAL_TIMEx_MasterConfigSynchronization>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001fe6:	f7ff feeb 	bl	8001dc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fea:	2360      	movs	r3, #96	@ 0x60
 8001fec:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8001ff6:	2308      	movs	r3, #8
 8001ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ffe:	2300      	movs	r3, #0
 8002000:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8002002:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002006:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002008:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800200c:	2200      	movs	r2, #0
 800200e:	4619      	mov	r1, r3
 8002010:	4826      	ldr	r0, [pc, #152]	@ (80020ac <MX_TIM1_Init+0x18c>)
 8002012:	f004 f8eb 	bl	80061ec <HAL_TIM_PWM_ConfigChannel>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 800201c:	f7ff fed0 	bl	8001dc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002020:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002024:	2204      	movs	r2, #4
 8002026:	4619      	mov	r1, r3
 8002028:	4820      	ldr	r0, [pc, #128]	@ (80020ac <MX_TIM1_Init+0x18c>)
 800202a:	f004 f8df 	bl	80061ec <HAL_TIM_PWM_ConfigChannel>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8002034:	f7ff fec4 	bl	8001dc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002038:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800203c:	2208      	movs	r2, #8
 800203e:	4619      	mov	r1, r3
 8002040:	481a      	ldr	r0, [pc, #104]	@ (80020ac <MX_TIM1_Init+0x18c>)
 8002042:	f004 f8d3 	bl	80061ec <HAL_TIM_PWM_ConfigChannel>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 800204c:	f7ff feb8 	bl	8001dc0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8002050:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002054:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8002056:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800205a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 800205c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002060:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = DT*216000000;
 8002062:	2320      	movs	r3, #32
 8002064:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800206a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800206e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002070:	2300      	movs	r3, #0
 8002072:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8002074:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002078:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800207a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800207e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002080:	2300      	movs	r3, #0
 8002082:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002084:	2300      	movs	r3, #0
 8002086:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002088:	1d3b      	adds	r3, r7, #4
 800208a:	4619      	mov	r1, r3
 800208c:	4807      	ldr	r0, [pc, #28]	@ (80020ac <MX_TIM1_Init+0x18c>)
 800208e:	f005 f80d 	bl	80070ac <HAL_TIMEx_ConfigBreakDeadTime>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_TIM1_Init+0x17c>
  {
    Error_Handler();
 8002098:	f7ff fe92 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800209c:	4803      	ldr	r0, [pc, #12]	@ (80020ac <MX_TIM1_Init+0x18c>)
 800209e:	f000 fab5 	bl	800260c <HAL_TIM_MspPostInit>

}
 80020a2:	bf00      	nop
 80020a4:	3768      	adds	r7, #104	@ 0x68
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000430 	.word	0x20000430
 80020b0:	40010000 	.word	0x40010000

080020b4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b088      	sub	sp, #32
 80020b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020ba:	f107 0314 	add.w	r3, r7, #20
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	605a      	str	r2, [r3, #4]
 80020c4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80020c6:	1d3b      	adds	r3, r7, #4
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	605a      	str	r2, [r3, #4]
 80020ce:	609a      	str	r2, [r3, #8]
 80020d0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020d2:	4b26      	ldr	r3, [pc, #152]	@ (800216c <MX_TIM2_Init+0xb8>)
 80020d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80020d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80020da:	4b24      	ldr	r3, [pc, #144]	@ (800216c <MX_TIM2_Init+0xb8>)
 80020dc:	2200      	movs	r2, #0
 80020de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020e0:	4b22      	ldr	r3, [pc, #136]	@ (800216c <MX_TIM2_Init+0xb8>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80020e6:	4b21      	ldr	r3, [pc, #132]	@ (800216c <MX_TIM2_Init+0xb8>)
 80020e8:	f04f 32ff 	mov.w	r2, #4294967295
 80020ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ee:	4b1f      	ldr	r3, [pc, #124]	@ (800216c <MX_TIM2_Init+0xb8>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020f4:	4b1d      	ldr	r3, [pc, #116]	@ (800216c <MX_TIM2_Init+0xb8>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80020fa:	481c      	ldr	r0, [pc, #112]	@ (800216c <MX_TIM2_Init+0xb8>)
 80020fc:	f003 fdea 	bl	8005cd4 <HAL_TIM_IC_Init>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002106:	f7ff fe5b 	bl	8001dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800210a:	2300      	movs	r3, #0
 800210c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002112:	f107 0314 	add.w	r3, r7, #20
 8002116:	4619      	mov	r1, r3
 8002118:	4814      	ldr	r0, [pc, #80]	@ (800216c <MX_TIM2_Init+0xb8>)
 800211a:	f004 ff39 	bl	8006f90 <HAL_TIMEx_MasterConfigSynchronization>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002124:	f7ff fe4c 	bl	8001dc0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002128:	2300      	movs	r3, #0
 800212a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800212c:	2301      	movs	r3, #1
 800212e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002130:	2300      	movs	r3, #0
 8002132:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002138:	1d3b      	adds	r3, r7, #4
 800213a:	2200      	movs	r2, #0
 800213c:	4619      	mov	r1, r3
 800213e:	480b      	ldr	r0, [pc, #44]	@ (800216c <MX_TIM2_Init+0xb8>)
 8002140:	f003 ffb8 	bl	80060b4 <HAL_TIM_IC_ConfigChannel>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800214a:	f7ff fe39 	bl	8001dc0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800214e:	1d3b      	adds	r3, r7, #4
 8002150:	2208      	movs	r2, #8
 8002152:	4619      	mov	r1, r3
 8002154:	4805      	ldr	r0, [pc, #20]	@ (800216c <MX_TIM2_Init+0xb8>)
 8002156:	f003 ffad 	bl	80060b4 <HAL_TIM_IC_ConfigChannel>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8002160:	f7ff fe2e 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002164:	bf00      	nop
 8002166:	3720      	adds	r7, #32
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	2000047c 	.word	0x2000047c

08002170 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b088      	sub	sp, #32
 8002174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002176:	f107 0314 	add.w	r3, r7, #20
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	605a      	str	r2, [r3, #4]
 8002180:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002182:	1d3b      	adds	r3, r7, #4
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800218e:	4b26      	ldr	r3, [pc, #152]	@ (8002228 <MX_TIM4_Init+0xb8>)
 8002190:	4a26      	ldr	r2, [pc, #152]	@ (800222c <MX_TIM4_Init+0xbc>)
 8002192:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002194:	4b24      	ldr	r3, [pc, #144]	@ (8002228 <MX_TIM4_Init+0xb8>)
 8002196:	2200      	movs	r2, #0
 8002198:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800219a:	4b23      	ldr	r3, [pc, #140]	@ (8002228 <MX_TIM4_Init+0xb8>)
 800219c:	2200      	movs	r2, #0
 800219e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80021a0:	4b21      	ldr	r3, [pc, #132]	@ (8002228 <MX_TIM4_Init+0xb8>)
 80021a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021a6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002228 <MX_TIM4_Init+0xb8>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002228 <MX_TIM4_Init+0xb8>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80021b4:	481c      	ldr	r0, [pc, #112]	@ (8002228 <MX_TIM4_Init+0xb8>)
 80021b6:	f003 fd8d 	bl	8005cd4 <HAL_TIM_IC_Init>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80021c0:	f7ff fdfe 	bl	8001dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021cc:	f107 0314 	add.w	r3, r7, #20
 80021d0:	4619      	mov	r1, r3
 80021d2:	4815      	ldr	r0, [pc, #84]	@ (8002228 <MX_TIM4_Init+0xb8>)
 80021d4:	f004 fedc 	bl	8006f90 <HAL_TIMEx_MasterConfigSynchronization>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80021de:	f7ff fdef 	bl	8001dc0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80021e2:	2300      	movs	r3, #0
 80021e4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80021e6:	2301      	movs	r3, #1
 80021e8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80021ea:	2300      	movs	r3, #0
 80021ec:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80021ee:	2300      	movs	r3, #0
 80021f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80021f2:	1d3b      	adds	r3, r7, #4
 80021f4:	2200      	movs	r2, #0
 80021f6:	4619      	mov	r1, r3
 80021f8:	480b      	ldr	r0, [pc, #44]	@ (8002228 <MX_TIM4_Init+0xb8>)
 80021fa:	f003 ff5b 	bl	80060b4 <HAL_TIM_IC_ConfigChannel>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002204:	f7ff fddc 	bl	8001dc0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002208:	1d3b      	adds	r3, r7, #4
 800220a:	2208      	movs	r2, #8
 800220c:	4619      	mov	r1, r3
 800220e:	4806      	ldr	r0, [pc, #24]	@ (8002228 <MX_TIM4_Init+0xb8>)
 8002210:	f003 ff50 	bl	80060b4 <HAL_TIM_IC_ConfigChannel>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800221a:	f7ff fdd1 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800221e:	bf00      	nop
 8002220:	3720      	adds	r7, #32
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	200004c8 	.word	0x200004c8
 800222c:	40000800 	.word	0x40000800

08002230 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002236:	1d3b      	adds	r3, r7, #4
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002240:	4b14      	ldr	r3, [pc, #80]	@ (8002294 <MX_TIM6_Init+0x64>)
 8002242:	4a15      	ldr	r2, [pc, #84]	@ (8002298 <MX_TIM6_Init+0x68>)
 8002244:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1;
 8002246:	4b13      	ldr	r3, [pc, #76]	@ (8002294 <MX_TIM6_Init+0x64>)
 8002248:	2201      	movs	r2, #1
 800224a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800224c:	4b11      	ldr	r3, [pc, #68]	@ (8002294 <MX_TIM6_Init+0x64>)
 800224e:	2200      	movs	r2, #0
 8002250:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 53999;
 8002252:	4b10      	ldr	r3, [pc, #64]	@ (8002294 <MX_TIM6_Init+0x64>)
 8002254:	f24d 22ef 	movw	r2, #53999	@ 0xd2ef
 8002258:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800225a:	4b0e      	ldr	r3, [pc, #56]	@ (8002294 <MX_TIM6_Init+0x64>)
 800225c:	2280      	movs	r2, #128	@ 0x80
 800225e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002260:	480c      	ldr	r0, [pc, #48]	@ (8002294 <MX_TIM6_Init+0x64>)
 8002262:	f003 fba5 	bl	80059b0 <HAL_TIM_Base_Init>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800226c:	f7ff fda8 	bl	8001dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002270:	2320      	movs	r3, #32
 8002272:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002274:	2300      	movs	r3, #0
 8002276:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002278:	1d3b      	adds	r3, r7, #4
 800227a:	4619      	mov	r1, r3
 800227c:	4805      	ldr	r0, [pc, #20]	@ (8002294 <MX_TIM6_Init+0x64>)
 800227e:	f004 fe87 	bl	8006f90 <HAL_TIMEx_MasterConfigSynchronization>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002288:	f7ff fd9a 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800228c:	bf00      	nop
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20000514 	.word	0x20000514
 8002298:	40001000 	.word	0x40001000

0800229c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b09a      	sub	sp, #104	@ 0x68
 80022a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022a2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	605a      	str	r2, [r3, #4]
 80022ac:	609a      	str	r2, [r3, #8]
 80022ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022b0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022bc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	60da      	str	r2, [r3, #12]
 80022ca:	611a      	str	r2, [r3, #16]
 80022cc:	615a      	str	r2, [r3, #20]
 80022ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80022d0:	1d3b      	adds	r3, r7, #4
 80022d2:	222c      	movs	r2, #44	@ 0x2c
 80022d4:	2100      	movs	r1, #0
 80022d6:	4618      	mov	r0, r3
 80022d8:	f004 ff84 	bl	80071e4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80022dc:	4b54      	ldr	r3, [pc, #336]	@ (8002430 <MX_TIM8_Init+0x194>)
 80022de:	4a55      	ldr	r2, [pc, #340]	@ (8002434 <MX_TIM8_Init+0x198>)
 80022e0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80022e2:	4b53      	ldr	r3, [pc, #332]	@ (8002430 <MX_TIM8_Init+0x194>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e8:	4b51      	ldr	r3, [pc, #324]	@ (8002430 <MX_TIM8_Init+0x194>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80022ee:	4b50      	ldr	r3, [pc, #320]	@ (8002430 <MX_TIM8_Init+0x194>)
 80022f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022f4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022f6:	4b4e      	ldr	r3, [pc, #312]	@ (8002430 <MX_TIM8_Init+0x194>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80022fc:	4b4c      	ldr	r3, [pc, #304]	@ (8002430 <MX_TIM8_Init+0x194>)
 80022fe:	2200      	movs	r2, #0
 8002300:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002302:	4b4b      	ldr	r3, [pc, #300]	@ (8002430 <MX_TIM8_Init+0x194>)
 8002304:	2200      	movs	r2, #0
 8002306:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002308:	4849      	ldr	r0, [pc, #292]	@ (8002430 <MX_TIM8_Init+0x194>)
 800230a:	f003 fb51 	bl	80059b0 <HAL_TIM_Base_Init>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8002314:	f7ff fd54 	bl	8001dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002318:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800231c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800231e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002322:	4619      	mov	r1, r3
 8002324:	4842      	ldr	r0, [pc, #264]	@ (8002430 <MX_TIM8_Init+0x194>)
 8002326:	f004 f875 	bl	8006414 <HAL_TIM_ConfigClockSource>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8002330:	f7ff fd46 	bl	8001dc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002334:	483e      	ldr	r0, [pc, #248]	@ (8002430 <MX_TIM8_Init+0x194>)
 8002336:	f003 fc6c 	bl	8005c12 <HAL_TIM_PWM_Init>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8002340:	f7ff fd3e 	bl	8001dc0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8002344:	483a      	ldr	r0, [pc, #232]	@ (8002430 <MX_TIM8_Init+0x194>)
 8002346:	f003 fc03 	bl	8005b50 <HAL_TIM_OC_Init>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <MX_TIM8_Init+0xb8>
  {
    Error_Handler();
 8002350:	f7ff fd36 	bl	8001dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002354:	2300      	movs	r3, #0
 8002356:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002358:	2300      	movs	r3, #0
 800235a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800235c:	2300      	movs	r3, #0
 800235e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002360:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002364:	4619      	mov	r1, r3
 8002366:	4832      	ldr	r0, [pc, #200]	@ (8002430 <MX_TIM8_Init+0x194>)
 8002368:	f004 fe12 	bl	8006f90 <HAL_TIMEx_MasterConfigSynchronization>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <MX_TIM8_Init+0xda>
  {
    Error_Handler();
 8002372:	f7ff fd25 	bl	8001dc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002376:	2360      	movs	r3, #96	@ 0x60
 8002378:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800237a:	2300      	movs	r3, #0
 800237c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800237e:	2300      	movs	r3, #0
 8002380:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002382:	2300      	movs	r3, #0
 8002384:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002386:	2300      	movs	r3, #0
 8002388:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800238a:	2300      	movs	r3, #0
 800238c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800238e:	2300      	movs	r3, #0
 8002390:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002392:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002396:	2200      	movs	r2, #0
 8002398:	4619      	mov	r1, r3
 800239a:	4825      	ldr	r0, [pc, #148]	@ (8002430 <MX_TIM8_Init+0x194>)
 800239c:	f003 ff26 	bl	80061ec <HAL_TIM_PWM_ConfigChannel>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 80023a6:	f7ff fd0b 	bl	8001dc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023aa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80023ae:	2204      	movs	r2, #4
 80023b0:	4619      	mov	r1, r3
 80023b2:	481f      	ldr	r0, [pc, #124]	@ (8002430 <MX_TIM8_Init+0x194>)
 80023b4:	f003 ff1a 	bl	80061ec <HAL_TIM_PWM_ConfigChannel>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 80023be:	f7ff fcff 	bl	8001dc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80023c2:	2300      	movs	r3, #0
 80023c4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023c6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80023ca:	2208      	movs	r2, #8
 80023cc:	4619      	mov	r1, r3
 80023ce:	4818      	ldr	r0, [pc, #96]	@ (8002430 <MX_TIM8_Init+0x194>)
 80023d0:	f003 fdf6 	bl	8005fc0 <HAL_TIM_OC_ConfigChannel>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80023da:	f7ff fcf1 	bl	8001dc0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023de:	2300      	movs	r3, #0
 80023e0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023e2:	2300      	movs	r3, #0
 80023e4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023e6:	2300      	movs	r3, #0
 80023e8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80023ea:	2300      	movs	r3, #0
 80023ec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023f6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80023fc:	2300      	movs	r3, #0
 80023fe:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002400:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002404:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002406:	2300      	movs	r3, #0
 8002408:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800240a:	2300      	movs	r3, #0
 800240c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800240e:	1d3b      	adds	r3, r7, #4
 8002410:	4619      	mov	r1, r3
 8002412:	4807      	ldr	r0, [pc, #28]	@ (8002430 <MX_TIM8_Init+0x194>)
 8002414:	f004 fe4a 	bl	80070ac <HAL_TIMEx_ConfigBreakDeadTime>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <MX_TIM8_Init+0x186>
  {
    Error_Handler();
 800241e:	f7ff fccf 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002422:	4803      	ldr	r0, [pc, #12]	@ (8002430 <MX_TIM8_Init+0x194>)
 8002424:	f000 f8f2 	bl	800260c <HAL_TIM_MspPostInit>

}
 8002428:	bf00      	nop
 800242a:	3768      	adds	r7, #104	@ 0x68
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	20000560 	.word	0x20000560
 8002434:	40010400 	.word	0x40010400

08002438 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a23      	ldr	r2, [pc, #140]	@ (80024d4 <HAL_TIM_Base_MspInit+0x9c>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d114      	bne.n	8002474 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800244a:	4b23      	ldr	r3, [pc, #140]	@ (80024d8 <HAL_TIM_Base_MspInit+0xa0>)
 800244c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244e:	4a22      	ldr	r2, [pc, #136]	@ (80024d8 <HAL_TIM_Base_MspInit+0xa0>)
 8002450:	f043 0301 	orr.w	r3, r3, #1
 8002454:	6453      	str	r3, [r2, #68]	@ 0x44
 8002456:	4b20      	ldr	r3, [pc, #128]	@ (80024d8 <HAL_TIM_Base_MspInit+0xa0>)
 8002458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	617b      	str	r3, [r7, #20]
 8002460:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002462:	2200      	movs	r2, #0
 8002464:	2100      	movs	r1, #0
 8002466:	2019      	movs	r0, #25
 8002468:	f001 fa37 	bl	80038da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800246c:	2019      	movs	r0, #25
 800246e:	f001 fa50 	bl	8003912 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002472:	e02a      	b.n	80024ca <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM6)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a18      	ldr	r2, [pc, #96]	@ (80024dc <HAL_TIM_Base_MspInit+0xa4>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d114      	bne.n	80024a8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800247e:	4b16      	ldr	r3, [pc, #88]	@ (80024d8 <HAL_TIM_Base_MspInit+0xa0>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002482:	4a15      	ldr	r2, [pc, #84]	@ (80024d8 <HAL_TIM_Base_MspInit+0xa0>)
 8002484:	f043 0310 	orr.w	r3, r3, #16
 8002488:	6413      	str	r3, [r2, #64]	@ 0x40
 800248a:	4b13      	ldr	r3, [pc, #76]	@ (80024d8 <HAL_TIM_Base_MspInit+0xa0>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248e:	f003 0310 	and.w	r3, r3, #16
 8002492:	613b      	str	r3, [r7, #16]
 8002494:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002496:	2200      	movs	r2, #0
 8002498:	2100      	movs	r1, #0
 800249a:	2036      	movs	r0, #54	@ 0x36
 800249c:	f001 fa1d 	bl	80038da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80024a0:	2036      	movs	r0, #54	@ 0x36
 80024a2:	f001 fa36 	bl	8003912 <HAL_NVIC_EnableIRQ>
}
 80024a6:	e010      	b.n	80024ca <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM8)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a0c      	ldr	r2, [pc, #48]	@ (80024e0 <HAL_TIM_Base_MspInit+0xa8>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d10b      	bne.n	80024ca <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80024b2:	4b09      	ldr	r3, [pc, #36]	@ (80024d8 <HAL_TIM_Base_MspInit+0xa0>)
 80024b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024b6:	4a08      	ldr	r2, [pc, #32]	@ (80024d8 <HAL_TIM_Base_MspInit+0xa0>)
 80024b8:	f043 0302 	orr.w	r3, r3, #2
 80024bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80024be:	4b06      	ldr	r3, [pc, #24]	@ (80024d8 <HAL_TIM_Base_MspInit+0xa0>)
 80024c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	68fb      	ldr	r3, [r7, #12]
}
 80024ca:	bf00      	nop
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40010000 	.word	0x40010000
 80024d8:	40023800 	.word	0x40023800
 80024dc:	40001000 	.word	0x40001000
 80024e0:	40010400 	.word	0x40010400

080024e4 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08c      	sub	sp, #48	@ 0x30
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ec:	f107 031c 	add.w	r3, r7, #28
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	60da      	str	r2, [r3, #12]
 80024fa:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002504:	d146      	bne.n	8002594 <HAL_TIM_IC_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002506:	4b3c      	ldr	r3, [pc, #240]	@ (80025f8 <HAL_TIM_IC_MspInit+0x114>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250a:	4a3b      	ldr	r2, [pc, #236]	@ (80025f8 <HAL_TIM_IC_MspInit+0x114>)
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	6413      	str	r3, [r2, #64]	@ 0x40
 8002512:	4b39      	ldr	r3, [pc, #228]	@ (80025f8 <HAL_TIM_IC_MspInit+0x114>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	61bb      	str	r3, [r7, #24]
 800251c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800251e:	4b36      	ldr	r3, [pc, #216]	@ (80025f8 <HAL_TIM_IC_MspInit+0x114>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002522:	4a35      	ldr	r2, [pc, #212]	@ (80025f8 <HAL_TIM_IC_MspInit+0x114>)
 8002524:	f043 0302 	orr.w	r3, r3, #2
 8002528:	6313      	str	r3, [r2, #48]	@ 0x30
 800252a:	4b33      	ldr	r3, [pc, #204]	@ (80025f8 <HAL_TIM_IC_MspInit+0x114>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	617b      	str	r3, [r7, #20]
 8002534:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002536:	4b30      	ldr	r3, [pc, #192]	@ (80025f8 <HAL_TIM_IC_MspInit+0x114>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253a:	4a2f      	ldr	r2, [pc, #188]	@ (80025f8 <HAL_TIM_IC_MspInit+0x114>)
 800253c:	f043 0301 	orr.w	r3, r3, #1
 8002540:	6313      	str	r3, [r2, #48]	@ 0x30
 8002542:	4b2d      	ldr	r3, [pc, #180]	@ (80025f8 <HAL_TIM_IC_MspInit+0x114>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	613b      	str	r3, [r7, #16]
 800254c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = B_R_Pin;
 800254e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002552:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002554:	2302      	movs	r3, #2
 8002556:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002558:	2300      	movs	r3, #0
 800255a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255c:	2300      	movs	r3, #0
 800255e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002560:	2301      	movs	r3, #1
 8002562:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(B_R_GPIO_Port, &GPIO_InitStruct);
 8002564:	f107 031c 	add.w	r3, r7, #28
 8002568:	4619      	mov	r1, r3
 800256a:	4824      	ldr	r0, [pc, #144]	@ (80025fc <HAL_TIM_IC_MspInit+0x118>)
 800256c:	f001 fe42 	bl	80041f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A_R_Pin;
 8002570:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002576:	2302      	movs	r3, #2
 8002578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257a:	2300      	movs	r3, #0
 800257c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257e:	2300      	movs	r3, #0
 8002580:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002582:	2301      	movs	r3, #1
 8002584:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(A_R_GPIO_Port, &GPIO_InitStruct);
 8002586:	f107 031c 	add.w	r3, r7, #28
 800258a:	4619      	mov	r1, r3
 800258c:	481c      	ldr	r0, [pc, #112]	@ (8002600 <HAL_TIM_IC_MspInit+0x11c>)
 800258e:	f001 fe31 	bl	80041f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002592:	e02d      	b.n	80025f0 <HAL_TIM_IC_MspInit+0x10c>
  else if(tim_icHandle->Instance==TIM4)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a1a      	ldr	r2, [pc, #104]	@ (8002604 <HAL_TIM_IC_MspInit+0x120>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d128      	bne.n	80025f0 <HAL_TIM_IC_MspInit+0x10c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800259e:	4b16      	ldr	r3, [pc, #88]	@ (80025f8 <HAL_TIM_IC_MspInit+0x114>)
 80025a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a2:	4a15      	ldr	r2, [pc, #84]	@ (80025f8 <HAL_TIM_IC_MspInit+0x114>)
 80025a4:	f043 0304 	orr.w	r3, r3, #4
 80025a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80025aa:	4b13      	ldr	r3, [pc, #76]	@ (80025f8 <HAL_TIM_IC_MspInit+0x114>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ae:	f003 0304 	and.w	r3, r3, #4
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025b6:	4b10      	ldr	r3, [pc, #64]	@ (80025f8 <HAL_TIM_IC_MspInit+0x114>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ba:	4a0f      	ldr	r2, [pc, #60]	@ (80025f8 <HAL_TIM_IC_MspInit+0x114>)
 80025bc:	f043 0308 	orr.w	r3, r3, #8
 80025c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025c2:	4b0d      	ldr	r3, [pc, #52]	@ (80025f8 <HAL_TIM_IC_MspInit+0x114>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	60bb      	str	r3, [r7, #8]
 80025cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = A_L_Pin|B_L_Pin;
 80025ce:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80025d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d4:	2302      	movs	r3, #2
 80025d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d8:	2300      	movs	r3, #0
 80025da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025dc:	2300      	movs	r3, #0
 80025de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80025e0:	2302      	movs	r3, #2
 80025e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025e4:	f107 031c 	add.w	r3, r7, #28
 80025e8:	4619      	mov	r1, r3
 80025ea:	4807      	ldr	r0, [pc, #28]	@ (8002608 <HAL_TIM_IC_MspInit+0x124>)
 80025ec:	f001 fe02 	bl	80041f4 <HAL_GPIO_Init>
}
 80025f0:	bf00      	nop
 80025f2:	3730      	adds	r7, #48	@ 0x30
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40023800 	.word	0x40023800
 80025fc:	40020400 	.word	0x40020400
 8002600:	40020000 	.word	0x40020000
 8002604:	40000800 	.word	0x40000800
 8002608:	40020c00 	.word	0x40020c00

0800260c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b08c      	sub	sp, #48	@ 0x30
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002614:	f107 031c 	add.w	r3, r7, #28
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	605a      	str	r2, [r3, #4]
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	60da      	str	r2, [r3, #12]
 8002622:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a3f      	ldr	r2, [pc, #252]	@ (8002728 <HAL_TIM_MspPostInit+0x11c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d11d      	bne.n	800266a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800262e:	4b3f      	ldr	r3, [pc, #252]	@ (800272c <HAL_TIM_MspPostInit+0x120>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002632:	4a3e      	ldr	r2, [pc, #248]	@ (800272c <HAL_TIM_MspPostInit+0x120>)
 8002634:	f043 0310 	orr.w	r3, r3, #16
 8002638:	6313      	str	r3, [r2, #48]	@ 0x30
 800263a:	4b3c      	ldr	r3, [pc, #240]	@ (800272c <HAL_TIM_MspPostInit+0x120>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263e:	f003 0310 	and.w	r3, r3, #16
 8002642:	61bb      	str	r3, [r7, #24]
 8002644:	69bb      	ldr	r3, [r7, #24]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWM1_L_Pin|PWM2_L_Pin|PWM3_L_Pin|PWM4_L_Pin
 8002646:	f44f 537c 	mov.w	r3, #16128	@ 0x3f00
 800264a:	61fb      	str	r3, [r7, #28]
                          |PWM5_L_Pin|PWM6_L_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264c:	2302      	movs	r3, #2
 800264e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002650:	2300      	movs	r3, #0
 8002652:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002654:	2300      	movs	r3, #0
 8002656:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002658:	2301      	movs	r3, #1
 800265a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800265c:	f107 031c 	add.w	r3, r7, #28
 8002660:	4619      	mov	r1, r3
 8002662:	4833      	ldr	r0, [pc, #204]	@ (8002730 <HAL_TIM_MspPostInit+0x124>)
 8002664:	f001 fdc6 	bl	80041f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002668:	e05a      	b.n	8002720 <HAL_TIM_MspPostInit+0x114>
  else if(timHandle->Instance==TIM8)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a31      	ldr	r2, [pc, #196]	@ (8002734 <HAL_TIM_MspPostInit+0x128>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d155      	bne.n	8002720 <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002674:	4b2d      	ldr	r3, [pc, #180]	@ (800272c <HAL_TIM_MspPostInit+0x120>)
 8002676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002678:	4a2c      	ldr	r2, [pc, #176]	@ (800272c <HAL_TIM_MspPostInit+0x120>)
 800267a:	f043 0301 	orr.w	r3, r3, #1
 800267e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002680:	4b2a      	ldr	r3, [pc, #168]	@ (800272c <HAL_TIM_MspPostInit+0x120>)
 8002682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	617b      	str	r3, [r7, #20]
 800268a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800268c:	4b27      	ldr	r3, [pc, #156]	@ (800272c <HAL_TIM_MspPostInit+0x120>)
 800268e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002690:	4a26      	ldr	r2, [pc, #152]	@ (800272c <HAL_TIM_MspPostInit+0x120>)
 8002692:	f043 0302 	orr.w	r3, r3, #2
 8002696:	6313      	str	r3, [r2, #48]	@ 0x30
 8002698:	4b24      	ldr	r3, [pc, #144]	@ (800272c <HAL_TIM_MspPostInit+0x120>)
 800269a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	613b      	str	r3, [r7, #16]
 80026a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026a4:	4b21      	ldr	r3, [pc, #132]	@ (800272c <HAL_TIM_MspPostInit+0x120>)
 80026a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a8:	4a20      	ldr	r2, [pc, #128]	@ (800272c <HAL_TIM_MspPostInit+0x120>)
 80026aa:	f043 0304 	orr.w	r3, r3, #4
 80026ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80026b0:	4b1e      	ldr	r3, [pc, #120]	@ (800272c <HAL_TIM_MspPostInit+0x120>)
 80026b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM1_R_Pin;
 80026bc:	2320      	movs	r3, #32
 80026be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c0:	2302      	movs	r3, #2
 80026c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c8:	2300      	movs	r3, #0
 80026ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80026cc:	2303      	movs	r3, #3
 80026ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM1_R_GPIO_Port, &GPIO_InitStruct);
 80026d0:	f107 031c 	add.w	r3, r7, #28
 80026d4:	4619      	mov	r1, r3
 80026d6:	4818      	ldr	r0, [pc, #96]	@ (8002738 <HAL_TIM_MspPostInit+0x12c>)
 80026d8:	f001 fd8c 	bl	80041f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM3_R_Pin|PWM5_R_Pin;
 80026dc:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80026e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e2:	2302      	movs	r3, #2
 80026e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ea:	2300      	movs	r3, #0
 80026ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80026ee:	2303      	movs	r3, #3
 80026f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026f2:	f107 031c 	add.w	r3, r7, #28
 80026f6:	4619      	mov	r1, r3
 80026f8:	4810      	ldr	r0, [pc, #64]	@ (800273c <HAL_TIM_MspPostInit+0x130>)
 80026fa:	f001 fd7b 	bl	80041f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM2_R_Pin|PWM4_R_Pin|PWM6_R_Pin;
 80026fe:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8002702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002704:	2302      	movs	r3, #2
 8002706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002708:	2300      	movs	r3, #0
 800270a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270c:	2300      	movs	r3, #0
 800270e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002710:	2303      	movs	r3, #3
 8002712:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002714:	f107 031c 	add.w	r3, r7, #28
 8002718:	4619      	mov	r1, r3
 800271a:	4809      	ldr	r0, [pc, #36]	@ (8002740 <HAL_TIM_MspPostInit+0x134>)
 800271c:	f001 fd6a 	bl	80041f4 <HAL_GPIO_Init>
}
 8002720:	bf00      	nop
 8002722:	3730      	adds	r7, #48	@ 0x30
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40010000 	.word	0x40010000
 800272c:	40023800 	.word	0x40023800
 8002730:	40021000 	.word	0x40021000
 8002734:	40010400 	.word	0x40010400
 8002738:	40020000 	.word	0x40020000
 800273c:	40020400 	.word	0x40020400
 8002740:	40020800 	.word	0x40020800

08002744 <MX_USB_OTG_FS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_USB_Init(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002748:	bf00      	nop
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
	...

08002754 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002754:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800278c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002758:	480d      	ldr	r0, [pc, #52]	@ (8002790 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800275a:	490e      	ldr	r1, [pc, #56]	@ (8002794 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800275c:	4a0e      	ldr	r2, [pc, #56]	@ (8002798 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800275e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002760:	e002      	b.n	8002768 <LoopCopyDataInit>

08002762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002766:	3304      	adds	r3, #4

08002768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800276a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800276c:	d3f9      	bcc.n	8002762 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800276e:	4a0b      	ldr	r2, [pc, #44]	@ (800279c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002770:	4c0b      	ldr	r4, [pc, #44]	@ (80027a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002774:	e001      	b.n	800277a <LoopFillZerobss>

08002776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002778:	3204      	adds	r2, #4

0800277a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800277a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800277c:	d3fb      	bcc.n	8002776 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800277e:	f7ff fbbd 	bl	8001efc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002782:	f004 fd3d 	bl	8007200 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002786:	f7ff fa3d 	bl	8001c04 <main>
  bx  lr    
 800278a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800278c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002794:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002798:	0800ffc8 	.word	0x0800ffc8
  ldr r2, =_sbss
 800279c:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80027a0:	200006e8 	.word	0x200006e8

080027a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027a4:	e7fe      	b.n	80027a4 <ADC_IRQHandler>

080027a6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027aa:	2003      	movs	r0, #3
 80027ac:	f001 f88a 	bl	80038c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027b0:	200f      	movs	r0, #15
 80027b2:	f000 f805 	bl	80027c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027b6:	f7ff fb09 	bl	8001dcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	bd80      	pop	{r7, pc}

080027c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027c8:	4b12      	ldr	r3, [pc, #72]	@ (8002814 <HAL_InitTick+0x54>)
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	4b12      	ldr	r3, [pc, #72]	@ (8002818 <HAL_InitTick+0x58>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	4619      	mov	r1, r3
 80027d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80027da:	fbb2 f3f3 	udiv	r3, r2, r3
 80027de:	4618      	mov	r0, r3
 80027e0:	f001 f8a5 	bl	800392e <HAL_SYSTICK_Config>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e00e      	b.n	800280c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b0f      	cmp	r3, #15
 80027f2:	d80a      	bhi.n	800280a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027f4:	2200      	movs	r2, #0
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	f04f 30ff 	mov.w	r0, #4294967295
 80027fc:	f001 f86d 	bl	80038da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002800:	4a06      	ldr	r2, [pc, #24]	@ (800281c <HAL_InitTick+0x5c>)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002806:	2300      	movs	r3, #0
 8002808:	e000      	b.n	800280c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
}
 800280c:	4618      	mov	r0, r3
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	20000030 	.word	0x20000030
 8002818:	20000038 	.word	0x20000038
 800281c:	20000034 	.word	0x20000034

08002820 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002824:	4b06      	ldr	r3, [pc, #24]	@ (8002840 <HAL_IncTick+0x20>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	461a      	mov	r2, r3
 800282a:	4b06      	ldr	r3, [pc, #24]	@ (8002844 <HAL_IncTick+0x24>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4413      	add	r3, r2
 8002830:	4a04      	ldr	r2, [pc, #16]	@ (8002844 <HAL_IncTick+0x24>)
 8002832:	6013      	str	r3, [r2, #0]
}
 8002834:	bf00      	nop
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	20000038 	.word	0x20000038
 8002844:	200005ac 	.word	0x200005ac

08002848 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  return uwTick;
 800284c:	4b03      	ldr	r3, [pc, #12]	@ (800285c <HAL_GetTick+0x14>)
 800284e:	681b      	ldr	r3, [r3, #0]
}
 8002850:	4618      	mov	r0, r3
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	200005ac 	.word	0x200005ac

08002860 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002868:	2300      	movs	r3, #0
 800286a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e031      	b.n	80028da <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287a:	2b00      	cmp	r3, #0
 800287c:	d109      	bne.n	8002892 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7fe fd88 	bl	8001394 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002896:	f003 0310 	and.w	r3, r3, #16
 800289a:	2b00      	cmp	r3, #0
 800289c:	d116      	bne.n	80028cc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028a2:	4b10      	ldr	r3, [pc, #64]	@ (80028e4 <HAL_ADC_Init+0x84>)
 80028a4:	4013      	ands	r3, r2
 80028a6:	f043 0202 	orr.w	r2, r3, #2
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 fa88 	bl	8002dc4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028be:	f023 0303 	bic.w	r3, r3, #3
 80028c2:	f043 0201 	orr.w	r2, r3, #1
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	641a      	str	r2, [r3, #64]	@ 0x40
 80028ca:	e001      	b.n	80028d0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	ffffeefd 	.word	0xffffeefd

080028e8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 80028f4:	2300      	movs	r3, #0
 80028f6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d101      	bne.n	8002906 <HAL_ADC_Start_DMA+0x1e>
 8002902:	2302      	movs	r3, #2
 8002904:	e0d4      	b.n	8002ab0 <HAL_ADC_Start_DMA+0x1c8>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b01      	cmp	r3, #1
 800291a:	d018      	beq.n	800294e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689a      	ldr	r2, [r3, #8]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0201 	orr.w	r2, r2, #1
 800292a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800292c:	4b62      	ldr	r3, [pc, #392]	@ (8002ab8 <HAL_ADC_Start_DMA+0x1d0>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a62      	ldr	r2, [pc, #392]	@ (8002abc <HAL_ADC_Start_DMA+0x1d4>)
 8002932:	fba2 2303 	umull	r2, r3, r2, r3
 8002936:	0c9a      	lsrs	r2, r3, #18
 8002938:	4613      	mov	r3, r2
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	4413      	add	r3, r2
 800293e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002940:	e002      	b.n	8002948 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	3b01      	subs	r3, #1
 8002946:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f9      	bne.n	8002942 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b01      	cmp	r3, #1
 800295a:	f040 809c 	bne.w	8002a96 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002962:	4b57      	ldr	r3, [pc, #348]	@ (8002ac0 <HAL_ADC_Start_DMA+0x1d8>)
 8002964:	4013      	ands	r3, r2
 8002966:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002978:	2b00      	cmp	r3, #0
 800297a:	d007      	beq.n	800298c <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002980:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002984:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002990:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002994:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002998:	d106      	bne.n	80029a8 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800299e:	f023 0206 	bic.w	r2, r3, #6
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	645a      	str	r2, [r3, #68]	@ 0x44
 80029a6:	e002      	b.n	80029ae <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ba:	4a42      	ldr	r2, [pc, #264]	@ (8002ac4 <HAL_ADC_Start_DMA+0x1dc>)
 80029bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029c2:	4a41      	ldr	r2, [pc, #260]	@ (8002ac8 <HAL_ADC_Start_DMA+0x1e0>)
 80029c4:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ca:	4a40      	ldr	r2, [pc, #256]	@ (8002acc <HAL_ADC_Start_DMA+0x1e4>)
 80029cc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80029d6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	685a      	ldr	r2, [r3, #4]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80029e6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029f6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	334c      	adds	r3, #76	@ 0x4c
 8002a02:	4619      	mov	r1, r3
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f001 f92a 	bl	8003c60 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002a0c:	4b30      	ldr	r3, [pc, #192]	@ (8002ad0 <HAL_ADC_Start_DMA+0x1e8>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 031f 	and.w	r3, r3, #31
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10f      	bne.n	8002a38 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d143      	bne.n	8002aae <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002a34:	609a      	str	r2, [r3, #8]
 8002a36:	e03a      	b.n	8002aae <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a25      	ldr	r2, [pc, #148]	@ (8002ad4 <HAL_ADC_Start_DMA+0x1ec>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d10e      	bne.n	8002a60 <HAL_ADC_Start_DMA+0x178>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d107      	bne.n	8002a60 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002a5e:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002a60:	4b1b      	ldr	r3, [pc, #108]	@ (8002ad0 <HAL_ADC_Start_DMA+0x1e8>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f003 0310 	and.w	r3, r3, #16
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d120      	bne.n	8002aae <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a19      	ldr	r2, [pc, #100]	@ (8002ad8 <HAL_ADC_Start_DMA+0x1f0>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d11b      	bne.n	8002aae <HAL_ADC_Start_DMA+0x1c6>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d114      	bne.n	8002aae <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002a92:	609a      	str	r2, [r3, #8]
 8002a94:	e00b      	b.n	8002aae <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9a:	f043 0210 	orr.w	r2, r3, #16
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa6:	f043 0201 	orr.w	r2, r3, #1
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3718      	adds	r7, #24
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	20000030 	.word	0x20000030
 8002abc:	431bde83 	.word	0x431bde83
 8002ac0:	fffff8fe 	.word	0xfffff8fe
 8002ac4:	08002fb9 	.word	0x08002fb9
 8002ac8:	08003073 	.word	0x08003073
 8002acc:	0800308f 	.word	0x0800308f
 8002ad0:	40012300 	.word	0x40012300
 8002ad4:	40012000 	.word	0x40012000
 8002ad8:	40012200 	.word	0x40012200

08002adc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002b22:	2300      	movs	r3, #0
 8002b24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d101      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x1c>
 8002b30:	2302      	movs	r3, #2
 8002b32:	e136      	b.n	8002da2 <HAL_ADC_ConfigChannel+0x28a>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b09      	cmp	r3, #9
 8002b42:	d93a      	bls.n	8002bba <HAL_ADC_ConfigChannel+0xa2>
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b4c:	d035      	beq.n	8002bba <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68d9      	ldr	r1, [r3, #12]
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	4413      	add	r3, r2
 8002b62:	3b1e      	subs	r3, #30
 8002b64:	2207      	movs	r2, #7
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	43da      	mvns	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	400a      	ands	r2, r1
 8002b72:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a8d      	ldr	r2, [pc, #564]	@ (8002db0 <HAL_ADC_ConfigChannel+0x298>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d10a      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68d9      	ldr	r1, [r3, #12]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	061a      	lsls	r2, r3, #24
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b92:	e035      	b.n	8002c00 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68d9      	ldr	r1, [r3, #12]
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	689a      	ldr	r2, [r3, #8]
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	4403      	add	r3, r0
 8002bac:	3b1e      	subs	r3, #30
 8002bae:	409a      	lsls	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bb8:	e022      	b.n	8002c00 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6919      	ldr	r1, [r3, #16]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	4613      	mov	r3, r2
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	4413      	add	r3, r2
 8002bce:	2207      	movs	r2, #7
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	43da      	mvns	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	400a      	ands	r2, r1
 8002bdc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6919      	ldr	r1, [r3, #16]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	4618      	mov	r0, r3
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	4403      	add	r3, r0
 8002bf6:	409a      	lsls	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2b06      	cmp	r3, #6
 8002c06:	d824      	bhi.n	8002c52 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	4613      	mov	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	3b05      	subs	r3, #5
 8002c1a:	221f      	movs	r2, #31
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	43da      	mvns	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	400a      	ands	r2, r1
 8002c28:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	4618      	mov	r0, r3
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685a      	ldr	r2, [r3, #4]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	3b05      	subs	r3, #5
 8002c44:	fa00 f203 	lsl.w	r2, r0, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c50:	e04c      	b.n	8002cec <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b0c      	cmp	r3, #12
 8002c58:	d824      	bhi.n	8002ca4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	4613      	mov	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4413      	add	r3, r2
 8002c6a:	3b23      	subs	r3, #35	@ 0x23
 8002c6c:	221f      	movs	r2, #31
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	43da      	mvns	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	400a      	ands	r2, r1
 8002c7a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	4618      	mov	r0, r3
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	3b23      	subs	r3, #35	@ 0x23
 8002c96:	fa00 f203 	lsl.w	r2, r0, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ca2:	e023      	b.n	8002cec <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3b41      	subs	r3, #65	@ 0x41
 8002cb6:	221f      	movs	r2, #31
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	43da      	mvns	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	400a      	ands	r2, r1
 8002cc4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4413      	add	r3, r2
 8002cde:	3b41      	subs	r3, #65	@ 0x41
 8002ce0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a30      	ldr	r2, [pc, #192]	@ (8002db4 <HAL_ADC_ConfigChannel+0x29c>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d10a      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x1f4>
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002cfe:	d105      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002d00:	4b2d      	ldr	r3, [pc, #180]	@ (8002db8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	4a2c      	ldr	r2, [pc, #176]	@ (8002db8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002d06:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002d0a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a28      	ldr	r2, [pc, #160]	@ (8002db4 <HAL_ADC_ConfigChannel+0x29c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d10f      	bne.n	8002d36 <HAL_ADC_ConfigChannel+0x21e>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2b12      	cmp	r3, #18
 8002d1c:	d10b      	bne.n	8002d36 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002d1e:	4b26      	ldr	r3, [pc, #152]	@ (8002db8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	4a25      	ldr	r2, [pc, #148]	@ (8002db8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002d24:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002d28:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002d2a:	4b23      	ldr	r3, [pc, #140]	@ (8002db8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	4a22      	ldr	r2, [pc, #136]	@ (8002db8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002d30:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d34:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a1e      	ldr	r2, [pc, #120]	@ (8002db4 <HAL_ADC_ConfigChannel+0x29c>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d12b      	bne.n	8002d98 <HAL_ADC_ConfigChannel+0x280>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a1a      	ldr	r2, [pc, #104]	@ (8002db0 <HAL_ADC_ConfigChannel+0x298>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d003      	beq.n	8002d52 <HAL_ADC_ConfigChannel+0x23a>
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2b11      	cmp	r3, #17
 8002d50:	d122      	bne.n	8002d98 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002d52:	4b19      	ldr	r3, [pc, #100]	@ (8002db8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	4a18      	ldr	r2, [pc, #96]	@ (8002db8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002d58:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002d5c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002d5e:	4b16      	ldr	r3, [pc, #88]	@ (8002db8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	4a15      	ldr	r2, [pc, #84]	@ (8002db8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002d64:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d68:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a10      	ldr	r2, [pc, #64]	@ (8002db0 <HAL_ADC_ConfigChannel+0x298>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d111      	bne.n	8002d98 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002d74:	4b11      	ldr	r3, [pc, #68]	@ (8002dbc <HAL_ADC_ConfigChannel+0x2a4>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a11      	ldr	r2, [pc, #68]	@ (8002dc0 <HAL_ADC_ConfigChannel+0x2a8>)
 8002d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7e:	0c9a      	lsrs	r2, r3, #18
 8002d80:	4613      	mov	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002d8a:	e002      	b.n	8002d92 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1f9      	bne.n	8002d8c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	10000012 	.word	0x10000012
 8002db4:	40012000 	.word	0x40012000
 8002db8:	40012300 	.word	0x40012300
 8002dbc:	20000030 	.word	0x20000030
 8002dc0:	431bde83 	.word	0x431bde83

08002dc4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002dcc:	4b78      	ldr	r3, [pc, #480]	@ (8002fb0 <ADC_Init+0x1ec>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	4a77      	ldr	r2, [pc, #476]	@ (8002fb0 <ADC_Init+0x1ec>)
 8002dd2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002dd6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002dd8:	4b75      	ldr	r3, [pc, #468]	@ (8002fb0 <ADC_Init+0x1ec>)
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	4973      	ldr	r1, [pc, #460]	@ (8002fb0 <ADC_Init+0x1ec>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002df4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6859      	ldr	r1, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	021a      	lsls	r2, r3, #8
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002e18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6859      	ldr	r1, [r3, #4]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689a      	ldr	r2, [r3, #8]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6899      	ldr	r1, [r3, #8]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68da      	ldr	r2, [r3, #12]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e52:	4a58      	ldr	r2, [pc, #352]	@ (8002fb4 <ADC_Init+0x1f0>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d022      	beq.n	8002e9e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e66:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6899      	ldr	r1, [r3, #8]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002e88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6899      	ldr	r1, [r3, #8]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	609a      	str	r2, [r3, #8]
 8002e9c:	e00f      	b.n	8002ebe <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002eac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002ebc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 0202 	bic.w	r2, r2, #2
 8002ecc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6899      	ldr	r1, [r3, #8]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	005a      	lsls	r2, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d01b      	beq.n	8002f24 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002efa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002f0a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6859      	ldr	r1, [r3, #4]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f16:	3b01      	subs	r3, #1
 8002f18:	035a      	lsls	r2, r3, #13
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	605a      	str	r2, [r3, #4]
 8002f22:	e007      	b.n	8002f34 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f32:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002f42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	051a      	lsls	r2, r3, #20
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002f68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6899      	ldr	r1, [r3, #8]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002f76:	025a      	lsls	r2, r3, #9
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6899      	ldr	r1, [r3, #8]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	029a      	lsls	r2, r3, #10
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	609a      	str	r2, [r3, #8]
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr
 8002fb0:	40012300 	.word	0x40012300
 8002fb4:	0f000001 	.word	0x0f000001

08002fb8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fc4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fca:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d13c      	bne.n	800304c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d12b      	bne.n	8003044 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d127      	bne.n	8003044 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ffa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d006      	beq.n	8003010 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800300c:	2b00      	cmp	r3, #0
 800300e:	d119      	bne.n	8003044 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0220 	bic.w	r2, r2, #32
 800301e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003024:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003030:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d105      	bne.n	8003044 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303c:	f043 0201 	orr.w	r2, r3, #1
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f7ff fd49 	bl	8002adc <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800304a:	e00e      	b.n	800306a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003050:	f003 0310 	and.w	r3, r3, #16
 8003054:	2b00      	cmp	r3, #0
 8003056:	d003      	beq.n	8003060 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f7ff fd53 	bl	8002b04 <HAL_ADC_ErrorCallback>
}
 800305e:	e004      	b.n	800306a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	4798      	blx	r3
}
 800306a:	bf00      	nop
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b084      	sub	sp, #16
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800307e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f7ff fd35 	bl	8002af0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003086:	bf00      	nop
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b084      	sub	sp, #16
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800309a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2240      	movs	r2, #64	@ 0x40
 80030a0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a6:	f043 0204 	orr.w	r2, r3, #4
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f7ff fd28 	bl	8002b04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030b4:	bf00      	nop
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e0ed      	b.n	80032aa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d102      	bne.n	80030e0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7fe fae2 	bl	80016a4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f042 0201 	orr.w	r2, r2, #1
 80030ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030f0:	f7ff fbaa 	bl	8002848 <HAL_GetTick>
 80030f4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80030f6:	e012      	b.n	800311e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80030f8:	f7ff fba6 	bl	8002848 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b0a      	cmp	r3, #10
 8003104:	d90b      	bls.n	800311e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2205      	movs	r2, #5
 8003116:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e0c5      	b.n	80032aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0e5      	beq.n	80030f8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 0202 	bic.w	r2, r2, #2
 800313a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800313c:	f7ff fb84 	bl	8002848 <HAL_GetTick>
 8003140:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003142:	e012      	b.n	800316a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003144:	f7ff fb80 	bl	8002848 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b0a      	cmp	r3, #10
 8003150:	d90b      	bls.n	800316a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003156:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2205      	movs	r2, #5
 8003162:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e09f      	b.n	80032aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1e5      	bne.n	8003144 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	7e1b      	ldrb	r3, [r3, #24]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d108      	bne.n	8003192 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	e007      	b.n	80031a2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	7e5b      	ldrb	r3, [r3, #25]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d108      	bne.n	80031bc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	e007      	b.n	80031cc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	7e9b      	ldrb	r3, [r3, #26]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d108      	bne.n	80031e6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0220 	orr.w	r2, r2, #32
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	e007      	b.n	80031f6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0220 	bic.w	r2, r2, #32
 80031f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	7edb      	ldrb	r3, [r3, #27]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d108      	bne.n	8003210 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 0210 	bic.w	r2, r2, #16
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	e007      	b.n	8003220 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0210 	orr.w	r2, r2, #16
 800321e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	7f1b      	ldrb	r3, [r3, #28]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d108      	bne.n	800323a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0208 	orr.w	r2, r2, #8
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	e007      	b.n	800324a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 0208 	bic.w	r2, r2, #8
 8003248:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	7f5b      	ldrb	r3, [r3, #29]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d108      	bne.n	8003264 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f042 0204 	orr.w	r2, r2, #4
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	e007      	b.n	8003274 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0204 	bic.w	r2, r2, #4
 8003272:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	431a      	orrs	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	ea42 0103 	orr.w	r1, r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	1e5a      	subs	r2, r3, #1
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	430a      	orrs	r2, r1
 8003298:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b08a      	sub	sp, #40	@ 0x28
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80032ba:	2300      	movs	r3, #0
 80032bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80032ee:	6a3b      	ldr	r3, [r7, #32]
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d07c      	beq.n	80033f2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d023      	beq.n	800334a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2201      	movs	r2, #1
 8003308:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 f983 	bl	8003620 <HAL_CAN_TxMailbox0CompleteCallback>
 800331a:	e016      	b.n	800334a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	f003 0304 	and.w	r3, r3, #4
 8003322:	2b00      	cmp	r3, #0
 8003324:	d004      	beq.n	8003330 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003328:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800332c:	627b      	str	r3, [r7, #36]	@ 0x24
 800332e:	e00c      	b.n	800334a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	f003 0308 	and.w	r3, r3, #8
 8003336:	2b00      	cmp	r3, #0
 8003338:	d004      	beq.n	8003344 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800333a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003340:	627b      	str	r3, [r7, #36]	@ 0x24
 8003342:	e002      	b.n	800334a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 f989 	bl	800365c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003350:	2b00      	cmp	r3, #0
 8003352:	d024      	beq.n	800339e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800335c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003364:	2b00      	cmp	r3, #0
 8003366:	d003      	beq.n	8003370 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f963 	bl	8003634 <HAL_CAN_TxMailbox1CompleteCallback>
 800336e:	e016      	b.n	800339e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003376:	2b00      	cmp	r3, #0
 8003378:	d004      	beq.n	8003384 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800337a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003380:	627b      	str	r3, [r7, #36]	@ 0x24
 8003382:	e00c      	b.n	800339e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800338a:	2b00      	cmp	r3, #0
 800338c:	d004      	beq.n	8003398 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800338e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003390:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003394:	627b      	str	r3, [r7, #36]	@ 0x24
 8003396:	e002      	b.n	800339e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 f969 	bl	8003670 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d024      	beq.n	80033f2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80033b0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d003      	beq.n	80033c4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 f943 	bl	8003648 <HAL_CAN_TxMailbox2CompleteCallback>
 80033c2:	e016      	b.n	80033f2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d004      	beq.n	80033d8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80033ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80033d6:	e00c      	b.n	80033f2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d004      	beq.n	80033ec <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80033e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80033ea:	e002      	b.n	80033f2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f949 	bl	8003684 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	f003 0308 	and.w	r3, r3, #8
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00c      	beq.n	8003416 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f003 0310 	and.w	r3, r3, #16
 8003402:	2b00      	cmp	r3, #0
 8003404:	d007      	beq.n	8003416 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003408:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800340c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2210      	movs	r2, #16
 8003414:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003416:	6a3b      	ldr	r3, [r7, #32]
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00b      	beq.n	8003438 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	2b00      	cmp	r3, #0
 8003428:	d006      	beq.n	8003438 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2208      	movs	r2, #8
 8003430:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f93a 	bl	80036ac <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003438:	6a3b      	ldr	r3, [r7, #32]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d009      	beq.n	8003456 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	f003 0303 	and.w	r3, r3, #3
 800344c:	2b00      	cmp	r3, #0
 800344e:	d002      	beq.n	8003456 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f921 	bl	8003698 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003456:	6a3b      	ldr	r3, [r7, #32]
 8003458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00c      	beq.n	800347a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	f003 0310 	and.w	r3, r3, #16
 8003466:	2b00      	cmp	r3, #0
 8003468:	d007      	beq.n	800347a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800346a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800346c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003470:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2210      	movs	r2, #16
 8003478:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800347a:	6a3b      	ldr	r3, [r7, #32]
 800347c:	f003 0320 	and.w	r3, r3, #32
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00b      	beq.n	800349c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	f003 0308 	and.w	r3, r3, #8
 800348a:	2b00      	cmp	r3, #0
 800348c:	d006      	beq.n	800349c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2208      	movs	r2, #8
 8003494:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f91c 	bl	80036d4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	f003 0310 	and.w	r3, r3, #16
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d009      	beq.n	80034ba <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	f003 0303 	and.w	r3, r3, #3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 f903 	bl	80036c0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00b      	beq.n	80034dc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	f003 0310 	and.w	r3, r3, #16
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d006      	beq.n	80034dc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2210      	movs	r2, #16
 80034d4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f906 	bl	80036e8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00b      	beq.n	80034fe <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	f003 0308 	and.w	r3, r3, #8
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d006      	beq.n	80034fe <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2208      	movs	r2, #8
 80034f6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f8ff 	bl	80036fc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80034fe:	6a3b      	ldr	r3, [r7, #32]
 8003500:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d07b      	beq.n	8003600 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	f003 0304 	and.w	r3, r3, #4
 800350e:	2b00      	cmp	r3, #0
 8003510:	d072      	beq.n	80035f8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003512:	6a3b      	ldr	r3, [r7, #32]
 8003514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003518:	2b00      	cmp	r3, #0
 800351a:	d008      	beq.n	800352e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003528:	f043 0301 	orr.w	r3, r3, #1
 800352c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800352e:	6a3b      	ldr	r3, [r7, #32]
 8003530:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003534:	2b00      	cmp	r3, #0
 8003536:	d008      	beq.n	800354a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003544:	f043 0302 	orr.w	r3, r3, #2
 8003548:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800354a:	6a3b      	ldr	r3, [r7, #32]
 800354c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003550:	2b00      	cmp	r3, #0
 8003552:	d008      	beq.n	8003566 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800355e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003560:	f043 0304 	orr.w	r3, r3, #4
 8003564:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800356c:	2b00      	cmp	r3, #0
 800356e:	d043      	beq.n	80035f8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003576:	2b00      	cmp	r3, #0
 8003578:	d03e      	beq.n	80035f8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003580:	2b60      	cmp	r3, #96	@ 0x60
 8003582:	d02b      	beq.n	80035dc <HAL_CAN_IRQHandler+0x32a>
 8003584:	2b60      	cmp	r3, #96	@ 0x60
 8003586:	d82e      	bhi.n	80035e6 <HAL_CAN_IRQHandler+0x334>
 8003588:	2b50      	cmp	r3, #80	@ 0x50
 800358a:	d022      	beq.n	80035d2 <HAL_CAN_IRQHandler+0x320>
 800358c:	2b50      	cmp	r3, #80	@ 0x50
 800358e:	d82a      	bhi.n	80035e6 <HAL_CAN_IRQHandler+0x334>
 8003590:	2b40      	cmp	r3, #64	@ 0x40
 8003592:	d019      	beq.n	80035c8 <HAL_CAN_IRQHandler+0x316>
 8003594:	2b40      	cmp	r3, #64	@ 0x40
 8003596:	d826      	bhi.n	80035e6 <HAL_CAN_IRQHandler+0x334>
 8003598:	2b30      	cmp	r3, #48	@ 0x30
 800359a:	d010      	beq.n	80035be <HAL_CAN_IRQHandler+0x30c>
 800359c:	2b30      	cmp	r3, #48	@ 0x30
 800359e:	d822      	bhi.n	80035e6 <HAL_CAN_IRQHandler+0x334>
 80035a0:	2b10      	cmp	r3, #16
 80035a2:	d002      	beq.n	80035aa <HAL_CAN_IRQHandler+0x2f8>
 80035a4:	2b20      	cmp	r3, #32
 80035a6:	d005      	beq.n	80035b4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80035a8:	e01d      	b.n	80035e6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80035aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ac:	f043 0308 	orr.w	r3, r3, #8
 80035b0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80035b2:	e019      	b.n	80035e8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80035b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b6:	f043 0310 	orr.w	r3, r3, #16
 80035ba:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80035bc:	e014      	b.n	80035e8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80035be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c0:	f043 0320 	orr.w	r3, r3, #32
 80035c4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80035c6:	e00f      	b.n	80035e8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80035c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035ce:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80035d0:	e00a      	b.n	80035e8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80035d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035d8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80035da:	e005      	b.n	80035e8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80035dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035e2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80035e4:	e000      	b.n	80035e8 <HAL_CAN_IRQHandler+0x336>
            break;
 80035e6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	699a      	ldr	r2, [r3, #24]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80035f6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2204      	movs	r2, #4
 80035fe:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003602:	2b00      	cmp	r3, #0
 8003604:	d008      	beq.n	8003618 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800360a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360c:	431a      	orrs	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f87c 	bl	8003710 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003618:	bf00      	nop
 800361a:	3728      	adds	r7, #40	@ 0x28
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f003 0307 	and.w	r3, r3, #7
 8003732:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003734:	4b0b      	ldr	r3, [pc, #44]	@ (8003764 <__NVIC_SetPriorityGrouping+0x40>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003740:	4013      	ands	r3, r2
 8003742:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800374c:	4b06      	ldr	r3, [pc, #24]	@ (8003768 <__NVIC_SetPriorityGrouping+0x44>)
 800374e:	4313      	orrs	r3, r2
 8003750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003752:	4a04      	ldr	r2, [pc, #16]	@ (8003764 <__NVIC_SetPriorityGrouping+0x40>)
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	60d3      	str	r3, [r2, #12]
}
 8003758:	bf00      	nop
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	e000ed00 	.word	0xe000ed00
 8003768:	05fa0000 	.word	0x05fa0000

0800376c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003770:	4b04      	ldr	r3, [pc, #16]	@ (8003784 <__NVIC_GetPriorityGrouping+0x18>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	0a1b      	lsrs	r3, r3, #8
 8003776:	f003 0307 	and.w	r3, r3, #7
}
 800377a:	4618      	mov	r0, r3
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr
 8003784:	e000ed00 	.word	0xe000ed00

08003788 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	4603      	mov	r3, r0
 8003790:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003796:	2b00      	cmp	r3, #0
 8003798:	db0b      	blt.n	80037b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800379a:	79fb      	ldrb	r3, [r7, #7]
 800379c:	f003 021f 	and.w	r2, r3, #31
 80037a0:	4907      	ldr	r1, [pc, #28]	@ (80037c0 <__NVIC_EnableIRQ+0x38>)
 80037a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a6:	095b      	lsrs	r3, r3, #5
 80037a8:	2001      	movs	r0, #1
 80037aa:	fa00 f202 	lsl.w	r2, r0, r2
 80037ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037b2:	bf00      	nop
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	e000e100 	.word	0xe000e100

080037c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	4603      	mov	r3, r0
 80037cc:	6039      	str	r1, [r7, #0]
 80037ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	db0a      	blt.n	80037ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	b2da      	uxtb	r2, r3
 80037dc:	490c      	ldr	r1, [pc, #48]	@ (8003810 <__NVIC_SetPriority+0x4c>)
 80037de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e2:	0112      	lsls	r2, r2, #4
 80037e4:	b2d2      	uxtb	r2, r2
 80037e6:	440b      	add	r3, r1
 80037e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037ec:	e00a      	b.n	8003804 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	b2da      	uxtb	r2, r3
 80037f2:	4908      	ldr	r1, [pc, #32]	@ (8003814 <__NVIC_SetPriority+0x50>)
 80037f4:	79fb      	ldrb	r3, [r7, #7]
 80037f6:	f003 030f 	and.w	r3, r3, #15
 80037fa:	3b04      	subs	r3, #4
 80037fc:	0112      	lsls	r2, r2, #4
 80037fe:	b2d2      	uxtb	r2, r2
 8003800:	440b      	add	r3, r1
 8003802:	761a      	strb	r2, [r3, #24]
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr
 8003810:	e000e100 	.word	0xe000e100
 8003814:	e000ed00 	.word	0xe000ed00

08003818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003818:	b480      	push	{r7}
 800381a:	b089      	sub	sp, #36	@ 0x24
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	f1c3 0307 	rsb	r3, r3, #7
 8003832:	2b04      	cmp	r3, #4
 8003834:	bf28      	it	cs
 8003836:	2304      	movcs	r3, #4
 8003838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	3304      	adds	r3, #4
 800383e:	2b06      	cmp	r3, #6
 8003840:	d902      	bls.n	8003848 <NVIC_EncodePriority+0x30>
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	3b03      	subs	r3, #3
 8003846:	e000      	b.n	800384a <NVIC_EncodePriority+0x32>
 8003848:	2300      	movs	r3, #0
 800384a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800384c:	f04f 32ff 	mov.w	r2, #4294967295
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	fa02 f303 	lsl.w	r3, r2, r3
 8003856:	43da      	mvns	r2, r3
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	401a      	ands	r2, r3
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003860:	f04f 31ff 	mov.w	r1, #4294967295
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	fa01 f303 	lsl.w	r3, r1, r3
 800386a:	43d9      	mvns	r1, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003870:	4313      	orrs	r3, r2
         );
}
 8003872:	4618      	mov	r0, r3
 8003874:	3724      	adds	r7, #36	@ 0x24
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
	...

08003880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3b01      	subs	r3, #1
 800388c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003890:	d301      	bcc.n	8003896 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003892:	2301      	movs	r3, #1
 8003894:	e00f      	b.n	80038b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003896:	4a0a      	ldr	r2, [pc, #40]	@ (80038c0 <SysTick_Config+0x40>)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3b01      	subs	r3, #1
 800389c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800389e:	210f      	movs	r1, #15
 80038a0:	f04f 30ff 	mov.w	r0, #4294967295
 80038a4:	f7ff ff8e 	bl	80037c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038a8:	4b05      	ldr	r3, [pc, #20]	@ (80038c0 <SysTick_Config+0x40>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038ae:	4b04      	ldr	r3, [pc, #16]	@ (80038c0 <SysTick_Config+0x40>)
 80038b0:	2207      	movs	r2, #7
 80038b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	e000e010 	.word	0xe000e010

080038c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f7ff ff29 	bl	8003724 <__NVIC_SetPriorityGrouping>
}
 80038d2:	bf00      	nop
 80038d4:	3708      	adds	r7, #8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038da:	b580      	push	{r7, lr}
 80038dc:	b086      	sub	sp, #24
 80038de:	af00      	add	r7, sp, #0
 80038e0:	4603      	mov	r3, r0
 80038e2:	60b9      	str	r1, [r7, #8]
 80038e4:	607a      	str	r2, [r7, #4]
 80038e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80038e8:	2300      	movs	r3, #0
 80038ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038ec:	f7ff ff3e 	bl	800376c <__NVIC_GetPriorityGrouping>
 80038f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	68b9      	ldr	r1, [r7, #8]
 80038f6:	6978      	ldr	r0, [r7, #20]
 80038f8:	f7ff ff8e 	bl	8003818 <NVIC_EncodePriority>
 80038fc:	4602      	mov	r2, r0
 80038fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003902:	4611      	mov	r1, r2
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff ff5d 	bl	80037c4 <__NVIC_SetPriority>
}
 800390a:	bf00      	nop
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b082      	sub	sp, #8
 8003916:	af00      	add	r7, sp, #0
 8003918:	4603      	mov	r3, r0
 800391a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800391c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff ff31 	bl	8003788 <__NVIC_EnableIRQ>
}
 8003926:	bf00      	nop
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b082      	sub	sp, #8
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7ff ffa2 	bl	8003880 <SysTick_Config>
 800393c:	4603      	mov	r3, r0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b082      	sub	sp, #8
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e014      	b.n	8003982 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	791b      	ldrb	r3, [r3, #4]
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d105      	bne.n	800396e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f7fd ff11 	bl	8001790 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2202      	movs	r2, #2
 8003972:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b082      	sub	sp, #8
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800399c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039a0:	d120      	bne.n	80039e4 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039b0:	d118      	bne.n	80039e4 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2204      	movs	r2, #4
 80039b6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	f043 0201 	orr.w	r2, r3, #1
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80039cc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80039dc:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f82d 	bl	8003a3e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039f2:	d120      	bne.n	8003a36 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a02:	d118      	bne.n	8003a36 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2204      	movs	r2, #4
 8003a08:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f043 0202 	orr.w	r2, r3, #2
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003a1e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8003a2e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f85d 	bl	8003af0 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8003a36:	bf00      	nop
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b083      	sub	sp, #12
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003a46:	bf00      	nop
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b087      	sub	sp, #28
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	60f8      	str	r0, [r7, #12]
 8003a5a:	60b9      	str	r1, [r7, #8]
 8003a5c:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	795b      	ldrb	r3, [r3, #5]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d101      	bne.n	8003a6a <HAL_DAC_ConfigChannel+0x18>
 8003a66:	2302      	movs	r3, #2
 8003a68:	e03c      	b.n	8003ae4 <HAL_DAC_ConfigChannel+0x92>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2202      	movs	r2, #2
 8003a74:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f003 0310 	and.w	r3, r3, #16
 8003a84:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	43db      	mvns	r3, r3
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	4013      	ands	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f003 0310 	and.w	r3, r3, #16
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	6819      	ldr	r1, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f003 0310 	and.w	r3, r3, #16
 8003ac6:	22c0      	movs	r2, #192	@ 0xc0
 8003ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8003acc:	43da      	mvns	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	400a      	ands	r2, r1
 8003ad4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	371c      	adds	r7, #28
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b10:	f7fe fe9a 	bl	8002848 <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d101      	bne.n	8003b20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e099      	b.n	8003c54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0201 	bic.w	r2, r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b40:	e00f      	b.n	8003b62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b42:	f7fe fe81 	bl	8002848 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b05      	cmp	r3, #5
 8003b4e:	d908      	bls.n	8003b62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2220      	movs	r2, #32
 8003b54:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2203      	movs	r2, #3
 8003b5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e078      	b.n	8003c54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1e8      	bne.n	8003b42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	4b38      	ldr	r3, [pc, #224]	@ (8003c5c <HAL_DMA_Init+0x158>)
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ba6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb8:	2b04      	cmp	r3, #4
 8003bba:	d107      	bne.n	8003bcc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f023 0307 	bic.w	r3, r3, #7
 8003be2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf2:	2b04      	cmp	r3, #4
 8003bf4:	d117      	bne.n	8003c26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00e      	beq.n	8003c26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 fa77 	bl	80040fc <DMA_CheckFifoParam>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d008      	beq.n	8003c26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2240      	movs	r2, #64	@ 0x40
 8003c18:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003c22:	2301      	movs	r3, #1
 8003c24:	e016      	b.n	8003c54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 fa2e 	bl	8004090 <DMA_CalcBaseAndBitshift>
 8003c34:	4603      	mov	r3, r0
 8003c36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c3c:	223f      	movs	r2, #63	@ 0x3f
 8003c3e:	409a      	lsls	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3718      	adds	r7, #24
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	e010803f 	.word	0xe010803f

08003c60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
 8003c6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d101      	bne.n	8003c86 <HAL_DMA_Start_IT+0x26>
 8003c82:	2302      	movs	r3, #2
 8003c84:	e048      	b.n	8003d18 <HAL_DMA_Start_IT+0xb8>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d137      	bne.n	8003d0a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	68b9      	ldr	r1, [r7, #8]
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 f9c0 	bl	8004034 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cb8:	223f      	movs	r2, #63	@ 0x3f
 8003cba:	409a      	lsls	r2, r3
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0216 	orr.w	r2, r2, #22
 8003cce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	695a      	ldr	r2, [r3, #20]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003cde:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d007      	beq.n	8003cf8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 0208 	orr.w	r2, r2, #8
 8003cf6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0201 	orr.w	r2, r2, #1
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	e005      	b.n	8003d16 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003d12:	2302      	movs	r3, #2
 8003d14:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3718      	adds	r7, #24
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003d2c:	4b8e      	ldr	r3, [pc, #568]	@ (8003f68 <HAL_DMA_IRQHandler+0x248>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a8e      	ldr	r2, [pc, #568]	@ (8003f6c <HAL_DMA_IRQHandler+0x24c>)
 8003d32:	fba2 2303 	umull	r2, r3, r2, r3
 8003d36:	0a9b      	lsrs	r3, r3, #10
 8003d38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d4a:	2208      	movs	r2, #8
 8003d4c:	409a      	lsls	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	4013      	ands	r3, r2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d01a      	beq.n	8003d8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d013      	beq.n	8003d8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0204 	bic.w	r2, r2, #4
 8003d72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d78:	2208      	movs	r2, #8
 8003d7a:	409a      	lsls	r2, r3
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d84:	f043 0201 	orr.w	r2, r3, #1
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d90:	2201      	movs	r2, #1
 8003d92:	409a      	lsls	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	4013      	ands	r3, r2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d012      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00b      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dae:	2201      	movs	r2, #1
 8003db0:	409a      	lsls	r2, r3
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dba:	f043 0202 	orr.w	r2, r3, #2
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dc6:	2204      	movs	r2, #4
 8003dc8:	409a      	lsls	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d012      	beq.n	8003df8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00b      	beq.n	8003df8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003de4:	2204      	movs	r2, #4
 8003de6:	409a      	lsls	r2, r3
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003df0:	f043 0204 	orr.w	r2, r3, #4
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dfc:	2210      	movs	r2, #16
 8003dfe:	409a      	lsls	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4013      	ands	r3, r2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d043      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0308 	and.w	r3, r3, #8
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d03c      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e1a:	2210      	movs	r2, #16
 8003e1c:	409a      	lsls	r2, r3
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d018      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d108      	bne.n	8003e50 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d024      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	4798      	blx	r3
 8003e4e:	e01f      	b.n	8003e90 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d01b      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	4798      	blx	r3
 8003e60:	e016      	b.n	8003e90 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d107      	bne.n	8003e80 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 0208 	bic.w	r2, r2, #8
 8003e7e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d003      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e94:	2220      	movs	r2, #32
 8003e96:	409a      	lsls	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 808f 	beq.w	8003fc0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0310 	and.w	r3, r3, #16
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 8087 	beq.w	8003fc0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	409a      	lsls	r2, r3
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b05      	cmp	r3, #5
 8003ec8:	d136      	bne.n	8003f38 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0216 	bic.w	r2, r2, #22
 8003ed8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695a      	ldr	r2, [r3, #20]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ee8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d103      	bne.n	8003efa <HAL_DMA_IRQHandler+0x1da>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d007      	beq.n	8003f0a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 0208 	bic.w	r2, r2, #8
 8003f08:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f0e:	223f      	movs	r2, #63	@ 0x3f
 8003f10:	409a      	lsls	r2, r3
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d07e      	beq.n	800402c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	4798      	blx	r3
        }
        return;
 8003f36:	e079      	b.n	800402c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d01d      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10d      	bne.n	8003f70 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d031      	beq.n	8003fc0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	4798      	blx	r3
 8003f64:	e02c      	b.n	8003fc0 <HAL_DMA_IRQHandler+0x2a0>
 8003f66:	bf00      	nop
 8003f68:	20000030 	.word	0x20000030
 8003f6c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d023      	beq.n	8003fc0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	4798      	blx	r3
 8003f80:	e01e      	b.n	8003fc0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10f      	bne.n	8003fb0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 0210 	bic.w	r2, r2, #16
 8003f9e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d003      	beq.n	8003fc0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d032      	beq.n	800402e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d022      	beq.n	800401a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2205      	movs	r2, #5
 8003fd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 0201 	bic.w	r2, r2, #1
 8003fea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	3301      	adds	r3, #1
 8003ff0:	60bb      	str	r3, [r7, #8]
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d307      	bcc.n	8004008 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1f2      	bne.n	8003fec <HAL_DMA_IRQHandler+0x2cc>
 8004006:	e000      	b.n	800400a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004008:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800401e:	2b00      	cmp	r3, #0
 8004020:	d005      	beq.n	800402e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	4798      	blx	r3
 800402a:	e000      	b.n	800402e <HAL_DMA_IRQHandler+0x30e>
        return;
 800402c:	bf00      	nop
    }
  }
}
 800402e:	3718      	adds	r7, #24
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
 8004040:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004050:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	683a      	ldr	r2, [r7, #0]
 8004058:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	2b40      	cmp	r3, #64	@ 0x40
 8004060:	d108      	bne.n	8004074 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004072:	e007      	b.n	8004084 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68ba      	ldr	r2, [r7, #8]
 800407a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	60da      	str	r2, [r3, #12]
}
 8004084:	bf00      	nop
 8004086:	3714      	adds	r7, #20
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	b2db      	uxtb	r3, r3
 800409e:	3b10      	subs	r3, #16
 80040a0:	4a13      	ldr	r2, [pc, #76]	@ (80040f0 <DMA_CalcBaseAndBitshift+0x60>)
 80040a2:	fba2 2303 	umull	r2, r3, r2, r3
 80040a6:	091b      	lsrs	r3, r3, #4
 80040a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80040aa:	4a12      	ldr	r2, [pc, #72]	@ (80040f4 <DMA_CalcBaseAndBitshift+0x64>)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4413      	add	r3, r2
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	461a      	mov	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2b03      	cmp	r3, #3
 80040bc:	d908      	bls.n	80040d0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	461a      	mov	r2, r3
 80040c4:	4b0c      	ldr	r3, [pc, #48]	@ (80040f8 <DMA_CalcBaseAndBitshift+0x68>)
 80040c6:	4013      	ands	r3, r2
 80040c8:	1d1a      	adds	r2, r3, #4
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	659a      	str	r2, [r3, #88]	@ 0x58
 80040ce:	e006      	b.n	80040de <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	461a      	mov	r2, r3
 80040d6:	4b08      	ldr	r3, [pc, #32]	@ (80040f8 <DMA_CalcBaseAndBitshift+0x68>)
 80040d8:	4013      	ands	r3, r2
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	aaaaaaab 	.word	0xaaaaaaab
 80040f4:	0800fe70 	.word	0x0800fe70
 80040f8:	fffffc00 	.word	0xfffffc00

080040fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004104:	2300      	movs	r3, #0
 8004106:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800410c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d11f      	bne.n	8004156 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	2b03      	cmp	r3, #3
 800411a:	d856      	bhi.n	80041ca <DMA_CheckFifoParam+0xce>
 800411c:	a201      	add	r2, pc, #4	@ (adr r2, 8004124 <DMA_CheckFifoParam+0x28>)
 800411e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004122:	bf00      	nop
 8004124:	08004135 	.word	0x08004135
 8004128:	08004147 	.word	0x08004147
 800412c:	08004135 	.word	0x08004135
 8004130:	080041cb 	.word	0x080041cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004138:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d046      	beq.n	80041ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004144:	e043      	b.n	80041ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800414a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800414e:	d140      	bne.n	80041d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004154:	e03d      	b.n	80041d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800415e:	d121      	bne.n	80041a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	2b03      	cmp	r3, #3
 8004164:	d837      	bhi.n	80041d6 <DMA_CheckFifoParam+0xda>
 8004166:	a201      	add	r2, pc, #4	@ (adr r2, 800416c <DMA_CheckFifoParam+0x70>)
 8004168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416c:	0800417d 	.word	0x0800417d
 8004170:	08004183 	.word	0x08004183
 8004174:	0800417d 	.word	0x0800417d
 8004178:	08004195 	.word	0x08004195
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	73fb      	strb	r3, [r7, #15]
      break;
 8004180:	e030      	b.n	80041e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004186:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d025      	beq.n	80041da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004192:	e022      	b.n	80041da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004198:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800419c:	d11f      	bne.n	80041de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80041a2:	e01c      	b.n	80041de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d903      	bls.n	80041b2 <DMA_CheckFifoParam+0xb6>
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	2b03      	cmp	r3, #3
 80041ae:	d003      	beq.n	80041b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80041b0:	e018      	b.n	80041e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	73fb      	strb	r3, [r7, #15]
      break;
 80041b6:	e015      	b.n	80041e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00e      	beq.n	80041e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	73fb      	strb	r3, [r7, #15]
      break;
 80041c8:	e00b      	b.n	80041e2 <DMA_CheckFifoParam+0xe6>
      break;
 80041ca:	bf00      	nop
 80041cc:	e00a      	b.n	80041e4 <DMA_CheckFifoParam+0xe8>
      break;
 80041ce:	bf00      	nop
 80041d0:	e008      	b.n	80041e4 <DMA_CheckFifoParam+0xe8>
      break;
 80041d2:	bf00      	nop
 80041d4:	e006      	b.n	80041e4 <DMA_CheckFifoParam+0xe8>
      break;
 80041d6:	bf00      	nop
 80041d8:	e004      	b.n	80041e4 <DMA_CheckFifoParam+0xe8>
      break;
 80041da:	bf00      	nop
 80041dc:	e002      	b.n	80041e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80041de:	bf00      	nop
 80041e0:	e000      	b.n	80041e4 <DMA_CheckFifoParam+0xe8>
      break;
 80041e2:	bf00      	nop
    }
  } 
  
  return status; 
 80041e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop

080041f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b089      	sub	sp, #36	@ 0x24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80041fe:	2300      	movs	r3, #0
 8004200:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004202:	2300      	movs	r3, #0
 8004204:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004206:	2300      	movs	r3, #0
 8004208:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800420a:	2300      	movs	r3, #0
 800420c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800420e:	2300      	movs	r3, #0
 8004210:	61fb      	str	r3, [r7, #28]
 8004212:	e175      	b.n	8004500 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004214:	2201      	movs	r2, #1
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	fa02 f303 	lsl.w	r3, r2, r3
 800421c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	4013      	ands	r3, r2
 8004226:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	429a      	cmp	r2, r3
 800422e:	f040 8164 	bne.w	80044fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f003 0303 	and.w	r3, r3, #3
 800423a:	2b01      	cmp	r3, #1
 800423c:	d005      	beq.n	800424a <HAL_GPIO_Init+0x56>
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f003 0303 	and.w	r3, r3, #3
 8004246:	2b02      	cmp	r3, #2
 8004248:	d130      	bne.n	80042ac <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	2203      	movs	r2, #3
 8004256:	fa02 f303 	lsl.w	r3, r2, r3
 800425a:	43db      	mvns	r3, r3
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	4013      	ands	r3, r2
 8004260:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	68da      	ldr	r2, [r3, #12]
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	fa02 f303 	lsl.w	r3, r2, r3
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	4313      	orrs	r3, r2
 8004272:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004280:	2201      	movs	r2, #1
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	fa02 f303 	lsl.w	r3, r2, r3
 8004288:	43db      	mvns	r3, r3
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	4013      	ands	r3, r2
 800428e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	091b      	lsrs	r3, r3, #4
 8004296:	f003 0201 	and.w	r2, r3, #1
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	fa02 f303 	lsl.w	r3, r2, r3
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f003 0303 	and.w	r3, r3, #3
 80042b4:	2b03      	cmp	r3, #3
 80042b6:	d017      	beq.n	80042e8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	005b      	lsls	r3, r3, #1
 80042c2:	2203      	movs	r2, #3
 80042c4:	fa02 f303 	lsl.w	r3, r2, r3
 80042c8:	43db      	mvns	r3, r3
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	4013      	ands	r3, r2
 80042ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	fa02 f303 	lsl.w	r3, r2, r3
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	4313      	orrs	r3, r2
 80042e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f003 0303 	and.w	r3, r3, #3
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d123      	bne.n	800433c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	08da      	lsrs	r2, r3, #3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	3208      	adds	r2, #8
 80042fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	f003 0307 	and.w	r3, r3, #7
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	220f      	movs	r2, #15
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	43db      	mvns	r3, r3
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	4013      	ands	r3, r2
 8004316:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	691a      	ldr	r2, [r3, #16]
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	f003 0307 	and.w	r3, r3, #7
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	fa02 f303 	lsl.w	r3, r2, r3
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	4313      	orrs	r3, r2
 800432c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	08da      	lsrs	r2, r3, #3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	3208      	adds	r2, #8
 8004336:	69b9      	ldr	r1, [r7, #24]
 8004338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	2203      	movs	r2, #3
 8004348:	fa02 f303 	lsl.w	r3, r2, r3
 800434c:	43db      	mvns	r3, r3
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	4013      	ands	r3, r2
 8004352:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f003 0203 	and.w	r2, r3, #3
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	fa02 f303 	lsl.w	r3, r2, r3
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	4313      	orrs	r3, r2
 8004368:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 80be 	beq.w	80044fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800437e:	4b66      	ldr	r3, [pc, #408]	@ (8004518 <HAL_GPIO_Init+0x324>)
 8004380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004382:	4a65      	ldr	r2, [pc, #404]	@ (8004518 <HAL_GPIO_Init+0x324>)
 8004384:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004388:	6453      	str	r3, [r2, #68]	@ 0x44
 800438a:	4b63      	ldr	r3, [pc, #396]	@ (8004518 <HAL_GPIO_Init+0x324>)
 800438c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800438e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004392:	60fb      	str	r3, [r7, #12]
 8004394:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004396:	4a61      	ldr	r2, [pc, #388]	@ (800451c <HAL_GPIO_Init+0x328>)
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	089b      	lsrs	r3, r3, #2
 800439c:	3302      	adds	r3, #2
 800439e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	f003 0303 	and.w	r3, r3, #3
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	220f      	movs	r2, #15
 80043ae:	fa02 f303 	lsl.w	r3, r2, r3
 80043b2:	43db      	mvns	r3, r3
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	4013      	ands	r3, r2
 80043b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a58      	ldr	r2, [pc, #352]	@ (8004520 <HAL_GPIO_Init+0x32c>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d037      	beq.n	8004432 <HAL_GPIO_Init+0x23e>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a57      	ldr	r2, [pc, #348]	@ (8004524 <HAL_GPIO_Init+0x330>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d031      	beq.n	800442e <HAL_GPIO_Init+0x23a>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a56      	ldr	r2, [pc, #344]	@ (8004528 <HAL_GPIO_Init+0x334>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d02b      	beq.n	800442a <HAL_GPIO_Init+0x236>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a55      	ldr	r2, [pc, #340]	@ (800452c <HAL_GPIO_Init+0x338>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d025      	beq.n	8004426 <HAL_GPIO_Init+0x232>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a54      	ldr	r2, [pc, #336]	@ (8004530 <HAL_GPIO_Init+0x33c>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d01f      	beq.n	8004422 <HAL_GPIO_Init+0x22e>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a53      	ldr	r2, [pc, #332]	@ (8004534 <HAL_GPIO_Init+0x340>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d019      	beq.n	800441e <HAL_GPIO_Init+0x22a>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a52      	ldr	r2, [pc, #328]	@ (8004538 <HAL_GPIO_Init+0x344>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d013      	beq.n	800441a <HAL_GPIO_Init+0x226>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a51      	ldr	r2, [pc, #324]	@ (800453c <HAL_GPIO_Init+0x348>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d00d      	beq.n	8004416 <HAL_GPIO_Init+0x222>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a50      	ldr	r2, [pc, #320]	@ (8004540 <HAL_GPIO_Init+0x34c>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d007      	beq.n	8004412 <HAL_GPIO_Init+0x21e>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a4f      	ldr	r2, [pc, #316]	@ (8004544 <HAL_GPIO_Init+0x350>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d101      	bne.n	800440e <HAL_GPIO_Init+0x21a>
 800440a:	2309      	movs	r3, #9
 800440c:	e012      	b.n	8004434 <HAL_GPIO_Init+0x240>
 800440e:	230a      	movs	r3, #10
 8004410:	e010      	b.n	8004434 <HAL_GPIO_Init+0x240>
 8004412:	2308      	movs	r3, #8
 8004414:	e00e      	b.n	8004434 <HAL_GPIO_Init+0x240>
 8004416:	2307      	movs	r3, #7
 8004418:	e00c      	b.n	8004434 <HAL_GPIO_Init+0x240>
 800441a:	2306      	movs	r3, #6
 800441c:	e00a      	b.n	8004434 <HAL_GPIO_Init+0x240>
 800441e:	2305      	movs	r3, #5
 8004420:	e008      	b.n	8004434 <HAL_GPIO_Init+0x240>
 8004422:	2304      	movs	r3, #4
 8004424:	e006      	b.n	8004434 <HAL_GPIO_Init+0x240>
 8004426:	2303      	movs	r3, #3
 8004428:	e004      	b.n	8004434 <HAL_GPIO_Init+0x240>
 800442a:	2302      	movs	r3, #2
 800442c:	e002      	b.n	8004434 <HAL_GPIO_Init+0x240>
 800442e:	2301      	movs	r3, #1
 8004430:	e000      	b.n	8004434 <HAL_GPIO_Init+0x240>
 8004432:	2300      	movs	r3, #0
 8004434:	69fa      	ldr	r2, [r7, #28]
 8004436:	f002 0203 	and.w	r2, r2, #3
 800443a:	0092      	lsls	r2, r2, #2
 800443c:	4093      	lsls	r3, r2
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	4313      	orrs	r3, r2
 8004442:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004444:	4935      	ldr	r1, [pc, #212]	@ (800451c <HAL_GPIO_Init+0x328>)
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	089b      	lsrs	r3, r3, #2
 800444a:	3302      	adds	r3, #2
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004452:	4b3d      	ldr	r3, [pc, #244]	@ (8004548 <HAL_GPIO_Init+0x354>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	43db      	mvns	r3, r3
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	4013      	ands	r3, r2
 8004460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	4313      	orrs	r3, r2
 8004474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004476:	4a34      	ldr	r2, [pc, #208]	@ (8004548 <HAL_GPIO_Init+0x354>)
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800447c:	4b32      	ldr	r3, [pc, #200]	@ (8004548 <HAL_GPIO_Init+0x354>)
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	43db      	mvns	r3, r3
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	4013      	ands	r3, r2
 800448a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d003      	beq.n	80044a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	4313      	orrs	r3, r2
 800449e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044a0:	4a29      	ldr	r2, [pc, #164]	@ (8004548 <HAL_GPIO_Init+0x354>)
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80044a6:	4b28      	ldr	r3, [pc, #160]	@ (8004548 <HAL_GPIO_Init+0x354>)
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	43db      	mvns	r3, r3
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	4013      	ands	r3, r2
 80044b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044ca:	4a1f      	ldr	r2, [pc, #124]	@ (8004548 <HAL_GPIO_Init+0x354>)
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004548 <HAL_GPIO_Init+0x354>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	43db      	mvns	r3, r3
 80044da:	69ba      	ldr	r2, [r7, #24]
 80044dc:	4013      	ands	r3, r2
 80044de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d003      	beq.n	80044f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044f4:	4a14      	ldr	r2, [pc, #80]	@ (8004548 <HAL_GPIO_Init+0x354>)
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	3301      	adds	r3, #1
 80044fe:	61fb      	str	r3, [r7, #28]
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	2b0f      	cmp	r3, #15
 8004504:	f67f ae86 	bls.w	8004214 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004508:	bf00      	nop
 800450a:	bf00      	nop
 800450c:	3724      	adds	r7, #36	@ 0x24
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	40023800 	.word	0x40023800
 800451c:	40013800 	.word	0x40013800
 8004520:	40020000 	.word	0x40020000
 8004524:	40020400 	.word	0x40020400
 8004528:	40020800 	.word	0x40020800
 800452c:	40020c00 	.word	0x40020c00
 8004530:	40021000 	.word	0x40021000
 8004534:	40021400 	.word	0x40021400
 8004538:	40021800 	.word	0x40021800
 800453c:	40021c00 	.word	0x40021c00
 8004540:	40022000 	.word	0x40022000
 8004544:	40022400 	.word	0x40022400
 8004548:	40013c00 	.word	0x40013c00

0800454c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	460b      	mov	r3, r1
 8004556:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	691a      	ldr	r2, [r3, #16]
 800455c:	887b      	ldrh	r3, [r7, #2]
 800455e:	4013      	ands	r3, r2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d002      	beq.n	800456a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004564:	2301      	movs	r3, #1
 8004566:	73fb      	strb	r3, [r7, #15]
 8004568:	e001      	b.n	800456e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800456a:	2300      	movs	r3, #0
 800456c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800456e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004570:	4618      	mov	r0, r3
 8004572:	3714      	adds	r7, #20
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	460b      	mov	r3, r1
 8004586:	807b      	strh	r3, [r7, #2]
 8004588:	4613      	mov	r3, r2
 800458a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800458c:	787b      	ldrb	r3, [r7, #1]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d003      	beq.n	800459a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004592:	887a      	ldrh	r2, [r7, #2]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004598:	e003      	b.n	80045a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800459a:	887b      	ldrh	r3, [r7, #2]
 800459c:	041a      	lsls	r2, r3, #16
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	619a      	str	r2, [r3, #24]
}
 80045a2:	bf00      	nop
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
	...

080045b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e07f      	b.n	80046c2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d106      	bne.n	80045dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7fd fab6 	bl	8001b48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2224      	movs	r2, #36	@ 0x24
 80045e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0201 	bic.w	r2, r2, #1
 80045f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004600:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004610:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d107      	bne.n	800462a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	689a      	ldr	r2, [r3, #8]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004626:	609a      	str	r2, [r3, #8]
 8004628:	e006      	b.n	8004638 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	689a      	ldr	r2, [r3, #8]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004636:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	2b02      	cmp	r3, #2
 800463e:	d104      	bne.n	800464a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004648:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6859      	ldr	r1, [r3, #4]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	4b1d      	ldr	r3, [pc, #116]	@ (80046cc <HAL_I2C_Init+0x11c>)
 8004656:	430b      	orrs	r3, r1
 8004658:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68da      	ldr	r2, [r3, #12]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004668:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	691a      	ldr	r2, [r3, #16]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	430a      	orrs	r2, r1
 8004682:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	69d9      	ldr	r1, [r3, #28]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a1a      	ldr	r2, [r3, #32]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	430a      	orrs	r2, r1
 8004692:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 0201 	orr.w	r2, r2, #1
 80046a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2220      	movs	r2, #32
 80046ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	02008000 	.word	0x02008000

080046d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b20      	cmp	r3, #32
 80046e4:	d138      	bne.n	8004758 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d101      	bne.n	80046f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80046f0:	2302      	movs	r3, #2
 80046f2:	e032      	b.n	800475a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2224      	movs	r2, #36	@ 0x24
 8004700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 0201 	bic.w	r2, r2, #1
 8004712:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004722:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6819      	ldr	r1, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f042 0201 	orr.w	r2, r2, #1
 8004742:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2220      	movs	r2, #32
 8004748:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004754:	2300      	movs	r3, #0
 8004756:	e000      	b.n	800475a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004758:	2302      	movs	r3, #2
  }
}
 800475a:	4618      	mov	r0, r3
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004766:	b480      	push	{r7}
 8004768:	b085      	sub	sp, #20
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
 800476e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b20      	cmp	r3, #32
 800477a:	d139      	bne.n	80047f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004782:	2b01      	cmp	r3, #1
 8004784:	d101      	bne.n	800478a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004786:	2302      	movs	r3, #2
 8004788:	e033      	b.n	80047f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2224      	movs	r2, #36	@ 0x24
 8004796:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f022 0201 	bic.w	r2, r2, #1
 80047a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80047b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	021b      	lsls	r3, r3, #8
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 0201 	orr.w	r2, r2, #1
 80047da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2220      	movs	r2, #32
 80047e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80047ec:	2300      	movs	r3, #0
 80047ee:	e000      	b.n	80047f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80047f0:	2302      	movs	r3, #2
  }
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
	...

08004800 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004806:	2300      	movs	r3, #0
 8004808:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800480a:	4b23      	ldr	r3, [pc, #140]	@ (8004898 <HAL_PWREx_EnableOverDrive+0x98>)
 800480c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800480e:	4a22      	ldr	r2, [pc, #136]	@ (8004898 <HAL_PWREx_EnableOverDrive+0x98>)
 8004810:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004814:	6413      	str	r3, [r2, #64]	@ 0x40
 8004816:	4b20      	ldr	r3, [pc, #128]	@ (8004898 <HAL_PWREx_EnableOverDrive+0x98>)
 8004818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800481a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800481e:	603b      	str	r3, [r7, #0]
 8004820:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004822:	4b1e      	ldr	r3, [pc, #120]	@ (800489c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a1d      	ldr	r2, [pc, #116]	@ (800489c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004828:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800482c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800482e:	f7fe f80b 	bl	8002848 <HAL_GetTick>
 8004832:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004834:	e009      	b.n	800484a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004836:	f7fe f807 	bl	8002848 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004844:	d901      	bls.n	800484a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e022      	b.n	8004890 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800484a:	4b14      	ldr	r3, [pc, #80]	@ (800489c <HAL_PWREx_EnableOverDrive+0x9c>)
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004852:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004856:	d1ee      	bne.n	8004836 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004858:	4b10      	ldr	r3, [pc, #64]	@ (800489c <HAL_PWREx_EnableOverDrive+0x9c>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a0f      	ldr	r2, [pc, #60]	@ (800489c <HAL_PWREx_EnableOverDrive+0x9c>)
 800485e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004862:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004864:	f7fd fff0 	bl	8002848 <HAL_GetTick>
 8004868:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800486a:	e009      	b.n	8004880 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800486c:	f7fd ffec 	bl	8002848 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800487a:	d901      	bls.n	8004880 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e007      	b.n	8004890 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004880:	4b06      	ldr	r3, [pc, #24]	@ (800489c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004888:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800488c:	d1ee      	bne.n	800486c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3708      	adds	r7, #8
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	40023800 	.word	0x40023800
 800489c:	40007000 	.word	0x40007000

080048a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80048a8:	2300      	movs	r3, #0
 80048aa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e29b      	b.n	8004dee <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f000 8087 	beq.w	80049d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80048c4:	4b96      	ldr	r3, [pc, #600]	@ (8004b20 <HAL_RCC_OscConfig+0x280>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f003 030c 	and.w	r3, r3, #12
 80048cc:	2b04      	cmp	r3, #4
 80048ce:	d00c      	beq.n	80048ea <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048d0:	4b93      	ldr	r3, [pc, #588]	@ (8004b20 <HAL_RCC_OscConfig+0x280>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f003 030c 	and.w	r3, r3, #12
 80048d8:	2b08      	cmp	r3, #8
 80048da:	d112      	bne.n	8004902 <HAL_RCC_OscConfig+0x62>
 80048dc:	4b90      	ldr	r3, [pc, #576]	@ (8004b20 <HAL_RCC_OscConfig+0x280>)
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048e8:	d10b      	bne.n	8004902 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048ea:	4b8d      	ldr	r3, [pc, #564]	@ (8004b20 <HAL_RCC_OscConfig+0x280>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d06c      	beq.n	80049d0 <HAL_RCC_OscConfig+0x130>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d168      	bne.n	80049d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e275      	b.n	8004dee <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800490a:	d106      	bne.n	800491a <HAL_RCC_OscConfig+0x7a>
 800490c:	4b84      	ldr	r3, [pc, #528]	@ (8004b20 <HAL_RCC_OscConfig+0x280>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a83      	ldr	r2, [pc, #524]	@ (8004b20 <HAL_RCC_OscConfig+0x280>)
 8004912:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004916:	6013      	str	r3, [r2, #0]
 8004918:	e02e      	b.n	8004978 <HAL_RCC_OscConfig+0xd8>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10c      	bne.n	800493c <HAL_RCC_OscConfig+0x9c>
 8004922:	4b7f      	ldr	r3, [pc, #508]	@ (8004b20 <HAL_RCC_OscConfig+0x280>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a7e      	ldr	r2, [pc, #504]	@ (8004b20 <HAL_RCC_OscConfig+0x280>)
 8004928:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800492c:	6013      	str	r3, [r2, #0]
 800492e:	4b7c      	ldr	r3, [pc, #496]	@ (8004b20 <HAL_RCC_OscConfig+0x280>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a7b      	ldr	r2, [pc, #492]	@ (8004b20 <HAL_RCC_OscConfig+0x280>)
 8004934:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004938:	6013      	str	r3, [r2, #0]
 800493a:	e01d      	b.n	8004978 <HAL_RCC_OscConfig+0xd8>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004944:	d10c      	bne.n	8004960 <HAL_RCC_OscConfig+0xc0>
 8004946:	4b76      	ldr	r3, [pc, #472]	@ (8004b20 <HAL_RCC_OscConfig+0x280>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a75      	ldr	r2, [pc, #468]	@ (8004b20 <HAL_RCC_OscConfig+0x280>)
 800494c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004950:	6013      	str	r3, [r2, #0]
 8004952:	4b73      	ldr	r3, [pc, #460]	@ (8004b20 <HAL_RCC_OscConfig+0x280>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a72      	ldr	r2, [pc, #456]	@ (8004b20 <HAL_RCC_OscConfig+0x280>)
 8004958:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	e00b      	b.n	8004978 <HAL_RCC_OscConfig+0xd8>
 8004960:	4b6f      	ldr	r3, [pc, #444]	@ (8004b20 <HAL_RCC_OscConfig+0x280>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a6e      	ldr	r2, [pc, #440]	@ (8004b20 <HAL_RCC_OscConfig+0x280>)
 8004966:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800496a:	6013      	str	r3, [r2, #0]
 800496c:	4b6c      	ldr	r3, [pc, #432]	@ (8004b20 <HAL_RCC_OscConfig+0x280>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a6b      	ldr	r2, [pc, #428]	@ (8004b20 <HAL_RCC_OscConfig+0x280>)
 8004972:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004976:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d013      	beq.n	80049a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004980:	f7fd ff62 	bl	8002848 <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004988:	f7fd ff5e 	bl	8002848 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b64      	cmp	r3, #100	@ 0x64
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e229      	b.n	8004dee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800499a:	4b61      	ldr	r3, [pc, #388]	@ (8004b20 <HAL_RCC_OscConfig+0x280>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0f0      	beq.n	8004988 <HAL_RCC_OscConfig+0xe8>
 80049a6:	e014      	b.n	80049d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a8:	f7fd ff4e 	bl	8002848 <HAL_GetTick>
 80049ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049b0:	f7fd ff4a 	bl	8002848 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b64      	cmp	r3, #100	@ 0x64
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e215      	b.n	8004dee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049c2:	4b57      	ldr	r3, [pc, #348]	@ (8004b20 <HAL_RCC_OscConfig+0x280>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1f0      	bne.n	80049b0 <HAL_RCC_OscConfig+0x110>
 80049ce:	e000      	b.n	80049d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d069      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049de:	4b50      	ldr	r3, [pc, #320]	@ (8004b20 <HAL_RCC_OscConfig+0x280>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 030c 	and.w	r3, r3, #12
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00b      	beq.n	8004a02 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ea:	4b4d      	ldr	r3, [pc, #308]	@ (8004b20 <HAL_RCC_OscConfig+0x280>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f003 030c 	and.w	r3, r3, #12
 80049f2:	2b08      	cmp	r3, #8
 80049f4:	d11c      	bne.n	8004a30 <HAL_RCC_OscConfig+0x190>
 80049f6:	4b4a      	ldr	r3, [pc, #296]	@ (8004b20 <HAL_RCC_OscConfig+0x280>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d116      	bne.n	8004a30 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a02:	4b47      	ldr	r3, [pc, #284]	@ (8004b20 <HAL_RCC_OscConfig+0x280>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d005      	beq.n	8004a1a <HAL_RCC_OscConfig+0x17a>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d001      	beq.n	8004a1a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e1e9      	b.n	8004dee <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a1a:	4b41      	ldr	r3, [pc, #260]	@ (8004b20 <HAL_RCC_OscConfig+0x280>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	00db      	lsls	r3, r3, #3
 8004a28:	493d      	ldr	r1, [pc, #244]	@ (8004b20 <HAL_RCC_OscConfig+0x280>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a2e:	e040      	b.n	8004ab2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d023      	beq.n	8004a80 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a38:	4b39      	ldr	r3, [pc, #228]	@ (8004b20 <HAL_RCC_OscConfig+0x280>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a38      	ldr	r2, [pc, #224]	@ (8004b20 <HAL_RCC_OscConfig+0x280>)
 8004a3e:	f043 0301 	orr.w	r3, r3, #1
 8004a42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a44:	f7fd ff00 	bl	8002848 <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a4c:	f7fd fefc 	bl	8002848 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e1c7      	b.n	8004dee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a5e:	4b30      	ldr	r3, [pc, #192]	@ (8004b20 <HAL_RCC_OscConfig+0x280>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d0f0      	beq.n	8004a4c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a6a:	4b2d      	ldr	r3, [pc, #180]	@ (8004b20 <HAL_RCC_OscConfig+0x280>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	00db      	lsls	r3, r3, #3
 8004a78:	4929      	ldr	r1, [pc, #164]	@ (8004b20 <HAL_RCC_OscConfig+0x280>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	600b      	str	r3, [r1, #0]
 8004a7e:	e018      	b.n	8004ab2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a80:	4b27      	ldr	r3, [pc, #156]	@ (8004b20 <HAL_RCC_OscConfig+0x280>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a26      	ldr	r2, [pc, #152]	@ (8004b20 <HAL_RCC_OscConfig+0x280>)
 8004a86:	f023 0301 	bic.w	r3, r3, #1
 8004a8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8c:	f7fd fedc 	bl	8002848 <HAL_GetTick>
 8004a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a94:	f7fd fed8 	bl	8002848 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e1a3      	b.n	8004dee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8004b20 <HAL_RCC_OscConfig+0x280>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1f0      	bne.n	8004a94 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0308 	and.w	r3, r3, #8
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d038      	beq.n	8004b30 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d019      	beq.n	8004afa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ac6:	4b16      	ldr	r3, [pc, #88]	@ (8004b20 <HAL_RCC_OscConfig+0x280>)
 8004ac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aca:	4a15      	ldr	r2, [pc, #84]	@ (8004b20 <HAL_RCC_OscConfig+0x280>)
 8004acc:	f043 0301 	orr.w	r3, r3, #1
 8004ad0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad2:	f7fd feb9 	bl	8002848 <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ad8:	e008      	b.n	8004aec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ada:	f7fd feb5 	bl	8002848 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e180      	b.n	8004dee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aec:	4b0c      	ldr	r3, [pc, #48]	@ (8004b20 <HAL_RCC_OscConfig+0x280>)
 8004aee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d0f0      	beq.n	8004ada <HAL_RCC_OscConfig+0x23a>
 8004af8:	e01a      	b.n	8004b30 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004afa:	4b09      	ldr	r3, [pc, #36]	@ (8004b20 <HAL_RCC_OscConfig+0x280>)
 8004afc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004afe:	4a08      	ldr	r2, [pc, #32]	@ (8004b20 <HAL_RCC_OscConfig+0x280>)
 8004b00:	f023 0301 	bic.w	r3, r3, #1
 8004b04:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b06:	f7fd fe9f 	bl	8002848 <HAL_GetTick>
 8004b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b0c:	e00a      	b.n	8004b24 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b0e:	f7fd fe9b 	bl	8002848 <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d903      	bls.n	8004b24 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e166      	b.n	8004dee <HAL_RCC_OscConfig+0x54e>
 8004b20:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b24:	4b92      	ldr	r3, [pc, #584]	@ (8004d70 <HAL_RCC_OscConfig+0x4d0>)
 8004b26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1ee      	bne.n	8004b0e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0304 	and.w	r3, r3, #4
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 80a4 	beq.w	8004c86 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b3e:	4b8c      	ldr	r3, [pc, #560]	@ (8004d70 <HAL_RCC_OscConfig+0x4d0>)
 8004b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10d      	bne.n	8004b66 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b4a:	4b89      	ldr	r3, [pc, #548]	@ (8004d70 <HAL_RCC_OscConfig+0x4d0>)
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4e:	4a88      	ldr	r2, [pc, #544]	@ (8004d70 <HAL_RCC_OscConfig+0x4d0>)
 8004b50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b54:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b56:	4b86      	ldr	r3, [pc, #536]	@ (8004d70 <HAL_RCC_OscConfig+0x4d0>)
 8004b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b5e:	60bb      	str	r3, [r7, #8]
 8004b60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b62:	2301      	movs	r3, #1
 8004b64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b66:	4b83      	ldr	r3, [pc, #524]	@ (8004d74 <HAL_RCC_OscConfig+0x4d4>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d118      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004b72:	4b80      	ldr	r3, [pc, #512]	@ (8004d74 <HAL_RCC_OscConfig+0x4d4>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a7f      	ldr	r2, [pc, #508]	@ (8004d74 <HAL_RCC_OscConfig+0x4d4>)
 8004b78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b7e:	f7fd fe63 	bl	8002848 <HAL_GetTick>
 8004b82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b84:	e008      	b.n	8004b98 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b86:	f7fd fe5f 	bl	8002848 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	2b64      	cmp	r3, #100	@ 0x64
 8004b92:	d901      	bls.n	8004b98 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e12a      	b.n	8004dee <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b98:	4b76      	ldr	r3, [pc, #472]	@ (8004d74 <HAL_RCC_OscConfig+0x4d4>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d0f0      	beq.n	8004b86 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d106      	bne.n	8004bba <HAL_RCC_OscConfig+0x31a>
 8004bac:	4b70      	ldr	r3, [pc, #448]	@ (8004d70 <HAL_RCC_OscConfig+0x4d0>)
 8004bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bb0:	4a6f      	ldr	r2, [pc, #444]	@ (8004d70 <HAL_RCC_OscConfig+0x4d0>)
 8004bb2:	f043 0301 	orr.w	r3, r3, #1
 8004bb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bb8:	e02d      	b.n	8004c16 <HAL_RCC_OscConfig+0x376>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10c      	bne.n	8004bdc <HAL_RCC_OscConfig+0x33c>
 8004bc2:	4b6b      	ldr	r3, [pc, #428]	@ (8004d70 <HAL_RCC_OscConfig+0x4d0>)
 8004bc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bc6:	4a6a      	ldr	r2, [pc, #424]	@ (8004d70 <HAL_RCC_OscConfig+0x4d0>)
 8004bc8:	f023 0301 	bic.w	r3, r3, #1
 8004bcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bce:	4b68      	ldr	r3, [pc, #416]	@ (8004d70 <HAL_RCC_OscConfig+0x4d0>)
 8004bd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bd2:	4a67      	ldr	r2, [pc, #412]	@ (8004d70 <HAL_RCC_OscConfig+0x4d0>)
 8004bd4:	f023 0304 	bic.w	r3, r3, #4
 8004bd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bda:	e01c      	b.n	8004c16 <HAL_RCC_OscConfig+0x376>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	2b05      	cmp	r3, #5
 8004be2:	d10c      	bne.n	8004bfe <HAL_RCC_OscConfig+0x35e>
 8004be4:	4b62      	ldr	r3, [pc, #392]	@ (8004d70 <HAL_RCC_OscConfig+0x4d0>)
 8004be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004be8:	4a61      	ldr	r2, [pc, #388]	@ (8004d70 <HAL_RCC_OscConfig+0x4d0>)
 8004bea:	f043 0304 	orr.w	r3, r3, #4
 8004bee:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bf0:	4b5f      	ldr	r3, [pc, #380]	@ (8004d70 <HAL_RCC_OscConfig+0x4d0>)
 8004bf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bf4:	4a5e      	ldr	r2, [pc, #376]	@ (8004d70 <HAL_RCC_OscConfig+0x4d0>)
 8004bf6:	f043 0301 	orr.w	r3, r3, #1
 8004bfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bfc:	e00b      	b.n	8004c16 <HAL_RCC_OscConfig+0x376>
 8004bfe:	4b5c      	ldr	r3, [pc, #368]	@ (8004d70 <HAL_RCC_OscConfig+0x4d0>)
 8004c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c02:	4a5b      	ldr	r2, [pc, #364]	@ (8004d70 <HAL_RCC_OscConfig+0x4d0>)
 8004c04:	f023 0301 	bic.w	r3, r3, #1
 8004c08:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c0a:	4b59      	ldr	r3, [pc, #356]	@ (8004d70 <HAL_RCC_OscConfig+0x4d0>)
 8004c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c0e:	4a58      	ldr	r2, [pc, #352]	@ (8004d70 <HAL_RCC_OscConfig+0x4d0>)
 8004c10:	f023 0304 	bic.w	r3, r3, #4
 8004c14:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d015      	beq.n	8004c4a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c1e:	f7fd fe13 	bl	8002848 <HAL_GetTick>
 8004c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c24:	e00a      	b.n	8004c3c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c26:	f7fd fe0f 	bl	8002848 <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d901      	bls.n	8004c3c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e0d8      	b.n	8004dee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c3c:	4b4c      	ldr	r3, [pc, #304]	@ (8004d70 <HAL_RCC_OscConfig+0x4d0>)
 8004c3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d0ee      	beq.n	8004c26 <HAL_RCC_OscConfig+0x386>
 8004c48:	e014      	b.n	8004c74 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c4a:	f7fd fdfd 	bl	8002848 <HAL_GetTick>
 8004c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c50:	e00a      	b.n	8004c68 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c52:	f7fd fdf9 	bl	8002848 <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d901      	bls.n	8004c68 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e0c2      	b.n	8004dee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c68:	4b41      	ldr	r3, [pc, #260]	@ (8004d70 <HAL_RCC_OscConfig+0x4d0>)
 8004c6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1ee      	bne.n	8004c52 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c74:	7dfb      	ldrb	r3, [r7, #23]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d105      	bne.n	8004c86 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c7a:	4b3d      	ldr	r3, [pc, #244]	@ (8004d70 <HAL_RCC_OscConfig+0x4d0>)
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c7e:	4a3c      	ldr	r2, [pc, #240]	@ (8004d70 <HAL_RCC_OscConfig+0x4d0>)
 8004c80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c84:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f000 80ae 	beq.w	8004dec <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c90:	4b37      	ldr	r3, [pc, #220]	@ (8004d70 <HAL_RCC_OscConfig+0x4d0>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f003 030c 	and.w	r3, r3, #12
 8004c98:	2b08      	cmp	r3, #8
 8004c9a:	d06d      	beq.n	8004d78 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d14b      	bne.n	8004d3c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ca4:	4b32      	ldr	r3, [pc, #200]	@ (8004d70 <HAL_RCC_OscConfig+0x4d0>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a31      	ldr	r2, [pc, #196]	@ (8004d70 <HAL_RCC_OscConfig+0x4d0>)
 8004caa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb0:	f7fd fdca 	bl	8002848 <HAL_GetTick>
 8004cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cb6:	e008      	b.n	8004cca <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cb8:	f7fd fdc6 	bl	8002848 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d901      	bls.n	8004cca <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e091      	b.n	8004dee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cca:	4b29      	ldr	r3, [pc, #164]	@ (8004d70 <HAL_RCC_OscConfig+0x4d0>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1f0      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	69da      	ldr	r2, [r3, #28]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce4:	019b      	lsls	r3, r3, #6
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cec:	085b      	lsrs	r3, r3, #1
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	041b      	lsls	r3, r3, #16
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf8:	061b      	lsls	r3, r3, #24
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d00:	071b      	lsls	r3, r3, #28
 8004d02:	491b      	ldr	r1, [pc, #108]	@ (8004d70 <HAL_RCC_OscConfig+0x4d0>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d08:	4b19      	ldr	r3, [pc, #100]	@ (8004d70 <HAL_RCC_OscConfig+0x4d0>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a18      	ldr	r2, [pc, #96]	@ (8004d70 <HAL_RCC_OscConfig+0x4d0>)
 8004d0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d14:	f7fd fd98 	bl	8002848 <HAL_GetTick>
 8004d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d1a:	e008      	b.n	8004d2e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d1c:	f7fd fd94 	bl	8002848 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d901      	bls.n	8004d2e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e05f      	b.n	8004dee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d2e:	4b10      	ldr	r3, [pc, #64]	@ (8004d70 <HAL_RCC_OscConfig+0x4d0>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d0f0      	beq.n	8004d1c <HAL_RCC_OscConfig+0x47c>
 8004d3a:	e057      	b.n	8004dec <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8004d70 <HAL_RCC_OscConfig+0x4d0>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a0b      	ldr	r2, [pc, #44]	@ (8004d70 <HAL_RCC_OscConfig+0x4d0>)
 8004d42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d48:	f7fd fd7e 	bl	8002848 <HAL_GetTick>
 8004d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d4e:	e008      	b.n	8004d62 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d50:	f7fd fd7a 	bl	8002848 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e045      	b.n	8004dee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d62:	4b03      	ldr	r3, [pc, #12]	@ (8004d70 <HAL_RCC_OscConfig+0x4d0>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1f0      	bne.n	8004d50 <HAL_RCC_OscConfig+0x4b0>
 8004d6e:	e03d      	b.n	8004dec <HAL_RCC_OscConfig+0x54c>
 8004d70:	40023800 	.word	0x40023800
 8004d74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004d78:	4b1f      	ldr	r3, [pc, #124]	@ (8004df8 <HAL_RCC_OscConfig+0x558>)
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d030      	beq.n	8004de8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d129      	bne.n	8004de8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d122      	bne.n	8004de8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004da8:	4013      	ands	r3, r2
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004dae:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d119      	bne.n	8004de8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dbe:	085b      	lsrs	r3, r3, #1
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d10f      	bne.n	8004de8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d107      	bne.n	8004de8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d001      	beq.n	8004dec <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e000      	b.n	8004dee <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3718      	adds	r7, #24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	40023800 	.word	0x40023800

08004dfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004e06:	2300      	movs	r3, #0
 8004e08:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e0d0      	b.n	8004fb6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e14:	4b6a      	ldr	r3, [pc, #424]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 030f 	and.w	r3, r3, #15
 8004e1c:	683a      	ldr	r2, [r7, #0]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d910      	bls.n	8004e44 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e22:	4b67      	ldr	r3, [pc, #412]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f023 020f 	bic.w	r2, r3, #15
 8004e2a:	4965      	ldr	r1, [pc, #404]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e32:	4b63      	ldr	r3, [pc, #396]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 030f 	and.w	r3, r3, #15
 8004e3a:	683a      	ldr	r2, [r7, #0]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d001      	beq.n	8004e44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e0b8      	b.n	8004fb6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d020      	beq.n	8004e92 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0304 	and.w	r3, r3, #4
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d005      	beq.n	8004e68 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e5c:	4b59      	ldr	r3, [pc, #356]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	4a58      	ldr	r2, [pc, #352]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e62:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004e66:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0308 	and.w	r3, r3, #8
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d005      	beq.n	8004e80 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e74:	4b53      	ldr	r3, [pc, #332]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	4a52      	ldr	r2, [pc, #328]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e7a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004e7e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e80:	4b50      	ldr	r3, [pc, #320]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	494d      	ldr	r1, [pc, #308]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d040      	beq.n	8004f20 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d107      	bne.n	8004eb6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ea6:	4b47      	ldr	r3, [pc, #284]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d115      	bne.n	8004ede <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e07f      	b.n	8004fb6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d107      	bne.n	8004ece <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ebe:	4b41      	ldr	r3, [pc, #260]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d109      	bne.n	8004ede <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e073      	b.n	8004fb6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ece:	4b3d      	ldr	r3, [pc, #244]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d101      	bne.n	8004ede <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e06b      	b.n	8004fb6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ede:	4b39      	ldr	r3, [pc, #228]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f023 0203 	bic.w	r2, r3, #3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	4936      	ldr	r1, [pc, #216]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ef0:	f7fd fcaa 	bl	8002848 <HAL_GetTick>
 8004ef4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ef6:	e00a      	b.n	8004f0e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ef8:	f7fd fca6 	bl	8002848 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e053      	b.n	8004fb6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f0e:	4b2d      	ldr	r3, [pc, #180]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f003 020c 	and.w	r2, r3, #12
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d1eb      	bne.n	8004ef8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f20:	4b27      	ldr	r3, [pc, #156]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 030f 	and.w	r3, r3, #15
 8004f28:	683a      	ldr	r2, [r7, #0]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d210      	bcs.n	8004f50 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f2e:	4b24      	ldr	r3, [pc, #144]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f023 020f 	bic.w	r2, r3, #15
 8004f36:	4922      	ldr	r1, [pc, #136]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f3e:	4b20      	ldr	r3, [pc, #128]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 030f 	and.w	r3, r3, #15
 8004f46:	683a      	ldr	r2, [r7, #0]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d001      	beq.n	8004f50 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e032      	b.n	8004fb6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0304 	and.w	r3, r3, #4
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d008      	beq.n	8004f6e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f5c:	4b19      	ldr	r3, [pc, #100]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	4916      	ldr	r1, [pc, #88]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0308 	and.w	r3, r3, #8
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d009      	beq.n	8004f8e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f7a:	4b12      	ldr	r3, [pc, #72]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	00db      	lsls	r3, r3, #3
 8004f88:	490e      	ldr	r1, [pc, #56]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f8e:	f000 f821 	bl	8004fd4 <HAL_RCC_GetSysClockFreq>
 8004f92:	4602      	mov	r2, r0
 8004f94:	4b0b      	ldr	r3, [pc, #44]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	091b      	lsrs	r3, r3, #4
 8004f9a:	f003 030f 	and.w	r3, r3, #15
 8004f9e:	490a      	ldr	r1, [pc, #40]	@ (8004fc8 <HAL_RCC_ClockConfig+0x1cc>)
 8004fa0:	5ccb      	ldrb	r3, [r1, r3]
 8004fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8004fa6:	4a09      	ldr	r2, [pc, #36]	@ (8004fcc <HAL_RCC_ClockConfig+0x1d0>)
 8004fa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004faa:	4b09      	ldr	r3, [pc, #36]	@ (8004fd0 <HAL_RCC_ClockConfig+0x1d4>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fd fc06 	bl	80027c0 <HAL_InitTick>

  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	40023c00 	.word	0x40023c00
 8004fc4:	40023800 	.word	0x40023800
 8004fc8:	0800fe60 	.word	0x0800fe60
 8004fcc:	20000030 	.word	0x20000030
 8004fd0:	20000034 	.word	0x20000034

08004fd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fd8:	b090      	sub	sp, #64	@ 0x40
 8004fda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fec:	4b59      	ldr	r3, [pc, #356]	@ (8005154 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f003 030c 	and.w	r3, r3, #12
 8004ff4:	2b08      	cmp	r3, #8
 8004ff6:	d00d      	beq.n	8005014 <HAL_RCC_GetSysClockFreq+0x40>
 8004ff8:	2b08      	cmp	r3, #8
 8004ffa:	f200 80a1 	bhi.w	8005140 <HAL_RCC_GetSysClockFreq+0x16c>
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d002      	beq.n	8005008 <HAL_RCC_GetSysClockFreq+0x34>
 8005002:	2b04      	cmp	r3, #4
 8005004:	d003      	beq.n	800500e <HAL_RCC_GetSysClockFreq+0x3a>
 8005006:	e09b      	b.n	8005140 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005008:	4b53      	ldr	r3, [pc, #332]	@ (8005158 <HAL_RCC_GetSysClockFreq+0x184>)
 800500a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800500c:	e09b      	b.n	8005146 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800500e:	4b53      	ldr	r3, [pc, #332]	@ (800515c <HAL_RCC_GetSysClockFreq+0x188>)
 8005010:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005012:	e098      	b.n	8005146 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005014:	4b4f      	ldr	r3, [pc, #316]	@ (8005154 <HAL_RCC_GetSysClockFreq+0x180>)
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800501c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800501e:	4b4d      	ldr	r3, [pc, #308]	@ (8005154 <HAL_RCC_GetSysClockFreq+0x180>)
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d028      	beq.n	800507c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800502a:	4b4a      	ldr	r3, [pc, #296]	@ (8005154 <HAL_RCC_GetSysClockFreq+0x180>)
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	099b      	lsrs	r3, r3, #6
 8005030:	2200      	movs	r2, #0
 8005032:	623b      	str	r3, [r7, #32]
 8005034:	627a      	str	r2, [r7, #36]	@ 0x24
 8005036:	6a3b      	ldr	r3, [r7, #32]
 8005038:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800503c:	2100      	movs	r1, #0
 800503e:	4b47      	ldr	r3, [pc, #284]	@ (800515c <HAL_RCC_GetSysClockFreq+0x188>)
 8005040:	fb03 f201 	mul.w	r2, r3, r1
 8005044:	2300      	movs	r3, #0
 8005046:	fb00 f303 	mul.w	r3, r0, r3
 800504a:	4413      	add	r3, r2
 800504c:	4a43      	ldr	r2, [pc, #268]	@ (800515c <HAL_RCC_GetSysClockFreq+0x188>)
 800504e:	fba0 1202 	umull	r1, r2, r0, r2
 8005052:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005054:	460a      	mov	r2, r1
 8005056:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005058:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800505a:	4413      	add	r3, r2
 800505c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800505e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005060:	2200      	movs	r2, #0
 8005062:	61bb      	str	r3, [r7, #24]
 8005064:	61fa      	str	r2, [r7, #28]
 8005066:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800506a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800506e:	f7fb fa9f 	bl	80005b0 <__aeabi_uldivmod>
 8005072:	4602      	mov	r2, r0
 8005074:	460b      	mov	r3, r1
 8005076:	4613      	mov	r3, r2
 8005078:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800507a:	e053      	b.n	8005124 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800507c:	4b35      	ldr	r3, [pc, #212]	@ (8005154 <HAL_RCC_GetSysClockFreq+0x180>)
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	099b      	lsrs	r3, r3, #6
 8005082:	2200      	movs	r2, #0
 8005084:	613b      	str	r3, [r7, #16]
 8005086:	617a      	str	r2, [r7, #20]
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800508e:	f04f 0b00 	mov.w	fp, #0
 8005092:	4652      	mov	r2, sl
 8005094:	465b      	mov	r3, fp
 8005096:	f04f 0000 	mov.w	r0, #0
 800509a:	f04f 0100 	mov.w	r1, #0
 800509e:	0159      	lsls	r1, r3, #5
 80050a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050a4:	0150      	lsls	r0, r2, #5
 80050a6:	4602      	mov	r2, r0
 80050a8:	460b      	mov	r3, r1
 80050aa:	ebb2 080a 	subs.w	r8, r2, sl
 80050ae:	eb63 090b 	sbc.w	r9, r3, fp
 80050b2:	f04f 0200 	mov.w	r2, #0
 80050b6:	f04f 0300 	mov.w	r3, #0
 80050ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80050be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80050c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80050c6:	ebb2 0408 	subs.w	r4, r2, r8
 80050ca:	eb63 0509 	sbc.w	r5, r3, r9
 80050ce:	f04f 0200 	mov.w	r2, #0
 80050d2:	f04f 0300 	mov.w	r3, #0
 80050d6:	00eb      	lsls	r3, r5, #3
 80050d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050dc:	00e2      	lsls	r2, r4, #3
 80050de:	4614      	mov	r4, r2
 80050e0:	461d      	mov	r5, r3
 80050e2:	eb14 030a 	adds.w	r3, r4, sl
 80050e6:	603b      	str	r3, [r7, #0]
 80050e8:	eb45 030b 	adc.w	r3, r5, fp
 80050ec:	607b      	str	r3, [r7, #4]
 80050ee:	f04f 0200 	mov.w	r2, #0
 80050f2:	f04f 0300 	mov.w	r3, #0
 80050f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80050fa:	4629      	mov	r1, r5
 80050fc:	028b      	lsls	r3, r1, #10
 80050fe:	4621      	mov	r1, r4
 8005100:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005104:	4621      	mov	r1, r4
 8005106:	028a      	lsls	r2, r1, #10
 8005108:	4610      	mov	r0, r2
 800510a:	4619      	mov	r1, r3
 800510c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800510e:	2200      	movs	r2, #0
 8005110:	60bb      	str	r3, [r7, #8]
 8005112:	60fa      	str	r2, [r7, #12]
 8005114:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005118:	f7fb fa4a 	bl	80005b0 <__aeabi_uldivmod>
 800511c:	4602      	mov	r2, r0
 800511e:	460b      	mov	r3, r1
 8005120:	4613      	mov	r3, r2
 8005122:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005124:	4b0b      	ldr	r3, [pc, #44]	@ (8005154 <HAL_RCC_GetSysClockFreq+0x180>)
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	0c1b      	lsrs	r3, r3, #16
 800512a:	f003 0303 	and.w	r3, r3, #3
 800512e:	3301      	adds	r3, #1
 8005130:	005b      	lsls	r3, r3, #1
 8005132:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005134:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005138:	fbb2 f3f3 	udiv	r3, r2, r3
 800513c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800513e:	e002      	b.n	8005146 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005140:	4b05      	ldr	r3, [pc, #20]	@ (8005158 <HAL_RCC_GetSysClockFreq+0x184>)
 8005142:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005144:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005148:	4618      	mov	r0, r3
 800514a:	3740      	adds	r7, #64	@ 0x40
 800514c:	46bd      	mov	sp, r7
 800514e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005152:	bf00      	nop
 8005154:	40023800 	.word	0x40023800
 8005158:	00f42400 	.word	0x00f42400
 800515c:	01312d00 	.word	0x01312d00

08005160 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b088      	sub	sp, #32
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005168:	2300      	movs	r3, #0
 800516a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800516c:	2300      	movs	r3, #0
 800516e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005170:	2300      	movs	r3, #0
 8005172:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005174:	2300      	movs	r3, #0
 8005176:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005178:	2300      	movs	r3, #0
 800517a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0301 	and.w	r3, r3, #1
 8005184:	2b00      	cmp	r3, #0
 8005186:	d012      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005188:	4b69      	ldr	r3, [pc, #420]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	4a68      	ldr	r2, [pc, #416]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800518e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005192:	6093      	str	r3, [r2, #8]
 8005194:	4b66      	ldr	r3, [pc, #408]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005196:	689a      	ldr	r2, [r3, #8]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800519c:	4964      	ldr	r1, [pc, #400]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d101      	bne.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80051aa:	2301      	movs	r3, #1
 80051ac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d017      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051ba:	4b5d      	ldr	r3, [pc, #372]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80051c0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051c8:	4959      	ldr	r1, [pc, #356]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051d8:	d101      	bne.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80051da:	2301      	movs	r3, #1
 80051dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80051e6:	2301      	movs	r3, #1
 80051e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d017      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80051f6:	4b4e      	ldr	r3, [pc, #312]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80051fc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005204:	494a      	ldr	r1, [pc, #296]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005206:	4313      	orrs	r3, r2
 8005208:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005210:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005214:	d101      	bne.n	800521a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005216:	2301      	movs	r3, #1
 8005218:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005222:	2301      	movs	r3, #1
 8005224:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d001      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005232:	2301      	movs	r3, #1
 8005234:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0320 	and.w	r3, r3, #32
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 808b 	beq.w	800535a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005244:	4b3a      	ldr	r3, [pc, #232]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005248:	4a39      	ldr	r2, [pc, #228]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800524a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800524e:	6413      	str	r3, [r2, #64]	@ 0x40
 8005250:	4b37      	ldr	r3, [pc, #220]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005254:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005258:	60bb      	str	r3, [r7, #8]
 800525a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800525c:	4b35      	ldr	r3, [pc, #212]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a34      	ldr	r2, [pc, #208]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005262:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005266:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005268:	f7fd faee 	bl	8002848 <HAL_GetTick>
 800526c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800526e:	e008      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005270:	f7fd faea 	bl	8002848 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	2b64      	cmp	r3, #100	@ 0x64
 800527c:	d901      	bls.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e38f      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005282:	4b2c      	ldr	r3, [pc, #176]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800528a:	2b00      	cmp	r3, #0
 800528c:	d0f0      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800528e:	4b28      	ldr	r3, [pc, #160]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005292:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005296:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d035      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d02e      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052ac:	4b20      	ldr	r3, [pc, #128]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052b4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052b6:	4b1e      	ldr	r3, [pc, #120]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ba:	4a1d      	ldr	r2, [pc, #116]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052c0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052c2:	4b1b      	ldr	r3, [pc, #108]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052c6:	4a1a      	ldr	r2, [pc, #104]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052cc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80052ce:	4a18      	ldr	r2, [pc, #96]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80052d4:	4b16      	ldr	r3, [pc, #88]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052d8:	f003 0301 	and.w	r3, r3, #1
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d114      	bne.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e0:	f7fd fab2 	bl	8002848 <HAL_GetTick>
 80052e4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052e6:	e00a      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052e8:	f7fd faae 	bl	8002848 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d901      	bls.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e351      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d0ee      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800530e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005312:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005316:	d111      	bne.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005318:	4b05      	ldr	r3, [pc, #20]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005324:	4b04      	ldr	r3, [pc, #16]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005326:	400b      	ands	r3, r1
 8005328:	4901      	ldr	r1, [pc, #4]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800532a:	4313      	orrs	r3, r2
 800532c:	608b      	str	r3, [r1, #8]
 800532e:	e00b      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005330:	40023800 	.word	0x40023800
 8005334:	40007000 	.word	0x40007000
 8005338:	0ffffcff 	.word	0x0ffffcff
 800533c:	4bac      	ldr	r3, [pc, #688]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	4aab      	ldr	r2, [pc, #684]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005342:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005346:	6093      	str	r3, [r2, #8]
 8005348:	4ba9      	ldr	r3, [pc, #676]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800534a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005354:	49a6      	ldr	r1, [pc, #664]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005356:	4313      	orrs	r3, r2
 8005358:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0310 	and.w	r3, r3, #16
 8005362:	2b00      	cmp	r3, #0
 8005364:	d010      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005366:	4ba2      	ldr	r3, [pc, #648]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005368:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800536c:	4aa0      	ldr	r2, [pc, #640]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800536e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005372:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005376:	4b9e      	ldr	r3, [pc, #632]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005378:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005380:	499b      	ldr	r1, [pc, #620]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005382:	4313      	orrs	r3, r2
 8005384:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00a      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005394:	4b96      	ldr	r3, [pc, #600]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005396:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800539a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053a2:	4993      	ldr	r1, [pc, #588]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00a      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80053b6:	4b8e      	ldr	r3, [pc, #568]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053bc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80053c4:	498a      	ldr	r1, [pc, #552]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00a      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80053d8:	4b85      	ldr	r3, [pc, #532]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053e6:	4982      	ldr	r1, [pc, #520]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00a      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80053fa:	4b7d      	ldr	r3, [pc, #500]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005400:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005408:	4979      	ldr	r1, [pc, #484]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800540a:	4313      	orrs	r3, r2
 800540c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00a      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800541c:	4b74      	ldr	r3, [pc, #464]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800541e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005422:	f023 0203 	bic.w	r2, r3, #3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800542a:	4971      	ldr	r1, [pc, #452]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800542c:	4313      	orrs	r3, r2
 800542e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00a      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800543e:	4b6c      	ldr	r3, [pc, #432]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005440:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005444:	f023 020c 	bic.w	r2, r3, #12
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800544c:	4968      	ldr	r1, [pc, #416]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800544e:	4313      	orrs	r3, r2
 8005450:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00a      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005460:	4b63      	ldr	r3, [pc, #396]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005462:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005466:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800546e:	4960      	ldr	r1, [pc, #384]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005470:	4313      	orrs	r3, r2
 8005472:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00a      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005482:	4b5b      	ldr	r3, [pc, #364]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005484:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005488:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005490:	4957      	ldr	r1, [pc, #348]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005492:	4313      	orrs	r3, r2
 8005494:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00a      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80054a4:	4b52      	ldr	r3, [pc, #328]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054aa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054b2:	494f      	ldr	r1, [pc, #316]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00a      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80054c6:	4b4a      	ldr	r3, [pc, #296]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054cc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054d4:	4946      	ldr	r1, [pc, #280]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00a      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80054e8:	4b41      	ldr	r3, [pc, #260]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ee:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054f6:	493e      	ldr	r1, [pc, #248]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00a      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800550a:	4b39      	ldr	r3, [pc, #228]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800550c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005510:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005518:	4935      	ldr	r1, [pc, #212]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800551a:	4313      	orrs	r3, r2
 800551c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00a      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800552c:	4b30      	ldr	r3, [pc, #192]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800552e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005532:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800553a:	492d      	ldr	r1, [pc, #180]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800553c:	4313      	orrs	r3, r2
 800553e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d011      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800554e:	4b28      	ldr	r3, [pc, #160]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005554:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800555c:	4924      	ldr	r1, [pc, #144]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800555e:	4313      	orrs	r3, r2
 8005560:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005568:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800556c:	d101      	bne.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800556e:	2301      	movs	r3, #1
 8005570:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0308 	and.w	r3, r3, #8
 800557a:	2b00      	cmp	r3, #0
 800557c:	d001      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800557e:	2301      	movs	r3, #1
 8005580:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00a      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800558e:	4b18      	ldr	r3, [pc, #96]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005590:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005594:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800559c:	4914      	ldr	r1, [pc, #80]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00b      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80055b0:	4b0f      	ldr	r3, [pc, #60]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055b6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055c0:	490b      	ldr	r1, [pc, #44]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00f      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80055d4:	4b06      	ldr	r3, [pc, #24]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055da:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055e4:	4902      	ldr	r1, [pc, #8]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80055ec:	e002      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80055ee:	bf00      	nop
 80055f0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00b      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005600:	4b8a      	ldr	r3, [pc, #552]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005602:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005606:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005610:	4986      	ldr	r1, [pc, #536]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005612:	4313      	orrs	r3, r2
 8005614:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00b      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005624:	4b81      	ldr	r3, [pc, #516]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005626:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800562a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005634:	497d      	ldr	r1, [pc, #500]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005636:	4313      	orrs	r3, r2
 8005638:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d006      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800564a:	2b00      	cmp	r3, #0
 800564c:	f000 80d6 	beq.w	80057fc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005650:	4b76      	ldr	r3, [pc, #472]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a75      	ldr	r2, [pc, #468]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005656:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800565a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800565c:	f7fd f8f4 	bl	8002848 <HAL_GetTick>
 8005660:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005662:	e008      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005664:	f7fd f8f0 	bl	8002848 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	2b64      	cmp	r3, #100	@ 0x64
 8005670:	d901      	bls.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e195      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005676:	4b6d      	ldr	r3, [pc, #436]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1f0      	bne.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0301 	and.w	r3, r3, #1
 800568a:	2b00      	cmp	r3, #0
 800568c:	d021      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005692:	2b00      	cmp	r3, #0
 8005694:	d11d      	bne.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005696:	4b65      	ldr	r3, [pc, #404]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005698:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800569c:	0c1b      	lsrs	r3, r3, #16
 800569e:	f003 0303 	and.w	r3, r3, #3
 80056a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80056a4:	4b61      	ldr	r3, [pc, #388]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056aa:	0e1b      	lsrs	r3, r3, #24
 80056ac:	f003 030f 	and.w	r3, r3, #15
 80056b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	019a      	lsls	r2, r3, #6
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	041b      	lsls	r3, r3, #16
 80056bc:	431a      	orrs	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	061b      	lsls	r3, r3, #24
 80056c2:	431a      	orrs	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	071b      	lsls	r3, r3, #28
 80056ca:	4958      	ldr	r1, [pc, #352]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d004      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056e6:	d00a      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d02e      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056fc:	d129      	bne.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80056fe:	4b4b      	ldr	r3, [pc, #300]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005700:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005704:	0c1b      	lsrs	r3, r3, #16
 8005706:	f003 0303 	and.w	r3, r3, #3
 800570a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800570c:	4b47      	ldr	r3, [pc, #284]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800570e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005712:	0f1b      	lsrs	r3, r3, #28
 8005714:	f003 0307 	and.w	r3, r3, #7
 8005718:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	019a      	lsls	r2, r3, #6
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	041b      	lsls	r3, r3, #16
 8005724:	431a      	orrs	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	061b      	lsls	r3, r3, #24
 800572c:	431a      	orrs	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	071b      	lsls	r3, r3, #28
 8005732:	493e      	ldr	r1, [pc, #248]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005734:	4313      	orrs	r3, r2
 8005736:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800573a:	4b3c      	ldr	r3, [pc, #240]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800573c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005740:	f023 021f 	bic.w	r2, r3, #31
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005748:	3b01      	subs	r3, #1
 800574a:	4938      	ldr	r1, [pc, #224]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800574c:	4313      	orrs	r3, r2
 800574e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d01d      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800575e:	4b33      	ldr	r3, [pc, #204]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005760:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005764:	0e1b      	lsrs	r3, r3, #24
 8005766:	f003 030f 	and.w	r3, r3, #15
 800576a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800576c:	4b2f      	ldr	r3, [pc, #188]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800576e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005772:	0f1b      	lsrs	r3, r3, #28
 8005774:	f003 0307 	and.w	r3, r3, #7
 8005778:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	019a      	lsls	r2, r3, #6
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	041b      	lsls	r3, r3, #16
 8005786:	431a      	orrs	r2, r3
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	061b      	lsls	r3, r3, #24
 800578c:	431a      	orrs	r2, r3
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	071b      	lsls	r3, r3, #28
 8005792:	4926      	ldr	r1, [pc, #152]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005794:	4313      	orrs	r3, r2
 8005796:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d011      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	019a      	lsls	r2, r3, #6
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	041b      	lsls	r3, r3, #16
 80057b2:	431a      	orrs	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	061b      	lsls	r3, r3, #24
 80057ba:	431a      	orrs	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	071b      	lsls	r3, r3, #28
 80057c2:	491a      	ldr	r1, [pc, #104]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057c4:	4313      	orrs	r3, r2
 80057c6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80057ca:	4b18      	ldr	r3, [pc, #96]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a17      	ldr	r2, [pc, #92]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057d0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80057d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057d6:	f7fd f837 	bl	8002848 <HAL_GetTick>
 80057da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057dc:	e008      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80057de:	f7fd f833 	bl	8002848 <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	2b64      	cmp	r3, #100	@ 0x64
 80057ea:	d901      	bls.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e0d8      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057f0:	4b0e      	ldr	r3, [pc, #56]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d0f0      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	f040 80ce 	bne.w	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005804:	4b09      	ldr	r3, [pc, #36]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a08      	ldr	r2, [pc, #32]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800580a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800580e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005810:	f7fd f81a 	bl	8002848 <HAL_GetTick>
 8005814:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005816:	e00b      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005818:	f7fd f816 	bl	8002848 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	2b64      	cmp	r3, #100	@ 0x64
 8005824:	d904      	bls.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e0bb      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800582a:	bf00      	nop
 800582c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005830:	4b5e      	ldr	r3, [pc, #376]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005838:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800583c:	d0ec      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d003      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800584e:	2b00      	cmp	r3, #0
 8005850:	d009      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800585a:	2b00      	cmp	r3, #0
 800585c:	d02e      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005862:	2b00      	cmp	r3, #0
 8005864:	d12a      	bne.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005866:	4b51      	ldr	r3, [pc, #324]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005868:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800586c:	0c1b      	lsrs	r3, r3, #16
 800586e:	f003 0303 	and.w	r3, r3, #3
 8005872:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005874:	4b4d      	ldr	r3, [pc, #308]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800587a:	0f1b      	lsrs	r3, r3, #28
 800587c:	f003 0307 	and.w	r3, r3, #7
 8005880:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	019a      	lsls	r2, r3, #6
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	041b      	lsls	r3, r3, #16
 800588c:	431a      	orrs	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	061b      	lsls	r3, r3, #24
 8005894:	431a      	orrs	r2, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	071b      	lsls	r3, r3, #28
 800589a:	4944      	ldr	r1, [pc, #272]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800589c:	4313      	orrs	r3, r2
 800589e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80058a2:	4b42      	ldr	r3, [pc, #264]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058a8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058b0:	3b01      	subs	r3, #1
 80058b2:	021b      	lsls	r3, r3, #8
 80058b4:	493d      	ldr	r1, [pc, #244]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d022      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058d0:	d11d      	bne.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80058d2:	4b36      	ldr	r3, [pc, #216]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058d8:	0e1b      	lsrs	r3, r3, #24
 80058da:	f003 030f 	and.w	r3, r3, #15
 80058de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80058e0:	4b32      	ldr	r3, [pc, #200]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058e6:	0f1b      	lsrs	r3, r3, #28
 80058e8:	f003 0307 	and.w	r3, r3, #7
 80058ec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	019a      	lsls	r2, r3, #6
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a1b      	ldr	r3, [r3, #32]
 80058f8:	041b      	lsls	r3, r3, #16
 80058fa:	431a      	orrs	r2, r3
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	061b      	lsls	r3, r3, #24
 8005900:	431a      	orrs	r2, r3
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	071b      	lsls	r3, r3, #28
 8005906:	4929      	ldr	r1, [pc, #164]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005908:	4313      	orrs	r3, r2
 800590a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0308 	and.w	r3, r3, #8
 8005916:	2b00      	cmp	r3, #0
 8005918:	d028      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800591a:	4b24      	ldr	r3, [pc, #144]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800591c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005920:	0e1b      	lsrs	r3, r3, #24
 8005922:	f003 030f 	and.w	r3, r3, #15
 8005926:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005928:	4b20      	ldr	r3, [pc, #128]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800592a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800592e:	0c1b      	lsrs	r3, r3, #16
 8005930:	f003 0303 	and.w	r3, r3, #3
 8005934:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	019a      	lsls	r2, r3, #6
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	041b      	lsls	r3, r3, #16
 8005940:	431a      	orrs	r2, r3
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	061b      	lsls	r3, r3, #24
 8005946:	431a      	orrs	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	69db      	ldr	r3, [r3, #28]
 800594c:	071b      	lsls	r3, r3, #28
 800594e:	4917      	ldr	r1, [pc, #92]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005950:	4313      	orrs	r3, r2
 8005952:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005956:	4b15      	ldr	r3, [pc, #84]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005958:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800595c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005964:	4911      	ldr	r1, [pc, #68]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005966:	4313      	orrs	r3, r2
 8005968:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800596c:	4b0f      	ldr	r3, [pc, #60]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a0e      	ldr	r2, [pc, #56]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005972:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005976:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005978:	f7fc ff66 	bl	8002848 <HAL_GetTick>
 800597c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800597e:	e008      	b.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005980:	f7fc ff62 	bl	8002848 <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	2b64      	cmp	r3, #100	@ 0x64
 800598c:	d901      	bls.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e007      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005992:	4b06      	ldr	r3, [pc, #24]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800599a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800599e:	d1ef      	bne.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3720      	adds	r7, #32
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	40023800 	.word	0x40023800

080059b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d101      	bne.n	80059c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e049      	b.n	8005a56 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d106      	bne.n	80059dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f7fc fd2e 	bl	8002438 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2202      	movs	r2, #2
 80059e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	3304      	adds	r3, #4
 80059ec:	4619      	mov	r1, r3
 80059ee:	4610      	mov	r0, r2
 80059f0:	f000 fe0c 	bl	800660c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
	...

08005a60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d001      	beq.n	8005a78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e054      	b.n	8005b22 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68da      	ldr	r2, [r3, #12]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f042 0201 	orr.w	r2, r2, #1
 8005a8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a26      	ldr	r2, [pc, #152]	@ (8005b30 <HAL_TIM_Base_Start_IT+0xd0>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d022      	beq.n	8005ae0 <HAL_TIM_Base_Start_IT+0x80>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aa2:	d01d      	beq.n	8005ae0 <HAL_TIM_Base_Start_IT+0x80>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a22      	ldr	r2, [pc, #136]	@ (8005b34 <HAL_TIM_Base_Start_IT+0xd4>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d018      	beq.n	8005ae0 <HAL_TIM_Base_Start_IT+0x80>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a21      	ldr	r2, [pc, #132]	@ (8005b38 <HAL_TIM_Base_Start_IT+0xd8>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d013      	beq.n	8005ae0 <HAL_TIM_Base_Start_IT+0x80>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a1f      	ldr	r2, [pc, #124]	@ (8005b3c <HAL_TIM_Base_Start_IT+0xdc>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d00e      	beq.n	8005ae0 <HAL_TIM_Base_Start_IT+0x80>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a1e      	ldr	r2, [pc, #120]	@ (8005b40 <HAL_TIM_Base_Start_IT+0xe0>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d009      	beq.n	8005ae0 <HAL_TIM_Base_Start_IT+0x80>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a1c      	ldr	r2, [pc, #112]	@ (8005b44 <HAL_TIM_Base_Start_IT+0xe4>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d004      	beq.n	8005ae0 <HAL_TIM_Base_Start_IT+0x80>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a1b      	ldr	r2, [pc, #108]	@ (8005b48 <HAL_TIM_Base_Start_IT+0xe8>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d115      	bne.n	8005b0c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	689a      	ldr	r2, [r3, #8]
 8005ae6:	4b19      	ldr	r3, [pc, #100]	@ (8005b4c <HAL_TIM_Base_Start_IT+0xec>)
 8005ae8:	4013      	ands	r3, r2
 8005aea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2b06      	cmp	r3, #6
 8005af0:	d015      	beq.n	8005b1e <HAL_TIM_Base_Start_IT+0xbe>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005af8:	d011      	beq.n	8005b1e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f042 0201 	orr.w	r2, r2, #1
 8005b08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b0a:	e008      	b.n	8005b1e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0201 	orr.w	r2, r2, #1
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	e000      	b.n	8005b20 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3714      	adds	r7, #20
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	40010000 	.word	0x40010000
 8005b34:	40000400 	.word	0x40000400
 8005b38:	40000800 	.word	0x40000800
 8005b3c:	40000c00 	.word	0x40000c00
 8005b40:	40010400 	.word	0x40010400
 8005b44:	40014000 	.word	0x40014000
 8005b48:	40001800 	.word	0x40001800
 8005b4c:	00010007 	.word	0x00010007

08005b50 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d101      	bne.n	8005b62 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e049      	b.n	8005bf6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d106      	bne.n	8005b7c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f841 	bl	8005bfe <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2202      	movs	r2, #2
 8005b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	3304      	adds	r3, #4
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	4610      	mov	r0, r2
 8005b90:	f000 fd3c 	bl	800660c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3708      	adds	r7, #8
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b083      	sub	sp, #12
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005c06:	bf00      	nop
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b082      	sub	sp, #8
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d101      	bne.n	8005c24 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e049      	b.n	8005cb8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d106      	bne.n	8005c3e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 f841 	bl	8005cc0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2202      	movs	r2, #2
 8005c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	3304      	adds	r3, #4
 8005c4e:	4619      	mov	r1, r3
 8005c50:	4610      	mov	r0, r2
 8005c52:	f000 fcdb 	bl	800660c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2201      	movs	r2, #1
 8005c62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2201      	movs	r2, #1
 8005c92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3708      	adds	r7, #8
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005cc8:	bf00      	nop
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d101      	bne.n	8005ce6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e049      	b.n	8005d7a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d106      	bne.n	8005d00 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f7fc fbf2 	bl	80024e4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2202      	movs	r2, #2
 8005d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	3304      	adds	r3, #4
 8005d10:	4619      	mov	r1, r3
 8005d12:	4610      	mov	r0, r2
 8005d14:	f000 fc7a 	bl	800660c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3708      	adds	r7, #8
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b082      	sub	sp, #8
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	f003 0302 	and.w	r3, r3, #2
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d122      	bne.n	8005dde <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	f003 0302 	and.w	r3, r3, #2
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d11b      	bne.n	8005dde <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f06f 0202 	mvn.w	r2, #2
 8005dae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	699b      	ldr	r3, [r3, #24]
 8005dbc:	f003 0303 	and.w	r3, r3, #3
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d003      	beq.n	8005dcc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 fc03 	bl	80065d0 <HAL_TIM_IC_CaptureCallback>
 8005dca:	e005      	b.n	8005dd8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 fbf5 	bl	80065bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 fc06 	bl	80065e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	f003 0304 	and.w	r3, r3, #4
 8005de8:	2b04      	cmp	r3, #4
 8005dea:	d122      	bne.n	8005e32 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	f003 0304 	and.w	r3, r3, #4
 8005df6:	2b04      	cmp	r3, #4
 8005df8:	d11b      	bne.n	8005e32 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f06f 0204 	mvn.w	r2, #4
 8005e02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2202      	movs	r2, #2
 8005e08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d003      	beq.n	8005e20 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 fbd9 	bl	80065d0 <HAL_TIM_IC_CaptureCallback>
 8005e1e:	e005      	b.n	8005e2c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 fbcb 	bl	80065bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 fbdc 	bl	80065e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	f003 0308 	and.w	r3, r3, #8
 8005e3c:	2b08      	cmp	r3, #8
 8005e3e:	d122      	bne.n	8005e86 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	f003 0308 	and.w	r3, r3, #8
 8005e4a:	2b08      	cmp	r3, #8
 8005e4c:	d11b      	bne.n	8005e86 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f06f 0208 	mvn.w	r2, #8
 8005e56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2204      	movs	r2, #4
 8005e5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	69db      	ldr	r3, [r3, #28]
 8005e64:	f003 0303 	and.w	r3, r3, #3
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d003      	beq.n	8005e74 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 fbaf 	bl	80065d0 <HAL_TIM_IC_CaptureCallback>
 8005e72:	e005      	b.n	8005e80 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 fba1 	bl	80065bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 fbb2 	bl	80065e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	f003 0310 	and.w	r3, r3, #16
 8005e90:	2b10      	cmp	r3, #16
 8005e92:	d122      	bne.n	8005eda <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	f003 0310 	and.w	r3, r3, #16
 8005e9e:	2b10      	cmp	r3, #16
 8005ea0:	d11b      	bne.n	8005eda <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f06f 0210 	mvn.w	r2, #16
 8005eaa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2208      	movs	r2, #8
 8005eb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	69db      	ldr	r3, [r3, #28]
 8005eb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d003      	beq.n	8005ec8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 fb85 	bl	80065d0 <HAL_TIM_IC_CaptureCallback>
 8005ec6:	e005      	b.n	8005ed4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 fb77 	bl	80065bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 fb88 	bl	80065e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	f003 0301 	and.w	r3, r3, #1
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d10e      	bne.n	8005f06 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	f003 0301 	and.w	r3, r3, #1
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d107      	bne.n	8005f06 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f06f 0201 	mvn.w	r2, #1
 8005efe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 fb51 	bl	80065a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f10:	2b80      	cmp	r3, #128	@ 0x80
 8005f12:	d10e      	bne.n	8005f32 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f1e:	2b80      	cmp	r3, #128	@ 0x80
 8005f20:	d107      	bne.n	8005f32 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f001 f945 	bl	80071bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f40:	d10e      	bne.n	8005f60 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f4c:	2b80      	cmp	r3, #128	@ 0x80
 8005f4e:	d107      	bne.n	8005f60 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f001 f938 	bl	80071d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f6a:	2b40      	cmp	r3, #64	@ 0x40
 8005f6c:	d10e      	bne.n	8005f8c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f78:	2b40      	cmp	r3, #64	@ 0x40
 8005f7a:	d107      	bne.n	8005f8c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 fb36 	bl	80065f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	f003 0320 	and.w	r3, r3, #32
 8005f96:	2b20      	cmp	r3, #32
 8005f98:	d10e      	bne.n	8005fb8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	f003 0320 	and.w	r3, r3, #32
 8005fa4:	2b20      	cmp	r3, #32
 8005fa6:	d107      	bne.n	8005fb8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f06f 0220 	mvn.w	r2, #32
 8005fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f001 f8f8 	bl	80071a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005fb8:	bf00      	nop
 8005fba:	3708      	adds	r7, #8
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b086      	sub	sp, #24
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d101      	bne.n	8005fde <HAL_TIM_OC_ConfigChannel+0x1e>
 8005fda:	2302      	movs	r3, #2
 8005fdc:	e066      	b.n	80060ac <HAL_TIM_OC_ConfigChannel+0xec>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2b14      	cmp	r3, #20
 8005fea:	d857      	bhi.n	800609c <HAL_TIM_OC_ConfigChannel+0xdc>
 8005fec:	a201      	add	r2, pc, #4	@ (adr r2, 8005ff4 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff2:	bf00      	nop
 8005ff4:	08006049 	.word	0x08006049
 8005ff8:	0800609d 	.word	0x0800609d
 8005ffc:	0800609d 	.word	0x0800609d
 8006000:	0800609d 	.word	0x0800609d
 8006004:	08006057 	.word	0x08006057
 8006008:	0800609d 	.word	0x0800609d
 800600c:	0800609d 	.word	0x0800609d
 8006010:	0800609d 	.word	0x0800609d
 8006014:	08006065 	.word	0x08006065
 8006018:	0800609d 	.word	0x0800609d
 800601c:	0800609d 	.word	0x0800609d
 8006020:	0800609d 	.word	0x0800609d
 8006024:	08006073 	.word	0x08006073
 8006028:	0800609d 	.word	0x0800609d
 800602c:	0800609d 	.word	0x0800609d
 8006030:	0800609d 	.word	0x0800609d
 8006034:	08006081 	.word	0x08006081
 8006038:	0800609d 	.word	0x0800609d
 800603c:	0800609d 	.word	0x0800609d
 8006040:	0800609d 	.word	0x0800609d
 8006044:	0800608f 	.word	0x0800608f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68b9      	ldr	r1, [r7, #8]
 800604e:	4618      	mov	r0, r3
 8006050:	f000 fb7c 	bl	800674c <TIM_OC1_SetConfig>
      break;
 8006054:	e025      	b.n	80060a2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68b9      	ldr	r1, [r7, #8]
 800605c:	4618      	mov	r0, r3
 800605e:	f000 fbe7 	bl	8006830 <TIM_OC2_SetConfig>
      break;
 8006062:	e01e      	b.n	80060a2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68b9      	ldr	r1, [r7, #8]
 800606a:	4618      	mov	r0, r3
 800606c:	f000 fc58 	bl	8006920 <TIM_OC3_SetConfig>
      break;
 8006070:	e017      	b.n	80060a2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68b9      	ldr	r1, [r7, #8]
 8006078:	4618      	mov	r0, r3
 800607a:	f000 fcc7 	bl	8006a0c <TIM_OC4_SetConfig>
      break;
 800607e:	e010      	b.n	80060a2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68b9      	ldr	r1, [r7, #8]
 8006086:	4618      	mov	r0, r3
 8006088:	f000 fd18 	bl	8006abc <TIM_OC5_SetConfig>
      break;
 800608c:	e009      	b.n	80060a2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68b9      	ldr	r1, [r7, #8]
 8006094:	4618      	mov	r0, r3
 8006096:	f000 fd63 	bl	8006b60 <TIM_OC6_SetConfig>
      break;
 800609a:	e002      	b.n	80060a2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	75fb      	strb	r3, [r7, #23]
      break;
 80060a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80060aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3718      	adds	r7, #24
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060c0:	2300      	movs	r3, #0
 80060c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d101      	bne.n	80060d2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80060ce:	2302      	movs	r3, #2
 80060d0:	e088      	b.n	80061e4 <HAL_TIM_IC_ConfigChannel+0x130>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d11b      	bne.n	8006118 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80060f0:	f000 fd8a 	bl	8006c08 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	699a      	ldr	r2, [r3, #24]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f022 020c 	bic.w	r2, r2, #12
 8006102:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6999      	ldr	r1, [r3, #24]
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	689a      	ldr	r2, [r3, #8]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	430a      	orrs	r2, r1
 8006114:	619a      	str	r2, [r3, #24]
 8006116:	e060      	b.n	80061da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2b04      	cmp	r3, #4
 800611c:	d11c      	bne.n	8006158 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800612e:	f000 fe0e 	bl	8006d4e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	699a      	ldr	r2, [r3, #24]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006140:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	6999      	ldr	r1, [r3, #24]
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	021a      	lsls	r2, r3, #8
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	430a      	orrs	r2, r1
 8006154:	619a      	str	r2, [r3, #24]
 8006156:	e040      	b.n	80061da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2b08      	cmp	r3, #8
 800615c:	d11b      	bne.n	8006196 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800616e:	f000 fe5b 	bl	8006e28 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	69da      	ldr	r2, [r3, #28]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f022 020c 	bic.w	r2, r2, #12
 8006180:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	69d9      	ldr	r1, [r3, #28]
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	689a      	ldr	r2, [r3, #8]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	430a      	orrs	r2, r1
 8006192:	61da      	str	r2, [r3, #28]
 8006194:	e021      	b.n	80061da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2b0c      	cmp	r3, #12
 800619a:	d11c      	bne.n	80061d6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80061ac:	f000 fe78 	bl	8006ea0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	69da      	ldr	r2, [r3, #28]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80061be:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	69d9      	ldr	r1, [r3, #28]
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	021a      	lsls	r2, r3, #8
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	430a      	orrs	r2, r1
 80061d2:	61da      	str	r2, [r3, #28]
 80061d4:	e001      	b.n	80061da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80061e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3718      	adds	r7, #24
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b086      	sub	sp, #24
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061f8:	2300      	movs	r3, #0
 80061fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006202:	2b01      	cmp	r3, #1
 8006204:	d101      	bne.n	800620a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006206:	2302      	movs	r3, #2
 8006208:	e0ff      	b.n	800640a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2b14      	cmp	r3, #20
 8006216:	f200 80f0 	bhi.w	80063fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800621a:	a201      	add	r2, pc, #4	@ (adr r2, 8006220 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800621c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006220:	08006275 	.word	0x08006275
 8006224:	080063fb 	.word	0x080063fb
 8006228:	080063fb 	.word	0x080063fb
 800622c:	080063fb 	.word	0x080063fb
 8006230:	080062b5 	.word	0x080062b5
 8006234:	080063fb 	.word	0x080063fb
 8006238:	080063fb 	.word	0x080063fb
 800623c:	080063fb 	.word	0x080063fb
 8006240:	080062f7 	.word	0x080062f7
 8006244:	080063fb 	.word	0x080063fb
 8006248:	080063fb 	.word	0x080063fb
 800624c:	080063fb 	.word	0x080063fb
 8006250:	08006337 	.word	0x08006337
 8006254:	080063fb 	.word	0x080063fb
 8006258:	080063fb 	.word	0x080063fb
 800625c:	080063fb 	.word	0x080063fb
 8006260:	08006379 	.word	0x08006379
 8006264:	080063fb 	.word	0x080063fb
 8006268:	080063fb 	.word	0x080063fb
 800626c:	080063fb 	.word	0x080063fb
 8006270:	080063b9 	.word	0x080063b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68b9      	ldr	r1, [r7, #8]
 800627a:	4618      	mov	r0, r3
 800627c:	f000 fa66 	bl	800674c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	699a      	ldr	r2, [r3, #24]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f042 0208 	orr.w	r2, r2, #8
 800628e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	699a      	ldr	r2, [r3, #24]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 0204 	bic.w	r2, r2, #4
 800629e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6999      	ldr	r1, [r3, #24]
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	691a      	ldr	r2, [r3, #16]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	430a      	orrs	r2, r1
 80062b0:	619a      	str	r2, [r3, #24]
      break;
 80062b2:	e0a5      	b.n	8006400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68b9      	ldr	r1, [r7, #8]
 80062ba:	4618      	mov	r0, r3
 80062bc:	f000 fab8 	bl	8006830 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	699a      	ldr	r2, [r3, #24]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	699a      	ldr	r2, [r3, #24]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6999      	ldr	r1, [r3, #24]
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	021a      	lsls	r2, r3, #8
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	430a      	orrs	r2, r1
 80062f2:	619a      	str	r2, [r3, #24]
      break;
 80062f4:	e084      	b.n	8006400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	68b9      	ldr	r1, [r7, #8]
 80062fc:	4618      	mov	r0, r3
 80062fe:	f000 fb0f 	bl	8006920 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	69da      	ldr	r2, [r3, #28]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f042 0208 	orr.w	r2, r2, #8
 8006310:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	69da      	ldr	r2, [r3, #28]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f022 0204 	bic.w	r2, r2, #4
 8006320:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	69d9      	ldr	r1, [r3, #28]
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	691a      	ldr	r2, [r3, #16]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	430a      	orrs	r2, r1
 8006332:	61da      	str	r2, [r3, #28]
      break;
 8006334:	e064      	b.n	8006400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68b9      	ldr	r1, [r7, #8]
 800633c:	4618      	mov	r0, r3
 800633e:	f000 fb65 	bl	8006a0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	69da      	ldr	r2, [r3, #28]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006350:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	69da      	ldr	r2, [r3, #28]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006360:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	69d9      	ldr	r1, [r3, #28]
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	021a      	lsls	r2, r3, #8
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	430a      	orrs	r2, r1
 8006374:	61da      	str	r2, [r3, #28]
      break;
 8006376:	e043      	b.n	8006400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68b9      	ldr	r1, [r7, #8]
 800637e:	4618      	mov	r0, r3
 8006380:	f000 fb9c 	bl	8006abc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f042 0208 	orr.w	r2, r2, #8
 8006392:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f022 0204 	bic.w	r2, r2, #4
 80063a2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	691a      	ldr	r2, [r3, #16]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	430a      	orrs	r2, r1
 80063b4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80063b6:	e023      	b.n	8006400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68b9      	ldr	r1, [r7, #8]
 80063be:	4618      	mov	r0, r3
 80063c0:	f000 fbce 	bl	8006b60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063d2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063e2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	021a      	lsls	r2, r3, #8
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	430a      	orrs	r2, r1
 80063f6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80063f8:	e002      	b.n	8006400 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	75fb      	strb	r3, [r7, #23]
      break;
 80063fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006408:	7dfb      	ldrb	r3, [r7, #23]
}
 800640a:	4618      	mov	r0, r3
 800640c:	3718      	adds	r7, #24
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop

08006414 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800641e:	2300      	movs	r3, #0
 8006420:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006428:	2b01      	cmp	r3, #1
 800642a:	d101      	bne.n	8006430 <HAL_TIM_ConfigClockSource+0x1c>
 800642c:	2302      	movs	r3, #2
 800642e:	e0b4      	b.n	800659a <HAL_TIM_ConfigClockSource+0x186>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2202      	movs	r2, #2
 800643c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	4b56      	ldr	r3, [pc, #344]	@ (80065a4 <HAL_TIM_ConfigClockSource+0x190>)
 800644c:	4013      	ands	r3, r2
 800644e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006456:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006468:	d03e      	beq.n	80064e8 <HAL_TIM_ConfigClockSource+0xd4>
 800646a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800646e:	f200 8087 	bhi.w	8006580 <HAL_TIM_ConfigClockSource+0x16c>
 8006472:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006476:	f000 8086 	beq.w	8006586 <HAL_TIM_ConfigClockSource+0x172>
 800647a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800647e:	d87f      	bhi.n	8006580 <HAL_TIM_ConfigClockSource+0x16c>
 8006480:	2b70      	cmp	r3, #112	@ 0x70
 8006482:	d01a      	beq.n	80064ba <HAL_TIM_ConfigClockSource+0xa6>
 8006484:	2b70      	cmp	r3, #112	@ 0x70
 8006486:	d87b      	bhi.n	8006580 <HAL_TIM_ConfigClockSource+0x16c>
 8006488:	2b60      	cmp	r3, #96	@ 0x60
 800648a:	d050      	beq.n	800652e <HAL_TIM_ConfigClockSource+0x11a>
 800648c:	2b60      	cmp	r3, #96	@ 0x60
 800648e:	d877      	bhi.n	8006580 <HAL_TIM_ConfigClockSource+0x16c>
 8006490:	2b50      	cmp	r3, #80	@ 0x50
 8006492:	d03c      	beq.n	800650e <HAL_TIM_ConfigClockSource+0xfa>
 8006494:	2b50      	cmp	r3, #80	@ 0x50
 8006496:	d873      	bhi.n	8006580 <HAL_TIM_ConfigClockSource+0x16c>
 8006498:	2b40      	cmp	r3, #64	@ 0x40
 800649a:	d058      	beq.n	800654e <HAL_TIM_ConfigClockSource+0x13a>
 800649c:	2b40      	cmp	r3, #64	@ 0x40
 800649e:	d86f      	bhi.n	8006580 <HAL_TIM_ConfigClockSource+0x16c>
 80064a0:	2b30      	cmp	r3, #48	@ 0x30
 80064a2:	d064      	beq.n	800656e <HAL_TIM_ConfigClockSource+0x15a>
 80064a4:	2b30      	cmp	r3, #48	@ 0x30
 80064a6:	d86b      	bhi.n	8006580 <HAL_TIM_ConfigClockSource+0x16c>
 80064a8:	2b20      	cmp	r3, #32
 80064aa:	d060      	beq.n	800656e <HAL_TIM_ConfigClockSource+0x15a>
 80064ac:	2b20      	cmp	r3, #32
 80064ae:	d867      	bhi.n	8006580 <HAL_TIM_ConfigClockSource+0x16c>
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d05c      	beq.n	800656e <HAL_TIM_ConfigClockSource+0x15a>
 80064b4:	2b10      	cmp	r3, #16
 80064b6:	d05a      	beq.n	800656e <HAL_TIM_ConfigClockSource+0x15a>
 80064b8:	e062      	b.n	8006580 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064ca:	f000 fd41 	bl	8006f50 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80064dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68ba      	ldr	r2, [r7, #8]
 80064e4:	609a      	str	r2, [r3, #8]
      break;
 80064e6:	e04f      	b.n	8006588 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064f8:	f000 fd2a 	bl	8006f50 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	689a      	ldr	r2, [r3, #8]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800650a:	609a      	str	r2, [r3, #8]
      break;
 800650c:	e03c      	b.n	8006588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800651a:	461a      	mov	r2, r3
 800651c:	f000 fbe8 	bl	8006cf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2150      	movs	r1, #80	@ 0x50
 8006526:	4618      	mov	r0, r3
 8006528:	f000 fcf7 	bl	8006f1a <TIM_ITRx_SetConfig>
      break;
 800652c:	e02c      	b.n	8006588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800653a:	461a      	mov	r2, r3
 800653c:	f000 fc44 	bl	8006dc8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2160      	movs	r1, #96	@ 0x60
 8006546:	4618      	mov	r0, r3
 8006548:	f000 fce7 	bl	8006f1a <TIM_ITRx_SetConfig>
      break;
 800654c:	e01c      	b.n	8006588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800655a:	461a      	mov	r2, r3
 800655c:	f000 fbc8 	bl	8006cf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2140      	movs	r1, #64	@ 0x40
 8006566:	4618      	mov	r0, r3
 8006568:	f000 fcd7 	bl	8006f1a <TIM_ITRx_SetConfig>
      break;
 800656c:	e00c      	b.n	8006588 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4619      	mov	r1, r3
 8006578:	4610      	mov	r0, r2
 800657a:	f000 fcce 	bl	8006f1a <TIM_ITRx_SetConfig>
      break;
 800657e:	e003      	b.n	8006588 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	73fb      	strb	r3, [r7, #15]
      break;
 8006584:	e000      	b.n	8006588 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006586:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006598:	7bfb      	ldrb	r3, [r7, #15]
}
 800659a:	4618      	mov	r0, r3
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	fffeff88 	.word	0xfffeff88

080065a8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80065b0:	bf00      	nop
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065ec:	bf00      	nop
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006600:	bf00      	nop
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a40      	ldr	r2, [pc, #256]	@ (8006720 <TIM_Base_SetConfig+0x114>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d013      	beq.n	800664c <TIM_Base_SetConfig+0x40>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800662a:	d00f      	beq.n	800664c <TIM_Base_SetConfig+0x40>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a3d      	ldr	r2, [pc, #244]	@ (8006724 <TIM_Base_SetConfig+0x118>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d00b      	beq.n	800664c <TIM_Base_SetConfig+0x40>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a3c      	ldr	r2, [pc, #240]	@ (8006728 <TIM_Base_SetConfig+0x11c>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d007      	beq.n	800664c <TIM_Base_SetConfig+0x40>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a3b      	ldr	r2, [pc, #236]	@ (800672c <TIM_Base_SetConfig+0x120>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d003      	beq.n	800664c <TIM_Base_SetConfig+0x40>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a3a      	ldr	r2, [pc, #232]	@ (8006730 <TIM_Base_SetConfig+0x124>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d108      	bne.n	800665e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006652:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	4313      	orrs	r3, r2
 800665c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a2f      	ldr	r2, [pc, #188]	@ (8006720 <TIM_Base_SetConfig+0x114>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d02b      	beq.n	80066be <TIM_Base_SetConfig+0xb2>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800666c:	d027      	beq.n	80066be <TIM_Base_SetConfig+0xb2>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a2c      	ldr	r2, [pc, #176]	@ (8006724 <TIM_Base_SetConfig+0x118>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d023      	beq.n	80066be <TIM_Base_SetConfig+0xb2>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a2b      	ldr	r2, [pc, #172]	@ (8006728 <TIM_Base_SetConfig+0x11c>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d01f      	beq.n	80066be <TIM_Base_SetConfig+0xb2>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a2a      	ldr	r2, [pc, #168]	@ (800672c <TIM_Base_SetConfig+0x120>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d01b      	beq.n	80066be <TIM_Base_SetConfig+0xb2>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a29      	ldr	r2, [pc, #164]	@ (8006730 <TIM_Base_SetConfig+0x124>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d017      	beq.n	80066be <TIM_Base_SetConfig+0xb2>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a28      	ldr	r2, [pc, #160]	@ (8006734 <TIM_Base_SetConfig+0x128>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d013      	beq.n	80066be <TIM_Base_SetConfig+0xb2>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a27      	ldr	r2, [pc, #156]	@ (8006738 <TIM_Base_SetConfig+0x12c>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d00f      	beq.n	80066be <TIM_Base_SetConfig+0xb2>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a26      	ldr	r2, [pc, #152]	@ (800673c <TIM_Base_SetConfig+0x130>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d00b      	beq.n	80066be <TIM_Base_SetConfig+0xb2>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a25      	ldr	r2, [pc, #148]	@ (8006740 <TIM_Base_SetConfig+0x134>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d007      	beq.n	80066be <TIM_Base_SetConfig+0xb2>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a24      	ldr	r2, [pc, #144]	@ (8006744 <TIM_Base_SetConfig+0x138>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d003      	beq.n	80066be <TIM_Base_SetConfig+0xb2>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a23      	ldr	r2, [pc, #140]	@ (8006748 <TIM_Base_SetConfig+0x13c>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d108      	bne.n	80066d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	695b      	ldr	r3, [r3, #20]
 80066da:	4313      	orrs	r3, r2
 80066dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	689a      	ldr	r2, [r3, #8]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a0a      	ldr	r2, [pc, #40]	@ (8006720 <TIM_Base_SetConfig+0x114>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d003      	beq.n	8006704 <TIM_Base_SetConfig+0xf8>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a0c      	ldr	r2, [pc, #48]	@ (8006730 <TIM_Base_SetConfig+0x124>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d103      	bne.n	800670c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	691a      	ldr	r2, [r3, #16]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	615a      	str	r2, [r3, #20]
}
 8006712:	bf00      	nop
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	40010000 	.word	0x40010000
 8006724:	40000400 	.word	0x40000400
 8006728:	40000800 	.word	0x40000800
 800672c:	40000c00 	.word	0x40000c00
 8006730:	40010400 	.word	0x40010400
 8006734:	40014000 	.word	0x40014000
 8006738:	40014400 	.word	0x40014400
 800673c:	40014800 	.word	0x40014800
 8006740:	40001800 	.word	0x40001800
 8006744:	40001c00 	.word	0x40001c00
 8006748:	40002000 	.word	0x40002000

0800674c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800674c:	b480      	push	{r7}
 800674e:	b087      	sub	sp, #28
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a1b      	ldr	r3, [r3, #32]
 800675a:	f023 0201 	bic.w	r2, r3, #1
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a1b      	ldr	r3, [r3, #32]
 8006766:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	4b2b      	ldr	r3, [pc, #172]	@ (8006824 <TIM_OC1_SetConfig+0xd8>)
 8006778:	4013      	ands	r3, r2
 800677a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f023 0303 	bic.w	r3, r3, #3
 8006782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	4313      	orrs	r3, r2
 800678c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	f023 0302 	bic.w	r3, r3, #2
 8006794:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	697a      	ldr	r2, [r7, #20]
 800679c:	4313      	orrs	r3, r2
 800679e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a21      	ldr	r2, [pc, #132]	@ (8006828 <TIM_OC1_SetConfig+0xdc>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d003      	beq.n	80067b0 <TIM_OC1_SetConfig+0x64>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a20      	ldr	r2, [pc, #128]	@ (800682c <TIM_OC1_SetConfig+0xe0>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d10c      	bne.n	80067ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	f023 0308 	bic.w	r3, r3, #8
 80067b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	4313      	orrs	r3, r2
 80067c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f023 0304 	bic.w	r3, r3, #4
 80067c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a16      	ldr	r2, [pc, #88]	@ (8006828 <TIM_OC1_SetConfig+0xdc>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d003      	beq.n	80067da <TIM_OC1_SetConfig+0x8e>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a15      	ldr	r2, [pc, #84]	@ (800682c <TIM_OC1_SetConfig+0xe0>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d111      	bne.n	80067fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80067e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	693a      	ldr	r2, [r7, #16]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	693a      	ldr	r2, [r7, #16]
 8006802:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	685a      	ldr	r2, [r3, #4]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	697a      	ldr	r2, [r7, #20]
 8006816:	621a      	str	r2, [r3, #32]
}
 8006818:	bf00      	nop
 800681a:	371c      	adds	r7, #28
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr
 8006824:	fffeff8f 	.word	0xfffeff8f
 8006828:	40010000 	.word	0x40010000
 800682c:	40010400 	.word	0x40010400

08006830 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	f023 0210 	bic.w	r2, r3, #16
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	699b      	ldr	r3, [r3, #24]
 8006856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	4b2e      	ldr	r3, [pc, #184]	@ (8006914 <TIM_OC2_SetConfig+0xe4>)
 800685c:	4013      	ands	r3, r2
 800685e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006866:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	021b      	lsls	r3, r3, #8
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	4313      	orrs	r3, r2
 8006872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	f023 0320 	bic.w	r3, r3, #32
 800687a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	011b      	lsls	r3, r3, #4
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	4313      	orrs	r3, r2
 8006886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a23      	ldr	r2, [pc, #140]	@ (8006918 <TIM_OC2_SetConfig+0xe8>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d003      	beq.n	8006898 <TIM_OC2_SetConfig+0x68>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a22      	ldr	r2, [pc, #136]	@ (800691c <TIM_OC2_SetConfig+0xec>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d10d      	bne.n	80068b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800689e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	011b      	lsls	r3, r3, #4
 80068a6:	697a      	ldr	r2, [r7, #20]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a18      	ldr	r2, [pc, #96]	@ (8006918 <TIM_OC2_SetConfig+0xe8>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d003      	beq.n	80068c4 <TIM_OC2_SetConfig+0x94>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a17      	ldr	r2, [pc, #92]	@ (800691c <TIM_OC2_SetConfig+0xec>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d113      	bne.n	80068ec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80068ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80068d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	695b      	ldr	r3, [r3, #20]
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	4313      	orrs	r3, r2
 80068de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	699b      	ldr	r3, [r3, #24]
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	693a      	ldr	r2, [r7, #16]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	693a      	ldr	r2, [r7, #16]
 80068f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	697a      	ldr	r2, [r7, #20]
 8006904:	621a      	str	r2, [r3, #32]
}
 8006906:	bf00      	nop
 8006908:	371c      	adds	r7, #28
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	feff8fff 	.word	0xfeff8fff
 8006918:	40010000 	.word	0x40010000
 800691c:	40010400 	.word	0x40010400

08006920 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006920:	b480      	push	{r7}
 8006922:	b087      	sub	sp, #28
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	69db      	ldr	r3, [r3, #28]
 8006946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	4b2d      	ldr	r3, [pc, #180]	@ (8006a00 <TIM_OC3_SetConfig+0xe0>)
 800694c:	4013      	ands	r3, r2
 800694e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f023 0303 	bic.w	r3, r3, #3
 8006956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	4313      	orrs	r3, r2
 8006960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	021b      	lsls	r3, r3, #8
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	4313      	orrs	r3, r2
 8006974:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a22      	ldr	r2, [pc, #136]	@ (8006a04 <TIM_OC3_SetConfig+0xe4>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d003      	beq.n	8006986 <TIM_OC3_SetConfig+0x66>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a21      	ldr	r2, [pc, #132]	@ (8006a08 <TIM_OC3_SetConfig+0xe8>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d10d      	bne.n	80069a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800698c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	021b      	lsls	r3, r3, #8
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	4313      	orrs	r3, r2
 8006998:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80069a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a17      	ldr	r2, [pc, #92]	@ (8006a04 <TIM_OC3_SetConfig+0xe4>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d003      	beq.n	80069b2 <TIM_OC3_SetConfig+0x92>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a16      	ldr	r2, [pc, #88]	@ (8006a08 <TIM_OC3_SetConfig+0xe8>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d113      	bne.n	80069da <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80069b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80069c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	011b      	lsls	r3, r3, #4
 80069c8:	693a      	ldr	r2, [r7, #16]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	011b      	lsls	r3, r3, #4
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	693a      	ldr	r2, [r7, #16]
 80069de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	685a      	ldr	r2, [r3, #4]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	697a      	ldr	r2, [r7, #20]
 80069f2:	621a      	str	r2, [r3, #32]
}
 80069f4:	bf00      	nop
 80069f6:	371c      	adds	r7, #28
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr
 8006a00:	fffeff8f 	.word	0xfffeff8f
 8006a04:	40010000 	.word	0x40010000
 8006a08:	40010400 	.word	0x40010400

08006a0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b087      	sub	sp, #28
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	69db      	ldr	r3, [r3, #28]
 8006a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	4b1e      	ldr	r3, [pc, #120]	@ (8006ab0 <TIM_OC4_SetConfig+0xa4>)
 8006a38:	4013      	ands	r3, r2
 8006a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	021b      	lsls	r3, r3, #8
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	031b      	lsls	r3, r3, #12
 8006a5e:	693a      	ldr	r2, [r7, #16]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a13      	ldr	r2, [pc, #76]	@ (8006ab4 <TIM_OC4_SetConfig+0xa8>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d003      	beq.n	8006a74 <TIM_OC4_SetConfig+0x68>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a12      	ldr	r2, [pc, #72]	@ (8006ab8 <TIM_OC4_SetConfig+0xac>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d109      	bne.n	8006a88 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	695b      	ldr	r3, [r3, #20]
 8006a80:	019b      	lsls	r3, r3, #6
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	697a      	ldr	r2, [r7, #20]
 8006a8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	685a      	ldr	r2, [r3, #4]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	693a      	ldr	r2, [r7, #16]
 8006aa0:	621a      	str	r2, [r3, #32]
}
 8006aa2:	bf00      	nop
 8006aa4:	371c      	adds	r7, #28
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	feff8fff 	.word	0xfeff8fff
 8006ab4:	40010000 	.word	0x40010000
 8006ab8:	40010400 	.word	0x40010400

08006abc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b087      	sub	sp, #28
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8006b54 <TIM_OC5_SetConfig+0x98>)
 8006ae8:	4013      	ands	r3, r2
 8006aea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006afc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	041b      	lsls	r3, r3, #16
 8006b04:	693a      	ldr	r2, [r7, #16]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a12      	ldr	r2, [pc, #72]	@ (8006b58 <TIM_OC5_SetConfig+0x9c>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d003      	beq.n	8006b1a <TIM_OC5_SetConfig+0x5e>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a11      	ldr	r2, [pc, #68]	@ (8006b5c <TIM_OC5_SetConfig+0xa0>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d109      	bne.n	8006b2e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b20:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	021b      	lsls	r3, r3, #8
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	697a      	ldr	r2, [r7, #20]
 8006b32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	685a      	ldr	r2, [r3, #4]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	621a      	str	r2, [r3, #32]
}
 8006b48:	bf00      	nop
 8006b4a:	371c      	adds	r7, #28
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr
 8006b54:	fffeff8f 	.word	0xfffeff8f
 8006b58:	40010000 	.word	0x40010000
 8006b5c:	40010400 	.word	0x40010400

08006b60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b087      	sub	sp, #28
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a1b      	ldr	r3, [r3, #32]
 8006b6e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	4b1c      	ldr	r3, [pc, #112]	@ (8006bfc <TIM_OC6_SetConfig+0x9c>)
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	021b      	lsls	r3, r3, #8
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006ba2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	051b      	lsls	r3, r3, #20
 8006baa:	693a      	ldr	r2, [r7, #16]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a13      	ldr	r2, [pc, #76]	@ (8006c00 <TIM_OC6_SetConfig+0xa0>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d003      	beq.n	8006bc0 <TIM_OC6_SetConfig+0x60>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a12      	ldr	r2, [pc, #72]	@ (8006c04 <TIM_OC6_SetConfig+0xa4>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d109      	bne.n	8006bd4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006bc6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	695b      	ldr	r3, [r3, #20]
 8006bcc:	029b      	lsls	r3, r3, #10
 8006bce:	697a      	ldr	r2, [r7, #20]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	697a      	ldr	r2, [r7, #20]
 8006bd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	685a      	ldr	r2, [r3, #4]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	621a      	str	r2, [r3, #32]
}
 8006bee:	bf00      	nop
 8006bf0:	371c      	adds	r7, #28
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr
 8006bfa:	bf00      	nop
 8006bfc:	feff8fff 	.word	0xfeff8fff
 8006c00:	40010000 	.word	0x40010000
 8006c04:	40010400 	.word	0x40010400

08006c08 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b087      	sub	sp, #28
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
 8006c14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6a1b      	ldr	r3, [r3, #32]
 8006c1a:	f023 0201 	bic.w	r2, r3, #1
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	699b      	ldr	r3, [r3, #24]
 8006c26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6a1b      	ldr	r3, [r3, #32]
 8006c2c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	4a28      	ldr	r2, [pc, #160]	@ (8006cd4 <TIM_TI1_SetConfig+0xcc>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d01b      	beq.n	8006c6e <TIM_TI1_SetConfig+0x66>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c3c:	d017      	beq.n	8006c6e <TIM_TI1_SetConfig+0x66>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	4a25      	ldr	r2, [pc, #148]	@ (8006cd8 <TIM_TI1_SetConfig+0xd0>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d013      	beq.n	8006c6e <TIM_TI1_SetConfig+0x66>
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	4a24      	ldr	r2, [pc, #144]	@ (8006cdc <TIM_TI1_SetConfig+0xd4>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d00f      	beq.n	8006c6e <TIM_TI1_SetConfig+0x66>
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	4a23      	ldr	r2, [pc, #140]	@ (8006ce0 <TIM_TI1_SetConfig+0xd8>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d00b      	beq.n	8006c6e <TIM_TI1_SetConfig+0x66>
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	4a22      	ldr	r2, [pc, #136]	@ (8006ce4 <TIM_TI1_SetConfig+0xdc>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d007      	beq.n	8006c6e <TIM_TI1_SetConfig+0x66>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	4a21      	ldr	r2, [pc, #132]	@ (8006ce8 <TIM_TI1_SetConfig+0xe0>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d003      	beq.n	8006c6e <TIM_TI1_SetConfig+0x66>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	4a20      	ldr	r2, [pc, #128]	@ (8006cec <TIM_TI1_SetConfig+0xe4>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d101      	bne.n	8006c72 <TIM_TI1_SetConfig+0x6a>
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e000      	b.n	8006c74 <TIM_TI1_SetConfig+0x6c>
 8006c72:	2300      	movs	r3, #0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d008      	beq.n	8006c8a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	f023 0303 	bic.w	r3, r3, #3
 8006c7e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006c80:	697a      	ldr	r2, [r7, #20]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	617b      	str	r3, [r7, #20]
 8006c88:	e003      	b.n	8006c92 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	f043 0301 	orr.w	r3, r3, #1
 8006c90:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	011b      	lsls	r3, r3, #4
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	697a      	ldr	r2, [r7, #20]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	f023 030a 	bic.w	r3, r3, #10
 8006cac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	f003 030a 	and.w	r3, r3, #10
 8006cb4:	693a      	ldr	r2, [r7, #16]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	697a      	ldr	r2, [r7, #20]
 8006cbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	621a      	str	r2, [r3, #32]
}
 8006cc6:	bf00      	nop
 8006cc8:	371c      	adds	r7, #28
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	40010000 	.word	0x40010000
 8006cd8:	40000400 	.word	0x40000400
 8006cdc:	40000800 	.word	0x40000800
 8006ce0:	40000c00 	.word	0x40000c00
 8006ce4:	40010400 	.word	0x40010400
 8006ce8:	40014000 	.word	0x40014000
 8006cec:	40001800 	.word	0x40001800

08006cf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b087      	sub	sp, #28
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6a1b      	ldr	r3, [r3, #32]
 8006d00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6a1b      	ldr	r3, [r3, #32]
 8006d06:	f023 0201 	bic.w	r2, r3, #1
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	699b      	ldr	r3, [r3, #24]
 8006d12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	011b      	lsls	r3, r3, #4
 8006d20:	693a      	ldr	r2, [r7, #16]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	f023 030a 	bic.w	r3, r3, #10
 8006d2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d2e:	697a      	ldr	r2, [r7, #20]
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	693a      	ldr	r2, [r7, #16]
 8006d3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	697a      	ldr	r2, [r7, #20]
 8006d40:	621a      	str	r2, [r3, #32]
}
 8006d42:	bf00      	nop
 8006d44:	371c      	adds	r7, #28
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr

08006d4e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d4e:	b480      	push	{r7}
 8006d50:	b087      	sub	sp, #28
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	60f8      	str	r0, [r7, #12]
 8006d56:	60b9      	str	r1, [r7, #8]
 8006d58:	607a      	str	r2, [r7, #4]
 8006d5a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6a1b      	ldr	r3, [r3, #32]
 8006d60:	f023 0210 	bic.w	r2, r3, #16
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	699b      	ldr	r3, [r3, #24]
 8006d6c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6a1b      	ldr	r3, [r3, #32]
 8006d72:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d7a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	021b      	lsls	r3, r3, #8
 8006d80:	697a      	ldr	r2, [r7, #20]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	031b      	lsls	r3, r3, #12
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	697a      	ldr	r2, [r7, #20]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006da0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	011b      	lsls	r3, r3, #4
 8006da6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	697a      	ldr	r2, [r7, #20]
 8006db4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	621a      	str	r2, [r3, #32]
}
 8006dbc:	bf00      	nop
 8006dbe:	371c      	adds	r7, #28
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b087      	sub	sp, #28
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6a1b      	ldr	r3, [r3, #32]
 8006dd8:	f023 0210 	bic.w	r2, r3, #16
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	699b      	ldr	r3, [r3, #24]
 8006de4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006df2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	031b      	lsls	r3, r3, #12
 8006df8:	697a      	ldr	r2, [r7, #20]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006e04:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	011b      	lsls	r3, r3, #4
 8006e0a:	693a      	ldr	r2, [r7, #16]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	693a      	ldr	r2, [r7, #16]
 8006e1a:	621a      	str	r2, [r3, #32]
}
 8006e1c:	bf00      	nop
 8006e1e:	371c      	adds	r7, #28
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b087      	sub	sp, #28
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	607a      	str	r2, [r7, #4]
 8006e34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	69db      	ldr	r3, [r3, #28]
 8006e46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6a1b      	ldr	r3, [r3, #32]
 8006e4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	f023 0303 	bic.w	r3, r3, #3
 8006e54:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e64:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	011b      	lsls	r3, r3, #4
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	697a      	ldr	r2, [r7, #20]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006e78:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	021b      	lsls	r3, r3, #8
 8006e7e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	697a      	ldr	r2, [r7, #20]
 8006e8c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	693a      	ldr	r2, [r7, #16]
 8006e92:	621a      	str	r2, [r3, #32]
}
 8006e94:	bf00      	nop
 8006e96:	371c      	adds	r7, #28
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b087      	sub	sp, #28
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	607a      	str	r2, [r7, #4]
 8006eac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6a1b      	ldr	r3, [r3, #32]
 8006eb2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	69db      	ldr	r3, [r3, #28]
 8006ebe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6a1b      	ldr	r3, [r3, #32]
 8006ec4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ecc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	021b      	lsls	r3, r3, #8
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ede:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	031b      	lsls	r3, r3, #12
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	697a      	ldr	r2, [r7, #20]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006ef2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	031b      	lsls	r3, r3, #12
 8006ef8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006efc:	693a      	ldr	r2, [r7, #16]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	693a      	ldr	r2, [r7, #16]
 8006f0c:	621a      	str	r2, [r3, #32]
}
 8006f0e:	bf00      	nop
 8006f10:	371c      	adds	r7, #28
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr

08006f1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f1a:	b480      	push	{r7}
 8006f1c:	b085      	sub	sp, #20
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
 8006f22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f32:	683a      	ldr	r2, [r7, #0]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	f043 0307 	orr.w	r3, r3, #7
 8006f3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	68fa      	ldr	r2, [r7, #12]
 8006f42:	609a      	str	r2, [r3, #8]
}
 8006f44:	bf00      	nop
 8006f46:	3714      	adds	r7, #20
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b087      	sub	sp, #28
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]
 8006f5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006f6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	021a      	lsls	r2, r3, #8
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	431a      	orrs	r2, r3
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	697a      	ldr	r2, [r7, #20]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	609a      	str	r2, [r3, #8]
}
 8006f84:	bf00      	nop
 8006f86:	371c      	adds	r7, #28
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d101      	bne.n	8006fa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fa4:	2302      	movs	r3, #2
 8006fa6:	e06d      	b.n	8007084 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2202      	movs	r2, #2
 8006fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a30      	ldr	r2, [pc, #192]	@ (8007090 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d004      	beq.n	8006fdc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a2f      	ldr	r2, [pc, #188]	@ (8007094 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d108      	bne.n	8006fee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006fe2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ff4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a20      	ldr	r2, [pc, #128]	@ (8007090 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d022      	beq.n	8007058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800701a:	d01d      	beq.n	8007058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a1d      	ldr	r2, [pc, #116]	@ (8007098 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d018      	beq.n	8007058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a1c      	ldr	r2, [pc, #112]	@ (800709c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d013      	beq.n	8007058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a1a      	ldr	r2, [pc, #104]	@ (80070a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d00e      	beq.n	8007058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a15      	ldr	r2, [pc, #84]	@ (8007094 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d009      	beq.n	8007058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a16      	ldr	r2, [pc, #88]	@ (80070a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d004      	beq.n	8007058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a15      	ldr	r2, [pc, #84]	@ (80070a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d10c      	bne.n	8007072 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800705e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	68ba      	ldr	r2, [r7, #8]
 8007066:	4313      	orrs	r3, r2
 8007068:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	68ba      	ldr	r2, [r7, #8]
 8007070:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2201      	movs	r2, #1
 8007076:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	3714      	adds	r7, #20
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr
 8007090:	40010000 	.word	0x40010000
 8007094:	40010400 	.word	0x40010400
 8007098:	40000400 	.word	0x40000400
 800709c:	40000800 	.word	0x40000800
 80070a0:	40000c00 	.word	0x40000c00
 80070a4:	40014000 	.word	0x40014000
 80070a8:	40001800 	.word	0x40001800

080070ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80070b6:	2300      	movs	r3, #0
 80070b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d101      	bne.n	80070c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80070c4:	2302      	movs	r3, #2
 80070c6:	e065      	b.n	8007194 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	4313      	orrs	r3, r2
 80070dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4313      	orrs	r3, r2
 8007106:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	4313      	orrs	r3, r2
 8007114:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	695b      	ldr	r3, [r3, #20]
 8007120:	4313      	orrs	r3, r2
 8007122:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800712e:	4313      	orrs	r3, r2
 8007130:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	041b      	lsls	r3, r3, #16
 800713e:	4313      	orrs	r3, r2
 8007140:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a16      	ldr	r2, [pc, #88]	@ (80071a0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d004      	beq.n	8007156 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a14      	ldr	r2, [pc, #80]	@ (80071a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d115      	bne.n	8007182 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007160:	051b      	lsls	r3, r3, #20
 8007162:	4313      	orrs	r3, r2
 8007164:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	69db      	ldr	r3, [r3, #28]
 8007170:	4313      	orrs	r3, r2
 8007172:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	6a1b      	ldr	r3, [r3, #32]
 800717e:	4313      	orrs	r3, r2
 8007180:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3714      	adds	r7, #20
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr
 80071a0:	40010000 	.word	0x40010000
 80071a4:	40010400 	.word	0x40010400

080071a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071b0:	bf00      	nop
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071c4:	bf00      	nop
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80071d8:	bf00      	nop
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <memset>:
 80071e4:	4402      	add	r2, r0
 80071e6:	4603      	mov	r3, r0
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d100      	bne.n	80071ee <memset+0xa>
 80071ec:	4770      	bx	lr
 80071ee:	f803 1b01 	strb.w	r1, [r3], #1
 80071f2:	e7f9      	b.n	80071e8 <memset+0x4>

080071f4 <__errno>:
 80071f4:	4b01      	ldr	r3, [pc, #4]	@ (80071fc <__errno+0x8>)
 80071f6:	6818      	ldr	r0, [r3, #0]
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop
 80071fc:	2000003c 	.word	0x2000003c

08007200 <__libc_init_array>:
 8007200:	b570      	push	{r4, r5, r6, lr}
 8007202:	4d0d      	ldr	r5, [pc, #52]	@ (8007238 <__libc_init_array+0x38>)
 8007204:	4c0d      	ldr	r4, [pc, #52]	@ (800723c <__libc_init_array+0x3c>)
 8007206:	1b64      	subs	r4, r4, r5
 8007208:	10a4      	asrs	r4, r4, #2
 800720a:	2600      	movs	r6, #0
 800720c:	42a6      	cmp	r6, r4
 800720e:	d109      	bne.n	8007224 <__libc_init_array+0x24>
 8007210:	4d0b      	ldr	r5, [pc, #44]	@ (8007240 <__libc_init_array+0x40>)
 8007212:	4c0c      	ldr	r4, [pc, #48]	@ (8007244 <__libc_init_array+0x44>)
 8007214:	f000 f9e4 	bl	80075e0 <_init>
 8007218:	1b64      	subs	r4, r4, r5
 800721a:	10a4      	asrs	r4, r4, #2
 800721c:	2600      	movs	r6, #0
 800721e:	42a6      	cmp	r6, r4
 8007220:	d105      	bne.n	800722e <__libc_init_array+0x2e>
 8007222:	bd70      	pop	{r4, r5, r6, pc}
 8007224:	f855 3b04 	ldr.w	r3, [r5], #4
 8007228:	4798      	blx	r3
 800722a:	3601      	adds	r6, #1
 800722c:	e7ee      	b.n	800720c <__libc_init_array+0xc>
 800722e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007232:	4798      	blx	r3
 8007234:	3601      	adds	r6, #1
 8007236:	e7f2      	b.n	800721e <__libc_init_array+0x1e>
 8007238:	0800ffc0 	.word	0x0800ffc0
 800723c:	0800ffc0 	.word	0x0800ffc0
 8007240:	0800ffc0 	.word	0x0800ffc0
 8007244:	0800ffc4 	.word	0x0800ffc4

08007248 <sqrtf>:
 8007248:	b508      	push	{r3, lr}
 800724a:	ed2d 8b02 	vpush	{d8}
 800724e:	eeb0 8a40 	vmov.f32	s16, s0
 8007252:	f000 f9c2 	bl	80075da <__ieee754_sqrtf>
 8007256:	eeb4 8a48 	vcmp.f32	s16, s16
 800725a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800725e:	d60c      	bvs.n	800727a <sqrtf+0x32>
 8007260:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8007280 <sqrtf+0x38>
 8007264:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800726c:	d505      	bpl.n	800727a <sqrtf+0x32>
 800726e:	f7ff ffc1 	bl	80071f4 <__errno>
 8007272:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8007276:	2321      	movs	r3, #33	@ 0x21
 8007278:	6003      	str	r3, [r0, #0]
 800727a:	ecbd 8b02 	vpop	{d8}
 800727e:	bd08      	pop	{r3, pc}
 8007280:	00000000 	.word	0x00000000

08007284 <sinf_poly>:
 8007284:	07cb      	lsls	r3, r1, #31
 8007286:	d412      	bmi.n	80072ae <sinf_poly+0x2a>
 8007288:	ee21 5b00 	vmul.f64	d5, d1, d0
 800728c:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8007290:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8007294:	eea6 7b01 	vfma.f64	d7, d6, d1
 8007298:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 800729c:	ee21 1b05 	vmul.f64	d1, d1, d5
 80072a0:	eea6 0b05 	vfma.f64	d0, d6, d5
 80072a4:	eea7 0b01 	vfma.f64	d0, d7, d1
 80072a8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80072ac:	4770      	bx	lr
 80072ae:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 80072b2:	ee21 5b01 	vmul.f64	d5, d1, d1
 80072b6:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 80072ba:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 80072be:	eea1 7b06 	vfma.f64	d7, d1, d6
 80072c2:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 80072c6:	eea1 0b06 	vfma.f64	d0, d1, d6
 80072ca:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 80072ce:	ee21 1b05 	vmul.f64	d1, d1, d5
 80072d2:	eea5 0b06 	vfma.f64	d0, d5, d6
 80072d6:	e7e5      	b.n	80072a4 <sinf_poly+0x20>

080072d8 <sinf>:
 80072d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072da:	ee10 4a10 	vmov	r4, s0
 80072de:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80072e2:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 80072e6:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 80072ea:	eef0 7a40 	vmov.f32	s15, s0
 80072ee:	ea4f 5214 	mov.w	r2, r4, lsr #20
 80072f2:	d218      	bcs.n	8007326 <sinf+0x4e>
 80072f4:	ee26 1b06 	vmul.f64	d1, d6, d6
 80072f8:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 80072fc:	d20a      	bcs.n	8007314 <sinf+0x3c>
 80072fe:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 8007302:	d103      	bne.n	800730c <sinf+0x34>
 8007304:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8007308:	ed8d 1a01 	vstr	s2, [sp, #4]
 800730c:	eeb0 0a67 	vmov.f32	s0, s15
 8007310:	b003      	add	sp, #12
 8007312:	bd30      	pop	{r4, r5, pc}
 8007314:	483a      	ldr	r0, [pc, #232]	@ (8007400 <sinf+0x128>)
 8007316:	eeb0 0b46 	vmov.f64	d0, d6
 800731a:	2100      	movs	r1, #0
 800731c:	b003      	add	sp, #12
 800731e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007322:	f7ff bfaf 	b.w	8007284 <sinf_poly>
 8007326:	f240 422e 	movw	r2, #1070	@ 0x42e
 800732a:	4293      	cmp	r3, r2
 800732c:	d824      	bhi.n	8007378 <sinf+0xa0>
 800732e:	4b34      	ldr	r3, [pc, #208]	@ (8007400 <sinf+0x128>)
 8007330:	ed93 7b08 	vldr	d7, [r3, #32]
 8007334:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007338:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800733c:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8007340:	ee17 1a90 	vmov	r1, s15
 8007344:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8007348:	1609      	asrs	r1, r1, #24
 800734a:	ee07 1a90 	vmov	s15, r1
 800734e:	f001 0203 	and.w	r2, r1, #3
 8007352:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8007356:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800735a:	ed92 0b00 	vldr	d0, [r2]
 800735e:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8007362:	f011 0f02 	tst.w	r1, #2
 8007366:	eea5 6b47 	vfms.f64	d6, d5, d7
 800736a:	bf08      	it	eq
 800736c:	4618      	moveq	r0, r3
 800736e:	ee26 1b06 	vmul.f64	d1, d6, d6
 8007372:	ee20 0b06 	vmul.f64	d0, d0, d6
 8007376:	e7d1      	b.n	800731c <sinf+0x44>
 8007378:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 800737c:	d237      	bcs.n	80073ee <sinf+0x116>
 800737e:	4921      	ldr	r1, [pc, #132]	@ (8007404 <sinf+0x12c>)
 8007380:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8007384:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8007388:	f3c4 0316 	ubfx	r3, r4, #0, #23
 800738c:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8007390:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8007394:	6a10      	ldr	r0, [r2, #32]
 8007396:	6912      	ldr	r2, [r2, #16]
 8007398:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800739c:	40ab      	lsls	r3, r5
 800739e:	fba0 5003 	umull	r5, r0, r0, r3
 80073a2:	4359      	muls	r1, r3
 80073a4:	fbe3 0102 	umlal	r0, r1, r3, r2
 80073a8:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 80073ac:	0f9d      	lsrs	r5, r3, #30
 80073ae:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80073b2:	1ac9      	subs	r1, r1, r3
 80073b4:	f7f9 f8ce 	bl	8000554 <__aeabi_l2d>
 80073b8:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 80073bc:	4b10      	ldr	r3, [pc, #64]	@ (8007400 <sinf+0x128>)
 80073be:	f004 0203 	and.w	r2, r4, #3
 80073c2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80073c6:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 80073f8 <sinf+0x120>
 80073ca:	ed92 0b00 	vldr	d0, [r2]
 80073ce:	ec41 0b17 	vmov	d7, r0, r1
 80073d2:	f014 0f02 	tst.w	r4, #2
 80073d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80073da:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80073de:	4629      	mov	r1, r5
 80073e0:	bf08      	it	eq
 80073e2:	4618      	moveq	r0, r3
 80073e4:	ee27 1b07 	vmul.f64	d1, d7, d7
 80073e8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80073ec:	e796      	b.n	800731c <sinf+0x44>
 80073ee:	b003      	add	sp, #12
 80073f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073f4:	f000 b8e2 	b.w	80075bc <__math_invalidf>
 80073f8:	54442d18 	.word	0x54442d18
 80073fc:	3c1921fb 	.word	0x3c1921fb
 8007400:	0800fed8 	.word	0x0800fed8
 8007404:	0800fe78 	.word	0x0800fe78

08007408 <sinf_poly>:
 8007408:	07cb      	lsls	r3, r1, #31
 800740a:	d412      	bmi.n	8007432 <sinf_poly+0x2a>
 800740c:	ee21 5b00 	vmul.f64	d5, d1, d0
 8007410:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8007414:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8007418:	eea6 7b01 	vfma.f64	d7, d6, d1
 800741c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8007420:	ee21 1b05 	vmul.f64	d1, d1, d5
 8007424:	eea6 0b05 	vfma.f64	d0, d6, d5
 8007428:	eea7 0b01 	vfma.f64	d0, d7, d1
 800742c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8007430:	4770      	bx	lr
 8007432:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8007436:	ee21 5b01 	vmul.f64	d5, d1, d1
 800743a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 800743e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8007442:	eea1 7b06 	vfma.f64	d7, d1, d6
 8007446:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 800744a:	eea1 0b06 	vfma.f64	d0, d1, d6
 800744e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8007452:	ee21 1b05 	vmul.f64	d1, d1, d5
 8007456:	eea5 0b06 	vfma.f64	d0, d5, d6
 800745a:	e7e5      	b.n	8007428 <sinf_poly+0x20>
 800745c:	0000      	movs	r0, r0
	...

08007460 <cosf>:
 8007460:	b538      	push	{r3, r4, r5, lr}
 8007462:	ee10 4a10 	vmov	r4, s0
 8007466:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800746a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 800746e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8007472:	d21f      	bcs.n	80074b4 <cosf+0x54>
 8007474:	ee27 7b07 	vmul.f64	d7, d7, d7
 8007478:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 800747c:	f0c0 8082 	bcc.w	8007584 <cosf+0x124>
 8007480:	ee27 4b07 	vmul.f64	d4, d7, d7
 8007484:	4b44      	ldr	r3, [pc, #272]	@ (8007598 <cosf+0x138>)
 8007486:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 800748a:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 800748e:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 8007492:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007496:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 800749a:	eea7 0b05 	vfma.f64	d0, d7, d5
 800749e:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 80074a2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80074a6:	eea4 0b05 	vfma.f64	d0, d4, d5
 80074aa:	eea6 0b07 	vfma.f64	d0, d6, d7
 80074ae:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80074b2:	bd38      	pop	{r3, r4, r5, pc}
 80074b4:	f240 422e 	movw	r2, #1070	@ 0x42e
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d829      	bhi.n	8007510 <cosf+0xb0>
 80074bc:	4b36      	ldr	r3, [pc, #216]	@ (8007598 <cosf+0x138>)
 80074be:	ed93 6b08 	vldr	d6, [r3, #32]
 80074c2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80074c6:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 80074ca:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80074ce:	ee16 1a90 	vmov	r1, s13
 80074d2:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 80074d6:	1609      	asrs	r1, r1, #24
 80074d8:	ee06 1a90 	vmov	s13, r1
 80074dc:	f001 0203 	and.w	r2, r1, #3
 80074e0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80074e4:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80074e8:	ed92 0b00 	vldr	d0, [r2]
 80074ec:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 80074f0:	f011 0f02 	tst.w	r1, #2
 80074f4:	f081 0101 	eor.w	r1, r1, #1
 80074f8:	eea5 7b46 	vfms.f64	d7, d5, d6
 80074fc:	bf08      	it	eq
 80074fe:	4618      	moveq	r0, r3
 8007500:	ee27 1b07 	vmul.f64	d1, d7, d7
 8007504:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007508:	ee20 0b07 	vmul.f64	d0, d0, d7
 800750c:	f7ff bf7c 	b.w	8007408 <sinf_poly>
 8007510:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8007514:	d232      	bcs.n	800757c <cosf+0x11c>
 8007516:	4921      	ldr	r1, [pc, #132]	@ (800759c <cosf+0x13c>)
 8007518:	f3c4 6083 	ubfx	r0, r4, #26, #4
 800751c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8007520:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8007524:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8007528:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800752c:	6a10      	ldr	r0, [r2, #32]
 800752e:	6912      	ldr	r2, [r2, #16]
 8007530:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007534:	40ab      	lsls	r3, r5
 8007536:	fba0 5003 	umull	r5, r0, r0, r3
 800753a:	4359      	muls	r1, r3
 800753c:	fbe3 0102 	umlal	r0, r1, r3, r2
 8007540:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8007544:	0f9d      	lsrs	r5, r3, #30
 8007546:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800754a:	1ac9      	subs	r1, r1, r3
 800754c:	f7f9 f802 	bl	8000554 <__aeabi_l2d>
 8007550:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8007554:	4b10      	ldr	r3, [pc, #64]	@ (8007598 <cosf+0x138>)
 8007556:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8007590 <cosf+0x130>
 800755a:	ec41 0b17 	vmov	d7, r0, r1
 800755e:	f004 0203 	and.w	r2, r4, #3
 8007562:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8007566:	ed92 0b00 	vldr	d0, [r2]
 800756a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800756e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8007572:	f014 0f02 	tst.w	r4, #2
 8007576:	f085 0101 	eor.w	r1, r5, #1
 800757a:	e7bf      	b.n	80074fc <cosf+0x9c>
 800757c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007580:	f000 b81c 	b.w	80075bc <__math_invalidf>
 8007584:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007588:	e793      	b.n	80074b2 <cosf+0x52>
 800758a:	bf00      	nop
 800758c:	f3af 8000 	nop.w
 8007590:	54442d18 	.word	0x54442d18
 8007594:	3c1921fb 	.word	0x3c1921fb
 8007598:	0800fed8 	.word	0x0800fed8
 800759c:	0800fe78 	.word	0x0800fe78

080075a0 <with_errnof>:
 80075a0:	b510      	push	{r4, lr}
 80075a2:	ed2d 8b02 	vpush	{d8}
 80075a6:	eeb0 8a40 	vmov.f32	s16, s0
 80075aa:	4604      	mov	r4, r0
 80075ac:	f7ff fe22 	bl	80071f4 <__errno>
 80075b0:	eeb0 0a48 	vmov.f32	s0, s16
 80075b4:	ecbd 8b02 	vpop	{d8}
 80075b8:	6004      	str	r4, [r0, #0]
 80075ba:	bd10      	pop	{r4, pc}

080075bc <__math_invalidf>:
 80075bc:	eef0 7a40 	vmov.f32	s15, s0
 80075c0:	ee30 7a40 	vsub.f32	s14, s0, s0
 80075c4:	eef4 7a67 	vcmp.f32	s15, s15
 80075c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075cc:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80075d0:	d602      	bvs.n	80075d8 <__math_invalidf+0x1c>
 80075d2:	2021      	movs	r0, #33	@ 0x21
 80075d4:	f7ff bfe4 	b.w	80075a0 <with_errnof>
 80075d8:	4770      	bx	lr

080075da <__ieee754_sqrtf>:
 80075da:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80075de:	4770      	bx	lr

080075e0 <_init>:
 80075e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075e2:	bf00      	nop
 80075e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075e6:	bc08      	pop	{r3}
 80075e8:	469e      	mov	lr, r3
 80075ea:	4770      	bx	lr

080075ec <_fini>:
 80075ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ee:	bf00      	nop
 80075f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075f2:	bc08      	pop	{r3}
 80075f4:	469e      	mov	lr, r3
 80075f6:	4770      	bx	lr

Disassembly of section .ccmram:

080075f8 <pi_aw_calc>:
 * @param v Pointer to the PI control structure.
 *
 * @note This function computes the PI control action with anti-windup.
 */
void pi_aw_calc(volatile pi_aw_struct *v)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
    if(v->enable)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	881b      	ldrh	r3, [r3, #0]
 8007604:	b29b      	uxth	r3, r3
 8007606:	2b00      	cmp	r3, #0
 8007608:	d063      	beq.n	80076d2 <pi_aw_calc+0xda>
    {
        v->e[0] = v->pi_consig - v->pi_fdb; // Calculate error
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	ed93 7a07 	vldr	s14, [r3, #28]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	edd3 7a08 	vldr	s15, [r3, #32]
 8007616:	ee77 7a67 	vsub.f32	s15, s14, s15
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	edc3 7a05 	vstr	s15, [r3, #20]

        // PI trapezoidal with feedforward
        v->pi_int[0] =  v->Ki * v->e[0] * v->Ts + v->pi_int[1] + (v->pi_out_postsat - v->pi_out_presat) * v->Kaw * v->Ts;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	ed93 7a03 	vldr	s14, [r3, #12]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	edd3 7a05 	vldr	s15, [r3, #20]
 800762c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	edd3 7a01 	vldr	s15, [r3, #4]
 8007636:	ee27 7a27 	vmul.f32	s14, s14, s15
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8007640:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8007650:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	edd3 7a04 	vldr	s15, [r3, #16]
 800765a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	edd3 7a01 	vldr	s15, [r3, #4]
 8007664:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007668:	ee77 7a27 	vadd.f32	s15, s14, s15
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

        v->pi_out_presat = v->pi_out;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	62da      	str	r2, [r3, #44]	@ 0x2c

        // Output voltage saturation
        if (v->pi_out > v->pi_out_max)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8007686:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800768a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800768e:	dd04      	ble.n	800769a <pi_aw_calc+0xa2>
            v->pi_out = v->pi_out_max;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	635a      	str	r2, [r3, #52]	@ 0x34
 8007698:	e00e      	b.n	80076b8 <pi_aw_calc+0xc0>
        else if (v->pi_out < v->pi_out_min)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80076a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80076aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ae:	d503      	bpl.n	80076b8 <pi_aw_calc+0xc0>
            v->pi_out = v->pi_out_min;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	635a      	str	r2, [r3, #52]	@ 0x34
        else;

        // Copy previous values
        v->e[1] = v->e[0];                      // Copy previous error
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	695a      	ldr	r2, [r3, #20]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	619a      	str	r2, [r3, #24]
        v->pi_ffw[1] = v->pi_ffw[0];            // Copy previous feedforward
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	645a      	str	r2, [r3, #68]	@ 0x44
        v->pi_int[1] = v->pi_int[0];			// Copy previous integrator
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	63da      	str	r2, [r3, #60]	@ 0x3c
        v->e[1] = 0.0F;
        v->pi_ffw[1] = 0.0F;
        v->pi_int[1] = 0.0F;
        v->pi_out = 0.0F;
    }
}
 80076d0:	e00f      	b.n	80076f2 <pi_aw_calc+0xfa>
        v->e[1] = 0.0F;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f04f 0200 	mov.w	r2, #0
 80076d8:	619a      	str	r2, [r3, #24]
        v->pi_ffw[1] = 0.0F;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f04f 0200 	mov.w	r2, #0
 80076e0:	645a      	str	r2, [r3, #68]	@ 0x44
        v->pi_int[1] = 0.0F;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f04f 0200 	mov.w	r2, #0
 80076e8:	63da      	str	r2, [r3, #60]	@ 0x3c
        v->pi_out = 0.0F;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f04f 0200 	mov.w	r2, #0
 80076f0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80076f2:	bf00      	nop
 80076f4:	370c      	adds	r7, #12
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr

080076fe <pi_init>:
 *
 * @param v Pointer to the PI structure.
 *
 * @note This function initializes the constants used in the PI controller.
 */
void pi_init(volatile pi_struct *v){
 80076fe:	b480      	push	{r7}
 8007700:	b083      	sub	sp, #12
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
    v->K0 = v->Kp + v->Ki * v->Ts * 0.5F;   // K0 = Kp + Ki*Ts/2
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	ed93 7a02 	vldr	s14, [r3, #8]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	edd3 6a03 	vldr	s13, [r3, #12]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	edd3 7a01 	vldr	s15, [r3, #4]
 8007718:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800771c:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8007720:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007724:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	edc3 7a04 	vstr	s15, [r3, #16]
    v->K1 = -v->Kp + v->Ki * v->Ts * 0.5F;  // K1 = -Kp + Ki*Ts/2
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	ed93 7a03 	vldr	s14, [r3, #12]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	edd3 7a01 	vldr	s15, [r3, #4]
 800773a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800773e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007742:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	edd3 7a02 	vldr	s15, [r3, #8]
 800774c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8007756:	bf00      	nop
 8007758:	370c      	adds	r7, #12
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr

08007762 <pi_calc>:
 * @param v Pointer to the PI structure.
 *
 * @note This function computes the PI control action with feedforward and saturation.
 */
void pi_calc(volatile pi_struct *v)
{
 8007762:	b480      	push	{r7}
 8007764:	b083      	sub	sp, #12
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
    if(v->enable)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	881b      	ldrh	r3, [r3, #0]
 800776e:	b29b      	uxth	r3, r3
 8007770:	2b00      	cmp	r3, #0
 8007772:	d056      	beq.n	8007822 <pi_calc+0xc0>
    {
        v->e[0] = v->pi_consig - v->pi_fdb; // Calculate error
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	ed93 7a08 	vldr	s14, [r3, #32]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8007780:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	edc3 7a06 	vstr	s15, [r3, #24]
        v->pi_out += v->K0 * v->e[0] + v->K1 * v->e[1] + v->pi_ffw[0] - v->pi_ffw[1];   // PI trapezoidal with feedforward
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	ed93 7a04 	vldr	s14, [r3, #16]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	edd3 7a06 	vldr	s15, [r3, #24]
 8007796:	ee27 7a27 	vmul.f32	s14, s14, s15
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	edd3 6a05 	vldr	s13, [r3, #20]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	edd3 7a07 	vldr	s15, [r3, #28]
 80077a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80077aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80077b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80077be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80077c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        // Output voltage saturation
        if (v->pi_out > v->pi_out_max)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80077de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80077e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077e6:	dd04      	ble.n	80077f2 <pi_calc+0x90>
            v->pi_out = v->pi_out_max;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80077f0:	e00e      	b.n	8007810 <pi_calc+0xae>
        else if (v->pi_out < v->pi_out_min)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80077fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007806:	d503      	bpl.n	8007810 <pi_calc+0xae>
            v->pi_out = v->pi_out_min;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	631a      	str	r2, [r3, #48]	@ 0x30
        else;
        // Copy previous values
        v->e[1] = v->e[0];                      // Copy previous error
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	699a      	ldr	r2, [r3, #24]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	61da      	str	r2, [r3, #28]
        v->pi_ffw[1] = v->pi_ffw[0];            // Copy previous feedforward
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	639a      	str	r2, [r3, #56]	@ 0x38
        // Reset previous control variables
        v->e[1] = 0.0F;
        v->pi_ffw[1] = 0.0F;
        v->pi_out = 0.0F;
    }
}
 8007820:	e00b      	b.n	800783a <pi_calc+0xd8>
        v->e[1] = 0.0F;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f04f 0200 	mov.w	r2, #0
 8007828:	61da      	str	r2, [r3, #28]
        v->pi_ffw[1] = 0.0F;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f04f 0200 	mov.w	r2, #0
 8007830:	639a      	str	r2, [r3, #56]	@ 0x38
        v->pi_out = 0.0F;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f04f 0200 	mov.w	r2, #0
 8007838:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800783a:	bf00      	nop
 800783c:	370c      	adds	r7, #12
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr

08007846 <clarke3F_calc>:
 * @param v Pointer to the Clarke transformation structure.
 *
 * @note This function computes the Clarke transformation for three-phase signals.
 */
void clarke3F_calc(volatile clarke3F_struct *v)
{
 8007846:	b480      	push	{r7}
 8007848:	b083      	sub	sp, #12
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
    v->D = v->a;                                       // Alfa = A
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	609a      	str	r2, [r3, #8]
    v->Q = ISQ3*( v->a + 2.0F * v->b );              // Beta = 1/sqrt(3)*(A + 2*B) = 1/sqrt(3)*(B - C)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	ed93 7a00 	vldr	s14, [r3]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	edd3 7a01 	vldr	s15, [r3, #4]
 8007862:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007866:	ee77 7a27 	vadd.f32	s15, s14, s15
 800786a:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8007884 <clarke3F_calc+0x3e>
 800786e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8007878:	bf00      	nop
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr
 8007884:	3f13cd3a 	.word	0x3f13cd3a

08007888 <rot_calc>:
 * @param v Pointer to the rotation transformation structure.
 *
 * @note This function computes the rotation transformation (clockwise).
 */
void rot_calc(volatile rot_struct *v)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
    v->d = v->D*v->cosFi + v->Q*v->sinFi;              // d = Alfa(D)*cos(Fi) + Beta(Q)*sin(Fi)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	ed93 7a00 	vldr	s14, [r3]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	edd3 7a03 	vldr	s15, [r3, #12]
 800789c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	edd3 6a01 	vldr	s13, [r3, #4]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	edd3 7a02 	vldr	s15, [r3, #8]
 80078ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80078b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	edc3 7a04 	vstr	s15, [r3, #16]
    v->q = v->Q*v->cosFi - v->D*v->sinFi ;             // q = -Alfa(D)*sin(Fi) + Beta(Q)*cos(Fi)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	ed93 7a01 	vldr	s14, [r3, #4]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80078c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	edd3 6a00 	vldr	s13, [r3]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80078d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80078da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	edc3 7a05 	vstr	s15, [r3, #20]
}
 80078e4:	bf00      	nop
 80078e6:	370c      	adds	r7, #12
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <irot_calc>:
 * @param v Pointer to the inverse rotation transformation structure.
 *
 * @note This function computes the inverse rotation transformation (counterclockwise).
 */
void irot_calc(volatile irot_struct *v)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
    v->alpha = v->d*v->cosFi - v->q*v->sinFi;              // Alfa(D) = d*cos(Fi) - q*sin(Fi)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	ed93 7a00 	vldr	s14, [r3]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	edd3 7a03 	vldr	s15, [r3, #12]
 8007904:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	edd3 6a01 	vldr	s13, [r3, #4]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	edd3 7a02 	vldr	s15, [r3, #8]
 8007914:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007918:	ee77 7a67 	vsub.f32	s15, s14, s15
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	edc3 7a04 	vstr	s15, [r3, #16]
    v->beta = v->d*v->sinFi + v->q*v->cosFi;              // Beta(Q) = d*sin(Fi) + q*cos(Fi)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	ed93 7a00 	vldr	s14, [r3]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	edd3 7a02 	vldr	s15, [r3, #8]
 800792e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	edd3 6a01 	vldr	s13, [r3, #4]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	edd3 7a03 	vldr	s15, [r3, #12]
 800793e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007942:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	edc3 7a05 	vstr	s15, [r3, #20]
}
 800794c:	bf00      	nop
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <angle_calc>:
 * @param v Pointer to the angle generation structure.
 *
 * @note This function generates the angle.
 */
void angle_calc(volatile angle_struct *v)
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
    // Integrator
    v->angle += v->freq*v->Ts*2;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	ed93 7a00 	vldr	s14, [r3]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	edd3 7a01 	vldr	s15, [r3, #4]
 800796c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007970:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	edd3 7a02 	vldr	s15, [r3, #8]
 800797a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	edc3 7a02 	vstr	s15, [r3, #8]
    v->angle = (v->angle > 1) ? (v->angle - 2) : v->angle;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	edd3 7a02 	vldr	s15, [r3, #8]
 800798a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800798e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007996:	dd07      	ble.n	80079a8 <angle_calc+0x50>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	edd3 7a02 	vldr	s15, [r3, #8]
 800799e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80079a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80079a6:	e002      	b.n	80079ae <angle_calc+0x56>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80079b4:	bf00      	nop
 80079b6:	370c      	adds	r7, #12
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <svpwm_calc>:
 * @param v Pointer to the SVPWM structure.
 *
 * @note This function calculates the Space Vector Pulse Width Modulation (SVPWM).
 */
void svpwm_calc(volatile svpwm_struct *v)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b089      	sub	sp, #36	@ 0x24
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]

    // Auxiliary variables for SVPWM
    float Va, Vb, Vc, max, min, h;

    // Calculate Va, Vb, and Vc for three-phase system without neutral
    Va = v->alpha;                                      // A = Alfa
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	61fb      	str	r3, [r7, #28]
    //Vb = (- v->valfa + SQ3*v->vbeta)*0.5;              // B = -1/2*Alfa + sqrt(3)/2*Beta
    Vb = (- v->alpha + SQ3*v->beta)*DIV2;              // B = -1/2*Alfa + sqrt(3)/2*Beta
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80079d4:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8007ae8 <svpwm_calc+0x128>
 80079d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	edd3 7a00 	vldr	s15, [r3]
 80079e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80079e6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80079ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80079ee:	edc7 7a06 	vstr	s15, [r7, #24]
    Vc = - Va - Vb;                                     // C = - A - B
 80079f2:	edd7 7a07 	vldr	s15, [r7, #28]
 80079f6:	eeb1 7a67 	vneg.f32	s14, s15
 80079fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80079fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a02:	edc7 7a05 	vstr	s15, [r7, #20]

    // Homopolar addition
    // Select maximum
    max = Va;
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	613b      	str	r3, [r7, #16]
    max = (Vb >= max) ? Vb : max;
 8007a0a:	ed97 7a06 	vldr	s14, [r7, #24]
 8007a0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8007a12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a1a:	db01      	blt.n	8007a20 <svpwm_calc+0x60>
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	e000      	b.n	8007a22 <svpwm_calc+0x62>
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	613b      	str	r3, [r7, #16]
    max = (Vc >= max) ? Vc : max;
 8007a24:	ed97 7a05 	vldr	s14, [r7, #20]
 8007a28:	edd7 7a04 	vldr	s15, [r7, #16]
 8007a2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a34:	db01      	blt.n	8007a3a <svpwm_calc+0x7a>
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	e000      	b.n	8007a3c <svpwm_calc+0x7c>
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	613b      	str	r3, [r7, #16]
    // Select minimum
    min = Va;
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	60fb      	str	r3, [r7, #12]
    min = (Vb <= min) ? Vb : min;
 8007a42:	ed97 7a06 	vldr	s14, [r7, #24]
 8007a46:	edd7 7a03 	vldr	s15, [r7, #12]
 8007a4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a52:	d801      	bhi.n	8007a58 <svpwm_calc+0x98>
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	e000      	b.n	8007a5a <svpwm_calc+0x9a>
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	60fb      	str	r3, [r7, #12]
    min = (Vc <= min) ? Vc : min;
 8007a5c:	ed97 7a05 	vldr	s14, [r7, #20]
 8007a60:	edd7 7a03 	vldr	s15, [r7, #12]
 8007a64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a6c:	d801      	bhi.n	8007a72 <svpwm_calc+0xb2>
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	e000      	b.n	8007a74 <svpwm_calc+0xb4>
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	60fb      	str	r3, [r7, #12]
    // Calculate homopolar component
    h = (max + min)*DIV2;
 8007a76:	ed97 7a04 	vldr	s14, [r7, #16]
 8007a7a:	edd7 7a03 	vldr	s15, [r7, #12]
 8007a7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a82:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007a86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007a8a:	edc7 7a02 	vstr	s15, [r7, #8]

    // Generate duty cycles (range from 0 to 1)
    // Convert sinusoids ranging up to 0.5 to sinusoids ranging from 0 to 1
    v->Da = (Va - h + 0.5F);
 8007a8e:	ed97 7a07 	vldr	s14, [r7, #28]
 8007a92:	edd7 7a02 	vldr	s15, [r7, #8]
 8007a96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a9a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007a9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	edc3 7a02 	vstr	s15, [r3, #8]
    v->Db = (Vb - h + 0.5F);
 8007aa8:	ed97 7a06 	vldr	s14, [r7, #24]
 8007aac:	edd7 7a02 	vldr	s15, [r7, #8]
 8007ab0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ab4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007ab8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	edc3 7a03 	vstr	s15, [r3, #12]
    v->Dc = (Vc - h + 0.5F);
 8007ac2:	ed97 7a05 	vldr	s14, [r7, #20]
 8007ac6:	edd7 7a02 	vldr	s15, [r7, #8]
 8007aca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ace:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007ad2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8007adc:	bf00      	nop
 8007ade:	3724      	adds	r7, #36	@ 0x24
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr
 8007ae8:	3fddb3d7 	.word	0x3fddb3d7

08007aec <rampa_calc>:
 * @param v Pointer to the ramp structure.
 *
 * @note This function calculates the ramp.
 */
void rampa_calc(volatile rampa_struct *v)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
    if (v->enable)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	7b1b      	ldrb	r3, [r3, #12]
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d04e      	beq.n	8007b9c <rampa_calc+0xb0>
    {
        if(v->out < v->in)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	ed93 7a01 	vldr	s14, [r3, #4]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	edd3 7a00 	vldr	s15, [r3]
 8007b0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b12:	d51b      	bpl.n	8007b4c <rampa_calc+0x60>
        {
            v->out += v->Incr;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	ed93 7a02 	vldr	s14, [r3, #8]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	edd3 7a01 	vldr	s15, [r3, #4]
 8007b20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	edc3 7a01 	vstr	s15, [r3, #4]
            if(v->out > v->in)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	ed93 7a01 	vldr	s14, [r3, #4]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	edd3 7a00 	vldr	s15, [r3]
 8007b36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b3e:	dc00      	bgt.n	8007b42 <rampa_calc+0x56>
    }
    else
    {
        v->out = 0.0F;
    }
}
 8007b40:	e030      	b.n	8007ba4 <rampa_calc+0xb8>
                v->out = v->in;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	605a      	str	r2, [r3, #4]
}
 8007b4a:	e02b      	b.n	8007ba4 <rampa_calc+0xb8>
        else if(v->out > v->in)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	ed93 7a01 	vldr	s14, [r3, #4]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	edd3 7a00 	vldr	s15, [r3]
 8007b58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b60:	dc00      	bgt.n	8007b64 <rampa_calc+0x78>
}
 8007b62:	e01f      	b.n	8007ba4 <rampa_calc+0xb8>
            v->out -= v->Incr;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	edd3 7a02 	vldr	s15, [r3, #8]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	ed93 7a01 	vldr	s14, [r3, #4]
 8007b70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	edc3 7a01 	vstr	s15, [r3, #4]
            if(v->out < v->in)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	ed93 7a01 	vldr	s14, [r3, #4]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	edd3 7a00 	vldr	s15, [r3]
 8007b86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b8e:	d400      	bmi.n	8007b92 <rampa_calc+0xa6>
}
 8007b90:	e008      	b.n	8007ba4 <rampa_calc+0xb8>
                v->out = v->in;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	605a      	str	r2, [r3, #4]
}
 8007b9a:	e003      	b.n	8007ba4 <rampa_calc+0xb8>
        v->out = 0.0F;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f04f 0200 	mov.w	r2, #0
 8007ba2:	605a      	str	r2, [r3, #4]
}
 8007ba4:	bf00      	nop
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <rampa_dual_calc>:
 * @param v Pointer to the dual ramp structure.
 *
 * @note This function calculates the dual ramp.
 */
void rampa_dual_calc(volatile rampa_dual_struct *v)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
    if (v->enable)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	7c1b      	ldrb	r3, [r3, #16]
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d04e      	beq.n	8007c60 <rampa_dual_calc+0xb0>
    {
        if(v->out < v->in)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	ed93 7a01 	vldr	s14, [r3, #4]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	edd3 7a00 	vldr	s15, [r3]
 8007bce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bd6:	d51b      	bpl.n	8007c10 <rampa_dual_calc+0x60>
        {
            v->out += v->Incr;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	ed93 7a02 	vldr	s14, [r3, #8]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	edd3 7a01 	vldr	s15, [r3, #4]
 8007be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	edc3 7a01 	vstr	s15, [r3, #4]
            if(v->out > v->in)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	ed93 7a01 	vldr	s14, [r3, #4]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	edd3 7a00 	vldr	s15, [r3]
 8007bfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c02:	dc00      	bgt.n	8007c06 <rampa_dual_calc+0x56>
    }
    else
    {
        v->out = 0;
    }
}
 8007c04:	e030      	b.n	8007c68 <rampa_dual_calc+0xb8>
                v->out = v->in;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	605a      	str	r2, [r3, #4]
}
 8007c0e:	e02b      	b.n	8007c68 <rampa_dual_calc+0xb8>
        else if(v->out > v->in)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	ed93 7a01 	vldr	s14, [r3, #4]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	edd3 7a00 	vldr	s15, [r3]
 8007c1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c24:	dc00      	bgt.n	8007c28 <rampa_dual_calc+0x78>
}
 8007c26:	e01f      	b.n	8007c68 <rampa_dual_calc+0xb8>
            v->out -= v->Decr;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	edd3 7a03 	vldr	s15, [r3, #12]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	ed93 7a01 	vldr	s14, [r3, #4]
 8007c34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	edc3 7a01 	vstr	s15, [r3, #4]
            if(v->out < v->in)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	ed93 7a01 	vldr	s14, [r3, #4]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	edd3 7a00 	vldr	s15, [r3]
 8007c4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c52:	d400      	bmi.n	8007c56 <rampa_dual_calc+0xa6>
}
 8007c54:	e008      	b.n	8007c68 <rampa_dual_calc+0xb8>
                v->out = v->in;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	605a      	str	r2, [r3, #4]
}
 8007c5e:	e003      	b.n	8007c68 <rampa_dual_calc+0xb8>
        v->out = 0;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f04f 0200 	mov.w	r2, #0
 8007c66:	605a      	str	r2, [r3, #4]
}
 8007c68:	bf00      	nop
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <RMS_calc>:
 *
 * @param v Pointer to the RMS structure.
 *
 * @note This function calculates the Root Mean Square (RMS).
 */
void RMS_calc(volatile RMS_struct *v){
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
    // Calculate RMS output current.
    //-----------------------------------------------------------------------------------------
    v->Sq_Sum += (float) (v->Measure * v->Measure)* v->T_exec;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	ed93 7a01 	vldr	s14, [r3, #4]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	edd3 7a01 	vldr	s15, [r3, #4]
 8007c88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	edd3 7a00 	vldr	s15, [r3]
 8007c92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	edd3 7a02 	vldr	s15, [r3, #8]
 8007c9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	edc3 7a02 	vstr	s15, [r3, #8]
    // Execute calculation at the zero crossing of the angle
    //
    if (v->Freq > 0.0F) {
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	edd3 7a04 	vldr	s15, [r3, #16]
 8007cac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cb4:	dd25      	ble.n	8007d02 <RMS_calc+0x8e>
        if (v->Angle_ant < 0.0F && v->Angle >= 0.0F) {
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	edd3 7a06 	vldr	s15, [r3, #24]
 8007cbc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cc4:	d54c      	bpl.n	8007d60 <RMS_calc+0xec>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	edd3 7a05 	vldr	s15, [r3, #20]
 8007ccc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cd4:	db44      	blt.n	8007d60 <RMS_calc+0xec>
           // Calculate RMS
            v->Out_RMS = sqrtf((float) v->Sq_Sum * v->Freq);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	ed93 7a02 	vldr	s14, [r3, #8]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	edd3 7a04 	vldr	s15, [r3, #16]
 8007ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ce6:	eeb0 0a67 	vmov.f32	s0, s15
 8007cea:	f7ff faad 	bl	8007248 <sqrtf>
 8007cee:	eef0 7a40 	vmov.f32	s15, s0
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	edc3 7a03 	vstr	s15, [r3, #12]
            v->Sq_Sum = 0;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f04f 0200 	mov.w	r2, #0
 8007cfe:	609a      	str	r2, [r3, #8]
 8007d00:	e02e      	b.n	8007d60 <RMS_calc+0xec>
        }
        else;
    }
    else if (v->Freq < 0.0F){
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	edd3 7a04 	vldr	s15, [r3, #16]
 8007d08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d10:	d526      	bpl.n	8007d60 <RMS_calc+0xec>
        if (v->Angle_ant > 0.0F && v->Angle <= 0.0F) {
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	edd3 7a06 	vldr	s15, [r3, #24]
 8007d18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d20:	dd1e      	ble.n	8007d60 <RMS_calc+0xec>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	edd3 7a05 	vldr	s15, [r3, #20]
 8007d28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d30:	d816      	bhi.n	8007d60 <RMS_calc+0xec>
            // Calculate RMS
            v->Out_RMS = sqrtf((float) v->Sq_Sum * v->Freq * (-1.0F));
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	ed93 7a02 	vldr	s14, [r3, #8]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	edd3 7a04 	vldr	s15, [r3, #16]
 8007d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d42:	eef1 7a67 	vneg.f32	s15, s15
 8007d46:	eeb0 0a67 	vmov.f32	s0, s15
 8007d4a:	f7ff fa7d 	bl	8007248 <sqrtf>
 8007d4e:	eef0 7a40 	vmov.f32	s15, s0
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	edc3 7a03 	vstr	s15, [r3, #12]
            v->Sq_Sum = 0;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f04f 0200 	mov.w	r2, #0
 8007d5e:	609a      	str	r2, [r3, #8]
        }
        else;
        //do nothing
    }
    else;
    v->Angle_ant = v->Angle;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	695a      	ldr	r2, [r3, #20]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	619a      	str	r2, [r3, #24]
}
 8007d68:	bf00      	nop
 8007d6a:	3708      	adds	r7, #8
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <filtreLP_calc>:
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
    if (v->enable)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	8a9b      	ldrh	r3, [r3, #20]
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d015      	beq.n	8007dae <filtreLP_calc+0x3e>
        v->out = (v->alfa * (v->in - v->out)) + v->out;    // Filter out(k) = alfa*in(k) + (1-alfa)*out(k-1)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	ed93 7a02 	vldr	s14, [r3, #8]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	edd3 6a00 	vldr	s13, [r3]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	edd3 7a01 	vldr	s15, [r3, #4]
 8007d94:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007d98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	edd3 7a01 	vldr	s15, [r3, #4]
 8007da2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8007dac:	e003      	b.n	8007db6 <filtreLP_calc+0x46>
        v->out = v->in;        // Without filter. Out(k) = In(k)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	605a      	str	r2, [r3, #4]
}
 8007db6:	bf00      	nop
 8007db8:	370c      	adds	r7, #12
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr

08007dc2 <step_calc>:
 * @param v Pointer to the step structure.
 *
 * @note This function calculates the step function.
 */
void step_calc(volatile step_struct *v)
{
 8007dc2:	b480      	push	{r7}
 8007dc4:	b083      	sub	sp, #12
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
    // Calculate step width in pulses to count
    v->Pulses = (uint32_t)((v->fs) * (v->t_step));
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	ed93 7a00 	vldr	s14, [r3]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	edd3 7a04 	vldr	s15, [r3, #16]
 8007dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dde:	ee17 2a90 	vmov	r2, s15
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	615a      	str	r2, [r3, #20]

    // If enabled, perform the step and start counting
    if (v->enable == 1 && v->Counter < v->Pulses){
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	8b9b      	ldrh	r3, [r3, #28]
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d116      	bne.n	8007e1e <step_calc+0x5c>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	699a      	ldr	r2, [r3, #24]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	695b      	ldr	r3, [r3, #20]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d210      	bcs.n	8007e1e <step_calc+0x5c>
        v->Out = v->In + v->Step;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	ed93 7a01 	vldr	s14, [r3, #4]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	edd3 7a03 	vldr	s15, [r3, #12]
 8007e08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	edc3 7a02 	vstr	s15, [r3, #8]
        v->Counter++;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	699b      	ldr	r3, [r3, #24]
 8007e16:	1c5a      	adds	r2, r3, #1
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	619a      	str	r2, [r3, #24]
 8007e1c:	e01a      	b.n	8007e54 <step_calc+0x92>
    }
    // When reaching the time limit, remove step and reset the counter
    else if (v->enable == 1 && v->Counter >= v->Pulses){
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	8b9b      	ldrh	r3, [r3, #28]
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d110      	bne.n	8007e4a <step_calc+0x88>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	699a      	ldr	r2, [r3, #24]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	695b      	ldr	r3, [r3, #20]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d30a      	bcc.n	8007e4a <step_calc+0x88>
        v->Out = v->In;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	685a      	ldr	r2, [r3, #4]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	609a      	str	r2, [r3, #8]
        v->Counter = 0;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	619a      	str	r2, [r3, #24]
        v->enable = 0;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2200      	movs	r2, #0
 8007e46:	839a      	strh	r2, [r3, #28]
 8007e48:	e004      	b.n	8007e54 <step_calc+0x92>
    }
    // If not enabled
    else v->Out = v->In;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	685a      	ldr	r2, [r3, #4]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	609a      	str	r2, [r3, #8]
}
 8007e52:	bf00      	nop
 8007e54:	bf00      	nop
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr
