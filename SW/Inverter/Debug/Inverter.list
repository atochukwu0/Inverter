
Inverter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064d4  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080066cc  080066cc  000076cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066e4  080066e4  00008014  2**0
                  CONTENTS
  4 .ARM          00000008  080066e4  080066e4  000076e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066ec  080066ec  00008014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066ec  080066ec  000076ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066f0  080066f0  000076f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080066f4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e8  20000014  08006708  00008014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  08006708  000083fc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015116  00000000  00000000  00008042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000368f  00000000  00000000  0001d158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001328  00000000  00000000  000207e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eaf  00000000  00000000  00021b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000297c2  00000000  00000000  000229bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019ea2  00000000  00000000  0004c181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffd0b  00000000  00000000  00066023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00165d2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e68  00000000  00000000  00165d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0016abdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000014 	.word	0x20000014
 8000214:	00000000 	.word	0x00000000
 8000218:	080066b4 	.word	0x080066b4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000018 	.word	0x20000018
 8000234:	080066b4 	.word	0x080066b4

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <inv_FSM>:
    // Initialize inverter control structure
    inv->state = INV_STATE_STARTUP;
    // Add initialization of other inverter-specific variables here
}

void inv_FSM(InverterControl *inv) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
    switch (inv->state) {
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	2b03      	cmp	r3, #3
 8000536:	d81b      	bhi.n	8000570 <inv_FSM+0x48>
 8000538:	a201      	add	r2, pc, #4	@ (adr r2, 8000540 <inv_FSM+0x18>)
 800053a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800053e:	bf00      	nop
 8000540:	08000551 	.word	0x08000551
 8000544:	08000559 	.word	0x08000559
 8000548:	08000561 	.word	0x08000561
 800054c:	08000569 	.word	0x08000569
        case INV_STATE_IDLE:
            idle_handler(inv);
 8000550:	6878      	ldr	r0, [r7, #4]
 8000552:	f000 f813 	bl	800057c <idle_handler>
            break;
 8000556:	e00c      	b.n	8000572 <inv_FSM+0x4a>
        case INV_STATE_STARTUP:
            startup_handler(inv);
 8000558:	6878      	ldr	r0, [r7, #4]
 800055a:	f000 f819 	bl	8000590 <startup_handler>
            break;
 800055e:	e008      	b.n	8000572 <inv_FSM+0x4a>
        case INV_STATE_RUNNING:
            running_handler(inv);
 8000560:	6878      	ldr	r0, [r7, #4]
 8000562:	f000 f81f 	bl	80005a4 <running_handler>
            break;
 8000566:	e004      	b.n	8000572 <inv_FSM+0x4a>
        case INV_STATE_FAULT:
            fault_handler(inv);
 8000568:	6878      	ldr	r0, [r7, #4]
 800056a:	f000 f825 	bl	80005b8 <fault_handler>
            break;
 800056e:	e000      	b.n	8000572 <inv_FSM+0x4a>
        default:
            // Invalid state, handle error
            break;
 8000570:	bf00      	nop
    }
}
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop

0800057c <idle_handler>:

static void idle_handler(InverterControl *inv) {
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
    // Perform actions required in idle state
    // Transition conditions to other states:
    // - Start startup sequence based on input condition
    // - Transition to fault state based on error conditions
}
 8000584:	bf00      	nop
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <startup_handler>:

static void startup_handler(InverterControl *inv) {
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
    // Perform actions required in startup state
    // Transition conditions to other states:
    // - Transition to running state when startup sequence completes successfully
    // - Transition to fault state based on error conditions during startup
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr

080005a4 <running_handler>:

static void running_handler(InverterControl *inv) {
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
    // Perform actions required in running state
    // This is where the main control loop resides
    // Monitor inverter variables, adjust control parameters, etc.
    // Transition conditions to other states:
    // - Transition to fault state based on error conditions during operation
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <fault_handler>:

static void fault_handler(InverterControl *inv) {
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
    // Perform actions required in fault state
    // This could involve shutting down the inverter, logging error messages, etc.
    // Transition conditions to other states:
    // - Retry startup sequence after a delay if fault condition is recoverable
    // - Transition to idle state after fault is resolved
}
 80005c0:	bf00      	nop
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005d2:	463b      	mov	r3, r7
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005de:	4b2f      	ldr	r3, [pc, #188]	@ (800069c <MX_ADC1_Init+0xd0>)
 80005e0:	4a2f      	ldr	r2, [pc, #188]	@ (80006a0 <MX_ADC1_Init+0xd4>)
 80005e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005e4:	4b2d      	ldr	r3, [pc, #180]	@ (800069c <MX_ADC1_Init+0xd0>)
 80005e6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005ec:	4b2b      	ldr	r3, [pc, #172]	@ (800069c <MX_ADC1_Init+0xd0>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80005f2:	4b2a      	ldr	r3, [pc, #168]	@ (800069c <MX_ADC1_Init+0xd0>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005f8:	4b28      	ldr	r3, [pc, #160]	@ (800069c <MX_ADC1_Init+0xd0>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005fe:	4b27      	ldr	r3, [pc, #156]	@ (800069c <MX_ADC1_Init+0xd0>)
 8000600:	2200      	movs	r2, #0
 8000602:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000606:	4b25      	ldr	r3, [pc, #148]	@ (800069c <MX_ADC1_Init+0xd0>)
 8000608:	2200      	movs	r2, #0
 800060a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800060c:	4b23      	ldr	r3, [pc, #140]	@ (800069c <MX_ADC1_Init+0xd0>)
 800060e:	4a25      	ldr	r2, [pc, #148]	@ (80006a4 <MX_ADC1_Init+0xd8>)
 8000610:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000612:	4b22      	ldr	r3, [pc, #136]	@ (800069c <MX_ADC1_Init+0xd0>)
 8000614:	2200      	movs	r2, #0
 8000616:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000618:	4b20      	ldr	r3, [pc, #128]	@ (800069c <MX_ADC1_Init+0xd0>)
 800061a:	2203      	movs	r2, #3
 800061c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800061e:	4b1f      	ldr	r3, [pc, #124]	@ (800069c <MX_ADC1_Init+0xd0>)
 8000620:	2201      	movs	r2, #1
 8000622:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000626:	4b1d      	ldr	r3, [pc, #116]	@ (800069c <MX_ADC1_Init+0xd0>)
 8000628:	2201      	movs	r2, #1
 800062a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800062c:	481b      	ldr	r0, [pc, #108]	@ (800069c <MX_ADC1_Init+0xd0>)
 800062e:	f001 fb5b 	bl	8001ce8 <HAL_ADC_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000638:	f000 fddc 	bl	80011f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800063c:	2300      	movs	r3, #0
 800063e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000640:	2301      	movs	r3, #1
 8000642:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000644:	2300      	movs	r3, #0
 8000646:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000648:	463b      	mov	r3, r7
 800064a:	4619      	mov	r1, r3
 800064c:	4813      	ldr	r0, [pc, #76]	@ (800069c <MX_ADC1_Init+0xd0>)
 800064e:	f001 fca7 	bl	8001fa0 <HAL_ADC_ConfigChannel>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000658:	f000 fdcc 	bl	80011f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800065c:	2301      	movs	r3, #1
 800065e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000660:	2302      	movs	r3, #2
 8000662:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000664:	463b      	mov	r3, r7
 8000666:	4619      	mov	r1, r3
 8000668:	480c      	ldr	r0, [pc, #48]	@ (800069c <MX_ADC1_Init+0xd0>)
 800066a:	f001 fc99 	bl	8001fa0 <HAL_ADC_ConfigChannel>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000674:	f000 fdbe 	bl	80011f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8000678:	2312      	movs	r3, #18
 800067a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800067c:	2303      	movs	r3, #3
 800067e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000680:	463b      	mov	r3, r7
 8000682:	4619      	mov	r1, r3
 8000684:	4805      	ldr	r0, [pc, #20]	@ (800069c <MX_ADC1_Init+0xd0>)
 8000686:	f001 fc8b 	bl	8001fa0 <HAL_ADC_ConfigChannel>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000690:	f000 fdb0 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000694:	bf00      	nop
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000030 	.word	0x20000030
 80006a0:	40012000 	.word	0x40012000
 80006a4:	0f000001 	.word	0x0f000001

080006a8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ae:	463b      	mov	r3, r7
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80006ba:	4b37      	ldr	r3, [pc, #220]	@ (8000798 <MX_ADC2_Init+0xf0>)
 80006bc:	4a37      	ldr	r2, [pc, #220]	@ (800079c <MX_ADC2_Init+0xf4>)
 80006be:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006c0:	4b35      	ldr	r3, [pc, #212]	@ (8000798 <MX_ADC2_Init+0xf0>)
 80006c2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80006c6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006c8:	4b33      	ldr	r3, [pc, #204]	@ (8000798 <MX_ADC2_Init+0xf0>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006ce:	4b32      	ldr	r3, [pc, #200]	@ (8000798 <MX_ADC2_Init+0xf0>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80006d4:	4b30      	ldr	r3, [pc, #192]	@ (8000798 <MX_ADC2_Init+0xf0>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006da:	4b2f      	ldr	r3, [pc, #188]	@ (8000798 <MX_ADC2_Init+0xf0>)
 80006dc:	2200      	movs	r2, #0
 80006de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	@ (8000798 <MX_ADC2_Init+0xf0>)
 80006e4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80006e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 80006ea:	4b2b      	ldr	r3, [pc, #172]	@ (8000798 <MX_ADC2_Init+0xf0>)
 80006ec:	f04f 6210 	mov.w	r2, #150994944	@ 0x9000000
 80006f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f2:	4b29      	ldr	r3, [pc, #164]	@ (8000798 <MX_ADC2_Init+0xf0>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 80006f8:	4b27      	ldr	r3, [pc, #156]	@ (8000798 <MX_ADC2_Init+0xf0>)
 80006fa:	2204      	movs	r2, #4
 80006fc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80006fe:	4b26      	ldr	r3, [pc, #152]	@ (8000798 <MX_ADC2_Init+0xf0>)
 8000700:	2201      	movs	r2, #1
 8000702:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000706:	4b24      	ldr	r3, [pc, #144]	@ (8000798 <MX_ADC2_Init+0xf0>)
 8000708:	2200      	movs	r2, #0
 800070a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800070c:	4822      	ldr	r0, [pc, #136]	@ (8000798 <MX_ADC2_Init+0xf0>)
 800070e:	f001 faeb 	bl	8001ce8 <HAL_ADC_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8000718:	f000 fd6c 	bl	80011f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800071c:	2306      	movs	r3, #6
 800071e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000720:	2301      	movs	r3, #1
 8000722:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000724:	2300      	movs	r3, #0
 8000726:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000728:	463b      	mov	r3, r7
 800072a:	4619      	mov	r1, r3
 800072c:	481a      	ldr	r0, [pc, #104]	@ (8000798 <MX_ADC2_Init+0xf0>)
 800072e:	f001 fc37 	bl	8001fa0 <HAL_ADC_ConfigChannel>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8000738:	f000 fd5c 	bl	80011f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800073c:	2307      	movs	r3, #7
 800073e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000740:	2302      	movs	r3, #2
 8000742:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000744:	463b      	mov	r3, r7
 8000746:	4619      	mov	r1, r3
 8000748:	4813      	ldr	r0, [pc, #76]	@ (8000798 <MX_ADC2_Init+0xf0>)
 800074a:	f001 fc29 	bl	8001fa0 <HAL_ADC_ConfigChannel>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8000754:	f000 fd4e 	bl	80011f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000758:	2308      	movs	r3, #8
 800075a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800075c:	2303      	movs	r3, #3
 800075e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000760:	463b      	mov	r3, r7
 8000762:	4619      	mov	r1, r3
 8000764:	480c      	ldr	r0, [pc, #48]	@ (8000798 <MX_ADC2_Init+0xf0>)
 8000766:	f001 fc1b 	bl	8001fa0 <HAL_ADC_ConfigChannel>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_ADC2_Init+0xcc>
  {
    Error_Handler();
 8000770:	f000 fd40 	bl	80011f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000774:	2309      	movs	r3, #9
 8000776:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000778:	2304      	movs	r3, #4
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	4805      	ldr	r0, [pc, #20]	@ (8000798 <MX_ADC2_Init+0xf0>)
 8000782:	f001 fc0d 	bl	8001fa0 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC2_Init+0xe8>
  {
    Error_Handler();
 800078c:	f000 fd32 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000078 	.word	0x20000078
 800079c:	40012100 	.word	0x40012100

080007a0 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007a6:	463b      	mov	r3, r7
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80007b2:	4b21      	ldr	r3, [pc, #132]	@ (8000838 <MX_ADC3_Init+0x98>)
 80007b4:	4a21      	ldr	r2, [pc, #132]	@ (800083c <MX_ADC3_Init+0x9c>)
 80007b6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000838 <MX_ADC3_Init+0x98>)
 80007ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80007be:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80007c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000838 <MX_ADC3_Init+0x98>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000838 <MX_ADC3_Init+0x98>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80007cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000838 <MX_ADC3_Init+0x98>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007d2:	4b19      	ldr	r3, [pc, #100]	@ (8000838 <MX_ADC3_Init+0x98>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007da:	4b17      	ldr	r3, [pc, #92]	@ (8000838 <MX_ADC3_Init+0x98>)
 80007dc:	2200      	movs	r2, #0
 80007de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007e0:	4b15      	ldr	r3, [pc, #84]	@ (8000838 <MX_ADC3_Init+0x98>)
 80007e2:	4a17      	ldr	r2, [pc, #92]	@ (8000840 <MX_ADC3_Init+0xa0>)
 80007e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007e6:	4b14      	ldr	r3, [pc, #80]	@ (8000838 <MX_ADC3_Init+0x98>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80007ec:	4b12      	ldr	r3, [pc, #72]	@ (8000838 <MX_ADC3_Init+0x98>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80007f2:	4b11      	ldr	r3, [pc, #68]	@ (8000838 <MX_ADC3_Init+0x98>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000838 <MX_ADC3_Init+0x98>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000800:	480d      	ldr	r0, [pc, #52]	@ (8000838 <MX_ADC3_Init+0x98>)
 8000802:	f001 fa71 	bl	8001ce8 <HAL_ADC_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800080c:	f000 fcf2 	bl	80011f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000810:	230a      	movs	r3, #10
 8000812:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000814:	2301      	movs	r3, #1
 8000816:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000818:	2300      	movs	r3, #0
 800081a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800081c:	463b      	mov	r3, r7
 800081e:	4619      	mov	r1, r3
 8000820:	4805      	ldr	r0, [pc, #20]	@ (8000838 <MX_ADC3_Init+0x98>)
 8000822:	f001 fbbd 	bl	8001fa0 <HAL_ADC_ConfigChannel>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800082c:	f000 fce2 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	200000c0 	.word	0x200000c0
 800083c:	40012200 	.word	0x40012200
 8000840:	0f000001 	.word	0x0f000001

08000844 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08e      	sub	sp, #56	@ 0x38
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a94      	ldr	r2, [pc, #592]	@ (8000ab4 <HAL_ADC_MspInit+0x270>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d154      	bne.n	8000910 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000866:	4b94      	ldr	r3, [pc, #592]	@ (8000ab8 <HAL_ADC_MspInit+0x274>)
 8000868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800086a:	4a93      	ldr	r2, [pc, #588]	@ (8000ab8 <HAL_ADC_MspInit+0x274>)
 800086c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000870:	6453      	str	r3, [r2, #68]	@ 0x44
 8000872:	4b91      	ldr	r3, [pc, #580]	@ (8000ab8 <HAL_ADC_MspInit+0x274>)
 8000874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800087a:	623b      	str	r3, [r7, #32]
 800087c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	4b8e      	ldr	r3, [pc, #568]	@ (8000ab8 <HAL_ADC_MspInit+0x274>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a8d      	ldr	r2, [pc, #564]	@ (8000ab8 <HAL_ADC_MspInit+0x274>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b8b      	ldr	r3, [pc, #556]	@ (8000ab8 <HAL_ADC_MspInit+0x274>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	61fb      	str	r3, [r7, #28]
 8000894:	69fb      	ldr	r3, [r7, #28]
    PA0/WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ia_L_Pin|ib_L_Pin|ic_L_Pin|VDC_L_Pin;
 8000896:	230f      	movs	r3, #15
 8000898:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800089a:	2303      	movs	r3, #3
 800089c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008a6:	4619      	mov	r1, r3
 80008a8:	4884      	ldr	r0, [pc, #528]	@ (8000abc <HAL_ADC_MspInit+0x278>)
 80008aa:	f002 fee7 	bl	800367c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80008ae:	4b84      	ldr	r3, [pc, #528]	@ (8000ac0 <HAL_ADC_MspInit+0x27c>)
 80008b0:	4a84      	ldr	r2, [pc, #528]	@ (8000ac4 <HAL_ADC_MspInit+0x280>)
 80008b2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80008b4:	4b82      	ldr	r3, [pc, #520]	@ (8000ac0 <HAL_ADC_MspInit+0x27c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008ba:	4b81      	ldr	r3, [pc, #516]	@ (8000ac0 <HAL_ADC_MspInit+0x27c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008c0:	4b7f      	ldr	r3, [pc, #508]	@ (8000ac0 <HAL_ADC_MspInit+0x27c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008c6:	4b7e      	ldr	r3, [pc, #504]	@ (8000ac0 <HAL_ADC_MspInit+0x27c>)
 80008c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008cc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008ce:	4b7c      	ldr	r3, [pc, #496]	@ (8000ac0 <HAL_ADC_MspInit+0x27c>)
 80008d0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80008d4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008d6:	4b7a      	ldr	r3, [pc, #488]	@ (8000ac0 <HAL_ADC_MspInit+0x27c>)
 80008d8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80008de:	4b78      	ldr	r3, [pc, #480]	@ (8000ac0 <HAL_ADC_MspInit+0x27c>)
 80008e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008e4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80008e6:	4b76      	ldr	r3, [pc, #472]	@ (8000ac0 <HAL_ADC_MspInit+0x27c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008ec:	4b74      	ldr	r3, [pc, #464]	@ (8000ac0 <HAL_ADC_MspInit+0x27c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008f2:	4873      	ldr	r0, [pc, #460]	@ (8000ac0 <HAL_ADC_MspInit+0x27c>)
 80008f4:	f002 fb4a 	bl	8002f8c <HAL_DMA_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 80008fe:	f000 fc79 	bl	80011f4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4a6e      	ldr	r2, [pc, #440]	@ (8000ac0 <HAL_ADC_MspInit+0x27c>)
 8000906:	639a      	str	r2, [r3, #56]	@ 0x38
 8000908:	4a6d      	ldr	r2, [pc, #436]	@ (8000ac0 <HAL_ADC_MspInit+0x27c>)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800090e:	e0cc      	b.n	8000aaa <HAL_ADC_MspInit+0x266>
  else if(adcHandle->Instance==ADC2)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a6c      	ldr	r2, [pc, #432]	@ (8000ac8 <HAL_ADC_MspInit+0x284>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d16e      	bne.n	80009f8 <HAL_ADC_MspInit+0x1b4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800091a:	4b67      	ldr	r3, [pc, #412]	@ (8000ab8 <HAL_ADC_MspInit+0x274>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800091e:	4a66      	ldr	r2, [pc, #408]	@ (8000ab8 <HAL_ADC_MspInit+0x274>)
 8000920:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000924:	6453      	str	r3, [r2, #68]	@ 0x44
 8000926:	4b64      	ldr	r3, [pc, #400]	@ (8000ab8 <HAL_ADC_MspInit+0x274>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800092a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800092e:	61bb      	str	r3, [r7, #24]
 8000930:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	4b61      	ldr	r3, [pc, #388]	@ (8000ab8 <HAL_ADC_MspInit+0x274>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a60      	ldr	r2, [pc, #384]	@ (8000ab8 <HAL_ADC_MspInit+0x274>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b5e      	ldr	r3, [pc, #376]	@ (8000ab8 <HAL_ADC_MspInit+0x274>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	617b      	str	r3, [r7, #20]
 8000948:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	4b5b      	ldr	r3, [pc, #364]	@ (8000ab8 <HAL_ADC_MspInit+0x274>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	4a5a      	ldr	r2, [pc, #360]	@ (8000ab8 <HAL_ADC_MspInit+0x274>)
 8000950:	f043 0302 	orr.w	r3, r3, #2
 8000954:	6313      	str	r3, [r2, #48]	@ 0x30
 8000956:	4b58      	ldr	r3, [pc, #352]	@ (8000ab8 <HAL_ADC_MspInit+0x274>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	f003 0302 	and.w	r3, r3, #2
 800095e:	613b      	str	r3, [r7, #16]
 8000960:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ia_R_Pin|ib_R_Pin;
 8000962:	23c0      	movs	r3, #192	@ 0xc0
 8000964:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000966:	2303      	movs	r3, #3
 8000968:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000972:	4619      	mov	r1, r3
 8000974:	4851      	ldr	r0, [pc, #324]	@ (8000abc <HAL_ADC_MspInit+0x278>)
 8000976:	f002 fe81 	bl	800367c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ic_R_Pin|VDC_R_Pin;
 800097a:	2303      	movs	r3, #3
 800097c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800097e:	2303      	movs	r3, #3
 8000980:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000986:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800098a:	4619      	mov	r1, r3
 800098c:	484f      	ldr	r0, [pc, #316]	@ (8000acc <HAL_ADC_MspInit+0x288>)
 800098e:	f002 fe75 	bl	800367c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8000992:	4b4f      	ldr	r3, [pc, #316]	@ (8000ad0 <HAL_ADC_MspInit+0x28c>)
 8000994:	4a4f      	ldr	r2, [pc, #316]	@ (8000ad4 <HAL_ADC_MspInit+0x290>)
 8000996:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8000998:	4b4d      	ldr	r3, [pc, #308]	@ (8000ad0 <HAL_ADC_MspInit+0x28c>)
 800099a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800099e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009a0:	4b4b      	ldr	r3, [pc, #300]	@ (8000ad0 <HAL_ADC_MspInit+0x28c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80009a6:	4b4a      	ldr	r3, [pc, #296]	@ (8000ad0 <HAL_ADC_MspInit+0x28c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80009ac:	4b48      	ldr	r3, [pc, #288]	@ (8000ad0 <HAL_ADC_MspInit+0x28c>)
 80009ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009b2:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009b4:	4b46      	ldr	r3, [pc, #280]	@ (8000ad0 <HAL_ADC_MspInit+0x28c>)
 80009b6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80009ba:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009bc:	4b44      	ldr	r3, [pc, #272]	@ (8000ad0 <HAL_ADC_MspInit+0x28c>)
 80009be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009c2:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80009c4:	4b42      	ldr	r3, [pc, #264]	@ (8000ad0 <HAL_ADC_MspInit+0x28c>)
 80009c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009ca:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80009cc:	4b40      	ldr	r3, [pc, #256]	@ (8000ad0 <HAL_ADC_MspInit+0x28c>)
 80009ce:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80009d2:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009d4:	4b3e      	ldr	r3, [pc, #248]	@ (8000ad0 <HAL_ADC_MspInit+0x28c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80009da:	483d      	ldr	r0, [pc, #244]	@ (8000ad0 <HAL_ADC_MspInit+0x28c>)
 80009dc:	f002 fad6 	bl	8002f8c <HAL_DMA_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <HAL_ADC_MspInit+0x1a6>
      Error_Handler();
 80009e6:	f000 fc05 	bl	80011f4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a38      	ldr	r2, [pc, #224]	@ (8000ad0 <HAL_ADC_MspInit+0x28c>)
 80009ee:	639a      	str	r2, [r3, #56]	@ 0x38
 80009f0:	4a37      	ldr	r2, [pc, #220]	@ (8000ad0 <HAL_ADC_MspInit+0x28c>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80009f6:	e058      	b.n	8000aaa <HAL_ADC_MspInit+0x266>
  else if(adcHandle->Instance==ADC3)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a36      	ldr	r2, [pc, #216]	@ (8000ad8 <HAL_ADC_MspInit+0x294>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d153      	bne.n	8000aaa <HAL_ADC_MspInit+0x266>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a02:	4b2d      	ldr	r3, [pc, #180]	@ (8000ab8 <HAL_ADC_MspInit+0x274>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a06:	4a2c      	ldr	r2, [pc, #176]	@ (8000ab8 <HAL_ADC_MspInit+0x274>)
 8000a08:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ab8 <HAL_ADC_MspInit+0x274>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1a:	4b27      	ldr	r3, [pc, #156]	@ (8000ab8 <HAL_ADC_MspInit+0x274>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	4a26      	ldr	r2, [pc, #152]	@ (8000ab8 <HAL_ADC_MspInit+0x274>)
 8000a20:	f043 0304 	orr.w	r3, r3, #4
 8000a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a26:	4b24      	ldr	r3, [pc, #144]	@ (8000ab8 <HAL_ADC_MspInit+0x274>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	f003 0304 	and.w	r3, r3, #4
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Tinv_L_Pin|Tinv_R_Pin|Tmot_L_Pin|Tmot_R_Pin;
 8000a32:	230f      	movs	r3, #15
 8000a34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a36:	2303      	movs	r3, #3
 8000a38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a42:	4619      	mov	r1, r3
 8000a44:	4825      	ldr	r0, [pc, #148]	@ (8000adc <HAL_ADC_MspInit+0x298>)
 8000a46:	f002 fe19 	bl	800367c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8000a4a:	4b25      	ldr	r3, [pc, #148]	@ (8000ae0 <HAL_ADC_MspInit+0x29c>)
 8000a4c:	4a25      	ldr	r2, [pc, #148]	@ (8000ae4 <HAL_ADC_MspInit+0x2a0>)
 8000a4e:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000a50:	4b23      	ldr	r3, [pc, #140]	@ (8000ae0 <HAL_ADC_MspInit+0x29c>)
 8000a52:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000a56:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a58:	4b21      	ldr	r3, [pc, #132]	@ (8000ae0 <HAL_ADC_MspInit+0x29c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a5e:	4b20      	ldr	r3, [pc, #128]	@ (8000ae0 <HAL_ADC_MspInit+0x29c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000a64:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae0 <HAL_ADC_MspInit+0x29c>)
 8000a66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a6a:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a6c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae0 <HAL_ADC_MspInit+0x29c>)
 8000a6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a72:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a74:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae0 <HAL_ADC_MspInit+0x29c>)
 8000a76:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a7a:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8000a7c:	4b18      	ldr	r3, [pc, #96]	@ (8000ae0 <HAL_ADC_MspInit+0x29c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000a82:	4b17      	ldr	r3, [pc, #92]	@ (8000ae0 <HAL_ADC_MspInit+0x29c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a88:	4b15      	ldr	r3, [pc, #84]	@ (8000ae0 <HAL_ADC_MspInit+0x29c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000a8e:	4814      	ldr	r0, [pc, #80]	@ (8000ae0 <HAL_ADC_MspInit+0x29c>)
 8000a90:	f002 fa7c 	bl	8002f8c <HAL_DMA_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <HAL_ADC_MspInit+0x25a>
      Error_Handler();
 8000a9a:	f000 fbab 	bl	80011f4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4a0f      	ldr	r2, [pc, #60]	@ (8000ae0 <HAL_ADC_MspInit+0x29c>)
 8000aa2:	639a      	str	r2, [r3, #56]	@ 0x38
 8000aa4:	4a0e      	ldr	r2, [pc, #56]	@ (8000ae0 <HAL_ADC_MspInit+0x29c>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000aaa:	bf00      	nop
 8000aac:	3738      	adds	r7, #56	@ 0x38
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40012000 	.word	0x40012000
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020000 	.word	0x40020000
 8000ac0:	20000108 	.word	0x20000108
 8000ac4:	40026410 	.word	0x40026410
 8000ac8:	40012100 	.word	0x40012100
 8000acc:	40020400 	.word	0x40020400
 8000ad0:	20000168 	.word	0x20000168
 8000ad4:	40026440 	.word	0x40026440
 8000ad8:	40012200 	.word	0x40012200
 8000adc:	40020800 	.word	0x40020800
 8000ae0:	200001c8 	.word	0x200001c8
 8000ae4:	40026428 	.word	0x40026428

08000ae8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000aec:	4b17      	ldr	r3, [pc, #92]	@ (8000b4c <MX_CAN1_Init+0x64>)
 8000aee:	4a18      	ldr	r2, [pc, #96]	@ (8000b50 <MX_CAN1_Init+0x68>)
 8000af0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 8000af2:	4b16      	ldr	r3, [pc, #88]	@ (8000b4c <MX_CAN1_Init+0x64>)
 8000af4:	220c      	movs	r2, #12
 8000af6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000af8:	4b14      	ldr	r3, [pc, #80]	@ (8000b4c <MX_CAN1_Init+0x64>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000afe:	4b13      	ldr	r3, [pc, #76]	@ (8000b4c <MX_CAN1_Init+0x64>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 8000b04:	4b11      	ldr	r3, [pc, #68]	@ (8000b4c <MX_CAN1_Init+0x64>)
 8000b06:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000b0a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b4c <MX_CAN1_Init+0x64>)
 8000b0e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000b12:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000b14:	4b0d      	ldr	r3, [pc, #52]	@ (8000b4c <MX_CAN1_Init+0x64>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <MX_CAN1_Init+0x64>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000b20:	4b0a      	ldr	r3, [pc, #40]	@ (8000b4c <MX_CAN1_Init+0x64>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000b26:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <MX_CAN1_Init+0x64>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000b2c:	4b07      	ldr	r3, [pc, #28]	@ (8000b4c <MX_CAN1_Init+0x64>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000b32:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <MX_CAN1_Init+0x64>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000b38:	4804      	ldr	r0, [pc, #16]	@ (8000b4c <MX_CAN1_Init+0x64>)
 8000b3a:	f001 fd03 	bl	8002544 <HAL_CAN_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000b44:	f000 fb56 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000228 	.word	0x20000228
 8000b50:	40006400 	.word	0x40006400

08000b54 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	@ 0x28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a1f      	ldr	r2, [pc, #124]	@ (8000bf0 <HAL_CAN_MspInit+0x9c>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d137      	bne.n	8000be6 <HAL_CAN_MspInit+0x92>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b76:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf4 <HAL_CAN_MspInit+0xa0>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7a:	4a1e      	ldr	r2, [pc, #120]	@ (8000bf4 <HAL_CAN_MspInit+0xa0>)
 8000b7c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b82:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf4 <HAL_CAN_MspInit+0xa0>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8e:	4b19      	ldr	r3, [pc, #100]	@ (8000bf4 <HAL_CAN_MspInit+0xa0>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b92:	4a18      	ldr	r2, [pc, #96]	@ (8000bf4 <HAL_CAN_MspInit+0xa0>)
 8000b94:	f043 0308 	orr.w	r3, r3, #8
 8000b98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9a:	4b16      	ldr	r3, [pc, #88]	@ (8000bf4 <HAL_CAN_MspInit+0xa0>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	f003 0308 	and.w	r3, r3, #8
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	2302      	movs	r3, #2
 8000bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000bb6:	2309      	movs	r3, #9
 8000bb8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	480d      	ldr	r0, [pc, #52]	@ (8000bf8 <HAL_CAN_MspInit+0xa4>)
 8000bc2:	f002 fd5b 	bl	800367c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2100      	movs	r1, #0
 8000bca:	2014      	movs	r0, #20
 8000bcc:	f002 f8c9 	bl	8002d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000bd0:	2014      	movs	r0, #20
 8000bd2:	f002 f8e2 	bl	8002d9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2100      	movs	r1, #0
 8000bda:	2015      	movs	r0, #21
 8000bdc:	f002 f8c1 	bl	8002d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000be0:	2015      	movs	r0, #21
 8000be2:	f002 f8da 	bl	8002d9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000be6:	bf00      	nop
 8000be8:	3728      	adds	r7, #40	@ 0x28
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40006400 	.word	0x40006400
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40020c00 	.word	0x40020c00

08000bfc <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000c02:	463b      	mov	r3, r7
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c48 <MX_DAC_Init+0x4c>)
 8000c0c:	4a0f      	ldr	r2, [pc, #60]	@ (8000c4c <MX_DAC_Init+0x50>)
 8000c0e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000c10:	480d      	ldr	r0, [pc, #52]	@ (8000c48 <MX_DAC_Init+0x4c>)
 8000c12:	f002 f8dc 	bl	8002dce <HAL_DAC_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000c1c:	f000 faea 	bl	80011f4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000c20:	2300      	movs	r3, #0
 8000c22:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c28:	463b      	mov	r3, r7
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4806      	ldr	r0, [pc, #24]	@ (8000c48 <MX_DAC_Init+0x4c>)
 8000c30:	f002 f953 	bl	8002eda <HAL_DAC_ConfigChannel>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000c3a:	f000 fadb 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000250 	.word	0x20000250
 8000c4c:	40007400 	.word	0x40007400

08000c50 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	@ 0x28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a19      	ldr	r2, [pc, #100]	@ (8000cd4 <HAL_DAC_MspInit+0x84>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d12b      	bne.n	8000cca <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000c72:	4b19      	ldr	r3, [pc, #100]	@ (8000cd8 <HAL_DAC_MspInit+0x88>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c76:	4a18      	ldr	r2, [pc, #96]	@ (8000cd8 <HAL_DAC_MspInit+0x88>)
 8000c78:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000c7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c7e:	4b16      	ldr	r3, [pc, #88]	@ (8000cd8 <HAL_DAC_MspInit+0x88>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c82:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	4b13      	ldr	r3, [pc, #76]	@ (8000cd8 <HAL_DAC_MspInit+0x88>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	4a12      	ldr	r2, [pc, #72]	@ (8000cd8 <HAL_DAC_MspInit+0x88>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c96:	4b10      	ldr	r3, [pc, #64]	@ (8000cd8 <HAL_DAC_MspInit+0x88>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = DAC_Pin;
 8000ca2:	2310      	movs	r3, #16
 8000ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4809      	ldr	r0, [pc, #36]	@ (8000cdc <HAL_DAC_MspInit+0x8c>)
 8000cb6:	f002 fce1 	bl	800367c <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	2036      	movs	r0, #54	@ 0x36
 8000cc0:	f002 f84f 	bl	8002d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	@ 0x36
 8000cc6:	f002 f868 	bl	8002d9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	@ 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020000 	.word	0x40020000

08000ce0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ce6:	4b14      	ldr	r3, [pc, #80]	@ (8000d38 <MX_DMA_Init+0x58>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	4a13      	ldr	r2, [pc, #76]	@ (8000d38 <MX_DMA_Init+0x58>)
 8000cec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf2:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <MX_DMA_Init+0x58>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2100      	movs	r1, #0
 8000d02:	2038      	movs	r0, #56	@ 0x38
 8000d04:	f002 f82d 	bl	8002d62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d08:	2038      	movs	r0, #56	@ 0x38
 8000d0a:	f002 f846 	bl	8002d9a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2100      	movs	r1, #0
 8000d12:	2039      	movs	r0, #57	@ 0x39
 8000d14:	f002 f825 	bl	8002d62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000d18:	2039      	movs	r0, #57	@ 0x39
 8000d1a:	f002 f83e 	bl	8002d9a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2100      	movs	r1, #0
 8000d22:	203a      	movs	r0, #58	@ 0x3a
 8000d24:	f002 f81d 	bl	8002d62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000d28:	203a      	movs	r0, #58	@ 0x3a
 8000d2a:	f002 f836 	bl	8002d9a <HAL_NVIC_EnableIRQ>

}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40023800 	.word	0x40023800

08000d3c <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08c      	sub	sp, #48	@ 0x30
 8000d40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d42:	f107 031c 	add.w	r3, r7, #28
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d52:	4b68      	ldr	r3, [pc, #416]	@ (8000ef4 <MX_GPIO_Init+0x1b8>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d56:	4a67      	ldr	r2, [pc, #412]	@ (8000ef4 <MX_GPIO_Init+0x1b8>)
 8000d58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5e:	4b65      	ldr	r3, [pc, #404]	@ (8000ef4 <MX_GPIO_Init+0x1b8>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d66:	61bb      	str	r3, [r7, #24]
 8000d68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6a:	4b62      	ldr	r3, [pc, #392]	@ (8000ef4 <MX_GPIO_Init+0x1b8>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	4a61      	ldr	r2, [pc, #388]	@ (8000ef4 <MX_GPIO_Init+0x1b8>)
 8000d70:	f043 0304 	orr.w	r3, r3, #4
 8000d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d76:	4b5f      	ldr	r3, [pc, #380]	@ (8000ef4 <MX_GPIO_Init+0x1b8>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	f003 0304 	and.w	r3, r3, #4
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d82:	4b5c      	ldr	r3, [pc, #368]	@ (8000ef4 <MX_GPIO_Init+0x1b8>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	4a5b      	ldr	r2, [pc, #364]	@ (8000ef4 <MX_GPIO_Init+0x1b8>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8e:	4b59      	ldr	r3, [pc, #356]	@ (8000ef4 <MX_GPIO_Init+0x1b8>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9a:	4b56      	ldr	r3, [pc, #344]	@ (8000ef4 <MX_GPIO_Init+0x1b8>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	4a55      	ldr	r2, [pc, #340]	@ (8000ef4 <MX_GPIO_Init+0x1b8>)
 8000da0:	f043 0302 	orr.w	r3, r3, #2
 8000da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da6:	4b53      	ldr	r3, [pc, #332]	@ (8000ef4 <MX_GPIO_Init+0x1b8>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	f003 0302 	and.w	r3, r3, #2
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000db2:	4b50      	ldr	r3, [pc, #320]	@ (8000ef4 <MX_GPIO_Init+0x1b8>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	4a4f      	ldr	r2, [pc, #316]	@ (8000ef4 <MX_GPIO_Init+0x1b8>)
 8000db8:	f043 0310 	orr.w	r3, r3, #16
 8000dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dbe:	4b4d      	ldr	r3, [pc, #308]	@ (8000ef4 <MX_GPIO_Init+0x1b8>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	f003 0310 	and.w	r3, r3, #16
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dca:	4b4a      	ldr	r3, [pc, #296]	@ (8000ef4 <MX_GPIO_Init+0x1b8>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dce:	4a49      	ldr	r2, [pc, #292]	@ (8000ef4 <MX_GPIO_Init+0x1b8>)
 8000dd0:	f043 0308 	orr.w	r3, r3, #8
 8000dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd6:	4b47      	ldr	r3, [pc, #284]	@ (8000ef4 <MX_GPIO_Init+0x1b8>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	f003 0308 	and.w	r3, r3, #8
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_R_GPIO_Port, ENABLE_R_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2104      	movs	r1, #4
 8000de6:	4844      	ldr	r0, [pc, #272]	@ (8000ef8 <MX_GPIO_Init+0x1bc>)
 8000de8:	f002 fe0c 	bl	8003a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_LEFT_Pin|LED_RIGHT_Pin|LED_ERR_Pin, GPIO_PIN_RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2170      	movs	r1, #112	@ 0x70
 8000df0:	4842      	ldr	r0, [pc, #264]	@ (8000efc <MX_GPIO_Init+0x1c0>)
 8000df2:	f002 fe07 	bl	8003a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SC_det_Pin;
 8000df6:	2310      	movs	r3, #16
 8000df8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SC_det_GPIO_Port, &GPIO_InitStruct);
 8000e02:	f107 031c 	add.w	r3, r7, #28
 8000e06:	4619      	mov	r1, r3
 8000e08:	483d      	ldr	r0, [pc, #244]	@ (8000f00 <MX_GPIO_Init+0x1c4>)
 8000e0a:	f002 fc37 	bl	800367c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_R_Pin;
 8000e0e:	2304      	movs	r3, #4
 8000e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ENABLE_R_GPIO_Port, &GPIO_InitStruct);
 8000e1e:	f107 031c 	add.w	r3, r7, #28
 8000e22:	4619      	mov	r1, r3
 8000e24:	4834      	ldr	r0, [pc, #208]	@ (8000ef8 <MX_GPIO_Init+0x1bc>)
 8000e26:	f002 fc29 	bl	800367c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ENABLE_L_Pin|WRN_L_Pin|WRN_R_Pin;
 8000e2a:	f24c 0380 	movw	r3, #49280	@ 0xc080
 8000e2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e30:	2300      	movs	r3, #0
 8000e32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e38:	f107 031c 	add.w	r3, r7, #28
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4831      	ldr	r0, [pc, #196]	@ (8000f04 <MX_GPIO_Init+0x1c8>)
 8000e40:	f002 fc1c 	bl	800367c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIP_R_Pin;
 8000e44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e4a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TRIP_R_GPIO_Port, &GPIO_InitStruct);
 8000e54:	f107 031c 	add.w	r3, r7, #28
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4829      	ldr	r0, [pc, #164]	@ (8000f00 <MX_GPIO_Init+0x1c4>)
 8000e5c:	f002 fc0e 	bl	800367c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIP_L_Pin;
 8000e60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e66:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TRIP_L_GPIO_Port, &GPIO_InitStruct);
 8000e70:	f107 031c 	add.w	r3, r7, #28
 8000e74:	4619      	mov	r1, r3
 8000e76:	4824      	ldr	r0, [pc, #144]	@ (8000f08 <MX_GPIO_Init+0x1cc>)
 8000e78:	f002 fc00 	bl	800367c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e82:	2300      	movs	r3, #0
 8000e84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8a:	f107 031c 	add.w	r3, r7, #28
 8000e8e:	4619      	mov	r1, r3
 8000e90:	481d      	ldr	r0, [pc, #116]	@ (8000f08 <MX_GPIO_Init+0x1cc>)
 8000e92:	f002 fbf3 	bl	800367c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000e96:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000e9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ea8:	230a      	movs	r3, #10
 8000eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eac:	f107 031c 	add.w	r3, r7, #28
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4815      	ldr	r0, [pc, #84]	@ (8000f08 <MX_GPIO_Init+0x1cc>)
 8000eb4:	f002 fbe2 	bl	800367c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIR_Pin;
 8000eb8:	2308      	movs	r3, #8
 8000eba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 8000ec4:	f107 031c 	add.w	r3, r7, #28
 8000ec8:	4619      	mov	r1, r3
 8000eca:	480c      	ldr	r0, [pc, #48]	@ (8000efc <MX_GPIO_Init+0x1c0>)
 8000ecc:	f002 fbd6 	bl	800367c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_LEFT_Pin|LED_RIGHT_Pin|LED_ERR_Pin;
 8000ed0:	2370      	movs	r3, #112	@ 0x70
 8000ed2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	2300      	movs	r3, #0
 8000ede:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ee0:	f107 031c 	add.w	r3, r7, #28
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4805      	ldr	r0, [pc, #20]	@ (8000efc <MX_GPIO_Init+0x1c0>)
 8000ee8:	f002 fbc8 	bl	800367c <HAL_GPIO_Init>

}
 8000eec:	bf00      	nop
 8000eee:	3730      	adds	r7, #48	@ 0x30
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40020400 	.word	0x40020400
 8000efc:	40020c00 	.word	0x40020c00
 8000f00:	40020800 	.word	0x40020800
 8000f04:	40021000 	.word	0x40021000
 8000f08:	40020000 	.word	0x40020000

08000f0c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f10:	4b1b      	ldr	r3, [pc, #108]	@ (8000f80 <MX_I2C1_Init+0x74>)
 8000f12:	4a1c      	ldr	r2, [pc, #112]	@ (8000f84 <MX_I2C1_Init+0x78>)
 8000f14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000f16:	4b1a      	ldr	r3, [pc, #104]	@ (8000f80 <MX_I2C1_Init+0x74>)
 8000f18:	4a1b      	ldr	r2, [pc, #108]	@ (8000f88 <MX_I2C1_Init+0x7c>)
 8000f1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f1c:	4b18      	ldr	r3, [pc, #96]	@ (8000f80 <MX_I2C1_Init+0x74>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f22:	4b17      	ldr	r3, [pc, #92]	@ (8000f80 <MX_I2C1_Init+0x74>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f28:	4b15      	ldr	r3, [pc, #84]	@ (8000f80 <MX_I2C1_Init+0x74>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f2e:	4b14      	ldr	r3, [pc, #80]	@ (8000f80 <MX_I2C1_Init+0x74>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f34:	4b12      	ldr	r3, [pc, #72]	@ (8000f80 <MX_I2C1_Init+0x74>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f3a:	4b11      	ldr	r3, [pc, #68]	@ (8000f80 <MX_I2C1_Init+0x74>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f40:	4b0f      	ldr	r3, [pc, #60]	@ (8000f80 <MX_I2C1_Init+0x74>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f46:	480e      	ldr	r0, [pc, #56]	@ (8000f80 <MX_I2C1_Init+0x74>)
 8000f48:	f002 fd76 	bl	8003a38 <HAL_I2C_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f52:	f000 f94f 	bl	80011f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f56:	2100      	movs	r1, #0
 8000f58:	4809      	ldr	r0, [pc, #36]	@ (8000f80 <MX_I2C1_Init+0x74>)
 8000f5a:	f002 fdfd 	bl	8003b58 <HAL_I2CEx_ConfigAnalogFilter>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f64:	f000 f946 	bl	80011f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4805      	ldr	r0, [pc, #20]	@ (8000f80 <MX_I2C1_Init+0x74>)
 8000f6c:	f002 fe3f 	bl	8003bee <HAL_I2CEx_ConfigDigitalFilter>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f76:	f000 f93d 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000264 	.word	0x20000264
 8000f84:	40005400 	.word	0x40005400
 8000f88:	20404768 	.word	0x20404768

08000f8c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b0ae      	sub	sp, #184	@ 0xb8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	2290      	movs	r2, #144	@ 0x90
 8000faa:	2100      	movs	r1, #0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f005 fb55 	bl	800665c <memset>
  if(i2cHandle->Instance==I2C1)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a21      	ldr	r2, [pc, #132]	@ (800103c <HAL_I2C_MspInit+0xb0>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d13b      	bne.n	8001034 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fbc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000fc0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f003 fb0c 	bl	80045e8 <HAL_RCCEx_PeriphCLKConfig>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000fd6:	f000 f90d 	bl	80011f4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fda:	4b19      	ldr	r3, [pc, #100]	@ (8001040 <HAL_I2C_MspInit+0xb4>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	4a18      	ldr	r2, [pc, #96]	@ (8001040 <HAL_I2C_MspInit+0xb4>)
 8000fe0:	f043 0302 	orr.w	r3, r3, #2
 8000fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe6:	4b16      	ldr	r3, [pc, #88]	@ (8001040 <HAL_I2C_MspInit+0xb4>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ff2:	23c0      	movs	r3, #192	@ 0xc0
 8000ff4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ff8:	2312      	movs	r3, #18
 8000ffa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001004:	2303      	movs	r3, #3
 8001006:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800100a:	2304      	movs	r3, #4
 800100c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001010:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001014:	4619      	mov	r1, r3
 8001016:	480b      	ldr	r0, [pc, #44]	@ (8001044 <HAL_I2C_MspInit+0xb8>)
 8001018:	f002 fb30 	bl	800367c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800101c:	4b08      	ldr	r3, [pc, #32]	@ (8001040 <HAL_I2C_MspInit+0xb4>)
 800101e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001020:	4a07      	ldr	r2, [pc, #28]	@ (8001040 <HAL_I2C_MspInit+0xb4>)
 8001022:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001026:	6413      	str	r3, [r2, #64]	@ 0x40
 8001028:	4b05      	ldr	r3, [pc, #20]	@ (8001040 <HAL_I2C_MspInit+0xb4>)
 800102a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001034:	bf00      	nop
 8001036:	37b8      	adds	r7, #184	@ 0xb8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40005400 	.word	0x40005400
 8001040:	40023800 	.word	0x40023800
 8001044:	40020400 	.word	0x40020400

08001048 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800104c:	f000 fdcb 	bl	8001be6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001050:	f000 f862 	bl	8001118 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001054:	f7ff fe72 	bl	8000d3c <MX_GPIO_Init>
  MX_DMA_Init();
 8001058:	f7ff fe42 	bl	8000ce0 <MX_DMA_Init>
  MX_ADC1_Init();
 800105c:	f7ff fab6 	bl	80005cc <MX_ADC1_Init>
  MX_CAN1_Init();
 8001060:	f7ff fd42 	bl	8000ae8 <MX_CAN1_Init>
  MX_USB_OTG_FS_USB_Init();
 8001064:	f000 fd8e 	bl	8001b84 <MX_USB_OTG_FS_USB_Init>
  MX_ADC2_Init();
 8001068:	f7ff fb1e 	bl	80006a8 <MX_ADC2_Init>
  MX_ADC3_Init();
 800106c:	f7ff fb98 	bl	80007a0 <MX_ADC3_Init>
  MX_DAC_Init();
 8001070:	f7ff fdc4 	bl	8000bfc <MX_DAC_Init>
  MX_I2C1_Init();
 8001074:	f7ff ff4a 	bl	8000f0c <MX_I2C1_Init>
  MX_TIM1_Init();
 8001078:	f000 f992 	bl	80013a0 <MX_TIM1_Init>
  MX_TIM8_Init();
 800107c:	f000 fb32 	bl	80016e4 <MX_TIM8_Init>
  MX_TIM2_Init();
 8001080:	f000 fa5c 	bl	800153c <MX_TIM2_Init>
  MX_TIM4_Init();
 8001084:	f000 fac4 	bl	8001610 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 8001088:	481c      	ldr	r0, [pc, #112]	@ (80010fc <main+0xb4>)
 800108a:	f003 ff2d 	bl	8004ee8 <HAL_TIM_Base_Start>
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_BREAK);
 800108e:	4b1b      	ldr	r3, [pc, #108]	@ (80010fc <main+0xb4>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	68da      	ldr	r2, [r3, #12]
 8001094:	4b19      	ldr	r3, [pc, #100]	@ (80010fc <main+0xb4>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800109c:	60da      	str	r2, [r3, #12]


  HAL_ADC_Start_DMA(&hadc2, (uint32_t *) ADC2_raw,4);
 800109e:	2204      	movs	r2, #4
 80010a0:	4917      	ldr	r1, [pc, #92]	@ (8001100 <main+0xb8>)
 80010a2:	4818      	ldr	r0, [pc, #96]	@ (8001104 <main+0xbc>)
 80010a4:	f000 fe64 	bl	8001d70 <HAL_ADC_Start_DMA>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

      // Run FSM for left system
	  inv_FSM(&invLeft);
 80010a8:	4817      	ldr	r0, [pc, #92]	@ (8001108 <main+0xc0>)
 80010aa:	f7ff fa3d 	bl	8000528 <inv_FSM>

      // Run FSM for right system
	  inv_FSM(&invRight);
 80010ae:	4817      	ldr	r0, [pc, #92]	@ (800110c <main+0xc4>)
 80010b0:	f7ff fa3a 	bl	8000528 <inv_FSM>

	  // Check the status of SC_det_Pin
	  if (HAL_GPIO_ReadPin(SC_det_GPIO_Port, SC_det_Pin) == GPIO_PIN_SET) {
 80010b4:	2110      	movs	r1, #16
 80010b6:	4816      	ldr	r0, [pc, #88]	@ (8001110 <main+0xc8>)
 80010b8:	f002 fc8c 	bl	80039d4 <HAL_GPIO_ReadPin>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d105      	bne.n	80010ce <main+0x86>
		  // Turn on the left LED
		  HAL_GPIO_WritePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin, GPIO_PIN_SET);
 80010c2:	2201      	movs	r2, #1
 80010c4:	2110      	movs	r1, #16
 80010c6:	4813      	ldr	r0, [pc, #76]	@ (8001114 <main+0xcc>)
 80010c8:	f002 fc9c 	bl	8003a04 <HAL_GPIO_WritePin>
 80010cc:	e004      	b.n	80010d8 <main+0x90>
	  } else {
		  // Turn off the left LED
		  HAL_GPIO_WritePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2110      	movs	r1, #16
 80010d2:	4810      	ldr	r0, [pc, #64]	@ (8001114 <main+0xcc>)
 80010d4:	f002 fc96 	bl	8003a04 <HAL_GPIO_WritePin>
	  }

	  // Turn on the right LED and turn off the left LED
	  HAL_GPIO_WritePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin, GPIO_PIN_SET);
 80010d8:	2201      	movs	r2, #1
 80010da:	2120      	movs	r1, #32
 80010dc:	480d      	ldr	r0, [pc, #52]	@ (8001114 <main+0xcc>)
 80010de:	f002 fc91 	bl	8003a04 <HAL_GPIO_WritePin>

	  HAL_Delay(100); // Delay for 1 second
 80010e2:	2064      	movs	r0, #100	@ 0x64
 80010e4:	f000 fddc 	bl	8001ca0 <HAL_Delay>

	  // Turn on the left LED and turn off the right LED
	  HAL_GPIO_WritePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin, GPIO_PIN_RESET);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2120      	movs	r1, #32
 80010ec:	4809      	ldr	r0, [pc, #36]	@ (8001114 <main+0xcc>)
 80010ee:	f002 fc89 	bl	8003a04 <HAL_GPIO_WritePin>

	  HAL_Delay(100); // Delay for 1 second
 80010f2:	2064      	movs	r0, #100	@ 0x64
 80010f4:	f000 fdd4 	bl	8001ca0 <HAL_Delay>
	  inv_FSM(&invLeft);
 80010f8:	e7d6      	b.n	80010a8 <main+0x60>
 80010fa:	bf00      	nop
 80010fc:	200002c8 	.word	0x200002c8
 8001100:	200002b8 	.word	0x200002b8
 8001104:	20000078 	.word	0x20000078
 8001108:	20000000 	.word	0x20000000
 800110c:	20000004 	.word	0x20000004
 8001110:	40020800 	.word	0x40020800
 8001114:	40020c00 	.word	0x40020c00

08001118 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b094      	sub	sp, #80	@ 0x50
 800111c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111e:	f107 031c 	add.w	r3, r7, #28
 8001122:	2234      	movs	r2, #52	@ 0x34
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f005 fa98 	bl	800665c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800112c:	f107 0308 	add.w	r3, r7, #8
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800113c:	4b2b      	ldr	r3, [pc, #172]	@ (80011ec <SystemClock_Config+0xd4>)
 800113e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001140:	4a2a      	ldr	r2, [pc, #168]	@ (80011ec <SystemClock_Config+0xd4>)
 8001142:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001146:	6413      	str	r3, [r2, #64]	@ 0x40
 8001148:	4b28      	ldr	r3, [pc, #160]	@ (80011ec <SystemClock_Config+0xd4>)
 800114a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001154:	4b26      	ldr	r3, [pc, #152]	@ (80011f0 <SystemClock_Config+0xd8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a25      	ldr	r2, [pc, #148]	@ (80011f0 <SystemClock_Config+0xd8>)
 800115a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800115e:	6013      	str	r3, [r2, #0]
 8001160:	4b23      	ldr	r3, [pc, #140]	@ (80011f0 <SystemClock_Config+0xd8>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001168:	603b      	str	r3, [r7, #0]
 800116a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800116c:	2301      	movs	r3, #1
 800116e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001170:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001174:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001176:	2302      	movs	r3, #2
 8001178:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800117a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800117e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 10;
 8001180:	230a      	movs	r3, #10
 8001182:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001184:	23d8      	movs	r3, #216	@ 0xd8
 8001186:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001188:	2302      	movs	r3, #2
 800118a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800118c:	2309      	movs	r3, #9
 800118e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001190:	2302      	movs	r3, #2
 8001192:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001194:	f107 031c 	add.w	r3, r7, #28
 8001198:	4618      	mov	r0, r3
 800119a:	f002 fdc5 	bl	8003d28 <HAL_RCC_OscConfig>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80011a4:	f000 f826 	bl	80011f4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011a8:	f002 fd6e 	bl	8003c88 <HAL_PWREx_EnableOverDrive>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80011b2:	f000 f81f 	bl	80011f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b6:	230f      	movs	r3, #15
 80011b8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ba:	2302      	movs	r3, #2
 80011bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011c2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80011c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011cc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80011ce:	f107 0308 	add.w	r3, r7, #8
 80011d2:	2107      	movs	r1, #7
 80011d4:	4618      	mov	r0, r3
 80011d6:	f003 f855 	bl	8004284 <HAL_RCC_ClockConfig>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80011e0:	f000 f808 	bl	80011f4 <Error_Handler>
  }
}
 80011e4:	bf00      	nop
 80011e6:	3750      	adds	r7, #80	@ 0x50
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40007000 	.word	0x40007000

080011f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f8:	b672      	cpsid	i
}
 80011fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011fc:	bf00      	nop
 80011fe:	e7fd      	b.n	80011fc <Error_Handler+0x8>

08001200 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001206:	4b0f      	ldr	r3, [pc, #60]	@ (8001244 <HAL_MspInit+0x44>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120a:	4a0e      	ldr	r2, [pc, #56]	@ (8001244 <HAL_MspInit+0x44>)
 800120c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001210:	6413      	str	r3, [r2, #64]	@ 0x40
 8001212:	4b0c      	ldr	r3, [pc, #48]	@ (8001244 <HAL_MspInit+0x44>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121e:	4b09      	ldr	r3, [pc, #36]	@ (8001244 <HAL_MspInit+0x44>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001222:	4a08      	ldr	r2, [pc, #32]	@ (8001244 <HAL_MspInit+0x44>)
 8001224:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001228:	6453      	str	r3, [r2, #68]	@ 0x44
 800122a:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <HAL_MspInit+0x44>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001232:	603b      	str	r3, [r7, #0]
 8001234:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800

08001248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800124c:	bf00      	nop
 800124e:	e7fd      	b.n	800124c <NMI_Handler+0x4>

08001250 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001254:	bf00      	nop
 8001256:	e7fd      	b.n	8001254 <HardFault_Handler+0x4>

08001258 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800125c:	bf00      	nop
 800125e:	e7fd      	b.n	800125c <MemManage_Handler+0x4>

08001260 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001264:	bf00      	nop
 8001266:	e7fd      	b.n	8001264 <BusFault_Handler+0x4>

08001268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800126c:	bf00      	nop
 800126e:	e7fd      	b.n	800126c <UsageFault_Handler+0x4>

08001270 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800129e:	f000 fcdf 	bl	8001c60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80012ac:	4802      	ldr	r0, [pc, #8]	@ (80012b8 <CAN1_RX0_IRQHandler+0x10>)
 80012ae:	f001 fa44 	bl	800273a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000228 	.word	0x20000228

080012bc <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80012c0:	4802      	ldr	r0, [pc, #8]	@ (80012cc <CAN1_RX1_IRQHandler+0x10>)
 80012c2:	f001 fa3a 	bl	800273a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000228 	.word	0x20000228

080012d0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012d4:	4802      	ldr	r0, [pc, #8]	@ (80012e0 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80012d6:	f003 ff90 	bl	80051fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	200002c8 	.word	0x200002c8

080012e4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012e8:	4802      	ldr	r0, [pc, #8]	@ (80012f4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80012ea:	f003 ff86 	bl	80051fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200002c8 	.word	0x200002c8

080012f8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012fc:	4802      	ldr	r0, [pc, #8]	@ (8001308 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80012fe:	f003 ff7c 	bl	80051fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200002c8 	.word	0x200002c8

0800130c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001310:	4802      	ldr	r0, [pc, #8]	@ (800131c <TIM1_CC_IRQHandler+0x10>)
 8001312:	f003 ff72 	bl	80051fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200002c8 	.word	0x200002c8

08001320 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001324:	4802      	ldr	r0, [pc, #8]	@ (8001330 <TIM6_DAC_IRQHandler+0x10>)
 8001326:	f001 fd74 	bl	8002e12 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000250 	.word	0x20000250

08001334 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001338:	4802      	ldr	r0, [pc, #8]	@ (8001344 <DMA2_Stream0_IRQHandler+0x10>)
 800133a:	f001 ff35 	bl	80031a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000108 	.word	0x20000108

08001348 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800134c:	4802      	ldr	r0, [pc, #8]	@ (8001358 <DMA2_Stream1_IRQHandler+0x10>)
 800134e:	f001 ff2b 	bl	80031a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200001c8 	.word	0x200001c8

0800135c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001360:	4804      	ldr	r0, [pc, #16]	@ (8001374 <DMA2_Stream2_IRQHandler+0x18>)
 8001362:	f001 ff21 	bl	80031a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */
  HAL_GPIO_WritePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin, GPIO_PIN_SET);
 8001366:	2201      	movs	r2, #1
 8001368:	2110      	movs	r1, #16
 800136a:	4803      	ldr	r0, [pc, #12]	@ (8001378 <DMA2_Stream2_IRQHandler+0x1c>)
 800136c:	f002 fb4a 	bl	8003a04 <HAL_GPIO_WritePin>
  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000168 	.word	0x20000168
 8001378:	40020c00 	.word	0x40020c00

0800137c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001380:	4b06      	ldr	r3, [pc, #24]	@ (800139c <SystemInit+0x20>)
 8001382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001386:	4a05      	ldr	r2, [pc, #20]	@ (800139c <SystemInit+0x20>)
 8001388:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800138c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b09a      	sub	sp, #104	@ 0x68
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013a6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]
 80013b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013c0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
 80013d0:	615a      	str	r2, [r3, #20]
 80013d2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	222c      	movs	r2, #44	@ 0x2c
 80013d8:	2100      	movs	r1, #0
 80013da:	4618      	mov	r0, r3
 80013dc:	f005 f93e 	bl	800665c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013e0:	4b54      	ldr	r3, [pc, #336]	@ (8001534 <MX_TIM1_Init+0x194>)
 80013e2:	4a55      	ldr	r2, [pc, #340]	@ (8001538 <MX_TIM1_Init+0x198>)
 80013e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80013e6:	4b53      	ldr	r3, [pc, #332]	@ (8001534 <MX_TIM1_Init+0x194>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80013ec:	4b51      	ldr	r3, [pc, #324]	@ (8001534 <MX_TIM1_Init+0x194>)
 80013ee:	2220      	movs	r2, #32
 80013f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6553;
 80013f2:	4b50      	ldr	r3, [pc, #320]	@ (8001534 <MX_TIM1_Init+0x194>)
 80013f4:	f641 1299 	movw	r2, #6553	@ 0x1999
 80013f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fa:	4b4e      	ldr	r3, [pc, #312]	@ (8001534 <MX_TIM1_Init+0x194>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001400:	4b4c      	ldr	r3, [pc, #304]	@ (8001534 <MX_TIM1_Init+0x194>)
 8001402:	2200      	movs	r2, #0
 8001404:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001406:	4b4b      	ldr	r3, [pc, #300]	@ (8001534 <MX_TIM1_Init+0x194>)
 8001408:	2280      	movs	r2, #128	@ 0x80
 800140a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800140c:	4849      	ldr	r0, [pc, #292]	@ (8001534 <MX_TIM1_Init+0x194>)
 800140e:	f003 fd13 	bl	8004e38 <HAL_TIM_Base_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001418:	f7ff feec 	bl	80011f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800141c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001420:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001422:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001426:	4619      	mov	r1, r3
 8001428:	4842      	ldr	r0, [pc, #264]	@ (8001534 <MX_TIM1_Init+0x194>)
 800142a:	f004 fa2f 	bl	800588c <HAL_TIM_ConfigClockSource>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001434:	f7ff fede 	bl	80011f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001438:	483e      	ldr	r0, [pc, #248]	@ (8001534 <MX_TIM1_Init+0x194>)
 800143a:	f003 fe26 	bl	800508a <HAL_TIM_PWM_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001444:	f7ff fed6 	bl	80011f4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001448:	483a      	ldr	r0, [pc, #232]	@ (8001534 <MX_TIM1_Init+0x194>)
 800144a:	f003 fdbd 	bl	8004fc8 <HAL_TIM_OC_Init>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8001454:	f7ff fece 	bl	80011f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001458:	2320      	movs	r3, #32
 800145a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800145c:	2300      	movs	r3, #0
 800145e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001460:	2300      	movs	r3, #0
 8001462:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001464:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001468:	4619      	mov	r1, r3
 800146a:	4832      	ldr	r0, [pc, #200]	@ (8001534 <MX_TIM1_Init+0x194>)
 800146c:	f004 ffcc 	bl	8006408 <HAL_TIMEx_MasterConfigSynchronization>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8001476:	f7ff febd 	bl	80011f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800147a:	2360      	movs	r3, #96	@ 0x60
 800147c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001482:	2300      	movs	r3, #0
 8001484:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001486:	2300      	movs	r3, #0
 8001488:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800148a:	2300      	movs	r3, #0
 800148c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800148e:	2300      	movs	r3, #0
 8001490:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001492:	2300      	movs	r3, #0
 8001494:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001496:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800149a:	2200      	movs	r2, #0
 800149c:	4619      	mov	r1, r3
 800149e:	4825      	ldr	r0, [pc, #148]	@ (8001534 <MX_TIM1_Init+0x194>)
 80014a0:	f004 f8e0 	bl	8005664 <HAL_TIM_PWM_ConfigChannel>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80014aa:	f7ff fea3 	bl	80011f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80014ae:	2300      	movs	r3, #0
 80014b0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014b2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014b6:	2204      	movs	r2, #4
 80014b8:	4619      	mov	r1, r3
 80014ba:	481e      	ldr	r0, [pc, #120]	@ (8001534 <MX_TIM1_Init+0x194>)
 80014bc:	f003 ffbc 	bl	8005438 <HAL_TIM_OC_ConfigChannel>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80014c6:	f7ff fe95 	bl	80011f4 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014ca:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014ce:	2208      	movs	r2, #8
 80014d0:	4619      	mov	r1, r3
 80014d2:	4818      	ldr	r0, [pc, #96]	@ (8001534 <MX_TIM1_Init+0x194>)
 80014d4:	f003 ffb0 	bl	8005438 <HAL_TIM_OC_ConfigChannel>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80014de:	f7ff fe89 	bl	80011f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014f2:	2300      	movs	r3, #0
 80014f4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014fa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001500:	2300      	movs	r3, #0
 8001502:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001504:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001508:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800150e:	2300      	movs	r3, #0
 8001510:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	4619      	mov	r1, r3
 8001516:	4807      	ldr	r0, [pc, #28]	@ (8001534 <MX_TIM1_Init+0x194>)
 8001518:	f005 f804 	bl	8006524 <HAL_TIMEx_ConfigBreakDeadTime>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_TIM1_Init+0x186>
  {
    Error_Handler();
 8001522:	f7ff fe67 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001526:	4803      	ldr	r0, [pc, #12]	@ (8001534 <MX_TIM1_Init+0x194>)
 8001528:	f000 fa90 	bl	8001a4c <HAL_TIM_MspPostInit>

}
 800152c:	bf00      	nop
 800152e:	3768      	adds	r7, #104	@ 0x68
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	200002c8 	.word	0x200002c8
 8001538:	40010000 	.word	0x40010000

0800153c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b088      	sub	sp, #32
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001542:	f107 0314 	add.w	r3, r7, #20
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800155a:	4b2c      	ldr	r3, [pc, #176]	@ (800160c <MX_TIM2_Init+0xd0>)
 800155c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001560:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001562:	4b2a      	ldr	r3, [pc, #168]	@ (800160c <MX_TIM2_Init+0xd0>)
 8001564:	2200      	movs	r2, #0
 8001566:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001568:	4b28      	ldr	r3, [pc, #160]	@ (800160c <MX_TIM2_Init+0xd0>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800156e:	4b27      	ldr	r3, [pc, #156]	@ (800160c <MX_TIM2_Init+0xd0>)
 8001570:	f04f 32ff 	mov.w	r2, #4294967295
 8001574:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001576:	4b25      	ldr	r3, [pc, #148]	@ (800160c <MX_TIM2_Init+0xd0>)
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800157c:	4b23      	ldr	r3, [pc, #140]	@ (800160c <MX_TIM2_Init+0xd0>)
 800157e:	2200      	movs	r2, #0
 8001580:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001582:	4822      	ldr	r0, [pc, #136]	@ (800160c <MX_TIM2_Init+0xd0>)
 8001584:	f003 fde2 	bl	800514c <HAL_TIM_IC_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800158e:	f7ff fe31 	bl	80011f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800159a:	f107 0314 	add.w	r3, r7, #20
 800159e:	4619      	mov	r1, r3
 80015a0:	481a      	ldr	r0, [pc, #104]	@ (800160c <MX_TIM2_Init+0xd0>)
 80015a2:	f004 ff31 	bl	8006408 <HAL_TIMEx_MasterConfigSynchronization>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80015ac:	f7ff fe22 	bl	80011f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80015b0:	2300      	movs	r3, #0
 80015b2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015b4:	2301      	movs	r3, #1
 80015b6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	2200      	movs	r2, #0
 80015c4:	4619      	mov	r1, r3
 80015c6:	4811      	ldr	r0, [pc, #68]	@ (800160c <MX_TIM2_Init+0xd0>)
 80015c8:	f003 ffb0 	bl	800552c <HAL_TIM_IC_ConfigChannel>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80015d2:	f7ff fe0f 	bl	80011f4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	2208      	movs	r2, #8
 80015da:	4619      	mov	r1, r3
 80015dc:	480b      	ldr	r0, [pc, #44]	@ (800160c <MX_TIM2_Init+0xd0>)
 80015de:	f003 ffa5 	bl	800552c <HAL_TIM_IC_ConfigChannel>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80015e8:	f7ff fe04 	bl	80011f4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	220c      	movs	r2, #12
 80015f0:	4619      	mov	r1, r3
 80015f2:	4806      	ldr	r0, [pc, #24]	@ (800160c <MX_TIM2_Init+0xd0>)
 80015f4:	f003 ff9a 	bl	800552c <HAL_TIM_IC_ConfigChannel>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 80015fe:	f7ff fdf9 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001602:	bf00      	nop
 8001604:	3720      	adds	r7, #32
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000314 	.word	0x20000314

08001610 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001616:	f107 0314 	add.w	r3, r7, #20
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800162e:	4b2b      	ldr	r3, [pc, #172]	@ (80016dc <MX_TIM4_Init+0xcc>)
 8001630:	4a2b      	ldr	r2, [pc, #172]	@ (80016e0 <MX_TIM4_Init+0xd0>)
 8001632:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001634:	4b29      	ldr	r3, [pc, #164]	@ (80016dc <MX_TIM4_Init+0xcc>)
 8001636:	2200      	movs	r2, #0
 8001638:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163a:	4b28      	ldr	r3, [pc, #160]	@ (80016dc <MX_TIM4_Init+0xcc>)
 800163c:	2200      	movs	r2, #0
 800163e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001640:	4b26      	ldr	r3, [pc, #152]	@ (80016dc <MX_TIM4_Init+0xcc>)
 8001642:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001646:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001648:	4b24      	ldr	r3, [pc, #144]	@ (80016dc <MX_TIM4_Init+0xcc>)
 800164a:	2200      	movs	r2, #0
 800164c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164e:	4b23      	ldr	r3, [pc, #140]	@ (80016dc <MX_TIM4_Init+0xcc>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001654:	4821      	ldr	r0, [pc, #132]	@ (80016dc <MX_TIM4_Init+0xcc>)
 8001656:	f003 fd79 	bl	800514c <HAL_TIM_IC_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001660:	f7ff fdc8 	bl	80011f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001668:	2300      	movs	r3, #0
 800166a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	4619      	mov	r1, r3
 8001672:	481a      	ldr	r0, [pc, #104]	@ (80016dc <MX_TIM4_Init+0xcc>)
 8001674:	f004 fec8 	bl	8006408 <HAL_TIMEx_MasterConfigSynchronization>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 800167e:	f7ff fdb9 	bl	80011f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001682:	2300      	movs	r3, #0
 8001684:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001686:	2301      	movs	r3, #1
 8001688:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001692:	1d3b      	adds	r3, r7, #4
 8001694:	2200      	movs	r2, #0
 8001696:	4619      	mov	r1, r3
 8001698:	4810      	ldr	r0, [pc, #64]	@ (80016dc <MX_TIM4_Init+0xcc>)
 800169a:	f003 ff47 	bl	800552c <HAL_TIM_IC_ConfigChannel>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80016a4:	f7ff fda6 	bl	80011f4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80016a8:	1d3b      	adds	r3, r7, #4
 80016aa:	2208      	movs	r2, #8
 80016ac:	4619      	mov	r1, r3
 80016ae:	480b      	ldr	r0, [pc, #44]	@ (80016dc <MX_TIM4_Init+0xcc>)
 80016b0:	f003 ff3c 	bl	800552c <HAL_TIM_IC_ConfigChannel>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80016ba:	f7ff fd9b 	bl	80011f4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	220c      	movs	r2, #12
 80016c2:	4619      	mov	r1, r3
 80016c4:	4805      	ldr	r0, [pc, #20]	@ (80016dc <MX_TIM4_Init+0xcc>)
 80016c6:	f003 ff31 	bl	800552c <HAL_TIM_IC_ConfigChannel>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM4_Init+0xc4>
  {
    Error_Handler();
 80016d0:	f7ff fd90 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80016d4:	bf00      	nop
 80016d6:	3720      	adds	r7, #32
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000360 	.word	0x20000360
 80016e0:	40000800 	.word	0x40000800

080016e4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b09a      	sub	sp, #104	@ 0x68
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ea:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	609a      	str	r2, [r3, #8]
 80016f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001704:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
 8001714:	615a      	str	r2, [r3, #20]
 8001716:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	222c      	movs	r2, #44	@ 0x2c
 800171c:	2100      	movs	r1, #0
 800171e:	4618      	mov	r0, r3
 8001720:	f004 ff9c 	bl	800665c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001724:	4b54      	ldr	r3, [pc, #336]	@ (8001878 <MX_TIM8_Init+0x194>)
 8001726:	4a55      	ldr	r2, [pc, #340]	@ (800187c <MX_TIM8_Init+0x198>)
 8001728:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800172a:	4b53      	ldr	r3, [pc, #332]	@ (8001878 <MX_TIM8_Init+0x194>)
 800172c:	2200      	movs	r2, #0
 800172e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001730:	4b51      	ldr	r3, [pc, #324]	@ (8001878 <MX_TIM8_Init+0x194>)
 8001732:	2200      	movs	r2, #0
 8001734:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001736:	4b50      	ldr	r3, [pc, #320]	@ (8001878 <MX_TIM8_Init+0x194>)
 8001738:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800173c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800173e:	4b4e      	ldr	r3, [pc, #312]	@ (8001878 <MX_TIM8_Init+0x194>)
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001744:	4b4c      	ldr	r3, [pc, #304]	@ (8001878 <MX_TIM8_Init+0x194>)
 8001746:	2200      	movs	r2, #0
 8001748:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174a:	4b4b      	ldr	r3, [pc, #300]	@ (8001878 <MX_TIM8_Init+0x194>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001750:	4849      	ldr	r0, [pc, #292]	@ (8001878 <MX_TIM8_Init+0x194>)
 8001752:	f003 fb71 	bl	8004e38 <HAL_TIM_Base_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 800175c:	f7ff fd4a 	bl	80011f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001760:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001764:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001766:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800176a:	4619      	mov	r1, r3
 800176c:	4842      	ldr	r0, [pc, #264]	@ (8001878 <MX_TIM8_Init+0x194>)
 800176e:	f004 f88d 	bl	800588c <HAL_TIM_ConfigClockSource>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001778:	f7ff fd3c 	bl	80011f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800177c:	483e      	ldr	r0, [pc, #248]	@ (8001878 <MX_TIM8_Init+0x194>)
 800177e:	f003 fc84 	bl	800508a <HAL_TIM_PWM_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001788:	f7ff fd34 	bl	80011f4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800178c:	483a      	ldr	r0, [pc, #232]	@ (8001878 <MX_TIM8_Init+0x194>)
 800178e:	f003 fc1b 	bl	8004fc8 <HAL_TIM_OC_Init>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_TIM8_Init+0xb8>
  {
    Error_Handler();
 8001798:	f7ff fd2c 	bl	80011f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800179c:	2300      	movs	r3, #0
 800179e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80017a0:	2300      	movs	r3, #0
 80017a2:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a4:	2300      	movs	r3, #0
 80017a6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80017a8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80017ac:	4619      	mov	r1, r3
 80017ae:	4832      	ldr	r0, [pc, #200]	@ (8001878 <MX_TIM8_Init+0x194>)
 80017b0:	f004 fe2a 	bl	8006408 <HAL_TIMEx_MasterConfigSynchronization>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM8_Init+0xda>
  {
    Error_Handler();
 80017ba:	f7ff fd1b 	bl	80011f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017be:	2360      	movs	r3, #96	@ 0x60
 80017c0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017c6:	2300      	movs	r3, #0
 80017c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017ca:	2300      	movs	r3, #0
 80017cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017d2:	2300      	movs	r3, #0
 80017d4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017d6:	2300      	movs	r3, #0
 80017d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017da:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80017de:	2200      	movs	r2, #0
 80017e0:	4619      	mov	r1, r3
 80017e2:	4825      	ldr	r0, [pc, #148]	@ (8001878 <MX_TIM8_Init+0x194>)
 80017e4:	f003 ff3e 	bl	8005664 <HAL_TIM_PWM_ConfigChannel>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 80017ee:	f7ff fd01 	bl	80011f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017f2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80017f6:	2204      	movs	r2, #4
 80017f8:	4619      	mov	r1, r3
 80017fa:	481f      	ldr	r0, [pc, #124]	@ (8001878 <MX_TIM8_Init+0x194>)
 80017fc:	f003 ff32 	bl	8005664 <HAL_TIM_PWM_ConfigChannel>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 8001806:	f7ff fcf5 	bl	80011f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800180a:	2300      	movs	r3, #0
 800180c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800180e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001812:	2208      	movs	r2, #8
 8001814:	4619      	mov	r1, r3
 8001816:	4818      	ldr	r0, [pc, #96]	@ (8001878 <MX_TIM8_Init+0x194>)
 8001818:	f003 fe0e 	bl	8005438 <HAL_TIM_OC_ConfigChannel>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001822:	f7ff fce7 	bl	80011f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001826:	2300      	movs	r3, #0
 8001828:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800182a:	2300      	movs	r3, #0
 800182c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001836:	2300      	movs	r3, #0
 8001838:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800183a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800183e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001844:	2300      	movs	r3, #0
 8001846:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001848:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800184c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800184e:	2300      	movs	r3, #0
 8001850:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001852:	2300      	movs	r3, #0
 8001854:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	4619      	mov	r1, r3
 800185a:	4807      	ldr	r0, [pc, #28]	@ (8001878 <MX_TIM8_Init+0x194>)
 800185c:	f004 fe62 	bl	8006524 <HAL_TIMEx_ConfigBreakDeadTime>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM8_Init+0x186>
  {
    Error_Handler();
 8001866:	f7ff fcc5 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800186a:	4803      	ldr	r0, [pc, #12]	@ (8001878 <MX_TIM8_Init+0x194>)
 800186c:	f000 f8ee 	bl	8001a4c <HAL_TIM_MspPostInit>

}
 8001870:	bf00      	nop
 8001872:	3768      	adds	r7, #104	@ 0x68
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	200003ac 	.word	0x200003ac
 800187c:	40010400 	.word	0x40010400

08001880 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a22      	ldr	r2, [pc, #136]	@ (8001918 <HAL_TIM_Base_MspInit+0x98>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d12c      	bne.n	80018ec <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001892:	4b22      	ldr	r3, [pc, #136]	@ (800191c <HAL_TIM_Base_MspInit+0x9c>)
 8001894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001896:	4a21      	ldr	r2, [pc, #132]	@ (800191c <HAL_TIM_Base_MspInit+0x9c>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	6453      	str	r3, [r2, #68]	@ 0x44
 800189e:	4b1f      	ldr	r3, [pc, #124]	@ (800191c <HAL_TIM_Base_MspInit+0x9c>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80018aa:	2200      	movs	r2, #0
 80018ac:	2100      	movs	r1, #0
 80018ae:	2018      	movs	r0, #24
 80018b0:	f001 fa57 	bl	8002d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80018b4:	2018      	movs	r0, #24
 80018b6:	f001 fa70 	bl	8002d9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2100      	movs	r1, #0
 80018be:	2019      	movs	r0, #25
 80018c0:	f001 fa4f 	bl	8002d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80018c4:	2019      	movs	r0, #25
 80018c6:	f001 fa68 	bl	8002d9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2100      	movs	r1, #0
 80018ce:	201a      	movs	r0, #26
 80018d0:	f001 fa47 	bl	8002d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80018d4:	201a      	movs	r0, #26
 80018d6:	f001 fa60 	bl	8002d9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80018da:	2200      	movs	r2, #0
 80018dc:	2100      	movs	r1, #0
 80018de:	201b      	movs	r0, #27
 80018e0:	f001 fa3f 	bl	8002d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80018e4:	201b      	movs	r0, #27
 80018e6:	f001 fa58 	bl	8002d9a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80018ea:	e010      	b.n	800190e <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM8)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001920 <HAL_TIM_Base_MspInit+0xa0>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d10b      	bne.n	800190e <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80018f6:	4b09      	ldr	r3, [pc, #36]	@ (800191c <HAL_TIM_Base_MspInit+0x9c>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fa:	4a08      	ldr	r2, [pc, #32]	@ (800191c <HAL_TIM_Base_MspInit+0x9c>)
 80018fc:	f043 0302 	orr.w	r3, r3, #2
 8001900:	6453      	str	r3, [r2, #68]	@ 0x44
 8001902:	4b06      	ldr	r3, [pc, #24]	@ (800191c <HAL_TIM_Base_MspInit+0x9c>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	60bb      	str	r3, [r7, #8]
 800190c:	68bb      	ldr	r3, [r7, #8]
}
 800190e:	bf00      	nop
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40010000 	.word	0x40010000
 800191c:	40023800 	.word	0x40023800
 8001920:	40010400 	.word	0x40010400

08001924 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08c      	sub	sp, #48	@ 0x30
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192c:	f107 031c 	add.w	r3, r7, #28
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001944:	d146      	bne.n	80019d4 <HAL_TIM_IC_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001946:	4b3c      	ldr	r3, [pc, #240]	@ (8001a38 <HAL_TIM_IC_MspInit+0x114>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194a:	4a3b      	ldr	r2, [pc, #236]	@ (8001a38 <HAL_TIM_IC_MspInit+0x114>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	6413      	str	r3, [r2, #64]	@ 0x40
 8001952:	4b39      	ldr	r3, [pc, #228]	@ (8001a38 <HAL_TIM_IC_MspInit+0x114>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	61bb      	str	r3, [r7, #24]
 800195c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800195e:	4b36      	ldr	r3, [pc, #216]	@ (8001a38 <HAL_TIM_IC_MspInit+0x114>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	4a35      	ldr	r2, [pc, #212]	@ (8001a38 <HAL_TIM_IC_MspInit+0x114>)
 8001964:	f043 0302 	orr.w	r3, r3, #2
 8001968:	6313      	str	r3, [r2, #48]	@ 0x30
 800196a:	4b33      	ldr	r3, [pc, #204]	@ (8001a38 <HAL_TIM_IC_MspInit+0x114>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001976:	4b30      	ldr	r3, [pc, #192]	@ (8001a38 <HAL_TIM_IC_MspInit+0x114>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197a:	4a2f      	ldr	r2, [pc, #188]	@ (8001a38 <HAL_TIM_IC_MspInit+0x114>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6313      	str	r3, [r2, #48]	@ 0x30
 8001982:	4b2d      	ldr	r3, [pc, #180]	@ (8001a38 <HAL_TIM_IC_MspInit+0x114>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = B_R_Pin|Z_R_Pin;
 800198e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001994:	2302      	movs	r3, #2
 8001996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199c:	2300      	movs	r3, #0
 800199e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019a0:	2301      	movs	r3, #1
 80019a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a4:	f107 031c 	add.w	r3, r7, #28
 80019a8:	4619      	mov	r1, r3
 80019aa:	4824      	ldr	r0, [pc, #144]	@ (8001a3c <HAL_TIM_IC_MspInit+0x118>)
 80019ac:	f001 fe66 	bl	800367c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A_R_Pin;
 80019b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80019b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	2302      	movs	r3, #2
 80019b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019be:	2300      	movs	r3, #0
 80019c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019c2:	2301      	movs	r3, #1
 80019c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(A_R_GPIO_Port, &GPIO_InitStruct);
 80019c6:	f107 031c 	add.w	r3, r7, #28
 80019ca:	4619      	mov	r1, r3
 80019cc:	481c      	ldr	r0, [pc, #112]	@ (8001a40 <HAL_TIM_IC_MspInit+0x11c>)
 80019ce:	f001 fe55 	bl	800367c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80019d2:	e02d      	b.n	8001a30 <HAL_TIM_IC_MspInit+0x10c>
  else if(tim_icHandle->Instance==TIM4)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a1a      	ldr	r2, [pc, #104]	@ (8001a44 <HAL_TIM_IC_MspInit+0x120>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d128      	bne.n	8001a30 <HAL_TIM_IC_MspInit+0x10c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019de:	4b16      	ldr	r3, [pc, #88]	@ (8001a38 <HAL_TIM_IC_MspInit+0x114>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e2:	4a15      	ldr	r2, [pc, #84]	@ (8001a38 <HAL_TIM_IC_MspInit+0x114>)
 80019e4:	f043 0304 	orr.w	r3, r3, #4
 80019e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ea:	4b13      	ldr	r3, [pc, #76]	@ (8001a38 <HAL_TIM_IC_MspInit+0x114>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ee:	f003 0304 	and.w	r3, r3, #4
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019f6:	4b10      	ldr	r3, [pc, #64]	@ (8001a38 <HAL_TIM_IC_MspInit+0x114>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001a38 <HAL_TIM_IC_MspInit+0x114>)
 80019fc:	f043 0308 	orr.w	r3, r3, #8
 8001a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a02:	4b0d      	ldr	r3, [pc, #52]	@ (8001a38 <HAL_TIM_IC_MspInit+0x114>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a06:	f003 0308 	and.w	r3, r3, #8
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = A_L_Pin|B_L_Pin|Z_L_Pin;
 8001a0e:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8001a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a14:	2302      	movs	r3, #2
 8001a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a20:	2302      	movs	r3, #2
 8001a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a24:	f107 031c 	add.w	r3, r7, #28
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4807      	ldr	r0, [pc, #28]	@ (8001a48 <HAL_TIM_IC_MspInit+0x124>)
 8001a2c:	f001 fe26 	bl	800367c <HAL_GPIO_Init>
}
 8001a30:	bf00      	nop
 8001a32:	3730      	adds	r7, #48	@ 0x30
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40020400 	.word	0x40020400
 8001a40:	40020000 	.word	0x40020000
 8001a44:	40000800 	.word	0x40000800
 8001a48:	40020c00 	.word	0x40020c00

08001a4c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08c      	sub	sp, #48	@ 0x30
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	f107 031c 	add.w	r3, r7, #28
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a3f      	ldr	r2, [pc, #252]	@ (8001b68 <HAL_TIM_MspPostInit+0x11c>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d11d      	bne.n	8001aaa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a6e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b6c <HAL_TIM_MspPostInit+0x120>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a72:	4a3e      	ldr	r2, [pc, #248]	@ (8001b6c <HAL_TIM_MspPostInit+0x120>)
 8001a74:	f043 0310 	orr.w	r3, r3, #16
 8001a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a7a:	4b3c      	ldr	r3, [pc, #240]	@ (8001b6c <HAL_TIM_MspPostInit+0x120>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	f003 0310 	and.w	r3, r3, #16
 8001a82:	61bb      	str	r3, [r7, #24]
 8001a84:	69bb      	ldr	r3, [r7, #24]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWM1_L_Pin|PWM2_L_Pin|PWM3_L_Pin|PWM4_L_Pin
 8001a86:	f44f 537c 	mov.w	r3, #16128	@ 0x3f00
 8001a8a:	61fb      	str	r3, [r7, #28]
                          |PWM5_L_Pin|PWM6_L_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a94:	2300      	movs	r3, #0
 8001a96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a9c:	f107 031c 	add.w	r3, r7, #28
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4833      	ldr	r0, [pc, #204]	@ (8001b70 <HAL_TIM_MspPostInit+0x124>)
 8001aa4:	f001 fdea 	bl	800367c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001aa8:	e05a      	b.n	8001b60 <HAL_TIM_MspPostInit+0x114>
  else if(timHandle->Instance==TIM8)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a31      	ldr	r2, [pc, #196]	@ (8001b74 <HAL_TIM_MspPostInit+0x128>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d155      	bne.n	8001b60 <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab4:	4b2d      	ldr	r3, [pc, #180]	@ (8001b6c <HAL_TIM_MspPostInit+0x120>)
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab8:	4a2c      	ldr	r2, [pc, #176]	@ (8001b6c <HAL_TIM_MspPostInit+0x120>)
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac0:	4b2a      	ldr	r3, [pc, #168]	@ (8001b6c <HAL_TIM_MspPostInit+0x120>)
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001acc:	4b27      	ldr	r3, [pc, #156]	@ (8001b6c <HAL_TIM_MspPostInit+0x120>)
 8001ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad0:	4a26      	ldr	r2, [pc, #152]	@ (8001b6c <HAL_TIM_MspPostInit+0x120>)
 8001ad2:	f043 0302 	orr.w	r3, r3, #2
 8001ad6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ad8:	4b24      	ldr	r3, [pc, #144]	@ (8001b6c <HAL_TIM_MspPostInit+0x120>)
 8001ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	613b      	str	r3, [r7, #16]
 8001ae2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ae4:	4b21      	ldr	r3, [pc, #132]	@ (8001b6c <HAL_TIM_MspPostInit+0x120>)
 8001ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae8:	4a20      	ldr	r2, [pc, #128]	@ (8001b6c <HAL_TIM_MspPostInit+0x120>)
 8001aea:	f043 0304 	orr.w	r3, r3, #4
 8001aee:	6313      	str	r3, [r2, #48]	@ 0x30
 8001af0:	4b1e      	ldr	r3, [pc, #120]	@ (8001b6c <HAL_TIM_MspPostInit+0x120>)
 8001af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM1_R_Pin;
 8001afc:	2320      	movs	r3, #32
 8001afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b00:	2302      	movs	r3, #2
 8001b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM1_R_GPIO_Port, &GPIO_InitStruct);
 8001b10:	f107 031c 	add.w	r3, r7, #28
 8001b14:	4619      	mov	r1, r3
 8001b16:	4818      	ldr	r0, [pc, #96]	@ (8001b78 <HAL_TIM_MspPostInit+0x12c>)
 8001b18:	f001 fdb0 	bl	800367c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM3_R_Pin|PWM5_R_Pin;
 8001b1c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b22:	2302      	movs	r3, #2
 8001b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b32:	f107 031c 	add.w	r3, r7, #28
 8001b36:	4619      	mov	r1, r3
 8001b38:	4810      	ldr	r0, [pc, #64]	@ (8001b7c <HAL_TIM_MspPostInit+0x130>)
 8001b3a:	f001 fd9f 	bl	800367c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM2_R_Pin|PWM4_R_Pin|PWM6_R_Pin;
 8001b3e:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b44:	2302      	movs	r3, #2
 8001b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001b50:	2303      	movs	r3, #3
 8001b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b54:	f107 031c 	add.w	r3, r7, #28
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4809      	ldr	r0, [pc, #36]	@ (8001b80 <HAL_TIM_MspPostInit+0x134>)
 8001b5c:	f001 fd8e 	bl	800367c <HAL_GPIO_Init>
}
 8001b60:	bf00      	nop
 8001b62:	3730      	adds	r7, #48	@ 0x30
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40010000 	.word	0x40010000
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40021000 	.word	0x40021000
 8001b74:	40010400 	.word	0x40010400
 8001b78:	40020000 	.word	0x40020000
 8001b7c:	40020400 	.word	0x40020400
 8001b80:	40020800 	.word	0x40020800

08001b84 <MX_USB_OTG_FS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_USB_Init(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
	...

08001b94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b98:	480d      	ldr	r0, [pc, #52]	@ (8001bd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b9a:	490e      	ldr	r1, [pc, #56]	@ (8001bd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b9c:	4a0e      	ldr	r2, [pc, #56]	@ (8001bd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba0:	e002      	b.n	8001ba8 <LoopCopyDataInit>

08001ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ba6:	3304      	adds	r3, #4

08001ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bac:	d3f9      	bcc.n	8001ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bae:	4a0b      	ldr	r2, [pc, #44]	@ (8001bdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bb0:	4c0b      	ldr	r4, [pc, #44]	@ (8001be0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb4:	e001      	b.n	8001bba <LoopFillZerobss>

08001bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb8:	3204      	adds	r2, #4

08001bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bbc:	d3fb      	bcc.n	8001bb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bbe:	f7ff fbdd 	bl	800137c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bc2:	f004 fd53 	bl	800666c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bc6:	f7ff fa3f 	bl	8001048 <main>
  bx  lr    
 8001bca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bcc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001bd8:	080066f4 	.word	0x080066f4
  ldr r2, =_sbss
 8001bdc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001be0:	200003fc 	.word	0x200003fc

08001be4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001be4:	e7fe      	b.n	8001be4 <ADC_IRQHandler>

08001be6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bea:	2003      	movs	r0, #3
 8001bec:	f001 f8ae 	bl	8002d4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bf0:	200f      	movs	r0, #15
 8001bf2:	f000 f805 	bl	8001c00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bf6:	f7ff fb03 	bl	8001200 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c08:	4b12      	ldr	r3, [pc, #72]	@ (8001c54 <HAL_InitTick+0x54>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4b12      	ldr	r3, [pc, #72]	@ (8001c58 <HAL_InitTick+0x58>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	4619      	mov	r1, r3
 8001c12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f001 f8c9 	bl	8002db6 <HAL_SYSTICK_Config>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e00e      	b.n	8001c4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b0f      	cmp	r3, #15
 8001c32:	d80a      	bhi.n	8001c4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c34:	2200      	movs	r2, #0
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	f04f 30ff 	mov.w	r0, #4294967295
 8001c3c:	f001 f891 	bl	8002d62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c40:	4a06      	ldr	r2, [pc, #24]	@ (8001c5c <HAL_InitTick+0x5c>)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
 8001c48:	e000      	b.n	8001c4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20000008 	.word	0x20000008
 8001c58:	20000010 	.word	0x20000010
 8001c5c:	2000000c 	.word	0x2000000c

08001c60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c64:	4b06      	ldr	r3, [pc, #24]	@ (8001c80 <HAL_IncTick+0x20>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4b06      	ldr	r3, [pc, #24]	@ (8001c84 <HAL_IncTick+0x24>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4413      	add	r3, r2
 8001c70:	4a04      	ldr	r2, [pc, #16]	@ (8001c84 <HAL_IncTick+0x24>)
 8001c72:	6013      	str	r3, [r2, #0]
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	20000010 	.word	0x20000010
 8001c84:	200003f8 	.word	0x200003f8

08001c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c8c:	4b03      	ldr	r3, [pc, #12]	@ (8001c9c <HAL_GetTick+0x14>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	200003f8 	.word	0x200003f8

08001ca0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ca8:	f7ff ffee 	bl	8001c88 <HAL_GetTick>
 8001cac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb8:	d005      	beq.n	8001cc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cba:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce4 <HAL_Delay+0x44>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cc6:	bf00      	nop
 8001cc8:	f7ff ffde 	bl	8001c88 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d8f7      	bhi.n	8001cc8 <HAL_Delay+0x28>
  {
  }
}
 8001cd8:	bf00      	nop
 8001cda:	bf00      	nop
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000010 	.word	0x20000010

08001ce8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e031      	b.n	8001d62 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d109      	bne.n	8001d1a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7fe fd9c 	bl	8000844 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1e:	f003 0310 	and.w	r3, r3, #16
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d116      	bne.n	8001d54 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d2a:	4b10      	ldr	r3, [pc, #64]	@ (8001d6c <HAL_ADC_Init+0x84>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	f043 0202 	orr.w	r2, r3, #2
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 fa88 	bl	800224c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d46:	f023 0303 	bic.w	r3, r3, #3
 8001d4a:	f043 0201 	orr.w	r2, r3, #1
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d52:	e001      	b.n	8001d58 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	ffffeefd 	.word	0xffffeefd

08001d70 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d101      	bne.n	8001d8e <HAL_ADC_Start_DMA+0x1e>
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	e0d4      	b.n	8001f38 <HAL_ADC_Start_DMA+0x1c8>
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d018      	beq.n	8001dd6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0201 	orr.w	r2, r2, #1
 8001db2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001db4:	4b62      	ldr	r3, [pc, #392]	@ (8001f40 <HAL_ADC_Start_DMA+0x1d0>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a62      	ldr	r2, [pc, #392]	@ (8001f44 <HAL_ADC_Start_DMA+0x1d4>)
 8001dba:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbe:	0c9a      	lsrs	r2, r3, #18
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	4413      	add	r3, r2
 8001dc6:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001dc8:	e002      	b.n	8001dd0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1f9      	bne.n	8001dca <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	f040 809c 	bne.w	8001f1e <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001dea:	4b57      	ldr	r3, [pc, #348]	@ (8001f48 <HAL_ADC_Start_DMA+0x1d8>)
 8001dec:	4013      	ands	r3, r2
 8001dee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d007      	beq.n	8001e14 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e08:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e0c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e20:	d106      	bne.n	8001e30 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e26:	f023 0206 	bic.w	r2, r3, #6
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	645a      	str	r2, [r3, #68]	@ 0x44
 8001e2e:	e002      	b.n	8001e36 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2200      	movs	r2, #0
 8001e34:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e42:	4a42      	ldr	r2, [pc, #264]	@ (8001f4c <HAL_ADC_Start_DMA+0x1dc>)
 8001e44:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e4a:	4a41      	ldr	r2, [pc, #260]	@ (8001f50 <HAL_ADC_Start_DMA+0x1e0>)
 8001e4c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e52:	4a40      	ldr	r2, [pc, #256]	@ (8001f54 <HAL_ADC_Start_DMA+0x1e4>)
 8001e54:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001e5e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	685a      	ldr	r2, [r3, #4]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001e6e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689a      	ldr	r2, [r3, #8]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e7e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	334c      	adds	r3, #76	@ 0x4c
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	68ba      	ldr	r2, [r7, #8]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f001 f92a 	bl	80030e8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001e94:	4b30      	ldr	r3, [pc, #192]	@ (8001f58 <HAL_ADC_Start_DMA+0x1e8>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 031f 	and.w	r3, r3, #31
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d10f      	bne.n	8001ec0 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d143      	bne.n	8001f36 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001ebc:	609a      	str	r2, [r3, #8]
 8001ebe:	e03a      	b.n	8001f36 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a25      	ldr	r2, [pc, #148]	@ (8001f5c <HAL_ADC_Start_DMA+0x1ec>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d10e      	bne.n	8001ee8 <HAL_ADC_Start_DMA+0x178>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d107      	bne.n	8001ee8 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001ee6:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f58 <HAL_ADC_Start_DMA+0x1e8>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 0310 	and.w	r3, r3, #16
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d120      	bne.n	8001f36 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a19      	ldr	r2, [pc, #100]	@ (8001f60 <HAL_ADC_Start_DMA+0x1f0>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d11b      	bne.n	8001f36 <HAL_ADC_Start_DMA+0x1c6>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d114      	bne.n	8001f36 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689a      	ldr	r2, [r3, #8]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	e00b      	b.n	8001f36 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f22:	f043 0210 	orr.w	r2, r3, #16
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2e:	f043 0201 	orr.w	r2, r3, #1
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	20000008 	.word	0x20000008
 8001f44:	431bde83 	.word	0x431bde83
 8001f48:	fffff8fe 	.word	0xfffff8fe
 8001f4c:	08002441 	.word	0x08002441
 8001f50:	080024fb 	.word	0x080024fb
 8001f54:	08002517 	.word	0x08002517
 8001f58:	40012300 	.word	0x40012300
 8001f5c:	40012000 	.word	0x40012000
 8001f60:	40012200 	.word	0x40012200

08001f64 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d101      	bne.n	8001fbc <HAL_ADC_ConfigChannel+0x1c>
 8001fb8:	2302      	movs	r3, #2
 8001fba:	e136      	b.n	800222a <HAL_ADC_ConfigChannel+0x28a>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b09      	cmp	r3, #9
 8001fca:	d93a      	bls.n	8002042 <HAL_ADC_ConfigChannel+0xa2>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001fd4:	d035      	beq.n	8002042 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68d9      	ldr	r1, [r3, #12]
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	4413      	add	r3, r2
 8001fea:	3b1e      	subs	r3, #30
 8001fec:	2207      	movs	r2, #7
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43da      	mvns	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	400a      	ands	r2, r1
 8001ffa:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a8d      	ldr	r2, [pc, #564]	@ (8002238 <HAL_ADC_ConfigChannel+0x298>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d10a      	bne.n	800201c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68d9      	ldr	r1, [r3, #12]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	061a      	lsls	r2, r3, #24
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800201a:	e035      	b.n	8002088 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68d9      	ldr	r1, [r3, #12]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	689a      	ldr	r2, [r3, #8]
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	b29b      	uxth	r3, r3
 800202c:	4618      	mov	r0, r3
 800202e:	4603      	mov	r3, r0
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	4403      	add	r3, r0
 8002034:	3b1e      	subs	r3, #30
 8002036:	409a      	lsls	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002040:	e022      	b.n	8002088 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6919      	ldr	r1, [r3, #16]
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	b29b      	uxth	r3, r3
 800204e:	461a      	mov	r2, r3
 8002050:	4613      	mov	r3, r2
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	4413      	add	r3, r2
 8002056:	2207      	movs	r2, #7
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43da      	mvns	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	400a      	ands	r2, r1
 8002064:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6919      	ldr	r1, [r3, #16]
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	b29b      	uxth	r3, r3
 8002076:	4618      	mov	r0, r3
 8002078:	4603      	mov	r3, r0
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	4403      	add	r3, r0
 800207e:	409a      	lsls	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2b06      	cmp	r3, #6
 800208e:	d824      	bhi.n	80020da <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	3b05      	subs	r3, #5
 80020a2:	221f      	movs	r2, #31
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43da      	mvns	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	400a      	ands	r2, r1
 80020b0:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	b29b      	uxth	r3, r3
 80020be:	4618      	mov	r0, r3
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	4613      	mov	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	3b05      	subs	r3, #5
 80020cc:	fa00 f203 	lsl.w	r2, r0, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	635a      	str	r2, [r3, #52]	@ 0x34
 80020d8:	e04c      	b.n	8002174 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b0c      	cmp	r3, #12
 80020e0:	d824      	bhi.n	800212c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	3b23      	subs	r3, #35	@ 0x23
 80020f4:	221f      	movs	r2, #31
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43da      	mvns	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	400a      	ands	r2, r1
 8002102:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	b29b      	uxth	r3, r3
 8002110:	4618      	mov	r0, r3
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	3b23      	subs	r3, #35	@ 0x23
 800211e:	fa00 f203 	lsl.w	r2, r0, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	430a      	orrs	r2, r1
 8002128:	631a      	str	r2, [r3, #48]	@ 0x30
 800212a:	e023      	b.n	8002174 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	4613      	mov	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	3b41      	subs	r3, #65	@ 0x41
 800213e:	221f      	movs	r2, #31
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43da      	mvns	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	400a      	ands	r2, r1
 800214c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	b29b      	uxth	r3, r3
 800215a:	4618      	mov	r0, r3
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	4613      	mov	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	3b41      	subs	r3, #65	@ 0x41
 8002168:	fa00 f203 	lsl.w	r2, r0, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	430a      	orrs	r2, r1
 8002172:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a30      	ldr	r2, [pc, #192]	@ (800223c <HAL_ADC_ConfigChannel+0x29c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d10a      	bne.n	8002194 <HAL_ADC_ConfigChannel+0x1f4>
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002186:	d105      	bne.n	8002194 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002188:	4b2d      	ldr	r3, [pc, #180]	@ (8002240 <HAL_ADC_ConfigChannel+0x2a0>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	4a2c      	ldr	r2, [pc, #176]	@ (8002240 <HAL_ADC_ConfigChannel+0x2a0>)
 800218e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002192:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a28      	ldr	r2, [pc, #160]	@ (800223c <HAL_ADC_ConfigChannel+0x29c>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d10f      	bne.n	80021be <HAL_ADC_ConfigChannel+0x21e>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2b12      	cmp	r3, #18
 80021a4:	d10b      	bne.n	80021be <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80021a6:	4b26      	ldr	r3, [pc, #152]	@ (8002240 <HAL_ADC_ConfigChannel+0x2a0>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	4a25      	ldr	r2, [pc, #148]	@ (8002240 <HAL_ADC_ConfigChannel+0x2a0>)
 80021ac:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80021b0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80021b2:	4b23      	ldr	r3, [pc, #140]	@ (8002240 <HAL_ADC_ConfigChannel+0x2a0>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	4a22      	ldr	r2, [pc, #136]	@ (8002240 <HAL_ADC_ConfigChannel+0x2a0>)
 80021b8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80021bc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a1e      	ldr	r2, [pc, #120]	@ (800223c <HAL_ADC_ConfigChannel+0x29c>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d12b      	bne.n	8002220 <HAL_ADC_ConfigChannel+0x280>
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a1a      	ldr	r2, [pc, #104]	@ (8002238 <HAL_ADC_ConfigChannel+0x298>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d003      	beq.n	80021da <HAL_ADC_ConfigChannel+0x23a>
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2b11      	cmp	r3, #17
 80021d8:	d122      	bne.n	8002220 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80021da:	4b19      	ldr	r3, [pc, #100]	@ (8002240 <HAL_ADC_ConfigChannel+0x2a0>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	4a18      	ldr	r2, [pc, #96]	@ (8002240 <HAL_ADC_ConfigChannel+0x2a0>)
 80021e0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80021e4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80021e6:	4b16      	ldr	r3, [pc, #88]	@ (8002240 <HAL_ADC_ConfigChannel+0x2a0>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	4a15      	ldr	r2, [pc, #84]	@ (8002240 <HAL_ADC_ConfigChannel+0x2a0>)
 80021ec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80021f0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a10      	ldr	r2, [pc, #64]	@ (8002238 <HAL_ADC_ConfigChannel+0x298>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d111      	bne.n	8002220 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80021fc:	4b11      	ldr	r3, [pc, #68]	@ (8002244 <HAL_ADC_ConfigChannel+0x2a4>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a11      	ldr	r2, [pc, #68]	@ (8002248 <HAL_ADC_ConfigChannel+0x2a8>)
 8002202:	fba2 2303 	umull	r2, r3, r2, r3
 8002206:	0c9a      	lsrs	r2, r3, #18
 8002208:	4613      	mov	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002212:	e002      	b.n	800221a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	3b01      	subs	r3, #1
 8002218:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1f9      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	10000012 	.word	0x10000012
 800223c:	40012000 	.word	0x40012000
 8002240:	40012300 	.word	0x40012300
 8002244:	20000008 	.word	0x20000008
 8002248:	431bde83 	.word	0x431bde83

0800224c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002254:	4b78      	ldr	r3, [pc, #480]	@ (8002438 <ADC_Init+0x1ec>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	4a77      	ldr	r2, [pc, #476]	@ (8002438 <ADC_Init+0x1ec>)
 800225a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800225e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002260:	4b75      	ldr	r3, [pc, #468]	@ (8002438 <ADC_Init+0x1ec>)
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	4973      	ldr	r1, [pc, #460]	@ (8002438 <ADC_Init+0x1ec>)
 800226a:	4313      	orrs	r3, r2
 800226c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800227c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6859      	ldr	r1, [r3, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	021a      	lsls	r2, r3, #8
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	430a      	orrs	r2, r1
 8002290:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80022a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6859      	ldr	r1, [r3, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689a      	ldr	r2, [r3, #8]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6899      	ldr	r1, [r3, #8]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68da      	ldr	r2, [r3, #12]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022da:	4a58      	ldr	r2, [pc, #352]	@ (800243c <ADC_Init+0x1f0>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d022      	beq.n	8002326 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6899      	ldr	r1, [r3, #8]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002310:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6899      	ldr	r1, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	430a      	orrs	r2, r1
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	e00f      	b.n	8002346 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002334:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002344:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 0202 	bic.w	r2, r2, #2
 8002354:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6899      	ldr	r1, [r3, #8]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	005a      	lsls	r2, r3, #1
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d01b      	beq.n	80023ac <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002382:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002392:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6859      	ldr	r1, [r3, #4]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239e:	3b01      	subs	r3, #1
 80023a0:	035a      	lsls	r2, r3, #13
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	e007      	b.n	80023bc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80023ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	051a      	lsls	r2, r3, #20
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80023f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6899      	ldr	r1, [r3, #8]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80023fe:	025a      	lsls	r2, r3, #9
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	430a      	orrs	r2, r1
 8002406:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689a      	ldr	r2, [r3, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002416:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6899      	ldr	r1, [r3, #8]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	029a      	lsls	r2, r3, #10
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	430a      	orrs	r2, r1
 800242a:	609a      	str	r2, [r3, #8]
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	40012300 	.word	0x40012300
 800243c:	0f000001 	.word	0x0f000001

08002440 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800244c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002452:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002456:	2b00      	cmp	r3, #0
 8002458:	d13c      	bne.n	80024d4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d12b      	bne.n	80024cc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002478:	2b00      	cmp	r3, #0
 800247a:	d127      	bne.n	80024cc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002482:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002486:	2b00      	cmp	r3, #0
 8002488:	d006      	beq.n	8002498 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002494:	2b00      	cmp	r3, #0
 8002496:	d119      	bne.n	80024cc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 0220 	bic.w	r2, r2, #32
 80024a6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d105      	bne.n	80024cc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c4:	f043 0201 	orr.w	r2, r3, #1
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f7ff fd49 	bl	8001f64 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80024d2:	e00e      	b.n	80024f2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d8:	f003 0310 	and.w	r3, r3, #16
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d003      	beq.n	80024e8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f7ff fd53 	bl	8001f8c <HAL_ADC_ErrorCallback>
}
 80024e6:	e004      	b.n	80024f2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	4798      	blx	r3
}
 80024f2:	bf00      	nop
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b084      	sub	sp, #16
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002506:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f7ff fd35 	bl	8001f78 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800250e:	bf00      	nop
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b084      	sub	sp, #16
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002522:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2240      	movs	r2, #64	@ 0x40
 8002528:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252e:	f043 0204 	orr.w	r2, r3, #4
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f7ff fd28 	bl	8001f8c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800253c:	bf00      	nop
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e0ed      	b.n	8002732 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 3020 	ldrb.w	r3, [r3, #32]
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d102      	bne.n	8002568 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7fe faf6 	bl	8000b54 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0201 	orr.w	r2, r2, #1
 8002576:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002578:	f7ff fb86 	bl	8001c88 <HAL_GetTick>
 800257c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800257e:	e012      	b.n	80025a6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002580:	f7ff fb82 	bl	8001c88 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b0a      	cmp	r3, #10
 800258c:	d90b      	bls.n	80025a6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002592:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2205      	movs	r2, #5
 800259e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e0c5      	b.n	8002732 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0e5      	beq.n	8002580 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 0202 	bic.w	r2, r2, #2
 80025c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025c4:	f7ff fb60 	bl	8001c88 <HAL_GetTick>
 80025c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025ca:	e012      	b.n	80025f2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025cc:	f7ff fb5c 	bl	8001c88 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b0a      	cmp	r3, #10
 80025d8:	d90b      	bls.n	80025f2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025de:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2205      	movs	r2, #5
 80025ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e09f      	b.n	8002732 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1e5      	bne.n	80025cc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	7e1b      	ldrb	r3, [r3, #24]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d108      	bne.n	800261a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	e007      	b.n	800262a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002628:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	7e5b      	ldrb	r3, [r3, #25]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d108      	bne.n	8002644 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	e007      	b.n	8002654 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002652:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	7e9b      	ldrb	r3, [r3, #26]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d108      	bne.n	800266e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f042 0220 	orr.w	r2, r2, #32
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	e007      	b.n	800267e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 0220 	bic.w	r2, r2, #32
 800267c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	7edb      	ldrb	r3, [r3, #27]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d108      	bne.n	8002698 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 0210 	bic.w	r2, r2, #16
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	e007      	b.n	80026a8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 0210 	orr.w	r2, r2, #16
 80026a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	7f1b      	ldrb	r3, [r3, #28]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d108      	bne.n	80026c2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0208 	orr.w	r2, r2, #8
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	e007      	b.n	80026d2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0208 	bic.w	r2, r2, #8
 80026d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	7f5b      	ldrb	r3, [r3, #29]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d108      	bne.n	80026ec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f042 0204 	orr.w	r2, r2, #4
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	e007      	b.n	80026fc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0204 	bic.w	r2, r2, #4
 80026fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	431a      	orrs	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	ea42 0103 	orr.w	r1, r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	1e5a      	subs	r2, r3, #1
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	430a      	orrs	r2, r1
 8002720:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b08a      	sub	sp, #40	@ 0x28
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002742:	2300      	movs	r3, #0
 8002744:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002776:	6a3b      	ldr	r3, [r7, #32]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b00      	cmp	r3, #0
 800277e:	d07c      	beq.n	800287a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	d023      	beq.n	80027d2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2201      	movs	r2, #1
 8002790:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d003      	beq.n	80027a4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 f983 	bl	8002aa8 <HAL_CAN_TxMailbox0CompleteCallback>
 80027a2:	e016      	b.n	80027d2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d004      	beq.n	80027b8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80027ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80027b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80027b6:	e00c      	b.n	80027d2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d004      	beq.n	80027cc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80027c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80027ca:	e002      	b.n	80027d2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 f989 	bl	8002ae4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d024      	beq.n	8002826 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027e4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 f963 	bl	8002abc <HAL_CAN_TxMailbox1CompleteCallback>
 80027f6:	e016      	b.n	8002826 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d004      	beq.n	800280c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002804:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002808:	627b      	str	r3, [r7, #36]	@ 0x24
 800280a:	e00c      	b.n	8002826 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002812:	2b00      	cmp	r3, #0
 8002814:	d004      	beq.n	8002820 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002818:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800281c:	627b      	str	r3, [r7, #36]	@ 0x24
 800281e:	e002      	b.n	8002826 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 f969 	bl	8002af8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d024      	beq.n	800287a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002838:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 f943 	bl	8002ad0 <HAL_CAN_TxMailbox2CompleteCallback>
 800284a:	e016      	b.n	800287a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d004      	beq.n	8002860 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002858:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800285c:	627b      	str	r3, [r7, #36]	@ 0x24
 800285e:	e00c      	b.n	800287a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d004      	beq.n	8002874 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800286a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002870:	627b      	str	r3, [r7, #36]	@ 0x24
 8002872:	e002      	b.n	800287a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 f949 	bl	8002b0c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800287a:	6a3b      	ldr	r3, [r7, #32]
 800287c:	f003 0308 	and.w	r3, r3, #8
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00c      	beq.n	800289e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	f003 0310 	and.w	r3, r3, #16
 800288a:	2b00      	cmp	r3, #0
 800288c:	d007      	beq.n	800289e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800288e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002890:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002894:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2210      	movs	r2, #16
 800289c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800289e:	6a3b      	ldr	r3, [r7, #32]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00b      	beq.n	80028c0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f003 0308 	and.w	r3, r3, #8
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d006      	beq.n	80028c0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2208      	movs	r2, #8
 80028b8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 f93a 	bl	8002b34 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80028c0:	6a3b      	ldr	r3, [r7, #32]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d009      	beq.n	80028de <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f003 0303 	and.w	r3, r3, #3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d002      	beq.n	80028de <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 f921 	bl	8002b20 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80028de:	6a3b      	ldr	r3, [r7, #32]
 80028e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00c      	beq.n	8002902 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	f003 0310 	and.w	r3, r3, #16
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d007      	beq.n	8002902 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80028f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028f8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2210      	movs	r2, #16
 8002900:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002902:	6a3b      	ldr	r3, [r7, #32]
 8002904:	f003 0320 	and.w	r3, r3, #32
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00b      	beq.n	8002924 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	2b00      	cmp	r3, #0
 8002914:	d006      	beq.n	8002924 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2208      	movs	r2, #8
 800291c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 f91c 	bl	8002b5c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002924:	6a3b      	ldr	r3, [r7, #32]
 8002926:	f003 0310 	and.w	r3, r3, #16
 800292a:	2b00      	cmp	r3, #0
 800292c:	d009      	beq.n	8002942 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	f003 0303 	and.w	r3, r3, #3
 8002938:	2b00      	cmp	r3, #0
 800293a:	d002      	beq.n	8002942 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 f903 	bl	8002b48 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00b      	beq.n	8002964 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f003 0310 	and.w	r3, r3, #16
 8002952:	2b00      	cmp	r3, #0
 8002954:	d006      	beq.n	8002964 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2210      	movs	r2, #16
 800295c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f906 	bl	8002b70 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002964:	6a3b      	ldr	r3, [r7, #32]
 8002966:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00b      	beq.n	8002986 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	f003 0308 	and.w	r3, r3, #8
 8002974:	2b00      	cmp	r3, #0
 8002976:	d006      	beq.n	8002986 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2208      	movs	r2, #8
 800297e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 f8ff 	bl	8002b84 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002986:	6a3b      	ldr	r3, [r7, #32]
 8002988:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d07b      	beq.n	8002a88 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	f003 0304 	and.w	r3, r3, #4
 8002996:	2b00      	cmp	r3, #0
 8002998:	d072      	beq.n	8002a80 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800299a:	6a3b      	ldr	r3, [r7, #32]
 800299c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d008      	beq.n	80029b6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80029ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b0:	f043 0301 	orr.w	r3, r3, #1
 80029b4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d008      	beq.n	80029d2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80029ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029cc:	f043 0302 	orr.w	r3, r3, #2
 80029d0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80029d2:	6a3b      	ldr	r3, [r7, #32]
 80029d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d008      	beq.n	80029ee <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80029e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e8:	f043 0304 	orr.w	r3, r3, #4
 80029ec:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80029ee:	6a3b      	ldr	r3, [r7, #32]
 80029f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d043      	beq.n	8002a80 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d03e      	beq.n	8002a80 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a08:	2b60      	cmp	r3, #96	@ 0x60
 8002a0a:	d02b      	beq.n	8002a64 <HAL_CAN_IRQHandler+0x32a>
 8002a0c:	2b60      	cmp	r3, #96	@ 0x60
 8002a0e:	d82e      	bhi.n	8002a6e <HAL_CAN_IRQHandler+0x334>
 8002a10:	2b50      	cmp	r3, #80	@ 0x50
 8002a12:	d022      	beq.n	8002a5a <HAL_CAN_IRQHandler+0x320>
 8002a14:	2b50      	cmp	r3, #80	@ 0x50
 8002a16:	d82a      	bhi.n	8002a6e <HAL_CAN_IRQHandler+0x334>
 8002a18:	2b40      	cmp	r3, #64	@ 0x40
 8002a1a:	d019      	beq.n	8002a50 <HAL_CAN_IRQHandler+0x316>
 8002a1c:	2b40      	cmp	r3, #64	@ 0x40
 8002a1e:	d826      	bhi.n	8002a6e <HAL_CAN_IRQHandler+0x334>
 8002a20:	2b30      	cmp	r3, #48	@ 0x30
 8002a22:	d010      	beq.n	8002a46 <HAL_CAN_IRQHandler+0x30c>
 8002a24:	2b30      	cmp	r3, #48	@ 0x30
 8002a26:	d822      	bhi.n	8002a6e <HAL_CAN_IRQHandler+0x334>
 8002a28:	2b10      	cmp	r3, #16
 8002a2a:	d002      	beq.n	8002a32 <HAL_CAN_IRQHandler+0x2f8>
 8002a2c:	2b20      	cmp	r3, #32
 8002a2e:	d005      	beq.n	8002a3c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002a30:	e01d      	b.n	8002a6e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a34:	f043 0308 	orr.w	r3, r3, #8
 8002a38:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a3a:	e019      	b.n	8002a70 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3e:	f043 0310 	orr.w	r3, r3, #16
 8002a42:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a44:	e014      	b.n	8002a70 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a48:	f043 0320 	orr.w	r3, r3, #32
 8002a4c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a4e:	e00f      	b.n	8002a70 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a56:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a58:	e00a      	b.n	8002a70 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a60:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a62:	e005      	b.n	8002a70 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a6a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a6c:	e000      	b.n	8002a70 <HAL_CAN_IRQHandler+0x336>
            break;
 8002a6e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	699a      	ldr	r2, [r3, #24]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002a7e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2204      	movs	r2, #4
 8002a86:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d008      	beq.n	8002aa0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a94:	431a      	orrs	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f87c 	bl	8002b98 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002aa0:	bf00      	nop
 8002aa2:	3728      	adds	r7, #40	@ 0x28
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002bec <__NVIC_SetPriorityGrouping+0x40>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bc8:	4013      	ands	r3, r2
 8002bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002bd4:	4b06      	ldr	r3, [pc, #24]	@ (8002bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bda:	4a04      	ldr	r2, [pc, #16]	@ (8002bec <__NVIC_SetPriorityGrouping+0x40>)
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	60d3      	str	r3, [r2, #12]
}
 8002be0:	bf00      	nop
 8002be2:	3714      	adds	r7, #20
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	e000ed00 	.word	0xe000ed00
 8002bf0:	05fa0000 	.word	0x05fa0000

08002bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bf8:	4b04      	ldr	r3, [pc, #16]	@ (8002c0c <__NVIC_GetPriorityGrouping+0x18>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	0a1b      	lsrs	r3, r3, #8
 8002bfe:	f003 0307 	and.w	r3, r3, #7
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	e000ed00 	.word	0xe000ed00

08002c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	4603      	mov	r3, r0
 8002c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	db0b      	blt.n	8002c3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c22:	79fb      	ldrb	r3, [r7, #7]
 8002c24:	f003 021f 	and.w	r2, r3, #31
 8002c28:	4907      	ldr	r1, [pc, #28]	@ (8002c48 <__NVIC_EnableIRQ+0x38>)
 8002c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2e:	095b      	lsrs	r3, r3, #5
 8002c30:	2001      	movs	r0, #1
 8002c32:	fa00 f202 	lsl.w	r2, r0, r2
 8002c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	e000e100 	.word	0xe000e100

08002c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	6039      	str	r1, [r7, #0]
 8002c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	db0a      	blt.n	8002c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	490c      	ldr	r1, [pc, #48]	@ (8002c98 <__NVIC_SetPriority+0x4c>)
 8002c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6a:	0112      	lsls	r2, r2, #4
 8002c6c:	b2d2      	uxtb	r2, r2
 8002c6e:	440b      	add	r3, r1
 8002c70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c74:	e00a      	b.n	8002c8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	4908      	ldr	r1, [pc, #32]	@ (8002c9c <__NVIC_SetPriority+0x50>)
 8002c7c:	79fb      	ldrb	r3, [r7, #7]
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	3b04      	subs	r3, #4
 8002c84:	0112      	lsls	r2, r2, #4
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	440b      	add	r3, r1
 8002c8a:	761a      	strb	r2, [r3, #24]
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	e000e100 	.word	0xe000e100
 8002c9c:	e000ed00 	.word	0xe000ed00

08002ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b089      	sub	sp, #36	@ 0x24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f003 0307 	and.w	r3, r3, #7
 8002cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f1c3 0307 	rsb	r3, r3, #7
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	bf28      	it	cs
 8002cbe:	2304      	movcs	r3, #4
 8002cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	2b06      	cmp	r3, #6
 8002cc8:	d902      	bls.n	8002cd0 <NVIC_EncodePriority+0x30>
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	3b03      	subs	r3, #3
 8002cce:	e000      	b.n	8002cd2 <NVIC_EncodePriority+0x32>
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43da      	mvns	r2, r3
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	401a      	ands	r2, r3
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf2:	43d9      	mvns	r1, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cf8:	4313      	orrs	r3, r2
         );
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3724      	adds	r7, #36	@ 0x24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
	...

08002d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3b01      	subs	r3, #1
 8002d14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d18:	d301      	bcc.n	8002d1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e00f      	b.n	8002d3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d48 <SysTick_Config+0x40>)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3b01      	subs	r3, #1
 8002d24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d26:	210f      	movs	r1, #15
 8002d28:	f04f 30ff 	mov.w	r0, #4294967295
 8002d2c:	f7ff ff8e 	bl	8002c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d30:	4b05      	ldr	r3, [pc, #20]	@ (8002d48 <SysTick_Config+0x40>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d36:	4b04      	ldr	r3, [pc, #16]	@ (8002d48 <SysTick_Config+0x40>)
 8002d38:	2207      	movs	r2, #7
 8002d3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	e000e010 	.word	0xe000e010

08002d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f7ff ff29 	bl	8002bac <__NVIC_SetPriorityGrouping>
}
 8002d5a:	bf00      	nop
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b086      	sub	sp, #24
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	4603      	mov	r3, r0
 8002d6a:	60b9      	str	r1, [r7, #8]
 8002d6c:	607a      	str	r2, [r7, #4]
 8002d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d70:	2300      	movs	r3, #0
 8002d72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d74:	f7ff ff3e 	bl	8002bf4 <__NVIC_GetPriorityGrouping>
 8002d78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	68b9      	ldr	r1, [r7, #8]
 8002d7e:	6978      	ldr	r0, [r7, #20]
 8002d80:	f7ff ff8e 	bl	8002ca0 <NVIC_EncodePriority>
 8002d84:	4602      	mov	r2, r0
 8002d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d8a:	4611      	mov	r1, r2
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff ff5d 	bl	8002c4c <__NVIC_SetPriority>
}
 8002d92:	bf00      	nop
 8002d94:	3718      	adds	r7, #24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b082      	sub	sp, #8
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	4603      	mov	r3, r0
 8002da2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff ff31 	bl	8002c10 <__NVIC_EnableIRQ>
}
 8002dae:	bf00      	nop
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b082      	sub	sp, #8
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7ff ffa2 	bl	8002d08 <SysTick_Config>
 8002dc4:	4603      	mov	r3, r0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b082      	sub	sp, #8
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e014      	b.n	8002e0a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	791b      	ldrb	r3, [r3, #4]
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d105      	bne.n	8002df6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f7fd ff2d 	bl	8000c50 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2202      	movs	r2, #2
 8002dfa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b082      	sub	sp, #8
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e28:	d120      	bne.n	8002e6c <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e38:	d118      	bne.n	8002e6c <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2204      	movs	r2, #4
 8002e3e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	f043 0201 	orr.w	r2, r3, #1
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e54:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e64:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f82d 	bl	8002ec6 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e7a:	d120      	bne.n	8002ebe <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e82:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e8a:	d118      	bne.n	8002ebe <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2204      	movs	r2, #4
 8002e90:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	f043 0202 	orr.w	r2, r3, #2
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002ea6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8002eb6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f85d 	bl	8002f78 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8002ebe:	bf00      	nop
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b087      	sub	sp, #28
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	60f8      	str	r0, [r7, #12]
 8002ee2:	60b9      	str	r1, [r7, #8]
 8002ee4:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	795b      	ldrb	r3, [r3, #5]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d101      	bne.n	8002ef2 <HAL_DAC_ConfigChannel+0x18>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	e03c      	b.n	8002f6c <HAL_DAC_ConfigChannel+0x92>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2202      	movs	r2, #2
 8002efc:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f003 0310 	and.w	r3, r3, #16
 8002f0c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	43db      	mvns	r3, r3
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f003 0310 	and.w	r3, r3, #16
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6819      	ldr	r1, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f003 0310 	and.w	r3, r3, #16
 8002f4e:	22c0      	movs	r2, #192	@ 0xc0
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	43da      	mvns	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	400a      	ands	r2, r1
 8002f5c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2201      	movs	r2, #1
 8002f62:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	371c      	adds	r7, #28
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f94:	2300      	movs	r3, #0
 8002f96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f98:	f7fe fe76 	bl	8001c88 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e099      	b.n	80030dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2202      	movs	r2, #2
 8002fac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 0201 	bic.w	r2, r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fc8:	e00f      	b.n	8002fea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fca:	f7fe fe5d 	bl	8001c88 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b05      	cmp	r3, #5
 8002fd6:	d908      	bls.n	8002fea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2203      	movs	r2, #3
 8002fe2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e078      	b.n	80030dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1e8      	bne.n	8002fca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	4b38      	ldr	r3, [pc, #224]	@ (80030e4 <HAL_DMA_Init+0x158>)
 8003004:	4013      	ands	r3, r2
 8003006:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003016:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003022:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800302e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	4313      	orrs	r3, r2
 800303a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003040:	2b04      	cmp	r3, #4
 8003042:	d107      	bne.n	8003054 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304c:	4313      	orrs	r3, r2
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	4313      	orrs	r3, r2
 8003052:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	f023 0307 	bic.w	r3, r3, #7
 800306a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	4313      	orrs	r3, r2
 8003074:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307a:	2b04      	cmp	r3, #4
 800307c:	d117      	bne.n	80030ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	4313      	orrs	r3, r2
 8003086:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00e      	beq.n	80030ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 fa77 	bl	8003584 <DMA_CheckFifoParam>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d008      	beq.n	80030ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2240      	movs	r2, #64	@ 0x40
 80030a0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80030aa:	2301      	movs	r3, #1
 80030ac:	e016      	b.n	80030dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 fa2e 	bl	8003518 <DMA_CalcBaseAndBitshift>
 80030bc:	4603      	mov	r3, r0
 80030be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c4:	223f      	movs	r2, #63	@ 0x3f
 80030c6:	409a      	lsls	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3718      	adds	r7, #24
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	e010803f 	.word	0xe010803f

080030e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
 80030f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030f6:	2300      	movs	r3, #0
 80030f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003106:	2b01      	cmp	r3, #1
 8003108:	d101      	bne.n	800310e <HAL_DMA_Start_IT+0x26>
 800310a:	2302      	movs	r3, #2
 800310c:	e048      	b.n	80031a0 <HAL_DMA_Start_IT+0xb8>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b01      	cmp	r3, #1
 8003120:	d137      	bne.n	8003192 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2202      	movs	r2, #2
 8003126:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	68b9      	ldr	r1, [r7, #8]
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 f9c0 	bl	80034bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003140:	223f      	movs	r2, #63	@ 0x3f
 8003142:	409a      	lsls	r2, r3
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f042 0216 	orr.w	r2, r2, #22
 8003156:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	695a      	ldr	r2, [r3, #20]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003166:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316c:	2b00      	cmp	r3, #0
 800316e:	d007      	beq.n	8003180 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0208 	orr.w	r2, r2, #8
 800317e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0201 	orr.w	r2, r2, #1
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	e005      	b.n	800319e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800319a:	2302      	movs	r3, #2
 800319c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800319e:	7dfb      	ldrb	r3, [r7, #23]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3718      	adds	r7, #24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80031b0:	2300      	movs	r3, #0
 80031b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80031b4:	4b8e      	ldr	r3, [pc, #568]	@ (80033f0 <HAL_DMA_IRQHandler+0x248>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a8e      	ldr	r2, [pc, #568]	@ (80033f4 <HAL_DMA_IRQHandler+0x24c>)
 80031ba:	fba2 2303 	umull	r2, r3, r2, r3
 80031be:	0a9b      	lsrs	r3, r3, #10
 80031c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d2:	2208      	movs	r2, #8
 80031d4:	409a      	lsls	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	4013      	ands	r3, r2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d01a      	beq.n	8003214 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0304 	and.w	r3, r3, #4
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d013      	beq.n	8003214 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 0204 	bic.w	r2, r2, #4
 80031fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003200:	2208      	movs	r2, #8
 8003202:	409a      	lsls	r2, r3
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800320c:	f043 0201 	orr.w	r2, r3, #1
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003218:	2201      	movs	r2, #1
 800321a:	409a      	lsls	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	4013      	ands	r3, r2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d012      	beq.n	800324a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00b      	beq.n	800324a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003236:	2201      	movs	r2, #1
 8003238:	409a      	lsls	r2, r3
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003242:	f043 0202 	orr.w	r2, r3, #2
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800324e:	2204      	movs	r2, #4
 8003250:	409a      	lsls	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	4013      	ands	r3, r2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d012      	beq.n	8003280 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00b      	beq.n	8003280 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800326c:	2204      	movs	r2, #4
 800326e:	409a      	lsls	r2, r3
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003278:	f043 0204 	orr.w	r2, r3, #4
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003284:	2210      	movs	r2, #16
 8003286:	409a      	lsls	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4013      	ands	r3, r2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d043      	beq.n	8003318 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0308 	and.w	r3, r3, #8
 800329a:	2b00      	cmp	r3, #0
 800329c:	d03c      	beq.n	8003318 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a2:	2210      	movs	r2, #16
 80032a4:	409a      	lsls	r2, r3
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d018      	beq.n	80032ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d108      	bne.n	80032d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d024      	beq.n	8003318 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	4798      	blx	r3
 80032d6:	e01f      	b.n	8003318 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d01b      	beq.n	8003318 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	4798      	blx	r3
 80032e8:	e016      	b.n	8003318 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d107      	bne.n	8003308 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0208 	bic.w	r2, r2, #8
 8003306:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330c:	2b00      	cmp	r3, #0
 800330e:	d003      	beq.n	8003318 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800331c:	2220      	movs	r2, #32
 800331e:	409a      	lsls	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4013      	ands	r3, r2
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 808f 	beq.w	8003448 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0310 	and.w	r3, r3, #16
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 8087 	beq.w	8003448 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800333e:	2220      	movs	r2, #32
 8003340:	409a      	lsls	r2, r3
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b05      	cmp	r3, #5
 8003350:	d136      	bne.n	80033c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0216 	bic.w	r2, r2, #22
 8003360:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	695a      	ldr	r2, [r3, #20]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003370:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003376:	2b00      	cmp	r3, #0
 8003378:	d103      	bne.n	8003382 <HAL_DMA_IRQHandler+0x1da>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800337e:	2b00      	cmp	r3, #0
 8003380:	d007      	beq.n	8003392 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 0208 	bic.w	r2, r2, #8
 8003390:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003396:	223f      	movs	r2, #63	@ 0x3f
 8003398:	409a      	lsls	r2, r3
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d07e      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	4798      	blx	r3
        }
        return;
 80033be:	e079      	b.n	80034b4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d01d      	beq.n	800340a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10d      	bne.n	80033f8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d031      	beq.n	8003448 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	4798      	blx	r3
 80033ec:	e02c      	b.n	8003448 <HAL_DMA_IRQHandler+0x2a0>
 80033ee:	bf00      	nop
 80033f0:	20000008 	.word	0x20000008
 80033f4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d023      	beq.n	8003448 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	4798      	blx	r3
 8003408:	e01e      	b.n	8003448 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10f      	bne.n	8003438 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 0210 	bic.w	r2, r2, #16
 8003426:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800344c:	2b00      	cmp	r3, #0
 800344e:	d032      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	2b00      	cmp	r3, #0
 800345a:	d022      	beq.n	80034a2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2205      	movs	r2, #5
 8003460:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 0201 	bic.w	r2, r2, #1
 8003472:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	3301      	adds	r3, #1
 8003478:	60bb      	str	r3, [r7, #8]
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	429a      	cmp	r2, r3
 800347e:	d307      	bcc.n	8003490 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1f2      	bne.n	8003474 <HAL_DMA_IRQHandler+0x2cc>
 800348e:	e000      	b.n	8003492 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003490:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d005      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	4798      	blx	r3
 80034b2:	e000      	b.n	80034b6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80034b4:	bf00      	nop
    }
  }
}
 80034b6:	3718      	adds	r7, #24
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
 80034c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80034d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	2b40      	cmp	r3, #64	@ 0x40
 80034e8:	d108      	bne.n	80034fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80034fa:	e007      	b.n	800350c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68ba      	ldr	r2, [r7, #8]
 8003502:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	60da      	str	r2, [r3, #12]
}
 800350c:	bf00      	nop
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	b2db      	uxtb	r3, r3
 8003526:	3b10      	subs	r3, #16
 8003528:	4a13      	ldr	r2, [pc, #76]	@ (8003578 <DMA_CalcBaseAndBitshift+0x60>)
 800352a:	fba2 2303 	umull	r2, r3, r2, r3
 800352e:	091b      	lsrs	r3, r3, #4
 8003530:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003532:	4a12      	ldr	r2, [pc, #72]	@ (800357c <DMA_CalcBaseAndBitshift+0x64>)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4413      	add	r3, r2
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	461a      	mov	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2b03      	cmp	r3, #3
 8003544:	d908      	bls.n	8003558 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	461a      	mov	r2, r3
 800354c:	4b0c      	ldr	r3, [pc, #48]	@ (8003580 <DMA_CalcBaseAndBitshift+0x68>)
 800354e:	4013      	ands	r3, r2
 8003550:	1d1a      	adds	r2, r3, #4
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	659a      	str	r2, [r3, #88]	@ 0x58
 8003556:	e006      	b.n	8003566 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	461a      	mov	r2, r3
 800355e:	4b08      	ldr	r3, [pc, #32]	@ (8003580 <DMA_CalcBaseAndBitshift+0x68>)
 8003560:	4013      	ands	r3, r2
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800356a:	4618      	mov	r0, r3
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	aaaaaaab 	.word	0xaaaaaaab
 800357c:	080066dc 	.word	0x080066dc
 8003580:	fffffc00 	.word	0xfffffc00

08003584 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800358c:	2300      	movs	r3, #0
 800358e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003594:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d11f      	bne.n	80035de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	2b03      	cmp	r3, #3
 80035a2:	d856      	bhi.n	8003652 <DMA_CheckFifoParam+0xce>
 80035a4:	a201      	add	r2, pc, #4	@ (adr r2, 80035ac <DMA_CheckFifoParam+0x28>)
 80035a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035aa:	bf00      	nop
 80035ac:	080035bd 	.word	0x080035bd
 80035b0:	080035cf 	.word	0x080035cf
 80035b4:	080035bd 	.word	0x080035bd
 80035b8:	08003653 	.word	0x08003653
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d046      	beq.n	8003656 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035cc:	e043      	b.n	8003656 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80035d6:	d140      	bne.n	800365a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035dc:	e03d      	b.n	800365a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035e6:	d121      	bne.n	800362c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	2b03      	cmp	r3, #3
 80035ec:	d837      	bhi.n	800365e <DMA_CheckFifoParam+0xda>
 80035ee:	a201      	add	r2, pc, #4	@ (adr r2, 80035f4 <DMA_CheckFifoParam+0x70>)
 80035f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f4:	08003605 	.word	0x08003605
 80035f8:	0800360b 	.word	0x0800360b
 80035fc:	08003605 	.word	0x08003605
 8003600:	0800361d 	.word	0x0800361d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	73fb      	strb	r3, [r7, #15]
      break;
 8003608:	e030      	b.n	800366c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800360e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d025      	beq.n	8003662 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800361a:	e022      	b.n	8003662 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003620:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003624:	d11f      	bne.n	8003666 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800362a:	e01c      	b.n	8003666 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	2b02      	cmp	r3, #2
 8003630:	d903      	bls.n	800363a <DMA_CheckFifoParam+0xb6>
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2b03      	cmp	r3, #3
 8003636:	d003      	beq.n	8003640 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003638:	e018      	b.n	800366c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	73fb      	strb	r3, [r7, #15]
      break;
 800363e:	e015      	b.n	800366c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003644:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00e      	beq.n	800366a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	73fb      	strb	r3, [r7, #15]
      break;
 8003650:	e00b      	b.n	800366a <DMA_CheckFifoParam+0xe6>
      break;
 8003652:	bf00      	nop
 8003654:	e00a      	b.n	800366c <DMA_CheckFifoParam+0xe8>
      break;
 8003656:	bf00      	nop
 8003658:	e008      	b.n	800366c <DMA_CheckFifoParam+0xe8>
      break;
 800365a:	bf00      	nop
 800365c:	e006      	b.n	800366c <DMA_CheckFifoParam+0xe8>
      break;
 800365e:	bf00      	nop
 8003660:	e004      	b.n	800366c <DMA_CheckFifoParam+0xe8>
      break;
 8003662:	bf00      	nop
 8003664:	e002      	b.n	800366c <DMA_CheckFifoParam+0xe8>
      break;   
 8003666:	bf00      	nop
 8003668:	e000      	b.n	800366c <DMA_CheckFifoParam+0xe8>
      break;
 800366a:	bf00      	nop
    }
  } 
  
  return status; 
 800366c:	7bfb      	ldrb	r3, [r7, #15]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3714      	adds	r7, #20
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop

0800367c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800367c:	b480      	push	{r7}
 800367e:	b089      	sub	sp, #36	@ 0x24
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003686:	2300      	movs	r3, #0
 8003688:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800368a:	2300      	movs	r3, #0
 800368c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800368e:	2300      	movs	r3, #0
 8003690:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003692:	2300      	movs	r3, #0
 8003694:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003696:	2300      	movs	r3, #0
 8003698:	61fb      	str	r3, [r7, #28]
 800369a:	e175      	b.n	8003988 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800369c:	2201      	movs	r2, #1
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	4013      	ands	r3, r2
 80036ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	f040 8164 	bne.w	8003982 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f003 0303 	and.w	r3, r3, #3
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d005      	beq.n	80036d2 <HAL_GPIO_Init+0x56>
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f003 0303 	and.w	r3, r3, #3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d130      	bne.n	8003734 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	2203      	movs	r2, #3
 80036de:	fa02 f303 	lsl.w	r3, r2, r3
 80036e2:	43db      	mvns	r3, r3
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	4013      	ands	r3, r2
 80036e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003708:	2201      	movs	r2, #1
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	43db      	mvns	r3, r3
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	4013      	ands	r3, r2
 8003716:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	091b      	lsrs	r3, r3, #4
 800371e:	f003 0201 	and.w	r2, r3, #1
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	4313      	orrs	r3, r2
 800372c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f003 0303 	and.w	r3, r3, #3
 800373c:	2b03      	cmp	r3, #3
 800373e:	d017      	beq.n	8003770 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	2203      	movs	r2, #3
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	43db      	mvns	r3, r3
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	4013      	ands	r3, r2
 8003756:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	4313      	orrs	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f003 0303 	and.w	r3, r3, #3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d123      	bne.n	80037c4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	08da      	lsrs	r2, r3, #3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3208      	adds	r2, #8
 8003784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003788:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	220f      	movs	r2, #15
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	43db      	mvns	r3, r3
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	4013      	ands	r3, r2
 800379e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	691a      	ldr	r2, [r3, #16]
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	f003 0307 	and.w	r3, r3, #7
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	08da      	lsrs	r2, r3, #3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	3208      	adds	r2, #8
 80037be:	69b9      	ldr	r1, [r7, #24]
 80037c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	2203      	movs	r2, #3
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	43db      	mvns	r3, r3
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	4013      	ands	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f003 0203 	and.w	r2, r3, #3
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 80be 	beq.w	8003982 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003806:	4b66      	ldr	r3, [pc, #408]	@ (80039a0 <HAL_GPIO_Init+0x324>)
 8003808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380a:	4a65      	ldr	r2, [pc, #404]	@ (80039a0 <HAL_GPIO_Init+0x324>)
 800380c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003810:	6453      	str	r3, [r2, #68]	@ 0x44
 8003812:	4b63      	ldr	r3, [pc, #396]	@ (80039a0 <HAL_GPIO_Init+0x324>)
 8003814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003816:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800381a:	60fb      	str	r3, [r7, #12]
 800381c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800381e:	4a61      	ldr	r2, [pc, #388]	@ (80039a4 <HAL_GPIO_Init+0x328>)
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	089b      	lsrs	r3, r3, #2
 8003824:	3302      	adds	r3, #2
 8003826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800382a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	f003 0303 	and.w	r3, r3, #3
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	220f      	movs	r2, #15
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	43db      	mvns	r3, r3
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	4013      	ands	r3, r2
 8003840:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a58      	ldr	r2, [pc, #352]	@ (80039a8 <HAL_GPIO_Init+0x32c>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d037      	beq.n	80038ba <HAL_GPIO_Init+0x23e>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a57      	ldr	r2, [pc, #348]	@ (80039ac <HAL_GPIO_Init+0x330>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d031      	beq.n	80038b6 <HAL_GPIO_Init+0x23a>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a56      	ldr	r2, [pc, #344]	@ (80039b0 <HAL_GPIO_Init+0x334>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d02b      	beq.n	80038b2 <HAL_GPIO_Init+0x236>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a55      	ldr	r2, [pc, #340]	@ (80039b4 <HAL_GPIO_Init+0x338>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d025      	beq.n	80038ae <HAL_GPIO_Init+0x232>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a54      	ldr	r2, [pc, #336]	@ (80039b8 <HAL_GPIO_Init+0x33c>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d01f      	beq.n	80038aa <HAL_GPIO_Init+0x22e>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a53      	ldr	r2, [pc, #332]	@ (80039bc <HAL_GPIO_Init+0x340>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d019      	beq.n	80038a6 <HAL_GPIO_Init+0x22a>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a52      	ldr	r2, [pc, #328]	@ (80039c0 <HAL_GPIO_Init+0x344>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d013      	beq.n	80038a2 <HAL_GPIO_Init+0x226>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a51      	ldr	r2, [pc, #324]	@ (80039c4 <HAL_GPIO_Init+0x348>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d00d      	beq.n	800389e <HAL_GPIO_Init+0x222>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a50      	ldr	r2, [pc, #320]	@ (80039c8 <HAL_GPIO_Init+0x34c>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d007      	beq.n	800389a <HAL_GPIO_Init+0x21e>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a4f      	ldr	r2, [pc, #316]	@ (80039cc <HAL_GPIO_Init+0x350>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d101      	bne.n	8003896 <HAL_GPIO_Init+0x21a>
 8003892:	2309      	movs	r3, #9
 8003894:	e012      	b.n	80038bc <HAL_GPIO_Init+0x240>
 8003896:	230a      	movs	r3, #10
 8003898:	e010      	b.n	80038bc <HAL_GPIO_Init+0x240>
 800389a:	2308      	movs	r3, #8
 800389c:	e00e      	b.n	80038bc <HAL_GPIO_Init+0x240>
 800389e:	2307      	movs	r3, #7
 80038a0:	e00c      	b.n	80038bc <HAL_GPIO_Init+0x240>
 80038a2:	2306      	movs	r3, #6
 80038a4:	e00a      	b.n	80038bc <HAL_GPIO_Init+0x240>
 80038a6:	2305      	movs	r3, #5
 80038a8:	e008      	b.n	80038bc <HAL_GPIO_Init+0x240>
 80038aa:	2304      	movs	r3, #4
 80038ac:	e006      	b.n	80038bc <HAL_GPIO_Init+0x240>
 80038ae:	2303      	movs	r3, #3
 80038b0:	e004      	b.n	80038bc <HAL_GPIO_Init+0x240>
 80038b2:	2302      	movs	r3, #2
 80038b4:	e002      	b.n	80038bc <HAL_GPIO_Init+0x240>
 80038b6:	2301      	movs	r3, #1
 80038b8:	e000      	b.n	80038bc <HAL_GPIO_Init+0x240>
 80038ba:	2300      	movs	r3, #0
 80038bc:	69fa      	ldr	r2, [r7, #28]
 80038be:	f002 0203 	and.w	r2, r2, #3
 80038c2:	0092      	lsls	r2, r2, #2
 80038c4:	4093      	lsls	r3, r2
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80038cc:	4935      	ldr	r1, [pc, #212]	@ (80039a4 <HAL_GPIO_Init+0x328>)
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	089b      	lsrs	r3, r3, #2
 80038d2:	3302      	adds	r3, #2
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038da:	4b3d      	ldr	r3, [pc, #244]	@ (80039d0 <HAL_GPIO_Init+0x354>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	43db      	mvns	r3, r3
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	4013      	ands	r3, r2
 80038e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038fe:	4a34      	ldr	r2, [pc, #208]	@ (80039d0 <HAL_GPIO_Init+0x354>)
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003904:	4b32      	ldr	r3, [pc, #200]	@ (80039d0 <HAL_GPIO_Init+0x354>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	43db      	mvns	r3, r3
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4013      	ands	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	4313      	orrs	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003928:	4a29      	ldr	r2, [pc, #164]	@ (80039d0 <HAL_GPIO_Init+0x354>)
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800392e:	4b28      	ldr	r3, [pc, #160]	@ (80039d0 <HAL_GPIO_Init+0x354>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	43db      	mvns	r3, r3
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	4013      	ands	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	4313      	orrs	r3, r2
 8003950:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003952:	4a1f      	ldr	r2, [pc, #124]	@ (80039d0 <HAL_GPIO_Init+0x354>)
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003958:	4b1d      	ldr	r3, [pc, #116]	@ (80039d0 <HAL_GPIO_Init+0x354>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	43db      	mvns	r3, r3
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	4013      	ands	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d003      	beq.n	800397c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	4313      	orrs	r3, r2
 800397a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800397c:	4a14      	ldr	r2, [pc, #80]	@ (80039d0 <HAL_GPIO_Init+0x354>)
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	3301      	adds	r3, #1
 8003986:	61fb      	str	r3, [r7, #28]
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	2b0f      	cmp	r3, #15
 800398c:	f67f ae86 	bls.w	800369c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003990:	bf00      	nop
 8003992:	bf00      	nop
 8003994:	3724      	adds	r7, #36	@ 0x24
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	40023800 	.word	0x40023800
 80039a4:	40013800 	.word	0x40013800
 80039a8:	40020000 	.word	0x40020000
 80039ac:	40020400 	.word	0x40020400
 80039b0:	40020800 	.word	0x40020800
 80039b4:	40020c00 	.word	0x40020c00
 80039b8:	40021000 	.word	0x40021000
 80039bc:	40021400 	.word	0x40021400
 80039c0:	40021800 	.word	0x40021800
 80039c4:	40021c00 	.word	0x40021c00
 80039c8:	40022000 	.word	0x40022000
 80039cc:	40022400 	.word	0x40022400
 80039d0:	40013c00 	.word	0x40013c00

080039d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	460b      	mov	r3, r1
 80039de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	691a      	ldr	r2, [r3, #16]
 80039e4:	887b      	ldrh	r3, [r7, #2]
 80039e6:	4013      	ands	r3, r2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d002      	beq.n	80039f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039ec:	2301      	movs	r3, #1
 80039ee:	73fb      	strb	r3, [r7, #15]
 80039f0:	e001      	b.n	80039f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039f2:	2300      	movs	r3, #0
 80039f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	807b      	strh	r3, [r7, #2]
 8003a10:	4613      	mov	r3, r2
 8003a12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a14:	787b      	ldrb	r3, [r7, #1]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a1a:	887a      	ldrh	r2, [r7, #2]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003a20:	e003      	b.n	8003a2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003a22:	887b      	ldrh	r3, [r7, #2]
 8003a24:	041a      	lsls	r2, r3, #16
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	619a      	str	r2, [r3, #24]
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
	...

08003a38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e07f      	b.n	8003b4a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d106      	bne.n	8003a64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7fd fa94 	bl	8000f8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2224      	movs	r2, #36	@ 0x24
 8003a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f022 0201 	bic.w	r2, r2, #1
 8003a7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003a88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d107      	bne.n	8003ab2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	689a      	ldr	r2, [r3, #8]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003aae:	609a      	str	r2, [r3, #8]
 8003ab0:	e006      	b.n	8003ac0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	689a      	ldr	r2, [r3, #8]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003abe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d104      	bne.n	8003ad2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ad0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	6859      	ldr	r1, [r3, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	4b1d      	ldr	r3, [pc, #116]	@ (8003b54 <HAL_I2C_Init+0x11c>)
 8003ade:	430b      	orrs	r3, r1
 8003ae0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68da      	ldr	r2, [r3, #12]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003af0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	691a      	ldr	r2, [r3, #16]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	69d9      	ldr	r1, [r3, #28]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a1a      	ldr	r2, [r3, #32]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0201 	orr.w	r2, r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2220      	movs	r2, #32
 8003b36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	02008000 	.word	0x02008000

08003b58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b20      	cmp	r3, #32
 8003b6c:	d138      	bne.n	8003be0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d101      	bne.n	8003b7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	e032      	b.n	8003be2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2224      	movs	r2, #36	@ 0x24
 8003b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0201 	bic.w	r2, r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003baa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6819      	ldr	r1, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f042 0201 	orr.w	r2, r2, #1
 8003bca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	e000      	b.n	8003be2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003be0:	2302      	movs	r3, #2
  }
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b085      	sub	sp, #20
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
 8003bf6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b20      	cmp	r3, #32
 8003c02:	d139      	bne.n	8003c78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d101      	bne.n	8003c12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c0e:	2302      	movs	r3, #2
 8003c10:	e033      	b.n	8003c7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2224      	movs	r2, #36	@ 0x24
 8003c1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 0201 	bic.w	r2, r2, #1
 8003c30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003c40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	021b      	lsls	r3, r3, #8
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0201 	orr.w	r2, r2, #1
 8003c62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2220      	movs	r2, #32
 8003c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c74:	2300      	movs	r3, #0
 8003c76:	e000      	b.n	8003c7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c78:	2302      	movs	r3, #2
  }
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3714      	adds	r7, #20
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
	...

08003c88 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003c92:	4b23      	ldr	r3, [pc, #140]	@ (8003d20 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c96:	4a22      	ldr	r2, [pc, #136]	@ (8003d20 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c9e:	4b20      	ldr	r3, [pc, #128]	@ (8003d20 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ca6:	603b      	str	r3, [r7, #0]
 8003ca8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003caa:	4b1e      	ldr	r3, [pc, #120]	@ (8003d24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a1d      	ldr	r2, [pc, #116]	@ (8003d24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003cb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cb4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cb6:	f7fd ffe7 	bl	8001c88 <HAL_GetTick>
 8003cba:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003cbc:	e009      	b.n	8003cd2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003cbe:	f7fd ffe3 	bl	8001c88 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ccc:	d901      	bls.n	8003cd2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e022      	b.n	8003d18 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003cd2:	4b14      	ldr	r3, [pc, #80]	@ (8003d24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cde:	d1ee      	bne.n	8003cbe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003ce0:	4b10      	ldr	r3, [pc, #64]	@ (8003d24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a0f      	ldr	r2, [pc, #60]	@ (8003d24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ce6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cec:	f7fd ffcc 	bl	8001c88 <HAL_GetTick>
 8003cf0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003cf2:	e009      	b.n	8003d08 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003cf4:	f7fd ffc8 	bl	8001c88 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d02:	d901      	bls.n	8003d08 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e007      	b.n	8003d18 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d08:	4b06      	ldr	r3, [pc, #24]	@ (8003d24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d14:	d1ee      	bne.n	8003cf4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40023800 	.word	0x40023800
 8003d24:	40007000 	.word	0x40007000

08003d28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003d30:	2300      	movs	r3, #0
 8003d32:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e29b      	b.n	8004276 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 8087 	beq.w	8003e5a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d4c:	4b96      	ldr	r3, [pc, #600]	@ (8003fa8 <HAL_RCC_OscConfig+0x280>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f003 030c 	and.w	r3, r3, #12
 8003d54:	2b04      	cmp	r3, #4
 8003d56:	d00c      	beq.n	8003d72 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d58:	4b93      	ldr	r3, [pc, #588]	@ (8003fa8 <HAL_RCC_OscConfig+0x280>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f003 030c 	and.w	r3, r3, #12
 8003d60:	2b08      	cmp	r3, #8
 8003d62:	d112      	bne.n	8003d8a <HAL_RCC_OscConfig+0x62>
 8003d64:	4b90      	ldr	r3, [pc, #576]	@ (8003fa8 <HAL_RCC_OscConfig+0x280>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d70:	d10b      	bne.n	8003d8a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d72:	4b8d      	ldr	r3, [pc, #564]	@ (8003fa8 <HAL_RCC_OscConfig+0x280>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d06c      	beq.n	8003e58 <HAL_RCC_OscConfig+0x130>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d168      	bne.n	8003e58 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e275      	b.n	8004276 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d92:	d106      	bne.n	8003da2 <HAL_RCC_OscConfig+0x7a>
 8003d94:	4b84      	ldr	r3, [pc, #528]	@ (8003fa8 <HAL_RCC_OscConfig+0x280>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a83      	ldr	r2, [pc, #524]	@ (8003fa8 <HAL_RCC_OscConfig+0x280>)
 8003d9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d9e:	6013      	str	r3, [r2, #0]
 8003da0:	e02e      	b.n	8003e00 <HAL_RCC_OscConfig+0xd8>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10c      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x9c>
 8003daa:	4b7f      	ldr	r3, [pc, #508]	@ (8003fa8 <HAL_RCC_OscConfig+0x280>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a7e      	ldr	r2, [pc, #504]	@ (8003fa8 <HAL_RCC_OscConfig+0x280>)
 8003db0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003db4:	6013      	str	r3, [r2, #0]
 8003db6:	4b7c      	ldr	r3, [pc, #496]	@ (8003fa8 <HAL_RCC_OscConfig+0x280>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a7b      	ldr	r2, [pc, #492]	@ (8003fa8 <HAL_RCC_OscConfig+0x280>)
 8003dbc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dc0:	6013      	str	r3, [r2, #0]
 8003dc2:	e01d      	b.n	8003e00 <HAL_RCC_OscConfig+0xd8>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003dcc:	d10c      	bne.n	8003de8 <HAL_RCC_OscConfig+0xc0>
 8003dce:	4b76      	ldr	r3, [pc, #472]	@ (8003fa8 <HAL_RCC_OscConfig+0x280>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a75      	ldr	r2, [pc, #468]	@ (8003fa8 <HAL_RCC_OscConfig+0x280>)
 8003dd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	4b73      	ldr	r3, [pc, #460]	@ (8003fa8 <HAL_RCC_OscConfig+0x280>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a72      	ldr	r2, [pc, #456]	@ (8003fa8 <HAL_RCC_OscConfig+0x280>)
 8003de0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003de4:	6013      	str	r3, [r2, #0]
 8003de6:	e00b      	b.n	8003e00 <HAL_RCC_OscConfig+0xd8>
 8003de8:	4b6f      	ldr	r3, [pc, #444]	@ (8003fa8 <HAL_RCC_OscConfig+0x280>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a6e      	ldr	r2, [pc, #440]	@ (8003fa8 <HAL_RCC_OscConfig+0x280>)
 8003dee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003df2:	6013      	str	r3, [r2, #0]
 8003df4:	4b6c      	ldr	r3, [pc, #432]	@ (8003fa8 <HAL_RCC_OscConfig+0x280>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a6b      	ldr	r2, [pc, #428]	@ (8003fa8 <HAL_RCC_OscConfig+0x280>)
 8003dfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d013      	beq.n	8003e30 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e08:	f7fd ff3e 	bl	8001c88 <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e10:	f7fd ff3a 	bl	8001c88 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b64      	cmp	r3, #100	@ 0x64
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e229      	b.n	8004276 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e22:	4b61      	ldr	r3, [pc, #388]	@ (8003fa8 <HAL_RCC_OscConfig+0x280>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0f0      	beq.n	8003e10 <HAL_RCC_OscConfig+0xe8>
 8003e2e:	e014      	b.n	8003e5a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e30:	f7fd ff2a 	bl	8001c88 <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e38:	f7fd ff26 	bl	8001c88 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b64      	cmp	r3, #100	@ 0x64
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e215      	b.n	8004276 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e4a:	4b57      	ldr	r3, [pc, #348]	@ (8003fa8 <HAL_RCC_OscConfig+0x280>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1f0      	bne.n	8003e38 <HAL_RCC_OscConfig+0x110>
 8003e56:	e000      	b.n	8003e5a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d069      	beq.n	8003f3a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e66:	4b50      	ldr	r3, [pc, #320]	@ (8003fa8 <HAL_RCC_OscConfig+0x280>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 030c 	and.w	r3, r3, #12
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00b      	beq.n	8003e8a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e72:	4b4d      	ldr	r3, [pc, #308]	@ (8003fa8 <HAL_RCC_OscConfig+0x280>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f003 030c 	and.w	r3, r3, #12
 8003e7a:	2b08      	cmp	r3, #8
 8003e7c:	d11c      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x190>
 8003e7e:	4b4a      	ldr	r3, [pc, #296]	@ (8003fa8 <HAL_RCC_OscConfig+0x280>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d116      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e8a:	4b47      	ldr	r3, [pc, #284]	@ (8003fa8 <HAL_RCC_OscConfig+0x280>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d005      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x17a>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d001      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e1e9      	b.n	8004276 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea2:	4b41      	ldr	r3, [pc, #260]	@ (8003fa8 <HAL_RCC_OscConfig+0x280>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	493d      	ldr	r1, [pc, #244]	@ (8003fa8 <HAL_RCC_OscConfig+0x280>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eb6:	e040      	b.n	8003f3a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d023      	beq.n	8003f08 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ec0:	4b39      	ldr	r3, [pc, #228]	@ (8003fa8 <HAL_RCC_OscConfig+0x280>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a38      	ldr	r2, [pc, #224]	@ (8003fa8 <HAL_RCC_OscConfig+0x280>)
 8003ec6:	f043 0301 	orr.w	r3, r3, #1
 8003eca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ecc:	f7fd fedc 	bl	8001c88 <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ed4:	f7fd fed8 	bl	8001c88 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e1c7      	b.n	8004276 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee6:	4b30      	ldr	r3, [pc, #192]	@ (8003fa8 <HAL_RCC_OscConfig+0x280>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0f0      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ef2:	4b2d      	ldr	r3, [pc, #180]	@ (8003fa8 <HAL_RCC_OscConfig+0x280>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	4929      	ldr	r1, [pc, #164]	@ (8003fa8 <HAL_RCC_OscConfig+0x280>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	600b      	str	r3, [r1, #0]
 8003f06:	e018      	b.n	8003f3a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f08:	4b27      	ldr	r3, [pc, #156]	@ (8003fa8 <HAL_RCC_OscConfig+0x280>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a26      	ldr	r2, [pc, #152]	@ (8003fa8 <HAL_RCC_OscConfig+0x280>)
 8003f0e:	f023 0301 	bic.w	r3, r3, #1
 8003f12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f14:	f7fd feb8 	bl	8001c88 <HAL_GetTick>
 8003f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f1a:	e008      	b.n	8003f2e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f1c:	f7fd feb4 	bl	8001c88 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e1a3      	b.n	8004276 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f2e:	4b1e      	ldr	r3, [pc, #120]	@ (8003fa8 <HAL_RCC_OscConfig+0x280>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1f0      	bne.n	8003f1c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0308 	and.w	r3, r3, #8
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d038      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d019      	beq.n	8003f82 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f4e:	4b16      	ldr	r3, [pc, #88]	@ (8003fa8 <HAL_RCC_OscConfig+0x280>)
 8003f50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f52:	4a15      	ldr	r2, [pc, #84]	@ (8003fa8 <HAL_RCC_OscConfig+0x280>)
 8003f54:	f043 0301 	orr.w	r3, r3, #1
 8003f58:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5a:	f7fd fe95 	bl	8001c88 <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f60:	e008      	b.n	8003f74 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f62:	f7fd fe91 	bl	8001c88 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e180      	b.n	8004276 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f74:	4b0c      	ldr	r3, [pc, #48]	@ (8003fa8 <HAL_RCC_OscConfig+0x280>)
 8003f76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d0f0      	beq.n	8003f62 <HAL_RCC_OscConfig+0x23a>
 8003f80:	e01a      	b.n	8003fb8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f82:	4b09      	ldr	r3, [pc, #36]	@ (8003fa8 <HAL_RCC_OscConfig+0x280>)
 8003f84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f86:	4a08      	ldr	r2, [pc, #32]	@ (8003fa8 <HAL_RCC_OscConfig+0x280>)
 8003f88:	f023 0301 	bic.w	r3, r3, #1
 8003f8c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f8e:	f7fd fe7b 	bl	8001c88 <HAL_GetTick>
 8003f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f94:	e00a      	b.n	8003fac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f96:	f7fd fe77 	bl	8001c88 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d903      	bls.n	8003fac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e166      	b.n	8004276 <HAL_RCC_OscConfig+0x54e>
 8003fa8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fac:	4b92      	ldr	r3, [pc, #584]	@ (80041f8 <HAL_RCC_OscConfig+0x4d0>)
 8003fae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1ee      	bne.n	8003f96 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 80a4 	beq.w	800410e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fc6:	4b8c      	ldr	r3, [pc, #560]	@ (80041f8 <HAL_RCC_OscConfig+0x4d0>)
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10d      	bne.n	8003fee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fd2:	4b89      	ldr	r3, [pc, #548]	@ (80041f8 <HAL_RCC_OscConfig+0x4d0>)
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd6:	4a88      	ldr	r2, [pc, #544]	@ (80041f8 <HAL_RCC_OscConfig+0x4d0>)
 8003fd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fde:	4b86      	ldr	r3, [pc, #536]	@ (80041f8 <HAL_RCC_OscConfig+0x4d0>)
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fe6:	60bb      	str	r3, [r7, #8]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fea:	2301      	movs	r3, #1
 8003fec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fee:	4b83      	ldr	r3, [pc, #524]	@ (80041fc <HAL_RCC_OscConfig+0x4d4>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d118      	bne.n	800402c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003ffa:	4b80      	ldr	r3, [pc, #512]	@ (80041fc <HAL_RCC_OscConfig+0x4d4>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a7f      	ldr	r2, [pc, #508]	@ (80041fc <HAL_RCC_OscConfig+0x4d4>)
 8004000:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004004:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004006:	f7fd fe3f 	bl	8001c88 <HAL_GetTick>
 800400a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800400c:	e008      	b.n	8004020 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800400e:	f7fd fe3b 	bl	8001c88 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b64      	cmp	r3, #100	@ 0x64
 800401a:	d901      	bls.n	8004020 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e12a      	b.n	8004276 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004020:	4b76      	ldr	r3, [pc, #472]	@ (80041fc <HAL_RCC_OscConfig+0x4d4>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004028:	2b00      	cmp	r3, #0
 800402a:	d0f0      	beq.n	800400e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d106      	bne.n	8004042 <HAL_RCC_OscConfig+0x31a>
 8004034:	4b70      	ldr	r3, [pc, #448]	@ (80041f8 <HAL_RCC_OscConfig+0x4d0>)
 8004036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004038:	4a6f      	ldr	r2, [pc, #444]	@ (80041f8 <HAL_RCC_OscConfig+0x4d0>)
 800403a:	f043 0301 	orr.w	r3, r3, #1
 800403e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004040:	e02d      	b.n	800409e <HAL_RCC_OscConfig+0x376>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10c      	bne.n	8004064 <HAL_RCC_OscConfig+0x33c>
 800404a:	4b6b      	ldr	r3, [pc, #428]	@ (80041f8 <HAL_RCC_OscConfig+0x4d0>)
 800404c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800404e:	4a6a      	ldr	r2, [pc, #424]	@ (80041f8 <HAL_RCC_OscConfig+0x4d0>)
 8004050:	f023 0301 	bic.w	r3, r3, #1
 8004054:	6713      	str	r3, [r2, #112]	@ 0x70
 8004056:	4b68      	ldr	r3, [pc, #416]	@ (80041f8 <HAL_RCC_OscConfig+0x4d0>)
 8004058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800405a:	4a67      	ldr	r2, [pc, #412]	@ (80041f8 <HAL_RCC_OscConfig+0x4d0>)
 800405c:	f023 0304 	bic.w	r3, r3, #4
 8004060:	6713      	str	r3, [r2, #112]	@ 0x70
 8004062:	e01c      	b.n	800409e <HAL_RCC_OscConfig+0x376>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	2b05      	cmp	r3, #5
 800406a:	d10c      	bne.n	8004086 <HAL_RCC_OscConfig+0x35e>
 800406c:	4b62      	ldr	r3, [pc, #392]	@ (80041f8 <HAL_RCC_OscConfig+0x4d0>)
 800406e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004070:	4a61      	ldr	r2, [pc, #388]	@ (80041f8 <HAL_RCC_OscConfig+0x4d0>)
 8004072:	f043 0304 	orr.w	r3, r3, #4
 8004076:	6713      	str	r3, [r2, #112]	@ 0x70
 8004078:	4b5f      	ldr	r3, [pc, #380]	@ (80041f8 <HAL_RCC_OscConfig+0x4d0>)
 800407a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800407c:	4a5e      	ldr	r2, [pc, #376]	@ (80041f8 <HAL_RCC_OscConfig+0x4d0>)
 800407e:	f043 0301 	orr.w	r3, r3, #1
 8004082:	6713      	str	r3, [r2, #112]	@ 0x70
 8004084:	e00b      	b.n	800409e <HAL_RCC_OscConfig+0x376>
 8004086:	4b5c      	ldr	r3, [pc, #368]	@ (80041f8 <HAL_RCC_OscConfig+0x4d0>)
 8004088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800408a:	4a5b      	ldr	r2, [pc, #364]	@ (80041f8 <HAL_RCC_OscConfig+0x4d0>)
 800408c:	f023 0301 	bic.w	r3, r3, #1
 8004090:	6713      	str	r3, [r2, #112]	@ 0x70
 8004092:	4b59      	ldr	r3, [pc, #356]	@ (80041f8 <HAL_RCC_OscConfig+0x4d0>)
 8004094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004096:	4a58      	ldr	r2, [pc, #352]	@ (80041f8 <HAL_RCC_OscConfig+0x4d0>)
 8004098:	f023 0304 	bic.w	r3, r3, #4
 800409c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d015      	beq.n	80040d2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a6:	f7fd fdef 	bl	8001c88 <HAL_GetTick>
 80040aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ac:	e00a      	b.n	80040c4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ae:	f7fd fdeb 	bl	8001c88 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040bc:	4293      	cmp	r3, r2
 80040be:	d901      	bls.n	80040c4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e0d8      	b.n	8004276 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c4:	4b4c      	ldr	r3, [pc, #304]	@ (80041f8 <HAL_RCC_OscConfig+0x4d0>)
 80040c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d0ee      	beq.n	80040ae <HAL_RCC_OscConfig+0x386>
 80040d0:	e014      	b.n	80040fc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d2:	f7fd fdd9 	bl	8001c88 <HAL_GetTick>
 80040d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040d8:	e00a      	b.n	80040f0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040da:	f7fd fdd5 	bl	8001c88 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d901      	bls.n	80040f0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e0c2      	b.n	8004276 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040f0:	4b41      	ldr	r3, [pc, #260]	@ (80041f8 <HAL_RCC_OscConfig+0x4d0>)
 80040f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1ee      	bne.n	80040da <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040fc:	7dfb      	ldrb	r3, [r7, #23]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d105      	bne.n	800410e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004102:	4b3d      	ldr	r3, [pc, #244]	@ (80041f8 <HAL_RCC_OscConfig+0x4d0>)
 8004104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004106:	4a3c      	ldr	r2, [pc, #240]	@ (80041f8 <HAL_RCC_OscConfig+0x4d0>)
 8004108:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800410c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	2b00      	cmp	r3, #0
 8004114:	f000 80ae 	beq.w	8004274 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004118:	4b37      	ldr	r3, [pc, #220]	@ (80041f8 <HAL_RCC_OscConfig+0x4d0>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f003 030c 	and.w	r3, r3, #12
 8004120:	2b08      	cmp	r3, #8
 8004122:	d06d      	beq.n	8004200 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	2b02      	cmp	r3, #2
 800412a:	d14b      	bne.n	80041c4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800412c:	4b32      	ldr	r3, [pc, #200]	@ (80041f8 <HAL_RCC_OscConfig+0x4d0>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a31      	ldr	r2, [pc, #196]	@ (80041f8 <HAL_RCC_OscConfig+0x4d0>)
 8004132:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004136:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004138:	f7fd fda6 	bl	8001c88 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004140:	f7fd fda2 	bl	8001c88 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e091      	b.n	8004276 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004152:	4b29      	ldr	r3, [pc, #164]	@ (80041f8 <HAL_RCC_OscConfig+0x4d0>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1f0      	bne.n	8004140 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	69da      	ldr	r2, [r3, #28]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	431a      	orrs	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416c:	019b      	lsls	r3, r3, #6
 800416e:	431a      	orrs	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004174:	085b      	lsrs	r3, r3, #1
 8004176:	3b01      	subs	r3, #1
 8004178:	041b      	lsls	r3, r3, #16
 800417a:	431a      	orrs	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004180:	061b      	lsls	r3, r3, #24
 8004182:	431a      	orrs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004188:	071b      	lsls	r3, r3, #28
 800418a:	491b      	ldr	r1, [pc, #108]	@ (80041f8 <HAL_RCC_OscConfig+0x4d0>)
 800418c:	4313      	orrs	r3, r2
 800418e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004190:	4b19      	ldr	r3, [pc, #100]	@ (80041f8 <HAL_RCC_OscConfig+0x4d0>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a18      	ldr	r2, [pc, #96]	@ (80041f8 <HAL_RCC_OscConfig+0x4d0>)
 8004196:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800419a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419c:	f7fd fd74 	bl	8001c88 <HAL_GetTick>
 80041a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041a2:	e008      	b.n	80041b6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041a4:	f7fd fd70 	bl	8001c88 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e05f      	b.n	8004276 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041b6:	4b10      	ldr	r3, [pc, #64]	@ (80041f8 <HAL_RCC_OscConfig+0x4d0>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d0f0      	beq.n	80041a4 <HAL_RCC_OscConfig+0x47c>
 80041c2:	e057      	b.n	8004274 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041c4:	4b0c      	ldr	r3, [pc, #48]	@ (80041f8 <HAL_RCC_OscConfig+0x4d0>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a0b      	ldr	r2, [pc, #44]	@ (80041f8 <HAL_RCC_OscConfig+0x4d0>)
 80041ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d0:	f7fd fd5a 	bl	8001c88 <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041d8:	f7fd fd56 	bl	8001c88 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e045      	b.n	8004276 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ea:	4b03      	ldr	r3, [pc, #12]	@ (80041f8 <HAL_RCC_OscConfig+0x4d0>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1f0      	bne.n	80041d8 <HAL_RCC_OscConfig+0x4b0>
 80041f6:	e03d      	b.n	8004274 <HAL_RCC_OscConfig+0x54c>
 80041f8:	40023800 	.word	0x40023800
 80041fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004200:	4b1f      	ldr	r3, [pc, #124]	@ (8004280 <HAL_RCC_OscConfig+0x558>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d030      	beq.n	8004270 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004218:	429a      	cmp	r2, r3
 800421a:	d129      	bne.n	8004270 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004226:	429a      	cmp	r2, r3
 8004228:	d122      	bne.n	8004270 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004230:	4013      	ands	r3, r2
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004236:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004238:	4293      	cmp	r3, r2
 800423a:	d119      	bne.n	8004270 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004246:	085b      	lsrs	r3, r3, #1
 8004248:	3b01      	subs	r3, #1
 800424a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800424c:	429a      	cmp	r2, r3
 800424e:	d10f      	bne.n	8004270 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800425a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800425c:	429a      	cmp	r2, r3
 800425e:	d107      	bne.n	8004270 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800426a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800426c:	429a      	cmp	r2, r3
 800426e:	d001      	beq.n	8004274 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e000      	b.n	8004276 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3718      	adds	r7, #24
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	40023800 	.word	0x40023800

08004284 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800428e:	2300      	movs	r3, #0
 8004290:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e0d0      	b.n	800443e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800429c:	4b6a      	ldr	r3, [pc, #424]	@ (8004448 <HAL_RCC_ClockConfig+0x1c4>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 030f 	and.w	r3, r3, #15
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d910      	bls.n	80042cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042aa:	4b67      	ldr	r3, [pc, #412]	@ (8004448 <HAL_RCC_ClockConfig+0x1c4>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f023 020f 	bic.w	r2, r3, #15
 80042b2:	4965      	ldr	r1, [pc, #404]	@ (8004448 <HAL_RCC_ClockConfig+0x1c4>)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ba:	4b63      	ldr	r3, [pc, #396]	@ (8004448 <HAL_RCC_ClockConfig+0x1c4>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 030f 	and.w	r3, r3, #15
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d001      	beq.n	80042cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e0b8      	b.n	800443e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d020      	beq.n	800431a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d005      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042e4:	4b59      	ldr	r3, [pc, #356]	@ (800444c <HAL_RCC_ClockConfig+0x1c8>)
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	4a58      	ldr	r2, [pc, #352]	@ (800444c <HAL_RCC_ClockConfig+0x1c8>)
 80042ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80042ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0308 	and.w	r3, r3, #8
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d005      	beq.n	8004308 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042fc:	4b53      	ldr	r3, [pc, #332]	@ (800444c <HAL_RCC_ClockConfig+0x1c8>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	4a52      	ldr	r2, [pc, #328]	@ (800444c <HAL_RCC_ClockConfig+0x1c8>)
 8004302:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004306:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004308:	4b50      	ldr	r3, [pc, #320]	@ (800444c <HAL_RCC_ClockConfig+0x1c8>)
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	494d      	ldr	r1, [pc, #308]	@ (800444c <HAL_RCC_ClockConfig+0x1c8>)
 8004316:	4313      	orrs	r3, r2
 8004318:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	d040      	beq.n	80043a8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d107      	bne.n	800433e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800432e:	4b47      	ldr	r3, [pc, #284]	@ (800444c <HAL_RCC_ClockConfig+0x1c8>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d115      	bne.n	8004366 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e07f      	b.n	800443e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	2b02      	cmp	r3, #2
 8004344:	d107      	bne.n	8004356 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004346:	4b41      	ldr	r3, [pc, #260]	@ (800444c <HAL_RCC_ClockConfig+0x1c8>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d109      	bne.n	8004366 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e073      	b.n	800443e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004356:	4b3d      	ldr	r3, [pc, #244]	@ (800444c <HAL_RCC_ClockConfig+0x1c8>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e06b      	b.n	800443e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004366:	4b39      	ldr	r3, [pc, #228]	@ (800444c <HAL_RCC_ClockConfig+0x1c8>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f023 0203 	bic.w	r2, r3, #3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	4936      	ldr	r1, [pc, #216]	@ (800444c <HAL_RCC_ClockConfig+0x1c8>)
 8004374:	4313      	orrs	r3, r2
 8004376:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004378:	f7fd fc86 	bl	8001c88 <HAL_GetTick>
 800437c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800437e:	e00a      	b.n	8004396 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004380:	f7fd fc82 	bl	8001c88 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800438e:	4293      	cmp	r3, r2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e053      	b.n	800443e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004396:	4b2d      	ldr	r3, [pc, #180]	@ (800444c <HAL_RCC_ClockConfig+0x1c8>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 020c 	and.w	r2, r3, #12
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d1eb      	bne.n	8004380 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043a8:	4b27      	ldr	r3, [pc, #156]	@ (8004448 <HAL_RCC_ClockConfig+0x1c4>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 030f 	and.w	r3, r3, #15
 80043b0:	683a      	ldr	r2, [r7, #0]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d210      	bcs.n	80043d8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043b6:	4b24      	ldr	r3, [pc, #144]	@ (8004448 <HAL_RCC_ClockConfig+0x1c4>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f023 020f 	bic.w	r2, r3, #15
 80043be:	4922      	ldr	r1, [pc, #136]	@ (8004448 <HAL_RCC_ClockConfig+0x1c4>)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043c6:	4b20      	ldr	r3, [pc, #128]	@ (8004448 <HAL_RCC_ClockConfig+0x1c4>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 030f 	and.w	r3, r3, #15
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d001      	beq.n	80043d8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e032      	b.n	800443e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d008      	beq.n	80043f6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043e4:	4b19      	ldr	r3, [pc, #100]	@ (800444c <HAL_RCC_ClockConfig+0x1c8>)
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	4916      	ldr	r1, [pc, #88]	@ (800444c <HAL_RCC_ClockConfig+0x1c8>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0308 	and.w	r3, r3, #8
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d009      	beq.n	8004416 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004402:	4b12      	ldr	r3, [pc, #72]	@ (800444c <HAL_RCC_ClockConfig+0x1c8>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	490e      	ldr	r1, [pc, #56]	@ (800444c <HAL_RCC_ClockConfig+0x1c8>)
 8004412:	4313      	orrs	r3, r2
 8004414:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004416:	f000 f821 	bl	800445c <HAL_RCC_GetSysClockFreq>
 800441a:	4602      	mov	r2, r0
 800441c:	4b0b      	ldr	r3, [pc, #44]	@ (800444c <HAL_RCC_ClockConfig+0x1c8>)
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	091b      	lsrs	r3, r3, #4
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	490a      	ldr	r1, [pc, #40]	@ (8004450 <HAL_RCC_ClockConfig+0x1cc>)
 8004428:	5ccb      	ldrb	r3, [r1, r3]
 800442a:	fa22 f303 	lsr.w	r3, r2, r3
 800442e:	4a09      	ldr	r2, [pc, #36]	@ (8004454 <HAL_RCC_ClockConfig+0x1d0>)
 8004430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004432:	4b09      	ldr	r3, [pc, #36]	@ (8004458 <HAL_RCC_ClockConfig+0x1d4>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f7fd fbe2 	bl	8001c00 <HAL_InitTick>

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	40023c00 	.word	0x40023c00
 800444c:	40023800 	.word	0x40023800
 8004450:	080066cc 	.word	0x080066cc
 8004454:	20000008 	.word	0x20000008
 8004458:	2000000c 	.word	0x2000000c

0800445c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800445c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004460:	b090      	sub	sp, #64	@ 0x40
 8004462:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004464:	2300      	movs	r3, #0
 8004466:	637b      	str	r3, [r7, #52]	@ 0x34
 8004468:	2300      	movs	r3, #0
 800446a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800446c:	2300      	movs	r3, #0
 800446e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8004470:	2300      	movs	r3, #0
 8004472:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004474:	4b59      	ldr	r3, [pc, #356]	@ (80045dc <HAL_RCC_GetSysClockFreq+0x180>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f003 030c 	and.w	r3, r3, #12
 800447c:	2b08      	cmp	r3, #8
 800447e:	d00d      	beq.n	800449c <HAL_RCC_GetSysClockFreq+0x40>
 8004480:	2b08      	cmp	r3, #8
 8004482:	f200 80a1 	bhi.w	80045c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004486:	2b00      	cmp	r3, #0
 8004488:	d002      	beq.n	8004490 <HAL_RCC_GetSysClockFreq+0x34>
 800448a:	2b04      	cmp	r3, #4
 800448c:	d003      	beq.n	8004496 <HAL_RCC_GetSysClockFreq+0x3a>
 800448e:	e09b      	b.n	80045c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004490:	4b53      	ldr	r3, [pc, #332]	@ (80045e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004492:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004494:	e09b      	b.n	80045ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004496:	4b53      	ldr	r3, [pc, #332]	@ (80045e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004498:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800449a:	e098      	b.n	80045ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800449c:	4b4f      	ldr	r3, [pc, #316]	@ (80045dc <HAL_RCC_GetSysClockFreq+0x180>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044a4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80044a6:	4b4d      	ldr	r3, [pc, #308]	@ (80045dc <HAL_RCC_GetSysClockFreq+0x180>)
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d028      	beq.n	8004504 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044b2:	4b4a      	ldr	r3, [pc, #296]	@ (80045dc <HAL_RCC_GetSysClockFreq+0x180>)
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	099b      	lsrs	r3, r3, #6
 80044b8:	2200      	movs	r2, #0
 80044ba:	623b      	str	r3, [r7, #32]
 80044bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80044be:	6a3b      	ldr	r3, [r7, #32]
 80044c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80044c4:	2100      	movs	r1, #0
 80044c6:	4b47      	ldr	r3, [pc, #284]	@ (80045e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80044c8:	fb03 f201 	mul.w	r2, r3, r1
 80044cc:	2300      	movs	r3, #0
 80044ce:	fb00 f303 	mul.w	r3, r0, r3
 80044d2:	4413      	add	r3, r2
 80044d4:	4a43      	ldr	r2, [pc, #268]	@ (80045e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80044d6:	fba0 1202 	umull	r1, r2, r0, r2
 80044da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044dc:	460a      	mov	r2, r1
 80044de:	62ba      	str	r2, [r7, #40]	@ 0x28
 80044e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044e2:	4413      	add	r3, r2
 80044e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044e8:	2200      	movs	r2, #0
 80044ea:	61bb      	str	r3, [r7, #24]
 80044ec:	61fa      	str	r2, [r7, #28]
 80044ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80044f6:	f7fb fe9f 	bl	8000238 <__aeabi_uldivmod>
 80044fa:	4602      	mov	r2, r0
 80044fc:	460b      	mov	r3, r1
 80044fe:	4613      	mov	r3, r2
 8004500:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004502:	e053      	b.n	80045ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004504:	4b35      	ldr	r3, [pc, #212]	@ (80045dc <HAL_RCC_GetSysClockFreq+0x180>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	099b      	lsrs	r3, r3, #6
 800450a:	2200      	movs	r2, #0
 800450c:	613b      	str	r3, [r7, #16]
 800450e:	617a      	str	r2, [r7, #20]
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004516:	f04f 0b00 	mov.w	fp, #0
 800451a:	4652      	mov	r2, sl
 800451c:	465b      	mov	r3, fp
 800451e:	f04f 0000 	mov.w	r0, #0
 8004522:	f04f 0100 	mov.w	r1, #0
 8004526:	0159      	lsls	r1, r3, #5
 8004528:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800452c:	0150      	lsls	r0, r2, #5
 800452e:	4602      	mov	r2, r0
 8004530:	460b      	mov	r3, r1
 8004532:	ebb2 080a 	subs.w	r8, r2, sl
 8004536:	eb63 090b 	sbc.w	r9, r3, fp
 800453a:	f04f 0200 	mov.w	r2, #0
 800453e:	f04f 0300 	mov.w	r3, #0
 8004542:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004546:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800454a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800454e:	ebb2 0408 	subs.w	r4, r2, r8
 8004552:	eb63 0509 	sbc.w	r5, r3, r9
 8004556:	f04f 0200 	mov.w	r2, #0
 800455a:	f04f 0300 	mov.w	r3, #0
 800455e:	00eb      	lsls	r3, r5, #3
 8004560:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004564:	00e2      	lsls	r2, r4, #3
 8004566:	4614      	mov	r4, r2
 8004568:	461d      	mov	r5, r3
 800456a:	eb14 030a 	adds.w	r3, r4, sl
 800456e:	603b      	str	r3, [r7, #0]
 8004570:	eb45 030b 	adc.w	r3, r5, fp
 8004574:	607b      	str	r3, [r7, #4]
 8004576:	f04f 0200 	mov.w	r2, #0
 800457a:	f04f 0300 	mov.w	r3, #0
 800457e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004582:	4629      	mov	r1, r5
 8004584:	028b      	lsls	r3, r1, #10
 8004586:	4621      	mov	r1, r4
 8004588:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800458c:	4621      	mov	r1, r4
 800458e:	028a      	lsls	r2, r1, #10
 8004590:	4610      	mov	r0, r2
 8004592:	4619      	mov	r1, r3
 8004594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004596:	2200      	movs	r2, #0
 8004598:	60bb      	str	r3, [r7, #8]
 800459a:	60fa      	str	r2, [r7, #12]
 800459c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045a0:	f7fb fe4a 	bl	8000238 <__aeabi_uldivmod>
 80045a4:	4602      	mov	r2, r0
 80045a6:	460b      	mov	r3, r1
 80045a8:	4613      	mov	r3, r2
 80045aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80045ac:	4b0b      	ldr	r3, [pc, #44]	@ (80045dc <HAL_RCC_GetSysClockFreq+0x180>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	0c1b      	lsrs	r3, r3, #16
 80045b2:	f003 0303 	and.w	r3, r3, #3
 80045b6:	3301      	adds	r3, #1
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80045bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80045be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80045c6:	e002      	b.n	80045ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045c8:	4b05      	ldr	r3, [pc, #20]	@ (80045e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80045ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80045cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3740      	adds	r7, #64	@ 0x40
 80045d4:	46bd      	mov	sp, r7
 80045d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045da:	bf00      	nop
 80045dc:	40023800 	.word	0x40023800
 80045e0:	00f42400 	.word	0x00f42400
 80045e4:	01312d00 	.word	0x01312d00

080045e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b088      	sub	sp, #32
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80045f0:	2300      	movs	r3, #0
 80045f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80045f4:	2300      	movs	r3, #0
 80045f6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80045f8:	2300      	movs	r3, #0
 80045fa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80045fc:	2300      	movs	r3, #0
 80045fe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004600:	2300      	movs	r3, #0
 8004602:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	2b00      	cmp	r3, #0
 800460e:	d012      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004610:	4b69      	ldr	r3, [pc, #420]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	4a68      	ldr	r2, [pc, #416]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004616:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800461a:	6093      	str	r3, [r2, #8]
 800461c:	4b66      	ldr	r3, [pc, #408]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800461e:	689a      	ldr	r2, [r3, #8]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004624:	4964      	ldr	r1, [pc, #400]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004626:	4313      	orrs	r3, r2
 8004628:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004632:	2301      	movs	r3, #1
 8004634:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d017      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004642:	4b5d      	ldr	r3, [pc, #372]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004644:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004648:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004650:	4959      	ldr	r1, [pc, #356]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004652:	4313      	orrs	r3, r2
 8004654:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800465c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004660:	d101      	bne.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004662:	2301      	movs	r3, #1
 8004664:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800466e:	2301      	movs	r3, #1
 8004670:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d017      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800467e:	4b4e      	ldr	r3, [pc, #312]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004680:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004684:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468c:	494a      	ldr	r1, [pc, #296]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800468e:	4313      	orrs	r3, r2
 8004690:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004698:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800469c:	d101      	bne.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800469e:	2301      	movs	r3, #1
 80046a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80046aa:	2301      	movs	r3, #1
 80046ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80046ba:	2301      	movs	r3, #1
 80046bc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0320 	and.w	r3, r3, #32
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f000 808b 	beq.w	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80046cc:	4b3a      	ldr	r3, [pc, #232]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d0:	4a39      	ldr	r2, [pc, #228]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80046d8:	4b37      	ldr	r3, [pc, #220]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046e0:	60bb      	str	r3, [r7, #8]
 80046e2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80046e4:	4b35      	ldr	r3, [pc, #212]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a34      	ldr	r2, [pc, #208]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046f0:	f7fd faca 	bl	8001c88 <HAL_GetTick>
 80046f4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80046f6:	e008      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046f8:	f7fd fac6 	bl	8001c88 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b64      	cmp	r3, #100	@ 0x64
 8004704:	d901      	bls.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e38f      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800470a:	4b2c      	ldr	r3, [pc, #176]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004712:	2b00      	cmp	r3, #0
 8004714:	d0f0      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004716:	4b28      	ldr	r3, [pc, #160]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800471a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800471e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d035      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800472a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	429a      	cmp	r2, r3
 8004732:	d02e      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004734:	4b20      	ldr	r3, [pc, #128]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004738:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800473c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800473e:	4b1e      	ldr	r3, [pc, #120]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004742:	4a1d      	ldr	r2, [pc, #116]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004744:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004748:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800474a:	4b1b      	ldr	r3, [pc, #108]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800474c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800474e:	4a1a      	ldr	r2, [pc, #104]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004750:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004754:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004756:	4a18      	ldr	r2, [pc, #96]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800475c:	4b16      	ldr	r3, [pc, #88]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800475e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b01      	cmp	r3, #1
 8004766:	d114      	bne.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004768:	f7fd fa8e 	bl	8001c88 <HAL_GetTick>
 800476c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800476e:	e00a      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004770:	f7fd fa8a 	bl	8001c88 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800477e:	4293      	cmp	r3, r2
 8004780:	d901      	bls.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e351      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004786:	4b0c      	ldr	r3, [pc, #48]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d0ee      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004796:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800479a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800479e:	d111      	bne.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80047a0:	4b05      	ldr	r3, [pc, #20]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80047ac:	4b04      	ldr	r3, [pc, #16]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80047ae:	400b      	ands	r3, r1
 80047b0:	4901      	ldr	r1, [pc, #4]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	608b      	str	r3, [r1, #8]
 80047b6:	e00b      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80047b8:	40023800 	.word	0x40023800
 80047bc:	40007000 	.word	0x40007000
 80047c0:	0ffffcff 	.word	0x0ffffcff
 80047c4:	4bac      	ldr	r3, [pc, #688]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	4aab      	ldr	r2, [pc, #684]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047ca:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80047ce:	6093      	str	r3, [r2, #8]
 80047d0:	4ba9      	ldr	r3, [pc, #676]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047d2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047dc:	49a6      	ldr	r1, [pc, #664]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0310 	and.w	r3, r3, #16
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d010      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80047ee:	4ba2      	ldr	r3, [pc, #648]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047f4:	4aa0      	ldr	r2, [pc, #640]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047fa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80047fe:	4b9e      	ldr	r3, [pc, #632]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004800:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004808:	499b      	ldr	r1, [pc, #620]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800480a:	4313      	orrs	r3, r2
 800480c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00a      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800481c:	4b96      	ldr	r3, [pc, #600]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800481e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004822:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800482a:	4993      	ldr	r1, [pc, #588]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800482c:	4313      	orrs	r3, r2
 800482e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00a      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800483e:	4b8e      	ldr	r3, [pc, #568]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004844:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800484c:	498a      	ldr	r1, [pc, #552]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800484e:	4313      	orrs	r3, r2
 8004850:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00a      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004860:	4b85      	ldr	r3, [pc, #532]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004866:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800486e:	4982      	ldr	r1, [pc, #520]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004870:	4313      	orrs	r3, r2
 8004872:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00a      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004882:	4b7d      	ldr	r3, [pc, #500]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004888:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004890:	4979      	ldr	r1, [pc, #484]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004892:	4313      	orrs	r3, r2
 8004894:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00a      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048a4:	4b74      	ldr	r3, [pc, #464]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048aa:	f023 0203 	bic.w	r2, r3, #3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b2:	4971      	ldr	r1, [pc, #452]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00a      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048c6:	4b6c      	ldr	r3, [pc, #432]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048cc:	f023 020c 	bic.w	r2, r3, #12
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048d4:	4968      	ldr	r1, [pc, #416]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00a      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048e8:	4b63      	ldr	r3, [pc, #396]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048ee:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048f6:	4960      	ldr	r1, [pc, #384]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00a      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800490a:	4b5b      	ldr	r3, [pc, #364]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800490c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004910:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004918:	4957      	ldr	r1, [pc, #348]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800491a:	4313      	orrs	r3, r2
 800491c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00a      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800492c:	4b52      	ldr	r3, [pc, #328]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800492e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004932:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800493a:	494f      	ldr	r1, [pc, #316]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800493c:	4313      	orrs	r3, r2
 800493e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00a      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800494e:	4b4a      	ldr	r3, [pc, #296]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004950:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004954:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800495c:	4946      	ldr	r1, [pc, #280]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800495e:	4313      	orrs	r3, r2
 8004960:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00a      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004970:	4b41      	ldr	r3, [pc, #260]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004976:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800497e:	493e      	ldr	r1, [pc, #248]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004980:	4313      	orrs	r3, r2
 8004982:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00a      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004992:	4b39      	ldr	r3, [pc, #228]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004994:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004998:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049a0:	4935      	ldr	r1, [pc, #212]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00a      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80049b4:	4b30      	ldr	r3, [pc, #192]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ba:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049c2:	492d      	ldr	r1, [pc, #180]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d011      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80049d6:	4b28      	ldr	r3, [pc, #160]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049dc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049e4:	4924      	ldr	r1, [pc, #144]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049f4:	d101      	bne.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80049f6:	2301      	movs	r3, #1
 80049f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004a06:	2301      	movs	r3, #1
 8004a08:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00a      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a16:	4b18      	ldr	r3, [pc, #96]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a1c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a24:	4914      	ldr	r1, [pc, #80]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00b      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a38:	4b0f      	ldr	r3, [pc, #60]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a3e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a48:	490b      	ldr	r1, [pc, #44]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00f      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004a5c:	4b06      	ldr	r3, [pc, #24]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a62:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a6c:	4902      	ldr	r1, [pc, #8]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004a74:	e002      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004a76:	bf00      	nop
 8004a78:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00b      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a88:	4b8a      	ldr	r3, [pc, #552]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a8e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a98:	4986      	ldr	r1, [pc, #536]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00b      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004aac:	4b81      	ldr	r3, [pc, #516]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ab2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004abc:	497d      	ldr	r1, [pc, #500]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d006      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f000 80d6 	beq.w	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ad8:	4b76      	ldr	r3, [pc, #472]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a75      	ldr	r2, [pc, #468]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ade:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ae2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ae4:	f7fd f8d0 	bl	8001c88 <HAL_GetTick>
 8004ae8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004aea:	e008      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004aec:	f7fd f8cc 	bl	8001c88 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b64      	cmp	r3, #100	@ 0x64
 8004af8:	d901      	bls.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e195      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004afe:	4b6d      	ldr	r3, [pc, #436]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1f0      	bne.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d021      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d11d      	bne.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004b1e:	4b65      	ldr	r3, [pc, #404]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b24:	0c1b      	lsrs	r3, r3, #16
 8004b26:	f003 0303 	and.w	r3, r3, #3
 8004b2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b2c:	4b61      	ldr	r3, [pc, #388]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b32:	0e1b      	lsrs	r3, r3, #24
 8004b34:	f003 030f 	and.w	r3, r3, #15
 8004b38:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	019a      	lsls	r2, r3, #6
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	041b      	lsls	r3, r3, #16
 8004b44:	431a      	orrs	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	061b      	lsls	r3, r3, #24
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	071b      	lsls	r3, r3, #28
 8004b52:	4958      	ldr	r1, [pc, #352]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d004      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b6e:	d00a      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d02e      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b84:	d129      	bne.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004b86:	4b4b      	ldr	r3, [pc, #300]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b8c:	0c1b      	lsrs	r3, r3, #16
 8004b8e:	f003 0303 	and.w	r3, r3, #3
 8004b92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b94:	4b47      	ldr	r3, [pc, #284]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b9a:	0f1b      	lsrs	r3, r3, #28
 8004b9c:	f003 0307 	and.w	r3, r3, #7
 8004ba0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	019a      	lsls	r2, r3, #6
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	041b      	lsls	r3, r3, #16
 8004bac:	431a      	orrs	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	061b      	lsls	r3, r3, #24
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	071b      	lsls	r3, r3, #28
 8004bba:	493e      	ldr	r1, [pc, #248]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004bc2:	4b3c      	ldr	r3, [pc, #240]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bc8:	f023 021f 	bic.w	r2, r3, #31
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	4938      	ldr	r1, [pc, #224]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d01d      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004be6:	4b33      	ldr	r3, [pc, #204]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004be8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bec:	0e1b      	lsrs	r3, r3, #24
 8004bee:	f003 030f 	and.w	r3, r3, #15
 8004bf2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004bf4:	4b2f      	ldr	r3, [pc, #188]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bfa:	0f1b      	lsrs	r3, r3, #28
 8004bfc:	f003 0307 	and.w	r3, r3, #7
 8004c00:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	019a      	lsls	r2, r3, #6
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	041b      	lsls	r3, r3, #16
 8004c0e:	431a      	orrs	r2, r3
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	061b      	lsls	r3, r3, #24
 8004c14:	431a      	orrs	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	071b      	lsls	r3, r3, #28
 8004c1a:	4926      	ldr	r1, [pc, #152]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d011      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	019a      	lsls	r2, r3, #6
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	041b      	lsls	r3, r3, #16
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	061b      	lsls	r3, r3, #24
 8004c42:	431a      	orrs	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	071b      	lsls	r3, r3, #28
 8004c4a:	491a      	ldr	r1, [pc, #104]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c52:	4b18      	ldr	r3, [pc, #96]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a17      	ldr	r2, [pc, #92]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c58:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004c5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c5e:	f7fd f813 	bl	8001c88 <HAL_GetTick>
 8004c62:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c64:	e008      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c66:	f7fd f80f 	bl	8001c88 <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	2b64      	cmp	r3, #100	@ 0x64
 8004c72:	d901      	bls.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e0d8      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c78:	4b0e      	ldr	r3, [pc, #56]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d0f0      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	f040 80ce 	bne.w	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004c8c:	4b09      	ldr	r3, [pc, #36]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a08      	ldr	r2, [pc, #32]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c98:	f7fc fff6 	bl	8001c88 <HAL_GetTick>
 8004c9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c9e:	e00b      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ca0:	f7fc fff2 	bl	8001c88 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b64      	cmp	r3, #100	@ 0x64
 8004cac:	d904      	bls.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e0bb      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004cb2:	bf00      	nop
 8004cb4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004cb8:	4b5e      	ldr	r3, [pc, #376]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004cc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004cc4:	d0ec      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d009      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d02e      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d12a      	bne.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004cee:	4b51      	ldr	r3, [pc, #324]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cf4:	0c1b      	lsrs	r3, r3, #16
 8004cf6:	f003 0303 	and.w	r3, r3, #3
 8004cfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004cfc:	4b4d      	ldr	r3, [pc, #308]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d02:	0f1b      	lsrs	r3, r3, #28
 8004d04:	f003 0307 	and.w	r3, r3, #7
 8004d08:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	019a      	lsls	r2, r3, #6
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	041b      	lsls	r3, r3, #16
 8004d14:	431a      	orrs	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	061b      	lsls	r3, r3, #24
 8004d1c:	431a      	orrs	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	071b      	lsls	r3, r3, #28
 8004d22:	4944      	ldr	r1, [pc, #272]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004d2a:	4b42      	ldr	r3, [pc, #264]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d30:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	021b      	lsls	r3, r3, #8
 8004d3c:	493d      	ldr	r1, [pc, #244]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d022      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d58:	d11d      	bne.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d5a:	4b36      	ldr	r3, [pc, #216]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d60:	0e1b      	lsrs	r3, r3, #24
 8004d62:	f003 030f 	and.w	r3, r3, #15
 8004d66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d68:	4b32      	ldr	r3, [pc, #200]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d6e:	0f1b      	lsrs	r3, r3, #28
 8004d70:	f003 0307 	and.w	r3, r3, #7
 8004d74:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	019a      	lsls	r2, r3, #6
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a1b      	ldr	r3, [r3, #32]
 8004d80:	041b      	lsls	r3, r3, #16
 8004d82:	431a      	orrs	r2, r3
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	061b      	lsls	r3, r3, #24
 8004d88:	431a      	orrs	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	071b      	lsls	r3, r3, #28
 8004d8e:	4929      	ldr	r1, [pc, #164]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0308 	and.w	r3, r3, #8
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d028      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004da2:	4b24      	ldr	r3, [pc, #144]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004da8:	0e1b      	lsrs	r3, r3, #24
 8004daa:	f003 030f 	and.w	r3, r3, #15
 8004dae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004db0:	4b20      	ldr	r3, [pc, #128]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004db6:	0c1b      	lsrs	r3, r3, #16
 8004db8:	f003 0303 	and.w	r3, r3, #3
 8004dbc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	019a      	lsls	r2, r3, #6
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	041b      	lsls	r3, r3, #16
 8004dc8:	431a      	orrs	r2, r3
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	061b      	lsls	r3, r3, #24
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	69db      	ldr	r3, [r3, #28]
 8004dd4:	071b      	lsls	r3, r3, #28
 8004dd6:	4917      	ldr	r1, [pc, #92]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004dde:	4b15      	ldr	r3, [pc, #84]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004de0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004de4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dec:	4911      	ldr	r1, [pc, #68]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004df4:	4b0f      	ldr	r3, [pc, #60]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a0e      	ldr	r2, [pc, #56]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e00:	f7fc ff42 	bl	8001c88 <HAL_GetTick>
 8004e04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e06:	e008      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e08:	f7fc ff3e 	bl	8001c88 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b64      	cmp	r3, #100	@ 0x64
 8004e14:	d901      	bls.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e007      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e1a:	4b06      	ldr	r3, [pc, #24]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e26:	d1ef      	bne.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3720      	adds	r7, #32
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	40023800 	.word	0x40023800

08004e38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e049      	b.n	8004ede <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d106      	bne.n	8004e64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f7fc fd0e 	bl	8001880 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2202      	movs	r2, #2
 8004e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	3304      	adds	r3, #4
 8004e74:	4619      	mov	r1, r3
 8004e76:	4610      	mov	r0, r2
 8004e78:	f000 fe04 	bl	8005a84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3708      	adds	r7, #8
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
	...

08004ee8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d001      	beq.n	8004f00 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e04c      	b.n	8004f9a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2202      	movs	r2, #2
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a26      	ldr	r2, [pc, #152]	@ (8004fa8 <HAL_TIM_Base_Start+0xc0>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d022      	beq.n	8004f58 <HAL_TIM_Base_Start+0x70>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f1a:	d01d      	beq.n	8004f58 <HAL_TIM_Base_Start+0x70>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a22      	ldr	r2, [pc, #136]	@ (8004fac <HAL_TIM_Base_Start+0xc4>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d018      	beq.n	8004f58 <HAL_TIM_Base_Start+0x70>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a21      	ldr	r2, [pc, #132]	@ (8004fb0 <HAL_TIM_Base_Start+0xc8>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d013      	beq.n	8004f58 <HAL_TIM_Base_Start+0x70>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a1f      	ldr	r2, [pc, #124]	@ (8004fb4 <HAL_TIM_Base_Start+0xcc>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d00e      	beq.n	8004f58 <HAL_TIM_Base_Start+0x70>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a1e      	ldr	r2, [pc, #120]	@ (8004fb8 <HAL_TIM_Base_Start+0xd0>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d009      	beq.n	8004f58 <HAL_TIM_Base_Start+0x70>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a1c      	ldr	r2, [pc, #112]	@ (8004fbc <HAL_TIM_Base_Start+0xd4>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d004      	beq.n	8004f58 <HAL_TIM_Base_Start+0x70>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a1b      	ldr	r2, [pc, #108]	@ (8004fc0 <HAL_TIM_Base_Start+0xd8>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d115      	bne.n	8004f84 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689a      	ldr	r2, [r3, #8]
 8004f5e:	4b19      	ldr	r3, [pc, #100]	@ (8004fc4 <HAL_TIM_Base_Start+0xdc>)
 8004f60:	4013      	ands	r3, r2
 8004f62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2b06      	cmp	r3, #6
 8004f68:	d015      	beq.n	8004f96 <HAL_TIM_Base_Start+0xae>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f70:	d011      	beq.n	8004f96 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f042 0201 	orr.w	r2, r2, #1
 8004f80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f82:	e008      	b.n	8004f96 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f042 0201 	orr.w	r2, r2, #1
 8004f92:	601a      	str	r2, [r3, #0]
 8004f94:	e000      	b.n	8004f98 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f96:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	40010000 	.word	0x40010000
 8004fac:	40000400 	.word	0x40000400
 8004fb0:	40000800 	.word	0x40000800
 8004fb4:	40000c00 	.word	0x40000c00
 8004fb8:	40010400 	.word	0x40010400
 8004fbc:	40014000 	.word	0x40014000
 8004fc0:	40001800 	.word	0x40001800
 8004fc4:	00010007 	.word	0x00010007

08004fc8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e049      	b.n	800506e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d106      	bne.n	8004ff4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f841 	bl	8005076 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	3304      	adds	r3, #4
 8005004:	4619      	mov	r1, r3
 8005006:	4610      	mov	r0, r2
 8005008:	f000 fd3c 	bl	8005a84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005076:	b480      	push	{r7}
 8005078:	b083      	sub	sp, #12
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800507e:	bf00      	nop
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr

0800508a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b082      	sub	sp, #8
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d101      	bne.n	800509c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e049      	b.n	8005130 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d106      	bne.n	80050b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 f841 	bl	8005138 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2202      	movs	r2, #2
 80050ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	3304      	adds	r3, #4
 80050c6:	4619      	mov	r1, r3
 80050c8:	4610      	mov	r0, r2
 80050ca:	f000 fcdb 	bl	8005a84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3708      	adds	r7, #8
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e049      	b.n	80051f2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d106      	bne.n	8005178 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7fc fbd6 	bl	8001924 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	3304      	adds	r3, #4
 8005188:	4619      	mov	r1, r3
 800518a:	4610      	mov	r0, r2
 800518c:	f000 fc7a 	bl	8005a84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b082      	sub	sp, #8
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	f003 0302 	and.w	r3, r3, #2
 800520c:	2b02      	cmp	r3, #2
 800520e:	d122      	bne.n	8005256 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b02      	cmp	r3, #2
 800521c:	d11b      	bne.n	8005256 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f06f 0202 	mvn.w	r2, #2
 8005226:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	f003 0303 	and.w	r3, r3, #3
 8005238:	2b00      	cmp	r3, #0
 800523a:	d003      	beq.n	8005244 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 fc03 	bl	8005a48 <HAL_TIM_IC_CaptureCallback>
 8005242:	e005      	b.n	8005250 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 fbf5 	bl	8005a34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 fc06 	bl	8005a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	f003 0304 	and.w	r3, r3, #4
 8005260:	2b04      	cmp	r3, #4
 8005262:	d122      	bne.n	80052aa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	f003 0304 	and.w	r3, r3, #4
 800526e:	2b04      	cmp	r3, #4
 8005270:	d11b      	bne.n	80052aa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f06f 0204 	mvn.w	r2, #4
 800527a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2202      	movs	r2, #2
 8005280:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800528c:	2b00      	cmp	r3, #0
 800528e:	d003      	beq.n	8005298 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 fbd9 	bl	8005a48 <HAL_TIM_IC_CaptureCallback>
 8005296:	e005      	b.n	80052a4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 fbcb 	bl	8005a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 fbdc 	bl	8005a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	f003 0308 	and.w	r3, r3, #8
 80052b4:	2b08      	cmp	r3, #8
 80052b6:	d122      	bne.n	80052fe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	f003 0308 	and.w	r3, r3, #8
 80052c2:	2b08      	cmp	r3, #8
 80052c4:	d11b      	bne.n	80052fe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f06f 0208 	mvn.w	r2, #8
 80052ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2204      	movs	r2, #4
 80052d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	69db      	ldr	r3, [r3, #28]
 80052dc:	f003 0303 	and.w	r3, r3, #3
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d003      	beq.n	80052ec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 fbaf 	bl	8005a48 <HAL_TIM_IC_CaptureCallback>
 80052ea:	e005      	b.n	80052f8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 fba1 	bl	8005a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 fbb2 	bl	8005a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	f003 0310 	and.w	r3, r3, #16
 8005308:	2b10      	cmp	r3, #16
 800530a:	d122      	bne.n	8005352 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	f003 0310 	and.w	r3, r3, #16
 8005316:	2b10      	cmp	r3, #16
 8005318:	d11b      	bne.n	8005352 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f06f 0210 	mvn.w	r2, #16
 8005322:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2208      	movs	r2, #8
 8005328:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	69db      	ldr	r3, [r3, #28]
 8005330:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005334:	2b00      	cmp	r3, #0
 8005336:	d003      	beq.n	8005340 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 fb85 	bl	8005a48 <HAL_TIM_IC_CaptureCallback>
 800533e:	e005      	b.n	800534c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 fb77 	bl	8005a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 fb88 	bl	8005a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	f003 0301 	and.w	r3, r3, #1
 800535c:	2b01      	cmp	r3, #1
 800535e:	d10e      	bne.n	800537e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	2b01      	cmp	r3, #1
 800536c:	d107      	bne.n	800537e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f06f 0201 	mvn.w	r2, #1
 8005376:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 fb51 	bl	8005a20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005388:	2b80      	cmp	r3, #128	@ 0x80
 800538a:	d10e      	bne.n	80053aa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005396:	2b80      	cmp	r3, #128	@ 0x80
 8005398:	d107      	bne.n	80053aa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80053a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f001 f945 	bl	8006634 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053b8:	d10e      	bne.n	80053d8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053c4:	2b80      	cmp	r3, #128	@ 0x80
 80053c6:	d107      	bne.n	80053d8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80053d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f001 f938 	bl	8006648 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053e2:	2b40      	cmp	r3, #64	@ 0x40
 80053e4:	d10e      	bne.n	8005404 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053f0:	2b40      	cmp	r3, #64	@ 0x40
 80053f2:	d107      	bne.n	8005404 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80053fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 fb36 	bl	8005a70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	f003 0320 	and.w	r3, r3, #32
 800540e:	2b20      	cmp	r3, #32
 8005410:	d10e      	bne.n	8005430 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	f003 0320 	and.w	r3, r3, #32
 800541c:	2b20      	cmp	r3, #32
 800541e:	d107      	bne.n	8005430 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f06f 0220 	mvn.w	r2, #32
 8005428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f001 f8f8 	bl	8006620 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005430:	bf00      	nop
 8005432:	3708      	adds	r7, #8
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b086      	sub	sp, #24
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005444:	2300      	movs	r3, #0
 8005446:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800544e:	2b01      	cmp	r3, #1
 8005450:	d101      	bne.n	8005456 <HAL_TIM_OC_ConfigChannel+0x1e>
 8005452:	2302      	movs	r3, #2
 8005454:	e066      	b.n	8005524 <HAL_TIM_OC_ConfigChannel+0xec>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2b14      	cmp	r3, #20
 8005462:	d857      	bhi.n	8005514 <HAL_TIM_OC_ConfigChannel+0xdc>
 8005464:	a201      	add	r2, pc, #4	@ (adr r2, 800546c <HAL_TIM_OC_ConfigChannel+0x34>)
 8005466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546a:	bf00      	nop
 800546c:	080054c1 	.word	0x080054c1
 8005470:	08005515 	.word	0x08005515
 8005474:	08005515 	.word	0x08005515
 8005478:	08005515 	.word	0x08005515
 800547c:	080054cf 	.word	0x080054cf
 8005480:	08005515 	.word	0x08005515
 8005484:	08005515 	.word	0x08005515
 8005488:	08005515 	.word	0x08005515
 800548c:	080054dd 	.word	0x080054dd
 8005490:	08005515 	.word	0x08005515
 8005494:	08005515 	.word	0x08005515
 8005498:	08005515 	.word	0x08005515
 800549c:	080054eb 	.word	0x080054eb
 80054a0:	08005515 	.word	0x08005515
 80054a4:	08005515 	.word	0x08005515
 80054a8:	08005515 	.word	0x08005515
 80054ac:	080054f9 	.word	0x080054f9
 80054b0:	08005515 	.word	0x08005515
 80054b4:	08005515 	.word	0x08005515
 80054b8:	08005515 	.word	0x08005515
 80054bc:	08005507 	.word	0x08005507
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68b9      	ldr	r1, [r7, #8]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 fb7c 	bl	8005bc4 <TIM_OC1_SetConfig>
      break;
 80054cc:	e025      	b.n	800551a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68b9      	ldr	r1, [r7, #8]
 80054d4:	4618      	mov	r0, r3
 80054d6:	f000 fbe7 	bl	8005ca8 <TIM_OC2_SetConfig>
      break;
 80054da:	e01e      	b.n	800551a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68b9      	ldr	r1, [r7, #8]
 80054e2:	4618      	mov	r0, r3
 80054e4:	f000 fc58 	bl	8005d98 <TIM_OC3_SetConfig>
      break;
 80054e8:	e017      	b.n	800551a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68b9      	ldr	r1, [r7, #8]
 80054f0:	4618      	mov	r0, r3
 80054f2:	f000 fcc7 	bl	8005e84 <TIM_OC4_SetConfig>
      break;
 80054f6:	e010      	b.n	800551a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68b9      	ldr	r1, [r7, #8]
 80054fe:	4618      	mov	r0, r3
 8005500:	f000 fd18 	bl	8005f34 <TIM_OC5_SetConfig>
      break;
 8005504:	e009      	b.n	800551a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68b9      	ldr	r1, [r7, #8]
 800550c:	4618      	mov	r0, r3
 800550e:	f000 fd63 	bl	8005fd8 <TIM_OC6_SetConfig>
      break;
 8005512:	e002      	b.n	800551a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	75fb      	strb	r3, [r7, #23]
      break;
 8005518:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005522:	7dfb      	ldrb	r3, [r7, #23]
}
 8005524:	4618      	mov	r0, r3
 8005526:	3718      	adds	r7, #24
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b086      	sub	sp, #24
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005538:	2300      	movs	r3, #0
 800553a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005542:	2b01      	cmp	r3, #1
 8005544:	d101      	bne.n	800554a <HAL_TIM_IC_ConfigChannel+0x1e>
 8005546:	2302      	movs	r3, #2
 8005548:	e088      	b.n	800565c <HAL_TIM_IC_ConfigChannel+0x130>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d11b      	bne.n	8005590 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005568:	f000 fd8a 	bl	8006080 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	699a      	ldr	r2, [r3, #24]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f022 020c 	bic.w	r2, r2, #12
 800557a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6999      	ldr	r1, [r3, #24]
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	689a      	ldr	r2, [r3, #8]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	430a      	orrs	r2, r1
 800558c:	619a      	str	r2, [r3, #24]
 800558e:	e060      	b.n	8005652 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b04      	cmp	r3, #4
 8005594:	d11c      	bne.n	80055d0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80055a6:	f000 fe0e 	bl	80061c6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	699a      	ldr	r2, [r3, #24]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80055b8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	6999      	ldr	r1, [r3, #24]
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	021a      	lsls	r2, r3, #8
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	430a      	orrs	r2, r1
 80055cc:	619a      	str	r2, [r3, #24]
 80055ce:	e040      	b.n	8005652 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b08      	cmp	r3, #8
 80055d4:	d11b      	bne.n	800560e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80055e6:	f000 fe5b 	bl	80062a0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	69da      	ldr	r2, [r3, #28]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f022 020c 	bic.w	r2, r2, #12
 80055f8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	69d9      	ldr	r1, [r3, #28]
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	689a      	ldr	r2, [r3, #8]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	430a      	orrs	r2, r1
 800560a:	61da      	str	r2, [r3, #28]
 800560c:	e021      	b.n	8005652 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2b0c      	cmp	r3, #12
 8005612:	d11c      	bne.n	800564e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005624:	f000 fe78 	bl	8006318 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	69da      	ldr	r2, [r3, #28]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005636:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	69d9      	ldr	r1, [r3, #28]
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	021a      	lsls	r2, r3, #8
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	430a      	orrs	r2, r1
 800564a:	61da      	str	r2, [r3, #28]
 800564c:	e001      	b.n	8005652 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800565a:	7dfb      	ldrb	r3, [r7, #23]
}
 800565c:	4618      	mov	r0, r3
 800565e:	3718      	adds	r7, #24
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005670:	2300      	movs	r3, #0
 8005672:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800567a:	2b01      	cmp	r3, #1
 800567c:	d101      	bne.n	8005682 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800567e:	2302      	movs	r3, #2
 8005680:	e0ff      	b.n	8005882 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2b14      	cmp	r3, #20
 800568e:	f200 80f0 	bhi.w	8005872 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005692:	a201      	add	r2, pc, #4	@ (adr r2, 8005698 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005698:	080056ed 	.word	0x080056ed
 800569c:	08005873 	.word	0x08005873
 80056a0:	08005873 	.word	0x08005873
 80056a4:	08005873 	.word	0x08005873
 80056a8:	0800572d 	.word	0x0800572d
 80056ac:	08005873 	.word	0x08005873
 80056b0:	08005873 	.word	0x08005873
 80056b4:	08005873 	.word	0x08005873
 80056b8:	0800576f 	.word	0x0800576f
 80056bc:	08005873 	.word	0x08005873
 80056c0:	08005873 	.word	0x08005873
 80056c4:	08005873 	.word	0x08005873
 80056c8:	080057af 	.word	0x080057af
 80056cc:	08005873 	.word	0x08005873
 80056d0:	08005873 	.word	0x08005873
 80056d4:	08005873 	.word	0x08005873
 80056d8:	080057f1 	.word	0x080057f1
 80056dc:	08005873 	.word	0x08005873
 80056e0:	08005873 	.word	0x08005873
 80056e4:	08005873 	.word	0x08005873
 80056e8:	08005831 	.word	0x08005831
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68b9      	ldr	r1, [r7, #8]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 fa66 	bl	8005bc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	699a      	ldr	r2, [r3, #24]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f042 0208 	orr.w	r2, r2, #8
 8005706:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	699a      	ldr	r2, [r3, #24]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f022 0204 	bic.w	r2, r2, #4
 8005716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6999      	ldr	r1, [r3, #24]
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	691a      	ldr	r2, [r3, #16]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	430a      	orrs	r2, r1
 8005728:	619a      	str	r2, [r3, #24]
      break;
 800572a:	e0a5      	b.n	8005878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68b9      	ldr	r1, [r7, #8]
 8005732:	4618      	mov	r0, r3
 8005734:	f000 fab8 	bl	8005ca8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	699a      	ldr	r2, [r3, #24]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005746:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	699a      	ldr	r2, [r3, #24]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005756:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6999      	ldr	r1, [r3, #24]
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	021a      	lsls	r2, r3, #8
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	430a      	orrs	r2, r1
 800576a:	619a      	str	r2, [r3, #24]
      break;
 800576c:	e084      	b.n	8005878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68b9      	ldr	r1, [r7, #8]
 8005774:	4618      	mov	r0, r3
 8005776:	f000 fb0f 	bl	8005d98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	69da      	ldr	r2, [r3, #28]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f042 0208 	orr.w	r2, r2, #8
 8005788:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	69da      	ldr	r2, [r3, #28]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f022 0204 	bic.w	r2, r2, #4
 8005798:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	69d9      	ldr	r1, [r3, #28]
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	691a      	ldr	r2, [r3, #16]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	430a      	orrs	r2, r1
 80057aa:	61da      	str	r2, [r3, #28]
      break;
 80057ac:	e064      	b.n	8005878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68b9      	ldr	r1, [r7, #8]
 80057b4:	4618      	mov	r0, r3
 80057b6:	f000 fb65 	bl	8005e84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	69da      	ldr	r2, [r3, #28]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	69da      	ldr	r2, [r3, #28]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	69d9      	ldr	r1, [r3, #28]
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	021a      	lsls	r2, r3, #8
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	61da      	str	r2, [r3, #28]
      break;
 80057ee:	e043      	b.n	8005878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68b9      	ldr	r1, [r7, #8]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 fb9c 	bl	8005f34 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f042 0208 	orr.w	r2, r2, #8
 800580a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f022 0204 	bic.w	r2, r2, #4
 800581a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	691a      	ldr	r2, [r3, #16]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	430a      	orrs	r2, r1
 800582c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800582e:	e023      	b.n	8005878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68b9      	ldr	r1, [r7, #8]
 8005836:	4618      	mov	r0, r3
 8005838:	f000 fbce 	bl	8005fd8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800584a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800585a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	021a      	lsls	r2, r3, #8
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	430a      	orrs	r2, r1
 800586e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005870:	e002      	b.n	8005878 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	75fb      	strb	r3, [r7, #23]
      break;
 8005876:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005880:	7dfb      	ldrb	r3, [r7, #23]
}
 8005882:	4618      	mov	r0, r3
 8005884:	3718      	adds	r7, #24
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop

0800588c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005896:	2300      	movs	r3, #0
 8005898:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d101      	bne.n	80058a8 <HAL_TIM_ConfigClockSource+0x1c>
 80058a4:	2302      	movs	r3, #2
 80058a6:	e0b4      	b.n	8005a12 <HAL_TIM_ConfigClockSource+0x186>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2202      	movs	r2, #2
 80058b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	4b56      	ldr	r3, [pc, #344]	@ (8005a1c <HAL_TIM_ConfigClockSource+0x190>)
 80058c4:	4013      	ands	r3, r2
 80058c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68ba      	ldr	r2, [r7, #8]
 80058d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058e0:	d03e      	beq.n	8005960 <HAL_TIM_ConfigClockSource+0xd4>
 80058e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058e6:	f200 8087 	bhi.w	80059f8 <HAL_TIM_ConfigClockSource+0x16c>
 80058ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058ee:	f000 8086 	beq.w	80059fe <HAL_TIM_ConfigClockSource+0x172>
 80058f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058f6:	d87f      	bhi.n	80059f8 <HAL_TIM_ConfigClockSource+0x16c>
 80058f8:	2b70      	cmp	r3, #112	@ 0x70
 80058fa:	d01a      	beq.n	8005932 <HAL_TIM_ConfigClockSource+0xa6>
 80058fc:	2b70      	cmp	r3, #112	@ 0x70
 80058fe:	d87b      	bhi.n	80059f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005900:	2b60      	cmp	r3, #96	@ 0x60
 8005902:	d050      	beq.n	80059a6 <HAL_TIM_ConfigClockSource+0x11a>
 8005904:	2b60      	cmp	r3, #96	@ 0x60
 8005906:	d877      	bhi.n	80059f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005908:	2b50      	cmp	r3, #80	@ 0x50
 800590a:	d03c      	beq.n	8005986 <HAL_TIM_ConfigClockSource+0xfa>
 800590c:	2b50      	cmp	r3, #80	@ 0x50
 800590e:	d873      	bhi.n	80059f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005910:	2b40      	cmp	r3, #64	@ 0x40
 8005912:	d058      	beq.n	80059c6 <HAL_TIM_ConfigClockSource+0x13a>
 8005914:	2b40      	cmp	r3, #64	@ 0x40
 8005916:	d86f      	bhi.n	80059f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005918:	2b30      	cmp	r3, #48	@ 0x30
 800591a:	d064      	beq.n	80059e6 <HAL_TIM_ConfigClockSource+0x15a>
 800591c:	2b30      	cmp	r3, #48	@ 0x30
 800591e:	d86b      	bhi.n	80059f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005920:	2b20      	cmp	r3, #32
 8005922:	d060      	beq.n	80059e6 <HAL_TIM_ConfigClockSource+0x15a>
 8005924:	2b20      	cmp	r3, #32
 8005926:	d867      	bhi.n	80059f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005928:	2b00      	cmp	r3, #0
 800592a:	d05c      	beq.n	80059e6 <HAL_TIM_ConfigClockSource+0x15a>
 800592c:	2b10      	cmp	r3, #16
 800592e:	d05a      	beq.n	80059e6 <HAL_TIM_ConfigClockSource+0x15a>
 8005930:	e062      	b.n	80059f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005942:	f000 fd41 	bl	80063c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005954:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	609a      	str	r2, [r3, #8]
      break;
 800595e:	e04f      	b.n	8005a00 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005970:	f000 fd2a 	bl	80063c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	689a      	ldr	r2, [r3, #8]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005982:	609a      	str	r2, [r3, #8]
      break;
 8005984:	e03c      	b.n	8005a00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005992:	461a      	mov	r2, r3
 8005994:	f000 fbe8 	bl	8006168 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2150      	movs	r1, #80	@ 0x50
 800599e:	4618      	mov	r0, r3
 80059a0:	f000 fcf7 	bl	8006392 <TIM_ITRx_SetConfig>
      break;
 80059a4:	e02c      	b.n	8005a00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80059b2:	461a      	mov	r2, r3
 80059b4:	f000 fc44 	bl	8006240 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2160      	movs	r1, #96	@ 0x60
 80059be:	4618      	mov	r0, r3
 80059c0:	f000 fce7 	bl	8006392 <TIM_ITRx_SetConfig>
      break;
 80059c4:	e01c      	b.n	8005a00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059d2:	461a      	mov	r2, r3
 80059d4:	f000 fbc8 	bl	8006168 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2140      	movs	r1, #64	@ 0x40
 80059de:	4618      	mov	r0, r3
 80059e0:	f000 fcd7 	bl	8006392 <TIM_ITRx_SetConfig>
      break;
 80059e4:	e00c      	b.n	8005a00 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4619      	mov	r1, r3
 80059f0:	4610      	mov	r0, r2
 80059f2:	f000 fcce 	bl	8006392 <TIM_ITRx_SetConfig>
      break;
 80059f6:	e003      	b.n	8005a00 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	73fb      	strb	r3, [r7, #15]
      break;
 80059fc:	e000      	b.n	8005a00 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80059fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3710      	adds	r7, #16
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	fffeff88 	.word	0xfffeff88

08005a20 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a40      	ldr	r2, [pc, #256]	@ (8005b98 <TIM_Base_SetConfig+0x114>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d013      	beq.n	8005ac4 <TIM_Base_SetConfig+0x40>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aa2:	d00f      	beq.n	8005ac4 <TIM_Base_SetConfig+0x40>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a3d      	ldr	r2, [pc, #244]	@ (8005b9c <TIM_Base_SetConfig+0x118>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d00b      	beq.n	8005ac4 <TIM_Base_SetConfig+0x40>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a3c      	ldr	r2, [pc, #240]	@ (8005ba0 <TIM_Base_SetConfig+0x11c>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d007      	beq.n	8005ac4 <TIM_Base_SetConfig+0x40>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a3b      	ldr	r2, [pc, #236]	@ (8005ba4 <TIM_Base_SetConfig+0x120>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d003      	beq.n	8005ac4 <TIM_Base_SetConfig+0x40>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a3a      	ldr	r2, [pc, #232]	@ (8005ba8 <TIM_Base_SetConfig+0x124>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d108      	bne.n	8005ad6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a2f      	ldr	r2, [pc, #188]	@ (8005b98 <TIM_Base_SetConfig+0x114>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d02b      	beq.n	8005b36 <TIM_Base_SetConfig+0xb2>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ae4:	d027      	beq.n	8005b36 <TIM_Base_SetConfig+0xb2>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a2c      	ldr	r2, [pc, #176]	@ (8005b9c <TIM_Base_SetConfig+0x118>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d023      	beq.n	8005b36 <TIM_Base_SetConfig+0xb2>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a2b      	ldr	r2, [pc, #172]	@ (8005ba0 <TIM_Base_SetConfig+0x11c>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d01f      	beq.n	8005b36 <TIM_Base_SetConfig+0xb2>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a2a      	ldr	r2, [pc, #168]	@ (8005ba4 <TIM_Base_SetConfig+0x120>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d01b      	beq.n	8005b36 <TIM_Base_SetConfig+0xb2>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a29      	ldr	r2, [pc, #164]	@ (8005ba8 <TIM_Base_SetConfig+0x124>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d017      	beq.n	8005b36 <TIM_Base_SetConfig+0xb2>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a28      	ldr	r2, [pc, #160]	@ (8005bac <TIM_Base_SetConfig+0x128>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d013      	beq.n	8005b36 <TIM_Base_SetConfig+0xb2>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a27      	ldr	r2, [pc, #156]	@ (8005bb0 <TIM_Base_SetConfig+0x12c>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d00f      	beq.n	8005b36 <TIM_Base_SetConfig+0xb2>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a26      	ldr	r2, [pc, #152]	@ (8005bb4 <TIM_Base_SetConfig+0x130>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d00b      	beq.n	8005b36 <TIM_Base_SetConfig+0xb2>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a25      	ldr	r2, [pc, #148]	@ (8005bb8 <TIM_Base_SetConfig+0x134>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d007      	beq.n	8005b36 <TIM_Base_SetConfig+0xb2>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a24      	ldr	r2, [pc, #144]	@ (8005bbc <TIM_Base_SetConfig+0x138>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d003      	beq.n	8005b36 <TIM_Base_SetConfig+0xb2>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a23      	ldr	r2, [pc, #140]	@ (8005bc0 <TIM_Base_SetConfig+0x13c>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d108      	bne.n	8005b48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	689a      	ldr	r2, [r3, #8]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8005b98 <TIM_Base_SetConfig+0x114>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d003      	beq.n	8005b7c <TIM_Base_SetConfig+0xf8>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a0c      	ldr	r2, [pc, #48]	@ (8005ba8 <TIM_Base_SetConfig+0x124>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d103      	bne.n	8005b84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	691a      	ldr	r2, [r3, #16]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	615a      	str	r2, [r3, #20]
}
 8005b8a:	bf00      	nop
 8005b8c:	3714      	adds	r7, #20
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	40010000 	.word	0x40010000
 8005b9c:	40000400 	.word	0x40000400
 8005ba0:	40000800 	.word	0x40000800
 8005ba4:	40000c00 	.word	0x40000c00
 8005ba8:	40010400 	.word	0x40010400
 8005bac:	40014000 	.word	0x40014000
 8005bb0:	40014400 	.word	0x40014400
 8005bb4:	40014800 	.word	0x40014800
 8005bb8:	40001800 	.word	0x40001800
 8005bbc:	40001c00 	.word	0x40001c00
 8005bc0:	40002000 	.word	0x40002000

08005bc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b087      	sub	sp, #28
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	f023 0201 	bic.w	r2, r3, #1
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	4b2b      	ldr	r3, [pc, #172]	@ (8005c9c <TIM_OC1_SetConfig+0xd8>)
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f023 0303 	bic.w	r3, r3, #3
 8005bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	f023 0302 	bic.w	r3, r3, #2
 8005c0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a21      	ldr	r2, [pc, #132]	@ (8005ca0 <TIM_OC1_SetConfig+0xdc>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d003      	beq.n	8005c28 <TIM_OC1_SetConfig+0x64>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a20      	ldr	r2, [pc, #128]	@ (8005ca4 <TIM_OC1_SetConfig+0xe0>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d10c      	bne.n	8005c42 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	f023 0308 	bic.w	r3, r3, #8
 8005c2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	f023 0304 	bic.w	r3, r3, #4
 8005c40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a16      	ldr	r2, [pc, #88]	@ (8005ca0 <TIM_OC1_SetConfig+0xdc>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d003      	beq.n	8005c52 <TIM_OC1_SetConfig+0x8e>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a15      	ldr	r2, [pc, #84]	@ (8005ca4 <TIM_OC1_SetConfig+0xe0>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d111      	bne.n	8005c76 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	685a      	ldr	r2, [r3, #4]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	621a      	str	r2, [r3, #32]
}
 8005c90:	bf00      	nop
 8005c92:	371c      	adds	r7, #28
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr
 8005c9c:	fffeff8f 	.word	0xfffeff8f
 8005ca0:	40010000 	.word	0x40010000
 8005ca4:	40010400 	.word	0x40010400

08005ca8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b087      	sub	sp, #28
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	f023 0210 	bic.w	r2, r3, #16
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	4b2e      	ldr	r3, [pc, #184]	@ (8005d8c <TIM_OC2_SetConfig+0xe4>)
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	021b      	lsls	r3, r3, #8
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	f023 0320 	bic.w	r3, r3, #32
 8005cf2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	011b      	lsls	r3, r3, #4
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a23      	ldr	r2, [pc, #140]	@ (8005d90 <TIM_OC2_SetConfig+0xe8>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d003      	beq.n	8005d10 <TIM_OC2_SetConfig+0x68>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a22      	ldr	r2, [pc, #136]	@ (8005d94 <TIM_OC2_SetConfig+0xec>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d10d      	bne.n	8005d2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	011b      	lsls	r3, r3, #4
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a18      	ldr	r2, [pc, #96]	@ (8005d90 <TIM_OC2_SetConfig+0xe8>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d003      	beq.n	8005d3c <TIM_OC2_SetConfig+0x94>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a17      	ldr	r2, [pc, #92]	@ (8005d94 <TIM_OC2_SetConfig+0xec>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d113      	bne.n	8005d64 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	685a      	ldr	r2, [r3, #4]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	621a      	str	r2, [r3, #32]
}
 8005d7e:	bf00      	nop
 8005d80:	371c      	adds	r7, #28
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	feff8fff 	.word	0xfeff8fff
 8005d90:	40010000 	.word	0x40010000
 8005d94:	40010400 	.word	0x40010400

08005d98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b087      	sub	sp, #28
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	69db      	ldr	r3, [r3, #28]
 8005dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	4b2d      	ldr	r3, [pc, #180]	@ (8005e78 <TIM_OC3_SetConfig+0xe0>)
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f023 0303 	bic.w	r3, r3, #3
 8005dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005de0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	021b      	lsls	r3, r3, #8
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a22      	ldr	r2, [pc, #136]	@ (8005e7c <TIM_OC3_SetConfig+0xe4>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d003      	beq.n	8005dfe <TIM_OC3_SetConfig+0x66>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a21      	ldr	r2, [pc, #132]	@ (8005e80 <TIM_OC3_SetConfig+0xe8>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d10d      	bne.n	8005e1a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	021b      	lsls	r3, r3, #8
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a17      	ldr	r2, [pc, #92]	@ (8005e7c <TIM_OC3_SetConfig+0xe4>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d003      	beq.n	8005e2a <TIM_OC3_SetConfig+0x92>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a16      	ldr	r2, [pc, #88]	@ (8005e80 <TIM_OC3_SetConfig+0xe8>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d113      	bne.n	8005e52 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	011b      	lsls	r3, r3, #4
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	011b      	lsls	r3, r3, #4
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	621a      	str	r2, [r3, #32]
}
 8005e6c:	bf00      	nop
 8005e6e:	371c      	adds	r7, #28
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr
 8005e78:	fffeff8f 	.word	0xfffeff8f
 8005e7c:	40010000 	.word	0x40010000
 8005e80:	40010400 	.word	0x40010400

08005e84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b087      	sub	sp, #28
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	69db      	ldr	r3, [r3, #28]
 8005eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	4b1e      	ldr	r3, [pc, #120]	@ (8005f28 <TIM_OC4_SetConfig+0xa4>)
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	021b      	lsls	r3, r3, #8
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ece:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	031b      	lsls	r3, r3, #12
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a13      	ldr	r2, [pc, #76]	@ (8005f2c <TIM_OC4_SetConfig+0xa8>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d003      	beq.n	8005eec <TIM_OC4_SetConfig+0x68>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a12      	ldr	r2, [pc, #72]	@ (8005f30 <TIM_OC4_SetConfig+0xac>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d109      	bne.n	8005f00 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ef2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	019b      	lsls	r3, r3, #6
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	693a      	ldr	r2, [r7, #16]
 8005f18:	621a      	str	r2, [r3, #32]
}
 8005f1a:	bf00      	nop
 8005f1c:	371c      	adds	r7, #28
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	feff8fff 	.word	0xfeff8fff
 8005f2c:	40010000 	.word	0x40010000
 8005f30:	40010400 	.word	0x40010400

08005f34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b087      	sub	sp, #28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	4b1b      	ldr	r3, [pc, #108]	@ (8005fcc <TIM_OC5_SetConfig+0x98>)
 8005f60:	4013      	ands	r3, r2
 8005f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005f74:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	041b      	lsls	r3, r3, #16
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a12      	ldr	r2, [pc, #72]	@ (8005fd0 <TIM_OC5_SetConfig+0x9c>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d003      	beq.n	8005f92 <TIM_OC5_SetConfig+0x5e>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a11      	ldr	r2, [pc, #68]	@ (8005fd4 <TIM_OC5_SetConfig+0xa0>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d109      	bne.n	8005fa6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	695b      	ldr	r3, [r3, #20]
 8005f9e:	021b      	lsls	r3, r3, #8
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	697a      	ldr	r2, [r7, #20]
 8005faa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	685a      	ldr	r2, [r3, #4]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	621a      	str	r2, [r3, #32]
}
 8005fc0:	bf00      	nop
 8005fc2:	371c      	adds	r7, #28
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr
 8005fcc:	fffeff8f 	.word	0xfffeff8f
 8005fd0:	40010000 	.word	0x40010000
 8005fd4:	40010400 	.word	0x40010400

08005fd8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b087      	sub	sp, #28
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a1b      	ldr	r3, [r3, #32]
 8005fe6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	4b1c      	ldr	r3, [pc, #112]	@ (8006074 <TIM_OC6_SetConfig+0x9c>)
 8006004:	4013      	ands	r3, r2
 8006006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	021b      	lsls	r3, r3, #8
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	4313      	orrs	r3, r2
 8006012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800601a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	051b      	lsls	r3, r3, #20
 8006022:	693a      	ldr	r2, [r7, #16]
 8006024:	4313      	orrs	r3, r2
 8006026:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a13      	ldr	r2, [pc, #76]	@ (8006078 <TIM_OC6_SetConfig+0xa0>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d003      	beq.n	8006038 <TIM_OC6_SetConfig+0x60>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a12      	ldr	r2, [pc, #72]	@ (800607c <TIM_OC6_SetConfig+0xa4>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d109      	bne.n	800604c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800603e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	029b      	lsls	r3, r3, #10
 8006046:	697a      	ldr	r2, [r7, #20]
 8006048:	4313      	orrs	r3, r2
 800604a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	697a      	ldr	r2, [r7, #20]
 8006050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	621a      	str	r2, [r3, #32]
}
 8006066:	bf00      	nop
 8006068:	371c      	adds	r7, #28
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	feff8fff 	.word	0xfeff8fff
 8006078:	40010000 	.word	0x40010000
 800607c:	40010400 	.word	0x40010400

08006080 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006080:	b480      	push	{r7}
 8006082:	b087      	sub	sp, #28
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
 800608c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	f023 0201 	bic.w	r2, r3, #1
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6a1b      	ldr	r3, [r3, #32]
 80060a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	4a28      	ldr	r2, [pc, #160]	@ (800614c <TIM_TI1_SetConfig+0xcc>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d01b      	beq.n	80060e6 <TIM_TI1_SetConfig+0x66>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060b4:	d017      	beq.n	80060e6 <TIM_TI1_SetConfig+0x66>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	4a25      	ldr	r2, [pc, #148]	@ (8006150 <TIM_TI1_SetConfig+0xd0>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d013      	beq.n	80060e6 <TIM_TI1_SetConfig+0x66>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	4a24      	ldr	r2, [pc, #144]	@ (8006154 <TIM_TI1_SetConfig+0xd4>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d00f      	beq.n	80060e6 <TIM_TI1_SetConfig+0x66>
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	4a23      	ldr	r2, [pc, #140]	@ (8006158 <TIM_TI1_SetConfig+0xd8>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d00b      	beq.n	80060e6 <TIM_TI1_SetConfig+0x66>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	4a22      	ldr	r2, [pc, #136]	@ (800615c <TIM_TI1_SetConfig+0xdc>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d007      	beq.n	80060e6 <TIM_TI1_SetConfig+0x66>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	4a21      	ldr	r2, [pc, #132]	@ (8006160 <TIM_TI1_SetConfig+0xe0>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d003      	beq.n	80060e6 <TIM_TI1_SetConfig+0x66>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	4a20      	ldr	r2, [pc, #128]	@ (8006164 <TIM_TI1_SetConfig+0xe4>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d101      	bne.n	80060ea <TIM_TI1_SetConfig+0x6a>
 80060e6:	2301      	movs	r3, #1
 80060e8:	e000      	b.n	80060ec <TIM_TI1_SetConfig+0x6c>
 80060ea:	2300      	movs	r3, #0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d008      	beq.n	8006102 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	f023 0303 	bic.w	r3, r3, #3
 80060f6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	617b      	str	r3, [r7, #20]
 8006100:	e003      	b.n	800610a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	f043 0301 	orr.w	r3, r3, #1
 8006108:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006110:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	011b      	lsls	r3, r3, #4
 8006116:	b2db      	uxtb	r3, r3
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	4313      	orrs	r3, r2
 800611c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	f023 030a 	bic.w	r3, r3, #10
 8006124:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	f003 030a 	and.w	r3, r3, #10
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	4313      	orrs	r3, r2
 8006130:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	697a      	ldr	r2, [r7, #20]
 8006136:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	621a      	str	r2, [r3, #32]
}
 800613e:	bf00      	nop
 8006140:	371c      	adds	r7, #28
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	40010000 	.word	0x40010000
 8006150:	40000400 	.word	0x40000400
 8006154:	40000800 	.word	0x40000800
 8006158:	40000c00 	.word	0x40000c00
 800615c:	40010400 	.word	0x40010400
 8006160:	40014000 	.word	0x40014000
 8006164:	40001800 	.word	0x40001800

08006168 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006168:	b480      	push	{r7}
 800616a:	b087      	sub	sp, #28
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6a1b      	ldr	r3, [r3, #32]
 8006178:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	f023 0201 	bic.w	r2, r3, #1
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006192:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	011b      	lsls	r3, r3, #4
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	4313      	orrs	r3, r2
 800619c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	f023 030a 	bic.w	r3, r3, #10
 80061a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	697a      	ldr	r2, [r7, #20]
 80061b8:	621a      	str	r2, [r3, #32]
}
 80061ba:	bf00      	nop
 80061bc:	371c      	adds	r7, #28
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr

080061c6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80061c6:	b480      	push	{r7}
 80061c8:	b087      	sub	sp, #28
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	60f8      	str	r0, [r7, #12]
 80061ce:	60b9      	str	r1, [r7, #8]
 80061d0:	607a      	str	r2, [r7, #4]
 80061d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6a1b      	ldr	r3, [r3, #32]
 80061d8:	f023 0210 	bic.w	r2, r3, #16
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	699b      	ldr	r3, [r3, #24]
 80061e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	021b      	lsls	r3, r3, #8
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006204:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	031b      	lsls	r3, r3, #12
 800620a:	b29b      	uxth	r3, r3
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	4313      	orrs	r3, r2
 8006210:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006218:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	011b      	lsls	r3, r3, #4
 800621e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006222:	693a      	ldr	r2, [r7, #16]
 8006224:	4313      	orrs	r3, r2
 8006226:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	697a      	ldr	r2, [r7, #20]
 800622c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	693a      	ldr	r2, [r7, #16]
 8006232:	621a      	str	r2, [r3, #32]
}
 8006234:	bf00      	nop
 8006236:	371c      	adds	r7, #28
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006240:	b480      	push	{r7}
 8006242:	b087      	sub	sp, #28
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6a1b      	ldr	r3, [r3, #32]
 8006250:	f023 0210 	bic.w	r2, r3, #16
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6a1b      	ldr	r3, [r3, #32]
 8006262:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800626a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	031b      	lsls	r3, r3, #12
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	4313      	orrs	r3, r2
 8006274:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800627c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	011b      	lsls	r3, r3, #4
 8006282:	693a      	ldr	r2, [r7, #16]
 8006284:	4313      	orrs	r3, r2
 8006286:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	693a      	ldr	r2, [r7, #16]
 8006292:	621a      	str	r2, [r3, #32]
}
 8006294:	bf00      	nop
 8006296:	371c      	adds	r7, #28
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b087      	sub	sp, #28
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
 80062ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	69db      	ldr	r3, [r3, #28]
 80062be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6a1b      	ldr	r3, [r3, #32]
 80062c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	f023 0303 	bic.w	r3, r3, #3
 80062cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	011b      	lsls	r3, r3, #4
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80062f0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	021b      	lsls	r3, r3, #8
 80062f6:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	697a      	ldr	r2, [r7, #20]
 8006304:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	621a      	str	r2, [r3, #32]
}
 800630c:	bf00      	nop
 800630e:	371c      	adds	r7, #28
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006318:	b480      	push	{r7}
 800631a:	b087      	sub	sp, #28
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	607a      	str	r2, [r7, #4]
 8006324:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	69db      	ldr	r3, [r3, #28]
 8006336:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6a1b      	ldr	r3, [r3, #32]
 800633c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006344:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	021b      	lsls	r3, r3, #8
 800634a:	697a      	ldr	r2, [r7, #20]
 800634c:	4313      	orrs	r3, r2
 800634e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006356:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	031b      	lsls	r3, r3, #12
 800635c:	b29b      	uxth	r3, r3
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	4313      	orrs	r3, r2
 8006362:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800636a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	031b      	lsls	r3, r3, #12
 8006370:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	4313      	orrs	r3, r2
 8006378:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	621a      	str	r2, [r3, #32]
}
 8006386:	bf00      	nop
 8006388:	371c      	adds	r7, #28
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr

08006392 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006392:	b480      	push	{r7}
 8006394:	b085      	sub	sp, #20
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
 800639a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063aa:	683a      	ldr	r2, [r7, #0]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	f043 0307 	orr.w	r3, r3, #7
 80063b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	609a      	str	r2, [r3, #8]
}
 80063bc:	bf00      	nop
 80063be:	3714      	adds	r7, #20
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b087      	sub	sp, #28
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
 80063d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80063e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	021a      	lsls	r2, r3, #8
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	431a      	orrs	r2, r3
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	697a      	ldr	r2, [r7, #20]
 80063fa:	609a      	str	r2, [r3, #8]
}
 80063fc:	bf00      	nop
 80063fe:	371c      	adds	r7, #28
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006418:	2b01      	cmp	r3, #1
 800641a:	d101      	bne.n	8006420 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800641c:	2302      	movs	r3, #2
 800641e:	e06d      	b.n	80064fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2202      	movs	r2, #2
 800642c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a30      	ldr	r2, [pc, #192]	@ (8006508 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d004      	beq.n	8006454 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a2f      	ldr	r2, [pc, #188]	@ (800650c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d108      	bne.n	8006466 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800645a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	4313      	orrs	r3, r2
 8006464:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800646c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	4313      	orrs	r3, r2
 8006476:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a20      	ldr	r2, [pc, #128]	@ (8006508 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d022      	beq.n	80064d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006492:	d01d      	beq.n	80064d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a1d      	ldr	r2, [pc, #116]	@ (8006510 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d018      	beq.n	80064d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a1c      	ldr	r2, [pc, #112]	@ (8006514 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d013      	beq.n	80064d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a1a      	ldr	r2, [pc, #104]	@ (8006518 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d00e      	beq.n	80064d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a15      	ldr	r2, [pc, #84]	@ (800650c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d009      	beq.n	80064d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a16      	ldr	r2, [pc, #88]	@ (800651c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d004      	beq.n	80064d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a15      	ldr	r2, [pc, #84]	@ (8006520 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d10c      	bne.n	80064ea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	4313      	orrs	r3, r2
 80064e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2201      	movs	r2, #1
 80064ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3714      	adds	r7, #20
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr
 8006508:	40010000 	.word	0x40010000
 800650c:	40010400 	.word	0x40010400
 8006510:	40000400 	.word	0x40000400
 8006514:	40000800 	.word	0x40000800
 8006518:	40000c00 	.word	0x40000c00
 800651c:	40014000 	.word	0x40014000
 8006520:	40001800 	.word	0x40001800

08006524 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800652e:	2300      	movs	r3, #0
 8006530:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006538:	2b01      	cmp	r3, #1
 800653a:	d101      	bne.n	8006540 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800653c:	2302      	movs	r3, #2
 800653e:	e065      	b.n	800660c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	4313      	orrs	r3, r2
 8006554:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	4313      	orrs	r3, r2
 8006562:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	4313      	orrs	r3, r2
 8006570:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4313      	orrs	r3, r2
 800657e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	4313      	orrs	r3, r2
 800658c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	695b      	ldr	r3, [r3, #20]
 8006598:	4313      	orrs	r3, r2
 800659a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065a6:	4313      	orrs	r3, r2
 80065a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	041b      	lsls	r3, r3, #16
 80065b6:	4313      	orrs	r3, r2
 80065b8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a16      	ldr	r2, [pc, #88]	@ (8006618 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d004      	beq.n	80065ce <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a14      	ldr	r2, [pc, #80]	@ (800661c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d115      	bne.n	80065fa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065d8:	051b      	lsls	r3, r3, #20
 80065da:	4313      	orrs	r3, r2
 80065dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	69db      	ldr	r3, [r3, #28]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	6a1b      	ldr	r3, [r3, #32]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3714      	adds	r7, #20
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr
 8006618:	40010000 	.word	0x40010000
 800661c:	40010400 	.word	0x40010400

08006620 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <memset>:
 800665c:	4402      	add	r2, r0
 800665e:	4603      	mov	r3, r0
 8006660:	4293      	cmp	r3, r2
 8006662:	d100      	bne.n	8006666 <memset+0xa>
 8006664:	4770      	bx	lr
 8006666:	f803 1b01 	strb.w	r1, [r3], #1
 800666a:	e7f9      	b.n	8006660 <memset+0x4>

0800666c <__libc_init_array>:
 800666c:	b570      	push	{r4, r5, r6, lr}
 800666e:	4d0d      	ldr	r5, [pc, #52]	@ (80066a4 <__libc_init_array+0x38>)
 8006670:	4c0d      	ldr	r4, [pc, #52]	@ (80066a8 <__libc_init_array+0x3c>)
 8006672:	1b64      	subs	r4, r4, r5
 8006674:	10a4      	asrs	r4, r4, #2
 8006676:	2600      	movs	r6, #0
 8006678:	42a6      	cmp	r6, r4
 800667a:	d109      	bne.n	8006690 <__libc_init_array+0x24>
 800667c:	4d0b      	ldr	r5, [pc, #44]	@ (80066ac <__libc_init_array+0x40>)
 800667e:	4c0c      	ldr	r4, [pc, #48]	@ (80066b0 <__libc_init_array+0x44>)
 8006680:	f000 f818 	bl	80066b4 <_init>
 8006684:	1b64      	subs	r4, r4, r5
 8006686:	10a4      	asrs	r4, r4, #2
 8006688:	2600      	movs	r6, #0
 800668a:	42a6      	cmp	r6, r4
 800668c:	d105      	bne.n	800669a <__libc_init_array+0x2e>
 800668e:	bd70      	pop	{r4, r5, r6, pc}
 8006690:	f855 3b04 	ldr.w	r3, [r5], #4
 8006694:	4798      	blx	r3
 8006696:	3601      	adds	r6, #1
 8006698:	e7ee      	b.n	8006678 <__libc_init_array+0xc>
 800669a:	f855 3b04 	ldr.w	r3, [r5], #4
 800669e:	4798      	blx	r3
 80066a0:	3601      	adds	r6, #1
 80066a2:	e7f2      	b.n	800668a <__libc_init_array+0x1e>
 80066a4:	080066ec 	.word	0x080066ec
 80066a8:	080066ec 	.word	0x080066ec
 80066ac:	080066ec 	.word	0x080066ec
 80066b0:	080066f0 	.word	0x080066f0

080066b4 <_init>:
 80066b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066b6:	bf00      	nop
 80066b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ba:	bc08      	pop	{r3}
 80066bc:	469e      	mov	lr, r3
 80066be:	4770      	bx	lr

080066c0 <_fini>:
 80066c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066c2:	bf00      	nop
 80066c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066c6:	bc08      	pop	{r3}
 80066c8:	469e      	mov	lr, r3
 80066ca:	4770      	bx	lr
